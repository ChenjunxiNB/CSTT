[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Audio File: D:/python_code/video_tool/result/cs50/1/CS50x 2023 - Lecture 1 - C.mp4
Video File: D:/python_code/video_tool/result/cs50/1/CS50x 2023 - Lecture 1 - C.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.625000
Scroll Position: 2139
Active Line: 2136
Video Position: 196932

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,13,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.33333,1.33333,2,7,7,7,1
Style: 英文,Arial,19,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,0.888887,0.888887,2,7,7,7,1
Style: 中文,微软雅黑,25,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,7,7,30,1
Style: 中文大字幕,Arial,25,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.33333,1.33333,2,7,7,7,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:01:13.71,0:01:16.15,英文,,0,0,0,,All right, this is CS50.
Dialogue: 0,0:01:16.15,0:01:20.85,英文,,0,0,0,,And this is week one, wherein we continue programming, but we do it in a different language.
Dialogue: 0,0:01:20.85,0:01:25.16,英文,,0,0,0,,Because recall last time, we focused on this graphical language called Scratch.
Dialogue: 0,0:01:25.16,0:01:37.42,英文,,0,0,0,,But we use Scratch not only because it's sort of fun and accessible, but because it allows us to explore a lot of these concepts here, namely functions and conditionals, Boolean expressions, loops, variables, and more, and so indeed,
Dialogue: 0,0:01:37.42,0:01:52.79,英文,,0,0,0,,Even if today's syntax, as we transition to this new language called C, feels a little bit cryptic, maybe a little intimidating at first, and you don't quite see all of the meaning of the symbols beyond the syntax itself, realize that the ideas are ultimately going to be the same.
Dialogue: 0,0:01:52.79,0:02:02.34,英文,,0,0,0,,In fact, as we transition from what was last week a hello world program that looked a little something like this, this week, of course, it's going to now look a little more cryptic.
Dialogue: 0,0:02:02.34,0:02:03.94,英文,,0,0,0,,It's going to look a little something like this.
Dialogue: 0,0:02:03.94,0:02:11.66,英文,,0,0,0,,And now even if you can't quite distinguish what all of the various symbols mean in this code, turns out that at the end of the day, it's indeed going to do what you expect.
Dialogue: 0,0:02:11.66,0:02:15.36,英文,,0,0,0,,It's just going to say hello world on the screen, just like we did in Scratch.
Dialogue: 0,0:02:15.36,0:02:20.12,英文,,0,0,0,,So let's start to apply some terminology to these tokens first.
Dialogue: 0,0:02:20.12,0:02:28.06,英文,,0,0,0,,What we're about to see, what we're about to write, henceforth, we're going to start calling source code, code that you, the human programmer, write is just henceforth called source code.
Dialogue: 0,0:02:28.06,0:02:32.52,英文,,0,0,0,,Doesn't matter if it's Scratch. Doesn't matter if it's C. Doesn't matter if it's Python before long.
Dialogue: 0,0:02:32.52,0:02:37.51,英文,,0,0,0,,Source code is the general term for really what you and I as human programmers will ultimately write.
Dialogue: 0,0:02:37.51,0:02:42.17,英文,,0,0,0,,Of course, computers don't understand source code, it turns out.
Dialogue: 0,0:02:42.17,0:02:47.17,英文,,0,0,0,,Computers don't understand Scratch and puzzle pieces per se or C code like we're about to see.
Dialogue: 0,0:02:47.17,0:02:50.77,英文,,0,0,0,,They only understand this, which we called what last week?
Dialogue: 0,0:02:50.77,0:02:53.08,英文,,0,0,0,,Yeah, so this is binary, zeros and ones.
Dialogue: 0,0:02:53.08,0:02:56.48,英文,,0,0,0,,But really, it's just information represented in binary.
Dialogue: 0,0:02:56.48,0:03:06.77,英文,,0,0,0,,And in fact, the technical term now for patterns of zeros and ones that a computer not only understands how to interpret as letters or numbers or colors or images or more,
Dialogue: 0,0:03:06.77,0:03:12.87,英文,,0,0,0,,But knows how to execute as well, henceforth is going to be called machine code to contrast it with source code.
Dialogue: 0,0:03:12.87,0:03:18.93,英文,,0,0,0,,So whereas you and I, the humans, write source code, it's the computer that ultimately only understands machine code.
Dialogue: 0,0:03:18.93,0:03:31.23,英文,,0,0,0,,And even though we won't get into the details of exactly what pattern of symbols means what, you'll see that in this kind of pattern of zeros and ones, there's going to be numbers. There's going to be letters, but there's also going to be instructions.
Dialogue: 0,0:03:31.23,0:03:36.60,英文,,0,0,0,,Because indeed, computers are really good at doing things, additions, subtraction, moving things in and out of memory.
Dialogue: 0,0:03:36.60,0:03:47.20,英文,,0,0,0,,And suffice it to say that the Macs, the PCs, the other computers of the world have just decided as a society what certain patterns of zeros and ones mean when it comes to operations as well.
Dialogue: 0,0:03:47.20,0:03:49.50,英文,,0,0,0,,So not just data, but instructions.
Dialogue: 0,0:03:49.50,0:03:52.35,英文,,0,0,0,,But those patterns are not something we're going to focus on in a class like this.
Dialogue: 0,0:03:52.35,0:03:59.01,英文,,0,0,0,,We're going to focus on the higher level software side of things, simply assuming that we need to somehow output machine code.
Dialogue: 0,0:03:59.01,0:04:07.10,英文,,0,0,0,,So it turns out, then, that this problem we have to solve, getting from source code to machine code, actually fits into the same paradigm as last time.
Dialogue: 0,0:04:07.10,0:04:11.22,英文,,0,0,0,,But the input, in this case, is going to be source code on the one hand.
Dialogue: 0,0:04:11.22,0:04:15.60,英文,,0,0,0,,That's what you and I ideally will write so that we don't have to write zeros and ones.
Dialogue: 0,0:04:15.60,0:04:21.87,英文,,0,0,0,,But we need to somehow output machine code, because that's what your Macs, PCs, phones are actually going to understand.
Dialogue: 0,0:04:21.87,0:04:27.33,英文,,0,0,0,,Well, it turns out there are special programs in life whose purpose is to do exactly this conversion.
Dialogue: 0,0:04:27.33,0:04:32.46,英文,,0,0,0,,Convert the source code you and I write to the machine code that our phones and computers understand.
Dialogue: 0,0:04:32.46,0:04:35.98,英文,,0,0,0,,And that type of program is going to be called a compiler.
Dialogue: 0,0:04:35.98,0:04:39.40,英文,,0,0,0,,So indeed, today, we'll introduce you to another piece of software.
Dialogue: 0,0:04:39.40,0:04:45.81,英文,,0,0,0,,And these come in many forms. We'll use a popular one here that allows you to convert source code in C.
Dialogue: 0,0:04:45.81,0:04:50.65,英文,,0,0,0,,Two machine code in zeros and ones. Now, you didn't have to do this with Scratch.
Dialogue: 0,0:04:50.65,0:05:00.76,英文,,0,0,0,,In the world of Scratch, it was as simple as clicking the green flag, because essentially, MIT did all of the heavy lifting there, figuring out how to convert these graphical puzzle pieces to the underlying machine code.
Dialogue: 0,0:05:00.76,0:05:06.56,英文,,0,0,0,,But now, starting today, as we begin to study programming and computer science proper, now that power moves to you.
Dialogue: 0,0:05:06.56,0:05:09.57,英文,,0,0,0,,And it's up to you now to do that kind of conversion.
Dialogue: 0,0:05:09.57,0:05:21.78,英文,,0,0,0,,But thankfully, the fact that these compilers exist means that you and I don't have to program in machine code like our ancestors once upon a time did, be it virtually or with physical punch cards, like pieces of paper with holes in them.
Dialogue: 0,0:05:21.78,0:05:25.99,英文,,0,0,0,,You and I get to focus on our keyboard as such.
Dialogue: 0,0:05:25.99,0:05:29.51,英文,,0,0,0,,But it's not just going to be a matter today of writing code.
Dialogue: 0,0:05:29.51,0:05:32.83,英文,,0,0,0,,It's going to be a matter ultimately today onward of writing good code as well.
Dialogue: 0,0:05:32.83,0:05:35.07,英文,,0,0,0,,And this is the kind of thing that you don't just learn overnight.
Dialogue: 0,0:05:35.07,0:05:41.20,英文,,0,0,0,,It takes time. It takes practice, just like writing an essay in any subject might take time and practice an iteration over time.
Dialogue: 0,0:05:41.20,0:05:49.42,英文,,0,0,0,,But in a programming class like CS50, we're going to aspire to evaluate the quality of code along these three axes generally.
Dialogue: 0,0:05:49.42,0:05:51.04,英文,,0,0,0,,Is it correct first and foremost?
Dialogue: 0,0:05:51.04,0:05:52.92,英文,,0,0,0,,Does the code do what it's supposed to do?
Dialogue: 0,0:05:52.92,0:05:55.61,英文,,0,0,0,,After all, if it doesn't, well, what was the point of writing it in the first place?
Dialogue: 0,0:05:55.61,0:05:59.49,英文,,0,0,0,,So it sort of goes without saying that you want code you write to be correct.
Dialogue: 0,0:05:59.49,0:06:00.87,英文,,0,0,0,,And it's obviously not always.
Dialogue: 0,0:06:00.87,0:06:07.04,英文,,0,0,0,,Again, anytime your Mac or PC or phone has crashed, some human somewhere wrote buggy that is code with mistakes.
Dialogue: 0,0:06:07.04,0:06:10.20,英文,,0,0,0,,But code correctness is going to be the first and foremost goal.
Dialogue: 0,0:06:10.20,0:06:13.92,英文,,0,0,0,,But then there's a more subjective goal we'll see in time, a matter of design.
Dialogue: 0,0:06:13.92,0:06:24.25,英文,,0,0,0,,And we saw a little bit of this last week when I proposed that we could design even scratch programs better, maybe by using loops instead of just by copying and pasting the same blocks again and again.
Dialogue: 0,0:06:24.25,0:06:26.09,英文,,0,0,0,,So design is more subjective.
Dialogue: 0,0:06:26.09,0:06:40.30,英文,,0,0,0,,It's more of a learned art whereby two people might ultimately disagree as to which version of a program is better designed, but will give you building blocks and principles over the coming weeks so that you can have a better sense for yourself if your own code is well-designed,
Dialogue: 0,0:06:40.30,0:06:41.48,英文,,0,0,0,,And why is that valuable?
Dialogue: 0,0:06:41.48,0:06:49.27,英文,,0,0,0,,Well, the better designed your code is, often the faster it's going to run, the more maintainable it's going to be by you or colleagues if you're working with others in the real world.
Dialogue: 0,0:06:49.27,0:06:50.81,英文,,0,0,0,,So good design is a good thing.
Dialogue: 0,0:06:50.81,0:06:54.67,英文,,0,0,0,,It helps you communicate your ideas, just like in a typical English essay.
Dialogue: 0,0:06:54.67,0:06:57.61,英文,,0,0,0,,And then lastly, we'll talk this week onward about style.
Dialogue: 0,0:06:57.61,0:06:59.59,英文,,0,0,0,,And this is really just the aesthetics of your code.
Dialogue: 0,0:06:59.59,0:07:07.31,英文,,0,0,0,,It turns out that computers often don't care how sloppy your actual code is, where in the world of code,
Dialogue: 0,0:07:07.31,0:07:10.74,英文,,0,0,0,,It turns out that you don't really need to indent things in a beautiful way.
Dialogue: 0,0:07:10.74,0:07:13.24,英文,,0,0,0,,You don't need to paginate things like you might in an essay.
Dialogue: 0,0:07:13.24,0:07:17.86,英文,,0,0,0,,The computer generally does not care, but the human does. The teaching assistant does.
Dialogue: 0,0:07:17.86,0:07:21.65,英文,,0,0,0,,You will care the next day when you're just trying to understand what your code does.
Dialogue: 0,0:07:21.65,0:07:25.63,英文,,0,0,0,,So we'll focus, lastly, on style, the aesthetics of the code that you're writing.
Dialogue: 0,0:07:25.63,0:07:27.35,英文,,0,0,0,,So where are we going to write code?
Dialogue: 0,0:07:27.35,0:07:28.99,英文,,0,0,0,,Where are we going to compile code?
Dialogue: 0,0:07:28.99,0:07:39.27,英文,,0,0,0,,So for this class, not only with C, but the other languages we use later in the term, we're going to use a free text editor that is program called Visual Studio Code, a.k.a. VS Code.
Dialogue: 0,0:07:39.27,0:07:46.08,英文,,0,0,0,,It's super popular nowadays, not just for C, but for C++ and Python and Java and any number of other languages.
Dialogue: 0,0:07:46.08,0:07:52.32,英文,,0,0,0,,It's a text editor in the sense that it lets you edit text. And that's all code is going to be.
Dialogue: 0,0:07:52.32,0:07:55.42,英文,,0,0,0,,Now, strictly speaking, you could write code on paper pencil.
Dialogue: 0,0:07:55.42,0:07:59.84,英文,,0,0,0,,In fact, in high school, if you took a class, you might have done that one or more times as sort of an in-class exercise.
Dialogue: 0,0:07:59.84,0:08:02.66,英文,,0,0,0,,You can't run it on paper, of course, but you could write it, certainly.
Dialogue: 0,0:08:02.66,0:08:07.43,英文,,0,0,0,,You could use something like Microsoft Word or Notepad.exe or TextEdit on the Mac.
Dialogue: 0,0:08:07.43,0:08:15.27,英文,,0,0,0,,But none of those programs are really designed to format the code in the best way for you, nor are they designed to let you compile and run the code.
Dialogue: 0,0:08:15.27,0:08:19.61,英文,,0,0,0,,So VSCode is going to be a tool via which you can do all that and more.
Dialogue: 0,0:08:19.61,0:08:22.54,英文,,0,0,0,,Write the code, compile the code, run the code.
Dialogue: 0,0:08:22.54,0:08:34.90,英文,,0,0,0,,So that you all don't have to wrestle with stupid technical support headaches at the beginning of the course by installing this software and that on your Macs or PCs, we'll use a cloud-based version of VS Code at code.cs50.io.
Dialogue: 0,0:08:34.90,0:08:36.56,英文,,0,0,0,,And that's going to be the exact same tool.
Dialogue: 0,0:08:36.56,0:08:46.20,英文,,0,0,0,,And the goal then is by the end of the semester to sort of migrate you off of that cloud-based environment to your own Mac and PC so that even if CS50 is the only CS class you ever take,
Dialogue: 0,0:08:46.20,0:08:55.87,英文,,0,0,0,,You're 100% equipped to continue writing code after the class using not something that's even CS50 specific, but a de facto industry standard, at least for some time.
Dialogue: 0,0:08:55.87,0:09:01.16,英文,,0,0,0,,So what's this program VS Code going to look like, be it on your Mac PC or initially in your browser?
Dialogue: 0,0:09:01.16,0:09:05.52,英文,,0,0,0,,And it's going to look a little something like this. And there's going to be several different regions to the screen.
Dialogue: 0,0:09:05.52,0:09:12.56,英文,,0,0,0,,And pictured here is that very same code I keep proposing is the simplest program you can write in C. And what are these different regions of the screen?
Dialogue: 0,0:09:12.56,0:09:15.38,英文,,0,0,0,,Well, there's essentially these four here.
Dialogue: 0,0:09:15.38,0:09:21.16,英文,,0,0,0,,So first, highlighted up top is going to be one or more tabs where you're going to actually write code.
Dialogue: 0,0:09:21.16,0:09:25.11,英文,,0,0,0,,So much like in Google Docs or Microsoft Word, you can have tabs open with files.
Dialogue: 0,0:09:25.11,0:09:30.89,英文,,0,0,0,,Similarly, in VS Code, or really any programming environment, you generally nowadays have tabs of some sort.
Dialogue: 0,0:09:30.89,0:09:34.63,英文,,0,0,0,,And this is going to be a tab containing a file, it seems, called hello.c.
Dialogue: 0,0:09:34.63,0:09:38.12,英文,,0,0,0,,And that's going to be the very first file we write in just a moment.
Dialogue: 0,0:09:38.12,0:09:41.44,英文,,0,0,0,,Down here, though, is going to be an interface that many of you might not
Dialogue: 0,0:09:41.44,0:09:44.34,英文,,0,0,0,,No, this is what's called a terminal window.
Dialogue: 0,0:09:44.34,0:09:49.88,英文,,0,0,0,,And a terminal window provides what's generally called a command line interface, or CLI.
Dialogue: 0,0:09:49.88,0:09:53.78,英文,,0,0,0,,And this is in contrast with a graphical user interface, or GUI.
Dialogue: 0,0:09:53.78,0:09:57.74,英文,,0,0,0,,Now, you and I, every day, are using GUIs on our phones, on our PCs.
Dialogue: 0,0:09:57.74,0:10:01.49,英文,,0,0,0,,And a GUI is literally graphical, so menus and buttons and icons.
Dialogue: 0,0:10:01.49,0:10:06.45,英文,,0,0,0,,And you generally use your finger or a trackpad or a mouse or something like that to interact with it.
Dialogue: 0,0:10:06.45,0:10:20.65,英文,,0,0,0,,But it turns out that many programmers, they're saying most programmers, at least over time, come to prefer not a GUI, but a CLI, a command line interface, where you actually do everything somewhat arcanely via keyboard alone.
Dialogue: 0,0:10:20.65,0:10:21.27,英文,,0,0,0,,Why?
Dialogue: 0,0:10:21.27,0:10:26.33,英文,,0,0,0,,Well, it turns out there's just more features built into most computers if you can access them with a keyboard.
Dialogue: 0,0:10:26.33,0:10:29.52,英文,,0,0,0,,Turns out most of us can type faster than you can point and click.
Dialogue: 0,0:10:29.52,0:10:32.44,英文,,0,0,0,,And so that ends up being an efficiency gain over time.
Dialogue: 0,0:10:32.44,0:10:40.40,英文,,0,0,0,,So in time, will you get comfortable using this terminal window to do things like compile your code or make your program as well as run it?
Dialogue: 0,0:10:40.40,0:10:45.68,英文,,0,0,0,,So you won't be in the habit initially of just double-clicking icons like we do in our typical real world.
Dialogue: 0,0:10:45.68,0:10:48.06,英文,,0,0,0,,You'll do it sort of the programmer's way.
Dialogue: 0,0:10:48.06,0:10:51.98,英文,,0,0,0,,But it's not to the exclusion of adding icons and clickability and more.
Dialogue: 0,0:10:51.98,0:11:02.24,英文,,0,0,0,,On the left-hand side of VS Code, there's going to be a somewhat familiar file explorer, some kind of hierarchical tree, like on your Mac or PC, where you can see all of the files in your account.
Dialogue: 0,0:11:02.24,0:11:06.19,英文,,0,0,0,,Pictured here, for instance, is just hello.c, which I'll create myself in a moment.
Dialogue: 0,0:11:06.19,0:11:09.49,英文,,0,0,0,,And then far away on the left is the so-called activity bar.
Dialogue: 0,0:11:09.49,0:11:12.27,英文,,0,0,0,,And this is where you just get a lot of traditional menus and buttons.
Dialogue: 0,0:11:12.27,0:11:16.43,英文,,0,0,0,,So VSCode itself gives you both a GUI and a CLI.
Dialogue: 0,0:11:16.43,0:11:22.22,英文,,0,0,0,,But it's within the CLI, the terminal window, the bottom region of the screen that we're actually going to type most of our commands.
Dialogue: 0,0:11:22.22,0:11:28.50,英文,,0,0,0,,And in general, in class, I'm going to hide all of the graphical stuff that's just not of all that much interest.
Dialogue: 0,0:11:28.50,0:11:32.99,英文,,0,0,0,,So with that said, let me actually change over to a live version of VS Code.
Dialogue: 0,0:11:32.99,0:11:34.67,英文,,0,0,0,,And I've indeed hidden the activity bar.
Dialogue: 0,0:11:34.67,0:11:36.61,英文,,0,0,0,,I've indeed hidden the file explorer.
Dialogue: 0,0:11:36.61,0:11:42.83,英文,,0,0,0,,So what I have here for visibility's sake is a really big area for writing code and a really big terminal window at the bottom.
Dialogue: 0,0:11:42.83,0:11:45.26,英文,,0,0,0,,You'll see in the terminal window, there's a dollar sign.
Dialogue: 0,0:11:45.26,0:11:47.14,英文,,0,0,0,,And this doesn't mean any form of currency.
Dialogue: 0,0:11:47.14,0:11:51.20,英文,,0,0,0,,This is just the standard symbol that represents type commands here.
Dialogue: 0,0:11:51.20,0:11:55.64,英文,,0,0,0,,So the fact that there's just a dollar sign and a cursor means eventually that's where I'm going to type commands.
Dialogue: 0,0:11:55.64,0:11:58.12,英文,,0,0,0,,But first, I'm going to actually create some code.
Dialogue: 0,0:11:58.12,0:12:08.86,英文,,0,0,0,,So how might I program using VS Code, be it on my Mac PC or in this cloud-based environment that you'll get set up for problem set one, go about writing my first file?
Dialogue: 0,0:12:08.86,0:12:10.74,英文,,0,0,0,,Well, perhaps the easiest way is this.
Dialogue: 0,0:12:10.74,0:12:12.70,英文,,0,0,0,,Literally run the command code.
Dialogue: 0,0:12:12.70,0:12:15.37,英文,,0,0,0,,And then the name of the file you want to create
Dialogue: 0,0:12:15.37,0:12:18.91,英文,,0,0,0,,Notice that I deliberately end the file with .c, in lowercase.
Dialogue: 0,0:12:18.91,0:12:21.33,英文,,0,0,0,,Notice that I deliberately lowercase the whole file name.
Dialogue: 0,0:12:21.33,0:12:22.77,英文,,0,0,0,,And these are just conventions.
Dialogue: 0,0:12:22.77,0:12:27.39,英文,,0,0,0,,You could use a capital H. You kind of could use a capital C. But just don't do that.
Dialogue: 0,0:12:27.39,0:12:31.25,英文,,0,0,0,,Follow best practices so that it's consistent with what most everyone else would do.
Dialogue: 0,0:12:31.25,0:12:32.63,英文,,0,0,0,,When I hit Enter.
Dialogue: 0,0:12:32.63,0:12:35.65,英文,,0,0,0,,I just get an empty tab, just like the screenshot a moment ago.
Dialogue: 0,0:12:35.65,0:12:46.16,英文,,0,0,0,,And it's in this tab where I can now write my very first program in C. Unfortunately, it's not quite as user friendly as Scratch, where you drag and drop a couple of puzzle pieces, and boom, it's done.
Dialogue: 0,0:12:46.16,0:12:50.08,英文,,0,0,0,,So I'm going to do this from memory, but this too will become familiar to you over time.
Dialogue: 0,0:12:50.08,0:12:53.81,英文,,0,0,0,,I'm going to include something called standardio.h.
Dialogue: 0,0:12:53.81,0:12:57.37,英文,,0,0,0,,I'm going to type int main void in parentheses.
Dialogue: 0,0:12:57.37,0:13:01.31,英文,,0,0,0,,On a new line, I'm going to insert some curly braces, as we'll call them.
Dialogue: 0,0:13:01.31,0:13:14.38,英文,,0,0,0,,And then I'm going to type printf, and then some parentheses, and then in quotes, hello, comma, world, then a backslash, then a lowercase n, then a close quote, and then a semicolon at the very end of the line.
Dialogue: 0,0:13:14.38,0:13:19.03,英文,,0,0,0,,So all I've done is recreate just from memory that very first program.
Dialogue: 0,0:13:19.03,0:13:21.71,英文,,0,0,0,,In a little bit, we'll make clear what most of this does.
Dialogue: 0,0:13:21.71,0:13:24.00,英文,,0,0,0,,But for now, let's just actually run this thing.
Dialogue: 0,0:13:24.00,0:13:29.98,英文,,0,0,0,,And just like I clicked the green flag last week for the first time, let's actually compile and run this program.
Dialogue: 0,0:13:29.98,0:13:37.33,英文,,0,0,0,,If it were your Mac or PC and Google or Microsoft or someone else had made the software, at this point in the story, we'd be double clicking an icon.
Dialogue: 0,0:13:37.33,0:13:38.55,英文,,0,0,0,,But we can't do that yet.
Dialogue: 0,0:13:38.55,0:13:39.97,英文,,0,0,0,,This is still source code.
Dialogue: 0,0:13:39.97,0:13:42.55,英文,,0,0,0,,So I'm going to click back down in my terminal window.
Dialogue: 0,0:13:42.55,0:13:48.01,英文,,0,0,0,,Notice I have a second dollar sign below the first, which just means it's ready for a second command.
Dialogue: 0,0:13:48.01,0:13:57.20,英文,,0,0,0,,And now the command via which to make this an actual program, to compile it from source code to machine code, is going to be, quite simply, make.
Dialogue: 0,0:13:57.20,0:13:59.40,英文,,0,0,0,,And then the name of the program I want to make.
Dialogue: 0,0:13:59.40,0:14:05.70,英文,,0,0,0,,Slight subtlety, I'm omitting deliberately dot C, because the program I want to make, I just want to call hello.
Dialogue: 0,0:14:05.70,0:14:08.93,英文,,0,0,0,,So don't write make hello dot C. Just write make hello.
Dialogue: 0,0:14:08.93,0:14:13.05,英文,,0,0,0,,And this program make is essentially our compiler.
Dialogue: 0,0:14:13.05,0:14:17.61,英文,,0,0,0,,Technically speaking, it's a program that automates the compilation of my program for me.
Dialogue: 0,0:14:17.61,0:14:20.31,英文,,0,0,0,,But it is going to see that I've typed the word hello.
Dialogue: 0,0:14:20.31,0:14:25.28,英文,,0,0,0,,It's going to automatically look now for a file on the hard drive called hello dot C.
Dialogue: 0,0:14:25.28,0:14:30.77,英文,,0,0,0,,And convert it from source code in C to machine code in 0's and 1's.
Dialogue: 0,0:14:30.77,0:14:35.16,英文,,0,0,0,,So if I didn't make any typos, Enter.
Dialogue: 0,0:14:35.16,0:14:38.24,英文,,0,0,0,,Nothing seems to happen, and that's a good thing.
Dialogue: 0,0:14:38.24,0:14:42.06,英文,,0,0,0,,Almost always, if nothing gets outputted on the screen, you did good.
Dialogue: 0,0:14:42.06,0:14:43.04,英文,,0,0,0,,You didn't make any mistakes.
Dialogue: 0,0:14:43.04,0:14:43.86,英文,,0,0,0,,You didn't get yelled at.
Dialogue: 0,0:14:43.86,0:14:44.90,英文,,0,0,0,,There's no error messages.
Dialogue: 0,0:14:44.90,0:14:46.66,英文,,0,0,0,,So this is actually a good thing.
Dialogue: 0,0:14:46.66,0:14:48.18,英文,,0,0,0,,How do I now run this program?
Dialogue: 0,0:14:48.18,0:14:52.17,英文,,0,0,0,,Well, notice I've got a third dollar sign, which just means I'm ready for a third command.
Dialogue: 0,0:14:52.17,0:14:55.53,英文,,0,0,0,,And now I'm going to go ahead and run ./hello.
Dialogue: 0,0:14:55.53,0:14:58.65,英文,,0,0,0,,And this is admittedly a little weird that you have to do ./.
Dialogue: 0,0:14:58.65,0:15:04.67,英文,,0,0,0,,But for now, just take on faith that this is how you run a program called hello in your current folder.
Dialogue: 0,0:15:04.67,0:15:07.86,英文,,0,0,0,,in your current directory in this cloud-based environment.
Dialogue: 0,0:15:07.86,0:15:16.22,英文,,0,0,0,,All right, crossing my fingers again, hitting Enter, and voila, my very first program in C. Hello, world.
Dialogue: 0,0:15:16.22,0:15:21.52,英文,,0,0,0,,And now let me go ahead and reveal the file explorer that I proposed exist earlier.
Dialogue: 0,0:15:21.52,0:15:23.88,英文,,0,0,0,,I'm just going to use the keyboard shortcut to reveal that.
Dialogue: 0,0:15:23.88,0:15:28.38,英文,,0,0,0,,And generally, I keep it closed because I don't really need to know constantly what files are in my account.
Dialogue: 0,0:15:28.38,0:15:33.55,英文,,0,0,0,,But you'll see now in the File Explorer, similar in spirit to a Mac or PC, but graphically a little different.
Dialogue: 0,0:15:33.55,0:15:35.39,英文,,0,0,0,,Here's my file, hello.c.
Dialogue: 0,0:15:35.39,0:15:37.67,英文,,0,0,0,,It's highlighted because I have that tab open.
Dialogue: 0,0:15:37.67,0:15:41.15,英文,,0,0,0,,But now there's a second file here, which I'll hold just hello.
Dialogue: 0,0:15:41.15,0:15:42.57,英文,,0,0,0,,That's the name of my program.
Dialogue: 0,0:15:42.57,0:15:46.21,英文,,0,0,0,,So if you were on a Mac or PC, you would ideally double click that thing.
Dialogue: 0,0:15:46.21,0:15:48.13,英文,,0,0,0,,You can't do that in a command line environment.
Dialogue: 0,0:15:48.13,0:15:49.49,英文,,0,0,0,,You have to run it down here.
Dialogue: 0,0:15:49.49,0:15:50.47,英文,,0,0,0,,But that's all we've done.
Dialogue: 0,0:15:50.47,0:15:52.61,英文,,0,0,0,,We've created a file called hello.c.
Dialogue: 0,0:15:52.61,0:15:56.26,英文,,0,0,0,,And then my compiler made the program from that.
Dialogue: 0,0:15:56.26,0:16:01.95,英文,,0,0,0,,Let me pause here and see if there's any questions, because it's a lot of magical phrases.
Dialogue: 0,0:16:01.95,0:16:04.69,英文,,0,0,0,,Yeah.
Dialogue: 0,0:16:04.69,0:16:14.12,英文,,0,0,0,,Yeah, so if you're currently following along, playing along at home, and you're getting some kind of error message, part of today will be for me to deliberately induce some of those error messages.
Dialogue: 0,0:16:14.12,0:16:19.46,英文,,0,0,0,,For now, let me just propose that if you literally did what I did, you must have made a typo somewhere.
Dialogue: 0,0:16:19.46,0:16:26.89,英文,,0,0,0,,And notice that it's indeed standard I-O, S-T-D-I-O dot H. Maybe you typed Studio.h.
Dialogue: 0,0:16:26.89,0:16:30.67,英文,,0,0,0,,Super common mistake, if I could call you out.
Dialogue: 0,0:16:30.67,0:16:32.25,英文,,0,0,0,,It is not studio.h.
Dialogue: 0,0:16:32.25,0:16:33.97,英文,,0,0,0,,It is standard io.h.
Dialogue: 0,0:16:33.97,0:16:41.92,英文,,0,0,0,,So common, but this is exactly representative of the kind of stupid headaches you're going to run into this week, probably for a few weeks, probably honestly for a few years.
Dialogue: 0,0:16:41.92,0:16:49.14,英文,,0,0,0,,But you start to see past these sort of stupid mistakes over time, and it just gets easier and easier because the computer is going to be so regimented.
Dialogue: 0,0:16:49.14,0:16:50.98,英文,,0,0,0,,It will only do what you tell it to do.
Dialogue: 0,0:16:50.98,0:16:55.86,英文,,0,0,0,,And if you say, because it verbally sounds like studio.h, it's not going to know what the file is.
Dialogue: 0,0:16:55.86,0:16:58.07,英文,,0,0,0,,So actually, thank you for tripping over that so early.
Dialogue: 0,0:16:58.07,0:16:59.81,英文,,0,0,0,,That's super common to happen.
Dialogue: 0,0:16:59.81,0:17:02.18,英文,,0,0,0,,Yeah.
Dialogue: 0,0:17:02.18,0:17:04.62,英文,,0,0,0,,So why do I have two hello files?
Dialogue: 0,0:17:04.62,0:17:06.22,英文,,0,0,0,,So why do I have two hello files?
Dialogue: 0,0:17:06.22,0:17:10.69,英文,,0,0,0,,One is the one I created as the human called hello.c, and it's pictured right here.
Dialogue: 0,0:17:10.69,0:17:17.11,英文,,0,0,0,,But then when I ran make hello, that process compiled my source code into machine code.
Dialogue: 0,0:17:17.11,0:17:25.80,英文,,0,0,0,,So this second file just called hello is the file that contains all of those zeros and ones that the server actually understands.
Dialogue: 0,0:17:25.80,0:17:30.23,英文,,0,0,0,,All right, so yeah, question?
Dialogue: 0,0:17:30.23,0:17:38.76,英文,,0,0,0,,If you try clicking on the Hello file, you'll see in this environment of VS code, quote unquote, the file is not displayed in the editor because it is either binary, a.k.a.
Dialogue: 0,0:17:38.76,0:17:41.50,英文,,0,0,0,,zeros and ones, or uses an unsupported text encoding.
Dialogue: 0,0:17:41.50,0:17:42.52,英文,,0,0,0,,In this case, it's binary.
Dialogue: 0,0:17:42.52,0:17:43.88,英文,,0,0,0,,It's zeros and ones.
Dialogue: 0,0:17:43.88,0:17:47.69,英文,,0,0,0,,Now, you could use software to see those zeros and ones.
Dialogue: 0,0:17:47.69,0:17:50.49,英文,,0,0,0,,It won't be intellectually enlightening to most any human.
Dialogue: 0,0:17:50.49,0:17:53.31,英文,,0,0,0,,So VS code just takes the choice of not showing it to you at all.
Dialogue: 0,0:17:53.31,0:17:56.47,英文,,0,0,0,,So that would be a common mistake, too, clicking on a file you don't intend.
Dialogue: 0,0:17:56.47,0:18:00.29,英文,,0,0,0,,But the source code is indeed going to be editable by us.
Dialogue: 0,0:18:00.29,0:18:01.89,英文,,0,0,0,,All right, so I've written this program.
Dialogue: 0,0:18:01.89,0:18:04.75,英文,,0,0,0,,It seems to sort of magically work, at least with some effort.
Dialogue: 0,0:18:04.75,0:18:09.43,英文,,0,0,0,,If you get every single keystroke right, well, what is it that's going on and how is this working?
Dialogue: 0,0:18:09.43,0:18:17.79,英文,,0,0,0,,Well, first of all, notice that even without my highlighting things or choosing buttons from menus, notice that it's already kind of color-coded.
Dialogue: 0,0:18:17.79,0:18:22.63,英文,,0,0,0,,And yet I wasn't highlighting along the way in sort of Google Docs style changing the color, certainly.
Dialogue: 0,0:18:22.63,0:18:29.70,英文,,0,0,0,,Well, it turns out what VS Code and most programming environments nowadays do for you automatically is syntax highlighting.
Dialogue: 0,0:18:29.70,0:18:36.96,英文,,0,0,0,,So syntax highlighting is just this feature of typical text editors nowadays that analyzes the code that you've typed.
Dialogue: 0,0:18:36.96,0:18:48.10,英文,,0,0,0,,And when it notices certain types of keystrokes, things that represent functions or conditionals or loops or variables, a lot of the vocab from last week, it just highlights it ever so differently for you.
Dialogue: 0,0:18:48.10,0:18:51.55,英文,,0,0,0,,So main, for instance, which we'll soon see, is in purple here.
Dialogue: 0,0:18:51.55,0:18:54.03,英文,,0,0,0,,Int and void and include are in red.
Dialogue: 0,0:18:54.03,0:18:55.65,英文,,0,0,0,,Hello, world is in blue.
Dialogue: 0,0:18:55.65,0:18:57.27,英文,,0,0,0,,My parentheses are in green.
Dialogue: 0,0:18:57.27,0:18:59.29,英文,,0,0,0,,This will totally vary by program or two.
Dialogue: 0,0:18:59.29,0:19:07.10,英文,,0,0,0,,In fact, if you do want to change these colors for problem set one for your own environment, you can poke around VS Code settings via the gear icon.
Dialogue: 0,0:19:07.10,0:19:10.02,英文,,0,0,0,,You can change to a different color theme.
Dialogue: 0,0:19:10.02,0:19:13.64,英文,,0,0,0,,Syntax highlighting isn't some specific color scheme like it is in Scratch.
Dialogue: 0,0:19:13.64,0:19:16.63,英文,,0,0,0,,It just generally is to each human their own preference.
Dialogue: 0,0:19:16.63,0:19:20.99,英文,,0,0,0,,But that's all that's happening here is this notion of syntax highlighting at the moment.
Dialogue: 0,0:19:20.99,0:19:25.61,英文,,0,0,0,,Well, what more is going on in this code before I run it, but rather write it?
Dialogue: 0,0:19:25.61,0:19:27.23,英文,,0,0,0,,Well, it looks a little something like this.
Dialogue: 0,0:19:27.23,0:19:32.64,英文,,0,0,0,,If I take away all of the colors, and then just for discussion's sake, let me go ahead and color it a little more like Scratch.
Dialogue: 0,0:19:32.64,0:19:45.27,英文,,0,0,0,,Recall that our very first Scratch program that just said hello world on the screen had a when green flag clicked puzzle piece, roughly an orange, and then a purple say block beneath it.
Dialogue: 0,0:19:45.27,0:19:48.99,英文,,0,0,0,,So whereas this is the C version, if we rewind to last week,
Dialogue: 0,0:19:48.99,0:19:50.98,英文,,0,0,0,,This was the same program in Scratch.
Dialogue: 0,0:19:50.98,0:19:53.00,英文,,0,0,0,,But what's happening now is exactly the same.
Dialogue: 0,0:19:53.00,0:20:03.37,英文,,0,0,0,,So if you think back to last week and you've got some function, like the say function in purple, that might take one or more arguments, like inputs that influences what it says on the screen.
Dialogue: 0,0:20:03.37,0:20:06.57,英文,,0,0,0,,And then functions, recall, can sometimes have side effects, right?
Dialogue: 0,0:20:06.57,0:20:08.41,英文,,0,0,0,,Like the speech bubble appears on the screen.
Dialogue: 0,0:20:08.41,0:20:18.88,英文,,0,0,0,,So last week, when we used the say block and we passed in an argument of hello, world at left, we got this visual side effect on the screen that says now, hello, world in the speech bubble.
Dialogue: 0,0:20:18.88,0:20:23.42,英文,,0,0,0,,That's exactly what just happened in VS Code, but much, much more textually.
Dialogue: 0,0:20:23.42,0:20:25.93,英文,,0,0,0,,And let's look a little closer now at the code itself.
Dialogue: 0,0:20:25.93,0:20:31.49,英文,,0,0,0,,Let me wave my hand at the equivalent of the when green flag clicked part of my code.
Dialogue: 0,0:20:31.49,0:20:38.62,英文,,0,0,0,,And let's focus only on the say block in Scratch and the corresponding function
Dialogue: 0,0:20:38.62,0:20:47.19,英文,,0,0,0,,So if I step through this and I wanted to convert what we did last week with a save block to C, I would first use the print function.
Dialogue: 0,0:20:47.19,0:20:50.45,英文,,0,0,0,,Although that's actually a bit of a white lie, it's actually the printf function.
Dialogue: 0,0:20:50.45,0:20:55.43,英文,,0,0,0,,Printf means formatted, and it's just a function that allows you to format text on the screen.
Dialogue: 0,0:20:55.43,0:20:58.59,英文,,0,0,0,,There is no say function in C. There's a printf function.
Dialogue: 0,0:20:58.59,0:21:08.26,英文,,0,0,0,,What MIT did down the road years ago was they took what existed historically as printf, and they simplified it for a broader audience by just calling it essentially say instead.
Dialogue: 0,0:21:08.26,0:21:16.29,英文,,0,0,0,,But notice that now, if I want to convert the Scratch code at left to C code at right, it's sort of the same shape.
Dialogue: 0,0:21:16.29,0:21:23.57,英文,,0,0,0,,So MIT deliberately used this white oval, if only because it kind of conjures this idea of having parentheses, too.
Dialogue: 0,0:21:23.57,0:21:31.49,英文,,0,0,0,,So on the right, if I want to pass an argument or an input to the printf function, I use an open parenthesis and a close parenthesis.
Dialogue: 0,0:21:31.49,0:21:37.54,英文,,0,0,0,,In those parentheses, I then type whatever it is I want to print on the screen, in this case, hello comma world.
Dialogue: 0,0:21:37.54,0:21:52.09,英文,,0,0,0,,But notice I've deliberately left some room because you need some extra keystrokes in the world of C. Anytime you type out some text, otherwise known as a string of text, to use computer science jargon, you need to quote it, in this case with double quotes.
Dialogue: 0,0:21:52.09,0:21:54.74,英文,,0,0,0,,Double quote at the left, double quote at the right.
Dialogue: 0,0:21:54.74,0:22:05.60,英文,,0,0,0,,And notice, too, I'm going to include some slightly cryptic symbol here, too, backslash n, which I also typed and said verbally earlier, and then one last nuisance at the end of this, which is a semicolon.
Dialogue: 0,0:22:05.60,0:22:09.02,英文,,0,0,0,,So suffice it to say, this is why we start with Scratch.
Dialogue: 0,0:22:09.02,0:22:10.96,英文,,0,0,0,,This, drag and drop, you're good to go.
Dialogue: 0,0:22:10.96,0:22:16.30,英文,,0,0,0,,In a language like C, printf, parenthesis, double quotes, the text you want, backslash n, semicolon.
Dialogue: 0,0:22:16.30,0:22:19.06,英文,,0,0,0,,At the end, there's just so much syntactic overhead.
Dialogue: 0,0:22:19.06,0:22:21.16,英文,,0,0,0,,But at the end of the day, it's just a function.
Dialogue: 0,0:22:21.16,0:22:27.31,英文,,0,0,0,,And you'll get used to these sort of nuisances, like the parentheses, the quotes, the semicolon, and the like.
Dialogue: 0,0:22:27.31,0:22:30.33,英文,,0,0,0,,But things can very easily go wrong.
Dialogue: 0,0:22:30.33,0:22:33.27,英文,,0,0,0,,And it's very easy to make mistakes, even with lines of code like this.
Dialogue: 0,0:22:33.27,0:22:34.09,英文,,0,0,0,,So let me do this.
Dialogue: 0,0:22:34.09,0:22:37.18,英文,,0,0,0,,Let me go back to VS Code, where I have the exact same code.
Dialogue: 0,0:22:37.18,0:22:40.82,英文,,0,0,0,,Notice that on line 5 is exactly that line of code.
Dialogue: 0,0:22:40.82,0:22:43.04,英文,,0,0,0,,So this is the equivalent of the say block.
Dialogue: 0,0:22:43.04,0:22:50.09,英文,,0,0,0,,And let's consider what mistakes I make early on, or even now, 20 years later after learning this, that are quite common in general.
Dialogue: 0,0:22:50.09,0:22:52.37,英文,,0,0,0,,Suppose I forget the semicolon there.
Dialogue: 0,0:22:52.37,0:22:53.41,英文,,0,0,0,,So easy to do.
Dialogue: 0,0:22:53.41,0:22:55.03,英文,,0,0,0,,You will do this eventually.
Dialogue: 0,0:22:55.03,0:23:00.07,英文,,0,0,0,,Let's see what happens now when I go back to my terminal window and try to compile my code again.
Dialogue: 0,0:23:00.07,0:23:02.72,英文,,0,0,0,,Just to keep things tidy, I'm going to clear my screen.
Dialogue: 0,0:23:02.72,0:23:06.62,英文,,0,0,0,,But that's just for lecture's sake, so that we can focus only on the most recent command.
Dialogue: 0,0:23:06.62,0:23:10.14,英文,,0,0,0,,But I'm going to go ahead now and rerun make hello.
Dialogue: 0,0:23:10.14,0:23:13.70,英文,,0,0,0,,This will ensure that my program is recompiled.
Dialogue: 0,0:23:13.70,0:23:14.94,英文,,0,0,0,,And this is a manual process.
Dialogue: 0,0:23:14.94,0:23:16.15,英文,,0,0,0,,I changed my code.
Dialogue: 0,0:23:16.15,0:23:18.67,英文,,0,0,0,,The 0's and 1's on the hard drive have not changed.
Dialogue: 0,0:23:18.67,0:23:22.05,英文,,0,0,0,,I need to recompile it to output the latest machine code.
Dialogue: 0,0:23:22.05,0:23:24.77,英文,,0,0,0,,So here we go. I'm going to hit Enter, crossing my fingers as before.
Dialogue: 0,0:23:24.77,0:23:29.36,英文,,0,0,0,,But again, I remove the semicolon by accident.
Dialogue: 0,0:23:29.36,0:23:33.67,英文,,0,0,0,,Oh my god, there's like more lines of errors now than there are of actual code.
Dialogue: 0,0:23:33.67,0:23:35.89,英文,,0,0,0,,And this too takes some getting used to.
Dialogue: 0,0:23:35.89,0:23:42.93,英文,,0,0,0,,The programs we're using were not necessarily written with the least comfortable audience in mind, but really professional programmers back in the day.
Dialogue: 0,0:23:42.93,0:23:47.70,英文,,0,0,0,,But through practice, and through experience, and through mistakes, you'll start to notice patterns here too.
Dialogue: 0,0:23:47.70,0:23:49.18,英文,,0,0,0,,So here's what I typed.
Dialogue: 0,0:23:49.18,0:23:51.46,英文,,0,0,0,,Make hello after the dollar sign prompt.
Dialogue: 0,0:23:51.46,0:23:53.60,英文,,0,0,0,,Now I get yelled at with as follows.
Dialogue: 0,0:23:53.60,0:23:56.98,英文,,0,0,0,,Hello.c colon 5 colon 29.
Dialogue: 0,0:23:56.98,0:23:58.56,英文,,0,0,0,,Well, what's that referring to?
Dialogue: 0,0:23:58.56,0:24:03.57,英文,,0,0,0,,I've screwed up somewhere on line 5 on the 29th character on that line.
Dialogue: 0,0:24:03.57,0:24:07.23,英文,,0,0,0,,Generally, the specific character is not that useful unless you actually want to count it out.
Dialogue: 0,0:24:07.23,0:24:08.79,英文,,0,0,0,,But line 5 is a good clue.
Dialogue: 0,0:24:08.79,0:24:09.15,英文,,0,0,0,,Why?
Dialogue: 0,0:24:09.15,0:24:11.87,英文,,0,0,0,,It means I screwed up somewhere on line 5 here.
Dialogue: 0,0:24:11.87,0:24:13.47,英文,,0,0,0,,All right, well, what is the error?
Dialogue: 0,0:24:13.47,0:24:16.31,英文,,0,0,0,,Expected a semicolon after expression.
Dialogue: 0,0:24:16.31,0:24:20.05,英文,,0,0,0,,And this error is actually pretty obvious now that I see it and I realize, oh, wait a minute.
Dialogue: 0,0:24:20.05,0:24:21.72,英文,,0,0,0,,All right, here's my line of code.
Dialogue: 0,0:24:21.72,0:24:30.82,英文,,0,0,0,,Here in sort of ASCII art, so to speak, text representing graphics, it wants me to put in green here the semicolon at the end of that line.
Dialogue: 0,0:24:30.82,0:24:33.84,英文,,0,0,0,,One error generated, built in, so some esoteric stuff there.
Dialogue: 0,0:24:33.84,0:24:36.36,英文,,0,0,0,,But my program did not compile.
Dialogue: 0,0:24:36.36,0:24:39.58,英文,,0,0,0,,When you see an error like this, it means it did not work.
Dialogue: 0,0:24:39.58,0:24:40.34,英文,,0,0,0,,So what's the fix?
Dialogue: 0,0:24:40.34,0:24:45.59,英文,,0,0,0,,Well, obviously, the fix is to go back up here, put the semicolon there.
Dialogue: 0,0:24:45.59,0:24:51.17,英文,,0,0,0,,And now, if I recompile my code with make hello, I won't clear my screen just yet just to show you the difference.
Dialogue: 0,0:24:51.17,0:24:53.11,英文,,0,0,0,,Now, it just worked.
Dialogue: 0,0:24:53.11,0:24:55.47,英文,,0,0,0,,So we're back in business as before.
Dialogue: 0,0:24:55.47,0:25:02.28,英文,,0,0,0,,All right, let me pause here, though, and ask if there's any questions about what I just did.
Dialogue: 0,0:25:02.28,0:25:04.52,英文,,0,0,0,,These error messages will become frequent initially.
Dialogue: 0,0:25:04.52,0:25:09.54,英文,,0,0,0,,Yeah.
Dialogue: 0,0:25:09.54,0:25:10.28,英文,,0,0,0,,Really good question.
Dialogue: 0,0:25:10.28,0:25:12.96,英文,,0,0,0,,Do you need a semicolon after every line or just some?
Dialogue: 0,0:25:12.96,0:25:14.48,英文,,0,0,0,,It turns out just some.
Dialogue: 0,0:25:14.48,0:25:18.49,英文,,0,0,0,,This is something you'll learn through practice, through demonstrations and examples today.
Dialogue: 0,0:25:18.49,0:25:22.91,英文,,0,0,0,,Generally, you put a semicolon after a statement, so to speak.
Dialogue: 0,0:25:22.91,0:25:25.21,英文,,0,0,0,,And this is the technical term for this line of code.
Dialogue: 0,0:25:25.21,0:25:25.91,英文,,0,0,0,,It's a statement.
Dialogue: 0,0:25:25.91,0:25:29.16,英文,,0,0,0,,And think of it as it's kind of the code equivalent of like an English sentence.
Dialogue: 0,0:25:29.16,0:25:34.98,英文,,0,0,0,,So the semicolon in code is sort of like a period in English when you're done with that particular thought.
Dialogue: 0,0:25:34.98,0:25:37.64,英文,,0,0,0,,You don't need semicolons for now anywhere else.
Dialogue: 0,0:25:37.64,0:25:39.74,英文,,0,0,0,,And we'll see examples of where else you put them.
Dialogue: 0,0:25:39.74,0:25:47.10,英文,,0,0,0,,But it usually is at the end of a line of code that isn't purely syntactic like curly braces instead.
Dialogue: 0,0:25:47.10,0:25:55.50,英文,,0,0,0,,Other questions on the mistake I just fixed and created for myself?
Dialogue: 0,0:25:55.50,0:25:56.06,英文,,0,0,0,,Correct.
Dialogue: 0,0:25:56.06,0:25:58.96,英文,,0,0,0,,So line 5 is where the error is most likely.
Dialogue: 0,0:25:58.96,0:26:02.42,英文,,0,0,0,,Character 29 means it's sort of 29 characters that way.
Dialogue: 0,0:26:02.42,0:26:04.78,英文,,0,0,0,,And then it's actually, in this case, giving me a suggestion.
Dialogue: 0,0:26:04.78,0:26:09.93,英文,,0,0,0,,The compiler won't always know how to advise me, especially if I've made a real mess of my code.
Dialogue: 0,0:26:09.93,0:26:13.31,英文,,0,0,0,,But often, it will do its best to give you the answer like this.
Dialogue: 0,0:26:13.31,0:26:17.30,英文,,0,0,0,,Yeah?
Dialogue: 0,0:26:17.30,0:26:23.06,英文,,0,0,0,,Ah, so how come I first typed code space hello.c, and now I'm typing make hello?
Dialogue: 0,0:26:23.06,0:26:24.10,英文,,0,0,0,,Two different processes.
Dialogue: 0,0:26:24.10,0:26:31.29,英文,,0,0,0,,So when I typed code space hello.c, that was because I wanted to open VS Code and create a new file called hello.c.
Dialogue: 0,0:26:31.29,0:26:35.11,英文,,0,0,0,,It's like going to File, New in a Mac or PC.
Dialogue: 0,0:26:35.11,0:26:46.16,英文,,0,0,0,,Thereafter, though, once the file exists and is actually open here, and it does autosave, you don't need to hit Command-S or Control-S all the time, I can now compile it with make hello again and again.
Dialogue: 0,0:26:46.16,0:26:54.10,英文,,0,0,0,,So theoretically, I should never need to type code space hello.c again unless I want to create a brand new file called the same thing.
Dialogue: 0,0:26:54.10,0:26:57.18,英文,,0,0,0,,All right, so what about this other piece of syntax here?
Dialogue: 0,0:26:57.18,0:26:58.79,英文,,0,0,0,,Let me clear my terminal window here.
Dialogue: 0,0:26:58.79,0:27:03.59,英文,,0,0,0,,You can also hit Control-L just to throw everything away, just to clean it up aesthetically.
Dialogue: 0,0:27:03.59,0:27:11.50,英文,,0,0,0,,Suppose that I omit whatever this sequence of symbols is backslash n, since I'm not really sure at first glance why that's even there.
Dialogue: 0,0:27:11.50,0:27:20.62,英文,,0,0,0,,Does anyone want a conjecture, especially if you've never programmed before, what might happen now if I recompile and rerun this version of the program?
Dialogue: 0,0:27:20.62,0:27:28.36,英文,,0,0,0,,I left the semicolon, but I took away the backslash n. Any instincts?
Dialogue: 0,0:27:28.36,0:27:28.78,英文,,0,0,0,,All right.
Dialogue: 0,0:27:28.78,0:27:29.20,英文,,0,0,0,,Well, yeah.
Dialogue: 0,0:27:34.61,0:27:35.19,英文,,0,0,0,,It will.
Dialogue: 0,0:27:35.19,0:27:38.67,英文,,0,0,0,,The next dollar sign will appear right after my hello world.
Dialogue: 0,0:27:38.67,0:27:43.36,英文,,0,0,0,,But what makes you think that?
Dialogue: 0,0:27:43.36,0:27:44.00,英文,,0,0,0,,Exactly.
Dialogue: 0,0:27:44.00,0:27:48.09,英文,,0,0,0,,Backslash n is actually a special sequence of symbols that creates a new line.
Dialogue: 0,0:27:48.09,0:27:54.05,英文,,0,0,0,,And so to your point, if I recompile this program, make hello, enter, no syntax error.
Dialogue: 0,0:27:54.05,0:27:55.33,英文,,0,0,0,,So it did compile this time.
Dialogue: 0,0:27:55.33,0:27:58.96,英文,,0,0,0,,So you don't need the backslash n. You do need the semicolon.
Dialogue: 0,0:27:58.96,0:28:03.76,英文,,0,0,0,,But if you don't have the backslash n, watch what happens when I do dot slash hello this time.
Dialogue: 0,0:28:03.76,0:28:07.24,英文,,0,0,0,,Now, indeed, I see hello comma world and then a weird dollar sign.
Dialogue: 0,0:28:07.24,0:28:08.58,英文,,0,0,0,,And this is still a prompt.
Dialogue: 0,0:28:08.58,0:28:12.39,英文,,0,0,0,,I can still type commands at it like clear, and everything gets cleaned up.
Dialogue: 0,0:28:12.39,0:28:13.73,英文,,0,0,0,,But it just looks kind of stupid.
Dialogue: 0,0:28:13.73,0:28:18.39,英文,,0,0,0,,If I run it again here with ./hello, it's just not very user friendly.
Dialogue: 0,0:28:18.39,0:28:24.51,英文,,0,0,0,,It is convention that when you're done running your program, you should ideally clean things up, move the cursor to the next line for the user.
Dialogue: 0,0:28:24.51,0:28:34.98,英文,,0,0,0,,And so the backslash n is simply the special symbol, otherwise known as an escape sequence, that c, knows, means move the cursor to the next line.
Dialogue: 0,0:28:34.98,0:28:39.72,英文,,0,0,0,,In other languages, Python among them uses the same symbology.
Dialogue: 0,0:28:39.72,0:28:46.91,英文,,0,0,0,,Now, if I go back to the code here, and for instance, I try to do this differently.
Dialogue: 0,0:28:46.91,0:28:52.97,英文,,0,0,0,,Like, suppose I don't put the backslash n. I just hit Enter, like a normal person would in Google Docs or Microsoft Word.
Dialogue: 0,0:28:52.97,0:28:55.37,英文,,0,0,0,,Let me go ahead and try compiling this program.
Dialogue: 0,0:28:55.37,0:28:57.01,英文,,0,0,0,,And this, you would hope, would work, right?
Dialogue: 0,0:28:57.01,0:29:02.36,英文,,0,0,0,,You would hope this would print out, hello, world, and then a blank line, because I moved the cursor to the next line.
Dialogue: 0,0:29:02.36,0:29:06.08,英文,,0,0,0,,But no, if I run make hello now and try to compile that,
Dialogue: 0,0:29:06.08,0:29:07.30,英文,,0,0,0,,C does not like this.
Dialogue: 0,0:29:07.30,0:29:17.05,英文,,0,0,0,,Now I get a different error still on line 5, this time starting at character 12, error missing terminating double quote character, and then some other esoteric stuff.
Dialogue: 0,0:29:17.05,0:29:18.33,英文,,0,0,0,,And then this does not sound good.
Dialogue: 0,0:29:18.33,0:29:21.93,英文,,0,0,0,,Fatal error this time, too many errors omitted, stopping now.
Dialogue: 0,0:29:21.93,0:29:23.57,英文,,0,0,0,,So I really screwed up here.
Dialogue: 0,0:29:23.57,0:29:25.50,英文,,0,0,0,,So why can't I do this?
Dialogue: 0,0:29:25.50,0:29:31.38,英文,,0,0,0,,Just because, like the humans who designed C decided that if you have a string of text, it must stay on the same line.
Dialogue: 0,0:29:31.38,0:29:32.96,英文,,0,0,0,,It can get really long.
Dialogue: 0,0:29:32.96,0:29:34.44,英文,,0,0,0,,It can soft wrap.
Dialogue: 0,0:29:34.44,0:29:36.28,英文,,0,0,0,,That is, without you hitting Enter.
Dialogue: 0,0:29:36.28,0:29:38.22,英文,,0,0,0,,But you can't hit Enter to create a new line.
Dialogue: 0,0:29:38.22,0:29:44.18,英文,,0,0,0,,If you deliberately want a new line, you have to indeed use this backslash n escape character.
Dialogue: 0,0:29:44.18,0:29:45.14,英文,,0,0,0,,So let me go ahead and do this.
Dialogue: 0,0:29:45.14,0:29:46.80,英文,,0,0,0,,Let me put it back.
Dialogue: 0,0:29:46.80,0:29:48.74,英文,,0,0,0,,Let me go back to my terminal window.
Dialogue: 0,0:29:48.74,0:29:50.02,英文,,0,0,0,,I'll clear the screen again.
Dialogue: 0,0:29:50.02,0:29:54.09,英文,,0,0,0,,Let me go ahead now and do make hello to recompile to that version, ./hello.
Dialogue: 0,0:29:54.09,0:29:57.88,英文,,0,0,0,,And voila, we're back in business with hello.
Dialogue: 0,0:29:57.88,0:30:05.08,英文,,0,0,0,,All right, so now let's tease apart some other aspects of this code, because there's a lot going on just to get us to say hello world on the screen.
Dialogue: 0,0:30:05.08,0:30:10.13,英文,,0,0,0,,For today, we're largely going to ignore this, int, main, void, and these curly braces here.
Dialogue: 0,0:30:10.13,0:30:12.41,英文,,0,0,0,,We'll come back to that before long as to why it's there.
Dialogue: 0,0:30:12.41,0:30:19.19,英文,,0,0,0,,But for now, just think of int, main, void, and these curly braces here as really being the C equivalent of when green flag clicked.
Dialogue: 0,0:30:19.19,0:30:19.67,英文,,0,0,0,,Like, why?
Dialogue: 0,0:30:19.67,0:30:20.67,英文,,0,0,0,,You just need it there.
Dialogue: 0,0:30:20.67,0:30:22.48,英文,,0,0,0,,That's how you get your program going.
Dialogue: 0,0:30:22.48,0:30:24.88,英文,,0,0,0,,And main is indeed going to be some special function.
Dialogue: 0,0:30:24.88,0:30:26.50,英文,,0,0,0,,But more on that another time.
Dialogue: 0,0:30:26.50,0:30:29.04,英文,,0,0,0,,But why do I have this line of code here?
Dialogue: 0,0:30:29.04,0:30:36.62,英文,,0,0,0,,The correct spelling is indeed standard io.h, S-T-D-I-O dot h. And there are angled brackets this time.
Dialogue: 0,0:30:36.62,0:30:37.48,英文,,0,0,0,,So that's a little new.
Dialogue: 0,0:30:37.48,0:30:40.72,英文,,0,0,0,,There's a hash and then an include keyword.
Dialogue: 0,0:30:40.72,0:30:45.02,英文,,0,0,0,,If you don't know what something is, there's not really that much harm in just getting rid of it and see what happens.
Dialogue: 0,0:30:45.02,0:30:46.41,英文,,0,0,0,,So let me delete that line.
Dialogue: 0,0:30:46.41,0:30:50.15,英文,,0,0,0,,Let me go back to my terminal window, clear the screen, and then run make hello again.
Dialogue: 0,0:30:50.15,0:30:53.45,英文,,0,0,0,,And let's try compiling this program now without that first line.
Dialogue: 0,0:30:53.45,0:30:53.85,英文,,0,0,0,,Why?
Dialogue: 0,0:30:53.85,0:30:54.69,英文,,0,0,0,,I don't understand it.
Dialogue: 0,0:30:54.69,0:30:56.41,英文,,0,0,0,,So let's see what happens.
Dialogue: 0,0:30:56.41,0:30:59.11,英文,,0,0,0,,All right, here's yet another error, but let's see.
Dialogue: 0,0:30:59.11,0:31:04.15,英文,,0,0,0,,Hello.c line 5, character 5, so it's pretty early on, error.
Dialogue: 0,0:31:04.15,0:31:09.38,英文,,0,0,0,,Implicitly declaring library function printf with type int and then dot, dot, dot.
Dialogue: 0,0:31:09.38,0:31:12.66,英文,,0,0,0,,So implicitly declaring library function printf.
Dialogue: 0,0:31:12.66,0:31:14.46,英文,,0,0,0,,So this is very cryptic sounding.
Dialogue: 0,0:31:14.46,0:31:17.14,英文,,0,0,0,,You'll get better at understanding phrases like these.
Dialogue: 0,0:31:17.14,0:31:22.81,英文,,0,0,0,,But apparently, I do need the include line for standard io.h.
Dialogue: 0,0:31:22.81,0:31:24.03,英文,,0,0,0,,But why?
Dialogue: 0,0:31:24.03,0:31:33.57,英文,,0,0,0,,Based on this symptom, what might your instinct be for what that first line of code is doing for us in the first place?
Dialogue: 0,0:31:33.57,0:31:37.85,英文,,0,0,0,,Why intuitively must it be there?
Dialogue: 0,0:31:37.85,0:31:38.27,英文,,0,0,0,,Exactly.
Dialogue: 0,0:31:38.27,0:31:42.23,英文,,0,0,0,,It's like importing a library so that you can do things like print things out on the screen.
Dialogue: 0,0:31:42.23,0:31:45.23,英文,,0,0,0,,Now, in Scratch, you didn't have to do this for most of the puzzle pieces.
Dialogue: 0,0:31:45.23,0:31:55.22,英文,,0,0,0,,But you might recall that partway through week 0, I went to the Extensions button at the bottom left of the Scratch screen, and I imported some extra puzzle pieces for text to speech.
Dialogue: 0,0:31:55.22,0:32:00.20,英文,,0,0,0,,That gave us the sort of creepy, humanized voice that actually came out of the cat's mouth.
Dialogue: 0,0:32:00.20,0:32:04.55,英文,,0,0,0,,Well, that was like adding a library, code that someone else wrote.
Dialogue: 0,0:32:04.55,0:32:06.61,英文,,0,0,0,,In that case, it was a third party.
Dialogue: 0,0:32:06.61,0:32:08.41,英文,,0,0,0,,But I gave myself access to it.
Dialogue: 0,0:32:08.41,0:32:09.35,英文,,0,0,0,,Same here.
Dialogue: 0,0:32:09.35,0:32:20.15,英文,,0,0,0,,Turns out that you don't really get printf automatically in C. You have to include a so-called header file that declares that function to exist.
Dialogue: 0,0:32:20.15,0:32:22.57,英文,,0,0,0,,Now, the reason for this historically is just efficiency.
Dialogue: 0,0:32:22.57,0:32:30.59,英文,,0,0,0,,Back in the day when computers were really slower and resource constrained, you don't want to just give yourself access to the entire kitchen sink of functionality.
Dialogue: 0,0:32:30.59,0:32:34.86,英文,,0,0,0,,You only want to include only the functions you actually care about.
Dialogue: 0,0:32:34.86,0:32:37.60,英文,,0,0,0,,Nowadays, it's sort of a, sort of a,
Dialogue: 0,0:32:37.60,0:32:42.78,英文,,0,0,0,,Copy-paste step, because you almost always want to print something out on the screen, at least when writing programs like these.
Dialogue: 0,0:32:42.78,0:32:50.57,英文,,0,0,0,,But these so-called header files contain enough information about all of the functions in what's called the standard IO library.
Dialogue: 0,0:32:50.57,0:32:53.73,英文,,0,0,0,,And standard IO just means standard input and output.
Dialogue: 0,0:32:53.73,0:32:54.65,英文,,0,0,0,,And that's appropriate, right?
Dialogue: 0,0:32:54.65,0:32:57.15,英文,,0,0,0,,Because printing is pretty basic output.
Dialogue: 0,0:32:57.15,0:33:00.32,英文,,0,0,0,,Turns out there's other functions for getting input from the human's keyboard.
Dialogue: 0,0:33:00.32,0:33:01.34,英文,,0,0,0,,More on that in a bit.
Dialogue: 0,0:33:01.34,0:33:07.84,英文,,0,0,0,,But any time you want to print something on the screen in C, you indeed need to include this header file at the top of your code.
Dialogue: 0,0:33:07.84,0:33:18.25,英文,,0,0,0,,And that's going to essentially inform the compiler, hey, compiler, I want to use functionality from the standard IO library, including printf in this case.
Dialogue: 0,0:33:18.25,0:33:21.93,英文,,0,0,0,,And if you omit the header file by accident, it's just not going to work.
Dialogue: 0,0:33:21.93,0:33:28.07,英文,,0,0,0,,Because it doesn't know what printf is, it's sort of some unrecognized Symbol in that case.
Dialogue: 0,0:33:28.07,0:33:32.84,英文,,0,0,0,,All right, questions then about this line of code.
Dialogue: 0,0:33:32.84,0:33:37.66,英文,,0,0,0,,This line of code here, or what these header files are.
Dialogue: 0,0:33:37.66,0:33:40.88,英文,,0,0,0,,All right, you might wonder, well, how do you know what functions exist?
Dialogue: 0,0:33:40.88,0:33:43.85,英文,,0,0,0,,How do you know what files you might indeed want to include?
Dialogue: 0,0:33:43.85,0:33:48.81,英文,,0,0,0,,Well, it turns out that C is a many-year-old language, and it has ample documentation.
Dialogue: 0,0:33:48.81,0:33:52.82,英文,,0,0,0,,A caveat is that its documentation isn't necessarily all that user-friendly.
Dialogue: 0,0:33:52.82,0:34:01.84,英文,,0,0,0,,But what we have for the course is a simplified version of the official documentation for C at this URL here, manual.cs50.io.
Dialogue: 0,0:34:01.84,0:34:06.15,英文,,0,0,0,,So in the world of C and other languages, too, there are what are called manual pages.
Dialogue: 0,0:34:06.15,0:34:14.63,英文,,0,0,0,,And these are just like text-based documentation that honestly is typically written in a voice that you kind of have to be an experienced programmer to understand some of it.
Dialogue: 0,0:34:14.63,0:34:27.86,英文,,0,0,0,,So what we've done in this version of the same documentation is we've imported all of the original official documentation, but we've added sort of less comfortable translations in English for a lot of the functionality that you might use in class just to help onboard you.
Dialogue: 0,0:34:27.86,0:34:30.76,英文,,0,0,0,,So at the end of the day, you don't need this documentation long term.
Dialogue: 0,0:34:30.76,0:34:39.89,英文,,0,0,0,,But just to get started, we'll translate it into terminology that you might appreciate from a teaching assistant, for instance, as opposed to the original author of these documents.
Dialogue: 0,0:34:39.89,0:34:52.96,英文,,0,0,0,,And so for instance, if you were interested in reading up on what functions exist in the standard io.h header file, well, you could go to a URL like this, or you could search for it at manual.cs50.io.
Dialogue: 0,0:34:52.96,0:34:56.48,英文,,0,0,0,,That would show you a list of all of the available functions in that library.
Dialogue: 0,0:34:56.48,0:34:58.45,英文,,0,0,0,,And printf indeed would be one of them.
Dialogue: 0,0:34:58.45,0:35:04.09,英文,,0,0,0,,And then you could click further on that, reaching a URL like this, that's going to give you all of the documentation for how to use printf.
Dialogue: 0,0:35:04.09,0:35:07.53,英文,,0,0,0,,It turns out you can do even more than it than just printing out hello world.
Dialogue: 0,0:35:07.53,0:35:09.69,英文,,0,0,0,,And we'll scratch the surface of that today.
Dialogue: 0,0:35:09.69,0:35:18.32,英文,,0,0,0,,But it turns out that the documentation will always be your authoritative source, ultimately, for questions like, what can I do and how can I do it?
Dialogue: 0,0:35:18.32,0:35:26.15,英文,,0,0,0,,Meanwhile, it turns out that CS50 has its own library accessible via a header file called cs50.h.
Dialogue: 0,0:35:26.15,0:35:34.29,英文,,0,0,0,,It turns out in C that output is actually pretty easy, relatively speaking, once you get used to all the curly braces, parentheses, quote marks, and the like.
Dialogue: 0,0:35:34.29,0:35:36.58,英文,,0,0,0,,But input is a little more difficult.
Dialogue: 0,0:35:36.58,0:35:41.12,英文,,0,0,0,,And if you have program before, input's not that hard to do in Python.
Dialogue: 0,0:35:41.12,0:35:42.54,英文,,0,0,0,,It's not that hard to do in Java.
Dialogue: 0,0:35:42.54,0:35:46.40,英文,,0,0,0,,It's more difficult to do in C. And we'll see why in a couple of weeks.
Dialogue: 0,0:35:46.40,0:35:56.59,英文,,0,0,0,,But for the first couple of weeks of the class, we actually provide you with some training wheels of sorts, whereby we have a number of functions that are declared in this file, cs50.h.
Dialogue: 0,0:35:56.59,0:35:59.35,英文,,0,0,0,,It lives its documentation in a URL like this.
Dialogue: 0,0:35:59.35,0:36:01.21,英文,,0,0,0,,And in a moment, we'll use a few of these.
Dialogue: 0,0:36:01.21,0:36:17.01,英文,,0,0,0,,You'll see that CS50 provides you with some functions like getchar for get a single character from the user's keyboard, getint to get an integer from the user's keyboard, getstring to get a sequence of text from the user's keyboard, and a bunch of others as well.
Dialogue: 0,0:36:17.01,0:36:21.21,英文,,0,0,0,,So let's actually use some of these functions, how about, by revisiting
Dialogue: 0,0:36:21.21,0:36:26.64,英文,,0,0,0,,Really, the second program we wrote in Scratch last time, which adds some input to the output.
Dialogue: 0,0:36:26.64,0:36:28.72,英文,,0,0,0,,So first version of Scratch was just hello, world.
Dialogue: 0,0:36:28.72,0:36:31.34,英文,,0,0,0,,It said the same thing every time you click the green flag.
Dialogue: 0,0:36:31.34,0:36:33.26,英文,,0,0,0,,Version 2, recall, though, did this.
Dialogue: 0,0:36:33.26,0:36:35.44,英文,,0,0,0,,It asked the user, what's your name?
Dialogue: 0,0:36:35.44,0:36:40.96,英文,,0,0,0,,And then that somehow gave it back a return variable, the return value, we called it.
Dialogue: 0,0:36:40.96,0:36:46.51,英文,,0,0,0,,And we then joined hello and that name to say something a little more interesting on the screen.
Dialogue: 0,0:36:46.51,0:36:48.57,英文,,0,0,0,,So what did that model look like?
Dialogue: 0,0:36:48.57,0:36:49.63,英文,,0,0,0,,Same thing as before.
Dialogue: 0,0:36:49.63,0:36:54.61,英文,,0,0,0,,We've got a function in the middle, where function is like the code implementation of our algorithm.
Dialogue: 0,0:36:54.61,0:37:00.20,英文,,0,0,0,,That takes in one or more arguments, like what is it you want to say on the screen ultimately.
Dialogue: 0,0:37:00.20,0:37:03.50,英文,,0,0,0,,And return value in this case is going to be actually a value that comes back.
Dialogue: 0,0:37:03.50,0:37:08.61,英文,,0,0,0,,So in the case of getting input, we can consider this ask block again, like last week.
Dialogue: 0,0:37:08.61,0:37:12.61,英文,,0,0,0,,The input to it is whatever words of English you want to ask the user.
Dialogue: 0,0:37:12.61,0:37:14.65,英文,,0,0,0,,And then it returns a value.
Dialogue: 0,0:37:14.65,0:37:22.43,英文,,0,0,0,,And this was called by default in MIT's world answer that we'll see in C. You can call these return values anything you want, ultimately, in variables.
Dialogue: 0,0:37:22.43,0:37:24.00,英文,,0,0,0,,But this is different from a side effect.
Dialogue: 0,0:37:24.00,0:37:29.08,英文,,0,0,0,,A side effect is just something visual often that happens on the screen, like the speech bubble or hello world.
Dialogue: 0,0:37:29.08,0:37:34.18,英文,,0,0,0,,A return value is actually a value you get back from a function that you can use or reuse.
Dialogue: 0,0:37:34.18,0:37:38.46,英文,,0,0,0,,So how do we convert this Scratch block from last week to C code this week?
Dialogue: 0,0:37:38.46,0:37:42.54,英文,,0,0,0,,Well, if you want to ask the user for something like their name, you can do this.
Dialogue: 0,0:37:42.54,0:37:50.11,英文,,0,0,0,,You use a CS50 function called getString, and you use the parentheses to represent, here comes the inputs there too.
Dialogue: 0,0:37:50.11,0:37:51.67,英文,,0,0,0,,You can then put the sentence.
Dialogue: 0,0:37:51.67,0:37:54.31,英文,,0,0,0,,You want to ask the user, quote unquote, what's your name?
Dialogue: 0,0:37:54.31,0:37:59.61,英文,,0,0,0,,But you do indeed need the quotes literally in C, so I'll go ahead and add those as well.
Dialogue: 0,0:37:59.61,0:38:08.38,英文,,0,0,0,,Subtle, but I've deliberately included a space after the question mark, but before the double quote, just so that the cursor moves one step over.
Dialogue: 0,0:38:08.38,0:38:11.94,英文,,0,0,0,,Because in this case, we're not going to get a special speech box like we did in Scratch.
Dialogue: 0,0:38:11.94,0:38:13.75,英文,,0,0,0,,It's just going to leave the cursor where it is.
Dialogue: 0,0:38:13.75,0:38:19.91,英文,,0,0,0,,So we'll see that aesthetically, that just moves the blinking cursor one space after the sentence on the screen.
Dialogue: 0,0:38:19.91,0:38:27.42,英文,,0,0,0,,All right, but the catch is with Scratch, we just automatically got back the answer from the user in a special variable called answer.
Dialogue: 0,0:38:27.42,0:38:30.39,英文,,0,0,0,,In C, you're going to have to be a little more specific.
Dialogue: 0,0:38:30.39,0:38:35.90,英文,,0,0,0,,In C, if you want to get back a return value from a function like getString,
Dialogue: 0,0:38:35.90,0:38:40.48,英文,,0,0,0,,You have to use an equal sign and then the name of a variable on the left.
Dialogue: 0,0:38:40.48,0:38:42.32,英文,,0,0,0,,The choice of variables is up to you.
Dialogue: 0,0:38:42.32,0:38:49.05,英文,,0,0,0,,I could have called this anything, x, y, z. I'm going to more descriptively call it answer for parity with what MIT did with Scratch.
Dialogue: 0,0:38:49.05,0:38:53.19,英文,,0,0,0,,But notice that this doesn't represent equality, per se.
Dialogue: 0,0:38:53.19,0:38:55.67,英文,,0,0,0,,This is assignment in this case.
Dialogue: 0,0:38:55.67,0:39:02.50,英文,,0,0,0,,So in C, when you use a single equal sign, that means copy the value on the right over to the value on the left.
Dialogue: 0,0:39:02.50,0:39:05.40,英文,,0,0,0,,From right to left. So what does this do for us?
Dialogue: 0,0:39:05.40,0:39:14.66,英文,,0,0,0,,Well, if getString is a function that prompts the user with, quote unquote, what's your name, and it has, I claim, a return value, that means it kind of hands me back some value.
Dialogue: 0,0:39:14.66,0:39:17.84,英文,,0,0,0,,But it's up to me in C to do something with that value.
Dialogue: 0,0:39:17.84,0:39:27.45,英文,,0,0,0,,So if I want to copy that value into a variable that I can use and reuse, I use an equal sign, and I invent on the left-hand side of that equal sign any variable name I want.
Dialogue: 0,0:39:27.45,0:39:28.43,英文,,0,0,0,,There's certain rules.
Dialogue: 0,0:39:28.43,0:39:29.45,英文,,0,0,0,,There's certain conventions.
Dialogue: 0,0:39:29.45,0:39:34.73,英文,,0,0,0,,But generally, if you use a single word with all lowercase, you're in good shape.
Dialogue: 0,0:39:34.73,0:39:36.94,英文,,0,0,0,,But C is a little more pedantic than that.
Dialogue: 0,0:39:36.94,0:39:43.50,英文,,0,0,0,,And those of you who have programmed before might not be used to this, for instance, in Python, which is a world we'll get to in a few weeks.
Dialogue: 0,0:39:43.50,0:39:48.86,英文,,0,0,0,,You also have to tell C what type of value you're storing.
Dialogue: 0,0:39:48.86,0:40:04.34,英文,,0,0,0,,So if I do want a string of text from the user, so not an integer, not a single character, I want a whole string of text, like a phrase, a sentence, a name in this case, I have to tell C that this variable is of type string.
Dialogue: 0,0:40:04.34,0:40:07.58,英文,,0,0,0,,So it's a little wordy, but you get used to it, and you just have to be precise.
Dialogue: 0,0:40:07.58,0:40:12.80,英文,,0,0,0,,You're informing the computer what type of value is going in this variable.
Dialogue: 0,0:40:12.80,0:40:19.35,英文,,0,0,0,,All right, it's so close to being correct, but I have omitted something that's annoyingly important still.
Dialogue: 0,0:40:19.35,0:40:20.65,英文,,0,0,0,,What's missing still?
Dialogue: 0,0:40:20.65,0:40:22.09,英文,,0,0,0,,Yeah?
Dialogue: 0,0:40:22.09,0:40:24.12,英文,,0,0,0,,So semicolon, this is a statement.
Dialogue: 0,0:40:24.12,0:40:27.84,英文,,0,0,0,,This is like a full thought, if you will, in code.
Dialogue: 0,0:40:27.84,0:40:31.88,英文,,0,0,0,,I do need to end it ultimately with the semicolon at the end there.
Dialogue: 0,0:40:31.88,0:40:35.62,英文,,0,0,0,,All right, so this was more of a mouthful, but let's try using this in now my code.
Dialogue: 0,0:40:35.62,0:40:40.30,英文,,0,0,0,,Let me go back to VS Code, where I have version 0 of my code here.
Dialogue: 0,0:40:40.30,0:40:51.62,英文,,0,0,0,,Let me go ahead and include one other file at the top of hello.c, namely include cs50.h so that I have access now to get string and anything else I might want.
Dialogue: 0,0:40:51.62,0:40:56.85,英文,,0,0,0,,Now let me go ahead and add a line of code here inside of these curly braces.
Dialogue: 0,0:40:56.85,0:40:58.53,英文,,0,0,0,,And let me go ahead and do this.
Dialogue: 0,0:40:58.53,0:41:04.97,英文,,0,0,0,,String answer equals get string, quote unquote, what's your name, question mark.
Dialogue: 0,0:41:04.97,0:41:07.23,英文,,0,0,0,,I'm going to add an extra space before the double quote.
Dialogue: 0,0:41:07.23,0:41:10.56,英文,,0,0,0,,I'm going to indeed end my thought with a semicolon.
Dialogue: 0,0:41:10.56,0:41:14.26,英文,,0,0,0,,And now let me deliberately make a mistake just to make a point here.
Dialogue: 0,0:41:14.26,0:41:19.51,英文,,0,0,0,,Let me now try changing hello world to hello comma answer.
Dialogue: 0,0:41:19.51,0:41:24.52,英文,,0,0,0,,All right, now perhaps, even though this is some new lines of code, you can see where I've errored already.
Dialogue: 0,0:41:24.52,0:41:27.16,英文,,0,0,0,,But let me try making this program now.
Dialogue: 0,0:41:27.16,0:41:28.01,英文,,0,0,0,,So far, so good.
Dialogue: 0,0:41:28.01,0:41:29.01,英文,,0,0,0,,So no error messages.
Dialogue: 0,0:41:29.01,0:41:30.11,英文,,0,0,0,,So that's a good thing.
Dialogue: 0,0:41:30.11,0:41:32.90,英文,,0,0,0,,Let me go ahead and run ./hello.
Dialogue: 0,0:41:32.90,0:41:34.12,英文,,0,0,0,,And you'll see the prompt.
Dialogue: 0,0:41:34.12,0:41:34.98,英文,,0,0,0,,What's your name?
Dialogue: 0,0:41:34.98,0:41:35.64,英文,,0,0,0,,Question mark.
Dialogue: 0,0:41:35.64,0:41:43.70,英文,,0,0,0,,And notice the cursor is indeed one space to the right, just because I thought it would look prettier to put a little blank space there, as opposed to leaving it right after the question mark.
Dialogue: 0,0:41:43.70,0:41:44.58,英文,,0,0,0,,Let me type my name.
Dialogue: 0,0:41:44.58,0:41:48.38,英文,,0,0,0,,But even if you've never programmed before, I have screwed up here.
Dialogue: 0,0:41:48.38,0:41:52.38,英文,,0,0,0,,What are we going to see on the screen when I hit Enter?
Dialogue: 0,0:41:52.38,0:41:54.24,英文,,0,0,0,,Yeah, hello, answer, most likely.
Dialogue: 0,0:41:54.24,0:41:54.76,英文,,0,0,0,,Why?
Dialogue: 0,0:41:54.76,0:41:56.71,英文,,0,0,0,,Because the computer is going to take me literally.
Dialogue: 0,0:41:56.71,0:42:03.29,英文,,0,0,0,,And if I say, quote unquote, hello, answer, that is the string of text followed by a new line that's going to be outputted to the screen.
Dialogue: 0,0:42:03.29,0:42:08.64,英文,,0,0,0,,So we need some way of actually plugging answer into this line of code.
Dialogue: 0,0:42:08.64,0:42:14.22,英文,,0,0,0,,It's not quite as simple as Scratch, where you could just grab a second say block and drag and drop the variable there.
Dialogue: 0,0:42:14.22,0:42:15.66,英文,,0,0,0,,We actually need a new syntax.
Dialogue: 0,0:42:15.66,0:42:23.09,英文,,0,0,0,,And it's going to look weird at first, but it is everywhere in software nowadays, especially in the world of C and certain other languages.
Dialogue: 0,0:42:23.09,0:42:25.81,英文,,0,0,0,,So let me go ahead and propose that.
Dialogue: 0,0:42:25.81,0:42:27.59,英文,,0,0,0,,I solved it as follows.
Dialogue: 0,0:42:27.59,0:42:32.49,英文,,0,0,0,,Well, back when we did this in Scratch, remember that the most elegant solution was this here.
Dialogue: 0,0:42:32.49,0:42:36.72,英文,,0,0,0,,We used the say block still, which is going to be analogous to printf today.
Dialogue: 0,0:42:36.72,0:42:43.42,英文,,0,0,0,,But I used the join puzzle piece in Scratch to combine hello, comma, space, and then the name of the human.
Dialogue: 0,0:42:43.42,0:42:45.88,英文,,0,0,0,,So how do we translate this code to C?
Dialogue: 0,0:42:45.88,0:42:47.98,英文,,0,0,0,,Well, it's going to look a little different now.
Dialogue: 0,0:42:47.98,0:42:53.73,英文,,0,0,0,,I'm going to start with printf with some parentheses and a semicolon representing the say block.
Dialogue: 0,0:42:53.73,0:42:55.21,英文,,0,0,0,,But how do I now do this joining?
Dialogue: 0,0:42:55.21,0:42:58.33,英文,,0,0,0,,This is where the puzzle pieces don't quite translate perfectly.
Dialogue: 0,0:42:58.33,0:43:00.37,英文,,0,0,0,,This would be the way to do this.
Dialogue: 0,0:43:00.37,0:43:03.59,英文,,0,0,0,,You put hello, comma, and then a placeholder.
Dialogue: 0,0:43:03.59,0:43:08.00,英文,,0,0,0,,So this is what's known as a format code in C, specifically for printf.
Dialogue: 0,0:43:08.00,0:43:11.38,英文,,0,0,0,,And it just means this is a placeholder for a string.
Dialogue: 0,0:43:11.38,0:43:12.78,英文,,0,0,0,,Again, a string is just text.
Dialogue: 0,0:43:12.78,0:43:19.22,英文,,0,0,0,,So this means, hey, computer, print out literally hello, comma, space, and then not literally %s.
Dialogue: 0,0:43:19.22,0:43:24.07,英文,,0,0,0,,%s is treated specially to mean plug in some value here.
Dialogue: 0,0:43:24.07,0:43:25.57,英文,,0,0,0,,All right, so what else do I still need?
Dialogue: 0,0:43:25.57,0:43:27.39,英文,,0,0,0,,Well, this is still some text.
Dialogue: 0,0:43:27.39,0:43:32.61,英文,,0,0,0,,So I'm still going to surround the whole thing with double quotes.
Dialogue: 0,0:43:32.61,0:43:37.93,英文,,0,0,0,,I'm still going to include my backslash n just to keep things tidy and move the cursor to the next line.
Dialogue: 0,0:43:37.93,0:43:45.30,英文,,0,0,0,,So the last step here in C is to somehow join the answer with that word hello.
Dialogue: 0,0:43:45.30,0:43:51.12,英文,,0,0,0,,And the way you do this is with printf, passing it not one argument, which is what I keep doing.
Dialogue: 0,0:43:51.12,0:43:54.00,英文,,0,0,0,,I keep passing it one string of text, quote, unquote.
Dialogue: 0,0:43:54.00,0:43:55.96,英文,,0,0,0,,I'm going to now add a comma.
Dialogue: 0,0:43:55.96,0:44:04.41,英文,,0,0,0,,And then the name of the value that I want printf to go back and plug into that percent s. And printf is just smart about this.
Dialogue: 0,0:44:04.41,0:44:10.14,英文,,0,0,0,,If you have 1% s and one additional argument after a comma, it just does from right to left.
Dialogue: 0,0:44:10.14,0:44:11.14,英文,,0,0,0,,It plugs it in.
Dialogue: 0,0:44:11.14,0:44:16.44,英文,,0,0,0,,If you have 2% s's and two variables after the comma, that's OK too.
Dialogue: 0,0:44:16.44,0:44:24.75,英文,,0,0,0,,If you separate them with commas, it'll plug the first into the first percent s and the second variable into the second percent s. So it's just left to right order of operations.
Dialogue: 0,0:44:24.75,0:44:32.78,英文,,0,0,0,,It's not as pretty or as simple as this, but this is how it's done in C. All right, let me pause because this is a lot of symbology.
Dialogue: 0,0:44:32.78,0:44:35.14,英文,,0,0,0,,Any questions on this technique here?
Dialogue: 0,0:44:35.14,0:44:40.47,英文,,0,0,0,,Yeah.
Dialogue: 0,0:44:40.47,0:44:41.55,英文,,0,0,0,,Yeah, really good question.
Dialogue: 0,0:44:41.55,0:44:45.64,英文,,0,0,0,,Why did I exclude the backslash n a moment ago?
Dialogue: 0,0:44:45.64,0:44:48.32,英文,,0,0,0,,Really just my sense of aesthetics, if you will.
Dialogue: 0,0:44:48.32,0:44:49.80,英文,,0,0,0,,No good reason beyond that.
Dialogue: 0,0:44:49.80,0:44:54.62,英文,,0,0,0,,So if I look back at my code, you quite rightly notice that I didn't have a backslash n there.
Dialogue: 0,0:44:54.62,0:45:00.58,英文,,0,0,0,,That's just because for whatever sense of style that I have, I wanted the name to be typed right after the question.
Dialogue: 0,0:45:00.58,0:45:04.16,英文,,0,0,0,,I totally could have added a backslash n there instead of a space.
Dialogue: 0,0:45:04.16,0:45:06.58,英文,,0,0,0,,That would have just allowed me to type down here.
Dialogue: 0,0:45:06.58,0:45:07.44,英文,,0,0,0,,Totally fine.
Dialogue: 0,0:45:07.44,0:45:09.37,英文,,0,0,0,,Just wanted to show you something different.
Dialogue: 0,0:45:09.37,0:45:10.22,英文,,0,0,0,,Good, good catch.
Dialogue: 0,0:45:10.22,0:45:12.16,英文,,0,0,0,,Yeah.
Dialogue: 0,0:45:12.16,0:45:14.58,英文,,0,0,0,,Can I show an example with 2% s's?
Dialogue: 0,0:45:14.58,0:45:15.28,英文,,0,0,0,,Surely.
Dialogue: 0,0:45:15.28,0:45:17.46,英文,,0,0,0,,So let me, in VS Code, do this.
Dialogue: 0,0:45:17.46,0:45:20.20,英文,,0,0,0,,Let me clear my terminal window to clean things up.
Dialogue: 0,0:45:20.20,0:45:21.08,英文,,0,0,0,,And let me do this.
Dialogue: 0,0:45:21.08,0:45:26.30,英文,,0,0,0,,Instead of calling the variable answer all over the place, let me call it first.
Dialogue: 0,0:45:26.30,0:45:27.50,英文,,0,0,0,,And I'll ask two questions.
Dialogue: 0,0:45:27.50,0:45:28.99,英文,,0,0,0,,What's your first name?
Dialogue: 0,0:45:28.99,0:45:34.41,英文,,0,0,0,,And now let me do string last equals get string quote un, whoops, capitalization matters.
Dialogue: 0,0:45:34.41,0:45:36.17,英文,,0,0,0,,So let me fix my capital S there.
Dialogue: 0,0:45:36.17,0:45:41.81,英文,,0,0,0,,Quote unquote, what's your last name, question mark. Semicolon.
Dialogue: 0,0:45:41.81,0:45:52.90,英文,,0,0,0,,And now we'll plug in 1% s and a second percent s. And now I'm going to plug in first first and last last, coincidentally.
Dialogue: 0,0:45:52.90,0:45:55.48,英文,,0,0,0,,And now I'm going to go back to the terminal window.
Dialogue: 0,0:45:55.48,0:46:00.48,英文,,0,0,0,,Make hello, crossing my fingers, all good, ./hello.
Dialogue: 0,0:46:00.48,0:46:02.76,英文,,0,0,0,,Here's my first question, David.
Dialogue: 0,0:46:02.76,0:46:04.38,英文,,0,0,0,,Here's my second question, Malan.
Dialogue: 0,0:46:04.38,0:46:06.71,英文,,0,0,0,,And again, hello, David Malan.
Dialogue: 0,0:46:06.71,0:46:08.59,英文,,0,0,0,,So it just inserts them left to right.
Dialogue: 0,0:46:08.59,0:46:12.75,英文,,0,0,0,,All I was doing for parity with Scratch, though, and let me go ahead and undo this again.
Dialogue: 0,0:46:12.75,0:46:15.27,英文,,0,0,0,,I'll go back to answer like this.
Dialogue: 0,0:46:15.27,0:46:18.00,英文,,0,0,0,,I'll go back to just asking for the person's name.
Dialogue: 0,0:46:18.00,0:46:19.30,英文,,0,0,0,,I'm going to delete mention of last.
Dialogue: 0,0:46:19.30,0:46:26.14,英文,,0,0,0,,I'm going to delete mention of the second percent s. And now, if I recompile this simpler version, I did screw up.
Dialogue: 0,0:46:26.14,0:46:27.85,英文,,0,0,0,,Didn't intend it.
Dialogue: 0,0:46:27.85,0:46:31.96,英文,,0,0,0,,What did I do wrong?
Dialogue: 0,0:46:31.96,0:46:33.28,英文,,0,0,0,,Yeah, so just newbie mistakes.
Dialogue: 0,0:46:33.28,0:46:39.69,英文,,0,0,0,,So I changed my variable back to answer just to be consistent with week 0, but I didn't change it here.
Dialogue: 0,0:46:39.69,0:46:42.75,英文,,0,0,0,,So I have in use of undeclared identifier first.
Dialogue: 0,0:46:42.75,0:46:46.61,英文,,0,0,0,,It's undeclared in the sense that I declared answer a line prior.
Dialogue: 0,0:46:46.61,0:46:47.87,英文,,0,0,0,,I didn't declare first.
Dialogue: 0,0:46:47.87,0:46:51.24,英文,,0,0,0,,So indeed, intuitively, I want to just change that to that.
Dialogue: 0,0:46:51.24,0:46:53.26,英文,,0,0,0,,Let me now do make hello again.
Dialogue: 0,0:46:53.26,0:46:54.82,英文,,0,0,0,,Dot slash hello.
Dialogue: 0,0:46:54.82,0:46:57.80,英文,,0,0,0,,Type in just my first name this time, and there it is.
Dialogue: 0,0:46:57.80,0:46:59.50,英文,,0,0,0,,Hello, David.
Dialogue: 0,0:46:59.50,0:47:02.19,英文,,0,0,0,,Questions on this, then, syntax with printf?
Dialogue: 0,0:47:02.19,0:47:05.49,英文,,0,0,0,,Yeah.
Dialogue: 0,0:47:05.49,0:47:13.20,英文,,0,0,0,,The placeholder I'll zoom in is just a single percent and then an s. So inside of my string here.
Dialogue: 0,0:47:13.20,0:47:17.46,英文,,0,0,0,,Is percent s. And then I have a comma outside the quotes.
Dialogue: 0,0:47:17.46,0:47:30.53,英文,,0,0,0,,And then the name of the variable whose value I want to plug in for that percent s. And now notice there's technically two commas inside of these parentheses on line 7.
Dialogue: 0,0:47:30.53,0:47:37.67,英文,,0,0,0,,And yet I claim that printf at the moment is only taking in two arguments.
Dialogue: 0,0:47:37.67,0:47:42.18,英文,,0,0,0,,Why is there then two commas but only two arguments?
Dialogue: 0,0:47:42.18,0:47:50.22,英文,,0,0,0,,If there were two commas, you would think there'd be three arguments, right?
Dialogue: 0,0:47:50.22,0:47:53.14,英文,,0,0,0,,Exactly, the comma in between the quotes is just an English thing.
Dialogue: 0,0:47:53.14,0:47:55.32,英文,,0,0,0,,It's separating the hello from the name.
Dialogue: 0,0:47:55.32,0:47:57.66,英文,,0,0,0,,So that's why, indeed, it's not only in quotes.
Dialogue: 0,0:47:57.66,0:48:08.93,英文,,0,0,0,,That's also why programs like VSCode tend to syntax highlight it a little differently, just so that it sort of jumps out as different to you, even though in this case, it's a little subtle, a light blue versus white.
Dialogue: 0,0:48:08.93,0:48:10.95,英文,,0,0,0,,But indeed, it's trying its best.
Dialogue: 0,0:48:10.95,0:48:13.15,英文,,0,0,0,,Other questions now on this placeholder?
Dialogue: 0,0:48:13.15,0:48:13.29,英文,,0,0,0,,Yeah?
Dialogue: 0,0:48:13.29,0:48:17.83,英文,,0,0,0,,You wanted to put an exclamation point at the end.
Dialogue: 0,0:48:17.83,0:48:22.57,英文,,0,0,0,,You put a comma out here in the answer variable, and then put it
Dialogue: 0,0:48:22.57,0:48:23.25,英文,,0,0,0,,Ah, good question.
Dialogue: 0,0:48:23.25,0:48:28.22,英文,,0,0,0,,If I wanted to add an exclamation point after the name, would I have to add another placeholder and so forth?
Dialogue: 0,0:48:28.22,0:48:30.14,英文,,0,0,0,,I could actually do that much more simply.
Dialogue: 0,0:48:30.14,0:48:33.64,英文,,0,0,0,,I can just put the exclamation point right after the percent sign.
Dialogue: 0,0:48:33.64,0:48:35.98,英文,,0,0,0,,I don't need an additional placeholder per se.
Dialogue: 0,0:48:35.98,0:48:45.26,英文,,0,0,0,,If I zoom out now and run make hello again, dot slash hello, and type in just my name, no exclamation point, now you'll see more excitedly hello.
Dialogue: 0,0:48:45.26,0:48:46.50,英文,,0,0,0,,So printf is smart.
Dialogue: 0,0:48:46.50,0:48:51.59,英文,,0,0,0,,It will figure out where the percent s is and then go and replace it.
Dialogue: 0,0:48:51.59,0:49:01.37,英文,,0,0,0,,Now, let me propose that a common thing in programming is that as soon as we make a decision as to how to design something, we often paint ourselves into a corner and sort of regret a decision.
Dialogue: 0,0:49:01.37,0:49:11.77,英文,,0,0,0,,Can anyone think of a problem that arises from using percent s as a placeholder in this string to printf?
Dialogue: 0,0:49:11.77,0:49:17.36,英文,,0,0,0,,What could go wrong if we're using percent in this special way?
Dialogue: 0,0:49:17.36,0:49:29.97,英文,,0,0,0,,Yeah, if you literally want to say, for whatever weird reason, %s on the screen, or honestly, even just a single percent, it turns out that a percent sign is treated specially inside of printf strings.
Dialogue: 0,0:49:29.97,0:49:31.34,英文,,0,0,0,,So what's the solution here?
Dialogue: 0,0:49:31.34,0:49:34.76,英文,,0,0,0,,There's different patterns of solutions to problems like these.
Dialogue: 0,0:49:34.76,0:49:41.00,英文,,0,0,0,,But suppose you wanted to say, I got 100%, for instance.
Dialogue: 0,0:49:41.00,0:49:43.71,英文,,0,0,0,,Let me go ahead and change this completely.
Dialogue: 0,0:49:43.71,0:49:47.33,英文,,0,0,0,,So I got 100% on your test or whatever.
Dialogue: 0,0:49:47.33,0:49:50.99,英文,,0,0,0,,All right, let me go ahead and run make hello, enter.
Dialogue: 0,0:49:50.99,0:49:53.17,英文,,0,0,0,,All right, so invalid conversion specifier.
Dialogue: 0,0:49:53.17,0:49:57.51,英文,,0,0,0,,I mean, I have no idea what this means, but it's underlining the percent sign as problematic.
Dialogue: 0,0:49:57.51,0:50:01.72,英文,,0,0,0,,Well, it turns out that humans years ago decided, oh, all right, dammit, we already use percent.
Dialogue: 0,0:50:01.72,0:50:05.22,英文,,0,0,0,,Well, 2% signs will mean 1% literally.
Dialogue: 0,0:50:05.22,0:50:10.62,英文,,0,0,0,,So now if I rerun make hello, aha, ./hello, I got 100%.
Dialogue: 0,0:50:10.62,0:50:15.27,英文,,0,0,0,,So there's going to be things like that, honestly, that you have to ask someone, you have to Google, you have to look it up in the documentation.
Dialogue: 0,0:50:15.27,0:50:17.75,英文,,0,0,0,,But there's always a solution to those kinds of problems.
Dialogue: 0,0:50:17.75,0:50:19.96,英文,,0,0,0,,And thankfully, they don't come up all that often.
Dialogue: 0,0:50:19.96,0:50:21.68,英文,,0,0,0,,Yeah.
Dialogue: 0,0:50:21.68,0:50:22.46,英文,,0,0,0,,Just pointing.
Dialogue: 0,0:50:22.46,0:50:23.16,英文,,0,0,0,,Other questions.
Dialogue: 0,0:50:23.16,0:50:27.96,英文,,0,0,0,,Yeah.
Dialogue: 0,0:50:27.96,0:50:31.42,英文,,0,0,0,,If you have multiple variables, it is in the left-right order.
Dialogue: 0,0:50:31.42,0:50:35.71,英文,,0,0,0,,So printf will analyze the first string of text that you pass in between quotes.
Dialogue: 0,0:50:35.71,0:50:41.41,英文,,0,0,0,,And whatever the first percent is, the first variable that's passed in after a comma gets plugged in there.
Dialogue: 0,0:50:41.41,0:50:44.74,英文,,0,0,0,,And then the second gets plugged into the second, third into the third, and so forth.
Dialogue: 0,0:50:44.74,0:50:47.28,英文,,0,0,0,,So it's just based on left to right.
Dialogue: 0,0:50:47.28,0:50:53.16,英文,,0,0,0,,Yeah.
Dialogue: 0,0:50:53.16,0:50:54.10,英文,,0,0,0,,It's just a placeholder.
Dialogue: 0,0:50:54.10,0:50:56.06,英文,,0,0,0,,It's called a format code.
Dialogue: 0,0:50:56.06,0:50:59.10,英文,,0,0,0,,And it just means colloquially plug in some value here.
Dialogue: 0,0:50:59.10,0:51:04.56,英文,,0,0,0,,And printf, like the humans who wrote printf decades ago decided to treat %s special.
Dialogue: 0,0:51:04.56,0:51:04.90,英文,,0,0,0,,Why?
Dialogue: 0,0:51:04.90,0:51:05.48,英文,,0,0,0,,Just because.
Dialogue: 0,0:51:05.48,0:51:06.98,英文,,0,0,0,,They needed some placeholder.
Dialogue: 0,0:51:06.98,0:51:10.11,英文,,0,0,0,,They decided that, eh, no one's ever going to really want to type %s.
Dialogue: 0,0:51:10.11,0:51:12.73,英文,,0,0,0,,And if they do, they can just do %%s.
Dialogue: 0,0:51:12.73,0:51:19.13,英文,,0,0,0,,So they decided to implement printf in such a way that they have code that look analyzes whatever text comes in,
Dialogue: 0,0:51:19.13,0:51:25.18,英文,,0,0,0,,Looks for %s and then somehow plugs in the subsequent values into that placeholder.
Dialogue: 0,0:51:25.18,0:51:28.43,英文,,0,0,0,,And just this question.
Dialogue: 0,0:51:28.43,0:51:31.73,英文,,0,0,0,,Sorry.
Dialogue: 0,0:51:31.73,0:51:37.55,英文,,0,0,0,,Ah, so what if you wanted to do single characters, like initials, like DM or DJM for first, middle, last?
Dialogue: 0,0:51:37.55,0:51:38.08,英文,,0,0,0,,Absolutely.
Dialogue: 0,0:51:38.08,0:51:48.34,英文,,0,0,0,,And that, too, is a perfect segue from the two of you to what in general are going to be called data types in C. So it turns out in C, there's not only strings as text.
Dialogue: 0,0:51:48.34,0:51:52.74,英文,,0,0,0,,And we'll see in more detail and over the next couple of weeks what a string really is underneath the hood.
Dialogue: 0,0:51:52.74,0:51:55.60,英文,,0,0,0,,But strings of text are not the only thing that programs can output.
Dialogue: 0,0:51:55.60,0:51:58.97,英文,,0,0,0,,They can indeed output single characters as for initials.
Dialogue: 0,0:51:58.97,0:52:01.11,英文,,0,0,0,,They can output integers as well.
Dialogue: 0,0:52:01.11,0:52:06.09,英文,,0,0,0,,Turns out that printf has different format codes for all sorts of different data types.
Dialogue: 0,0:52:06.09,0:52:17.76,英文,,0,0,0,,And just some of the data types we'll see in the coming weeks will be this list here, which you'll notice it almost perfectly lines up with the CS50 functions that I rattled off earlier, like get char, get int, get string.
Dialogue: 0,0:52:17.76,0:52:23.48,英文,,0,0,0,,The reason we called those functions that is because each of them is designed to return to you a different type of value.
Dialogue: 0,0:52:23.48,0:52:26.22,英文,,0,0,0,,We've used get string already in this example here.
Dialogue: 0,0:52:26.22,0:52:31.43,英文,,0,0,0,,We'll soon see get int, and we'll see opportunities to use others.
Dialogue: 0,0:52:31.43,0:52:48.54,英文,,0,0,0,,Are the menu of available data types, plus others, dot, dot, dot, that you can use when writing a program in C. The onus, therefore, is on you to decide in advance, do I want to store an int in this variable, or a string, or heck, when writing fancier code, an image, or a sound, or a video even.
Dialogue: 0,0:52:48.54,0:52:51.22,英文,,0,0,0,,Those can all be different data types, dot, dot, dot.
Dialogue: 0,0:52:51.22,0:52:54.49,英文,,0,0,0,,But for now, we'll focus really on just these primitives.
Dialogue: 0,0:52:54.49,0:52:55.17,英文,,0,0,0,,That was a lot.
Dialogue: 0,0:52:55.17,0:52:57.05,英文,,0,0,0,,Let's go ahead and take a five-minute break here.
Dialogue: 0,0:52:57.05,0:52:57.93,英文,,0,0,0,,No cookies yet.
Dialogue: 0,0:52:57.93,0:53:00.18,英文,,0,0,0,,But in five minutes, we'll come back, dive into more detail.
Dialogue: 0,0:53:00.18,0:53:05.82,英文,,0,0,0,,In our second break today, we'll have cookies.
Dialogue: 0,0:53:05.82,0:53:07.28,英文,,0,0,0,,All right, we are back.
Dialogue: 0,0:53:07.28,0:53:11.38,英文,,0,0,0,,And so if you have been playing along at home but hitting some bumps in the road, that's totally normal.
Dialogue: 0,0:53:11.38,0:53:18.13,英文,,0,0,0,,And indeed, the goals of lecture generally will be to give you a sense conceptually of where we'll be going during the course of the week.
Dialogue: 0,0:53:18.13,0:53:25.92,英文,,0,0,0,,But it's indeed through the hands-on labs and problem sets that you'll really have an opportunity at your own pace to work through some of those same bumps in the road.
Dialogue: 0,0:53:25.92,0:53:28.86,英文,,0,0,0,,For today, let me give you a few more building blocks.
Dialogue: 0,0:53:28.86,0:53:34.04,英文,,0,0,0,,And these two will translate from scratch initially, namely like conditionals, like how, now, and see.
Dialogue: 0,0:53:34.04,0:53:43.45,英文,,0,0,0,,After knowing now how we can use functions, at least get string and printf, and we can use variables, like the string I created earlier, how
Dialogue: 0,0:53:43.45,0:53:47.13,英文,,0,0,0,,How can I now add to the mix things like decision making and conditionals at that?
Dialogue: 0,0:53:47.13,0:53:50.17,英文,,0,0,0,,Well, with conditionals in Scratch, we had this kind of syntax.
Dialogue: 0,0:53:50.17,0:53:56.38,英文,,0,0,0,,On the left, here in Scratch is how you might express if two variables, x and y, have this relationship.
Dialogue: 0,0:53:56.38,0:54:03.34,英文,,0,0,0,,If x is less than y, then say on the screen, x is less than y. Well, let me translate that to the right now in C code.
Dialogue: 0,0:54:03.34,0:54:08.44,英文,,0,0,0,,So in C, the corresponding code is going to look like this, assuming x and y already exist.
Dialogue: 0,0:54:08.44,0:54:09.78,英文,,0,0,0,,More on that later.
Dialogue: 0,0:54:09.78,0:54:13.24,英文,,0,0,0,,And notice a pattern we're going to see again and again.
Dialogue: 0,0:54:13.24,0:54:20.47,英文,,0,0,0,,There is going to be parentheses around the x and less than y. So parentheses around the Boolean expression, recall.
Dialogue: 0,0:54:20.47,0:54:27.85,英文,,0,0,0,,The Boolean expression is the true-false, the yes-no answer, a question that you're trying to ask in order to decide whether or not to do something.
Dialogue: 0,0:54:27.85,0:54:29.23,英文,,0,0,0,,So you use parentheses there.
Dialogue: 0,0:54:29.23,0:54:30.63,英文,,0,0,0,,So similar.
Dialogue: 0,0:54:30.63,0:54:44.86,英文,,0,0,0,,In functions, where we use parentheses for printf and parentheses for get string, and this is just a weird inconsistency stylistically, when using the keyword if, you should, as a matter of best practice, put a space after the word if.
Dialogue: 0,0:54:44.86,0:54:49.23,英文,,0,0,0,,When using a function like printf or get string, you shouldn't.
Dialogue: 0,0:54:49.23,0:54:53.53,英文,,0,0,0,,Both will work, but you'll find that these are conventions stylistically that most people adhere to.
Dialogue: 0,0:54:53.53,0:54:56.05,英文,,0,0,0,,So space when using an if here.
Dialogue: 0,0:54:56.05,0:55:02.50,英文,,0,0,0,,All right, now inside of the curly braces is where the actual code goes that you want to execute conditionally.
Dialogue: 0,0:55:02.50,0:55:12.87,英文,,0,0,0,,So if you want to print out x is less than y only if x is actually less than y in C, you use this open curly brace, which up until now you've probably rarely used on your keyboard.
Dialogue: 0,0:55:12.87,0:55:24.99,英文,,0,0,0,,And the closed curly brace down here, and those are kind of hugging, if you will, the one or more lines of code underneath the if, very similar in spirit to how the orange block here kind of hugs the purple puzzle piece here.
Dialogue: 0,0:55:24.99,0:55:27.23,英文,,0,0,0,,So there's no graphics in C. It's all text.
Dialogue: 0,0:55:27.23,0:55:32.09,英文,,0,0,0,,So you can think of those curly braces as really representing the same idea.
Dialogue: 0,0:55:32.09,0:55:36.18,英文,,0,0,0,,As a side note, if you only have one line of code,
Dialogue: 0,0:55:36.18,0:55:41.36,英文,,0,0,0,,Inside of the if condition, if you will, you strictly speaking don't need the curly braces.
Dialogue: 0,0:55:41.36,0:55:43.64,英文,,0,0,0,,But as a matter of good style, do include them.
Dialogue: 0,0:55:43.64,0:55:46.18,英文,,0,0,0,,It will make more obvious what your intent is.
Dialogue: 0,0:55:46.18,0:55:48.84,英文,,0,0,0,,How about in Scratch if you wanted to express this?
Dialogue: 0,0:55:48.84,0:55:52.80,英文,,0,0,0,,Two ways in the road that you might go, left or right, so to speak.
Dialogue: 0,0:55:52.80,0:56:01.17,英文,,0,0,0,,Well, if x is less than y, I want to say x is less than y. Else, I want to say the opposite, x is not less than y in this case.
Dialogue: 0,0:56:01.17,0:56:03.91,英文,,0,0,0,,So I'm making a decision based on that Boolean expression.
Dialogue: 0,0:56:03.91,0:56:08.41,英文,,0,0,0,,In C, it's almost the same, but you're adding to the mix the keyword else.
Dialogue: 0,0:56:08.41,0:56:14.88,英文,,0,0,0,,So MIT borrowed for Scratch the same keyword there, and a second pair of curly braces, open and close respectively.
Dialogue: 0,0:56:14.88,0:56:17.18,英文,,0,0,0,,And you might guess now what goes inside of those.
Dialogue: 0,0:56:17.18,0:56:23.11,英文,,0,0,0,,Well, you print out x is less than y, or you print out x is not less than y.
Dialogue: 0,0:56:23.11,0:56:25.27,英文,,0,0,0,,All right, what if there is a three-way fork in the road?
Dialogue: 0,0:56:25.27,0:56:29.45,英文,,0,0,0,,In Scratch, this actually gets a little unwieldy graphically, if you will.
Dialogue: 0,0:56:29.45,0:56:48.94,英文,,0,0,0,,But notice that in Scratch, this is how we could express if x is less than y, say x is less than y. Else if x is greater than y, say x is greater than y. Else if x equals y, then say x is equal to y. Now, minor inconsistency here.
Dialogue: 0,0:56:48.94,0:56:55.40,英文,,0,0,0,,Just a little bit ago, I claimed in C that an equal sign represents what, operation?
Dialogue: 0,0:56:55.40,0:56:57.96,英文,,0,0,0,,Assignments from right to left.
Dialogue: 0,0:56:57.96,0:57:06.37,英文,,0,0,0,,Insofar as Scratch is really meant for kids and they didn't really want to get into the weeds of this kind of semantic, equal sign in Scratch means equality.
Dialogue: 0,0:57:06.37,0:57:09.07,英文,,0,0,0,,However, we're going to need to fix this in C in just a moment.
Dialogue: 0,0:57:09.07,0:57:11.87,英文,,0,0,0,,In C, equal sign means assignment, right to left.
Dialogue: 0,0:57:11.87,0:57:14.27,英文,,0,0,0,,In Scratch, it literally means what you would expect.
Dialogue: 0,0:57:14.27,0:57:20.80,英文,,0,0,0,,All right, let's translate this code then to C. On the right, this code would correspond really to this.
Dialogue: 0,0:57:20.80,0:57:29.18,英文,,0,0,0,,And you can perhaps see somewhat goofily what the solution was, not unlike the percent percent solution earlier when humans painted themselves into one other corner.
Dialogue: 0,0:57:29.18,0:57:33.07,英文,,0,0,0,,You say if, you say else if, and you say else if.
Dialogue: 0,0:57:33.07,0:57:36.83,英文,,0,0,0,,And how did we resolve the use of a single equal sign already?
Dialogue: 0,0:57:36.83,0:57:42.24,英文,,0,0,0,,In C, when you want to express equality, is the thing on the left equal to the thing on the right?
Dialogue: 0,0:57:42.24,0:57:47.28,英文,,0,0,0,,You literally use two equal signs right next to each other, no space in between them.
Dialogue: 0,0:57:47.28,0:57:53.73,英文,,0,0,0,,But now this code would be correct on both the left and the right, whether you're doing this in Scratch or C, respectively.
Dialogue: 0,0:57:53.73,0:57:58.63,英文,,0,0,0,,But now we can kind of nitpick our code, specifically the design thereof.
Dialogue: 0,0:57:58.63,0:58:04.12,英文,,0,0,0,,Logically, can anyone critique the design of this code, either in Scratch or C?
Dialogue: 0,0:58:04.12,0:58:06.18,英文,,0,0,0,,Like, I feel like we could do better.
Dialogue: 0,0:58:06.18,0:58:13.42,英文,,0,0,0,,How about in back?
Dialogue: 0,0:58:13.42,0:58:13.98,英文,,0,0,0,,Perfect.
Dialogue: 0,0:58:13.98,0:58:26.16,英文,,0,0,0,,Logically, it's got to be the case that x is less than y or x is greater than y or, by conclusion, it's got to be equal to y. So why are you wasting my time or the computer's time asking a third question?
Dialogue: 0,0:58:26.16,0:58:31.52,英文,,0,0,0,,You don't need to ask this final else if, because logically, as you note, it should go without saying.
Dialogue: 0,0:58:31.52,0:58:37.27,英文,,0,0,0,,So it's a minor tweak, like you're doing extra work potentially in cases where x equals y.
Dialogue: 0,0:58:37.27,0:58:38.35,英文,,0,0,0,,So we can just refine that.
Dialogue: 0,0:58:38.35,0:58:40.99,英文,,0,0,0,,And just like in Scratch, you could just use an else block.
Dialogue: 0,0:58:40.99,0:58:52.41,英文,,0,0,0,,Similarly in C, could we simplify this code to just an else, a sort of catch-all logically that just handles the reality that, of course, that's going to be the final situation instead.
Dialogue: 0,0:58:52.41,0:58:56.83,英文,,0,0,0,,All right, so we have this ability now to express conditionals with Boolean expressions.
Dialogue: 0,0:58:56.83,0:58:58.93,英文,,0,0,0,,Let's actually do something with this next here.
Dialogue: 0,0:58:58.93,0:59:00.73,英文,,0,0,0,,So let me go back to VS Code.
Dialogue: 0,0:59:00.73,0:59:02.17,英文,,0,0,0,,I've closed hello.c.
Dialogue: 0,0:59:02.17,0:59:05.13,英文,,0,0,0,,And I want to create a second file for the sake of some demos now.
Dialogue: 0,0:59:05.13,0:59:08.40,英文,,0,0,0,,Recall that you can create new files by typing code.
Dialogue: 0,0:59:08.40,0:59:11.54,英文,,0,0,0,,Space, and then the name of the file you want to create.
Dialogue: 0,0:59:11.54,0:59:14.04,英文,,0,0,0,,For instance, I might do compare.c.
Dialogue: 0,0:59:14.04,0:59:17.92,英文,,0,0,0,,I want to write a program that's going to start comparing some values for demonstration's sake.
Dialogue: 0,0:59:17.92,0:59:25.00,英文,,0,0,0,,But before I do that, let me just show you by opening the File Explorer at right, this is similar in spirit to a Mac or PC.
Dialogue: 0,0:59:25.00,0:59:27.24,英文,,0,0,0,,Like, you can go up here and click on an icon.
Dialogue: 0,0:59:27.24,0:59:28.74,英文,,0,0,0,,And you can click on the plus icon.
Dialogue: 0,0:59:28.74,0:59:29.98,英文,,0,0,0,,And you'll get a blue box.
Dialogue: 0,0:59:29.98,0:59:32.15,英文,,0,0,0,,And I can type in compare.c.
Dialogue: 0,0:59:32.15,0:59:34.31,英文,,0,0,0,,And I can just manually create it that way.
Dialogue: 0,0:59:34.31,0:59:38.11,英文,,0,0,0,,Notice that opens the tab even without my having typed code.
Dialogue: 0,0:59:38.11,0:59:42.95,英文,,0,0,0,,So again, on the left, you have a GUI, a graphical user interface, albeit a simplistic one.
Dialogue: 0,0:59:42.95,0:59:47.39,英文,,0,0,0,,On the right, and at the bottom here, you have a command line interface, but they're one and the same.
Dialogue: 0,0:59:47.39,0:59:58.95,英文,,0,0,0,,What's nice, though, is that if I close this file accidentally, intentionally, whatnot, I can reopen it without creating a new one by just running that same command, code, space, compare.c.
Dialogue: 0,0:59:58.95,1:00:00.31,英文,,0,0,0,,So code is a VS Code thing.
Dialogue: 0,1:00:00.31,1:00:06.12,英文,,0,0,0,,It's just a user-friendly shortcut, but it's just creating a file or opening an existing file like that.
Dialogue: 0,1:00:06.12,1:00:08.92,英文,,0,0,0,,I'm going to hide the file explorer just to make more room for code here.
Dialogue: 0,1:00:08.92,1:00:10.00,英文,,0,0,0,,And let's go ahead and do this.
Dialogue: 0,1:00:10.00,1:00:15.35,英文,,0,0,0,,Let's write a program that compares two values that the human inputs, but not strings this time.
Dialogue: 0,1:00:15.35,1:00:17.27,英文,,0,0,0,,Let's use some actual integers.
Dialogue: 0,1:00:17.27,1:00:22.30,英文,,0,0,0,,All right, I'm going to go ahead and include the CS50 library's header file at top.
Dialogue: 0,1:00:22.30,1:00:23.26,英文,,0,0,0,,CS50.h.
Dialogue: 0,1:00:23.26,1:00:26.08,英文,,0,0,0,,I'm going to also include standard IO.h.
Dialogue: 0,1:00:26.08,1:00:26.94,英文,,0,0,0,,Why?
Dialogue: 0,1:00:26.94,1:00:31.20,英文,,0,0,0,,One gives me user-friendly input via get string, get int, and so forth.
Dialogue: 0,1:00:31.20,1:00:35.76,英文,,0,0,0,,One gives me user-friendly output via printf in the case of standard IO.h.
Dialogue: 0,1:00:35.76,1:00:40.19,英文,,0,0,0,,Now I'm just going to kind of blindly type this line of code, which we'll come back to in future weeks.
Dialogue: 0,1:00:40.19,1:00:45.09,英文,,0,0,0,,But for now, that's analogous to the when green flag clicked code in Scratch.
Dialogue: 0,1:00:45.09,1:00:46.43,英文,,0,0,0,,And now let's go ahead and do this.
Dialogue: 0,1:00:46.43,1:00:52.09,英文,,0,0,0,,Let me go ahead and get an int from the user and ask the user, what's x, question mark.
Dialogue: 0,1:00:52.09,1:00:53.37,英文,,0,0,0,,I'm not going to bother with a new line.
Dialogue: 0,1:00:53.37,1:00:56.59,英文,,0,0,0,,I want to keep it all in one line just for aesthetic's sake.
Dialogue: 0,1:00:56.59,1:01:01.66,英文,,0,0,0,,But when I get back an int, just like I get back a string, I get back a return value.
Dialogue: 0,1:01:01.66,1:01:07.98,英文,,0,0,0,,So if I want to store the result of get int somewhere, I had better put it in a variable.
Dialogue: 0,1:01:07.98,1:01:09.78,英文,,0,0,0,,And I can call the variable anything I want.
Dialogue: 0,1:01:09.78,1:01:12.96,英文,,0,0,0,,Previously, I used answer or first or last.
Dialogue: 0,1:01:12.96,1:01:19.86,英文,,0,0,0,,Now I'm going to use x. But there's still two things left to do here logically, even though we haven't technically done this yet.
Dialogue: 0,1:01:19.86,1:01:22.96,英文,,0,0,0,,What do I still need to do?
Dialogue: 0,1:01:22.96,1:01:26.09,英文,,0,0,0,,So I need the semicolon at the end.
Dialogue: 0,1:01:26.09,1:01:27.57,英文,,0,0,0,,And the int at the beginning.
Dialogue: 0,1:01:27.57,1:01:32.83,英文,,0,0,0,,You, the programmer, starting today, kind of need to decide what you're going to be storing in your variables.
Dialogue: 0,1:01:32.83,1:01:35.79,英文,,0,0,0,,And you just need to tell the computer that so that it knows.
Dialogue: 0,1:01:35.79,1:01:41.35,英文,,0,0,0,,Now, as a teaser for languages like Python, more modern languages, turns out humans realize, well, gee, this is stupid.
Dialogue: 0,1:01:41.35,1:01:43.85,英文,,0,0,0,,Like, why can't the computer just figure out that I'm putting an int there?
Dialogue: 0,1:01:43.85,1:01:45.93,英文,,0,0,0,,Why do I have to tell it proactively?
Dialogue: 0,1:01:45.93,1:01:49.71,英文,,0,0,0,,So in some languages nowadays, like Python, we'll get rid of some of this syntax.
Dialogue: 0,1:01:49.71,1:01:50.97,英文,,0,0,0,,We'll get rid of the semicolons.
Dialogue: 0,1:01:50.97,1:01:54.59,英文,,0,0,0,,But for now, we're looking at really the origins of how this all worked.
Dialogue: 0,1:01:54.59,1:01:57.35,英文,,0,0,0,,All right, so I've done this one line ending with semicolon.
Dialogue: 0,1:01:57.35,1:01:58.41,英文,,0,0,0,,Let me do one other.
Dialogue: 0,1:01:58.41,1:02:02.60,英文,,0,0,0,,And let me get a second int asking the user, what's y, question mark.
Dialogue: 0,1:02:02.60,1:02:06.76,英文,,0,0,0,,So almost identical, but different responses from the user, hopefully.
Dialogue: 0,1:02:06.76,1:02:10.61,英文,,0,0,0,,And let me just ask simply, if x is less than y,
Dialogue: 0,1:02:10.61,1:02:13.26,英文,,0,0,0,,In parentheses, then some curly braces.
Dialogue: 0,1:02:13.26,1:02:23.38,英文,,0,0,0,,Let me go ahead and print out, quote unquote, x is less than y, backslash n. And now, just as a side note, I seem to be typing kind of fast.
Dialogue: 0,1:02:23.38,1:02:25.46,英文,,0,0,0,,Some of that is because VS Code is helping me.
Dialogue: 0,1:02:25.46,1:02:28.78,英文,,0,0,0,,Let me go back to this first line with the if.
Dialogue: 0,1:02:28.78,1:02:29.93,英文,,0,0,0,,Hit Enter.
Dialogue: 0,1:02:29.93,1:02:33.71,英文,,0,0,0,,And now I'm only on my keyboard going to type the open curly brace.
Dialogue: 0,1:02:33.71,1:02:36.45,英文,,0,0,0,,This is a feature of many text editors nowadays.
Dialogue: 0,1:02:36.45,1:02:38.01,英文,,0,0,0,,It finishes part of your thought.
Dialogue: 0,1:02:38.01,1:02:38.59,英文,,0,0,0,,Why?
Dialogue: 0,1:02:38.59,1:02:42.67,英文,,0,0,0,,Just to save yourself a keystroke to make sure you don't accidentally forget the closing one.
Dialogue: 0,1:02:42.67,1:02:45.75,英文,,0,0,0,,So you'll notice sometimes that things are happening that you didn't type.
Dialogue: 0,1:02:45.75,1:02:49.62,英文,,0,0,0,,It's just VS code or future programs you use trying to be helpful for you.
Dialogue: 0,1:02:49.62,1:02:57.12,英文,,0,0,0,,I'll go ahead and manually type out now printf x is less than y backslash n close quote semicolon.
Dialogue: 0,1:02:57.12,1:03:00.43,英文,,0,0,0,,So let me go ahead now and try to run this.
Dialogue: 0,1:03:00.43,1:03:01.39,英文,,0,0,0,,And we'll see.
Dialogue: 0,1:03:01.39,1:03:02.07,英文,,0,0,0,,Let's see.
Dialogue: 0,1:03:02.07,1:03:07.11,英文,,0,0,0,,So make, not hello, but make compare, because this file is called compare.c.
Dialogue: 0,1:03:07.11,1:03:08.72,英文,,0,0,0,,Hitting Enter.
Dialogue: 0,1:03:08.72,1:03:12.41,英文,,0,0,0,,OK, no output is good because it means I haven't messed up.
Dialogue: 0,1:03:12.41,1:03:16.79,英文,,0,0,0,,Let me do ./compare instead of ./hello, Enter.
Dialogue: 0,1:03:16.79,1:03:17.39,英文,,0,0,0,,What's x?
Dialogue: 0,1:03:17.39,1:03:18.51,英文,,0,0,0,,How about 1?
Dialogue: 0,1:03:18.51,1:03:19.01,英文,,0,0,0,,What's y?
Dialogue: 0,1:03:19.01,1:03:20.45,英文,,0,0,0,,How about 2?
Dialogue: 0,1:03:20.45,1:03:23.59,英文,,0,0,0,,x is less than y. Well, let's try it again.
Dialogue: 0,1:03:23.59,1:03:25.21,英文,,0,0,0,,And here I'll save you some keystrokes too.
Dialogue: 0,1:03:25.21,1:03:26.57,英文,,0,0,0,,Let me clear my screen.
Dialogue: 0,1:03:26.57,1:03:35.39,英文,,0,0,0,,Instead of constantly typing ./this and ./that, you can also use your keyboard's arrow keys in VS Code to scroll back through time.
Dialogue: 0,1:03:35.39,1:03:37.95,英文,,0,0,0,,So if I hit up once, there's the last command I wrote.
Dialogue: 0,1:03:37.95,1:03:41.62,英文,,0,0,0,,If I do it up twice, there's the second to last command I wrote.
Dialogue: 0,1:03:41.62,1:03:46.64,英文,,0,0,0,,So sometimes if you see me doing things fast, it's just because I'm kind of cheating and going through my history like that.
Dialogue: 0,1:03:46.64,1:03:50.77,英文,,0,0,0,,All right, let me go ahead, though, and rerun ./compare.
Dialogue: 0,1:03:50.77,1:03:53.09,英文,,0,0,0,,Enter. Let's reverse it this time.
Dialogue: 0,1:03:53.09,1:03:56.87,英文,,0,0,0,,2 for x, 1 for y. And now, of course, there's no output.
Dialogue: 0,1:03:56.87,1:03:57.13,英文,,0,0,0,,All right.
Dialogue: 0,1:03:57.13,1:03:59.95,英文,,0,0,0,,Well, that's logically to be expected because we didn't have an else here.
Dialogue: 0,1:03:59.95,1:04:01.95,英文,,0,0,0,,So let's add that. Else.
Dialogue: 0,1:04:01.95,1:04:05.76,英文,,0,0,0,,Now let's open my curly braces, letting VS Code do one of them for me.
Dialogue: 0,1:04:05.76,1:04:12.54,英文,,0,0,0,,printf quote unquote x is not less than y backslash n semicolon.
Dialogue: 0,1:04:12.54,1:04:13.98,英文,,0,0,0,,Let me go ahead and try this again.
Dialogue: 0,1:04:13.98,1:04:15.60,英文,,0,0,0,,Dot slash compare.
Dialogue: 0,1:04:15.60,1:04:16.60,英文,,0,0,0,,Enter.
Dialogue: 0,1:04:16.60,1:04:20.83,英文,,0,0,0,,Again, 2 for x, 1 for y. And we should see.
Dialogue: 0,1:04:20.83,1:04:23.09,英文,,0,0,0,,Huh.
Dialogue: 0,1:04:23.09,1:04:24.71,英文,,0,0,0,,What did I do wrong?
Dialogue: 0,1:04:24.71,1:04:27.05,英文,,0,0,0,,Why am I not seeing any else output?
Dialogue: 0,1:04:27.05,1:04:30.77,英文,,0,0,0,,Yeah?
Dialogue: 0,1:04:30.77,1:04:31.25,英文,,0,0,0,,Exactly.
Dialogue: 0,1:04:31.25,1:04:34.13,英文,,0,0,0,,You've got to get into the habit after you change your code of recompiling it.
Dialogue: 0,1:04:34.13,1:04:39.00,英文,,0,0,0,,Otherwise, the zeros and ones in the server are the old ones until you manually compile.
Dialogue: 0,1:04:39.00,1:04:39.72,英文,,0,0,0,,So let's fix this.
Dialogue: 0,1:04:39.72,1:04:41.28,英文,,0,0,0,,Make compare, enter.
Dialogue: 0,1:04:41.28,1:04:42.00,英文,,0,0,0,,No error messages.
Dialogue: 0,1:04:42.00,1:04:42.46,英文,,0,0,0,,That's good.
Dialogue: 0,1:04:42.46,1:04:45.58,英文,,0,0,0,,Dot slash compare, 2, 1.
Dialogue: 0,1:04:45.58,1:04:47.26,英文,,0,0,0,,And now I get back the output.
Dialogue: 0,1:04:47.26,1:04:49.32,英文,,0,0,0,,So x is not less than y.
Dialogue: 0,1:04:49.32,1:04:52.32,英文,,0,0,0,,How about if I go and add in the third condition?
Dialogue: 0,1:04:52.32,1:04:55.77,英文,,0,0,0,,Well, we can do this either efficiently or inefficiently.
Dialogue: 0,1:04:55.77,1:04:57.27,英文,,0,0,0,,Let me go ahead and refine this.
Dialogue: 0,1:04:57.27,1:05:11.15,英文,,0,0,0,,So else if x is greater than y, let's literally say x is greater than y. And now I could do else if x equals equals y, but I think we already claimed that that's unnecessarily inefficient.
Dialogue: 0,1:05:11.15,1:05:12.98,英文,,0,0,0,,So let's just have our catch-all.
Dialogue: 0,1:05:12.98,1:05:20.00,英文,,0,0,0,,And here I'm going to say, quote unquote, x is equal to backslash n, close quote there.
Dialogue: 0,1:05:20.00,1:05:24.04,英文,,0,0,0,,So I think now, with this code, we've handled all three scenarios.
Dialogue: 0,1:05:24.04,1:05:28.88,英文,,0,0,0,,Let me go ahead and recompile it properly, make compare, dot slash compare.
Dialogue: 0,1:05:28.88,1:05:33.98,英文,,0,0,0,,And now 1 and 2, x is less than y. Let me run it again.
Dialogue: 0,1:05:33.98,1:05:41.25,英文,,0,0,0,,2 and 1, x is greater than y. And lastly, 1 and 1, and x is equal to y.
Dialogue: 0,1:05:41.25,1:05:43.11,英文,,0,0,0,,So for the most part, our code's getting longer.
Dialogue: 0,1:05:43.11,1:05:47.91,英文,,0,0,0,,We're up to like 21 lines of code, though some of them are just single characters on the screen.
Dialogue: 0,1:05:47.91,1:05:49.45,英文,,0,0,0,,Almost everything else is the same.
Dialogue: 0,1:05:49.45,1:05:57.86,英文,,0,0,0,,I'm using the CS50 library's header file for my get int function, standard io.h for my printf function.
Dialogue: 0,1:05:57.86,1:06:01.88,英文,,0,0,0,,And the rest of this is just now new syntax for conditionals as well.
Dialogue: 0,1:06:01.88,1:06:08.37,英文,,0,0,0,,Questions then on this C implementation of just some basic comparisons like this?
Dialogue: 0,1:06:08.37,1:06:08.81,英文,,0,0,0,,Any questions?
Dialogue: 0,1:06:08.81,1:06:14.61,英文,,0,0,0,,Yeah.
Dialogue: 0,1:06:14.61,1:06:15.19,英文,,0,0,0,,Good question.
Dialogue: 0,1:06:15.19,1:06:17.36,英文,,0,0,0,,Do the opening brackets need to be on a separate line?
Dialogue: 0,1:06:17.36,1:06:18.62,英文,,0,0,0,,In CS50, yes.
Dialogue: 0,1:06:18.62,1:06:25.60,英文,,0,0,0,,What you'll see is that as part of the submission process, we compare your code against a style guide, which is the norm in industry.
Dialogue: 0,1:06:25.60,1:06:29.40,英文,,0,0,0,,A company would have its own sense of style and how its code should look.
Dialogue: 0,1:06:29.40,1:06:35.25,英文,,0,0,0,,And there's generally automated tools within a company that help give feedback on the code or stylize it as such.
Dialogue: 0,1:06:35.25,1:06:38.45,英文,,0,0,0,,There are alternative styles than what we use in the class.
Dialogue: 0,1:06:38.45,1:06:51.50,英文,,0,0,0,,We deliberately keep and ask that you keep the curly braces on their own line, if only because it rather resembles the hugging nature of Scratch's blocks and just makes clear that they're balanced, open and closed.
Dialogue: 0,1:06:51.50,1:06:58.53,英文,,0,0,0,,However, another common paradigm in some languages and with some programmers is to do something like this.
Dialogue: 0,1:06:58.53,1:07:03.81,英文,,0,0,0,,On each of them, so you have the opening curly brace on the same line as here.
Dialogue: 0,1:07:03.81,1:07:04.91,英文,,0,0,0,,We do not recommend this.
Dialogue: 0,1:07:04.91,1:07:08.07,英文,,0,0,0,,This is in vogue in the JavaScript world and some others.
Dialogue: 0,1:07:08.07,1:07:16.32,英文,,0,0,0,,But ultimately, in the real world, it's up to each individual programmer and or the company they're working for, if applicable, to decide on those things.
Dialogue: 0,1:07:16.32,1:07:21.05,英文,,0,0,0,,All right, so beyond then these conditionals, what if we want to do something that's maybe pretty common?
Dialogue: 0,1:07:21.05,1:07:30.30,英文,,0,0,0,,So almost every piece of software or website nowadays that you use has you agree to some terms and conditions by typing yes or no or just y for yes and n for no.
Dialogue: 0,1:07:30.30,1:07:33.28,英文,,0,0,0,,So how could we implement some kind of agreement system?
Dialogue: 0,1:07:33.28,1:07:33.96,英文,,0,0,0,,Well, let me do this.
Dialogue: 0,1:07:33.96,1:07:37.95,英文,,0,0,0,,Let me create a new program, a third one called agree.c.
Dialogue: 0,1:07:37.95,1:07:41.33,英文,,0,0,0,,So I'm going to write code agree.c just to give myself a new tab.
Dialogue: 0,1:07:41.33,1:07:44.23,英文,,0,0,0,,I'm going to start as always now, include cs50.h.
Dialogue: 0,1:07:44.23,1:07:46.69,英文,,0,0,0,,Let's include stdio.h.
Dialogue: 0,1:07:46.69,1:07:53.43,英文,,0,0,0,,And then let me do my int main void, which again, for today's purposes, we'll take at face value is just copy paste.
Dialogue: 0,1:07:53.43,1:08:00.49,英文,,0,0,0,,And if I just want to get y or n, for instance, instead of yes or no, we can just use a simpler variable here.
Dialogue: 0,1:08:00.49,1:08:02.00,英文,,0,0,0,,How about just a char?
Dialogue: 0,1:08:02.00,1:08:03.84,英文,,0,0,0,,A character, a single character.
Dialogue: 0,1:08:03.84,1:08:09.98,英文,,0,0,0,,So I can use getchar to ask the user, for instance, do you agree question mark?
Dialogue: 0,1:08:09.98,1:08:12.90,英文,,0,0,0,,But as before, I need to store this somewhere.
Dialogue: 0,1:08:12.90,1:08:15.17,英文,,0,0,0,,So I don't want a string because it's a single char.
Dialogue: 0,1:08:15.17,1:08:16.29,英文,,0,0,0,,I don't want an int.
Dialogue: 0,1:08:16.29,1:08:17.35,英文,,0,0,0,,I just want a char.
Dialogue: 0,1:08:17.35,1:08:19.45,英文,,0,0,0,,And it's literally C-H-A-R.
Dialogue: 0,1:08:19.45,1:08:21.47,英文,,0,0,0,,And then I could call this thing anything I want.
Dialogue: 0,1:08:21.47,1:08:22.31,英文,,0,0,0,,It's conventional.
Dialogue: 0,1:08:22.31,1:08:34.46,英文,,0,0,0,,If you have a simple program with just a single variable and it's of type char, call it c. If it's an int, call it i. If it's a string, call it s. For now, I'm just going to keep it simple and call it c. And now I'm going to ask a question.
Dialogue: 0,1:08:34.46,1:08:42.48,英文,,0,0,0,,So if c equals equals how about quote unquote y
Dialogue: 0,1:08:42.48,1:08:50.50,英文,,0,0,0,,Then let me go ahead and print out agreed, backslash n, as though they agreed to my terms and conditions.
Dialogue: 0,1:08:50.50,1:09:04.22,英文,,0,0,0,,Otherwise, let's see, else if the character equals equals quote unquote n, then let me go ahead and print out, say, not agreed, as though they didn't, quote unquote.
Dialogue: 0,1:09:04.22,1:09:07.26,英文,,0,0,0,,And let's leave it at that, I think, here initially.
Dialogue: 0,1:09:07.26,1:09:11.86,英文,,0,0,0,,Now, you'll notice one curiosity, one inconsistency, perhaps,
Dialogue: 0,1:09:11.86,1:09:15.80,英文,,0,0,0,,Does anyone want to call it out, though it's somewhat subtle?
Dialogue: 0,1:09:15.80,1:09:19.69,英文,,0,0,0,,I've done something ever so slightly differently without explaining it yet.
Dialogue: 0,1:09:19.69,1:09:23.14,英文,,0,0,0,,Do you see it?
Dialogue: 0,1:09:23.14,1:09:30.60,英文,,0,0,0,,Yeah, so I've suddenly used single quotation marks for my single characters and double quotes for my actual strings of text.
Dialogue: 0,1:09:30.60,1:09:41.37,英文,,0,0,0,,This is a necessity in C. When you're dealing with strings, like strings of text, like someone's name, a sentence, a paragraph, anything really more than one character, you typically use double quotes.
Dialogue: 0,1:09:41.37,1:09:42.57,英文,,0,0,0,,And indeed, you must.
Dialogue: 0,1:09:42.57,1:09:49.91,英文,,0,0,0,,When dealing with deliberately single characters, like I am here for y or n, you must use single quotes instead.
Dialogue: 0,1:09:49.91,1:09:50.43,英文,,0,0,0,,Why?
Dialogue: 0,1:09:50.43,1:09:54.56,英文,,0,0,0,,Because that makes sure that the computer knows that it's indeed a char and not a string.
Dialogue: 0,1:09:54.56,1:09:55.96,英文,,0,0,0,,So double quotes are for strings.
Dialogue: 0,1:09:55.96,1:09:57.70,英文,,0,0,0,,Single quotes are for chars.
Dialogue: 0,1:09:57.70,1:10:00.64,英文,,0,0,0,,So with that said, let me go ahead and zoom out.
Dialogue: 0,1:10:00.64,1:10:04.98,英文,,0,0,0,,Let me go ahead in my terminal window, run make agree, Enter.
Dialogue: 0,1:10:04.98,1:10:08.83,英文,,0,0,0,,Seems to work OK, so let me go ahead and do ./agree.
Dialogue: 0,1:10:08.83,1:10:13.35,英文,,0,0,0,,Let me go ahead now and type in y. Here we go.
Dialogue: 0,1:10:13.35,1:10:15.35,英文,,0,0,0,,Enter.
Dialogue: 0,1:10:15.35,1:10:16.55,英文,,0,0,0,,Huh.
Dialogue: 0,1:10:16.55,1:10:17.51,英文,,0,0,0,,Let me try that again.
Dialogue: 0,1:10:17.51,1:10:19.05,英文,,0,0,0,,Rerun ./agree.
Dialogue: 0,1:10:19.05,1:10:20.39,英文,,0,0,0,,How about no?
Dialogue: 0,1:10:20.39,1:10:22.63,英文,,0,0,0,,Enter.
Dialogue: 0,1:10:22.63,1:10:28.58,英文,,0,0,0,,Why is it not behaving as I would have expected?
Dialogue: 0,1:10:28.58,1:10:32.20,英文,,0,0,0,,Yeah, I kind of cheated there, and I hit the caps lock key just as I started typing in input.
Dialogue: 0,1:10:32.20,1:10:32.42,英文,,0,0,0,,Why?
Dialogue: 0,1:10:32.42,1:10:37.54,英文,,0,0,0,,Because I deliberately wanted to type in uppercase instead of lowercase, which is kind of reasonable.
Dialogue: 0,1:10:37.54,1:10:42.65,英文,,0,0,0,,It's a little obnoxious if you force the user to toggle their caps lock key on or off when you just need a simple answer.
Dialogue: 0,1:10:42.65,1:10:47.21,英文,,0,0,0,,That's not the best user experience or UX, but it would work if I cooperated.
Dialogue: 0,1:10:47.21,1:10:49.87,英文,,0,0,0,,Let me run this again without caps lock on.
Dialogue: 0,1:10:49.87,1:10:52.29,英文,,0,0,0,,Y, lowercase for yes.
Dialogue: 0,1:10:52.29,1:10:53.23,英文,,0,0,0,,Ah, that worked.
Dialogue: 0,1:10:53.23,1:10:55.37,英文,,0,0,0,,N, lowercase for no.
Dialogue: 0,1:10:55.37,1:10:56.01,英文,,0,0,0,,That worked.
Dialogue: 0,1:10:56.01,1:10:58.05,英文,,0,0,0,,But how could I get it to work for both?
Dialogue: 0,1:10:58.05,1:10:59.13,英文,,0,0,0,,Well, how about this?
Dialogue: 0,1:10:59.13,1:11:01.34,英文,,0,0,0,,Let me go ahead and just add two possibilities.
Dialogue: 0,1:11:01.34,1:11:20.45,英文,,0,0,0,,So else if c equals equals quote unquote capital Y, then also do printf agreed backslash n. And down here, else if c equals equals single quote Capital N, then go ahead and print out again, not agreed.
Dialogue: 0,1:11:20.45,1:11:23.85,英文,,0,0,0,,OK, this I will claim now is correct.
Dialogue: 0,1:11:23.85,1:11:27.09,英文,,0,0,0,,And I'll do make agree real fast, dot slash agree.
Dialogue: 0,1:11:27.09,1:11:28.35,英文,,0,0,0,,And I'll use capital.
Dialogue: 0,1:11:28.35,1:11:29.19,英文,,0,0,0,,It now works.
Dialogue: 0,1:11:29.19,1:11:30.67,英文,,0,0,0,,I'll use capital.
Dialogue: 0,1:11:30.67,1:11:32.35,英文,,0,0,0,,It again works.
Dialogue: 0,1:11:32.35,1:11:34.53,英文,,0,0,0,,But this is perhaps not the best design.
Dialogue: 0,1:11:34.53,1:11:39.55,英文,,0,0,0,,Let me hide the terminal window and pull this up on the screen all at once.
Dialogue: 0,1:11:39.55,1:11:46.20,英文,,0,0,0,,Why might this arguably not be the best design, even though it's correct?
Dialogue: 0,1:11:46.20,1:11:47.94,英文,,0,0,0,,There's another term of art we can toss here.
Dialogue: 0,1:11:47.94,1:11:51.04,英文,,0,0,0,,Like, something smells kind of funky about this code.
Dialogue: 0,1:11:51.04,1:11:52.24,英文,,0,0,0,,This is an actual term of art.
Dialogue: 0,1:11:52.24,1:11:53.86,英文,,0,0,0,,Like, there's code smell here.
Dialogue: 0,1:11:53.86,1:11:55.94,英文,,0,0,0,,Like, something smells a little off.
Dialogue: 0,1:11:55.94,1:11:56.62,英文,,0,0,0,,Why?
Dialogue: 0,1:11:56.62,1:12:07.45,英文,,0,0,0,,What do you think?
Dialogue: 0,1:12:07.45,1:12:09.25,英文,,0,0,0,,Yeah, there's the same output again and again.
Dialogue: 0,1:12:09.25,1:12:10.49,英文,,0,0,0,,I mean, I manually typed it.
Dialogue: 0,1:12:10.49,1:12:17.15,英文,,0,0,0,,But honestly, I might as well have just copied and pasted most of my original code to do it again and again for the two capital letters.
Dialogue: 0,1:12:17.15,1:12:27.14,英文,,0,0,0,,So if line 10 and 14 are the same, and line 18 and 22 are the same, and then the rest of these if and else ifs are almost the same,
Dialogue: 0,1:12:27.14,1:12:28.36,英文,,0,0,0,,Like, there's some code smell there.
Dialogue: 0,1:12:28.36,1:12:29.34,英文,,0,0,0,,Like, it's not well-designed.
Dialogue: 0,1:12:29.34,1:12:29.98,英文,,0,0,0,,Why?
Dialogue: 0,1:12:29.98,1:12:36.87,英文,,0,0,0,,Because if I want to change things now, just like last week in Scratch, I might have to change my code in multiple places, or copy-paste is never a good thing.
Dialogue: 0,1:12:36.87,1:12:42.83,英文,,0,0,0,,And God forbid I want to add support for yes and no as full words, it's really going to get long.
Dialogue: 0,1:12:42.83,1:12:44.07,英文,,0,0,0,,So how can we solve this?
Dialogue: 0,1:12:44.07,1:12:47.15,英文,,0,0,0,,Well, it turns out that we can combine some of these thoughts.
Dialogue: 0,1:12:47.15,1:12:49.64,英文,,0,0,0,,So let me try to improve the yeses first.
Dialogue: 0,1:12:49.64,1:12:54.34,英文,,0,0,0,,It turns out if I delete that clause, I can actually or things together.
Dialogue: 0,1:12:54.34,1:13:06.81,英文,,0,0,0,,In Scratch, there's a couple of puzzle pieces, if you didn't discover them, that literally have the word or and the word and on them, which allow you to combine Boolean expressions so that either this or this is true or this and this is true.
Dialogue: 0,1:13:06.81,1:13:09.39,英文,,0,0,0,,In C, you can't just say the word or.
Dialogue: 0,1:13:09.39,1:13:13.01,英文,,0,0,0,,You instead use two vertical bars.
Dialogue: 0,1:13:13.01,1:13:16.36,英文,,0,0,0,,And vertical bars together mean or logically.
Dialogue: 0,1:13:16.36,1:13:21.86,英文,,0,0,0,,And so I can say C equals equals quote unquote capital Y agreed.
Dialogue: 0,1:13:21.86,1:13:26.63,英文,,0,0,0,,And now I can get rid of this code down here and let me go ahead and say
Dialogue: 0,1:13:26.63,1:13:32.55,英文,,0,0,0,,Vertical, vertical bar, twice c equals, quote unquote, n in all caps.
Dialogue: 0,1:13:32.55,1:13:36.95,英文,,0,0,0,,And now my program's like roughly a third smaller, which is good.
Dialogue: 0,1:13:36.95,1:13:38.03,英文,,0,0,0,,There's less redundancy.
Dialogue: 0,1:13:38.03,1:13:56.76,英文,,0,0,0,,And if I reopen my terminal window, rerun make of agree, dot slash agree, now I can type little y or big Y. And same thing for lowercase and uppercase N. Any questions then on this syntax, where by now you can combine thoughts and just kind of tighten things up?
Dialogue: 0,1:13:56.76,1:13:58.01,英文,,0,0,0,,And there'll be other such tricks, too.
Dialogue: 0,1:13:58.01,1:14:02.32,英文,,0,0,0,,Yeah.
Dialogue: 0,1:14:02.32,1:14:06.44,英文,,0,0,0,,A really good question, is there not a function to just ignore the case?
Dialogue: 0,1:14:06.44,1:14:07.92,英文,,0,0,0,,Short answer, there is.
Dialogue: 0,1:14:07.92,1:14:10.94,英文,,0,0,0,,And we'll see how to do that in actually just about a week's time.
Dialogue: 0,1:14:10.94,1:14:20.05,英文,,0,0,0,,And in other languages, there's even more ways to just canonicalize the user's input, throwing away any space characters they might have accidentally hit, forcing everything to lowercase.
Dialogue: 0,1:14:20.05,1:14:23.33,英文,,0,0,0,,In C, it's going to be a little more work on our part to do that.
Dialogue: 0,1:14:23.33,1:14:25.97,英文,,0,0,0,,But in fact, as early as next week, we'll see how we can do that.
Dialogue: 0,1:14:25.97,1:14:29.66,英文,,0,0,0,,But for now, we're comparing, indeed, just these literal values.
Dialogue: 0,1:14:29.66,1:14:32.55,英文,,0,0,0,,Other questions?
Dialogue: 0,1:14:32.55,1:14:38.28,英文,,0,0,0,,You can put in what you're supposed to.
Dialogue: 0,1:14:38.28,1:14:39.06,英文,,0,0,0,,Really good question.
Dialogue: 0,1:14:39.06,1:14:43.26,英文,,0,0,0,,So we are assuming, with this program and all of my last ones, that the human's cooperating.
Dialogue: 0,1:14:43.26,1:14:46.57,英文,,0,0,0,,When I asked for their name, they typed in David and not 123.
Dialogue: 0,1:14:46.57,1:14:50.25,英文,,0,0,0,,Or in this case, they typed in a single character and not a full word.
Dialogue: 0,1:14:50.25,1:14:53.53,英文,,0,0,0,,So this is one of the features, often, of using a library.
Dialogue: 0,1:14:53.53,1:15:01.40,英文,,0,0,0,,So for instance, if I run agree again, and I say something like, sure, enter, it rejects it altogether.
Dialogue: 0,1:15:01.40,1:15:01.86,英文,,0,0,0,,Why?
Dialogue: 0,1:15:01.86,1:15:05.88,英文,,0,0,0,,Because S-U-R-E is a string of characters.
Dialogue: 0,1:15:05.88,1:15:07.42,英文,,0,0,0,,It's not a single character.
Dialogue: 0,1:15:07.42,1:15:11.36,英文,,0,0,0,,Now, I could just say something like x, which is neither y nor n, of course.
Dialogue: 0,1:15:11.36,1:15:14.18,英文,,0,0,0,,But it tolerates that because it's a single character.
Dialogue: 0,1:15:14.18,1:15:19.08,英文,,0,0,0,,But built into CS50's library is some built-in rejections of inputs that's not expected.
Dialogue: 0,1:15:19.08,1:15:27.15,英文,,0,0,0,,So if you use get int and the user types in not the number 1 or 2, but cat, C-A-T, it will just prompt them again, prompt them again.
Dialogue: 0,1:15:27.15,1:15:33.03,英文,,0,0,0,,And this is where, too, if you were to do this manually in C, you end up writing this much code just to,
Dialogue: 0,1:15:33.03,1:15:34.19,英文,,0,0,0,,Check for all of these errors.
Dialogue: 0,1:15:34.19,1:15:38.20,英文,,0,0,0,,That's why we use these training wheels for a few weeks, just to make the code more robust.
Dialogue: 0,1:15:38.20,1:15:45.37,英文,,0,0,0,,But in a few weeks' time, we'll take the library away, and you'll see and understand how it's indeed doing all that.
Dialogue: 0,1:15:45.37,1:15:46.69,英文,,0,0,0,,All right, so how about this?
Dialogue: 0,1:15:46.69,1:15:54.59,英文,,0,0,0,,Let's now transition to something a little more scratch-like literally by creating how about another program here called meow, so meow.c.
Dialogue: 0,1:15:54.59,1:15:56.53,英文,,0,0,0,,We won't have any audio capabilities for this one.
Dialogue: 0,1:15:56.53,1:15:57.91,英文,,0,0,0,,We'll just rely on print.
Dialogue: 0,1:15:57.91,1:16:03.00,英文,,0,0,0,,And suppose that I wanted to write a program in C that just simulates like a cat meowing.
Dialogue: 0,1:16:03.00,1:16:04.86,英文,,0,0,0,,So I don't need any user input just yet.
Dialogue: 0,1:16:04.86,1:16:07.10,英文,,0,0,0,,So I'm just going to use stdio.h.
Dialogue: 0,1:16:07.10,1:16:10.00,英文,,0,0,0,,I'm going to do my usual int main void up here.
Dialogue: 0,1:16:10.00,1:16:13.99,英文,,0,0,0,,And then I'm just going to go ahead and do printf meow backslash n.
Dialogue: 0,1:16:13.99,1:16:16.65,英文,,0,0,0,,And let's have this cat meow three times like last week.
Dialogue: 0,1:16:16.65,1:16:19.07,英文,,0,0,0,,So I'm going to do meow, meow, meow.
Dialogue: 0,1:16:19.07,1:16:22.33,英文,,0,0,0,,Notice, as an aside, whenever you highlight the lines, you'll see little dots appear.
Dialogue: 0,1:16:22.33,1:16:26.63,英文,,0,0,0,,This is just a visual cue to you to let you figure out how many spaces you've indented.
Dialogue: 0,1:16:26.63,1:16:30.28,英文,,0,0,0,,VS Code, like a lot of editors, will automatically indent your code for you.
Dialogue: 0,1:16:30.28,1:16:32.52,英文,,0,0,0,,I've not been hitting the space bar four times every time.
Dialogue: 0,1:16:32.52,1:16:34.18,英文,,0,0,0,,I've not even been hitting Tab.
Dialogue: 0,1:16:34.18,1:16:36.04,英文,,0,0,0,,However, in C,
Dialogue: 0,1:16:36.04,1:16:40.42,英文,,0,0,0,,The convention is indeed to indent lines, where appropriate, by four spaces.
Dialogue: 0,1:16:40.42,1:16:42.08,英文,,0,0,0,,So not three, not five.
Dialogue: 0,1:16:42.08,1:16:46.00,英文,,0,0,0,,And these dots help you see things so that they just line up as a matter of good style.
Dialogue: 0,1:16:46.00,1:16:46.36,英文,,0,0,0,,All right.
Dialogue: 0,1:16:46.36,1:16:49.56,英文,,0,0,0,,So this program I'm just going to stipulate right now is indeed going to work.
Dialogue: 0,1:16:49.56,1:16:51.46,英文,,0,0,0,,Make meow, which is kind of cute.
Dialogue: 0,1:16:51.46,1:16:54.00,英文,,0,0,0,,And now meow, there, three times.
Dialogue: 0,1:16:54.00,1:16:54.58,英文,,0,0,0,,Correct.
Dialogue: 0,1:16:54.58,1:16:55.50,英文,,0,0,0,,It's meowing three times.
Dialogue: 0,1:16:55.50,1:16:57.04,英文,,0,0,0,,But of course, this is not well-designed.
Dialogue: 0,1:16:57.04,1:16:59.06,英文,,0,0,0,,It wasn't well-designed in Scratch last week.
Dialogue: 0,1:16:59.06,1:17:00.59,英文,,0,0,0,,Why?
Dialogue: 0,1:17:00.59,1:17:03.21,英文,,0,0,0,,What should I be doing differently?
Dialogue: 0,1:17:03.21,1:17:05.25,英文,,0,0,0,,Yeah?
Dialogue: 0,1:17:05.25,1:17:07.27,英文,,0,0,0,,Yeah.
Dialogue: 0,1:17:07.27,1:17:09.49,英文,,0,0,0,,It's a perfect opportunity for a loop.
Dialogue: 0,1:17:09.49,1:17:09.81,英文,,0,0,0,,Why?
Dialogue: 0,1:17:09.81,1:17:18.35,英文,,0,0,0,,Because if you wanted to change maybe the capitalization of these words, or you wanted to change the sound to like woof for a dog or something, you'd have to change it one, two, three places.
Dialogue: 0,1:17:18.35,1:17:20.15,英文,,0,0,0,,And that's just kind of stupid, right?
Dialogue: 0,1:17:20.15,1:17:23.31,英文,,0,0,0,,In code, you should ideally change things in one place.
Dialogue: 0,1:17:23.31,1:17:24.79,英文,,0,0,0,,So how might I do that?
Dialogue: 0,1:17:24.79,1:17:27.28,英文,,0,0,0,,Well, we could introduce a loop, yes.
Dialogue: 0,1:17:27.28,1:17:32.70,英文,,0,0,0,,But we're going to need another building block as well that we had in Scratch, namely those things called variables.
Dialogue: 0,1:17:32.70,1:17:38.64,英文,,0,0,0,,So recall that a variable, like in algebra, x, y, z, whatever, can store a value for you.
Dialogue: 0,1:17:38.64,1:17:42.72,英文,,0,0,0,,And a variable in Scratch might have looked like this.
Dialogue: 0,1:17:42.72,1:17:49.86,英文,,0,0,0,,You use this orange puzzle piece to set a variable of any name, not just x, y, or z. But you could call it something more descriptive, like counter.
Dialogue: 0,1:17:49.86,1:17:52.08,英文,,0,0,0,,And you can set it equal to some value.
Dialogue: 0,1:17:52.08,1:17:54.42,英文,,0,0,0,,In C, the way to do this.
Dialogue: 0,1:17:54.42,1:17:57.67,英文,,0,0,0,,This is similar to spirit to some of the syntax we've seen thus far.
Dialogue: 0,1:17:57.67,1:18:01.77,英文,,0,0,0,,You start by saying the name of the variable you want, a single equal sign, and then the value.
Dialogue: 0,1:18:01.77,1:18:05.53,英文,,0,0,0,,You want to initialize it too, copying, therefore, from right to left.
Dialogue: 0,1:18:05.53,1:18:06.02,英文,,0,0,0,,Why?
Dialogue: 0,1:18:06.02,1:18:09.76,英文,,0,0,0,,Because the equal sign denotes, again, assignment from right to left.
Dialogue: 0,1:18:09.76,1:18:10.76,英文,,0,0,0,,This isn't enough, though.
Dialogue: 0,1:18:10.76,1:18:17.03,英文,,0,0,0,,You might have the intuition already what's missing probably from this line of code just to create a variable.
Dialogue: 0,1:18:17.03,1:18:20.73,英文,,0,0,0,,So we need int to make sure the computer knows that this is indeed an int.
Dialogue: 0,1:18:20.73,1:18:23.71,英文,,0,0,0,,And then lastly, semicolon as well.
Dialogue: 0,1:18:23.71,1:18:25.27,英文,,0,0,0,,And that now completes the thought.
Dialogue: 0,1:18:25.27,1:18:28.56,英文,,0,0,0,,So a little more annoying than Scratch, but we're starting to see patterns here.
Dialogue: 0,1:18:28.56,1:18:30.90,英文,,0,0,0,,So not every piece of syntax will be new.
Dialogue: 0,1:18:30.90,1:18:37.55,英文,,0,0,0,,All right, if you wanted to increment the counter by one, Scratch uses the verb change, and they mean add the value to counter.
Dialogue: 0,1:18:37.55,1:18:41.79,英文,,0,0,0,,So if I want to increment an existing variable called counter,
Dialogue: 0,1:18:41.79,1:18:44.03,英文,,0,0,0,,This syntax is a little more interesting.
Dialogue: 0,1:18:44.03,1:18:48.48,英文,,0,0,0,,It turns out the code looks like this, which almost seems like a paradox.
Dialogue: 0,1:18:48.48,1:18:51.80,英文,,0,0,0,,Like, how can counter equal counter plus 1?
Dialogue: 0,1:18:51.80,1:18:53.16,英文,,0,0,0,,Like, that's not how math works.
Dialogue: 0,1:18:53.16,1:18:56.92,英文,,0,0,0,,But again, a single equal sign is assignment from right to left.
Dialogue: 0,1:18:56.92,1:19:04.03,英文,,0,0,0,,So this is saying, take whatever the value of counter is, add 1 to it, and copy that value from right to left into counter itself.
Dialogue: 0,1:19:04.03,1:19:06.89,英文,,0,0,0,,You still need the semicolon, but.
Dialogue: 0,1:19:06.89,1:19:13.29,英文,,0,0,0,,I claim you do not need to mention the keyword int when updating an existing variable.
Dialogue: 0,1:19:13.29,1:19:23.48,英文,,0,0,0,,So only when you create a variable in C do you use the word string, or the word int, or any of the others we'll eventually see, only when creating it or initializing it for the first time.
Dialogue: 0,1:19:23.48,1:19:25.74,英文,,0,0,0,,Thereafter, if you want to change it, it just exists.
Dialogue: 0,1:19:25.74,1:19:27.16,英文,,0,0,0,,It's the word you gave it.
Dialogue: 0,1:19:27.16,1:19:30.02,英文,,0,0,0,,The computer's smart enough to at least remember what type it is.
Dialogue: 0,1:19:30.02,1:19:32.26,英文,,0,0,0,,So this line is now complete.
Dialogue: 0,1:19:32.26,1:19:37.88,英文,,0,0,0,,Turns out in code, as we'll see, it's pretty common to want to add things together, increment things by one.
Dialogue: 0,1:19:37.88,1:19:40.80,英文,,0,0,0,,So there's actually different syntax for the same idea.
Dialogue: 0,1:19:40.80,1:19:43.26,英文,,0,0,0,,The term of art here is syntactic sugar.
Dialogue: 0,1:19:43.26,1:19:49.81,英文,,0,0,0,,There's often in code many ways to do the same thing, even though at the end of the day, they do exactly the same functionality.
Dialogue: 0,1:19:49.81,1:19:57.87,英文,,0,0,0,,So for instance, If, after a few days of CS50, you find this a little tedious to keep typing in some program, you can simplify it to just this.
Dialogue: 0,1:19:57.87,1:19:59.35,英文,,0,0,0,,This is the syntactic sugar.
Dialogue: 0,1:19:59.35,1:20:03.85,英文,,0,0,0,,You can use plus equals and only mention the variable name once on the left.
Dialogue: 0,1:20:03.85,1:20:06.57,英文,,0,0,0,,And it just knows that that means the previous thing.
Dialogue: 0,1:20:06.57,1:20:10.48,英文,,0,0,0,,It's just slightly more succinct.
Dialogue: 0,1:20:10.48,1:20:12.90,英文,,0,0,0,,This, too, is such a common thing to add 1 to a value.
Dialogue: 0,1:20:12.90,1:20:13.80,英文,,0,0,0,,And it doesn't have to be 1.
Dialogue: 0,1:20:13.80,1:20:14.66,英文,,0,0,0,,But in this case, it is.
Dialogue: 0,1:20:14.66,1:20:20.72,英文,,0,0,0,,But if it is indeed 1, you can further tighten the code up to just do this, counter plus plus.
Dialogue: 0,1:20:20.72,1:20:26.79,英文,,0,0,0,,So any time in C you see plus plus, it means literally adding 1 to that particular variable.
Dialogue: 0,1:20:26.79,1:20:28.81,英文,,0,0,0,,There's other ways to do this in the other direction.
Dialogue: 0,1:20:28.81,1:20:38.48,英文,,0,0,0,,If you want to subtract 1 from a variable, you can use any of the previous syntax using a minus sign instead of plus, or you can more succinctly do counter minus minus.
Dialogue: 0,1:20:38.48,1:20:42.54,英文,,0,0,0,,This is the way a typical C programmer would do this.
Dialogue: 0,1:20:42.54,1:20:47.43,英文,,0,0,0,,All right, so if we have no variables, let's go and solve the meowing with loops.
Dialogue: 0,1:20:47.43,1:20:49.37,英文,,0,0,0,,So in Scratch, we saw loops like this.
Dialogue: 0,1:20:49.37,1:20:52.89,英文,,0,0,0,,This, of course, had the cat meow three times.
Dialogue: 0,1:20:52.89,1:20:54.58,英文,,0,0,0,,How do we do this in C?
Dialogue: 0,1:20:54.58,1:20:58.96,英文,,0,0,0,,Now, this is where things get a little more involved code-wise.
Dialogue: 0,1:20:58.96,1:21:03.67,英文,,0,0,0,,But if you understand each and every line, it will follow logically what's going on.
Dialogue: 0,1:21:03.67,1:21:12.09,英文,,0,0,0,,So here I claim is one way to implement a loop that iterates three times in C. And this is kind of ridiculous, right?
Dialogue: 0,1:21:12.09,1:21:18.97,英文,,0,0,0,,Like, we went from two super simple puzzle pieces like this to, my god, like, it's one, two, three, four, five, six lines of code, all of which are pretty involved.
Dialogue: 0,1:21:18.97,1:21:20.77,英文,,0,0,0,,So like, that escalated quickly.
Dialogue: 0,1:21:20.77,1:21:21.95,英文,,0,0,0,,But what's each line doing?
Dialogue: 0,1:21:21.95,1:21:24.30,英文,,0,0,0,,And we'll see other ways to do this more simply.
Dialogue: 0,1:21:24.30,1:21:28.94,英文,,0,0,0,,So we're initializing a variable called counter to 3, just like before.
Dialogue: 0,1:21:28.94,1:21:29.34,英文,,0,0,0,,Why?
Dialogue: 0,1:21:29.34,1:21:32.80,英文,,0,0,0,,Well, what does it mean to loop or to repeat something three times?
Dialogue: 0,1:21:32.80,1:21:41.31,英文,,0,0,0,,Well, it's kind of like doing something three times and then do it and then count down and then do it and then count down and then do it until you're all out of counts.
Dialogue: 0,1:21:41.31,1:21:45.13,英文,,0,0,0,,So this is declaring a variable called counter, setting it equal to 3.
Dialogue: 0,1:21:45.13,1:21:52.45,英文,,0,0,0,,Then I'm inducing a loop in C, which is similar in spirit to repeat 3, but you have to do more of the math yourself.
Dialogue: 0,1:21:52.45,1:21:58.16,英文,,0,0,0,,So I'm asking the question in parentheses, while counter is greater than 0.
Dialogue: 0,1:21:58.16,1:21:59.10,英文,,0,0,0,,What do I want to do?
Dialogue: 0,1:21:59.10,1:22:04.32,英文,,0,0,0,,Well, per the indentation inside the curly braces, I want to meow one time.
Dialogue: 0,1:22:04.32,1:22:07.17,英文,,0,0,0,,And then to be clear, what's this last line of code doing?
Dialogue: 0,1:22:07.17,1:22:10.43,英文,,0,0,0,,If counter starts off at 3, this makes it?
Dialogue: 0,1:22:10.43,1:22:12.28,英文,,0,0,0,,2, by subtracting 1 from it.
Dialogue: 0,1:22:12.28,1:22:13.40,英文,,0,0,0,,Then what happens?
Dialogue: 0,1:22:13.40,1:22:20.90,英文,,0,0,0,,By nature of a loop, just like in Scratch, it kind of knows to go back and forth, even though there's a nice pretty arrow in Scratch and there isn't here.
Dialogue: 0,1:22:20.90,1:22:28.90,英文,,0,0,0,,C knows to do this again and again and again, constantly asking this question and then updating this value at the end.
Dialogue: 0,1:22:28.90,1:22:33.82,英文,,0,0,0,,So if I highlight just a few of these steps, the variable starts off at 3.
Dialogue: 0,1:22:33.82,1:22:35.10,英文,,0,0,0,,And actually, let me simplify, too.
Dialogue: 0,1:22:35.10,1:22:43.61,英文,,0,0,0,,I claimed earlier that when using single variables, people very often just call it i for int or c for char or s for string, unless you have multiple variables.
Dialogue: 0,1:22:43.61,1:22:44.71,英文,,0,0,0,,So let me tighten the code up.
Dialogue: 0,1:22:44.71,1:22:47.31,英文,,0,0,0,,And this already makes it look a little more tolerable.
Dialogue: 0,1:22:47.31,1:22:49.27,英文,,0,0,0,,Let me actually tighten it up further.
Dialogue: 0,1:22:49.27,1:22:50.25,英文,,0,0,0,,And one more step.
Dialogue: 0,1:22:50.25,1:22:54.76,英文,,0,0,0,,So now this is about as tight, as succinct as you can make this code at the moment.
Dialogue: 0,1:22:54.76,1:22:56.24,英文,,0,0,0,,So what's actually going to happen here?
Dialogue: 0,1:22:56.24,1:22:59.70,英文,,0,0,0,,Well, the first line of code executes, and that initializes i to 3.
Dialogue: 0,1:22:59.70,1:23:01.08,英文,,0,0,0,,Then we check the condition.
Dialogue: 0,1:23:01.08,1:23:03.80,英文,,0,0,0,,While i is greater than 0, is i greater than 0?
Dialogue: 0,1:23:03.80,1:23:05.72,英文,,0,0,0,,Well, per my three fingers, obviously.
Dialogue: 0,1:23:05.72,1:23:07.77,英文,,0,0,0,,So we print out meow on the screen.
Dialogue: 0,1:23:07.77,1:23:15.47,英文,,0,0,0,,Then we subtract 1 from i, at which point now we have 2 as the value of i. Then the code goes back to the condition.
Dialogue: 0,1:23:15.47,1:23:17.55,英文,,0,0,0,,And notice, the condition there is in parentheses.
Dialogue: 0,1:23:17.55,1:23:19.50,英文,,0,0,0,,That's another Boolean expression.
Dialogue: 0,1:23:19.50,1:23:25.08,英文,,0,0,0,,So loops can use Boolean expressions, just like conditionals use Boolean expressions to make decisions.
Dialogue: 0,1:23:25.08,1:23:31.46,英文,,0,0,0,,The loop, though, is deciding not whether to do this thing or that, but whether to do the same thing again and again and again.
Dialogue: 0,1:23:31.46,1:23:40.48,英文,,0,0,0,,And as it ticks through the code one line after the other, it's ultimately going to get down to 1 and then 0 and then stop.
Dialogue: 0,1:23:40.48,1:23:42.82,英文,,0,0,0,,So put another way, came with some props here.
Dialogue: 0,1:23:42.82,1:23:49.56,英文,,0,0,0,,So suppose this ball here is your variable, and you initialize it to three with like three stress balls.
Dialogue: 0,1:23:49.56,1:23:51.58,英文,,0,0,0,,You can do something three times, right?
Dialogue: 0,1:23:51.58,1:23:56.64,英文,,0,0,0,,If I want to give out three stress balls, here's your chance for three stress balls without having to answer any questions.
Dialogue: 0,1:23:56.64,1:23:57.32,英文,,0,0,0,,OK, there we go.
Dialogue: 0,1:23:57.32,1:23:58.46,英文,,0,0,0,,So here we go.
Dialogue: 0,1:23:58.46,1:24:00.18,英文,,0,0,0,,Subtracting one for my variable.
Dialogue: 0,1:24:00.18,1:24:01.88,英文,,0,0,0,,I'm left with two.
Dialogue: 0,1:24:01.88,1:24:02.50,英文,,0,0,0,,Oh my god.
Dialogue: 0,1:24:02.50,1:24:04.24,英文,,0,0,0,,All right.
Dialogue: 0,1:24:04.24,1:24:06.36,英文,,0,0,0,,Don't tell Sanders.
Dialogue: 0,1:24:06.36,1:24:08.65,英文,,0,0,0,,Oh, I'm sorry.
Dialogue: 0,1:24:08.65,1:24:10.33,英文,,0,0,0,,OK, that ended poorly.
Dialogue: 0,1:24:10.33,1:24:11.11,英文,,0,0,0,,Apologies.
Dialogue: 0,1:24:11.11,1:24:17.26,英文,,0,0,0,,All right, but now the educational point, though, is that my variable has been decremented further to just have one.
Dialogue: 0,1:24:17.26,1:24:18.26,英文,,0,0,0,,I'm not throwing that far again.
Dialogue: 0,1:24:18.26,1:24:19.62,英文,,0,0,0,,I can't do this.
Dialogue: 0,1:24:19.62,1:24:20.30,英文,,0,0,0,,There we go.
Dialogue: 0,1:24:20.30,1:24:21.28,英文,,0,0,0,,All right, here we go.
Dialogue: 0,1:24:21.28,1:24:25.58,英文,,0,0,0,,And one final subtraction, and now our variable is left empty.
Dialogue: 0,1:24:25.58,1:24:28.36,英文,,0,0,0,,We have three stress balls there, and that's all a variable is, right?
Dialogue: 0,1:24:28.36,1:24:29.52,英文,,0,0,0,,It's some kind of storage.
Dialogue: 0,1:24:29.52,1:24:32.26,英文,,0,0,0,,It's actually, of course, implemented in the computer's memory.
Dialogue: 0,1:24:32.26,1:24:35.73,英文,,0,0,0,,But metaphorically, it's really just like a bowl with some values.
Dialogue: 0,1:24:35.73,1:24:39.85,英文,,0,0,0,,And every time you add, or in this case, subtract, you're just changing the value of that variable.
Dialogue: 0,1:24:39.85,1:24:44.65,英文,,0,0,0,,And then the code, meanwhile, of course, in parentheses, is just checking, is the bowl empty?
Dialogue: 0,1:24:44.65,1:24:45.37,英文,,0,0,0,,Is the bowl empty?
Dialogue: 0,1:24:45.37,1:24:46.69,英文,,0,0,0,,Is the bowl empty?
Dialogue: 0,1:24:46.69,1:24:50.49,英文,,0,0,0,,AKA, is i greater than 0 or not?
Dialogue: 0,1:24:50.49,1:24:55.25,英文,,0,0,0,,Any questions on how we've implemented loops in this way?
Dialogue: 0,1:24:55.25,1:24:58.15,英文,,0,0,0,,And I owe you a stress ball after class.
Dialogue: 0,1:24:58.15,1:24:59.95,英文,,0,0,0,,Questions on loops?
Dialogue: 0,1:24:59.95,1:25:03.23,英文,,0,0,0,,All right, so it turns out this is kind of ugly.
Dialogue: 0,1:25:03.23,1:25:09.49,英文,,0,0,0,,And this really starts to take the fun out of programming when you have to write out this sequence of steps.
Dialogue: 0,1:25:09.49,1:25:11.41,英文,,0,0,0,,So it turns out there's other ways to do this.
Dialogue: 0,1:25:11.41,1:25:16.55,英文,,0,0,0,,But first, let's see logically how else you might express this, because it's a little weird that we keep using 0.
Dialogue: 0,1:25:16.55,1:25:19.99,英文,,0,0,0,,So the one other way to do this would be to invert the logic.
Dialogue: 0,1:25:19.99,1:25:23.98,英文,,0,0,0,,You could absolutely start with your variable, call it i equal to 1.
Dialogue: 0,1:25:23.98,1:25:28.46,英文,,0,0,0,,And then you could ask the question, is i less than or equal to 3?
Dialogue: 0,1:25:28.46,1:25:30.34,英文,,0,0,0,,And notice a bit of new syntax here.
Dialogue: 0,1:25:30.34,1:25:37.91,英文,,0,0,0,,On your typical keyboard, there is no less than or equal sign or greater than or equal sign like you would write in math class with one over the other.
Dialogue: 0,1:25:37.91,1:25:45.35,英文,,0,0,0,,And so in C, you use two characters, less than followed by an equal sign, or if appropriate, greater than followed by an equal sign.
Dialogue: 0,1:25:45.35,1:25:47.59,英文,,0,0,0,,And that logically captures that idea.
Dialogue: 0,1:25:47.59,1:25:50.56,英文,,0,0,0,,So notice that I'm kind of changing my questions.
Dialogue: 0,1:25:50.56,1:25:52.18,英文,,0,0,0,,I'm initializing i to 1.
Dialogue: 0,1:25:52.18,1:25:55.94,英文,,0,0,0,,And then I'm going to increment it ultimately to 2 and then 3.
Dialogue: 0,1:25:55.94,1:26:00.37,英文,,0,0,0,,But because I'm doing less than or equal to, it's still going to go from 1 to 3.
Dialogue: 0,1:26:00.37,1:26:01.69,英文,,0,0,0,,So that works too.
Dialogue: 0,1:26:01.69,1:26:03.81,英文,,0,0,0,,We could similarly do this yet another way.
Dialogue: 0,1:26:03.81,1:26:06.55,英文,,0,0,0,,We could initialize i to 0.
Dialogue: 0,1:26:06.55,1:26:11.70,英文,,0,0,0,,And then we could say, well, i is less than 3 and keep incrementing it.
Dialogue: 0,1:26:11.70,1:26:14.94,英文,,0,0,0,,And I showed this last form is actually the most canonical.
Dialogue: 0,1:26:14.94,1:26:18.66,英文,,0,0,0,,It might be the most human-like to think in terms of 1 to 3.
Dialogue: 0,1:26:18.66,1:26:23.82,英文,,0,0,0,,It might be the most stress ball-like to think in terms of 3 to 0, counting down.
Dialogue: 0,1:26:23.82,1:26:29.18,英文,,0,0,0,,But typically, the go-to syntax for most programmers, once you get comfortable counting from 0,
Dialogue: 0,1:26:29.18,1:26:35.75,英文,,0,0,0,,Is to always start counting from 0 and count up to less than the value you're counting up to.
Dialogue: 0,1:26:35.75,1:26:40.43,英文,,0,0,0,,So it would be incorrect why to change this to less than or equal to 3 here.
Dialogue: 0,1:26:40.43,1:26:44.52,英文,,0,0,0,,What would happen if I changed the less than to less than or equal to?
Dialogue: 0,1:26:44.52,1:26:47.46,英文,,0,0,0,,Yeah, now a fourth time, in fact, total, right?
Dialogue: 0,1:26:47.46,1:26:51.12,英文,,0,0,0,,Because you'll start at 0, then 1, then 2, then 3.
Dialogue: 0,1:26:51.12,1:26:55.36,英文,,0,0,0,,And less than or equal to 3, sorry, 3 will give you the fourth time.
Dialogue: 0,1:26:55.36,1:26:58.76,英文,,0,0,0,,So we do want it indeed to be just a single less than.
Dialogue: 0,1:26:58.76,1:27:02.46,英文,,0,0,0,,All right, so now that we have those options, let me just give you one other.
Dialogue: 0,1:27:02.46,1:27:07.24,英文,,0,0,0,,And this one takes a little more getting used to as well, but it's probably the more common way to write this.
Dialogue: 0,1:27:07.24,1:27:11.47,英文,,0,0,0,,Let me go ahead and propose that we implement this as follows.
Dialogue: 0,1:27:11.47,1:27:13.47,英文,,0,0,0,,Let me go back to my code here.
Dialogue: 0,1:27:13.47,1:27:21.25,英文,,0,0,0,,Let me go into my several printf's, getting rid of all but one of them ultimately.
Dialogue: 0,1:27:21.25,1:27:22.67,英文,,0,0,0,,And let's implement this in code.
Dialogue: 0,1:27:22.67,1:27:25.35,英文,,0,0,0,,So let's do int i get 0.
Dialogue: 0,1:27:25.35,1:27:42.55,英文,,0,0,0,,How about then while i is less than 3, then let's go ahead and say printf quote unquote mello, meow, backslash n. And then we have to do i minus minus or plus plus?
Dialogue: 0,1:27:42.55,1:27:47.29,英文,,0,0,0,,So plus plus, because we're starting at 0 and going up 2, but not through 3.
Dialogue: 0,1:27:47.29,1:27:51.64,英文,,0,0,0,,So let me go ahead now and make meow after clearing my terminal, dot slash meow.
Dialogue: 0,1:27:51.64,1:27:56.76,英文,,0,0,0,,And it's still just as correct, but it's a little better designed.
Dialogue: 0,1:27:56.76,1:27:57.36,英文,,0,0,0,,Why?
Dialogue: 0,1:27:57.36,1:28:02.01,英文,,0,0,0,,Because now if I want to change it from 3 to 30 times, for instance, I can change it there.
Dialogue: 0,1:28:02.01,1:28:04.01,英文,,0,0,0,,I can recompile my code.
Dialogue: 0,1:28:04.01,1:28:06.07,英文,,0,0,0,,I can do dot slash meow and done.
Dialogue: 0,1:28:06.07,1:28:09.47,英文,,0,0,0,,I don't have to copy and paste it 27 more times to get that effect.
Dialogue: 0,1:28:09.47,1:28:13.58,英文,,0,0,0,,And I can even change what the word is by changing it in just one location.
Dialogue: 0,1:28:13.58,1:28:16.10,英文,,0,0,0,,But it turns out there's other ways to do this too.
Dialogue: 0,1:28:16.10,1:28:20.70,英文,,0,0,0,,And let me propose that we introduce you to what's called a for loop as well.
Dialogue: 0,1:28:20.70,1:28:26.24,英文,,0,0,0,,So if you want to repeat something three times, you can absolutely take the while loop approach that we just saw.
Dialogue: 0,1:28:26.24,1:28:27.54,英文,,0,0,0,,Or you can do this.
Dialogue: 0,1:28:27.54,1:28:34.29,英文,,0,0,0,,And this one takes a little more getting used to, but it kind of consolidates into one line all of the same logic.
Dialogue: 0,1:28:34.29,1:28:36.81,英文,,0,0,0,,So notice, we have the keyword for here.
Dialogue: 0,1:28:36.81,1:28:42.38,英文,,0,0,0,,And for is just a preposition in this case that generally implies, here comes a loop.
Dialogue: 0,1:28:42.38,1:28:46.44,英文,,0,0,0,,Inside of parentheses here is not just a Boolean expression.
Dialogue: 0,1:28:46.44,1:28:48.02,英文,,0,0,0,,And this is where things get a little weird.
Dialogue: 0,1:28:48.02,1:28:55.11,英文,,0,0,0,,There's three things, to the left of the semicolon, in the middle of the two semicolons, and to the right of the semicolon.
Dialogue: 0,1:28:55.11,1:28:58.43,英文,,0,0,0,,Really, the only other context will see semicolons, and it's weird.
Dialogue: 0,1:28:58.43,1:29:00.13,英文,,0,0,0,,Normally, it's been at the end of the line.
Dialogue: 0,1:29:00.13,1:29:05.06,英文,,0,0,0,,Now it's two of them in the middle of the line, but this is the way humans decided years ago to do it.
Dialogue: 0,1:29:05.06,1:29:06.18,英文,,0,0,0,,So what is this doing?
Dialogue: 0,1:29:06.18,1:29:08.04,英文,,0,0,0,,Almost the same thing.
Dialogue: 0,1:29:08.04,1:29:12.60,英文,,0,0,0,,It is going to initialize a variable called i to 0.
Dialogue: 0,1:29:12.60,1:29:16.67,英文,,0,0,0,,It's going to then check if it's less than 3.
Dialogue: 0,1:29:16.67,1:29:20.07,英文,,0,0,0,,It's then going to do whatever in the curly braces
Dialogue: 0,1:29:20.07,1:29:23.09,英文,,0,0,0,,And it's lastly going to increment i and repeat.
Dialogue: 0,1:29:23.09,1:29:28.51,英文,,0,0,0,,So just highlighting those in turn, at first, i is initialized to 0, just like before.
Dialogue: 0,1:29:28.51,1:29:30.17,英文,,0,0,0,,Then this condition is checked.
Dialogue: 0,1:29:30.17,1:29:32.20,英文,,0,0,0,,This is a Boolean expression.
Dialogue: 0,1:29:32.20,1:29:34.80,英文,,0,0,0,,Yes or no, true or false will be its answer.
Dialogue: 0,1:29:34.80,1:29:40.76,英文,,0,0,0,,And if i is less than 3, which it should be once it starts at 0, well, then we're going to go ahead and print out meow.
Dialogue: 0,1:29:40.76,1:29:42.38,英文,,0,0,0,,Then i is going to get incremented.
Dialogue: 0,1:29:42.38,1:29:43.58,英文,,0,0,0,,So it starts at 0.
Dialogue: 0,1:29:43.58,1:29:45.38,英文,,0,0,0,,It goes now to 1.
Dialogue: 0,1:29:45.38,1:29:48.19,英文,,0,0,0,,At that point, the Boolean expression is checked again.
Dialogue: 0,1:29:48.19,1:29:50.85,英文,,0,0,0,,So you don't keep changing i back to 0.
Dialogue: 0,1:29:50.85,1:29:53.37,英文,,0,0,0,,That first step happens only once.
Dialogue: 0,1:29:53.37,1:29:56.33,英文,,0,0,0,,But now you repeat through those three other highlights.
Dialogue: 0,1:29:56.33,1:29:57.79,英文,,0,0,0,,I check if i is less than 3.
Dialogue: 0,1:29:57.79,1:29:58.37,英文,,0,0,0,,It is.
Dialogue: 0,1:29:58.37,1:29:59.72,英文,,0,0,0,,So I print out meow.
Dialogue: 0,1:29:59.72,1:30:03.56,英文,,0,0,0,,It then increments i. I check if i, now 2, is less than 3.
Dialogue: 0,1:30:03.56,1:30:04.04,英文,,0,0,0,,It is.
Dialogue: 0,1:30:04.04,1:30:05.44,英文,,0,0,0,,I print out meow.
Dialogue: 0,1:30:05.44,1:30:06.44,英文,,0,0,0,,i gets incremented.
Dialogue: 0,1:30:06.44,1:30:07.14,英文,,0,0,0,,I now check.
Dialogue: 0,1:30:07.14,1:30:08.20,英文,,0,0,0,,Is i less than 3?
Dialogue: 0,1:30:08.20,1:30:11.51,英文,,0,0,0,,No, it's not, because 3 is not less than 3.
Dialogue: 0,1:30:11.51,1:30:12.89,英文,,0,0,0,,And so the whole thing stops.
Dialogue: 0,1:30:12.89,1:30:17.41,英文,,0,0,0,,And whatever code is below this curly brace, if any, starts executing instead.
Dialogue: 0,1:30:17.41,1:30:22.77,英文,,0,0,0,,Just like in Scratch, you break out of the loop and the puzzle pieces being hugged.
Dialogue: 0,1:30:22.77,1:30:30.12,英文,,0,0,0,,Questions, then, about this alternative syntax for loops, a.k.a.
Dialogue: 0,1:30:30.12,1:30:34.76,英文,,0,0,0,,a for loop?
Dialogue: 0,1:30:34.76,1:30:37.60,英文,,0,0,0,,Sorry, say again?
Dialogue: 0,1:30:37.60,1:30:40.52,英文,,0,0,0,,Yeah, can I explain again why it doesn't reset to 0?
Dialogue: 0,1:30:40.52,1:30:41.76,英文,,0,0,0,,Honestly, just because.
Dialogue: 0,1:30:41.76,1:30:43.60,英文,,0,0,0,,Like, this was the syntax they chose.
Dialogue: 0,1:30:43.60,1:30:47.64,英文,,0,0,0,,This first part before the first semicolon is only executed once just because.
Dialogue: 0,1:30:47.64,1:30:48.92,英文,,0,0,0,,That's how it's designed.
Dialogue: 0,1:30:48.92,1:30:51.77,英文,,0,0,0,,Everything else cycles again and again.
Dialogue: 0,1:30:51.77,1:30:55.61,英文,,0,0,0,,And this is just an alternative syntax to using the slightly more lines of code.
Dialogue: 0,1:30:55.61,1:30:57.75,英文,,0,0,0,,It was like six lines of code using the while loop.
Dialogue: 0,1:30:57.75,1:30:59.71,英文,,0,0,0,,Logically, it's the same thing.
Dialogue: 0,1:30:59.71,1:31:05.32,英文,,0,0,0,,Programmers, once they get more comfortable, tend to prefer this because it just expresses all your same thoughts more succinctly.
Dialogue: 0,1:31:05.32,1:31:06.50,英文,,0,0,0,,That's all.
Dialogue: 0,1:31:06.50,1:31:07.76,英文,,0,0,0,,Yeah.
Dialogue: 0,1:31:07.76,1:31:11.16,英文,,0,0,0,,OK, so let's just work this into my meow example.
Dialogue: 0,1:31:11.16,1:31:12.76,英文,,0,0,0,,Let me go back to the code here.
Dialogue: 0,1:31:12.76,1:31:16.19,英文,,0,0,0,,And notice, indeed, if I highlight all these lines, I think we can tighten this up.
Dialogue: 0,1:31:16.19,1:31:21.61,英文,,0,0,0,,Let me get rid of all of those and instead do for int i equals 0.
Dialogue: 0,1:31:21.61,1:31:22.81,英文,,0,0,0,,And I'm saying equals.
Dialogue: 0,1:31:22.81,1:31:24.37,英文,,0,0,0,,Most programmers would say get.
Dialogue: 0,1:31:24.37,1:31:28.39,英文,,0,0,0,,So int i get 0 means assignment, the word get.
Dialogue: 0,1:31:28.39,1:31:32.44,英文,,0,0,0,,Now I'm going to do i is less than 3, i plus plus.
Dialogue: 0,1:31:32.44,1:31:37.88,英文,,0,0,0,,Now in here, I'm going to do my printf quote unquote meow backslash n.
Dialogue: 0,1:31:37.88,1:31:39.30,英文,,0,0,0,,And so it's indeed a little tighter.
Dialogue: 0,1:31:39.30,1:31:41.06,英文,,0,0,0,,I mean, two of the lines are just curly braces.
Dialogue: 0,1:31:41.06,1:31:43.70,英文,,0,0,0,,There's really only two juicy lines of code now.
Dialogue: 0,1:31:43.70,1:31:47.53,英文,,0,0,0,,Let me go ahead and do make meow dot slash meow.
Dialogue: 0,1:31:47.53,1:31:51.70,英文,,0,0,0,,And again, we're back in business with three of them printing only.
Dialogue: 0,1:31:51.70,1:31:56.48,英文,,0,0,0,,All right, there's one last structure we should explore, just because it's sometimes useful.
Dialogue: 0,1:31:56.48,1:31:58.10,英文,,0,0,0,,This was a forever block.
Dialogue: 0,1:31:58.10,1:32:02.83,英文,,0,0,0,,And this would be a little weird and scratch to just say meow forever, at least without waiting.
Dialogue: 0,1:32:02.83,1:32:07.69,英文,,0,0,0,,But there is indeed a forever block in Scratch, which means do the following forever.
Dialogue: 0,1:32:07.69,1:32:11.38,英文,,0,0,0,,And I proposed, I think, verbally last week at least one example where this is useful.
Dialogue: 0,1:32:11.38,1:32:13.06,英文,,0,0,0,,Meowing forever, a little annoying.
Dialogue: 0,1:32:13.06,1:32:19.30,英文,,0,0,0,,But can you think of common cases where you might want to write code or use a program that loops forever?
Dialogue: 0,1:32:19.30,1:32:21.90,英文,,0,0,0,,Yeah.
Dialogue: 0,1:32:21.90,1:32:28.35,英文,,0,0,0,,Yeah, playing music, like a Spotify playlist just repeating again and again would be some kind of loop.
Dialogue: 0,1:32:28.35,1:32:29.85,英文,,0,0,0,,Checking for collisions in Scratch.
Dialogue: 0,1:32:29.85,1:32:36.95,英文,,0,0,0,,So seeing if something's bouncing off the wall or another sprite, yeah.
Dialogue: 0,1:32:36.95,1:32:37.87,英文,,0,0,0,,Checking for input.
Dialogue: 0,1:32:37.87,1:32:44.53,英文,,0,0,0,,So yeah, get string is essentially just waiting there forever for me to type in some input until I do.
Dialogue: 0,1:32:44.53,1:32:48.66,英文,,0,0,0,,Checking the time and actually maintaining human time, like a wall clock behind you.
Dialogue: 0,1:32:48.66,1:32:50.73,英文,,0,0,0,,Is that the same?
Dialogue: 0,1:32:50.73,1:32:52.93,英文,,0,0,0,,OK, checking the time, and one more.
Dialogue: 0,1:32:52.93,1:32:58.36,英文,,0,0,0,,Detecting a key press, too, like in Scratch, just waiting for some kind of event to happen, just like on a phone or a browser.
Dialogue: 0,1:32:58.36,1:33:04.60,英文,,0,0,0,,And so there's so many examples where you might want to do something forever, just so you've seen the corresponding C building block.
Dialogue: 0,1:33:04.60,1:33:09.48,英文,,0,0,0,,It's a little weird, but this is probably the most canonical way to do it.
Dialogue: 0,1:33:09.48,1:33:18.87,英文,,0,0,0,,In C, if you want to print meow forever, which would be a little crazy because it would literally print and take over your computer printing forever meow, you would generally do it like this.
Dialogue: 0,1:33:18.87,1:33:19.49,英文,,0,0,0,,Why?
Dialogue: 0,1:33:19.49,1:33:22.83,英文,,0,0,0,,Well, a while loop expects in parentheses a Boolean expression.
Dialogue: 0,1:33:22.83,1:33:26.17,英文,,0,0,0,,And a Boolean expression is, again, a yes, no, a true, false question.
Dialogue: 0,1:33:26.17,1:33:35.23,英文,,0,0,0,,But if you want the answer to that question always to be yes or really always to be true, turns out in C, in a lot of languages, well, then just say true.
Dialogue: 0,1:33:35.23,1:33:38.80,英文,,0,0,0,,Because true, T-R-U-E, is never going to change magically to false.
Dialogue: 0,1:33:38.80,1:33:41.60,英文,,0,0,0,,I mean, it's just a special word in the programming language.
Dialogue: 0,1:33:41.60,1:33:45.72,英文,,0,0,0,,So by saying while true, it just means do the following forever.
Dialogue: 0,1:33:45.72,1:33:54.25,英文,,0,0,0,,Another common paradigm before true and false became commonplace would be to do this instead, change while one.
Dialogue: 0,1:33:54.25,1:33:57.96,英文,,0,0,0,,You might see in online examples and texts and the like.
Dialogue: 0,1:33:57.96,1:34:05.10,英文,,0,0,0,,While one is really the same thing, any value that is zero is generally interpreted as false by a computer.
Dialogue: 0,1:34:05.10,1:34:11.26,英文,,0,0,0,,Any value that is one or any other non-zero value is generally interpreted as true.
Dialogue: 0,1:34:11.26,1:34:15.55,英文,,0,0,0,,And so this, too, would have the same effect, saying while true or while one.
Dialogue: 0,1:34:15.55,1:34:18.81,英文,,0,0,0,,Generally speaking, while true is perhaps a little clearer these days.
Dialogue: 0,1:34:18.81,1:34:20.63,英文,,0,0,0,,Now, meowing forever is not a good thing.
Dialogue: 0,1:34:20.63,1:34:23.73,英文,,0,0,0,,But suppose I did that by intent or by accident.
Dialogue: 0,1:34:23.73,1:34:25.04,英文,,0,0,0,,Well, let's try this.
Dialogue: 0,1:34:25.04,1:34:26.50,英文,,0,0,0,,So here, I'll go into my code.
Dialogue: 0,1:34:26.50,1:34:32.24,英文,,0,0,0,,I'm going to get rid of my for loop and change my while loop to how about true.
Dialogue: 0,1:34:32.24,1:34:35.21,英文,,0,0,0,,And in this case here, well, we'll keep it.
Dialogue: 0,1:34:35.21,1:34:36.15,英文,,0,0,0,,Let's do this.
Dialogue: 0,1:34:36.15,1:34:38.43,英文,,0,0,0,,Make meow, Enter.
Dialogue: 0,1:34:38.43,1:34:41.76,英文,,0,0,0,,And you'll see this, use of undeclared identifier true.
Dialogue: 0,1:34:41.76,1:34:46.38,英文,,0,0,0,,This is actually hinting at my mention that the old way was 0 and 1.
Dialogue: 0,1:34:46.38,1:34:48.37,英文,,0,0,0,,Nowadays, you could say true or false.
Dialogue: 0,1:34:48.37,1:34:53.65,英文,,0,0,0,,But true and false are themselves special words that you have to include.
Dialogue: 0,1:34:53.65,1:35:03.80,英文,,0,0,0,,And it turns out if you want to use special Boolean values like this, there's another header file we haven't seen called standard bool that essentially creates true and false as keywords.
Dialogue: 0,1:35:03.80,1:35:06.57,英文,,0,0,0,,Alternatively, CS50 includes that same file.
Dialogue: 0,1:35:06.57,1:35:09.15,英文,,0,0,0,,So it's more common in CS50 to see it like this.
Dialogue: 0,1:35:09.15,1:35:15.40,英文,,0,0,0,,Now if I clear my terminal window and do make meow and then dot slash meow and hit Enter, well,
Dialogue: 0,1:35:15.40,1:35:21.26,英文,,0,0,0,,Unfortunately, this isn't the best thing to do infinitely when you're in the cloud using a browser.
Dialogue: 0,1:35:21.26,1:35:25.10,英文,,0,0,0,,This is indeed a browser just full screen tier.
Dialogue: 0,1:35:25.10,1:35:29.88,英文,,0,0,0,,This means I'm sending millions of meows over the internet to my computer here.
Dialogue: 0,1:35:29.88,1:35:31.16,英文,,0,0,0,,So this will happen to you at some point.
Dialogue: 0,1:35:31.16,1:35:34.13,英文,,0,0,0,,Probably not with meow, but you'll lose control over your terminal window.
Dialogue: 0,1:35:34.13,1:35:34.39,英文,,0,0,0,,Why?
Dialogue: 0,1:35:34.39,1:35:35.15,英文,,0,0,0,,Because you screwed up.
Dialogue: 0,1:35:35.15,1:35:36.25,英文,,0,0,0,,And you have an infinite loop.
Dialogue: 0,1:35:36.25,1:35:37.09,英文,,0,0,0,,You didn't really intend it.
Dialogue: 0,1:35:37.09,1:35:37.69,英文,,0,0,0,,Or maybe you did.
Dialogue: 0,1:35:37.69,1:35:39.41,英文,,0,0,0,,You were curious to see what happens.
Dialogue: 0,1:35:39.41,1:35:42.01,英文,,0,0,0,,What do you do?
Dialogue: 0,1:35:42.01,1:35:44.11,英文,,0,0,0,,When does the meowing stop?
Dialogue: 0,1:35:44.11,1:35:45.59,英文,,0,0,0,,What recourse do we have here?
Dialogue: 0,1:35:45.59,1:35:48.57,英文,,0,0,0,,All right, well, Control-C will be your friend.
Dialogue: 0,1:35:48.57,1:35:55.57,英文,,0,0,0,,Sometimes you have to hit it a bunch in a cloud environment, but Control-C for cancel will interrupt a program that's running.
Dialogue: 0,1:35:55.57,1:36:02.75,英文,,0,0,0,,And I promise that almost all of you will at some point accidentally introduce an infinite loop because your math is slightly off.
Dialogue: 0,1:36:02.75,1:36:09.72,英文,,0,0,0,,When in doubt, click in the terminal window and hit Control-C, sometimes multiple times, and that will indeed cancel whatever is happening there.
Dialogue: 0,1:36:09.72,1:36:14.32,英文,,0,0,0,,In this case, I might have intended it, but sometimes it's not, in fact, intended.
Dialogue: 0,1:36:14.32,1:36:19.28,英文,,0,0,0,,All right, so we've been taking for granted this whole graphical user interface for some time.
Dialogue: 0,1:36:19.28,1:36:23.89,英文,,0,0,0,,And indeed, the commands that I'm typing and the buttons that I'm clicking.
Dialogue: 0,1:36:23.89,1:36:31.71,英文,,0,0,0,,And let me just give you a better sense of what it is we are using underneath the hood this whole time, namely an operating system called Linux.
Dialogue: 0,1:36:31.71,1:36:38.90,英文,,0,0,0,,So I keep alluding verbally, of course, to Macs and PCs because almost all of us are running Mac OS or Windows on our desktops or laptops nowadays.
Dialogue: 0,1:36:38.90,1:36:40.90,英文,,0,0,0,,But there's lots of other operating systems out there.
Dialogue: 0,1:36:40.90,1:36:43.40,英文,,0,0,0,,And one of the most popular one is called Linux.
Dialogue: 0,1:36:43.40,1:36:51.69,英文,,0,0,0,,And Linux is very often used on servers nowadays, companies that host email, companies that host websites or apps more generally.
Dialogue: 0,1:36:51.69,1:36:57.11,英文,,0,0,0,,Certain computer scientists or computer science students often like to brag that they run Linux just because that's a thing.
Dialogue: 0,1:36:57.11,1:37:01.23,英文,,0,0,0,,But it is really just an alternative to Mac OS or Windows
Dialogue: 0,1:37:01.23,1:37:07.62,英文,,0,0,0,,That provides you with both a GUI, if you want it, but also and especially a command line environment.
Dialogue: 0,1:37:07.62,1:37:12.54,英文,,0,0,0,,Now, fun fact, Windows and Mac OS do have terminal windows, or the equivalent thereof.
Dialogue: 0,1:37:12.54,1:37:16.35,英文,,0,0,0,,And eventually, you might use it on your own Mac or PC to solve some problem.
Dialogue: 0,1:37:16.35,1:37:18.35,英文,,0,0,0,,But Linux is really known for.
Dialogue: 0,1:37:18.35,1:37:26.51,英文,,0,0,0,,Along with other operating systems, it's command line environment, which, again, I distinguished earlier from GUI as a command line interface or CLI.
Dialogue: 0,1:37:26.51,1:37:29.41,英文,,0,0,0,,And that refers really to the terminal window.
Dialogue: 0,1:37:29.41,1:37:42.41,英文,,0,0,0,,So if I go back to VS Code here, and let me, in fact, go ahead and close my tab and focus entirely on the terminal window, this terminal window is really just your command line interface to your very own server in the cloud.
Dialogue: 0,1:37:42.41,1:37:47.66,英文,,0,0,0,,The term of art here is you each will have your own container in the cloud, which is like your own computer.
Dialogue: 0,1:37:47.66,1:37:57.60,英文,,0,0,0,,Running somewhere on the internet with your own username and password to which you have access and your own hard drive, if you will, your own home folder that has all of your files for the class.
Dialogue: 0,1:37:57.60,1:38:01.58,英文,,0,0,0,,And it's only accessible to you unless you enable live sharing thereof.
Dialogue: 0,1:38:01.58,1:38:06.51,英文,,0,0,0,,So when you're typing commands here, it looks like you're typing them, of course, on your own Mac or PC.
Dialogue: 0,1:38:06.51,1:38:15.99,英文,,0,0,0,,But they're actually being sent over the browser to some server in the cloud where you are controlling, really,
Dialogue: 0,1:38:15.99,1:38:19.40,英文,,0,0,0,,So it turns out that there are other commands that are worth knowing.
Dialogue: 0,1:38:19.40,1:38:21.66,英文,,0,0,0,,And we'll give you just a few of these today.
Dialogue: 0,1:38:21.66,1:38:24.62,英文,,0,0,0,,And over the coming weeks, we'll have opportunities to play with others as well.
Dialogue: 0,1:38:24.62,1:38:26.26,英文,,0,0,0,,But these are kind of some of the basics.
Dialogue: 0,1:38:26.26,1:38:28.75,英文,,0,0,0,,And they're all incredibly succinct.
Dialogue: 0,1:38:28.75,1:38:33.81,英文,,0,0,0,,Because indeed, for things you're typing in the command line, humans generally have not wanted to type out long commands.
Dialogue: 0,1:38:33.81,1:38:36.03,英文,,0,0,0,,So a lot of these are abbreviations here.
Dialogue: 0,1:38:36.03,1:38:44.55,英文,,0,0,0,,Now, perhaps the most common one I'll start with first is LS, a lowercase l and a lowercase s. That stands for, succinctly, list.
Dialogue: 0,1:38:44.55,1:38:56.31,英文,,0,0,0,,So if I go to my terminal window now, where up until now I've only typed code, which is a VS code thing for creating and opening files, and make, which triggers the compilation of my code, what if I now type LS?
Dialogue: 0,1:38:56.31,1:39:02.04,英文,,0,0,0,,This will list all of the files in my current folder, my hard drive in the cloud, if you will.
Dialogue: 0,1:39:02.04,1:39:05.72,英文,,0,0,0,,So if I hit Enter, you'll see a whole bunch of results.
Dialogue: 0,1:39:05.72,1:39:07.32,英文,,0,0,0,,Now, they're color-coded too.
Dialogue: 0,1:39:07.32,1:39:10.02,英文,,0,0,0,,The white ones here end in .c.
Dialogue: 0,1:39:10.02,1:39:15.99,英文,,0,0,0,,Those are the source code files I've written during class today, agree.c, compare.c, hello.c, and meow.c.
Dialogue: 0,1:39:15.99,1:39:24.49,英文,,0,0,0,,And you can perhaps guess the green ones here that just by convention have an asterisk on the end to denote that they're special represent what?
Dialogue: 0,1:39:24.49,1:39:25.33,英文,,0,0,0,,What are the four others?
Dialogue: 0,1:39:25.33,1:39:27.89,英文,,0,0,0,,Yeah.
Dialogue: 0,1:39:27.89,1:39:29.41,英文,,0,0,0,,Yeah, the machine code.
Dialogue: 0,1:39:29.41,1:39:34.52,英文,,0,0,0,,So those are my actual programs that are identically named minus the dot C extension.
Dialogue: 0,1:39:34.52,1:39:36.82,英文,,0,0,0,,And the asterisk means that they're executable.
Dialogue: 0,1:39:36.82,1:39:39.82,英文,,0,0,0,,That is, in the world of Mac OS or Windows, you would double click.
Dialogue: 0,1:39:39.82,1:39:47.45,英文,,0,0,0,,But in the world of a command line environment, that means you do dot slash and then the name without the asterisk to execute or run the code therein.
Dialogue: 0,1:39:47.45,1:39:55.07,英文,,0,0,0,,So if I open up my File Explorer, and I'm hitting Command B on my computer here just as a keyboard shortcut, you'll see the exact same thing.
Dialogue: 0,1:39:55.07,1:39:59.35,英文,,0,0,0,,So LS is the command line interface for listing the files in your account.
Dialogue: 0,1:39:59.35,1:40:06.16,英文,,0,0,0,,But here, because I'm using VS Code or any program like it, I also get a graphical user interface as well.
Dialogue: 0,1:40:06.16,1:40:07.96,英文,,0,0,0,,So it's just two different places to be.
Dialogue: 0,1:40:07.96,1:40:09.66,英文,,0,0,0,,You're welcome to use whatever you're comfortable with.
Dialogue: 0,1:40:09.66,1:40:14.84,英文,,0,0,0,,But over time, will you naturally get more comfortable and capable with the terminal window alone?
Dialogue: 0,1:40:14.84,1:40:17.16,英文,,0,0,0,,Well, what else is on this list here?
Dialogue: 0,1:40:17.16,1:40:23.53,英文,,0,0,0,,Well, during the break, I saw that at least one of you, for instance, had created a file called hello instead of hello.c.
Dialogue: 0,1:40:23.53,1:40:27.37,英文,,0,0,0,,So you were in a situation where you did this accidentally and hit Enter.
Dialogue: 0,1:40:27.37,1:40:30.53,英文,,0,0,0,,And then you went ahead and typed in all of your code like this.
Dialogue: 0,1:40:30.53,1:40:34.99,英文,,0,0,0,,And then down in your terminal window, you were trying to do make hello enter.
Dialogue: 0,1:40:34.99,1:40:38.70,英文,,0,0,0,,And this now didn't actually do anything.
Dialogue: 0,1:40:38.70,1:40:42.38,英文,,0,0,0,,I'm hitting, I'm trying to run the command.
Dialogue: 0,1:40:42.38,1:40:44.72,英文,,0,0,0,,I got permission denied, as at least one of you did.
Dialogue: 0,1:40:44.72,1:40:45.64,英文,,0,0,0,,Now, why is that?
Dialogue: 0,1:40:45.64,1:40:46.92,英文,,0,0,0,,Well, let's just do a quick check.
Dialogue: 0,1:40:46.92,1:40:49.84,英文,,0,0,0,,If I do ls, I see now hello.
Dialogue: 0,1:40:49.84,1:40:53.14,英文,,0,0,0,,But hello has no asterisk next to it, which means it's not executable.
Dialogue: 0,1:40:53.14,1:40:53.94,英文,,0,0,0,,That's my code.
Dialogue: 0,1:40:53.94,1:40:54.52,英文,,0,0,0,,Why?
Dialogue: 0,1:40:54.52,1:40:57.55,英文,,0,0,0,,Well, notice the top of my tab confirms, oh, I screwed up.
Dialogue: 0,1:40:57.55,1:41:00.95,英文,,0,0,0,,I didn't name my file hello.c, which it just has to be.
Dialogue: 0,1:41:00.95,1:41:01.83,英文,,0,0,0,,So what do you do?
Dialogue: 0,1:41:01.83,1:41:05.83,英文,,0,0,0,,Well, you could very hackishly copy this, create a new file, paste it in.
Dialogue: 0,1:41:05.83,1:41:06.75,英文,,0,0,0,,Or no, no, no.
Dialogue: 0,1:41:06.75,1:41:10.01,英文,,0,0,0,,We know how to rename things now here, because that's one of our options.
Dialogue: 0,1:41:10.01,1:41:11.13,英文,,0,0,0,,Let me do this.
Dialogue: 0,1:41:11.13,1:41:17.58,英文,,0,0,0,,Let me do mv for move, hello, and then hello.c, and hit Enter.
Dialogue: 0,1:41:17.58,1:41:20.20,英文,,0,0,0,,You'll see the tab closes because hello no longer exists.
Dialogue: 0,1:41:20.20,1:41:25.14,英文,,0,0,0,,But if I now type ls, you'll see, ah, there is hello.c.
Dialogue: 0,1:41:25.14,1:41:28.95,英文,,0,0,0,,And if I open that file now, there's all of my same code.
Dialogue: 0,1:41:28.95,1:41:35.09,英文,,0,0,0,,And now if I do make hello, make hello, now I do get an executable file.
Dialogue: 0,1:41:35.09,1:41:37.27,英文,,0,0,0,,Where in the world is restored?
Dialogue: 0,1:41:37.27,1:41:43.02,英文,,0,0,0,,So mv, it's just a command not just for renaming, but it also turns out eventually for moving files as well.
Dialogue: 0,1:41:43.02,1:41:45.24,英文,,0,0,0,,You can also create directories or folders.
Dialogue: 0,1:41:45.24,1:41:52.89,英文,,0,0,0,,So for instance, if I go into VS Code again, and suppose I hover over here and click not on the plus file icon, but plus folder.
Dialogue: 0,1:41:52.89,1:41:57.75,英文,,0,0,0,,I can create a folder called, for instance, pset1 for problem set 1 in the class.
Dialogue: 0,1:41:57.75,1:42:03.01,英文,,0,0,0,,And you'll see now that it's empty, because all of my other files are in the default folder of my account.
Dialogue: 0,1:42:03.01,1:42:05.58,英文,,0,0,0,,But I could also go in there like this.
Dialogue: 0,1:42:05.58,1:42:07.60,英文,,0,0,0,,And I could click on File.
Dialogue: 0,1:42:07.60,1:42:13.56,英文,,0,0,0,,And now I can create a new file called mario.c, which is one of the first problems, for instance.
Dialogue: 0,1:42:13.56,1:42:19.04,英文,,0,0,0,,But you'll notice now that mario.c is inside of the pset1 folder.
Dialogue: 0,1:42:19.04,1:42:20.70,英文,,0,0,0,,So if I zoom out.
Dialogue: 0,1:42:20.70,1:42:23.48,英文,,0,0,0,,And I type ls at my terminal window.
Dialogue: 0,1:42:23.48,1:42:28.81,英文,,0,0,0,,I won't see mario.c anywhere, but I do see a pset1 folder.
Dialogue: 0,1:42:28.81,1:42:31.73,英文,,0,0,0,,And it's in light blue followed by a slash, which you don't have to type.
Dialogue: 0,1:42:31.73,1:42:33.33,英文,,0,0,0,,It just indicates that's a folder.
Dialogue: 0,1:42:33.33,1:42:37.79,英文,,0,0,0,,Now I can visually, at top left, obviously see pset1 contains mario.c.
Dialogue: 0,1:42:37.79,1:42:44.59,英文,,0,0,0,,But if I try to do something like make Mario here, no rule to make target Mario, it just doesn't seem to exist.
Dialogue: 0,1:42:44.59,1:42:46.73,英文,,0,0,0,,And that's because you're in the wrong directory.
Dialogue: 0,1:42:46.73,1:42:51.68,英文,,0,0,0,,So in a command line interface, it's not quite as simple as just clicking on a folder and voila, it opens.
Dialogue: 0,1:42:51.68,1:42:55.40,英文,,0,0,0,,You have to change into the directory or folder.
Dialogue: 0,1:42:55.40,1:42:57.74,英文,,0,0,0,,And cd is going to be the command there.
Dialogue: 0,1:42:57.74,1:43:04.28,英文,,0,0,0,,So if I want to actually change into that directory, I can do cd space pset1 enter.
Dialogue: 0,1:43:04.28,1:43:05.95,英文,,0,0,0,,And now you'll see my prompt changes.
Dialogue: 0,1:43:05.95,1:43:09.37,英文,,0,0,0,,And this is just a common convention, but it's not the only one out there.
Dialogue: 0,1:43:09.37,1:43:12.47,英文,,0,0,0,,Now I still have a dollar sign, which indicates where I can type commands.
Dialogue: 0,1:43:12.47,1:43:16.53,英文,,0,0,0,,But before it, I see a reminder constantly what folder I'm in.
Dialogue: 0,1:43:16.53,1:43:21.70,英文,,0,0,0,,And we put that there deliberately, like a lot of Linux users do, just to remind themselves where they are.
Dialogue: 0,1:43:21.70,1:43:29.16,英文,,0,0,0,,Because unlike Windows, where you have a nice big window telling you where you are, at the command line, you kind of need to be reminded textually.
Dialogue: 0,1:43:29.16,1:43:34.46,英文,,0,0,0,,But now if I type ls and hit Enter, what should I see?
Dialogue: 0,1:43:34.46,1:43:36.34,英文,,0,0,0,,Yeah, mario.c.
Dialogue: 0,1:43:36.34,1:43:44.17,英文,,0,0,0,,And now, if I want to actually compile it, I can run make mario in this directory once I actually type out all of the code.
Dialogue: 0,1:43:44.17,1:43:50.99,英文,,0,0,0,,Rest assured that in problem sets in labs, we'll almost always, certainly in the first weeks of the class, give you exactly the commands to type.
Dialogue: 0,1:43:50.99,1:43:55.27,英文,,0,0,0,,Odds are, because it's new to many of you, you will accidentally type the wrong commands.
Dialogue: 0,1:43:55.27,1:43:56.03,英文,,0,0,0,,No big deal.
Dialogue: 0,1:43:56.03,1:43:58.81,英文,,0,0,0,,Just remember that you have different ways to solve these problems.
Dialogue: 0,1:43:58.81,1:44:02.17,英文,,0,0,0,,You've got the graphical file explorer, which should feel a little more familiar.
Dialogue: 0,1:44:02.17,1:44:06.79,英文,,0,0,0,,But in time, you'll start to know and honestly probably prefer commands like these.
Dialogue: 0,1:44:06.79,1:44:22.89,英文,,0,0,0,,So cd for change directory, cp for copy a file, ls for list, mkdir to make a directory, create a new folder at the command line instead of with the button, mv for move or rename, rm for?
Dialogue: 0,1:44:22.89,1:44:24.95,英文,,0,0,0,,Remove, so be careful with that one.
Dialogue: 0,1:44:24.95,1:44:28.83,英文,,0,0,0,,Rmdir, remove directory, and there's dozens, hundreds of other commands.
Dialogue: 0,1:44:28.83,1:44:33.33,英文,,0,0,0,,You won't need many of them, but we'll start to scratch the surface all the more over time.
Dialogue: 0,1:44:33.33,1:44:52.05,英文,,0,0,0,,But ultimately, this command line interface is going to be a more powerful mechanism, a more capable mechanism, and ultimately, a more efficient mechanism for writing code, running commands, solving problems, analyzing data more generally, even though, no, there's going to be some growing pains early on, just because it's probably so new for many of you.
Dialogue: 0,1:44:52.05,1:44:56.45,英文,,0,0,0,,So with that said, we have some problems still to solve, but we promised cookies today.
Dialogue: 0,1:44:56.45,1:44:58.34,英文,,0,0,0,,So let's go ahead and take a 10-minute break.
Dialogue: 0,1:44:58.34,1:45:03.19,英文,,0,0,0,,Cookies are now served in the transept, and we'll be back here in 10.
Dialogue: 0,1:45:03.19,1:45:04.71,英文,,0,0,0,,All right, we are back.
Dialogue: 0,1:45:04.71,1:45:10.86,英文,,0,0,0,,And up until now, each of the code examples in C we've done have been kind of designed to show one specific topic.
Dialogue: 0,1:45:10.86,1:45:25.29,英文,,0,0,0,,But we thought we'd try to take a step back and solve a more general problem and give you a sense of when, given a problem set, for instance, or just a programming problem more generally, where you even begin and how you go about approaching it when it's not obvious what the point of the exercise is.
Dialogue: 0,1:45:25.29,1:45:28.57,英文,,0,0,0,,So one of my favorite games from yesteryear is this one here.
Dialogue: 0,1:45:28.57,1:45:31.67,英文,,0,0,0,,Super Mario Brothers that has come in so many different forms since.
Dialogue: 0,1:45:31.67,1:45:37.34,英文,,0,0,0,,But in this original two-dimensional side-scroller game, there was a lot of artwork like this.
Dialogue: 0,1:45:37.34,1:45:40.30,英文,,0,0,0,,So for instance, up here in the sky were four question marks.
Dialogue: 0,1:45:40.30,1:45:55.95,英文,,0,0,0,,And we'll find that in C and a lot of programming languages initially, it's a lot easier, a lot more accessible to focus really on black and white type interactive programs textually as opposed to full-fledged graphics and the like, but more on the more graphical acoustic type of programs before long.
Dialogue: 0,1:45:55.95,1:46:09.12,英文,,0,0,0,,But for now, let me go over and propose that we try to just implement in ASCII art, ASCII, again, being the code that maps numbers to letters, at least for English, into a textual version of these four question marks in the sky.
Dialogue: 0,1:46:09.12,1:46:11.18,英文,,0,0,0,,So for this, let me go over to VS Code.
Dialogue: 0,1:46:11.18,1:46:17.21,英文,,0,0,0,,I'll create my own version of mario.c that will be different from the one you're challenged with in problem set one.
Dialogue: 0,1:46:17.21,1:46:25.05,英文,,0,0,0,,Indeed, in problem set one, you'll be challenged to build a little something like this, albeit with hashtags for ASCII art instead of graphics.
Dialogue: 0,1:46:25.05,1:46:28.03,英文,,0,0,0,,And in mario.c, I want to just solve this simple problem first.
Dialogue: 0,1:46:28.03,1:46:29.77,英文,,0,0,0,,So it's all involving output.
Dialogue: 0,1:46:29.77,1:46:33.18,英文,,0,0,0,,So I'll do include standard io.h, so I can use printf.
Dialogue: 0,1:46:33.18,1:46:37.44,英文,,0,0,0,,I'll do my int main void, more on why we keep doing that in future weeks.
Dialogue: 0,1:46:37.44,1:46:50.46,英文,,0,0,0,,And I'm just going to do something simple initially, like 1, 2, 3, 4, backslash n. This is about the simplest way I can implement four question marks in the sky, like these here, using pure text like this.
Dialogue: 0,1:46:50.46,1:46:52.70,英文,,0,0,0,,So let me go ahead and do make mario.
Dialogue: 0,1:46:52.70,1:46:55.94,英文,,0,0,0,,Dot slash Mario, and voila, we have those four question marks.
Dialogue: 0,1:46:55.94,1:46:58.84,英文,,0,0,0,,But we've seen, of course, that there are better ways to do this.
Dialogue: 0,1:46:58.84,1:47:08.13,英文,,0,0,0,,And if you wanted to generalize this to be five question marks, six, 60 different question marks, loop was always the answer for not repeating ourselves.
Dialogue: 0,1:47:08.13,1:47:12.93,英文,,0,0,0,,So maybe I should rewrite this a little bit more flexibly and say something like this.
Dialogue: 0,1:47:12.93,1:47:17.13,英文,,0,0,0,,For int i get 0, i less than 4, i plus plus.
Dialogue: 0,1:47:17.13,1:47:22.09,英文,,0,0,0,,And then inside of the for loop, now I can just do a single question mark.
Dialogue: 0,1:47:22.09,1:47:25.90,英文,,0,0,0,,But I don't think what I've just done is correct.
Dialogue: 0,1:47:25.90,1:47:29.42,英文,,0,0,0,,Anyone spot the aesthetic bug already?
Dialogue: 0,1:47:29.42,1:47:31.19,英文,,0,0,0,,Yeah.
Dialogue: 0,1:47:31.19,1:47:34.19,英文,,0,0,0,,Why is this wrong if I want to print the same thing?
Dialogue: 0,1:47:34.19,1:47:38.84,英文,,0,0,0,,Yeah.
Dialogue: 0,1:47:38.84,1:47:44.78,英文,,0,0,0,,Yeah, so I don't think I want to backslash n after every question mark, because the goal is, again, this row of question marks in the sky.
Dialogue: 0,1:47:44.78,1:47:50.72,英文,,0,0,0,,So if I now recompile this, make Mario, dot slash Mario, OK, it's almost there.
Dialogue: 0,1:47:50.72,1:47:54.95,英文,,0,0,0,,But now I have that regression to where the dollar sign's not on its own line.
Dialogue: 0,1:47:54.95,1:47:59.79,英文,,0,0,0,,So I think I need a new line, but I don't think I want it here, because that was not going to end well.
Dialogue: 0,1:47:59.79,1:48:03.35,英文,,0,0,0,,Where do I want it instead?
Dialogue: 0,1:48:03.35,1:48:03.93,英文,,0,0,0,,Any instinct?
Dialogue: 0,1:48:03.93,1:48:05.74,英文,,0,0,0,,Yeah.
Dialogue: 0,1:48:05.74,1:48:07.38,英文,,0,0,0,,Yeah, so outside the for loop.
Dialogue: 0,1:48:07.38,1:48:11.67,英文,,0,0,0,,So indeed, I can just go below line 8 and above line 9, creating a new one.
Dialogue: 0,1:48:11.67,1:48:15.33,英文,,0,0,0,,And now it's totally fine to just print a new line like that.
Dialogue: 0,1:48:15.33,1:48:17.31,英文,,0,0,0,,You don't have to print anything else with it.
Dialogue: 0,1:48:17.31,1:48:18.89,英文,,0,0,0,,It's indeed a character unto itself.
Dialogue: 0,1:48:18.89,1:48:21.97,英文,,0,0,0,,So let's do make mario one last time, ./mario.
Dialogue: 0,1:48:21.97,1:48:24.03,英文,,0,0,0,,OK, so now we're back in business there.
Dialogue: 0,1:48:24.03,1:48:31.52,英文,,0,0,0,,Well, what if we wanted to do some other scene from Mario, such as this one here, where there's a lot of vertical obstacles, like these bricks here?
Dialogue: 0,1:48:31.52,1:48:40.41,英文,,0,0,0,,If I wanted to print out now a column of three bricks, and I'll use hashtags for these instead of anything graphical, well, I think we're almost there, right?
Dialogue: 0,1:48:40.41,1:48:42.33,英文,,0,0,0,,Like, I think I can now.
Dialogue: 0,1:48:42.33,1:48:43.99,英文,,0,0,0,,It's maybe a little easier.
Dialogue: 0,1:48:43.99,1:48:49.22,英文,,0,0,0,,I can go back here, change the question mark to something that looks more like a brick, like this hash symbol.
Dialogue: 0,1:48:49.22,1:48:56.42,英文,,0,0,0,,And I think now I do want the new line character, because when I now do make mario ./mario, OK, there's my wall of four.
Dialogue: 0,1:48:56.42,1:48:58.19,英文,,0,0,0,,Oh, but wait, I didn't want four.
Dialogue: 0,1:48:58.19,1:49:01.05,英文,,0,0,0,,I want it to be consistent just with this particular scene here.
Dialogue: 0,1:49:01.05,1:49:02.39,英文,,0,0,0,,So I just want 3.
Dialogue: 0,1:49:02.39,1:49:04.83,英文,,0,0,0,,So I can still change it in one place.
Dialogue: 0,1:49:04.83,1:49:06.35,英文,,0,0,0,,And here, again, is that paradigm.
Dialogue: 0,1:49:06.35,1:49:15.99,英文,,0,0,0,,Even whether you're using 4 or 3, if you get into the habit of starting counting from 0, you go on up 2, but not through the value you want to count up to.
Dialogue: 0,1:49:15.99,1:49:20.02,英文,,0,0,0,,So that's why I'm using less than instead of less than or equals to there.
Dialogue: 0,1:49:20.02,1:49:25.39,英文,,0,0,0,,So this would be the common paradigm, though you could certainly count it like we saw earlier in different ways.
Dialogue: 0,1:49:25.39,1:49:28.09,英文,,0,0,0,,But what if things escalate one level further?
Dialogue: 0,1:49:28.09,1:49:35.40,英文,,0,0,0,,And when you're in the underground version of Super Mario Brothers, there's a lot of these underground obstructions, including grids of bricks like this.
Dialogue: 0,1:49:35.40,1:49:45.47,英文,,0,0,0,,And let me conjecture that if you slice this up, it's roughly a 3 by 3 grid of bricks that all interlock prettily to give us just one big, large brick like this.
Dialogue: 0,1:49:45.47,1:49:50.87,英文,,0,0,0,,So if I want to print out a 3 by 3 grid, now things are getting a little more interesting.
Dialogue: 0,1:49:50.87,1:49:56.73,英文,,0,0,0,,Because up until now, I've printed either one row horizontally or one column vertically.
Dialogue: 0,1:49:56.73,1:50:02.90,英文,,0,0,0,,But we haven't really seen any code where I'm sort of printing or living in two different dimensions, like the game would imply.
Dialogue: 0,1:50:02.90,1:50:05.62,英文,,0,0,0,,But let me propose that we could do this.
Dialogue: 0,1:50:05.62,1:50:10.78,英文,,0,0,0,,Let me go ahead and say, all right, suppose I want to print a 3 by 3 grid of bricks.
Dialogue: 0,1:50:10.78,1:50:13.21,英文,,0,0,0,,It's really that I want to print.
Dialogue: 0,1:50:13.21,1:50:13.67,英文,,0,0,0,,What?
Dialogue: 0,1:50:13.67,1:50:16.38,英文,,0,0,0,,Three rows of bricks.
Dialogue: 0,1:50:16.38,1:50:17.98,英文,,0,0,0,,Like, a grid is three rows.
Dialogue: 0,1:50:17.98,1:50:22.42,英文,,0,0,0,,So if I take the high-level idea and reduce it to something a little simpler, how do I do that?
Dialogue: 0,1:50:22.42,1:50:24.88,英文,,0,0,0,,Well, let me get rid of the printf for a moment, as I did.
Dialogue: 0,1:50:24.88,1:50:31.17,英文,,0,0,0,,And let me just stipulate that this for loop, even though it doesn't do anything useful yet, will do something how many times?
Dialogue: 0,1:50:31.17,1:50:33.42,英文,,0,0,0,,Just by design.
Dialogue: 0,1:50:33.42,1:50:34.50,英文,,0,0,0,,All right, three times, right?
Dialogue: 0,1:50:34.50,1:50:35.84,英文,,0,0,0,,This for loop is good to go.
Dialogue: 0,1:50:35.84,1:50:39.46,英文,,0,0,0,,It will do something three times by just using i to do the counting.
Dialogue: 0,1:50:39.46,1:50:51.11,英文,,0,0,0,,All right, well, if I want to print out now a row of three bricks all on the same line, that's pretty similar to what we did earlier when I just wanted to print out four question marks in the sky.
Dialogue: 0,1:50:51.11,1:50:55.37,英文,,0,0,0,,So we've kind of seen a solution there, and I daresay we can compose one into the other.
Dialogue: 0,1:50:55.37,1:50:58.81,英文,,0,0,0,,So if I want to print out a row of bricks,
Dialogue: 0,1:50:58.81,1:51:05.33,英文,,0,0,0,,I could just do this, for int i gets 0, i less than 3, i plus plus.
Dialogue: 0,1:51:05.33,1:51:12.06,英文,,0,0,0,,And then inside of this inner loop, if you will, let me print out a single brick like this.
Dialogue: 0,1:51:12.06,1:51:17.82,英文,,0,0,0,,And then I don't like where this is going yet, but I think I've taken two ideas and I've combined them.
Dialogue: 0,1:51:17.82,1:51:23.22,英文,,0,0,0,,But what might be problematic about lines 5 and 7 at the moment?
Dialogue: 0,1:51:23.22,1:51:24.81,英文,,0,0,0,,What might be bad here?
Dialogue: 0,1:51:24.81,1:51:28.14,英文,,0,0,0,,Yeah, in back?
Dialogue: 0,1:51:28.14,1:51:32.08,英文,,0,0,0,,Yeah, I'm using the same integer i, which I feel like could get me into trouble, right?
Dialogue: 0,1:51:32.08,1:51:41.58,英文,,0,0,0,,If I'm trying to count three things here, but then I'm hijacking this variable and using it inside of the loop, I feel like I should avoid this collision of names.
Dialogue: 0,1:51:41.58,1:51:43.95,英文,,0,0,0,,And so what's a good alternative to i?
Dialogue: 0,1:51:43.95,1:51:48.09,英文,,0,0,0,,Well, a programmer, if nesting loops in this way, would pretty commonly go with j.
Dialogue: 0,1:51:48.09,1:51:52.57,英文,,0,0,0,,You could certainly change this to be like rows and columns if you want more descriptive variables.
Dialogue: 0,1:51:52.57,1:51:55.05,英文,,0,0,0,,But i and j is pretty canonical.
Dialogue: 0,1:51:55.05,1:51:59.12,英文,,0,0,0,,So I'm going to go ahead and do this, j++ instead of i++ everywhere.
Dialogue: 0,1:51:59.12,1:52:00.28,英文,,0,0,0,,And let me try compiling this.
Dialogue: 0,1:52:00.28,1:52:04.42,英文,,0,0,0,,So make Mario, Enter, dot slash Mario.
Dialogue: 0,1:52:04.42,1:52:06.44,英文,,0,0,0,,OK, so a couple of things are wrong here.
Dialogue: 0,1:52:06.44,1:52:08.55,英文,,0,0,0,,This is not a 3 by 3 grid.
Dialogue: 0,1:52:08.55,1:52:13.44,英文,,0,0,0,,But if you count these things, how many did I indeed print at least?
Dialogue: 0,1:52:13.44,1:52:15.26,英文,,0,0,0,,Probably just guess logically.
Dialogue: 0,1:52:15.26,1:52:16.98,英文,,0,0,0,,Yeah, there's nine hashes there.
Dialogue: 0,1:52:16.98,1:52:21.63,英文,,0,0,0,,Unfortunately, they're all on the same line instead of on three different lines.
Dialogue: 0,1:52:21.63,1:52:25.07,英文,,0,0,0,,So where logically can I fix this?
Dialogue: 0,1:52:25.07,1:52:26.59,英文,,0,0,0,,I'm definitely printing all the bricks.
Dialogue: 0,1:52:26.59,1:52:27.68,英文,,0,0,0,,They're just not on the right levels.
Dialogue: 0,1:52:27.68,1:52:32.76,英文,,0,0,0,,Yeah.
Dialogue: 0,1:52:32.76,1:52:37.90,英文,,0,0,0,,Yeah, so put a new line after the first loop, this inner loop, if you will, the nested loop, if you will.
Dialogue: 0,1:52:37.90,1:52:41.10,英文,,0,0,0,,So let me go ahead and print out just a backslash n here.
Dialogue: 0,1:52:41.10,1:52:42.12,英文,,0,0,0,,And what's this doing?
Dialogue: 0,1:52:42.12,1:52:47.18,英文,,0,0,0,,Well, I think that's going to solve it by just moving the cursor to the next line after you've done one row.
Dialogue: 0,1:52:47.18,1:52:50.93,英文,,0,0,0,,So let me go ahead and do make mario enter dot slash mario.
Dialogue: 0,1:52:50.93,1:52:52.01,英文,,0,0,0,,And now we're in business.
Dialogue: 0,1:52:52.01,1:52:59.45,英文,,0,0,0,,So it's a very simplistic version of this same graphic, but I'm leveraging two different ideas now, the same idea twice, rather, now.
Dialogue: 0,1:52:59.45,1:53:04.07,英文,,0,0,0,,I'm using one loop to kind of control my cursor going row by row by row.
Dialogue: 0,1:53:04.07,1:53:11.12,英文,,0,0,0,,But then within that loop, I'm doing left to right, dot, dot, dot, dot, dot, with printing out each of these individual bricks like this.
Dialogue: 0,1:53:11.12,1:53:13.40,英文,,0,0,0,,Now, there's a little sloppiness here still.
Dialogue: 0,1:53:13.40,1:53:26.50,英文,,0,0,0,,Like, if I want this to always be a square, just because that's what it looks like in the game, well, I could change it to be a 4 by 4 square by doing this, or a 5 by 5 grid by doing this.
Dialogue: 0,1:53:26.50,1:53:33.47,英文,,0,0,0,,Why is this perhaps not the best design, to just keep changing the numbers when I want to change the size?
Dialogue: 0,1:53:33.47,1:53:34.43,英文,,0,0,0,,Where could this go awry?
Dialogue: 0,1:53:34.43,1:53:38.93,英文,,0,0,0,,Yeah.
Dialogue: 0,1:53:38.93,1:53:43.08,英文,,0,0,0,,Yeah, if it's always going to be a square and height is going to be the same as width, I'm just inviting trouble here, right?
Dialogue: 0,1:53:43.08,1:53:44.10,英文,,0,0,0,,Eventually, I'm going to screw up.
Dialogue: 0,1:53:44.10,1:53:45.56,英文,,0,0,0,,I'm going to change one but not the other.
Dialogue: 0,1:53:45.56,1:53:48.26,英文,,0,0,0,,Then it's going to come out to be a rectangle instead of a proper square.
Dialogue: 0,1:53:48.26,1:53:50.40,英文,,0,0,0,,So I should probably solve this a little differently.
Dialogue: 0,1:53:50.40,1:53:51.26,英文,,0,0,0,,So let me do that.
Dialogue: 0,1:53:51.26,1:54:01.14,英文,,0,0,0,,At the top of my main function here, let me go ahead and give myself a variable called maybe n for the number of bricks I want horizontally and vertically.
Dialogue: 0,1:54:01.14,1:54:03.68,英文,,0,0,0,,And I'll just initialize that to 3 initially.
Dialogue: 0,1:54:03.68,1:54:06.73,英文,,0,0,0,,And instead of putting 3 here, I'll literally just use n.
Dialogue: 0,1:54:06.73,1:54:13.93,英文,,0,0,0,,But I'll do it in both places so that now, henceforth, if I ever want to change this and change it to 4 or 5 or anything else, I'm all done.
Dialogue: 0,1:54:13.93,1:54:16.91,英文,,0,0,0,,It's better designed because there's a lower probability of mistakes.
Dialogue: 0,1:54:16.91,1:54:20.01,英文,,0,0,0,,But I could technically still screw up somehow.
Dialogue: 0,1:54:20.01,1:54:24.47,英文,,0,0,0,,I could technically accidentally write a line of code like n plus plus.
Dialogue: 0,1:54:24.47,1:54:29.10,英文,,0,0,0,,Or I could just change the value of that variable even though I don't want it to ever change.
Dialogue: 0,1:54:29.10,1:54:30.54,英文,,0,0,0,,And maybe it's because I'm a bad programmer.
Dialogue: 0,1:54:30.54,1:54:31.52,英文,,0,0,0,,I copy-pasted wrong.
Dialogue: 0,1:54:31.52,1:54:34.46,英文,,0,0,0,,I'm working with someone who doesn't know what n represents.
Dialogue: 0,1:54:34.46,1:54:41.20,英文,,0,0,0,,I can defend myself and my code against human error like that by going up here to line 5.
Dialogue: 0,1:54:41.20,1:54:50.91,英文,,0,0,0,,And instead of just declaring a simple variable like we did in Scratch, I can further harden my code, so to speak, by declaring it to be a constant using the keyword const.
Dialogue: 0,1:54:50.91,1:54:59.31,英文,,0,0,0,,Now, this is just a feature of C and some other languages to protect you against yourself by proactively saying n is a constant.
Dialogue: 0,1:54:59.31,1:55:05.50,英文,,0,0,0,,Specifically the number five, or previously the number three, you cannot accidentally write code elsewhere that changes it.
Dialogue: 0,1:55:05.50,1:55:08.34,英文,,0,0,0,,The computer will throw an error and catch that error.
Dialogue: 0,1:55:08.34,1:55:12.30,英文,,0,0,0,,So it's just a way of programming a little more defensively.
Dialogue: 0,1:55:12.30,1:55:14.12,英文,,0,0,0,,Some languages have this, some languages don't.
Dialogue: 0,1:55:14.12,1:55:15.98,英文,,0,0,0,,But in general, it's a good practice.
Dialogue: 0,1:55:15.98,1:55:20.62,英文,,0,0,0,,It makes your code better designed because it just is less vulnerable to mistakes.
Dialogue: 0,1:55:20.62,1:55:23.63,英文,,0,0,0,,By you, colleagues, or anyone else using the code.
Dialogue: 0,1:55:23.63,1:55:26.49,英文,,0,0,0,,So let me change this back to 3 just to be our default.
Dialogue: 0,1:55:26.49,1:55:28.47,英文,,0,0,0,,But now I'm using n in both places.
Dialogue: 0,1:55:28.47,1:55:33.26,英文,,0,0,0,,And if I do make mario ./mario, we're back to where we originally started.
Dialogue: 0,1:55:33.26,1:55:35.80,英文,,0,0,0,,But the code's a little more better design.
Dialogue: 0,1:55:35.80,1:55:37.48,英文,,0,0,0,,And let me note this too.
Dialogue: 0,1:55:37.48,1:55:41.78,英文,,0,0,0,,All this time, I've been mentioning that there's correctness is important, design is important.
Dialogue: 0,1:55:41.78,1:55:43.68,英文,,0,0,0,,There was also this matter of style.
Dialogue: 0,1:55:43.68,1:55:49.06,英文,,0,0,0,,I've been very deliberately writing pretty code, if you will, not just the syntax highlighting, which is automatic.
Dialogue: 0,1:55:49.06,1:55:52.11,英文,,0,0,0,,But notice that I keep indenting everything nicely.
Dialogue: 0,1:55:52.11,1:55:57.53,英文,,0,0,0,,Any time I have curly braces, like on lines 4 and 14, everything is indented one level.
Dialogue: 0,1:55:57.53,1:56:04.59,英文,,0,0,0,,When I have additional curly braces on lines 7 and 13, everything is nicely indented as well.
Dialogue: 0,1:56:04.59,1:56:10.28,英文,,0,0,0,,Technically speaking, the computer does not care about that kind of white space, so to speak.
Dialogue: 0,1:56:10.28,1:56:17.26,英文,,0,0,0,,And you could really make a mess of things like this because you have a strange sense of style or just because you're being a little sloppy.
Dialogue: 0,1:56:17.26,1:56:20.38,英文,,0,0,0,,But this code is actually still correct.
Dialogue: 0,1:56:20.38,1:56:28.37,英文,,0,0,0,,If I recompile it, let me open up my terminal window, make mario, no errors, ./mario, it works perfectly fine.
Dialogue: 0,1:56:28.37,1:56:36.73,英文,,0,0,0,,But you can imagine just how annoying this now is to read, certainly for a TA, but certainly for you the next day, certainly for a colleague who has to read your code.
Dialogue: 0,1:56:36.73,1:56:38.03,英文,,0,0,0,,This is just bad style.
Dialogue: 0,1:56:38.03,1:56:39.11,英文,,0,0,0,,It still works.
Dialogue: 0,1:56:39.11,1:56:43.23,英文,,0,0,0,,And it's well-designed in that you're writing code defensively.
Dialogue: 0,1:56:43.23,1:56:44.21,英文,,0,0,0,,You're using a constant.
Dialogue: 0,1:56:44.21,1:56:46.59,英文,,0,0,0,,But my god, this style is atrocious.
Dialogue: 0,1:56:46.59,1:56:53.85,英文,,0,0,0,,Now, you'll often find that there's tools that can help you format your code for you in a manner consistent with the courses or a company's style.
Dialogue: 0,1:56:53.85,1:57:03.75,英文,,0,0,0,,But this is the kind of muscle memory you'll want to develop over time to take VS Code suggestions as it's outputting lines of code for you because it's trying to format your code in a readable way.
Dialogue: 0,1:57:03.75,1:57:13.86,英文,,0,0,0,,And oh my god, if and when you do have bugs in your code and things aren't even indented properly, there's no way you, the human, are going to be able to wrap your mind around what's happening and where.
Dialogue: 0,1:57:13.86,1:57:16.20,英文,,0,0,0,,You're just making the problem harder for yourself.
Dialogue: 0,1:57:16.20,1:57:21.26,英文,,0,0,0,,So do get into this habit, too, of manifesting good style as well.
Dialogue: 0,1:57:21.26,1:57:24.88,英文,,0,0,0,,All right, well, let me propose that we don't only want a 3 by 3 grid.
Dialogue: 0,1:57:24.88,1:57:27.00,英文,,0,0,0,,We want this to be a little more dynamic.
Dialogue: 0,1:57:27.00,1:57:38.28,英文,,0,0,0,,So suppose we moved away from a constant to just using an integer called n. And let's ask the user for the size of this grid, as by prompting them with get int, as we've done before.
Dialogue: 0,1:57:38.28,1:57:40.38,英文,,0,0,0,,And I'll store it in n here.
Dialogue: 0,1:57:40.38,1:57:45.25,英文,,0,0,0,,And then I can go ahead and more dynamically run, make Mario to compile it.
Dialogue: 0,1:57:45.25,1:57:49.92,英文,,0,0,0,,Whoops. Oh, I screwed up accidentally.
Dialogue: 0,1:57:49.92,1:57:56.80,英文,,0,0,0,,What is it suggesting I do, albeit cryptically?
Dialogue: 0,1:57:56.80,1:57:59.92,英文,,0,0,0,,Yeah, I forgot to include the CS50 header file up top.
Dialogue: 0,1:57:59.92,1:58:03.33,英文,,0,0,0,,And that's why it doesn't know that get int is, in fact, valid.
Dialogue: 0,1:58:03.33,1:58:04.93,英文,,0,0,0,,So that's an easy fix.
Dialogue: 0,1:58:04.93,1:58:07.83,英文,,0,0,0,,I'm just going to go up here and include cs50.h.
Dialogue: 0,1:58:07.83,1:58:10.91,英文,,0,0,0,,Now I'm going to clear my terminal and rerun make mario.
Dialogue: 0,1:58:10.91,1:58:12.91,英文,,0,0,0,,Now we're good, ./mario.
Dialogue: 0,1:58:12.91,1:58:14.43,英文,,0,0,0,,And now notice I'm prompted for size.
Dialogue: 0,1:58:14.43,1:58:16.61,英文,,0,0,0,,So if I type in 3, it's the same as before.
Dialogue: 0,1:58:16.61,1:58:18.62,英文,,0,0,0,,If I type in 10, it's even bigger.
Dialogue: 0,1:58:18.62,1:58:21.08,英文,,0,0,0,,But it happens all now automatically.
Dialogue: 0,1:58:21.08,1:58:23.34,英文,,0,0,0,,But there are some things that we're not detecting.
Dialogue: 0,1:58:23.34,1:58:26.06,英文,,0,0,0,,For instance, suppose I type in cat.
Dialogue: 0,1:58:26.06,1:58:28.62,英文,,0,0,0,,Well, that's handled by the getInt function, as I claimed earlier.
Dialogue: 0,1:58:28.62,1:58:30.20,英文,,0,0,0,,That's one of the features of using a library.
Dialogue: 0,1:58:30.20,1:58:32.76,英文,,0,0,0,,You don't have to deal with erroneous input.
Dialogue: 0,1:58:32.76,1:58:36.30,英文,,0,0,0,,But we only designed a function called getInt to get you an integer.
Dialogue: 0,1:58:36.30,1:58:40.79,英文,,0,0,0,,We don't know if you want it to be positive, negative, 0, or some combination thereof.
Dialogue: 0,1:58:40.79,1:58:45.63,英文,,0,0,0,,And it's kind of weird to allow the user to type in negative 1 for the size of the grid.
Dialogue: 0,1:58:45.63,1:58:48.43,英文,,0,0,0,,Or negative 3 for the size of the grid.
Dialogue: 0,1:58:48.43,1:58:49.80,英文,,0,0,0,,And indeed, your code does nothing.
Dialogue: 0,1:58:49.80,1:58:51.38,英文,,0,0,0,,So at least it's not crashing.
Dialogue: 0,1:58:51.38,1:58:52.58,英文,,0,0,0,,But that's kind of stupid, right?
Dialogue: 0,1:58:52.58,1:58:57.29,英文,,0,0,0,,Like, it'd be nice to force the user, if they want a grid, to give us a positive value.
Dialogue: 0,1:58:57.29,1:58:58.43,英文,,0,0,0,,So how could we do this?
Dialogue: 0,1:58:58.43,1:59:03.99,英文,,0,0,0,,Well, I could go up here, and I could say something like, n is less than 1.
Dialogue: 0,1:59:03.99,1:59:08.14,英文,,0,0,0,,So if it's 0 or negative, which I don't want, what could I do?
Dialogue: 0,1:59:08.14,1:59:12.48,英文,,0,0,0,,Well, I could say, well, prompt the user again for the size.
Dialogue: 0,1:59:12.48,1:59:18.51,英文,,0,0,0,,And now notice I'm not declaring n again, because once it exists, you don't have to mention the data type again.
Dialogue: 0,1:59:18.51,1:59:20.01,英文,,0,0,0,,We said that earlier.
Dialogue: 0,1:59:20.01,1:59:21.67,英文,,0,0,0,,But this is kind of stupid.
Dialogue: 0,1:59:21.67,1:59:22.01,英文,,0,0,0,,Why?
Dialogue: 0,1:59:22.01,1:59:33.02,英文,,0,0,0,,Because now when you've given the user a second chance, OK, now maybe I'll do, all right, if this version of n is less than 1, well, let's just go and prompt the user a third time.
Dialogue: 0,1:59:33.02,1:59:35.08,英文,,0,0,0,,I mean, you can kind of see where this is stupidly going.
Dialogue: 0,1:59:35.08,1:59:39.68,英文,,0,0,0,,Like, this can't be the right solution to keep typing recursively the same thing again and again.
Dialogue: 0,1:59:39.68,1:59:40.84,英文,,0,0,0,,Like, where would it stop?
Dialogue: 0,1:59:40.84,1:59:45.04,英文,,0,0,0,,You'd have to give them a finite number of chances or just make a mess of your code.
Dialogue: 0,1:59:45.04,1:59:49.58,英文,,0,0,0,,So what would be intuitively a better solution here?
Dialogue: 0,1:59:49.58,1:59:50.74,英文,,0,0,0,,Yeah, so some kind of loop.
Dialogue: 0,1:59:50.74,1:59:52.15,英文,,0,0,0,,We've seen a while loop.
Dialogue: 0,1:59:52.15,1:59:53.21,英文,,0,0,0,,We've seen a for loop.
Dialogue: 0,1:59:53.21,1:59:54.15,英文,,0,0,0,,So maybe one of those.
Dialogue: 0,1:59:54.15,1:59:55.29,英文,,0,0,0,,So let me try this.
Dialogue: 0,1:59:55.29,1:59:58.75,英文,,0,0,0,,Let me delete this messiness and just go back to the first question.
Dialogue: 0,1:59:58.75,1:59:59.89,英文,,0,0,0,,And let me do this.
Dialogue: 0,1:59:59.89,2:00:09.76,英文,,0,0,0,,So while n is less than 1, so while the number is not what we want, let's just prompt the user in a loop this time for the size again.
Dialogue: 0,2:00:09.76,2:00:15.60,英文,,0,0,0,,Now here, too, this is better because it's only two requests for information.
Dialogue: 0,2:00:15.60,2:00:19.98,英文,,0,0,0,,But clearly, line 6 and 9 are pretty much identical other than the int.
Dialogue: 0,2:00:19.98,2:00:27.33,英文,,0,0,0,,And if I went in and changed the size, if I change the wording here, change it to a different language, I have to change it in two places.
Dialogue: 0,2:00:27.33,2:00:27.79,英文,,0,0,0,,That's bad.
Dialogue: 0,2:00:27.79,2:00:29.73,英文,,0,0,0,,Copy, paste, bad.
Dialogue: 0,2:00:29.73,2:00:31.03,英文,,0,0,0,,So what might be better?
Dialogue: 0,2:00:31.03,2:00:37.73,英文,,0,0,0,,Well, it turns out there's another paradigm in C that you can use that gets around this problem, this duplication of code.
Dialogue: 0,2:00:37.73,2:00:41.40,英文,,0,0,0,,It would be much nicer if I just write this code once.
Dialogue: 0,2:00:41.40,2:00:45.60,英文,,0,0,0,,And I can do that using a third type of loop called a do-while loop.
Dialogue: 0,2:00:45.60,2:00:48.00,英文,,0,0,0,,So it turns out in C, you can do this.
Dialogue: 0,2:00:48.00,2:00:53.28,英文,,0,0,0,,If you want to get the value of a variable, like n, first just to create the variable without an initial value.
Dialogue: 0,2:00:53.28,2:00:57.55,英文,,0,0,0,,So int n semicolon means we don't know what value it has yet, but that's OK.
Dialogue: 0,2:00:57.55,2:01:00.07,英文,,0,0,0,,We're going to add a value to it eventually.
Dialogue: 0,2:01:00.07,2:01:01.43,英文,,0,0,0,,Then I'm going to say this.
Dialogue: 0,2:01:01.43,2:01:04.49,英文,,0,0,0,,Do, literally, I'm going to open my curly braces.
Dialogue: 0,2:01:04.49,2:01:06.11,英文,,0,0,0,,And what do I want to do?
Dialogue: 0,2:01:06.11,2:01:11.90,英文,,0,0,0,,I want to assign to n the return value of get int, prompting the user for size.
Dialogue: 0,2:01:11.90,2:01:14.02,英文,,0,0,0,,Well, when do you want to do that?
Dialogue: 0,2:01:14.02,2:01:18.12,英文,,0,0,0,,I want to do that while n is less than 1.
Dialogue: 0,2:01:18.12,2:01:23.58,英文,,0,0,0,,And this code now achieves the exact same goal, but by never repeating myself.
Dialogue: 0,2:01:23.58,2:01:24.28,英文,,0,0,0,,Why?
Dialogue: 0,2:01:24.28,2:01:31.53,英文,,0,0,0,,Well, notice on these lines of code now, I'm literally saying on line 6, give me a variable called n of type integer.
Dialogue: 0,2:01:31.53,2:01:33.19,英文,,0,0,0,,It doesn't have a value initially, but that's fine.
Dialogue: 0,2:01:33.19,2:01:34.79,英文,,0,0,0,,You can do that.
Dialogue: 0,2:01:34.79,2:01:36.37,英文,,0,0,0,,Line 7 says, do the following.
Dialogue: 0,2:01:36.37,2:01:37.47,英文,,0,0,0,,What do you want to do?
Dialogue: 0,2:01:37.47,2:01:53.88,英文,,0,0,0,,Get int, prompting the user with the word size, and just store that value in n. But because C code runs top to bottom, left to right, now it's reasonable on line 11 to ask that question, OK, is the current value of n, which it definitely got on line 8, less than 1?
Dialogue: 0,2:01:53.88,2:01:58.61,英文,,0,0,0,,And if the user didn't cooperate, they typed in 0 or negative 1 or negative 3, what's going to happen?
Dialogue: 0,2:01:58.61,2:02:04.59,英文,,0,0,0,,It's going to go back up here and repeat, repeat, repeat everything in the do-while loop.
Dialogue: 0,2:02:04.59,2:02:10.88,英文,,0,0,0,,So a do-while loop in C, which is not something some other languages have, like Python, if you know it, does not have a do-while loop.
Dialogue: 0,2:02:10.88,2:02:20.72,英文,,0,0,0,,This is perhaps the cleanest way to achieve this, even though it's a little weird that you have to declare your variable, create your variable up top, and then check it down below.
Dialogue: 0,2:02:20.72,2:02:22.99,英文,,0,0,0,,But otherwise, it's similar to a while loop.
Dialogue: 0,2:02:22.99,2:02:26.39,英文,,0,0,0,,It just flips the order in which you're asking the question.
Dialogue: 0,2:02:26.39,2:02:29.00,英文,,0,0,0,,Any questions on this construct?
Dialogue: 0,2:02:29.00,2:02:35.67,英文,,0,0,0,,And do while in general is super useful when you want to get input from the user and make sure it meets certain requirements.
Dialogue: 0,2:02:35.67,2:02:41.77,英文,,0,0,0,,All right, so now that we have this building block after that interlude, how can I go about cleaning up this code?
Dialogue: 0,2:02:41.77,2:02:47.71,英文,,0,0,0,,And then let's conclude by taking a look at things that our code can't do or can't do very well or correctly.
Dialogue: 0,2:02:47.71,2:02:53.45,英文,,0,0,0,,Let me propose that in a final version of Mario, let me just add what are called now some comments.
Dialogue: 0,2:02:53.45,2:02:59.38,英文,,0,0,0,,So it turns out in code in C, You can define what are called comments, which are just notes to self.
Dialogue: 0,2:02:59.38,2:03:00.82,英文,,0,0,0,,Some of you discovered these in Scratch.
Dialogue: 0,2:03:00.82,2:03:04.72,英文,,0,0,0,,There's little yellow sticky notes you can use to add citations or explanations.
Dialogue: 0,2:03:04.72,2:03:07.00,英文,,0,0,0,,In C, there's a couple of ways to write comments.
Dialogue: 0,2:03:07.00,2:03:13.86,英文,,0,0,0,,And in general, comments are notes for yourself, for your TA, for your colleague as to what your code is doing and why or how.
Dialogue: 0,2:03:13.86,2:03:17.94,英文,,0,0,0,,It's a little explanatory note in English or whatever your human language might be.
Dialogue: 0,2:03:17.94,2:03:34.53,英文,,0,0,0,,So for instance, what I might do here  In my implementation of this version of Mario, I might first ask myself a question like, I might first make a note to self like this on a new line above this first block of code, get size of grid.
Dialogue: 0,2:03:34.53,2:03:36.59,英文,,0,0,0,,It's just an explanatory remark.
Dialogue: 0,2:03:36.59,2:03:43.73,英文,,0,0,0,,in any terse English that generally explains the next six or so lines, the next chunk or block of code, if you will.
Dialogue: 0,2:03:43.73,2:03:46.66,英文,,0,0,0,,It would be a little excessive to comment every single line.
Dialogue: 0,2:03:46.66,2:03:49.82,英文,,0,0,0,,At some point, the programmer should know what individual lines of code do.
Dialogue: 0,2:03:49.82,2:03:55.88,英文,,0,0,0,,But it's nice to be able to kind of glance at this comment on line 6 that starts with two slashes.
Dialogue: 0,2:03:55.88,2:03:58.08,英文,,0,0,0,,And it gets grayed out because of syntax highlighting.
Dialogue: 0,2:03:58.08,2:03:59.08,英文,,0,0,0,,It's not logic.
Dialogue: 0,2:03:59.08,2:04:00.64,英文,,0,0,0,,It's just a note to self.
Dialogue: 0,2:04:00.64,2:04:05.35,英文,,0,0,0,,It generally gives me a little cheat sheet as to what the following lines of code should be doing and or why.
Dialogue: 0,2:04:05.35,2:04:08.93,英文,,0,0,0,,And then down here, well, there's a second block of code that's a bunch of lines.
Dialogue: 0,2:04:08.93,2:04:14.31,英文,,0,0,0,,But together, this just, what, prints grid of bricks.
Dialogue: 0,2:04:14.31,2:04:23.92,英文,,0,0,0,,And so it's another comment to myself that just makes it a little more understandable what these 20-some-odd lines of code are doing by adding some English explanations thereof.
Dialogue: 0,2:04:23.92,2:04:33.76,英文,,0,0,0,,But now that I have these, wouldn't it be nice if I could kind of abstract these pieces of functionality away, this getting of the size and this printing of the grid?
Dialogue: 0,2:04:33.76,2:04:37.56,英文,,0,0,0,,In other words, suppose that you didn't know where to begin with this problem.
Dialogue: 0,2:04:37.56,2:04:46.63,英文,,0,0,0,,And the problem at hand were literally implement a program that prints a grid of bricks of some variable size, 3 or 4 or 5 or whatever the human types in.
Dialogue: 0,2:04:46.63,2:04:56.33,英文,,0,0,0,,If you have really no idea where to start, comments are actually a good way of getting started, because comments can be an approximation of what we called last week's pseudocode.
Dialogue: 0,2:04:56.33,2:05:02.18,英文,,0,0,0,,Pseudocode is terse English that kind of gets your point across, like for the phone book searching like last time.
Dialogue: 0,2:05:02.18,2:05:06.94,英文,,0,0,0,,So if you didn't really know where to begin, you could do something like this.
Dialogue: 0,2:05:06.94,2:05:14.61,英文,,0,0,0,,I could, for instance, just say get size of grid as my first step and then print grid of bricks as my second step.
Dialogue: 0,2:05:14.61,2:05:16.49,英文,,0,0,0,,And that's it for my program thus far.
Dialogue: 0,2:05:16.49,2:05:18.79,英文,,0,0,0,,This is now implemented in pseudocode.
Dialogue: 0,2:05:18.79,2:05:20.69,英文,,0,0,0,,I have some massive placeholders there.
Dialogue: 0,2:05:20.69,2:05:22.51,英文,,0,0,0,,Like, I still have work to be done.
Dialogue: 0,2:05:22.51,2:05:26.17,英文,,0,0,0,,But at least I have a high-level solution to the problem in comments.
Dialogue: 0,2:05:26.17,2:05:28.31,英文,,0,0,0,,And now I can even go this far.
Dialogue: 0,2:05:28.31,2:05:34.79,英文,,0,0,0,,I could say, well, let's suppose that there's just a function already that exists called get size.
Dialogue: 0,2:05:34.79,2:05:36.15,英文,,0,0,0,,I could do something like this.
Dialogue: 0,2:05:36.15,2:05:38.97,英文,,0,0,0,,I could do int n equals get size.
Dialogue: 0,2:05:38.97,2:05:43.08,英文,,0,0,0,,And now I just have to assume for the moment that some abstraction called get size exists.
Dialogue: 0,2:05:43.08,2:05:43.48,英文,,0,0,0,,It doesn't.
Dialogue: 0,2:05:43.48,2:05:45.58,英文,,0,0,0,,This does not come with the CS50 library.
Dialogue: 0,2:05:45.58,2:05:47.62,英文,,0,0,0,,But I could invent it, I bet.
Dialogue: 0,2:05:47.62,2:05:49.26,英文,,0,0,0,,How else might I proceed?
Dialogue: 0,2:05:49.26,2:05:57.27,英文,,0,0,0,,Well, let's just assume for the moment that there's also a function called print grid that just prints a grid of that size n.
Dialogue: 0,2:05:57.27,2:05:58.99,英文,,0,0,0,,So here, too, is an abstraction.
Dialogue: 0,2:05:58.99,2:06:00.33,英文,,0,0,0,,These puzzle pieces don't exist.
Dialogue: 0,2:06:00.33,2:06:01.99,英文,,0,0,0,,These functions don't yet exist.
Dialogue: 0,2:06:01.99,2:06:06.47,英文,,0,0,0,,But in C, just like in Scratch, I can create my own functions.
Dialogue: 0,2:06:06.47,2:06:07.59,英文,,0,0,0,,How do I do that?
Dialogue: 0,2:06:07.59,2:06:09.65,英文,,0,0,0,,Well, let me go down later in the file.
Dialogue: 0,2:06:09.65,2:06:12.81,英文,,0,0,0,,And by convention, you generally want to leave main at the top of your code.
Dialogue: 0,2:06:12.81,2:06:13.05,英文,,0,0,0,,Why?
Dialogue: 0,2:06:13.05,2:06:14.24,英文,,0,0,0,,Because it's the main function.
Dialogue: 0,2:06:14.24,2:06:18.32,英文,,0,0,0,,And it's just where the human eye is going to look to see what some file of code does.
Dialogue: 0,2:06:18.32,2:06:19.38,英文,,0,0,0,,And let me do this.
Dialogue: 0,2:06:19.38,2:06:26.20,英文,,0,0,0,,I want to create a function of my own called getSize whose purpose in life is to get the size that the user wants.
Dialogue: 0,2:06:26.20,2:06:28.44,英文,,0,0,0,,I want this function to return an integer.
Dialogue: 0,2:06:28.44,2:06:35.07,英文,,0,0,0,,And the syntax for doing that is this write, similar to a variable, the data type that this function returns.
Dialogue: 0,2:06:35.07,2:06:37.61,英文,,0,0,0,,I don't need this function to take any inputs.
Dialogue: 0,2:06:37.61,2:06:45.82,英文,,0,0,0,,And so I'm going to use a new keyword that we've actually been using thus far, more on it another time, just called void, which just means this get size function does not take any inputs.
Dialogue: 0,2:06:45.82,2:06:47.14,英文,,0,0,0,,It does have an output.
Dialogue: 0,2:06:47.14,2:06:48.46,英文,,0,0,0,,It outputs an int.
Dialogue: 0,2:06:48.46,2:06:50.42,英文,,0,0,0,,And this is just the weird order in which you write it.
Dialogue: 0,2:06:50.42,2:06:56.12,英文,,0,0,0,,You write the output format, the name of the function, and then the inputs, if any, inside of parentheses.
Dialogue: 0,2:06:56.12,2:06:57.80,英文,,0,0,0,,And now I can implement get size.
Dialogue: 0,2:06:57.80,2:07:03.19,英文,,0,0,0,,But I've already implemented get size, or at least now, at this point in the story, I at least know concretely what to do.
Dialogue: 0,2:07:03.19,2:07:13.31,英文,,0,0,0,,And I could figure out, eventually, with some trial and error, perhaps, all right, if I declare a variable and I do the following n equals get int, prompting the user for size and.
Dialogue: 0,2:07:13.31,2:07:16.61,英文,,0,0,0,,I keep doing that while n is less than 1.
Dialogue: 0,2:07:16.61,2:07:27.54,英文,,0,0,0,,Once that block of code is done, here is a new keyword in C where you can return that value n. So I keep referring to these values that some functions return as return values.
Dialogue: 0,2:07:27.54,2:07:35.32,英文,,0,0,0,,In C, there's literally a keyword called return that will hand back to any function that uses that function
Dialogue: 0,2:07:35.32,2:07:37.10,英文,,0,0,0,,The value in question.
Dialogue: 0,2:07:37.10,2:07:47.27,英文,,0,0,0,,So in a nutshell, between lines 15 and 21 now, here is some code identical to our solution earlier that gets a value n from the user that is positive.
Dialogue: 0,2:07:47.27,2:07:48.71,英文,,0,0,0,,It's 1 or 2 or higher.
Dialogue: 0,2:07:48.71,2:07:51.46,英文,,0,0,0,,It's not 0 or it's not less than 1.
Dialogue: 0,2:07:51.46,2:07:54.75,英文,,0,0,0,,And as soon as we've got that value, we hand it back.
Dialogue: 0,2:07:54.75,2:07:59.13,英文,,0,0,0,,As a return value, notice how I'm using this function on line 7.
Dialogue: 0,2:07:59.13,2:08:10.34,英文,,0,0,0,,Just like with get int, just like with get string, I'm calling the function, nothing in the parentheses in this case, but then I'm using the assignment operator to copy whatever its return value
Dialogue: 0,2:08:10.34,2:08:19.34,英文,,0,0,0,,is into my variable n. And so now I have a function that didn't used to exist called get size that gets me a positive integer no matter what.
Dialogue: 0,2:08:19.34,2:08:21.60,英文,,0,0,0,,And now for the grid, how do I do this?
Dialogue: 0,2:08:21.60,2:08:27.20,英文,,0,0,0,,How do I invent a function called print grid that takes a single argument, a number, and prints a grid of that size?
Dialogue: 0,2:08:27.20,2:08:29.22,英文,,0,0,0,,Well, let's go down here.
Dialogue: 0,2:08:29.22,2:08:32.21,英文,,0,0,0,,I'm going to write the name of this function, print grid.
Dialogue: 0,2:08:32.21,2:08:33.51,英文,,0,0,0,,This function just needs to print.
Dialogue: 0,2:08:33.51,2:08:35.61,英文,,0,0,0,,It has a side effect, as we keep saying.
Dialogue: 0,2:08:35.61,2:08:38.27,英文,,0,0,0,,So I'm just going to say it has no return value.
Dialogue: 0,2:08:38.27,2:08:39.05,英文,,0,0,0,,It's just void.
Dialogue: 0,2:08:39.05,2:08:40.85,英文,,0,0,0,,It doesn't have an output per se.
Dialogue: 0,2:08:40.85,2:08:42.86,英文,,0,0,0,,It's just an aesthetic side effect.
Dialogue: 0,2:08:42.86,2:08:44.68,英文,,0,0,0,,But it does take in an argument.
Dialogue: 0,2:08:44.68,2:08:46.08,英文,,0,0,0,,An argument is an input.
Dialogue: 0,2:08:46.08,2:08:52.34,英文,,0,0,0,,And the syntax for this in C is to name the type of the input it takes and the name of the variable.
Dialogue: 0,2:08:52.34,2:08:53.91,英文,,0,0,0,,And I could call this anything I want.
Dialogue: 0,2:08:53.91,2:08:54.95,英文,,0,0,0,,I'll call it size.
Dialogue: 0,2:08:54.95,2:09:01.23,英文,,0,0,0,,I could call it n. And it's OK to use the same variable in different functions, but I'll call it size just to be distinct.
Dialogue: 0,2:09:01.23,2:09:05.59,英文,,0,0,0,,And then in this function, I'm just going to copy from memory the same code as before.
Dialogue: 0,2:09:05.59,2:09:12.03,英文,,0,0,0,,For int i gets 0, i less than size instead of 3, i plus plus.
Dialogue: 0,2:09:12.03,2:09:18.84,英文,,0,0,0,,Inside of this, for int j gets 0, j is less than size j plus plus.
Dialogue: 0,2:09:18.84,2:09:23.70,英文,,0,0,0,,And inside of that, print out with printf a single hash.
Dialogue: 0,2:09:23.70,2:09:27.94,英文,,0,0,0,,Print out after that loop a single new line.
Dialogue: 0,2:09:27.94,2:09:28.80,英文,,0,0,0,,And that's it.
Dialogue: 0,2:09:28.80,2:09:30.42,英文,,0,0,0,,Now, I did this fast, admittedly.
Dialogue: 0,2:09:30.42,2:09:33.04,英文,,0,0,0,,But it's the same code that I wrote earlier.
Dialogue: 0,2:09:33.04,2:09:39.41,英文,,0,0,0,,But now, just like I did with Scratch, let me just arbitrarily hit Enter a bunch of times to move the code out of sight, out of mind.
Dialogue: 0,2:09:39.41,2:09:40.91,英文,,0,0,0,,Now I have abstractions.
Dialogue: 0,2:09:40.91,2:09:46.93,英文,,0,0,0,,I have puzzle pieces that now exist called get size and print grid, syntax for which it takes some getting used to.
Dialogue: 0,2:09:46.93,2:09:50.74,英文,,0,0,0,,But they now just exist, except I do need to do one thing.
Dialogue: 0,2:09:50.74,2:09:59.48,英文,,0,0,0,,Because C is a little naive, if I try to do make Mario now and hit Enter, implicit declaration of function getSize is invalid.
Dialogue: 0,2:09:59.48,2:10:03.46,英文,,0,0,0,,And we've seen that before, when I hadn't included a file, right?
Dialogue: 0,2:10:03.46,2:10:06.82,英文,,0,0,0,,When I hadn't included CS50 library, getInt didn't work.
Dialogue: 0,2:10:06.82,2:10:09.12,英文,,0,0,0,,But that's not the issue here, because this is not from a library.
Dialogue: 0,2:10:09.12,2:10:10.50,英文,,0,0,0,,I just invented this.
Dialogue: 0,2:10:10.50,2:10:12.62,英文,,0,0,0,,C kind of takes you literally.
Dialogue: 0,2:10:12.62,2:10:19.14,英文,,0,0,0,,And if you define these functions at the bottom of your file, they don't exist on line 7 or 10.
Dialogue: 0,2:10:19.14,2:10:20.60,英文,,0,0,0,,So I could do this.
Dialogue: 0,2:10:20.60,2:10:21.44,英文,,0,0,0,,I could, all right, fine.
Dialogue: 0,2:10:21.44,2:10:26.54,英文,,0,0,0,,Well, let me just highlight all of this, cut to my clipboard, and paste it up here.
Dialogue: 0,2:10:26.54,2:10:27.54,英文,,0,0,0,,This would solve the problem.
Dialogue: 0,2:10:27.54,2:10:30.39,英文,,0,0,0,,I could just move all of those functions at the top of my file.
Dialogue: 0,2:10:30.39,2:10:33.29,英文,,0,0,0,,That's kind of annoying, because now main is at the bottom of the file.
Dialogue: 0,2:10:33.29,2:10:34.71,英文,,0,0,0,,It's going to take longer to find it.
Dialogue: 0,2:10:34.71,2:10:36.63,英文,,0,0,0,,That's not a clean solution.
Dialogue: 0,2:10:36.63,2:10:39.30,英文,,0,0,0,,So let me put it back where it was at the bottom.
Dialogue: 0,2:10:39.30,2:10:40.76,英文,,0,0,0,,And let me do this.
Dialogue: 0,2:10:40.76,2:10:46.32,英文,,0,0,0,,This is the only time in CS50 and really in C programming where copy-paste is reasonable.
Dialogue: 0,2:10:46.32,2:11:01.12,英文,,0,0,0,,If you copy and paste the first line of code from each function and then end it with a semicolon, you can tease the compiler by giving it just enough of a hint at the top of the file that, OK, these functions don't exist till down later.
Dialogue: 0,2:11:01.12,2:11:03.36,英文,,0,0,0,,But here's a hint that they will exist.
Dialogue: 0,2:11:03.36,2:11:07.81,英文,,0,0,0,,This is how you can convince the compiler to trust you.
Dialogue: 0,2:11:07.81,2:11:12.03,英文,,0,0,0,,So those other functions can still be lower in the file, below main.
Dialogue: 0,2:11:12.03,2:11:15.50,英文,,0,0,0,,But now when I do make Mario, oh, dammit.
Dialogue: 0,2:11:15.50,2:11:17.30,英文,,0,0,0,,Oh, I said print instead of printf.
Dialogue: 0,2:11:17.30,2:11:19.49,英文,,0,0,0,,That's my bad.
Dialogue: 0,2:11:19.49,2:11:27.80,英文,,0,0,0,,Print f. So if I do make mario ./mario, now I can type in 3, and we're back in business.
Dialogue: 0,2:11:27.80,2:11:32.96,英文,,0,0,0,,Now, this was a very heavy-handed way and long way to get to a much more complicated solution.
Dialogue: 0,2:11:32.96,2:11:35.24,英文,,0,0,0,,But this solution, in some sense, is better designed.
Dialogue: 0,2:11:35.24,2:11:35.86,英文,,0,0,0,,Why?
Dialogue: 0,2:11:35.86,2:11:38.10,英文,,0,0,0,,Because now, especially without the comments,
Dialogue: 0,2:11:38.10,2:11:40.09,英文,,0,0,0,,I mean, look how short my code is.
Dialogue: 0,2:11:40.09,2:11:42.43,英文,,0,0,0,,My main function is literally two lines of code.
Dialogue: 0,2:11:42.43,2:11:43.03,英文,,0,0,0,,Why?
Dialogue: 0,2:11:43.03,2:11:46.31,英文,,0,0,0,,Well, I kind of factored out the juicy stuff into its own functions.
Dialogue: 0,2:11:46.31,2:12:00.48,英文,,0,0,0,,And now, especially if I'm working with colleagues or others, you could imagine splitting up large programs into smaller parts, having different people implement different parts, so long as you all agree in advance on what those inputs and those outputs actually are.
Dialogue: 0,2:12:00.48,2:12:04.36,英文,,0,0,0,,All right, so let's now consider what computers can do well and not so well.
Dialogue: 0,2:12:04.36,2:12:14.04,英文,,0,0,0,,C, indeed, supports a whole bunch of operators, mathematically, by which we can do addition and subtraction, multiplication, division, and even calculate the remainder when you divide one number by another.
Dialogue: 0,2:12:14.04,2:12:19.06,英文,,0,0,0,,In fact, why don't we go ahead and use these in a very simple program and make our very own calculator.
Dialogue: 0,2:12:19.06,2:12:21.50,英文,,0,0,0,,So let me go over here to VS Code.
Dialogue: 0,2:12:21.50,2:12:25.29,英文,,0,0,0,,Let me go ahead and create a new file called calculator.c.
Dialogue: 0,2:12:25.29,2:12:28.69,英文,,0,0,0,,And in this file, let's go ahead and first include a couple of now
Dialogue: 0,2:12:28.69,2:12:33.83,英文,,0,0,0,,Familiar header files, cs50.h as well as standardio.h.
Dialogue: 0,2:12:33.83,2:12:37.71,英文,,0,0,0,,Let's go ahead then and declare main with int main void.
Dialogue: 0,2:12:37.71,2:12:40.12,英文,,0,0,0,,And then inside of main, let's do something relatively simple.
Dialogue: 0,2:12:40.12,2:12:50.12,英文,,0,0,0,,Let's declare an int and call it x and set it equal to whatever the return value is of get int, prompting the user for a value for x. Let's then give ourselves a second variable.
Dialogue: 0,2:12:50.12,2:12:51.63,英文,,0,0,0,,We'll call it, say, y.
Dialogue: 0,2:12:51.63,2:13:05.13,英文,,0,0,0,,Set that equal to the return value of another call to get int, prompting the user this time for that value y. And then let's very simply go ahead at the very end and just print out, say, the sum of x plus y, a super simple calculator.
Dialogue: 0,2:13:05.13,2:13:10.99,英文,,0,0,0,,So I'll use printf, quote unquote, percent i for integer, backslash n to give me the new line.
Dialogue: 0,2:13:10.99,2:13:14.75,英文,,0,0,0,,Then I'm going to go ahead and do x plus y to indeed print out the sum.
Dialogue: 0,2:13:14.75,2:13:16.83,英文,,0,0,0,,Let me go down to my terminal window now.
Dialogue: 0,2:13:16.83,2:13:20.44,英文,,0,0,0,,Let me do make calculator in order to compile the code.
Dialogue: 0,2:13:20.44,2:13:22.18,英文,,0,0,0,,No error messages, so that's good.
Dialogue: 0,2:13:22.18,2:13:23.86,英文,,0,0,0,,Let me do ./calculator.
Dialogue: 0,2:13:23.86,2:13:28.52,英文,,0,0,0,,And let's do something like 2 plus 2, which, of course, should equal 4.
Dialogue: 0,2:13:28.52,2:13:29.50,英文,,0,0,0,,And it does.
Dialogue: 0,2:13:29.50,2:13:34.68,英文,,0,0,0,,But it turns out that sometimes there are going to be limitations that we bump up against.
Dialogue: 0,2:13:34.68,2:13:36.51,英文,,0,0,0,,And let me get a little more ambitious here.
Dialogue: 0,2:13:36.51,2:13:37.97,英文,,0,0,0,,Let me clear my terminal window.
Dialogue: 0,2:13:37.97,2:13:40.03,英文,,0,0,0,,And let me go ahead and rerun calculator again.
Dialogue: 0,2:13:40.03,2:13:44.53,英文,,0,0,0,,And this time, let's type in 0 2
Dialogue: 0,2:13:44.53,2:13:52.82,英文,,0,0,0,,Billion for x. And let's type in the same for y. And of course, now the answer of 2 billion plus 2 billion should, of course, be 4 billion.
Dialogue: 0,2:13:52.82,2:13:53.98,英文,,0,0,0,,And yet, it's not.
Dialogue: 0,2:13:53.98,2:14:02.09,英文,,0,0,0,,So curiously, we see, of all things, a negative number here, which suggests that somehow the plus operator doesn't quite work as well as we might like.
Dialogue: 0,2:14:02.09,2:14:04.25,英文,,0,0,0,,Now, why might this actually be?
Dialogue: 0,2:14:04.25,2:14:08.83,英文,,0,0,0,,Well, it turns out that inside of your computer is, of course, memory or RAM, Random Access Memory.
Dialogue: 0,2:14:08.83,2:14:13.66,英文,,0,0,0,,And depending on the size of your computer and the type of computer, it might very well look a little something like this, a little
Dialogue: 0,2:14:13.66,2:14:21.74,英文,,0,0,0,,something like this a little circuit board with these black little modules on it that actually contain all of the bytes of your computer's memory.
Dialogue: 0,2:14:21.74,2:14:32.78,英文,,0,0,0,,Unfortunately, you and I only have a finite amount of this memory inside of our computers, which means no matter how high we want to count, there's ultimately going to be a limitation on how high we can count because we only have a finite amount of memory.
Dialogue: 0,2:14:32.78,2:14:35.83,英文,,0,0,0,,We don't have an infinite number of zeros and ones to play with.
Dialogue: 0,2:14:35.83,2:14:38.83,英文,,0,0,0,,We have to actually be bounded ultimately.
Dialogue: 0,2:14:38.83,2:14:40.17,英文,,0,0,0,,So what's the implication of this?
Dialogue: 0,2:14:40.17,2:14:48.27,英文,,0,0,0,,Well, it turns out that computers typically use as many as 32 bits, zeros or ones, to represent something like an integer or in C, an int.
Dialogue: 0,2:14:48.27,2:14:55.53,英文,,0,0,0,,So for instance, the smallest number we could represent using 32 bits, of course, would be 0.
Dialogue: 0,2:14:55.53,2:14:57.17,英文,,0,0,0,,32 zeros like this here.
Dialogue: 0,2:14:57.17,2:15:07.19,英文,,0,0,0,,And the biggest number we could represent is by changing all of those zeros to ones, which in this case will ideally give us a number that equals roughly 4 billion in total.
Dialogue: 0,2:15:07.19,2:15:17.34,英文,,0,0,0,,It's actually 4,294,967,295 maximally if you set all 32 of those bits to ones and then do out the actual math.
Dialogue: 0,2:15:17.34,2:15:24.76,英文,,0,0,0,,The catch, though, is that we humans and computers in general also sometimes want to and need to be able to represent negative numbers.
Dialogue: 0,2:15:24.76,2:15:33.39,英文,,0,0,0,,So if you want to represent negative numbers as well as positive numbers in 0, you can't really just start counting at 0 and go all the way up to roughly 4 billion.
Dialogue: 0,2:15:33.39,2:15:42.00,英文,,0,0,0,,You've got to kind of split the difference and maybe allocate half of those patterns of 0's and 1's to negative numbers and the other half roughly to positive numbers.
Dialogue: 0,2:15:42.00,2:15:52.50,英文,,0,0,0,,So in fact, in practice, when you're using even as many as 32 bits, the highest most computers could count, certainly in a program like this in C using an int, would be roughly 2 billion.
Dialogue: 0,2:15:52.50,2:15:57.35,英文,,0,0,0,,That is 2 billion, 147,483,647.
Dialogue: 0,2:15:57.35,2:16:06.73,英文,,0,0,0,,But the flip side of that is that we could also now, using different patterns of bits, represent negative numbers as low as negative 2 billion, give or take.
Dialogue: 0,2:16:06.73,2:16:16.42,英文,,0,0,0,,But the implication then, of course, is that if we only have a finite number of bits and can only count so high, at some point we're going to run out of bits, so to speak.
Dialogue: 0,2:16:16.42,2:16:21.83,英文,,0,0,0,,In other words, we encounter what's generally known as integer overflow, where you want to use more
Dialogue: 0,2:16:21.83,2:16:26.81,英文,,0,0,0,,Then you have available, and as a result, you sort of overflow the available space.
Dialogue: 0,2:16:26.81,2:16:28.47,英文,,0,0,0,,What does this mean, in fact, in real terms?
Dialogue: 0,2:16:28.47,2:16:37.21,英文,,0,0,0,,Well, let's suppose that you only have three bits, but I'm going to gray out a fourth bit just to convey where we'd like to put an additional bit ultimately.
Dialogue: 0,2:16:37.21,2:16:41.60,英文,,0,0,0,,If this, of course, is 0 per week 0's discussion, this is 1.
Dialogue: 0,2:16:41.60,2:16:45.50,英文,,0,0,0,,2, 3, 4, 5, 6, 7.
Dialogue: 0,2:16:45.50,2:16:56.36,英文,,0,0,0,,Now ideally in binary, if you want to add one more to this value 7, you're going to have to carry the 1 mathematically, and that would ideally give you 1, 0, 0, 0.2, 3, 4, 5, 6, 7.
Dialogue: 0,2:16:56.36,2:17:10.59,英文,,0,0,0,,But if you don't have four bits and your computer's only sophisticated enough to have three bits, not even 32, but three, the implication is that you're effectively representing not 1, 0, 0, 0, but rather 0, 0, 0.
Dialogue: 0,2:17:10.59,2:17:15.19,英文,,0,0,0,,There's just no room to store that fourth bit that I've grayed out here.
Dialogue: 0,2:17:15.19,2:17:17.95,英文,,0,0,0,,Which is to say that your integer might overflow.
Dialogue: 0,2:17:17.95,2:17:23.07,英文,,0,0,0,,And as soon as you get to 7, the next number, once you add 1, is actually going to be 0.
Dialogue: 0,2:17:23.07,2:17:27.23,英文,,0,0,0,,Or worse, as we've seen here in my code, a negative value instead.
Dialogue: 0,2:17:27.23,2:17:30.19,英文,,0,0,0,,So what could we do to perhaps address this kind of concern?
Dialogue: 0,2:17:30.19,2:17:32.51,英文,,0,0,0,,Well, C does not have just integers or ints.
Dialogue: 0,2:17:32.51,2:17:38.51,英文,,0,0,0,,It also has longs, which, as the name suggests, are just longer integers, which means they have More bits available to them.
Dialogue: 0,2:17:38.51,2:17:40.04,英文,,0,0,0,,So let me go back into my code here.
Dialogue: 0,2:17:40.04,2:17:41.56,英文,,0,0,0,,I'll clear the terminal window.
Dialogue: 0,2:17:41.56,2:17:47.06,英文,,0,0,0,,And let me go ahead and change my integers to literally long here, long here.
Dialogue: 0,2:17:47.06,2:17:53.36,英文,,0,0,0,,I'm going to have to change my function in CS50's library to be not get int, but get long.
Dialogue: 0,2:17:53.36,2:17:55.76,英文,,0,0,0,,And that's indeed another function we provide in the library.
Dialogue: 0,2:17:55.76,2:17:57.84,英文,,0,0,0,,Let me change this get int to get long as well.
Dialogue: 0,2:17:57.84,2:17:59.32,英文,,0,0,0,,I'll keep my variable names the same.
Dialogue: 0,2:17:59.32,2:18:01.51,英文,,0,0,0,,But I do need to make one other change.
Dialogue: 0,2:18:01.51,2:18:04.35,英文,,0,0,0,,It turns out that printf supports other functions.
Dialogue: 0,2:18:04.35,2:18:16.55,英文,,0,0,0,,Format code, so not just percent i for integers or percent s for strings, but also, for instance, percent li for a long integer, as well as percent f for floating point values with decimals.
Dialogue: 0,2:18:16.55,2:18:21.91,英文,,0,0,0,,So with that said, let's go ahead and change my printf line to be not percent i, but percent li.
Dialogue: 0,2:18:21.91,2:18:26.36,英文,,0,0,0,,Now let me go ahead and do make calculator again. Enter.
Dialogue: 0,2:18:26.36,2:18:29.18,英文,,0,0,0,,No apparent errors now. Dot slash calculator.
Dialogue: 0,2:18:29.18,2:18:31.89,英文,,0,0,0,,And 2 plus 2 still equals 4 as before.
Dialogue: 0,2:18:31.89,2:18:36.44,英文,,0,0,0,,But now if I do calculator again and let's do 2.
Dialogue: 0,2:18:36.44,2:18:48.49,英文,,0,0,0,,Billion again, as well as 2 billion for y. Previously, we overflowed the size of an integer and got some weird negative number because the pattern was misinterpreted, if you will, as a negative number instead.
Dialogue: 0,2:18:48.49,2:18:57.90,英文,,0,0,0,,But a long, instead of using 32 bits, conventionally uses 64 bits, which means we have more than enough spare bits to go when we add 2 billion plus 2 billion.
Dialogue: 0,2:18:57.90,2:19:05.06,英文,,0,0,0,,And now, in fact, we get the correct answer of 4 billion, which does fit inside of the size of a long.
Dialogue: 0,2:19:05.06,2:19:07.34,英文,,0,0,0,,Now, a long can count up quite high.
Dialogue: 0,2:19:07.34,2:19:12.51,英文,,0,0,0,,And in fact, it can count as high as this, 9 quintillion.
Dialogue: 0,2:19:12.51,2:19:14.87,英文,,0,0,0,,And so that will give us quite a bit more runway.
Dialogue: 0,2:19:14.87,2:19:18.33,英文,,0,0,0,,But of course, it too is ultimately going to be finite.
Dialogue: 0,2:19:18.33,2:19:23.19,英文,,0,0,0,,So if you have numbers that need to go bigger than that, you might still very well have a problem.
Dialogue: 0,2:19:23.19,2:19:25.29,英文,,0,0,0,,Now, there's another problem that we might run into as well.
Dialogue: 0,2:19:25.29,2:19:28.76,英文,,0,0,0,,And we can see it in the context of even this simple calculator.
Dialogue: 0,2:19:28.76,2:19:43.64,英文,,0,0,0,,Computers also suffer from, potentially, what's called truncation, where, especially when you're doing math involving floating point values, that is, numbers with decimals, you might accidentally, unknowingly truncate the value, that is, lose everything after the decimal point.
Dialogue: 0,2:19:43.64,2:19:45.55,英文,,0,0,0,,So in fact, let me go back to VS Code here.
Dialogue: 0,2:19:45.55,2:19:47.03,英文,,0,0,0,,I'll clear my terminal window.
Dialogue: 0,2:19:47.03,2:19:52.49,英文,,0,0,0,,And let's still use longs, but let's go ahead and use Division, instead of addition here.
Dialogue: 0,2:19:52.49,2:19:55.19,英文,,0,0,0,,So let me change this plus to a divide operator.
Dialogue: 0,2:19:55.19,2:19:59.19,英文,,0,0,0,,Let me go ahead and recompile the code down here with make calculator.
Dialogue: 0,2:19:59.19,2:20:01.27,英文,,0,0,0,,Let me go ahead and run ./calculator.
Dialogue: 0,2:20:01.27,2:20:08.54,英文,,0,0,0,,And let me go ahead and do something like 1 for x and 3 for y. And we'll see that, well, wait a minute.
Dialogue: 0,2:20:08.54,2:20:11.54,英文,,0,0,0,,1 divided by 3, I learned, should be 1 third.
Dialogue: 0,2:20:11.54,2:20:16.62,英文,,0,0,0,,But in a floating point value, that should be 0.0.
Dialogue: 0,2:20:16.62,2:20:21.75,英文,,0,0,0,,3, 3, 3, 3, 3, you know, maybe with a little line over it in grade school, but really an infinite number of 3's.
Dialogue: 0,2:20:21.75,2:20:30.25,英文,,0,0,0,,And yet we seem to have lost even one of those 3's after the decimal point, because the answer is coming back here as just 0.
Dialogue: 0,2:20:30.25,2:20:31.65,英文,,0,0,0,,So why might that be?
Dialogue: 0,2:20:31.65,2:20:37.74,英文,,0,0,0,,Well, if I know that two integers, when divided, one by the other, is supposed to give me a fraction, a fraction.
Dialogue: 0,2:20:37.74,2:20:46.44,英文,,0,0,0,,Floating point value with a decimal point, I can't continue to use integers or even, in this case, longs, which do not have support for decimal points.
Dialogue: 0,2:20:46.44,2:20:56.71,英文,,0,0,0,,So let me go ahead and change this format code here from %li to %f, which is, again, going to represent a floating point value instead of a long integer or even an integer.
Dialogue: 0,2:20:56.71,2:21:04.02,英文,,0,0,0,,And let me go ahead further and define Maybe a third variable, z, as a float itself.
Dialogue: 0,2:21:04.02,2:21:24.75,英文,,0,0,0,,So I'll give myself a variable z equals x divided by y. And now rather than print x divided by y, let's just go ahead and print z. So now I'm operating in a world of floating point values because I know proactively that a long or an int divided by another such value, if it's meant to have a fraction, needs to be stored in a floating point value, something with a decimal point.
Dialogue: 0,2:21:24.75,2:21:28.97,英文,,0,0,0,,Well, let me go down to my terminal window here and rerun make of calculator.
Dialogue: 0,2:21:28.97,2:21:29.95,英文,,0,0,0,,Seems to work OK.
Dialogue: 0,2:21:29.95,2:21:34.36,英文,,0,0,0,,Dot slash calculator, and let's do 1 divided by 3 again.
Dialogue: 0,2:21:34.36,2:21:37.02,英文,,0,0,0,,And still here, we see all 0's.
Dialogue: 0,2:21:37.02,2:21:38.46,英文,,0,0,0,,So we do at least see a decimal point.
Dialogue: 0,2:21:38.46,2:21:41.50,英文,,0,0,0,,So we've made some progress thanks to the percent f and the float.
Dialogue: 0,2:21:41.50,2:21:46.74,英文,,0,0,0,,But it seems that we've already truncated the value 1 divided by 3.
Dialogue: 0,2:21:46.74,2:21:48.48,英文,,0,0,0,,So how do we actually get around this issue?
Dialogue: 0,2:21:48.48,2:21:58.43,英文,,0,0,0,,Well, if you, the programmer, know that you're dealing in a world that's going to give you floating point values with decimal points, you might very well need to use what's called a feature known as typecasting.
Dialogue: 0,2:21:58.43,2:22:04.54,英文,,0,0,0,,That is, convert one data type to another by explicitly telling the compiler that you want to do so.
Dialogue: 0,2:22:04.54,2:22:05.36,英文,,0,0,0,,Now, how do I do this?
Dialogue: 0,2:22:05.36,2:22:07.16,英文,,0,0,0,,Well, let's go back to my code here.
Dialogue: 0,2:22:07.16,2:22:16.87,英文,,0,0,0,,And if the issue fundamentally is that C is still treating X and y as integers, or technically longs, with no decimal point.
Dialogue: 0,2:22:16.87,2:22:22.50,英文,,0,0,0,,And dividing one by the other, therefore, has no room, so to speak, for any numbers after a decimal point.
Dialogue: 0,2:22:22.50,2:22:24.88,英文,,0,0,0,,Why don't I proactively do this?
Dialogue: 0,2:22:24.88,2:22:31.71,英文,,0,0,0,,Let me, using a slightly new syntax with parentheses, specify that I want to convert x proactively
Dialogue: 0,2:22:31.71,2:22:40.07,英文,,0,0,0,,From a long to a float, let me specify proactively that I want to convert y from a long to a float as well.
Dialogue: 0,2:22:40.07,2:22:49.41,英文,,0,0,0,,And now let me go ahead and trust that in z should be the result of dividing not a long by a long or an int by an int, but rather a float by a float.
Dialogue: 0,2:22:49.41,2:22:52.69,英文,,0,0,0,,Let me clear my terminal window, run make calculator again.
Dialogue: 0,2:22:52.69,2:22:54.03,英文,,0,0,0,,Seems to work OK.
Dialogue: 0,2:22:54.03,2:23:00.89,英文,,0,0,0,,Dot slash calculator, and now 1, 3, and hopefully now we actually see
Dialogue: 0,2:23:00.89,2:23:05.38,英文,,0,0,0,,That my code has outputted 0.333333.
Dialogue: 0,2:23:05.38,2:23:12.00,英文,,0,0,0,,And I think if we kept showing more numbers after the decimal point, we'd theoretically see as many of those threes as we want.
Dialogue: 0,2:23:12.00,2:23:19.27,英文,,0,0,0,,There is still one more catch, and especially when we're manipulating numbers in this way in a computer using a finite amount of memory.
Dialogue: 0,2:23:19.27,2:23:27.28,英文,,0,0,0,,Another challenge we might run up against, besides integer overflow, besides truncation, is this known as floating point imprecision.
Dialogue: 0,2:23:27.28,2:23:36.32,英文,,0,0,0,,Just as we can't represent as big of an integer as we want using int or long alone, because there is going to be an upper bound, there's similarly going to be a boundary.
Dialogue: 0,2:23:36.32,2:23:39.43,英文,,0,0,0,,on just how precise our numbers can be.
Dialogue: 0,2:23:39.43,2:23:41.51,英文,,0,0,0,,And indeed, let's go back to VS Code here.
Dialogue: 0,2:23:41.51,2:23:43.49,英文,,0,0,0,,I'll clear my terminal window yet again.
Dialogue: 0,2:23:43.49,2:23:52.31,英文,,0,0,0,,And this time, let me use some slightly unlikely syntax to specify that I don't want to see the default number of numbers after the decimal point, which percent f gives us automatically.
Dialogue: 0,2:23:52.31,2:23:57.52,英文,,0,0,0,,Let's go ahead and show me 20 decimal point numbers after the decimal point.
Dialogue: 0,2:23:57.52,2:24:03.02,英文,,0,0,0,,And the weird syntax for this is to do not percent f, but percent period
Dialogue: 0,2:24:03.02,2:24:08.52,英文,,0,0,0,,20 to indicate to C that I want to see 20 digits, not the default after now the decimal point.
Dialogue: 0,2:24:08.52,2:24:10.57,英文,,0,0,0,,Let me rerun make calculator.
Dialogue: 0,2:24:10.57,2:24:12.55,英文,,0,0,0,,Let me do dot slash calculator again.
Dialogue: 0,2:24:12.55,2:24:13.77,英文,,0,0,0,,And let's do 1.
Dialogue: 0,2:24:13.77,2:24:15.11,英文,,0,0,0,,Let's do 3.
Dialogue: 0,2:24:15.11,2:24:17.59,英文,,0,0,0,,And now this is even weirder, right?
Dialogue: 0,2:24:17.59,2:24:21.57,英文,,0,0,0,,From grade school, you presumably learned that 1 divided by 3 is, of course, 1 third.
Dialogue: 0,2:24:21.57,2:24:26.96,英文,,0,0,0,,But that should be 0.33333 infinitely many times, or on paper,
Dialogue: 0,2:24:26.96,2:24:28.48,英文,,0,0,0,,Well, what's really happening under the hood?
Dialogue: 0,2:24:28.48,2:24:42.24,英文,,0,0,0,,with a little line over it. But the computer is doing some weird approximation here. It's a whole bunch of 3's and then 4326744079590.Well, what's really happening under the hood, well, again, is this issue of floating-point imprecision.
Dialogue: 0,2:24:42.24,2:24:51.43,英文,,0,0,0,,If you only have a finite number of bits and, in turn, a finite amount of memory, the computer can really only be so precise intuitively.
Dialogue: 0,2:24:51.43,2:24:57.17,英文,,0,0,0,,Equivalently, the computer has decided on some way of representing floating point values.
Dialogue: 0,2:24:57.17,2:25:07.18,英文,,0,0,0,,But the catch is, per grade school math, there's an infinite number of numbers out there and an infinite number of floating point values because you can keep adding more and more digits if you want.
Dialogue: 0,2:25:07.18,2:25:11.86,英文,,0,0,0,,So the computer, given the way it's implementing these floating point values, is essentially giving us
Dialogue: 0,2:25:11.86,2:25:14.68,英文,,0,0,0,,The closest approximation that it can.
Dialogue: 0,2:25:14.68,2:25:17.80,英文,,0,0,0,,Now, how can we go about improving the situation?
Dialogue: 0,2:25:17.80,2:25:19.20,英文,,0,0,0,,Well, there is one alternative.
Dialogue: 0,2:25:19.20,2:25:24.75,英文,,0,0,0,,Instead of using float, I can use something called a double, which as the name suggests, uses twice as many bits as a float.
Dialogue: 0,2:25:24.75,2:25:27.95,英文,,0,0,0,,So instead of 32, typically, it will use 64.
Dialogue: 0,2:25:27.95,2:25:31.59,英文,,0,0,0,,And that's just like the difference between a long and an int, which gave us more bits.
Dialogue: 0,2:25:31.59,2:25:34.61,英文,,0,0,0,,But in this case, this will be used for more precision.
Dialogue: 0,2:25:34.61,2:25:36.95,英文,,0,0,0,,Let's go ahead and cast x to a double.
Dialogue: 0,2:25:36.95,2:25:38.90,英文,,0,0,0,,Let's cast y to a double.
Dialogue: 0,2:25:38.90,2:25:45.34,英文,,0,0,0,,And now let's go ahead and using the same format code, %0.20f is still OK for doubles.
Dialogue: 0,2:25:45.34,2:25:47.16,英文,,0,0,0,,Let me do make calculator.
Dialogue: 0,2:25:47.16,2:25:49.00,英文,,0,0,0,,Let me do ./calculator.
Dialogue: 0,2:25:49.00,2:25:52.21,英文,,0,0,0,,And now let me do 1 divided by 3, and we still
Dialogue: 0,2:25:52.21,2:25:53.75,英文,,0,0,0,,We'll have some of that in precision.
Dialogue: 0,2:25:53.75,2:25:56.75,英文,,0,0,0,,And we'd see even more of it if we looked at more than just 20 digits.
Dialogue: 0,2:25:56.75,2:25:59.99,英文,,0,0,0,,But now we have more threes after the decimal point.
Dialogue: 0,2:25:59.99,2:26:02.51,英文,,0,0,0,,So it's at least more, more, more precise.
Dialogue: 0,2:26:02.51,2:26:06.69,英文,,0,0,0,,But it's not perfect, but it's at least more precise.
Dialogue: 0,2:26:06.69,2:26:18.92,英文,,0,0,0,,So these kinds of issues then are going to be necessary to keep in mind any time you do something numerically, scientifically, at least with a language like C, where you're going to bump up against these real-world limitations of hardware and, in turn, language.
Dialogue: 0,2:26:18.92,2:26:20.10,英文,,0,0,0,,Now, later in the semester,
Dialogue: 0,2:26:20.10,2:26:22.24,英文,,0,0,0,,We'll transition to a language called Python.
Dialogue: 0,2:26:22.24,2:26:29.49,英文,,0,0,0,,And that's actually going to solve at least one of these problems for us, but just automatically giving us more bits, so to speak, as we need them, at least for integers.
Dialogue: 0,2:26:29.49,2:26:33.13,英文,,0,0,0,,But even the issue of floating point and precision is going to remain.
Dialogue: 0,2:26:33.13,2:26:35.19,英文,,0,0,0,,Now, just how real world are these issues?
Dialogue: 0,2:26:35.19,2:26:45.18,英文,,0,0,0,,Well, back in the year 1999, we got a taste of this when the world realized in the years leading up to that date that it might not have been the best idea to implement computers
Dialogue: 0,2:26:45.18,2:27:01.73,英文,,0,0,0,,And software therein by storing years using just two digits, like instead of storing 1999 to represent the year 1999, a lot of computers, for reasons of space and cost, were in the habit of kind of cutting a corner and just using two digits to keep track of the year.
Dialogue: 0,2:27:01.73,2:27:17.16,英文,,0,0,0,,The problem with that is that if systems were not updated by the year 1999 to support the year 2000, 2001 and so forth, is that, just like before with integer overflow, some computers might add one to the year in their memory, 99.
Dialogue: 0,2:27:17.16,2:27:18.96,英文,,0,0,0,,It should be the year 2000.
Dialogue: 0,2:27:18.96,2:27:30.83,英文,,0,0,0,,But if they're only using two digits to represent years, they might mistake the year, as some systems may very well have, for the year 1900 instead, taking literally a big step backwards, if you will.
Dialogue: 0,2:27:30.83,2:27:37.37,英文,,0,0,0,,Now, you'd like to think that kind of issue is behind us, especially as we understand all the more about the limitations of code and computing.
Dialogue: 0,2:27:37.37,2:27:42.32,英文,,0,0,0,,But we're actually going to run up against this very same type of issue again in just a few years.
Dialogue: 0,2:27:42.32,2:27:47.95,英文,,0,0,0,,On January 19th in the year 2038, we will have run out of bits
Dialogue: 0,2:27:47.95,2:27:50.93,英文,,0,0,0,,In most computers right now, to keep track of time.
Dialogue: 0,2:27:50.93,2:27:58.95,英文,,0,0,0,,It turns out, years ago, humans decided to use a 32-bit integer to keep track of how many seconds had elapsed over time.
Dialogue: 0,2:27:58.95,2:28:06.86,英文,,0,0,0,,They chose a somewhat arbitrary date in the past, January 1, 1970, and they just started counting seconds from there on out.
Dialogue: 0,2:28:06.86,2:28:14.90,英文,,0,0,0,,And so if a computer stores some number of seconds, that tells the computer how many seconds have passed since that particular date, January 1, 1970.
Dialogue: 0,2:28:14.90,2:28:23.66,英文,,0,0,0,,Unfortunately, using a 32-bit integer, as we've seen, you can only count so high, at which point you overflow the size of that variable.
Dialogue: 0,2:28:23.66,2:28:42.55,英文,,0,0,0,,And so potentially, if we don't get ahead of this as humans, as a society, as computer scientists, on the date January 19, 2038, that bit might flip over, thereby overflowing the size of those integers, bringing us back computationally to December 13, 1901.
Dialogue: 0,2:28:42.55,2:28:48.78,英文,,0,0,0,,So this is to say now with all of this computational ability and code comes a responsibility to actually write correct code.
Dialogue: 0,2:28:48.78,2:28:50.56,英文,,0,0,0,,Next week, we'll peel back some of these layers.
Dialogue: 0,2:28:50.56,2:28:52.44,英文,,0,0,0,,But for now, this was week one.
Dialogue: 0,2:28:52.44,2:28:54.16,英文,,0,0,0,,And best of luck on problem set one.
Dialogue: 0,0:01:13.71,0:01:16.15,中文,,0,0,0,,好的，这是 CS50。
Dialogue: 0,0:01:16.15,0:01:20.85,中文,,0,0,0,,本周我们将继续编程，但使用的是不同的语言。
Dialogue: 0,0:01:20.85,0:01:25.16,中文,,0,0,0,,回想一下，上次我们学习了一种叫做 Scratch 的图形化编程语言。
Dialogue: 0,0:01:25.16,0:01:37.42,中文,,0,0,0,,我们之所以使用 Scratch，不仅因为它有趣且易于上手，还因为它允许我们探索许多编程概念，例如函数、条件语句、布尔表达式、循环、变量等等，
Dialogue: 0,0:01:37.42,0:01:52.79,中文,,0,0,0,,即使我们今天要学习的新语言 C 的语法看起来有点晦涩难懂，\N一开始可能会让你感到害怕，你也不太明白这些符号背后的含义，但请记住，这些概念最终都是相同的。
Dialogue: 0,0:01:52.79,0:02:02.34,中文,,0,0,0,,事实上，上周我们学习了一个看起来像这样的“Hello World”程序，而本周的程序看起来会更复杂一些。
Dialogue: 0,0:02:02.34,0:02:03.94,中文,,0,0,0,,它看起来会像这样。
Dialogue: 0,0:02:03.94,0:02:11.66,中文,,0,0,0,,现在即使你无法完全理解这段代码中各种符号的含义，但最终它会按照你的预期运行。
Dialogue: 0,0:02:11.66,0:02:15.36,中文,,0,0,0,,它会在屏幕上显示“Hello World”，就像我们在 Scratch 中做的那样。
Dialogue: 0,0:02:15.36,0:02:20.12,中文,,0,0,0,,首先让我们为这些符号定义一些术语。
Dialogue: 0,0:02:20.12,0:02:28.06,中文,,0,0,0,,我们将要看到的、将要写的，从今以后，我们将称之为源代码，由你们这些程序员编写的代码，从今以后就叫做源代码。
Dialogue: 0,0:02:28.06,0:02:32.52,中文,,0,0,0,,无论是 Scratch， C 语言，还是不久后我们会学到的 Python，
Dialogue: 0,0:02:32.52,0:02:37.51,中文,,0,0,0,,源代码都是指我们程序员最终写出来的代码。
Dialogue: 0,0:02:37.51,0:02:42.17,中文,,0,0,0,,当然，事实证明计算机并不理解源代码。
Dialogue: 0,0:02:42.17,0:02:47.17,中文,,0,0,0,,计算机并不理解 Scratch 中的拼图块，也不理解我们即将看到的 C 代码。
Dialogue: 0,0:02:47.17,0:02:50.77,中文,,0,0,0,,它们只理解这个，上周我们称它为什么？
Dialogue: 0,0:02:50.77,0:02:53.08,中文,,0,0,0,,没错，这就是二进制，0 和 1。
Dialogue: 0,0:02:53.08,0:02:56.48,中文,,0,0,0,,但实际上，它只是以二进制形式表示的信息。
Dialogue: 0,0:02:56.48,0:03:06.77,中文,,0,0,0,,事实上，现在有一个专业术语叫做“机器代码”，用来表示计算机不仅可以理解为字母、数字、颜色、图像等内容的 0 和 1 的模式，
Dialogue: 0,0:03:06.77,0:03:12.87,中文,,0,0,0,,而且还知道如何执行的 0 和 1 的模式，以此将其与“源代码”区分开来。
Dialogue: 0,0:03:12.87,0:03:18.93,中文,,0,0,0,,虽然我们人类编写的是源代码，但计算机最终只能理解机器代码。
Dialogue: 0,0:03:18.93,0:03:31.23,中文,,0,0,0,,即使我们不深入探讨具体的符号模式代表什么，你也会发现，在这种 0 和 1 的模式中，会有数字、 会有字母，但也会有指令。
Dialogue: 0,0:03:31.23,0:03:36.60,中文,,0,0,0,,因为实际上，计算机非常擅长做加法、减法、将数据移入和移出内存等操作。
Dialogue: 0,0:03:36.60,0:03:47.20,中文,,0,0,0,,可以这么说，Mac、PC 和世界上其他的计算机，都已经在社会层面上约定好了，当涉及到操作时，某些 0 和 1 的模式代表什么意思。
Dialogue: 0,0:03:47.20,0:03:49.50,中文,,0,0,0,,不仅仅是数据，还有指令。
Dialogue: 0,0:03:49.50,0:03:52.35,中文,,0,0,0,,但我们不会在这门课上过多关注这些模式。
Dialogue: 0,0:03:52.35,0:03:59.01,中文,,0,0,0,,我们将专注于更高层次的软件方面，只是假设我们需要以某种方式输出机器代码。
Dialogue: 0,0:03:59.01,0:04:07.10,中文,,0,0,0,,事实证明，我们要解决的这个问题，即从源代码到机器代码的过程，实际上符合我们上次讨论的范式。
Dialogue: 0,0:04:07.10,0:04:11.22,中文,,0,0,0,,但在这种情况下，输入将是一方面的源代码。
Dialogue: 0,0:04:11.22,0:04:15.60,中文,,0,0,0,,这是你我理想情况下要编写的代码，这样我们就不必写 0 和 1 了。
Dialogue: 0,0:04:15.60,0:04:21.87,中文,,0,0,0,,但我们需要以某种方式输出机器代码，因为这是你的 Mac、PC 和手机真正能够理解的语言。
Dialogue: 0,0:04:21.87,0:04:27.33,中文,,0,0,0,,事实证明，生活中有一些特殊的程序，它们的目的就是进行这种转换。
Dialogue: 0,0:04:27.33,0:04:32.46,中文,,0,0,0,,将你我编写的源代码转换为我们的手机和计算机能够理解的机器代码。
Dialogue: 0,0:04:32.46,0:04:35.98,中文,,0,0,0,,这种类型的程序叫做编译器。
Dialogue: 0,0:04:35.98,0:04:39.40,中文,,0,0,0,,今天我们将向你介绍另一款软件。
Dialogue: 0,0:04:39.40,0:04:45.81,中文,,0,0,0,,这类软件有很多种。 我们将在这里使用一种流行的软件，它可以将 C 语言的源代码转换为机器代码。
Dialogue: 0,0:04:45.81,0:04:50.65,中文,,0,0,0,,用 0 和 1 表示的机器码。 在 Scratch 中，你不需要这样做。
Dialogue: 0,0:04:50.65,0:05:00.76,中文,,0,0,0,,在 Scratch 的世界里，你只需点击绿旗，因为本质上，\N麻省理工学院已经帮你完成了所有繁重的工作，他们已经找到了如何将这些图形化的拼图块转换为底层的机器码。
Dialogue: 0,0:05:00.76,0:05:06.56,中文,,0,0,0,,但现在，从今天开始，当我们开始正式学习编程和计算机科学时，这种能力就交到你手上了。
Dialogue: 0,0:05:06.56,0:05:09.57,中文,,0,0,0,,现在由你来完成这种转换。
Dialogue: 0,0:05:09.57,0:05:21.78,中文,,0,0,0,,值得庆幸的是，编译器的存在意味着你我今天不必像我们的前辈那样用机器码编程，无论是虚拟的还是用纸带打孔。
Dialogue: 0,0:05:21.78,0:05:25.99,中文,,0,0,0,,你我只需专注于键盘。
Dialogue: 0,0:05:25.99,0:05:29.51,中文,,0,0,0,,但今天的问题不仅仅是写代码。
Dialogue: 0,0:05:29.51,0:05:32.83,中文,,0,0,0,,从今天开始，最终的问题是如何写出好的代码。
Dialogue: 0,0:05:32.83,0:05:35.07,中文,,0,0,0,,这不是一蹴而就的事情。
Dialogue: 0,0:05:35.07,0:05:41.20,中文,,0,0,0,,这需要时间。 这需要练习，就像写任何科目的文章都需要时间和练习一样。
Dialogue: 0,0:05:41.20,0:05:49.42,中文,,0,0,0,,但在像 CS50 这样的编程课上，我们通常会从这三个方面来评估代码的质量。
Dialogue: 0,0:05:49.42,0:05:51.04,中文,,0,0,0,,首先，它是否正确？
Dialogue: 0,0:05:51.04,0:05:52.92,中文,,0,0,0,,这段代码是否达到了预期的效果？
Dialogue: 0,0:05:52.92,0:05:55.61,中文,,0,0,0,,毕竟，如果它没有达到预期效果，那么一开始写它还有什么意义呢？
Dialogue: 0,0:05:55.61,0:05:59.49,中文,,0,0,0,,你写的代码必须是正确的，这是不言而喻的。
Dialogue: 0,0:05:59.49,0:06:00.87,中文,,0,0,0,,但这并不总是容易做到的。
Dialogue: 0,0:06:00.87,0:06:07.04,中文,,0,0,0,,同样，每当你的 Mac、PC 或手机崩溃时，都是因为某个地方的程序员写了有 bug 的代码。
Dialogue: 0,0:06:07.04,0:06:10.20,中文,,0,0,0,,但代码的正确性将是首要目标。
Dialogue: 0,0:06:10.20,0:06:13.92,中文,,0,0,0,,但接下来我们会看到一个更主观的的目标，一个设计上的问题。
Dialogue: 0,0:06:13.92,0:06:24.25,中文,,0,0,0,,上周我们已经看到了一点，我建议我们可以把 Scratch 程序设计得更好，比如用循环，而不是一遍又一遍地复制粘贴相同的代码块。
Dialogue: 0,0:06:24.25,0:06:26.09,中文,,0,0,0,,所以设计更加主观。
Dialogue: 0,0:06:26.09,0:06:40.30,中文,,0,0,0,,这更像是一种需要学习的艺术，两个人最终可能会在哪个版本的程序设计得更好上产生分歧，\N但在接下来的几周里，我们会为你提供构建块和原则，这样你就能更好地判断自己的代码是否设计良好。
Dialogue: 0,0:06:40.30,0:06:41.48,中文,,0,0,0,,为什么这很有价值？
Dialogue: 0,0:06:41.48,0:06:49.27,中文,,0,0,0,,因为你的代码设计得越好，通常运行速度就越快，如果你在现实世界中与其他人合作，代码就越容易被你和同事维护。
Dialogue: 0,0:06:49.27,0:06:50.81,中文,,0,0,0,,所以好的设计是件好事。
Dialogue: 0,0:06:50.81,0:06:54.67,中文,,0,0,0,,就像一篇典型的英语文章一样，它可以帮助你表达你的想法。
Dialogue: 0,0:06:54.67,0:06:57.61,中文,,0,0,0,,最后，我们将在本周接下来的时间里讨论风格。
Dialogue: 0,0:06:57.61,0:06:59.59,中文,,0,0,0,,这实际上就是你代码的美观程度。
Dialogue: 0,0:06:59.59,0:07:07.31,中文,,0,0,0,,事实证明，计算机通常并不关心你的代码有多糟糕，在代码的世界里，
Dialogue: 0,0:07:07.31,0:07:10.74,中文,,0,0,0,,你不需要以一种漂亮的方式缩进代码。
Dialogue: 0,0:07:10.74,0:07:13.24,中文,,0,0,0,,你也不需要像写文章那样对代码进行分页。
Dialogue: 0,0:07:13.24,0:07:17.86,中文,,0,0,0,,计算机通常并不关心这些，但人关心。 助教关心。
Dialogue: 0,0:07:17.86,0:07:21.65,中文,,0,0,0,,第二天，当你试图理解你的代码时，你也会关心。
Dialogue: 0,0:07:21.65,0:07:25.63,中文,,0,0,0,,最后，我们将关注风格，也就是你正在编写的代码的美观程度。
Dialogue: 0,0:07:25.63,0:07:27.35,中文,,0,0,0,,那么我们要在哪里写代码呢？
Dialogue: 0,0:07:27.35,0:07:28.99,中文,,0,0,0,,我们要在哪里编译代码呢？
Dialogue: 0,0:07:28.99,0:07:39.27,中文,,0,0,0,,在本课程中，不仅是 C 语言，还包括我们这学期晚些时候会用到的其他语言，\N我们将使用一个免费的文本编辑器，它叫做 Visual Studio Code，也称为 VS Code。
Dialogue: 0,0:07:39.27,0:07:46.08,中文,,0,0,0,,它现在非常流行，不仅可以用于 C 语言，还可以用于 C++、Python、Java 以及许多其他语言。
Dialogue: 0,0:07:46.08,0:07:52.32,中文,,0,0,0,,它是一个文本编辑器，因为它可以让你编辑文本。 而代码就是文本。
Dialogue: 0,0:07:52.32,0:07:55.42,中文,,0,0,0,,严格来说，你可以用纸笔写代码。
Dialogue: 0,0:07:55.42,0:07:59.84,中文,,0,0,0,,事实上，在高中，如果你上过相关课程，你可能已经做过一两次课堂练习了。
Dialogue: 0,0:07:59.84,0:08:02.66,中文,,0,0,0,,当然，你不能在纸上运行它，但你肯定可以写。
Dialogue: 0,0:08:02.66,0:08:07.43,中文,,0,0,0,,你可以使用 Microsoft Word、Notepad.exe 或 Mac 上的 TextEdit。
Dialogue: 0,0:08:07.43,0:08:15.27,中文,,0,0,0,,但是，这些程序都不是为以最佳方式格式化代码而设计的，它们也不能编译和运行代码。
Dialogue: 0,0:08:15.27,0:08:19.61,中文,,0,0,0,,VS Code 是一个工具，你可以用它完成所有这些工作，甚至更多。
Dialogue: 0,0:08:19.61,0:08:22.54,中文,,0,0,0,,编写代码、编译代码、运行代码。
Dialogue: 0,0:08:22.54,0:08:34.90,中文,,0,0,0,,为了避免大家在课程开始时就因为在 Mac 或 PC 上安装软件而遇到技术支持难题，我们将使用 code.cs50.io 上的云端 VS Code。
Dialogue: 0,0:08:34.90,0:08:36.56,中文,,0,0,0,,它和本地版本完全一样。
Dialogue: 0,0:08:36.56,0:08:46.20,中文,,0,0,0,,我们的目标是在学期结束前，让你从云端环境迁移到自己的 Mac 和 PC 上，这样即使 CS50 是你唯一学习的计算机课程，
Dialogue: 0,0:08:46.20,0:08:55.87,中文,,0,0,0,,你也完全有能力在课程结束后继续编写代码，使用的不是 CS50 特定的工具，而是一个行业标准，至少在一段时间内是这样。
Dialogue: 0,0:08:55.87,0:09:01.16,中文,,0,0,0,,那么，无论是 Mac、PC 还是浏览器上的 VS Code，它看起来是什么样的呢？
Dialogue: 0,0:09:01.16,0:09:05.52,中文,,0,0,0,,它看起来像这样。 屏幕上有几个不同的区域。
Dialogue: 0,0:09:05.52,0:09:12.56,中文,,0,0,0,,这里展示的就是我一直提到的最简单的 C 语言程序。那么屏幕上的这些不同区域是什么呢？
Dialogue: 0,0:09:12.56,0:09:15.38,中文,,0,0,0,,这里主要有四个区域。
Dialogue: 0,0:09:15.38,0:09:21.16,中文,,0,0,0,,首先，上面高亮显示的是一个或多个选项卡，你可以在那里实际编写代码。
Dialogue: 0,0:09:21.16,0:09:25.11,中文,,0,0,0,,就像在 Google Docs 或 Microsoft Word 中一样，你可以打开包含文件的选项卡。
Dialogue: 0,0:09:25.11,0:09:30.89,中文,,0,0,0,,类似地，在 VS Code 中，或者实际上是任何编程环境中，现在通常都有某种形式的选项卡。
Dialogue: 0,0:09:30.89,0:09:34.63,中文,,0,0,0,,这似乎是一个包含名为 hello.c 文件的选项卡。
Dialogue: 0,0:09:34.63,0:09:38.12,中文,,0,0,0,,这将是我们稍后要编写的第一个文件。
Dialogue: 0,0:09:38.12,0:09:41.44,中文,,0,0,0,,不过，下面将是一个许多人可能不熟悉的界面
Dialogue: 0,0:09:41.44,0:09:44.34,中文,,0,0,0,,不，这就是所谓的终端窗口。
Dialogue: 0,0:09:44.34,0:09:49.88,中文,,0,0,0,,终端窗口提供通常所说的命令行界面，即 CLI。
Dialogue: 0,0:09:49.88,0:09:53.78,中文,,0,0,0,,这与图形用户界面（GUI）形成对比。
Dialogue: 0,0:09:53.78,0:09:57.74,中文,,0,0,0,,我们每天都在手机、电脑上使用 GUI。
Dialogue: 0,0:09:57.74,0:10:01.49,中文,,0,0,0,,GUI 就是图形化的，比如菜单、按钮和图标。
Dialogue: 0,0:10:01.49,0:10:06.45,中文,,0,0,0,,你通常会用手指、触控板、鼠标或类似的东西与其互动。
Dialogue: 0,0:10:06.45,0:10:20.65,中文,,0,0,0,,但事实证明，许多程序员，他们说的是大多数程序员，至少随着时间的推移，\N开始不喜欢 GUI，而是喜欢 CLI，即命令行界面，在 CLI 中，你实际上是通过键盘单独完成所有操作的，这有点神秘。
Dialogue: 0,0:10:20.65,0:10:21.27,中文,,0,0,0,,为什么？
Dialogue: 0,0:10:21.27,0:10:26.33,中文,,0,0,0,,事实证明，如果你能用键盘访问大多数计算机，就会发现它们内置了更多功能。
Dialogue: 0,0:10:26.33,0:10:29.52,中文,,0,0,0,,事实证明，我们大多数人的打字速度都比用鼠标点击要快。
Dialogue: 0,0:10:29.52,0:10:32.44,中文,,0,0,0,,随着时间的推移，这最终会提高效率。
Dialogue: 0,0:10:32.44,0:10:40.40,中文,,0,0,0,,那么，你是否会习惯于使用这个终端窗口来完成编译代码或生成程序以及运行程序等工作呢？
Dialogue: 0,0:10:40.40,0:10:45.68,中文,,0,0,0,,你一开始不会像我们在现实世界中那样，习惯于双击图标。
Dialogue: 0,0:10:45.68,0:10:48.06,中文,,0,0,0,,你会用程序员的方式来做。
Dialogue: 0,0:10:48.06,0:10:51.98,中文,,0,0,0,,但这并不排除添加图标、可点击性和其他功能。
Dialogue: 0,0:10:51.98,0:11:02.24,中文,,0,0,0,,在 VS Code 的左侧，会有一个看起来很熟悉的文件资源管理器，某种像 Mac 或 PC 上那样的分层树，你可以在其中看到你帐户中的所有文件。
Dialogue: 0,0:11:02.24,0:11:06.19,中文,,0,0,0,,例如，这里显示的只是 hello.c，我稍后会自己创建它。
Dialogue: 0,0:11:06.19,0:11:09.49,中文,,0,0,0,,然后在左侧远处是所谓的活动栏。
Dialogue: 0,0:11:09.49,0:11:12.27,中文,,0,0,0,,这里有很多传统的菜单和按钮。
Dialogue: 0,0:11:12.27,0:11:16.43,中文,,0,0,0,,所以 VSCode 本身同时提供了 GUI 和 CLI。
Dialogue: 0,0:11:16.43,0:11:22.22,中文,,0,0,0,,但我们实际上将在 CLI 中，即终端窗口，屏幕的底部区域，键入大部分命令。
Dialogue: 0,0:11:22.22,0:11:28.50,中文,,0,0,0,,总的来说，在课堂上，我将隐藏所有那些无关紧要的图形界面。
Dialogue: 0,0:11:28.50,0:11:32.99,中文,,0,0,0,,话虽如此，让我切换到 VS Code 的实时版本。
Dialogue: 0,0:11:32.99,0:11:34.67,中文,,0,0,0,,我已经隐藏了活动栏。
Dialogue: 0,0:11:34.67,0:11:36.61,中文,,0,0,0,,我已经隐藏了文件资源管理器。
Dialogue: 0,0:11:36.61,0:11:42.83,中文,,0,0,0,,为了便于查看，我这里有一个很大的区域用于编写代码，在底部还有一个很大的终端窗口。
Dialogue: 0,0:11:42.83,0:11:45.26,中文,,0,0,0,,你会在终端窗口中看到一个美元符号。
Dialogue: 0,0:11:45.26,0:11:47.14,中文,,0,0,0,,这并不代表任何形式的货币。
Dialogue: 0,0:11:47.14,0:11:51.20,中文,,0,0,0,,这只是表示在此处键入命令的标准符号。
Dialogue: 0,0:11:51.20,0:11:55.64,中文,,0,0,0,,只有一个美元符号和一个光标，意味着我最终将在那里键入命令。
Dialogue: 0,0:11:55.64,0:11:58.12,中文,,0,0,0,,但首先，我要实际创建一些代码。
Dialogue: 0,0:11:58.12,0:12:08.86,中文,,0,0,0,,那么，如何在 VS Code 中编程呢？无论是在我的 Mac PC 上，还是在你将在问题集一中设置的基于云的环境中，如何编写我的第一个文件呢？
Dialogue: 0,0:12:08.86,0:12:10.74,中文,,0,0,0,,最简单的方法可能是这样的。
Dialogue: 0,0:12:10.74,0:12:12.70,中文,,0,0,0,,直接运行命令 code。
Dialogue: 0,0:12:12.70,0:12:15.37,中文,,0,0,0,,然后是要创建的文件名。
Dialogue: 0,0:12:15.37,0:12:18.91,中文,,0,0,0,,注意，我特意在文件名的最后加上了 .c，是小写的。
Dialogue: 0,0:12:18.91,0:12:21.33,中文,,0,0,0,,注意，我特意将整个文件名都小写了。
Dialogue: 0,0:12:21.33,0:12:22.77,中文,,0,0,0,,这些只是惯例。
Dialogue: 0,0:12:22.77,0:12:27.39,中文,,0,0,0,,你可以用大写的 H，也可以用大写的 C，但不要这样做。
Dialogue: 0,0:12:27.39,0:12:31.25,中文,,0,0,0,,遵循最佳实践，这样你的代码就能与其他大多数人的代码保持一致。
Dialogue: 0,0:12:31.25,0:12:32.63,中文,,0,0,0,,当我按下回车键。
Dialogue: 0,0:12:32.63,0:12:35.65,中文,,0,0,0,,我只会得到一个空的选项卡，就像刚才的截图一样。
Dialogue: 0,0:12:35.65,0:12:46.16,中文,,0,0,0,,在这个选项卡里，我可以编写我的第一个 C 语言程序。\N不幸的是，它不像 Scratch 那样用户友好，在 Scratch 中，你只需拖放几个拼图块，程序就完成了。
Dialogue: 0,0:12:46.16,0:12:50.08,中文,,0,0,0,,我要凭记忆写这段代码，但随着时间的推移，你也会熟悉它。
Dialogue: 0,0:12:50.08,0:12:53.81,中文,,0,0,0,,我要引入一个叫做 stdio.h 的东西。
Dialogue: 0,0:12:53.81,0:12:57.37,中文,,0,0,0,,我要输入 int main void，后面加个括号。
Dialogue: 0,0:12:57.37,0:13:01.31,中文,,0,0,0,,在新的一行，我要插入一些花括号。
Dialogue: 0,0:13:01.31,0:13:14.38,中文,,0,0,0,,然后我要输入 printf，后面加个括号，然后在引号里输入 hello, world，然后是反斜杠，然后是小写的 n，然后是闭合引号，最后是行尾的分号。
Dialogue: 0,0:13:14.38,0:13:19.03,中文,,0,0,0,,我所做的只是凭记忆重现了第一个程序。
Dialogue: 0,0:13:19.03,0:13:21.71,中文,,0,0,0,,稍后，我们会解释清楚这其中的大部分内容。
Dialogue: 0,0:13:21.71,0:13:24.00,中文,,0,0,0,,但现在，让我们先运行一下这段代码。
Dialogue: 0,0:13:24.00,0:13:29.98,中文,,0,0,0,,就像上周我第一次点击绿旗一样，让我们编译并运行这个程序。
Dialogue: 0,0:13:29.98,0:13:37.33,中文,,0,0,0,,如果是你的 Mac 或 PC，并且软件是由 Google、Microsoft 或其他公司开发的，那么在这个时候，我们就应该双击一个图标了。
Dialogue: 0,0:13:37.33,0:13:38.55,中文,,0,0,0,,但我们还不能这样做。
Dialogue: 0,0:13:38.55,0:13:39.97,中文,,0,0,0,,这仍然是源代码。
Dialogue: 0,0:13:39.97,0:13:42.55,中文,,0,0,0,,我要点击回到终端窗口。
Dialogue: 0,0:13:42.55,0:13:48.01,中文,,0,0,0,,注意，第一个美元符号下面还有一个，这意味着它已经准备好接收第二个命令了。
Dialogue: 0,0:13:48.01,0:13:57.20,中文,,0,0,0,,现在，要把这个变成一个真正的程序，把它从源代码编译成机器码，所用的命令很简单，就是 make。
Dialogue: 0,0:13:57.20,0:13:59.40,中文,,0,0,0,,然后是我要创建的程序的名称。
Dialogue: 0,0:13:59.40,0:14:05.70,中文,,0,0,0,,一个小细节，我故意省略了 .c，因为我想创建的程序，我只想叫它 hello。
Dialogue: 0,0:14:05.70,0:14:08.93,中文,,0,0,0,,所以不要写 make hello.c。只写 make hello。
Dialogue: 0,0:14:08.93,0:14:13.05,中文,,0,0,0,,这个程序 make 本质上就是我们的编译器。
Dialogue: 0,0:14:13.05,0:14:17.61,中文,,0,0,0,,从技术上讲，它是一个为我自动编译程序的程序。
Dialogue: 0,0:14:17.61,0:14:20.31,中文,,0,0,0,,但它会看到我输入了 hello 这个词。
Dialogue: 0,0:14:20.31,0:14:25.28,中文,,0,0,0,,它现在会自动在硬盘上查找一个名为 hello.c 的文件。
Dialogue: 0,0:14:25.28,0:14:30.77,中文,,0,0,0,,并将其从 C 语言的源代码转换为 0 和 1 的机器码。
Dialogue: 0,0:14:30.77,0:14:35.16,中文,,0,0,0,,如果我没有打错字，回车。
Dialogue: 0,0:14:35.16,0:14:38.24,中文,,0,0,0,,似乎什么也没发生，这是好事。
Dialogue: 0,0:14:38.24,0:14:42.06,中文,,0,0,0,,几乎总是，如果屏幕上没有任何输出，就说明你做得很好。
Dialogue: 0,0:14:42.06,0:14:43.04,中文,,0,0,0,,你没有犯任何错误。
Dialogue: 0,0:14:43.04,0:14:43.86,中文,,0,0,0,,你没有被骂。
Dialogue: 0,0:14:43.86,0:14:44.90,中文,,0,0,0,,没有任何错误信息。
Dialogue: 0,0:14:44.90,0:14:46.66,中文,,0,0,0,,这实际上是一件好事。
Dialogue: 0,0:14:46.66,0:14:48.18,中文,,0,0,0,,我现在如何运行这个程序？
Dialogue: 0,0:14:48.18,0:14:52.17,中文,,0,0,0,,注意，这里有第三个美元符号，这意味着我准备好了输入第三个命令。
Dialogue: 0,0:14:52.17,0:14:55.53,中文,,0,0,0,,现在我要运行 ./hello。
Dialogue: 0,0:14:55.53,0:14:58.65,中文,,0,0,0,,你必须输入 ./.，这确实有点奇怪。
Dialogue: 0,0:14:58.65,0:15:04.67,中文,,0,0,0,,但现在，请相信这就是在当前文件夹中运行名为 hello 的程序的方式。
Dialogue: 0,0:15:04.67,0:15:07.86,中文,,0,0,0,,在这个基于云的环境中，这是在当前目录下运行程序的方式。
Dialogue: 0,0:15:07.86,0:15:16.22,中文,,0,0,0,,我再次祈祷，按下回车键，瞧，我的第一个 C 语言程序。hello, world。
Dialogue: 0,0:15:16.22,0:15:21.52,中文,,0,0,0,,现在让我打开我之前提到的文件资源管理器。
Dialogue: 0,0:15:21.52,0:15:23.88,中文,,0,0,0,,我要用快捷键打开它。
Dialogue: 0,0:15:23.88,0:15:28.38,中文,,0,0,0,,通常，我把它关着，因为我不需要一直知道我的账户里有哪些文件。
Dialogue: 0,0:15:28.38,0:15:33.55,中文,,0,0,0,,但你会看到文件资源管理器，它和 Mac 或 PC 上的类似，只是图形界面有点不同。
Dialogue: 0,0:15:33.55,0:15:35.39,中文,,0,0,0,,这是我的文件，hello.c。
Dialogue: 0,0:15:35.39,0:15:37.67,中文,,0,0,0,,它被高亮显示了，因为我已经打开了这个标签页。
Dialogue: 0,0:15:37.67,0:15:41.15,中文,,0,0,0,,但是现在这里有第二个文件，我把它命名为 hello。
Dialogue: 0,0:15:41.15,0:15:42.57,中文,,0,0,0,,这就是我的程序的名字。
Dialogue: 0,0:15:42.57,0:15:46.21,中文,,0,0,0,,如果你在 Mac 或 PC 上，理想情况下你会双击它。
Dialogue: 0,0:15:46.21,0:15:48.13,中文,,0,0,0,,在命令行环境中你不能这样做。
Dialogue: 0,0:15:48.13,0:15:49.49,中文,,0,0,0,,你必须在这里运行它。
Dialogue: 0,0:15:49.49,0:15:50.47,中文,,0,0,0,,但这就是我们所做的一切。
Dialogue: 0,0:15:50.47,0:15:52.61,中文,,0,0,0,,我们创建了一个名为 hello.c 的文件。
Dialogue: 0,0:15:52.61,0:15:56.26,中文,,0,0,0,,然后我的编译器用它生成了程序。
Dialogue: 0,0:15:56.26,0:16:01.95,中文,,0,0,0,,我先暂停一下，看看大家有没有什么问题，因为这里有很多神奇的术语。
Dialogue: 0,0:16:01.95,0:16:04.69,中文,,0,0,0,,是的。
Dialogue: 0,0:16:04.69,0:16:14.12,中文,,0,0,0,,如果你现在正在跟着做，并且遇到了某种错误信息，今天的一部分内容就是让我故意制造一些这样的错误信息。
Dialogue: 0,0:16:14.12,0:16:19.46,中文,,0,0,0,,现在，如果你的操作和我完全一样，那你一定是在某个地方打错了字。
Dialogue: 0,0:16:19.46,0:16:26.89,中文,,0,0,0,,注意，它的确是 stdio.h，也许你打成了 studio.h。
Dialogue: 0,0:16:26.89,0:16:30.67,中文,,0,0,0,,这是一个很常见的错误。
Dialogue: 0,0:16:30.67,0:16:32.25,中文,,0,0,0,,它不是 studio.h。
Dialogue: 0,0:16:32.25,0:16:33.97,中文,,0,0,0,,而是 stdio.h。
Dialogue: 0,0:16:33.97,0:16:41.92,中文,,0,0,0,,这很常见，这也正是你在本周，甚至几周，甚至几年内都会遇到的那种令人头疼的错误。
Dialogue: 0,0:16:41.92,0:16:49.14,中文,,0,0,0,,但随着时间的推移，你就会开始克服这些愚蠢的错误，而且会越来越容易，因为计算机是非常死板的。
Dialogue: 0,0:16:49.14,0:16:50.98,中文,,0,0,0,,它只会做你告诉它做的事。
Dialogue: 0,0:16:50.98,0:16:55.86,中文,,0,0,0,,如果你说 studio.h，因为它听起来像是 studio.h，但它不会知道这个文件是什么。
Dialogue: 0,0:16:55.86,0:16:58.07,中文,,0,0,0,,谢谢你这么早就发现了这个错误。
Dialogue: 0,0:16:58.07,0:16:59.81,中文,,0,0,0,,这很常见。
Dialogue: 0,0:16:59.81,0:17:02.18,中文,,0,0,0,,是的。
Dialogue: 0,0:17:02.18,0:17:04.62,中文,,0,0,0,,为什么我有两个 hello 文件？
Dialogue: 0,0:17:04.62,0:17:06.22,中文,,0,0,0,,为什么我有两个 hello 文件？
Dialogue: 0,0:17:06.22,0:17:10.69,中文,,0,0,0,,一个是作为人类创建的名为 hello.c 的文件，如图所示。
Dialogue: 0,0:17:10.69,0:17:17.11,中文,,0,0,0,,但当我运行 make hello 时，这个过程将我的源代码编译成了机器代码。
Dialogue: 0,0:17:17.11,0:17:25.80,中文,,0,0,0,,这个名为 hello 的文件包含了服务器实际能理解的所有 0 和 1。
Dialogue: 0,0:17:25.80,0:17:30.23,中文,,0,0,0,,那么，有问题吗？
Dialogue: 0,0:17:30.23,0:17:38.76,中文,,0,0,0,,如果你尝试点击 Hello 文件，你会发现，在这个 VS Code 环境中，文件没有显示在编辑器中，因为它要么是二进制文件，
Dialogue: 0,0:17:38.76,0:17:41.50,中文,,0,0,0,,也就是 0 和 1，要么使用了不支持的文本编码。
Dialogue: 0,0:17:41.50,0:17:42.52,中文,,0,0,0,,在这种情况下，它是二进制文件。
Dialogue: 0,0:17:42.52,0:17:43.88,中文,,0,0,0,,它就是 0 和 1。
Dialogue: 0,0:17:43.88,0:17:47.69,中文,,0,0,0,,你可以使用软件来查看这些 0 和 1。
Dialogue: 0,0:17:47.69,0:17:50.49,中文,,0,0,0,,这对大多数人来说都没有什么启发意义。
Dialogue: 0,0:17:50.49,0:17:53.31,中文,,0,0,0,,所以 VS Code 就选择不向你展示它。
Dialogue: 0,0:17:53.31,0:17:56.47,中文,,0,0,0,,点击一个你不打算点击的文件，也是一个常见的错误。
Dialogue: 0,0:17:56.47,0:18:00.29,中文,,0,0,0,,但源代码确实可以由我们编辑。
Dialogue: 0,0:18:00.29,0:18:01.89,中文,,0,0,0,,我已经写好了这个程序。
Dialogue: 0,0:18:01.89,0:18:04.75,中文,,0,0,0,,它似乎神奇地工作了，至少经过一番努力。
Dialogue: 0,0:18:04.75,0:18:09.43,中文,,0,0,0,,如果你每个键都敲对了，那么它到底是怎么运行的？
Dialogue: 0,0:18:09.43,0:18:17.79,中文,,0,0,0,,首先，请注意，即使我没有高亮显示或从菜单中选择按钮，它也已经有了颜色编码。
Dialogue: 0,0:18:17.79,0:18:22.63,中文,,0,0,0,,我没有像在 Google Docs 中那样，一边高亮显示一边改变颜色。
Dialogue: 0,0:18:22.63,0:18:29.70,中文,,0,0,0,,事实证明，VS Code 和现在大多数编程环境都会为你自动进行语法高亮显示。
Dialogue: 0,0:18:29.70,0:18:36.96,中文,,0,0,0,,语法高亮显示只是当今典型的文本编辑器的一项功能，它会分析你输入的代码。
Dialogue: 0,0:18:36.96,0:18:48.10,中文,,0,0,0,,当它注意到某些类型的按键，比如代表函数、条件语句、循环或变量的东西，也就是上周学过的很多词汇，它就会以不同的方式为你高亮显示出来。
Dialogue: 0,0:18:48.10,0:18:51.55,中文,,0,0,0,,例如，main，我们很快就会看到，在这里是紫色的。
Dialogue: 0,0:18:51.55,0:18:54.03,中文,,0,0,0,,int、void 和 include 是红色的。
Dialogue: 0,0:18:54.03,0:18:55.65,中文,,0,0,0,,Hello, world 是蓝色的。
Dialogue: 0,0:18:55.65,0:18:57.27,中文,,0,0,0,,我的括号是绿色的。
Dialogue: 0,0:18:57.27,0:18:59.29,中文,,0,0,0,,这会因程序不同而有所差异。
Dialogue: 0,0:18:59.29,0:19:07.10,中文,,0,0,0,,实际上，如果你想为习题集一改变你自己环境中的这些颜色，你可以通过齿轮图标查看 VS Code 设置。
Dialogue: 0,0:19:07.10,0:19:10.02,中文,,0,0,0,,你可以换一个不同的颜色主题。
Dialogue: 0,0:19:10.02,0:19:13.64,中文,,0,0,0,,语法高亮不像 Scratch 中那样是某种特定的配色方案。
Dialogue: 0,0:19:13.64,0:19:16.63,中文,,0,0,0,,它通常只是每个人自己的喜好。
Dialogue: 0,0:19:16.63,0:19:20.99,中文,,0,0,0,,但目前这里发生的一切就是语法高亮的概念。
Dialogue: 0,0:19:20.99,0:19:25.61,中文,,0,0,0,,那么，在我运行这段代码之前，或者说在我编写它之前，还有什么事情发生呢？
Dialogue: 0,0:19:25.61,0:19:27.23,中文,,0,0,0,,它看起来有点像这样。
Dialogue: 0,0:19:27.23,0:19:32.64,中文,,0,0,0,,如果我去掉所有的颜色，然后为了讨论方便，让我把它涂成更像 Scratch 的颜色。
Dialogue: 0,0:19:32.64,0:19:45.27,中文,,0,0,0,,回想一下，我们第一个在屏幕上显示 hello world 的 Scratch 程序有一个当绿旗被点击的拼图块，大致是橙色的，然后在它下面是一个紫色的 say 块。
Dialogue: 0,0:19:45.27,0:19:48.99,中文,,0,0,0,,如果我们回到上周，这就是 C 语言版本，
Dialogue: 0,0:19:48.99,0:19:50.98,中文,,0,0,0,,这是 Scratch 中的同一个程序。
Dialogue: 0,0:19:50.98,0:19:53.00,中文,,0,0,0,,但现在发生的事情是完全一样的。
Dialogue: 0,0:19:53.00,0:20:03.37,中文,,0,0,0,,如果你回想上周，你有一些函数，比如紫色的 say 函数，它可能需要一个或多个参数，比如影响它在屏幕上显示内容的输入。
Dialogue: 0,0:20:03.37,0:20:06.57,中文,,0,0,0,,回想一下，函数有时会有副作用，对吧？
Dialogue: 0,0:20:06.57,0:20:08.41,中文,,0,0,0,,比如屏幕上出现了说话泡泡。
Dialogue: 0,0:20:08.41,0:20:18.88,中文,,0,0,0,,上周，当我们使用 say 块并传入一个 hello, world 参数时，我们在屏幕上得到了这个视觉上的副作用，现在说话泡泡里显示了 hello, world。
Dialogue: 0,0:20:18.88,0:20:23.42,中文,,0,0,0,,这和 VS Code 中发生的事情完全一样，只不过是以文本形式呈现的，而且文本量更大。
Dialogue: 0,0:20:23.42,0:20:25.93,中文,,0,0,0,,现在让我们仔细看看代码本身。
Dialogue: 0,0:20:25.93,0:20:31.49,中文,,0,0,0,,让我用手示意一下，这相当于代码中“当绿旗被点击”的部分。
Dialogue: 0,0:20:31.49,0:20:38.62,中文,,0,0,0,,让我们只关注 Scratch 中的“说”块以及对应的函数。
Dialogue: 0,0:20:38.62,0:20:47.19,中文,,0,0,0,,如果我逐步执行此操作，并且想要将上周使用“说”块完成的操作转换为 C 语言，我首先会使用 print 函数。
Dialogue: 0,0:20:47.19,0:20:50.45,中文,,0,0,0,,尽管这实际上有点不准确，它实际上是 printf 函数。
Dialogue: 0,0:20:50.45,0:20:55.43,中文,,0,0,0,,Printf 表示格式化，它只是一个允许你在屏幕上格式化文本的函数。
Dialogue: 0,0:20:55.43,0:20:58.59,中文,,0,0,0,,C 语言中没有 say 函数，只有 printf 函数。
Dialogue: 0,0:20:58.59,0:21:08.26,中文,,0,0,0,,多年前，MIT 所做的是，他们采用了历史上存在的 printf，并将其简化为 say，以便更广泛的受众理解。
Dialogue: 0,0:21:08.26,0:21:16.29,中文,,0,0,0,,但请注意，如果我想将左侧的 Scratch 代码转换为右侧的 C 代码，它们的结构是相同的。
Dialogue: 0,0:21:16.29,0:21:23.57,中文,,0,0,0,,MIT 故意使用这种白色的椭圆形，因为它让人联想到括号。
Dialogue: 0,0:21:23.57,0:21:31.49,中文,,0,0,0,,在右边，如果我想向 printf 函数传递参数或输入，我使用一个左括号和一个右括号。
Dialogue: 0,0:21:31.49,0:21:37.54,中文,,0,0,0,,在括号中，我输入想要在屏幕上打印的内容，在本例中是“hello, world”。
Dialogue: 0,0:21:37.54,0:21:52.09,中文,,0,0,0,,但请注意，我特意留了一些空间，因为在 C 语言中你需要一些额外的按键。\N当你输入一些文本时，也就是用计算机科学术语来说，字符串，你需要用引号将其括起来，在本例中是双引号。
Dialogue: 0,0:21:52.09,0:21:54.74,中文,,0,0,0,,左边一个双引号，右边一个双引号。
Dialogue: 0,0:21:54.74,0:22:05.60,中文,,0,0,0,,还要注意，我还会在这里包含一些稍微有点 cryptic 的符号\ n，我之前也输入并口述过，最后是结尾处的一个分号。
Dialogue: 0,0:22:05.60,0:22:09.02,中文,,0,0,0,,这就是我们从 Scratch 开始的原因。
Dialogue: 0,0:22:09.02,0:22:10.96,中文,,0,0,0,,这种拖放操作，你就可以开始了。
Dialogue: 0,0:22:10.96,0:22:16.30,中文,,0,0,0,,在像 C 这样的语言中，你需要 printf、括号、双引号、要打印的文本、\ n 和分号。
Dialogue: 0,0:22:16.30,0:22:19.06,中文,,0,0,0,,最后，语法开销太大了。
Dialogue: 0,0:22:19.06,0:22:21.16,中文,,0,0,0,,但归根结底，它只是一个函数。
Dialogue: 0,0:22:21.16,0:22:27.31,中文,,0,0,0,,你会习惯这些细节，比如括号、引号、分号等等。
Dialogue: 0,0:22:27.31,0:22:30.33,中文,,0,0,0,,但事情很容易出错。
Dialogue: 0,0:22:30.33,0:22:33.27,中文,,0,0,0,,即使是像这样的代码行，也很容易出错。
Dialogue: 0,0:22:33.27,0:22:34.09,中文,,0,0,0,,我来演示一下。
Dialogue: 0,0:22:34.09,0:22:37.18,中文,,0,0,0,,回到 VS Code，这里有完全相同的代码。
Dialogue: 0,0:22:37.18,0:22:40.82,中文,,0,0,0,,注意第 5 行就是那行代码。
Dialogue: 0,0:22:40.82,0:22:43.04,中文,,0,0,0,,这相当于 say 代码块。
Dialogue: 0,0:22:43.04,0:22:50.09,中文,,0,0,0,,让我们看看我早期，甚至现在学习编程 20 年后，仍然会犯哪些常见错误。
Dialogue: 0,0:22:50.09,0:22:52.37,中文,,0,0,0,,假设我忘记了那里的分号。
Dialogue: 0,0:22:52.37,0:22:53.41,中文,,0,0,0,,很容易发生。
Dialogue: 0,0:22:53.41,0:22:55.03,中文,,0,0,0,,你最终也会遇到这种情况。
Dialogue: 0,0:22:55.03,0:23:00.07,中文,,0,0,0,,让我们看看当我回到终端窗口并再次尝试编译代码时会发生什么。
Dialogue: 0,0:23:00.07,0:23:02.72,中文,,0,0,0,,为了保持整洁，我将清除屏幕。
Dialogue: 0,0:23:02.72,0:23:06.62,中文,,0,0,0,,但这只是为了方便讲解，这样我们就可以只关注最新的命令。
Dialogue: 0,0:23:06.62,0:23:10.14,中文,,0,0,0,,我要继续运行 make hello。
Dialogue: 0,0:23:10.14,0:23:13.70,中文,,0,0,0,,这将确保我的程序被重新编译。
Dialogue: 0,0:23:13.70,0:23:14.94,中文,,0,0,0,,这是一个手动过程。
Dialogue: 0,0:23:14.94,0:23:16.15,中文,,0,0,0,,我修改了代码。
Dialogue: 0,0:23:16.15,0:23:18.67,中文,,0,0,0,,硬盘上的 0 和 1 还没有改变。
Dialogue: 0,0:23:18.67,0:23:22.05,中文,,0,0,0,,我需要重新编译它来输出最新的机器代码。
Dialogue: 0,0:23:22.05,0:23:24.77,中文,,0,0,0,,开始了。 我要按下回车键，像之前一样祈祷。
Dialogue: 0,0:23:24.77,0:23:29.36,中文,,0,0,0,,但是，我又不小心删除了分号。
Dialogue: 0,0:23:29.36,0:23:33.67,中文,,0,0,0,,天哪，现在的错误行数比实际代码行数还多。
Dialogue: 0,0:23:33.67,0:23:35.89,中文,,0,0,0,,这都需要慢慢适应。
Dialogue: 0,0:23:35.89,0:23:42.93,中文,,0,0,0,,我们使用的程序并不是为让用户感到舒服而编写的，而是在过去是为专业程序员设计的。
Dialogue: 0,0:23:42.93,0:23:47.70,中文,,0,0,0,,但是通过练习、经验和错误，你也会开始注意到其中的规律。
Dialogue: 0,0:23:47.70,0:23:49.18,中文,,0,0,0,,这就是我输入的内容。
Dialogue: 0,0:23:49.18,0:23:51.46,中文,,0,0,0,,在美元符号提示符后输入 make hello。
Dialogue: 0,0:23:51.46,0:23:53.60,中文,,0,0,0,,现在它对我发出了如下警告。
Dialogue: 0,0:23:53.60,0:23:56.98,中文,,0,0,0,,Hello.c 冒号 5 冒号 29。
Dialogue: 0,0:23:56.98,0:23:58.56,中文,,0,0,0,,这是什么意思？
Dialogue: 0,0:23:58.56,0:24:03.57,中文,,0,0,0,,我搞砸了第 5 行第 29 个字符的地方。
Dialogue: 0,0:24:03.57,0:24:07.23,中文,,0,0,0,,通常，除非你真的想把它数出来，否则具体的字符并没有那么有用。
Dialogue: 0,0:24:07.23,0:24:08.79,中文,,0,0,0,,但第 5 行是一个很好的线索。
Dialogue: 0,0:24:08.79,0:24:09.15,中文,,0,0,0,,为什么？
Dialogue: 0,0:24:09.15,0:24:11.87,中文,,0,0,0,,这意味着我在第 5 行的某个地方搞砸了。
Dialogue: 0,0:24:11.87,0:24:13.47,中文,,0,0,0,,好吧，那错误是什么？
Dialogue: 0,0:24:13.47,0:24:16.31,中文,,0,0,0,,表达式后应输入分号。
Dialogue: 0,0:24:16.31,0:24:20.05,中文,,0,0,0,,现在我看到了这个错误，它实际上很明显，我意识到，等等。
Dialogue: 0,0:24:20.05,0:24:21.72,中文,,0,0,0,,这是我的代码行。
Dialogue: 0,0:24:21.72,0:24:30.82,中文,,0,0,0,,这里用 ASCII 艺术，或者说用文本表示图形，它希望我在这一行的末尾用绿色加上分号。
Dialogue: 0,0:24:30.82,0:24:33.84,中文,,0,0,0,,生成了一个错误，内置的，所以那里有一些深奥的东西。
Dialogue: 0,0:24:33.84,0:24:36.36,中文,,0,0,0,,但我的程序没有编译。
Dialogue: 0,0:24:36.36,0:24:39.58,中文,,0,0,0,,当你看到这样的错误时，这意味着它不起作用。
Dialogue: 0,0:24:39.58,0:24:40.34,中文,,0,0,0,,那怎么解决呢？
Dialogue: 0,0:24:40.34,0:24:45.59,中文,,0,0,0,,很明显，解决办法是回到这里，把分号加上。
Dialogue: 0,0:24:45.59,0:24:51.17,中文,,0,0,0,,现在，如果我用 make hello 重新编译我的代码，我还不会清除我的屏幕，只是为了向你展示区别。
Dialogue: 0,0:24:51.17,0:24:53.11,中文,,0,0,0,,现在，它起作用了。
Dialogue: 0,0:24:53.11,0:24:55.47,中文,,0,0,0,,我们又可以像以前一样工作了。
Dialogue: 0,0:24:55.47,0:25:02.28,中文,,0,0,0,,请允许我暂停一下，请问一下关于我刚才的操作有什么问题吗？
Dialogue: 0,0:25:02.28,0:25:04.52,中文,,0,0,0,,这些错误信息最初会经常出现。
Dialogue: 0,0:25:04.52,0:25:09.54,中文,,0,0,0,,是的。
Dialogue: 0,0:25:09.54,0:25:10.28,中文,,0,0,0,,问得好。
Dialogue: 0,0:25:10.28,0:25:12.96,中文,,0,0,0,,每行代码后面都需要加分号吗，还是只加一些？
Dialogue: 0,0:25:12.96,0:25:14.48,中文,,0,0,0,,事实证明只加一些。
Dialogue: 0,0:25:14.48,0:25:18.49,中文,,0,0,0,,这是你会通过练习、今天的演示和例子来学习的东西。
Dialogue: 0,0:25:18.49,0:25:22.91,中文,,0,0,0,,一般来说，在一个语句后面加一个分号。
Dialogue: 0,0:25:22.91,0:25:25.21,中文,,0,0,0,,这是这行代码的技术术语。
Dialogue: 0,0:25:25.21,0:25:25.91,中文,,0,0,0,,它是一个语句。
Dialogue: 0,0:25:25.91,0:25:29.16,中文,,0,0,0,,可以把它想象成相当于英语句子一样的代码。
Dialogue: 0,0:25:29.16,0:25:34.98,中文,,0,0,0,,所以代码中的分号有点像英语中的句号，表示你已经完成了这个特定的想法。
Dialogue: 0,0:25:34.98,0:25:37.64,中文,,0,0,0,,现在，你不需要在其他任何地方使用分号。
Dialogue: 0,0:25:37.64,0:25:39.74,中文,,0,0,0,,我们稍后会看到其他使用分号的例子。
Dialogue: 0,0:25:39.74,0:25:47.10,中文,,0,0,0,,但它通常出现在一行代码的末尾，而这行代码不是像花括号那样纯粹的语法结构。
Dialogue: 0,0:25:47.10,0:25:55.50,中文,,0,0,0,,对于我刚刚修复并为自己制造的错误，还有其他问题吗？
Dialogue: 0,0:25:55.50,0:25:56.06,中文,,0,0,0,,正确。
Dialogue: 0,0:25:56.06,0:25:58.96,中文,,0,0,0,,所以第 5 行是最有可能出错的地方。
Dialogue: 0,0:25:58.96,0:26:02.42,中文,,0,0,0,,字符 29 意味着它大概是这个方向的第 29 个字符。
Dialogue: 0,0:26:02.42,0:26:04.78,中文,,0,0,0,,在这种情况下，它实际上给了我一个建议。
Dialogue: 0,0:26:04.78,0:26:09.93,中文,,0,0,0,,编译器不会总是知道如何给我建议，特别是如果我把代码弄得一团糟。
Dialogue: 0,0:26:09.93,0:26:13.31,中文,,0,0,0,,但通常情况下，它会尽力像这样给你答案。
Dialogue: 0,0:26:13.31,0:26:17.30,中文,,0,0,0,,是吗？
Dialogue: 0,0:26:17.30,0:26:23.06,中文,,0,0,0,,啊，为什么我第一次输入的是 code space hello.c，而现在输入的是 make hello？
Dialogue: 0,0:26:23.06,0:26:24.10,中文,,0,0,0,,两个不同的过程。
Dialogue: 0,0:26:24.10,0:26:31.29,中文,,0,0,0,,当我输入 code space hello.c 时，是因为我想打开 VS Code 并创建一个名为 hello.c 的新文件。
Dialogue: 0,0:26:31.29,0:26:35.11,中文,,0,0,0,,这就像在 Mac 或 PC 上选择“文件”>“新建”。
Dialogue: 0,0:26:35.11,0:26:46.16,中文,,0,0,0,,此后，一旦文件存在并在这里打开，并且它会自动保存，\N你就不需要一直按 Command-S 或 Control-S，我现在可以一遍又一遍地使用 make hello 来编译它。
Dialogue: 0,0:26:46.16,0:26:54.10,中文,,0,0,0,,理论上，除非我想创建一个同名的新文件，否则我不应该再输入 code space hello.c。
Dialogue: 0,0:26:54.10,0:26:57.18,中文,,0,0,0,,那这另一段语法呢？
Dialogue: 0,0:26:57.18,0:26:58.79,中文,,0,0,0,,我先来清空一下终端窗口。
Dialogue: 0,0:26:58.79,0:27:03.59,中文,,0,0,0,,你也可以按 Control-L 键，把所有东西都扔掉，只是为了看起来更整洁。
Dialogue: 0,0:27:03.59,0:27:11.50,中文,,0,0,0,,假设我去掉了\ n 后面的这一串符号，因为我第一眼还真没看出来它为什么在那里。
Dialogue: 0,0:27:11.50,0:27:20.62,中文,,0,0,0,,有没有人想猜一猜，尤其是在你以前从未编写过程序的情况下，如果我现在重新编译并运行这个版本的程序会发生什么？
Dialogue: 0,0:27:20.62,0:27:28.36,中文,,0,0,0,,我留下了分号，但是去掉了\ n。有什么想法吗？
Dialogue: 0,0:27:28.36,0:27:28.78,中文,,0,0,0,,好的。
Dialogue: 0,0:27:28.78,0:27:29.20,中文,,0,0,0,,嗯，是的。
Dialogue: 0,0:27:34.61,0:27:35.19,中文,,0,0,0,,会这样。
Dialogue: 0,0:27:35.19,0:27:38.67,中文,,0,0,0,,下一个美元符号会出现在我的 hello world 后面。
Dialogue: 0,0:27:38.67,0:27:43.36,中文,,0,0,0,,但你为什么这么认为？
Dialogue: 0,0:27:43.36,0:27:44.00,中文,,0,0,0,,没错。
Dialogue: 0,0:27:44.00,0:27:48.09,中文,,0,0,0,,\ n 实际上是一组特殊的符号序列，用来创建一个新行。
Dialogue: 0,0:27:48.09,0:27:54.05,中文,,0,0,0,,正如你所说，如果我重新编译这个程序，make hello，回车，没有语法错误。
Dialogue: 0,0:27:54.05,0:27:55.33,中文,,0,0,0,,这次它确实编译了。
Dialogue: 0,0:27:55.33,0:27:58.96,中文,,0,0,0,,所以你不需要\ n。但你需要分号。
Dialogue: 0,0:27:58.96,0:28:03.76,中文,,0,0,0,,但如果你没有\ n，看看这次我执行 dot slash hello 会发生什么。
Dialogue: 0,0:28:03.76,0:28:07.24,中文,,0,0,0,,现在，我确实看到了 hello 逗号 world，然后是一个奇怪的美元符号。
Dialogue: 0,0:28:07.24,0:28:08.58,中文,,0,0,0,,这仍然是一个提示符。
Dialogue: 0,0:28:08.58,0:28:12.39,中文,,0,0,0,,我仍然可以在它后面输入命令，比如 clear，然后所有东西都被清除了。
Dialogue: 0,0:28:12.39,0:28:13.73,中文,,0,0,0,,不过这看起来有点蠢。
Dialogue: 0,0:28:13.73,0:28:18.39,中文,,0,0,0,,如果我用 ./hello 再运行一次，它就不是那么用户友好了。
Dialogue: 0,0:28:18.39,0:28:24.51,中文,,0,0,0,,按照惯例，当你运行完程序后，最好清理一下，将光标移到下一行方便用户。
Dialogue: 0,0:28:24.51,0:28:34.98,中文,,0,0,0,,所以\ n 只是一种特殊符号，也被称为转义序列，C 语言知道它表示将光标移到下一行。
Dialogue: 0,0:28:34.98,0:28:39.72,中文,,0,0,0,,在其他语言中，包括 Python，也使用相同的符号。
Dialogue: 0,0:28:39.72,0:28:46.91,中文,,0,0,0,,现在，如果我回到代码这里，比如，我尝试用不同的方式来做。
Dialogue: 0,0:28:46.91,0:28:52.97,中文,,0,0,0,,假设我不输入\ n，我只是像普通人在 Google Docs 或 Microsoft Word 中那样按回车键。
Dialogue: 0,0:28:52.97,0:28:55.37,中文,,0,0,0,,让我继续尝试编译这个程序。
Dialogue: 0,0:28:55.37,0:28:57.01,中文,,0,0,0,,你希望这样会成功，对吧？
Dialogue: 0,0:28:57.01,0:29:02.36,中文,,0,0,0,,你希望它能打印出 hello, world，然后是一个空行，因为我把光标移到了下一行。
Dialogue: 0,0:29:02.36,0:29:06.08,中文,,0,0,0,,但没有，如果我现在运行 make hello 并尝试编译它，
Dialogue: 0,0:29:06.08,0:29:07.30,中文,,0,0,0,,C 语言不喜欢这样。
Dialogue: 0,0:29:07.30,0:29:17.05,中文,,0,0,0,,现在我在第 5 行仍然遇到了一个不同的错误，这次是从第 12 个字符开始，错误是缺少终止双引号字符，然后是一些其他深奥的东西。
Dialogue: 0,0:29:17.05,0:29:18.33,中文,,0,0,0,,然后这听起来就不妙了。
Dialogue: 0,0:29:18.33,0:29:21.93,中文,,0,0,0,,这次是致命错误，错误太多被忽略，现在停止。
Dialogue: 0,0:29:21.93,0:29:23.57,中文,,0,0,0,,看来我真的搞砸了。
Dialogue: 0,0:29:23.57,0:29:25.50,中文,,0,0,0,,那我为什么不能这样做呢？
Dialogue: 0,0:29:25.50,0:29:31.38,中文,,0,0,0,,只是因为，设计 C 语言的人决定，如果你有一串文本，它必须保持在同一行。
Dialogue: 0,0:29:31.38,0:29:32.96,中文,,0,0,0,,它可以变得很长。
Dialogue: 0,0:29:32.96,0:29:34.44,中文,,0,0,0,,它可以自动换行。
Dialogue: 0,0:29:34.44,0:29:36.28,中文,,0,0,0,,也就是不需要按回车键。
Dialogue: 0,0:29:36.28,0:29:38.22,中文,,0,0,0,,也不能按回车键来创建新行。
Dialogue: 0,0:29:38.22,0:29:44.18,中文,,0,0,0,,如果想要创建新行，必须使用\ n 转义字符。
Dialogue: 0,0:29:44.18,0:29:45.14,中文,,0,0,0,,我来演示一下。
Dialogue: 0,0:29:45.14,0:29:46.80,中文,,0,0,0,,把它放回去。
Dialogue: 0,0:29:46.80,0:29:48.74,中文,,0,0,0,,回到终端窗口。
Dialogue: 0,0:29:48.74,0:29:50.02,中文,,0,0,0,,再次清空屏幕。
Dialogue: 0,0:29:50.02,0:29:54.09,中文,,0,0,0,,执行 make hello 重新编译，./hello 运行。
Dialogue: 0,0:29:54.09,0:29:57.88,中文,,0,0,0,,瞧，程序又可以运行了。
Dialogue: 0,0:29:57.88,0:30:05.08,中文,,0,0,0,,好，现在来分析代码的其他部分，因为要让程序在屏幕上打印“hello, world”需要做很多工作。
Dialogue: 0,0:30:05.08,0:30:10.13,中文,,0,0,0,,今天，我们先忽略 int、main、void 和这些花括号。
Dialogue: 0,0:30:10.13,0:30:12.41,中文,,0,0,0,,稍后会解释它们的作用。
Dialogue: 0,0:30:12.41,0:30:19.19,中文,,0,0,0,,现在，可以将 int、main、void 和这些花括号看作是 C 语言中“当绿旗被点击”的等价物。
Dialogue: 0,0:30:19.19,0:30:19.67,中文,,0,0,0,,为什么这么说？
Dialogue: 0,0:30:19.67,0:30:20.67,中文,,0,0,0,,因为程序需要它们才能运行。
Dialogue: 0,0:30:20.67,0:30:22.48,中文,,0,0,0,,这就是程序的启动方式。
Dialogue: 0,0:30:22.48,0:30:24.88,中文,,0,0,0,,main 确实是一个特殊的函数。
Dialogue: 0,0:30:24.88,0:30:26.50,中文,,0,0,0,,以后再详细介绍。
Dialogue: 0,0:30:26.50,0:30:29.04,中文,,0,0,0,,为什么要写这行代码？
Dialogue: 0,0:30:29.04,0:30:36.62,中文,,0,0,0,,正确的拼写是 standard io.h，S-T-D-I-O.h，这次使用的是尖括号。
Dialogue: 0,0:30:36.62,0:30:37.48,中文,,0,0,0,,这有点新颖。
Dialogue: 0,0:30:37.48,0:30:40.72,中文,,0,0,0,,这里有一个 # 符号和一个 include 关键字。
Dialogue: 0,0:30:40.72,0:30:45.02,中文,,0,0,0,,如果你不知道这是什么，删除它并看看会发生什么，其实并没有什么坏处。
Dialogue: 0,0:30:45.02,0:30:46.41,中文,,0,0,0,,让我删除这一行。
Dialogue: 0,0:30:46.41,0:30:50.15,中文,,0,0,0,,让我回到终端窗口，清空屏幕，然后再次运行 make hello。
Dialogue: 0,0:30:50.15,0:30:53.45,中文,,0,0,0,,现在让我们尝试在没有第一行的情况下编译这个程序。
Dialogue: 0,0:30:53.45,0:30:53.85,中文,,0,0,0,,为什么？
Dialogue: 0,0:30:53.85,0:30:54.69,中文,,0,0,0,,我不明白。
Dialogue: 0,0:30:54.69,0:30:56.41,中文,,0,0,0,,让我们看看会发生什么。
Dialogue: 0,0:30:56.41,0:30:59.11,中文,,0,0,0,,这又是一个错误，但是让我们看看。
Dialogue: 0,0:30:59.11,0:31:04.15,中文,,0,0,0,,Hello.c 第 5 行，第 5 个字符，所以它很早就出现了，错误。
Dialogue: 0,0:31:04.15,0:31:09.38,中文,,0,0,0,,隐式声明库函数 printf，类型为 int，然后是点，点，点。
Dialogue: 0,0:31:09.38,0:31:12.66,中文,,0,0,0,,所以隐式声明了库函数 printf。
Dialogue: 0,0:31:12.66,0:31:14.46,中文,,0,0,0,,所以这听起来很神秘。
Dialogue: 0,0:31:14.46,0:31:17.14,中文,,0,0,0,,你会越来越善于理解这样的短语。
Dialogue: 0,0:31:17.14,0:31:22.81,中文,,0,0,0,,但显然，我确实需要 standardio.h 的 include 行。
Dialogue: 0,0:31:22.81,0:31:24.03,中文,,0,0,0,,但为什么？
Dialogue: 0,0:31:24.03,0:31:33.57,中文,,0,0,0,,基于这个现象，你对第一行代码的作用有什么直觉？
Dialogue: 0,0:31:33.57,0:31:37.85,中文,,0,0,0,,直观地说，为什么它必须在那里？
Dialogue: 0,0:31:37.85,0:31:38.27,中文,,0,0,0,,没错。
Dialogue: 0,0:31:38.27,0:31:42.23,中文,,0,0,0,,这就像导入一个库，以便你可以在屏幕上打印内容。
Dialogue: 0,0:31:42.23,0:31:45.23,中文,,0,0,0,,在 Scratch 中，大多数拼图块都不需要这样做。
Dialogue: 0,0:31:45.23,0:31:55.22,中文,,0,0,0,,但你可能还记得，在第 0 周，我点击了 Scratch 屏幕左下角的“扩展”按钮，导入了一些用于文本转语音的额外拼图块。
Dialogue: 0,0:31:55.22,0:32:00.20,中文,,0,0,0,,那给了我们一种毛骨悚然的、拟人化的声音，实际上是从猫嘴里发出来的。
Dialogue: 0,0:32:00.20,0:32:04.55,中文,,0,0,0,,这就像添加一个库，别人写的代码。
Dialogue: 0,0:32:04.55,0:32:06.61,中文,,0,0,0,,在那种情况下，它来自第三方。
Dialogue: 0,0:32:06.61,0:32:08.41,中文,,0,0,0,,但我可以访问它。
Dialogue: 0,0:32:08.41,0:32:09.35,中文,,0,0,0,,这里也一样。
Dialogue: 0,0:32:09.35,0:32:20.15,中文,,0,0,0,,事实证明，在 C 语言中你并不能自动获得 printf。你必须包含一个所谓的头文件，它声明了该函数的存在。
Dialogue: 0,0:32:20.15,0:32:22.57,中文,,0,0,0,,从历史上看，这样做的原因只是为了提高效率。
Dialogue: 0,0:32:22.57,0:32:30.59,中文,,0,0,0,,在过去，当计算机速度非常慢且资源受限时，你不会想让自己访问所有功能。
Dialogue: 0,0:32:30.59,0:32:34.86,中文,,0,0,0,,你只想包含你真正关心的函数。
Dialogue: 0,0:32:34.86,0:32:37.60,中文,,0,0,0,,如今，这有点像一个，
Dialogue: 0,0:32:37.60,0:32:42.78,中文,,0,0,0,,复制粘贴步骤，因为你几乎总是想在屏幕上打印一些东西，至少在编写这样的程序时是这样。
Dialogue: 0,0:32:42.78,0:32:50.57,中文,,0,0,0,,但是这些所谓头文件包含了关于标准 I/O 库中所有函数的足够信息。
Dialogue: 0,0:32:50.57,0:32:53.73,中文,,0,0,0,,标准 I/O 仅表示标准输入和输出。
Dialogue: 0,0:32:53.73,0:32:54.65,中文,,0,0,0,,这很合理，对吧？
Dialogue: 0,0:32:54.65,0:32:57.15,中文,,0,0,0,,因为打印是非常基本的输出。
Dialogue: 0,0:32:57.15,0:33:00.32,中文,,0,0,0,,事实证明，还有其他函数可以从人的键盘获取输入。
Dialogue: 0,0:33:00.32,0:33:01.34,中文,,0,0,0,,稍后会详细介绍。
Dialogue: 0,0:33:01.34,0:33:07.84,中文,,0,0,0,,但任何时候你想在 C 语言中在屏幕上打印内容，都需要在代码顶部包含这个头文件。
Dialogue: 0,0:33:07.84,0:33:18.25,中文,,0,0,0,,这实际上是告诉编译器，我要使用标准 I/O 库中的功能，包括这个例子中的 printf。
Dialogue: 0,0:33:18.25,0:33:21.93,中文,,0,0,0,,如果你不小心省略了头文件，程序将无法运行。
Dialogue: 0,0:33:21.93,0:33:28.07,中文,,0,0,0,,因为它不知道 printf 是什么，它会认为这是一个无法识别的符号。
Dialogue: 0,0:33:28.07,0:33:32.84,中文,,0,0,0,,好，关于这行代码，大家有什么问题吗？
Dialogue: 0,0:33:32.84,0:33:37.66,中文,,0,0,0,,这行代码，或者这些头文件是什么？
Dialogue: 0,0:33:37.66,0:33:40.88,中文,,0,0,0,,你可能会想，我怎么知道有哪些函数存在呢？
Dialogue: 0,0:33:40.88,0:33:43.85,中文,,0,0,0,,我怎么知道我到底想要包含哪些文件呢？
Dialogue: 0,0:33:43.85,0:33:48.81,中文,,0,0,0,,事实证明，C 语言是一门拥有多年历史的语言，它有丰富的文档。
Dialogue: 0,0:33:48.81,0:33:52.82,中文,,0,0,0,,需要注意的是，它的文档不一定对用户友好。
Dialogue: 0,0:33:52.82,0:34:01.84,中文,,0,0,0,,但这门课程我们提供了一个简化版的 C 语言官方文档，网址是 manual.cs50.io。
Dialogue: 0,0:34:01.84,0:34:06.15,中文,,0,0,0,,在 C 语言和其他语言中，有所谓的手册页。
Dialogue: 0,0:34:06.15,0:34:14.63,中文,,0,0,0,,这些只是基于文本的文档，老实说，通常是用一种只有经验丰富的程序员才能理解的语气写的。
Dialogue: 0,0:34:14.63,0:34:27.86,中文,,0,0,0,,因此，在这个版本的相同文档中，我们导入了所有原始的官方文档，\N但我们为你在课堂上可能使用的许多功能添加了一种不太官方的英文翻译，只是为了帮助你入门。
Dialogue: 0,0:34:27.86,0:34:30.76,中文,,0,0,0,,所以最终你并不需要这份文档。
Dialogue: 0,0:34:30.76,0:34:39.89,中文,,0,0,0,,但刚开始的时候，我们会把它翻译成你可能更容易理解的术语，比如助教的术语，而不是这些文档的原作者的术语。
Dialogue: 0,0:34:39.89,0:34:52.96,中文,,0,0,0,,例如，如果你有兴趣阅读 standard io.h 头文件中有哪些函数，你可以访问这样的 URL，或者你可以在 manual.cs50.io 中搜索它。
Dialogue: 0,0:34:52.96,0:34:56.48,中文,,0,0,0,,这将向你展示该库中所有可用函数的列表。
Dialogue: 0,0:34:56.48,0:34:58.45,中文,,0,0,0,,printf 确实是其中之一。
Dialogue: 0,0:34:58.45,0:35:04.09,中文,,0,0,0,,然后你可以进一步点击，到达一个像这样的 URL，它会为你提供关于如何使用 printf 的所有文档。
Dialogue: 0,0:35:04.09,0:35:07.53,中文,,0,0,0,,事实证明，除了打印 hello world 之外，你还可以做更多的事情。
Dialogue: 0,0:35:07.53,0:35:09.69,中文,,0,0,0,,今天我们将初步了解一下。
Dialogue: 0,0:35:09.69,0:35:18.32,中文,,0,0,0,,但事实证明，文档始终是权威来源，最终可以回答诸如“我能做什么”和“我该怎么做”之类的问题。
Dialogue: 0,0:35:18.32,0:35:26.15,中文,,0,0,0,,同时，CS50 有自己的库，可以通过名为 cs50.h 的头文件访问。
Dialogue: 0,0:35:26.15,0:35:34.29,中文,,0,0,0,,事实证明，在 C 语言中，一旦你习惯了所有的花括号、圆括号、引号等等，输出实际上相当容易，相对而言。
Dialogue: 0,0:35:34.29,0:35:36.58,中文,,0,0,0,,但输入要困难一些。
Dialogue: 0,0:35:36.58,0:35:41.12,中文,,0,0,0,,如果你之前编写过程序，输入在 Python 中并不难。
Dialogue: 0,0:35:41.12,0:35:42.54,中文,,0,0,0,,在 Java 中也不难。
Dialogue: 0,0:35:42.54,0:35:46.40,中文,,0,0,0,,在 C 语言中则更难做到。我们将在几周后看到原因。
Dialogue: 0,0:35:46.40,0:35:56.59,中文,,0,0,0,,但在课程的前几周，我们实际上为你提供了一些辅助轮，我们在 cs50.h 文件中声明了一些函数。
Dialogue: 0,0:35:56.59,0:35:59.35,中文,,0,0,0,,它的文档位于这样的 URL 中。
Dialogue: 0,0:35:59.35,0:36:01.21,中文,,0,0,0,,稍后，我们将使用其中的一些函数。
Dialogue: 0,0:36:01.21,0:36:17.01,中文,,0,0,0,,你会看到 CS50 为你提供了一些函数，比如 getchar 用于从用户键盘获取单个字符，\Ngetint 用于从用户键盘获取整数，getstring 用于从用户键盘获取文本序列，以及其他一些函数。
Dialogue: 0,0:36:17.01,0:36:21.21,中文,,0,0,0,,那么，让我们实际使用其中的一些函数，比如，重新审视一下
Dialogue: 0,0:36:21.21,0:36:26.64,中文,,0,0,0,,实际上是我们上次在 Scratch 中编写的第二个程序，它在输出中添加了一些输入。
Dialogue: 0,0:36:26.64,0:36:28.72,中文,,0,0,0,,所以 Scratch 的第一个版本只是 hello, world。
Dialogue: 0,0:36:28.72,0:36:31.34,中文,,0,0,0,,每次你点击绿旗，它都会说同样的话。
Dialogue: 0,0:36:31.34,0:36:33.26,中文,,0,0,0,,回想一下，版本 2 是这样做的。
Dialogue: 0,0:36:33.26,0:36:35.44,中文,,0,0,0,,它询问用户，你叫什么名字？
Dialogue: 0,0:36:35.44,0:36:40.96,中文,,0,0,0,,然后它以某种方式返回了一个返回值，我们称之为返回值。
Dialogue: 0,0:36:40.96,0:36:46.51,中文,,0,0,0,,然后我们将 hello 和那个名字连接起来，在屏幕上显示一些更有趣的东西。
Dialogue: 0,0:36:46.51,0:36:48.57,中文,,0,0,0,,那么这个模型是什么样的呢？
Dialogue: 0,0:36:48.57,0:36:49.63,中文,,0,0,0,,和以前一样。
Dialogue: 0,0:36:49.63,0:36:54.61,中文,,0,0,0,,中间有一个函数，函数就像我们算法的代码实现。
Dialogue: 0,0:36:54.61,0:37:00.20,中文,,0,0,0,,它接收一个或多个参数，比如你想在屏幕上最终显示什么。
Dialogue: 0,0:37:00.20,0:37:03.50,中文,,0,0,0,,在这种情况下，返回值实际上是一个返回的值。
Dialogue: 0,0:37:03.50,0:37:08.61,中文,,0,0,0,,所以在获取输入的情况下，我们可以再次考虑上周的 ask 模块。
Dialogue: 0,0:37:08.61,0:37:12.61,中文,,0,0,0,,它的输入是你想问用户的任何英文单词。
Dialogue: 0,0:37:12.61,0:37:14.65,中文,,0,0,0,,然后它返回一个值。
Dialogue: 0,0:37:14.65,0:37:22.43,中文,,0,0,0,,在 MIT 的世界里，这在默认情况下被称为 answer，我们将在 C 语言中看到。最终你可以在变量中随意命名这些返回值。
Dialogue: 0,0:37:22.43,0:37:24.00,中文,,0,0,0,,但这与副作用不同。
Dialogue: 0,0:37:24.00,0:37:29.08,中文,,0,0,0,,副作用通常是在屏幕上发生的可视化效果，比如语音气泡或 hello world。
Dialogue: 0,0:37:29.08,0:37:34.18,中文,,0,0,0,,返回值实际上是你从函数中获得的可以用来使用或重复使用的值。
Dialogue: 0,0:37:34.18,0:37:38.46,中文,,0,0,0,,那么，如何将上周的 Scratch 模块转换为本周的 C 代码呢？
Dialogue: 0,0:37:38.46,0:37:42.54,中文,,0,0,0,,如果你想询问用户一些信息，比如他们的名字，你可以这样做。
Dialogue: 0,0:37:42.54,0:37:50.11,中文,,0,0,0,,使用一个叫做 get_string 的 CS50 函数，并使用括号来表示，输入也在这里。
Dialogue: 0,0:37:50.11,0:37:51.67,中文,,0,0,0,,然后你可以输入句子。
Dialogue: 0,0:37:51.67,0:37:54.31,中文,,0,0,0,,你想问用户，你的名字是什么？
Dialogue: 0,0:37:54.31,0:37:59.61,中文,,0,0,0,,但在 C 语言中，你确实需要这些引号，所以我也会把它们加上。
Dialogue: 0,0:37:59.61,0:38:08.38,中文,,0,0,0,,很细微，但是我特意在问号之后、双引号之前加了一个空格，这样光标就会移动一格。
Dialogue: 0,0:38:08.38,0:38:11.94,中文,,0,0,0,,因为在这种情况下，我们不会像在 Scratch 中那样得到一个特殊的对话框。
Dialogue: 0,0:38:11.94,0:38:13.75,中文,,0,0,0,,它只会将光标停在原处。
Dialogue: 0,0:38:13.75,0:38:19.91,中文,,0,0,0,,所以我们会看到，从美观上来说，这只是将闪烁的光标在屏幕上的句子后移动了一个空格。
Dialogue: 0,0:38:19.91,0:38:27.42,中文,,0,0,0,,但问题是，在 Scratch 中，我们可以自动地在一个名为 answer 的特殊变量中获得用户的答案。
Dialogue: 0,0:38:27.42,0:38:30.39,中文,,0,0,0,,在 C 语言中，你需要更具体一些。
Dialogue: 0,0:38:30.39,0:38:35.90,中文,,0,0,0,,在 C 语言中，如果你想从像 get_string 这样的函数中获取返回值，
Dialogue: 0,0:38:35.90,0:38:40.48,中文,,0,0,0,,你需要使用一个等号，然后在左边写上一个变量名。
Dialogue: 0,0:38:40.48,0:38:42.32,中文,,0,0,0,,变量的选择权在你。
Dialogue: 0,0:38:42.32,0:38:49.05,中文,,0,0,0,,我可以用任何名称来命名它，x、y、z 都可以。为了与 MIT 在 Scratch 中的做法保持一致，我将它命名为 answer。
Dialogue: 0,0:38:49.05,0:38:53.19,中文,,0,0,0,,但请注意，这本身并不代表相等。
Dialogue: 0,0:38:53.19,0:38:55.67,中文,,0,0,0,,在这种情况下，这是赋值。
Dialogue: 0,0:38:55.67,0:39:02.50,中文,,0,0,0,,在 C 语言中，当你使用单个等号时，这意味着将右边的值复制到左边的值。
Dialogue: 0,0:39:02.50,0:39:05.40,中文,,0,0,0,,从右到左。 这对我们有什么用呢？
Dialogue: 0,0:39:05.40,0:39:14.66,中文,,0,0,0,,如果 get_string 是一个函数，它会提示用户“你叫什么名字”，并且我声称它有一个返回值，这意味着它会返回给我一些值。
Dialogue: 0,0:39:14.66,0:39:17.84,中文,,0,0,0,,但是在 C 语言中，我需要对这个值做一些处理。
Dialogue: 0,0:39:17.84,0:39:27.45,中文,,0,0,0,,如果我想将这个值复制到一个我可以使用和重复使用的变量中，我需要使用一个等号，并在等号的左边自己定义一个变量名。
Dialogue: 0,0:39:27.45,0:39:28.43,中文,,0,0,0,,这里有一些规则。
Dialogue: 0,0:39:28.43,0:39:29.45,中文,,0,0,0,,这里也有一些惯例。
Dialogue: 0,0:39:29.45,0:39:34.73,中文,,0,0,0,,但通常情况下，如果使用全小写的单词，就不会有问题。
Dialogue: 0,0:39:34.73,0:39:36.94,中文,,0,0,0,,但 C 比这更“死板”。
Dialogue: 0,0:39:36.94,0:39:43.50,中文,,0,0,0,,之前写过代码的同学可能不习惯这一点，例如，几周后我们会学习的 Python。
Dialogue: 0,0:39:43.50,0:39:48.86,中文,,0,0,0,,你还必须告诉 C 你要存储的值的类型。
Dialogue: 0,0:39:48.86,0:40:04.34,中文,,0,0,0,,如果我确实想要用户输入一串文本，而不是整数，也不是单个字符，\N而是一整串文本，比如一个短语、一个句子，在这个例子中是一个名字，我必须告诉 C 这个变量的类型是 string。
Dialogue: 0,0:40:04.34,0:40:07.58,中文,,0,0,0,,这有点啰嗦，但你会习惯的，你只需要精确一点。
Dialogue: 0,0:40:07.58,0:40:12.80,中文,,0,0,0,,你要告诉计算机这个变量中要放入什么类型的值。
Dialogue: 0,0:40:12.80,0:40:19.35,中文,,0,0,0,,这已经很接近正确了，但我遗漏了一些非常重要的东西。
Dialogue: 0,0:40:19.35,0:40:20.65,中文,,0,0,0,,还有什么遗漏吗？
Dialogue: 0,0:40:20.65,0:40:22.09,中文,,0,0,0,,嗯？
Dialogue: 0,0:40:22.09,0:40:24.12,中文,,0,0,0,,分号，这是一个语句。
Dialogue: 0,0:40:24.12,0:40:27.84,中文,,0,0,0,,这就像代码中的一个完整的想法。
Dialogue: 0,0:40:27.84,0:40:31.88,中文,,0,0,0,,我最后需要在最后加上分号。
Dialogue: 0,0:40:31.88,0:40:35.62,中文,,0,0,0,,这有点拗口，但让我们现在尝试在我的代码中使用它。
Dialogue: 0,0:40:35.62,0:40:40.30,中文,,0,0,0,,让我回到 VS Code，这里有我的代码的版本 0。
Dialogue: 0,0:40:40.30,0:40:51.62,中文,,0,0,0,,让我继续在 hello.c 的顶部添加另一个文件，也就是 include cs50.h，这样我就可以访问 get_string 和任何我可能需要的东西了。
Dialogue: 0,0:40:51.62,0:40:56.85,中文,,0,0,0,,现在让我继续在这些花括号中添加一行代码。
Dialogue: 0,0:40:56.85,0:40:58.53,中文,,0,0,0,,让我继续做这件事。
Dialogue: 0,0:40:58.53,0:41:04.97,中文,,0,0,0,,string answer = get_string("你叫什么名字?")。
Dialogue: 0,0:41:04.97,0:41:07.23,中文,,0,0,0,,我要在双引号前加一个空格。
Dialogue: 0,0:41:07.23,0:41:10.56,中文,,0,0,0,,我将用分号结束我的想法。
Dialogue: 0,0:41:10.56,0:41:14.26,中文,,0,0,0,,现在让我故意犯个错误来说明这一点。
Dialogue: 0,0:41:14.26,0:41:19.51,中文,,0,0,0,,让我尝试将 hello, world 更改为 hello, answer。
Dialogue: 0,0:41:19.51,0:41:24.52,中文,,0,0,0,,现在，即使这是一些新的代码行，您也可以看到我已经在哪里出错了。
Dialogue: 0,0:41:24.52,0:41:27.16,中文,,0,0,0,,但是让我现在尝试制作这个程序。
Dialogue: 0,0:41:27.16,0:41:28.01,中文,,0,0,0,,目前为止，一切都好。
Dialogue: 0,0:41:28.01,0:41:29.01,中文,,0,0,0,,所以没有错误信息。
Dialogue: 0,0:41:29.01,0:41:30.11,中文,,0,0,0,,这是一件好事。
Dialogue: 0,0:41:30.11,0:41:32.90,中文,,0,0,0,,让我继续运行 ./hello。
Dialogue: 0,0:41:32.90,0:41:34.12,中文,,0,0,0,,你会看到提示。
Dialogue: 0,0:41:34.12,0:41:34.98,中文,,0,0,0,,你叫什么名字？
Dialogue: 0,0:41:34.98,0:41:35.64,中文,,0,0,0,,问号。
Dialogue: 0,0:41:35.64,0:41:43.70,中文,,0,0,0,,请注意，光标确实在右侧一个空格处，因为我认为在问号后面留一个空格会更漂亮，而不是将其紧挨着问号。
Dialogue: 0,0:41:43.70,0:41:44.58,中文,,0,0,0,,让我输入我的名字。
Dialogue: 0,0:41:44.58,0:41:48.38,中文,,0,0,0,,即使你以前从未编过程序，我也搞砸了。
Dialogue: 0,0:41:48.38,0:41:52.38,中文,,0,0,0,,当我按回车键时，我们会在屏幕上看到什么？
Dialogue: 0,0:41:52.38,0:41:54.24,中文,,0,0,0,,是的，hello, answer，很有可能。
Dialogue: 0,0:41:54.24,0:41:54.76,中文,,0,0,0,,为什么？
Dialogue: 0,0:41:54.76,0:41:56.71,中文,,0,0,0,,因为计算机将按字面意思理解我的话。
Dialogue: 0,0:41:56.71,0:42:03.29,中文,,0,0,0,,如果我说，引号，hello, answer，那就是将要输出到屏幕的字符串，后跟一个换行符。
Dialogue: 0,0:42:03.29,0:42:08.64,中文,,0,0,0,,我们需要某种方法将答案插入这行代码中。
Dialogue: 0,0:42:08.64,0:42:14.22,中文,,0,0,0,,这不像 Scratch 那样简单，你可以在那里抓取第二个 say 块并拖放到变量中。
Dialogue: 0,0:42:14.22,0:42:15.66,中文,,0,0,0,,我们实际上需要一种新的语法。
Dialogue: 0,0:42:15.66,0:42:23.09,中文,,0,0,0,,它一开始看起来很奇怪，但在当今的软件中随处可见，尤其是在 C 语言和其他某些语言中。
Dialogue: 0,0:42:23.09,0:42:25.81,中文,,0,0,0,,我来提出这个建议。
Dialogue: 0,0:42:25.81,0:42:27.59,中文,,0,0,0,,我是这样解决的。
Dialogue: 0,0:42:27.59,0:42:32.49,中文,,0,0,0,,回想一下我们在 Scratch 中做这个的时候，最优雅的解决方案是这样的。
Dialogue: 0,0:42:32.49,0:42:36.72,中文,,0,0,0,,我们仍然使用了 say 块，它类似于今天的 printf。
Dialogue: 0,0:42:36.72,0:42:43.42,中文,,0,0,0,,但是我使用了 Scratch 中的 join 拼图块来组合 hello，逗号，空格，以及人的名字。
Dialogue: 0,0:42:43.42,0:42:45.88,中文,,0,0,0,,那么我们如何将这段代码转换为 C 语言呢？
Dialogue: 0,0:42:45.88,0:42:47.98,中文,,0,0,0,,现在看起来会有所不同了。
Dialogue: 0,0:42:47.98,0:42:53.73,中文,,0,0,0,,我将从带有括号和分号的 printf 开始，它代表 say 块。
Dialogue: 0,0:42:53.73,0:42:55.21,中文,,0,0,0,,但是我现在如何进行这种拼接呢？
Dialogue: 0,0:42:55.21,0:42:58.33,中文,,0,0,0,,这就是拼图块不能完美转换的地方。
Dialogue: 0,0:42:58.33,0:43:00.37,中文,,0,0,0,,这将是这样做的方式。
Dialogue: 0,0:43:00.37,0:43:03.59,中文,,0,0,0,,你放置 hello，逗号，然后是一个占位符。
Dialogue: 0,0:43:03.59,0:43:08.00,中文,,0,0,0,,这就是 C 语言中所谓的格式代码，特别是针对 printf 的。
Dialogue: 0,0:43:08.00,0:43:11.38,中文,,0,0,0,,它的意思就是这是一个字符串的占位符。
Dialogue: 0,0:43:11.38,0:43:12.78,中文,,0,0,0,,同样，字符串只是文本。
Dialogue: 0,0:43:12.78,0:43:19.22,中文,,0,0,0,,这意味着，嘿，计算机，打印出字面上的 hello，逗号，空格，然后不是字面上的 %s。
Dialogue: 0,0:43:19.22,0:43:24.07,中文,,0,0,0,,%s 会被特殊处理，表示在这里插入某个值。
Dialogue: 0,0:43:24.07,0:43:25.57,中文,,0,0,0,,还有什么需要的呢？
Dialogue: 0,0:43:25.57,0:43:27.39,中文,,0,0,0,,这仍然是一些文本。
Dialogue: 0,0:43:27.39,0:43:32.61,中文,,0,0,0,,我还是要用双引号把整个内容括起来。
Dialogue: 0,0:43:32.61,0:43:37.93,中文,,0,0,0,,我仍然要包含反斜杠 n，只是为了保持代码整洁，并将光标移动到下一行。
Dialogue: 0,0:43:37.93,0:43:45.30,中文,,0,0,0,,所以在 C 语言中，最后一步是以某种方式将答案与 “hello” 这个词连接起来。
Dialogue: 0,0:43:45.30,0:43:51.12,中文,,0,0,0,,方法是使用 printf，并给它传递不止一个参数，而我一直传递的是一个参数。
Dialogue: 0,0:43:51.12,0:43:54.00,中文,,0,0,0,,我一直给它传递一个字符串，用引号括起来。
Dialogue: 0,0:43:54.00,0:43:55.96,中文,,0,0,0,,我现在要添加一个逗号。
Dialogue: 0,0:43:55.96,0:44:04.41,中文,,0,0,0,,然后是我希望 printf 返回并插入到 %s 中的值的名称。printf 在这方面很智能。
Dialogue: 0,0:44:04.41,0:44:10.14,中文,,0,0,0,,如果你有一个 %s，并且在逗号后面还有一个额外的参数，它就会从右到左进行处理。
Dialogue: 0,0:44:10.14,0:44:11.14,中文,,0,0,0,,把它插入进去。
Dialogue: 0,0:44:11.14,0:44:16.44,中文,,0,0,0,,如果你有两个 %s，并且在逗号后面有两个变量，那也没问题。
Dialogue: 0,0:44:16.44,0:44:24.75,中文,,0,0,0,,如果你用逗号分隔它们，它会将第一个变量插入到第一个 %s 中，将第二个变量插入到第二个 %s 中。它只是从左到右的运算顺序。
Dialogue: 0,0:44:24.75,0:44:32.78,中文,,0,0,0,,虽然它不像这样美观或简单，但这就是在 C 语言中的实现方式。好了，让我暂停一下，因为这里有很多符号。
Dialogue: 0,0:44:32.78,0:44:35.14,中文,,0,0,0,,关于这里的技术有什么问题吗？
Dialogue: 0,0:44:35.14,0:44:40.47,中文,,0,0,0,,有。
Dialogue: 0,0:44:40.47,0:44:41.55,中文,,0,0,0,,是的，非常好问题。
Dialogue: 0,0:44:41.55,0:44:45.64,中文,,0,0,0,,为什么我刚才排除了反斜杠 n？
Dialogue: 0,0:44:45.64,0:44:48.32,中文,,0,0,0,,实际上只是我的审美观，如果你愿意这样理解的话。
Dialogue: 0,0:44:48.32,0:44:49.80,中文,,0,0,0,,没有比这更好的理由了。
Dialogue: 0,0:44:49.80,0:44:54.62,中文,,0,0,0,,如果我回顾我的代码，你会发现我没有在那里写反斜杠 n。
Dialogue: 0,0:44:54.62,0:45:00.58,中文,,0,0,0,,这只是因为无论出于何种风格，我都希望名字紧跟在问题后面输入。
Dialogue: 0,0:45:00.58,0:45:04.16,中文,,0,0,0,,我完全可以在那里添加一个反斜杠 n而不是空格。
Dialogue: 0,0:45:04.16,0:45:06.58,中文,,0,0,0,,那样我就可以在下面输入了。
Dialogue: 0,0:45:06.58,0:45:07.44,中文,,0,0,0,,完全没问题。
Dialogue: 0,0:45:07.44,0:45:09.37,中文,,0,0,0,,只是想给你看一些不同的东西。
Dialogue: 0,0:45:09.37,0:45:10.22,中文,,0,0,0,,好，观察仔细。
Dialogue: 0,0:45:10.22,0:45:12.16,中文,,0,0,0,,是的。
Dialogue: 0,0:45:12.16,0:45:14.58,中文,,0,0,0,,可以展示一个包含 2% s 的例子吗？
Dialogue: 0,0:45:14.58,0:45:15.28,中文,,0,0,0,,当然。
Dialogue: 0,0:45:15.28,0:45:17.46,中文,,0,0,0,,让我在 VS Code 中演示一下。
Dialogue: 0,0:45:17.46,0:45:20.20,中文,,0,0,0,,让我清除终端窗口的内容。
Dialogue: 0,0:45:20.20,0:45:21.08,中文,,0,0,0,,让我这样做。
Dialogue: 0,0:45:21.08,0:45:26.30,中文,,0,0,0,,我将变量名设为 first，而不是到处都用 answer。
Dialogue: 0,0:45:26.30,0:45:27.50,中文,,0,0,0,,我会问两个问题。
Dialogue: 0,0:45:27.50,0:45:28.99,中文,,0,0,0,,你的名字是什么？
Dialogue: 0,0:45:28.99,0:45:34.41,中文,,0,0,0,,现在让我输入 string last = get_string("姓是什么？")，大小写很重要。
Dialogue: 0,0:45:34.41,0:45:36.17,中文,,0,0,0,,让我修正一下这里的 s。
Dialogue: 0,0:45:36.17,0:45:41.81,中文,,0,0,0,,"你的姓是什么？" 分号。
Dialogue: 0,0:45:41.81,0:45:52.90,中文,,0,0,0,,然后我们插入第一个 %s 和第二个 %s。现在我要插入 first first 和 last last，纯属巧合。
Dialogue: 0,0:45:52.90,0:45:55.48,中文,,0,0,0,,现在我要回到终端窗口。
Dialogue: 0,0:45:55.48,0:46:00.48,中文,,0,0,0,,生成 hello，祈祷一切顺利，./hello。
Dialogue: 0,0:46:00.48,0:46:02.76,中文,,0,0,0,,这是我的第一个问题，David。
Dialogue: 0,0:46:02.76,0:46:04.38,中文,,0,0,0,,这是我的第二个问题，Malan。
Dialogue: 0,0:46:04.38,0:46:06.71,中文,,0,0,0,,再一次，你好，David Malan。
Dialogue: 0,0:46:06.71,0:46:08.59,中文,,0,0,0,,它只是从左到右插入它们。
Dialogue: 0,0:46:08.59,0:46:12.75,中文,,0,0,0,,我这样做只是为了与 Scratch 保持一致性，让我继续撤销这个操作。
Dialogue: 0,0:46:12.75,0:46:15.27,中文,,0,0,0,,我将回到像这样的回答。
Dialogue: 0,0:46:15.27,0:46:18.00,中文,,0,0,0,,我将回到只询问人名的部分。
Dialogue: 0,0:46:18.00,0:46:19.30,中文,,0,0,0,,我要删除对 last 的提及。
Dialogue: 0,0:46:19.30,0:46:26.14,中文,,0,0,0,,我要删除对第二个 %s 的提及。现在，如果我重新编译这个更简单的版本，我确实搞砸了。
Dialogue: 0,0:46:26.14,0:46:27.85,中文,,0,0,0,,这不是我的本意。
Dialogue: 0,0:46:27.85,0:46:31.96,中文,,0,0,0,,我做错了什么？
Dialogue: 0,0:46:31.96,0:46:33.28,中文,,0,0,0,,是的，只是新手错误。
Dialogue: 0,0:46:33.28,0:46:39.69,中文,,0,0,0,,我将变量改回了 answer，以便与第 0 周保持一致，但我在这里没有改。
Dialogue: 0,0:46:39.69,0:46:42.75,中文,,0,0,0,,我有使用未声明的标识符 first。
Dialogue: 0,0:46:42.75,0:46:46.61,中文,,0,0,0,,它是未声明的，因为我在前一行声明了 answer。
Dialogue: 0,0:46:46.61,0:46:47.87,中文,,0,0,0,,我没有声明 first。
Dialogue: 0,0:46:47.87,0:46:51.24,中文,,0,0,0,,直观地说，我想要把它改成那样。
Dialogue: 0,0:46:51.24,0:46:53.26,中文,,0,0,0,,现在让我再次执行 make hello。
Dialogue: 0,0:46:53.26,0:46:54.82,中文,,0,0,0,,./hello。
Dialogue: 0,0:46:54.82,0:46:57.80,中文,,0,0,0,,这次只输入我的名字，它就在那里。
Dialogue: 0,0:46:57.80,0:46:59.50,中文,,0,0,0,,你好，David。
Dialogue: 0,0:46:59.50,0:47:02.19,中文,,0,0,0,,那么，关于这个，printf 的语法有什么问题吗？
Dialogue: 0,0:47:02.19,0:47:05.49,中文,,0,0,0,,有。
Dialogue: 0,0:47:05.49,0:47:13.20,中文,,0,0,0,,我将放大的占位符只是一个百分号，然后是一个 s。在我的字符串里面。
Dialogue: 0,0:47:13.20,0:47:17.46,中文,,0,0,0,,是 %s。然后在引号外面有一个逗号。
Dialogue: 0,0:47:17.46,0:47:30.53,中文,,0,0,0,,然后是变量的名称，我希望将其值插入到 %s 中。现在请注意，在第 7 行的括号内技术上有两个逗号。
Dialogue: 0,0:47:30.53,0:47:37.67,中文,,0,0,0,,但我认为 printf 目前只接受两个参数。
Dialogue: 0,0:47:37.67,0:47:42.18,中文,,0,0,0,,为什么有两个逗号却只有两个参数？
Dialogue: 0,0:47:42.18,0:47:50.22,中文,,0,0,0,,如果有两个逗号，你会认为有三个参数，对吧？
Dialogue: 0,0:47:50.22,0:47:53.14,中文,,0,0,0,,没错，引号之间的逗号只是一种英语语法。
Dialogue: 0,0:47:53.14,0:47:55.32,中文,,0,0,0,,它把“你好”和名字分开了。
Dialogue: 0,0:47:55.32,0:47:57.66,中文,,0,0,0,,这就是为什么它实际上不在引号内。
Dialogue: 0,0:47:57.66,0:48:08.93,中文,,0,0,0,,这也是为什么像 VSCode 这样的程序倾向于对它进行不同的语法高亮，\N只是为了让它在视觉上对你有所不同，尽管在这种情况下，它有点微妙，浅蓝色和白色。
Dialogue: 0,0:48:08.93,0:48:10.95,中文,,0,0,0,,但它确实在尽力而为。
Dialogue: 0,0:48:10.95,0:48:13.15,中文,,0,0,0,,关于这个占位符还有其他问题吗？
Dialogue: 0,0:48:13.15,0:48:13.29,中文,,0,0,0,,有？
Dialogue: 0,0:48:13.29,0:48:17.83,中文,,0,0,0,,你想在结尾加一个感叹号。
Dialogue: 0,0:48:17.83,0:48:22.57,中文,,0,0,0,,你在 answer 变量里加了个逗号，然后把它
Dialogue: 0,0:48:22.57,0:48:23.25,中文,,0,0,0,,啊，问得好。
Dialogue: 0,0:48:23.25,0:48:28.22,中文,,0,0,0,,如果我想在名字后面加一个感叹号，我需要再加一个占位符吗？
Dialogue: 0,0:48:28.22,0:48:30.14,中文,,0,0,0,,其实我可以更简单地做到这一点。
Dialogue: 0,0:48:30.14,0:48:33.64,中文,,0,0,0,,我可以把感叹号直接放在百分号后面。
Dialogue: 0,0:48:33.64,0:48:35.98,中文,,0,0,0,,我不需要额外的占位符。
Dialogue: 0,0:48:35.98,0:48:45.26,中文,,0,0,0,,如果我现在缩小并再次运行 make hello，输入 ./hello，只输入我的名字，没有感叹号，现在你会看到更兴奋的 hello。
Dialogue: 0,0:48:45.26,0:48:46.50,中文,,0,0,0,,printf 很聪明。
Dialogue: 0,0:48:46.50,0:48:51.59,中文,,0,0,0,,它会找到 %s 的位置，然后去替换它。
Dialogue: 0,0:48:51.59,0:49:01.37,中文,,0,0,0,,现在，我提议，编程中一个常见的情况是，一旦我们决定了如何设计东西，我们常常会把自己逼到角落里，有点后悔当初的决定。
Dialogue: 0,0:49:01.37,0:49:11.77,中文,,0,0,0,,谁能想到在这个字符串中使用 %s 作为 printf 的占位符会出现什么问题吗？
Dialogue: 0,0:49:11.77,0:49:17.36,中文,,0,0,0,,如果我们以这种特殊的方式使用百分号，可能会出现什么问题？
Dialogue: 0,0:49:17.36,0:49:29.97,中文,,0,0,0,,是的，如果你真的想在屏幕上显示 %s，或者只是一个百分号，不管出于什么奇怪的原因，事实证明，百分号在 printf 字符串中是被特殊处理的。
Dialogue: 0,0:49:29.97,0:49:31.34,中文,,0,0,0,,那么解决办法是什么呢？
Dialogue: 0,0:49:31.34,0:49:34.76,中文,,0,0,0,,这类问题有不同的解决模式。
Dialogue: 0,0:49:34.76,0:49:41.00,中文,,0,0,0,,但假设你想说，我得了 100% 之类的。
Dialogue: 0,0:49:41.00,0:49:43.71,中文,,0,0,0,,让我来彻底改变一下。
Dialogue: 0,0:49:43.71,0:49:47.33,中文,,0,0,0,,我在你的测试中得了 100% 或者别的什么。
Dialogue: 0,0:49:47.33,0:49:50.99,中文,,0,0,0,,让我继续运行 make hello，回车。
Dialogue: 0,0:49:50.99,0:49:53.17,中文,,0,0,0,,无效的转换说明符。
Dialogue: 0,0:49:53.17,0:49:57.51,中文,,0,0,0,,我不明白这是什么意思，但它在百分号下面划线，表示有问题。
Dialogue: 0,0:49:57.51,0:50:01.72,中文,,0,0,0,,事实证明，多年前人们就决定，好吧，该死，我们已经在用百分号了。
Dialogue: 0,0:50:01.72,0:50:05.22,中文,,0,0,0,,那么，2 个百分号将表示 1 个字面意义上的百分号。
Dialogue: 0,0:50:05.22,0:50:10.62,中文,,0,0,0,,现在，如果我重新运行 make hello，./hello，我得到了 100%。
Dialogue: 0,0:50:10.62,0:50:15.27,中文,,0,0,0,,会有这样的事情，说真的，你必须问别人，你必须用谷歌搜索，你必须在文档中查找。
Dialogue: 0,0:50:15.27,0:50:17.75,中文,,0,0,0,,但这类问题总是有解决办法的。
Dialogue: 0,0:50:17.75,0:50:19.96,中文,,0,0,0,,值得庆幸的是，它们并不经常出现。
Dialogue: 0,0:50:19.96,0:50:21.68,中文,,0,0,0,,是的。
Dialogue: 0,0:50:21.68,0:50:22.46,中文,,0,0,0,,只是指一下。
Dialogue: 0,0:50:22.46,0:50:23.16,中文,,0,0,0,,其他问题。
Dialogue: 0,0:50:23.16,0:50:27.96,中文,,0,0,0,,是的。
Dialogue: 0,0:50:27.96,0:50:31.42,中文,,0,0,0,,如果你有多个变量，它是按从左到右的顺序排列的。
Dialogue: 0,0:50:31.42,0:50:35.71,中文,,0,0,0,,所以 printf 会分析你在引号之间传递的第一个字符串。
Dialogue: 0,0:50:35.71,0:50:41.41,中文,,0,0,0,,无论第一个百分号是什么，逗号后面传递的第一个变量都会被插入到那里。
Dialogue: 0,0:50:41.41,0:50:44.74,中文,,0,0,0,,然后第二个变量被插入到第二个百分号的位置，第三个变量被插入到第三个百分号的位置，以此类推。
Dialogue: 0,0:50:44.74,0:50:47.28,中文,,0,0,0,,它只是基于从左到右的顺序。
Dialogue: 0,0:50:47.28,0:50:53.16,中文,,0,0,0,,是的。
Dialogue: 0,0:50:53.16,0:50:54.10,中文,,0,0,0,,它只是一个占位符。
Dialogue: 0,0:50:54.10,0:50:56.06,中文,,0,0,0,,它被称为格式代码。
Dialogue: 0,0:50:56.06,0:50:59.10,中文,,0,0,0,,它的意思就是在这里插入某个值。
Dialogue: 0,0:50:59.10,0:51:04.56,中文,,0,0,0,,几十年前编写 printf 函数的程序员决定将 %s 特殊对待。
Dialogue: 0,0:51:04.56,0:51:04.90,中文,,0,0,0,,为什么？
Dialogue: 0,0:51:04.90,0:51:05.48,中文,,0,0,0,,就是这样。
Dialogue: 0,0:51:05.48,0:51:06.98,中文,,0,0,0,,他们需要一个占位符。
Dialogue: 0,0:51:06.98,0:51:10.11,中文,,0,0,0,,他们认为，嗯，应该没有人真的会想要输入 %s。
Dialogue: 0,0:51:10.11,0:51:12.73,中文,,0,0,0,,如果他们真要这么做，他们可以直接输入 %%s。
Dialogue: 0,0:51:12.73,0:51:19.13,中文,,0,0,0,,他们决定在实现 printf 时，让代码分析传入的文本内容，
Dialogue: 0,0:51:19.13,0:51:25.18,中文,,0,0,0,,找到 %s，然后以某种方式将后面的值插入到该占位符中。
Dialogue: 0,0:51:25.18,0:51:28.43,中文,,0,0,0,,就这个问题。
Dialogue: 0,0:51:28.43,0:51:31.73,中文,,0,0,0,,抱歉。
Dialogue: 0,0:51:31.73,0:51:37.55,中文,,0,0,0,,啊，如果想输入单个字符，比如姓名首字母缩写，比如 DM 或 DJM，分别代表名字、中间名和姓氏的首字母，该怎么办？
Dialogue: 0,0:51:37.55,0:51:38.08,中文,,0,0,0,,当然可以。
Dialogue: 0,0:51:38.08,0:51:48.34,中文,,0,0,0,,这也完美地从你们二位的问题引出了 C 语言中通常所说的数据类型。事实证明，在 C 语言中，不仅有字符串作为文本。
Dialogue: 0,0:51:48.34,0:51:52.74,中文,,0,0,0,,我们将在接下来的几周内更详细地看到字符串的本质是什么。
Dialogue: 0,0:51:52.74,0:51:55.60,中文,,0,0,0,,但文本字符串并不是程序可以输出的唯一内容。
Dialogue: 0,0:51:55.60,0:51:58.97,中文,,0,0,0,,它们确实可以输出单个字符，比如姓名首字母。
Dialogue: 0,0:51:58.97,0:52:01.11,中文,,0,0,0,,它们也可以输出整数。
Dialogue: 0,0:52:01.11,0:52:06.09,中文,,0,0,0,,事实证明，printf 针对各种不同的数据类型都有不同的格式代码。
Dialogue: 0,0:52:06.09,0:52:17.76,中文,,0,0,0,,我们将在未来几周内看到的一些数据类型将包含在这个列表中，\N你会注意到它几乎与我之前列出的 CS50 函数完全一致，比如 get char、get_int、get_string。
Dialogue: 0,0:52:17.76,0:52:23.48,中文,,0,0,0,,我们之所以称它们为函数，是因为它们每个都被设计为返回不同类型的值。
Dialogue: 0,0:52:23.48,0:52:26.22,中文,,0,0,0,,在这个例子中，我们已经使用了 get_string。
Dialogue: 0,0:52:26.22,0:52:31.43,中文,,0,0,0,,我们很快就会看到 get_int，并且我们会看到使用其他函数的机会。
Dialogue: 0,0:52:31.43,0:52:48.54,中文,,0,0,0,,这些是可用数据类型的菜单，以及其他类型，在用 C 语言编写程序时可以使用。\N因此，你需要提前决定是要在这个变量中存储 int、string，还是在编写更高级的代码时存储图像、声音，甚至是视频。
Dialogue: 0,0:52:48.54,0:52:51.22,中文,,0,0,0,,这些都可以是不同的数据类型。
Dialogue: 0,0:52:51.22,0:52:54.49,中文,,0,0,0,,但现在，我们将只关注这些基本类型。
Dialogue: 0,0:52:54.49,0:52:55.17,中文,,0,0,0,,内容很多。
Dialogue: 0,0:52:55.17,0:52:57.05,中文,,0,0,0,,我们休息五分钟。
Dialogue: 0,0:52:57.05,0:52:57.93,中文,,0,0,0,,现在还没有饼干。
Dialogue: 0,0:52:57.93,0:53:00.18,中文,,0,0,0,,五分钟后回来，我们会深入探讨更多细节。
Dialogue: 0,0:53:00.18,0:53:05.82,中文,,0,0,0,,今天的第二次休息会有饼干。
Dialogue: 0,0:53:05.82,0:53:07.28,中文,,0,0,0,,好了，我们回来了。
Dialogue: 0,0:53:07.28,0:53:11.38,中文,,0,0,0,,如果你一直在家里跟着学习，但遇到了一些困难，这很正常。
Dialogue: 0,0:53:11.38,0:53:18.13,中文,,0,0,0,,事实上，讲座的目标通常是让你从概念上了解我们这周的学习内容。
Dialogue: 0,0:53:18.13,0:53:25.92,中文,,0,0,0,,但实际上，你需要通过动手实验和习题集，才能有机会按照自己的节奏来解决这些问题。
Dialogue: 0,0:53:25.92,0:53:28.86,中文,,0,0,0,,今天，我将介绍一些其他的构建块。
Dialogue: 0,0:53:28.86,0:53:34.04,中文,,0,0,0,,这两个概念我们会从头开始讲解，即条件语句，比如如何在 C 语言中使用。
Dialogue: 0,0:53:34.04,0:53:43.45,中文,,0,0,0,,在了解了如何使用函数（至少是 get_string 和 printf）以及如何使用变量（比如我之前创建的字符串）之后，
Dialogue: 0,0:53:43.45,0:53:47.13,中文,,0,0,0,,如何才能添加决策和条件语句呢？
Dialogue: 0,0:53:47.13,0:53:50.17,中文,,0,0,0,,在 Scratch 中，条件语句是这样的语法。
Dialogue: 0,0:53:50.17,0:53:56.38,中文,,0,0,0,,左侧是 Scratch 中表示两个变量 x 和 y 之间关系的代码。
Dialogue: 0,0:53:56.38,0:54:03.34,中文,,0,0,0,,如果 x < y，那么在屏幕上显示“x is less than y”。现在让我将它翻译成右侧的 C 代码。
Dialogue: 0,0:54:03.34,0:54:08.44,中文,,0,0,0,,假设 x 和 y 已经存在，那么在 C 语言中，相应的代码如下所示。
Dialogue: 0,0:54:08.44,0:54:09.78,中文,,0,0,0,,稍后会详细介绍。
Dialogue: 0,0:54:09.78,0:54:13.24,中文,,0,0,0,,注意我们会反复看到的一种模式。
Dialogue: 0,0:54:13.24,0:54:20.47,中文,,0,0,0,,x 和小于号 y 会被括号包围。回想一下，布尔表达式要用括号括起来。
Dialogue: 0,0:54:20.47,0:54:27.85,中文,,0,0,0,,布尔表达式是真假、是或否的答案，是你在决定是否要做某件事时试图提出的问题。
Dialogue: 0,0:54:27.85,0:54:29.23,中文,,0,0,0,,你要在那里使用括号。
Dialogue: 0,0:54:29.23,0:54:30.63,中文,,0,0,0,,非常相似。
Dialogue: 0,0:54:30.63,0:54:44.86,中文,,0,0,0,,在函数中，我们在 printf 和 get_string  使用括号，\N而这在使用关键字 if 时只是一种奇怪的风格不一致，作为最佳实践，你应该在 if  之后加一个空格。
Dialogue: 0,0:54:44.86,0:54:49.23,中文,,0,0,0,,使用像 printf 或 get_string 这样的函数时则不应该加空格。
Dialogue: 0,0:54:49.23,0:54:53.53,中文,,0,0,0,,两种方式都可以，但你会发现这些是大多数人都会遵守的代码风格规范。
Dialogue: 0,0:54:53.53,0:54:56.05,中文,,0,0,0,,在这里使用 if 时要加空格。
Dialogue: 0,0:54:56.05,0:55:02.50,中文,,0,0,0,,好了，现在在大括号内是你想要有条件地执行的实际代码。
Dialogue: 0,0:55:02.50,0:55:12.87,中文,,0,0,0,,因此，如果你想在 C 语言中仅当 x 实际上小于 y 时才打印出“x is less than y”，\N你需要使用这个左大括号，到目前为止，你可能很少在键盘上使用它。
Dialogue: 0,0:55:12.87,0:55:24.99,中文,,0,0,0,,右大括号在下面，它们就像拥抱一样包裹着 if 语句下面的一行或多行代码，这与这里的橙色块拥抱紫色拼图块的方式非常相似。
Dialogue: 0,0:55:24.99,0:55:27.23,中文,,0,0,0,,C 语言中没有图形，都是文本。
Dialogue: 0,0:55:27.23,0:55:32.09,中文,,0,0,0,,你可以认为这些大括号实际上代表着相同的概念。
Dialogue: 0,0:55:32.09,0:55:36.18,中文,,0,0,0,,顺便提一句，如果只有一行代码，
Dialogue: 0,0:55:36.18,0:55:41.36,中文,,0,0,0,,严格来说，在 if 条件内部，你不需要使用大括号。
Dialogue: 0,0:55:41.36,0:55:43.64,中文,,0,0,0,,但是为了代码风格，请务必包含它们。
Dialogue: 0,0:55:43.64,0:55:46.18,中文,,0,0,0,,这能让你的意图更清晰。
Dialogue: 0,0:55:46.18,0:55:48.84,中文,,0,0,0,,如果想在 Scratch 中表达这个，该怎么做？
Dialogue: 0,0:55:48.84,0:55:52.80,中文,,0,0,0,,你有两种选择，可以这么说，向左走或向右走。
Dialogue: 0,0:55:52.80,0:56:01.17,中文,,0,0,0,,如果 x < y，我想说 x < y。否则，我想表达相反的意思，在这种情况下 x 不小于 y。
Dialogue: 0,0:56:01.17,0:56:03.91,中文,,0,0,0,,我根据这个布尔表达式做决定。
Dialogue: 0,0:56:03.91,0:56:08.41,中文,,0,0,0,,在 C 语言中几乎一样，但你需要添加关键字 else。
Dialogue: 0,0:56:08.41,0:56:14.88,中文,,0,0,0,,所以 MIT 为 Scratch 借用了相同的关键字，以及第二对花括号，分别表示开始和结束。
Dialogue: 0,0:56:14.88,0:56:17.18,中文,,0,0,0,,你应该能猜到里面放什么了。
Dialogue: 0,0:56:17.18,0:56:23.11,中文,,0,0,0,,你可以打印 x < y，或者打印 x 不小于 y。
Dialogue: 0,0:56:23.11,0:56:25.27,中文,,0,0,0,,好，如果路有三条岔路呢？
Dialogue: 0,0:56:25.27,0:56:29.45,中文,,0,0,0,,在 Scratch 中，这实际上在图形上会变得有点笨拙。
Dialogue: 0,0:56:29.45,0:56:48.94,中文,,0,0,0,,但请注意，在 Scratch 中，我们可以这样表达：如果 x < y，则输出 x < y。\N否则如果 x > y，则输出 x > y。否则如果 x = y，则输出 x = y。这里有一点小矛盾。
Dialogue: 0,0:56:48.94,0:56:55.40,中文,,0,0,0,,就在刚才，我说过在 C 语言中等号表示什么操作？
Dialogue: 0,0:56:55.40,0:56:57.96,中文,,0,0,0,,从右到左的赋值。
Dialogue: 0,0:56:57.96,0:57:06.37,中文,,0,0,0,,Scratch 毕竟是为孩子们设计的，他们不想深入研究这种语义上的细节，所以 Scratch 中的等号表示相等。
Dialogue: 0,0:57:06.37,0:57:09.07,中文,,0,0,0,,但是，我们马上就要在 C 语言中修正这个问题。
Dialogue: 0,0:57:09.07,0:57:11.87,中文,,0,0,0,,在 C 语言中，等号表示赋值，从右到左。
Dialogue: 0,0:57:11.87,0:57:14.27,中文,,0,0,0,,在 Scratch 中，它的意思就是你所期望的。
Dialogue: 0,0:57:14.27,0:57:20.80,中文,,0,0,0,,让我们把这段代码翻译成 C 语言。在右边，这段代码实际上对应的是这个。
Dialogue: 0,0:57:20.80,0:57:29.18,中文,,0,0,0,,你可能已经看出解决方法了，虽然有点傻，但和之前人类把自己逼到墙角的百分号问题类似。
Dialogue: 0,0:57:29.18,0:57:33.07,中文,,0,0,0,,你会写 if，然后是 else if，再接 else if。
Dialogue: 0,0:57:33.07,0:57:36.83,中文,,0,0,0,,那我们怎么解决只使用一个等号的问题呢？
Dialogue: 0,0:57:36.83,0:57:42.24,中文,,0,0,0,,在 C 语言中，如果你想表达相等，也就是左边的东西等于右边的东西，该怎么做？
Dialogue: 0,0:57:42.24,0:57:47.28,中文,,0,0,0,,你会直接使用两个等号，中间没有空格。
Dialogue: 0,0:57:47.28,0:57:53.73,中文,,0,0,0,,现在这段代码在左边和右边都是正确的，无论你是在 Scratch 还是 C 语言中使用它。
Dialogue: 0,0:57:53.73,0:57:58.63,中文,,0,0,0,,但现在我们可以挑剔一下我们的代码了，特别是它的设计。
Dialogue: 0,0:57:58.63,0:58:04.12,中文,,0,0,0,,从逻辑上讲，有人能评价一下这段代码的设计吗？无论是 Scratch 还是 C 语言的版本。
Dialogue: 0,0:58:04.12,0:58:06.18,中文,,0,0,0,,我觉得我们可以做得更好。
Dialogue: 0,0:58:06.18,0:58:13.42,中文,,0,0,0,,后面那位同学？
Dialogue: 0,0:58:13.42,0:58:13.98,中文,,0,0,0,,非常好。
Dialogue: 0,0:58:13.98,0:58:26.16,中文,,0,0,0,,从逻辑上讲，x < y，或者 x > y，或者只能 x = y。你为什么要浪费我的时间或计算机的时间去问第三个问题呢？
Dialogue: 0,0:58:26.16,0:58:31.52,中文,,0,0,0,,你不需要问最后一个 else if，因为从逻辑上讲，正如你所说，这应该是理所当然的。
Dialogue: 0,0:58:31.52,0:58:37.27,中文,,0,0,0,,这只是一个小的调整，在 x = y 的情况下，你可能会做一些额外的工作。
Dialogue: 0,0:58:37.27,0:58:38.35,中文,,0,0,0,,我们可以改进一下。
Dialogue: 0,0:58:38.35,0:58:40.99,中文,,0,0,0,,就像在 Scratch 中一样，你可以直接使用 else 代码块。
Dialogue: 0,0:58:40.99,0:58:52.41,中文,,0,0,0,,类似地，在 C 语言中，我们可以把这段代码简化为一个 else，从逻辑上讲，它就像一个“万能”的语句，处理最后一种情况。
Dialogue: 0,0:58:52.41,0:58:56.83,中文,,0,0,0,,好了，现在我们已经能够用布尔表达式来表达条件语句了。
Dialogue: 0,0:58:56.83,0:58:58.93,中文,,0,0,0,,接下来我们来实际操作一下。
Dialogue: 0,0:58:58.93,0:59:00.73,中文,,0,0,0,,让我回到 VS Code。
Dialogue: 0,0:59:00.73,0:59:02.17,中文,,0,0,0,,我关闭了 hello.c。
Dialogue: 0,0:59:02.17,0:59:05.13,中文,,0,0,0,,为了演示，我要创建第二个文件。
Dialogue: 0,0:59:05.13,0:59:08.40,中文,,0,0,0,,回想一下，你可以输入 code 来创建新文件。
Dialogue: 0,0:59:08.40,0:59:11.54,中文,,0,0,0,,空格，然后输入要创建的文件名。
Dialogue: 0,0:59:11.54,0:59:14.04,中文,,0,0,0,,例如，我可以输入 compare.c。
Dialogue: 0,0:59:14.04,0:59:17.92,中文,,0,0,0,,我想写个程序来比较一些值，以便演示。
Dialogue: 0,0:59:17.92,0:59:25.00,中文,,0,0,0,,但在此之前，让我打开右边的文件资源管理器给你看一下，这与 Mac 或 PC 上的类似。
Dialogue: 0,0:59:25.00,0:59:27.24,中文,,0,0,0,,你可以点击上面的图标。
Dialogue: 0,0:59:27.24,0:59:28.74,中文,,0,0,0,,然后点击加号图标。
Dialogue: 0,0:59:28.74,0:59:29.98,中文,,0,0,0,,你会看到一个蓝色框。
Dialogue: 0,0:59:29.98,0:59:32.15,中文,,0,0,0,,我可以在里面输入 compare.c。
Dialogue: 0,0:59:32.15,0:59:34.31,中文,,0,0,0,,这样我就可以手动创建它了。
Dialogue: 0,0:59:34.31,0:59:38.11,中文,,0,0,0,,注意，即使我没有输入 code，它也打开了标签页。
Dialogue: 0,0:59:38.11,0:59:42.95,中文,,0,0,0,,同样，在左边，你有一个 GUI，一个图形用户界面，虽然它比较简单。
Dialogue: 0,0:59:42.95,0:59:47.39,中文,,0,0,0,,在右边和底部，你有一个命令行界面，但它们是同一个东西。
Dialogue: 0,0:59:47.39,0:59:58.95,中文,,0,0,0,,比较好的一点是，如果我不小心或故意关闭了这个文件，我可以通过运行相同的命令，code，空格，compare.c 重新打开它，而不用创建新的文件。
Dialogue: 0,0:59:58.95,1:00:00.31,中文,,0,0,0,,所以 code 是 VS Code 的东西。
Dialogue: 0,1:00:00.31,1:00:06.12,中文,,0,0,0,,它只是一个用户友好的快捷方式，但它只是创建一个文件或打开一个现有文件。
Dialogue: 0,1:00:06.12,1:00:08.92,中文,,0,0,0,,我要隐藏文件资源管理器，以便为代码腾出更多空间。
Dialogue: 0,1:00:08.92,1:00:10.00,中文,,0,0,0,,让我们继续吧。
Dialogue: 0,1:00:10.00,1:00:15.35,中文,,0,0,0,,我们来写个程序，比较用户输入的两个值，这次不是字符串。
Dialogue: 0,1:00:15.35,1:00:17.27,中文,,0,0,0,,我们使用一些实际的整数。
Dialogue: 0,1:00:17.27,1:00:22.30,中文,,0,0,0,,我要继续并将 CS50 库的头文件包含在顶部。
Dialogue: 0,1:00:22.30,1:00:23.26,中文,,0,0,0,,cs50.h
Dialogue: 0,1:00:23.26,1:00:26.08,中文,,0,0,0,,我还将包含 stdio.h。
Dialogue: 0,1:00:26.08,1:00:26.94,中文,,0,0,0,,为什么？
Dialogue: 0,1:00:26.94,1:00:31.20,中文,,0,0,0,,一个通过 get_string、get_int 等为我提供用户友好的输入。
Dialogue: 0,1:00:31.20,1:00:35.76,中文,,0,0,0,,另一个通过 printf 为我提供用户友好的输出，在 stdio.h 的情况下。
Dialogue: 0,1:00:35.76,1:00:40.19,中文,,0,0,0,,现在我要盲目地输入这行代码，我们将在接下来的几周内回顾它。
Dialogue: 0,1:00:40.19,1:00:45.09,中文,,0,0,0,,但是现在，这类似于 Scratch 中的“当绿旗被点击”代码。
Dialogue: 0,1:00:45.09,1:00:46.43,中文,,0,0,0,,现在让我们继续这样做。
Dialogue: 0,1:00:46.43,1:00:52.09,中文,,0,0,0,,让我继续从用户那里获取一个整数，并询问用户，x 是多少？
Dialogue: 0,1:00:52.09,1:00:53.37,中文,,0,0,0,,我不打算再换行了。
Dialogue: 0,1:00:53.37,1:00:56.59,中文,,0,0,0,,为了美观，我想把它放在一行中。
Dialogue: 0,1:00:56.59,1:01:01.66,中文,,0,0,0,,但是当我取回一个整数时，就像我取回一个字符串一样，我取回了一个返回值。
Dialogue: 0,1:01:01.66,1:01:07.98,中文,,0,0,0,,如果我想把 get_int 的结果存储在某个地方，我最好把它放在一个变量中。
Dialogue: 0,1:01:07.98,1:01:09.78,中文,,0,0,0,,我可以随意命名这个变量。
Dialogue: 0,1:01:09.78,1:01:12.96,中文,,0,0,0,,之前，我使用了 answer、first 或 last。
Dialogue: 0,1:01:12.96,1:01:19.86,中文,,0,0,0,,现在我要使用 x。但逻辑上还有两件事要做，尽管我们还没有在技术上做到这一点。
Dialogue: 0,1:01:19.86,1:01:22.96,中文,,0,0,0,,我还需要做什么？
Dialogue: 0,1:01:22.96,1:01:26.09,中文,,0,0,0,,末尾需要分号。
Dialogue: 0,1:01:26.09,1:01:27.57,中文,,0,0,0,,开头需要 int。
Dialogue: 0,1:01:27.57,1:01:32.83,中文,,0,0,0,,作为程序员，从今天开始，你需要决定要在变量中存储什么。
Dialogue: 0,1:01:32.83,1:01:35.79,中文,,0,0,0,,你需要告诉计算机，以便它知道。
Dialogue: 0,1:01:35.79,1:01:41.35,中文,,0,0,0,,现在，作为对 Python 等更现代语言的预告，事实证明，人们意识到，嗯，这太蠢了。
Dialogue: 0,1:01:41.35,1:01:43.85,中文,,0,0,0,,为什么计算机不能自己发现我输入的是一个整数？
Dialogue: 0,1:01:43.85,1:01:45.93,中文,,0,0,0,,为什么我必须主动告诉它？
Dialogue: 0,1:01:45.93,1:01:49.71,中文,,0,0,0,,在现在的一些语言中，比如 Python，我们会去掉一些语法。
Dialogue: 0,1:01:49.71,1:01:50.97,中文,,0,0,0,,我们会去掉分号。
Dialogue: 0,1:01:50.97,1:01:54.59,中文,,0,0,0,,但现在，我们要看的是这一切是如何运作的起源。
Dialogue: 0,1:01:54.59,1:01:57.35,中文,,0,0,0,,好了，我已经写了这一行，以分号结尾。
Dialogue: 0,1:01:57.35,1:01:58.41,中文,,0,0,0,,让我再写一个。
Dialogue: 0,1:01:58.41,1:02:02.60,中文,,0,0,0,,让我用第二个 int 询问用户，y 是多少？
Dialogue: 0,1:02:02.60,1:02:06.76,中文,,0,0,0,,几乎一模一样，但用户的响应不同，希望如此。
Dialogue: 0,1:02:06.76,1:02:10.61,中文,,0,0,0,,让我简单地问一下，如果 x < y，
Dialogue: 0,1:02:10.61,1:02:13.26,中文,,0,0,0,,在括号中，然后是一些花括号。
Dialogue: 0,1:02:13.26,1:02:23.38,中文,,0,0,0,,让我继续打印出来，printf("x is less than y\ n"); 现在，顺便说一句，我打字似乎有点快。
Dialogue: 0,1:02:23.38,1:02:25.46,中文,,0,0,0,,部分原因是 VS Code 在帮助我。
Dialogue: 0,1:02:25.46,1:02:28.78,中文,,0,0,0,,让我回到第一行，也就是 if 语句。
Dialogue: 0,1:02:28.78,1:02:29.93,中文,,0,0,0,,按下回车键。
Dialogue: 0,1:02:29.93,1:02:33.71,中文,,0,0,0,,现在我只用键盘输入左花括号。
Dialogue: 0,1:02:33.71,1:02:36.45,中文,,0,0,0,,这是现在很多文本编辑器的一个功能。
Dialogue: 0,1:02:36.45,1:02:38.01,中文,,0,0,0,,它会帮你完成一部分想法。
Dialogue: 0,1:02:38.01,1:02:38.59,中文,,0,0,0,,为什么？
Dialogue: 0,1:02:38.59,1:02:42.67,中文,,0,0,0,,为了节省你一次按键，确保你不会意外忘记输入右括号。
Dialogue: 0,1:02:42.67,1:02:45.75,中文,,0,0,0,,你会注意到，有时会发生一些你没有输入的事情。
Dialogue: 0,1:02:45.75,1:02:49.62,中文,,0,0,0,,这只是 VS Code 或你将来使用的程序在试图帮助你。
Dialogue: 0,1:02:49.62,1:02:57.12,中文,,0,0,0,,我现在手动输入 printf("x is less than y\ n"); 。
Dialogue: 0,1:02:57.12,1:03:00.43,中文,,0,0,0,,现在让我试着运行一下。
Dialogue: 0,1:03:00.43,1:03:01.39,中文,,0,0,0,,然后我们会看到。
Dialogue: 0,1:03:01.39,1:03:02.07,中文,,0,0,0,,让我们看看。
Dialogue: 0,1:03:02.07,1:03:07.11,中文,,0,0,0,,所以输入 make compare，而不是 hello，因为这个文件叫做 compare.c。
Dialogue: 0,1:03:07.11,1:03:08.72,中文,,0,0,0,,按下回车键。
Dialogue: 0,1:03:08.72,1:03:12.41,中文,,0,0,0,,没有输出是好事，因为这意味着我没有搞砸。
Dialogue: 0,1:03:12.41,1:03:16.79,中文,,0,0,0,,让我输入 ./compare 而不是 ./hello，回车。
Dialogue: 0,1:03:16.79,1:03:17.39,中文,,0,0,0,,x 是什么？
Dialogue: 0,1:03:17.39,1:03:18.51,中文,,0,0,0,,1 怎么样？
Dialogue: 0,1:03:18.51,1:03:19.01,中文,,0,0,0,,y 是什么？
Dialogue: 0,1:03:19.01,1:03:20.45,中文,,0,0,0,,2 怎么样？
Dialogue: 0,1:03:20.45,1:03:23.59,中文,,0,0,0,,x < y。我们再试一次。
Dialogue: 0,1:03:23.59,1:03:25.21,中文,,0,0,0,,这里我可以教你一些快捷键。
Dialogue: 0,1:03:25.21,1:03:26.57,中文,,0,0,0,,让我先清一下屏幕。
Dialogue: 0,1:03:26.57,1:03:35.39,中文,,0,0,0,,除了反复输入 ./this 和 ./that 之外，你也可以在 VS Code 中使用键盘上的方向键来回滚查看历史命令。
Dialogue: 0,1:03:35.39,1:03:37.95,中文,,0,0,0,,如果我按一次向上键，就会出现我最后输入的命令。
Dialogue: 0,1:03:37.95,1:03:41.62,中文,,0,0,0,,如果我按两次向上键，就会出现我倒数第二个命令。
Dialogue: 0,1:03:41.62,1:03:46.64,中文,,0,0,0,,如果有时候你看到我操作很快，那只是因为我在“作弊”，在用历史命令。
Dialogue: 0,1:03:46.64,1:03:50.77,中文,,0,0,0,,好了，让我们继续，重新运行 ./compare。
Dialogue: 0,1:03:50.77,1:03:53.09,中文,,0,0,0,,回车。 这次我们反过来输入。
Dialogue: 0,1:03:53.09,1:03:56.87,中文,,0,0,0,,x 输入 2，y 输入 1。现在，当然，没有输出。
Dialogue: 0,1:03:56.87,1:03:57.13,中文,,0,0,0,,好的。
Dialogue: 0,1:03:57.13,1:03:59.95,中文,,0,0,0,,从逻辑上讲，这是预料之中的，因为我们这里没有 else。
Dialogue: 0,1:03:59.95,1:04:01.95,中文,,0,0,0,,我们把它加上。 else。
Dialogue: 0,1:04:01.95,1:04:05.76,中文,,0,0,0,,现在我们打开花括号，VS Code 会自动帮我们补充一个。
Dialogue: 0,1:04:05.76,1:04:12.54,中文,,0,0,0,,printf 后面加双引号 x is not less than y\ n 分号。
Dialogue: 0,1:04:12.54,1:04:13.98,中文,,0,0,0,,让我们再试一次。
Dialogue: 0,1:04:13.98,1:04:15.60,中文,,0,0,0,,./compare。
Dialogue: 0,1:04:15.60,1:04:16.60,中文,,0,0,0,,回车。
Dialogue: 0,1:04:16.60,1:04:20.83,中文,,0,0,0,,再次输入，x 为 2，y 为 1。然后我们会看到。
Dialogue: 0,1:04:20.83,1:04:23.09,中文,,0,0,0,,嗯。
Dialogue: 0,1:04:23.09,1:04:24.71,中文,,0,0,0,,我哪里错了？
Dialogue: 0,1:04:24.71,1:04:27.05,中文,,0,0,0,,为什么我没有看到任何其他输出？
Dialogue: 0,1:04:27.05,1:04:30.77,中文,,0,0,0,,是吗？
Dialogue: 0,1:04:30.77,1:04:31.25,中文,,0,0,0,,没错。
Dialogue: 0,1:04:31.25,1:04:34.13,中文,,0,0,0,,你得养成在修改代码后重新编译的习惯。
Dialogue: 0,1:04:34.13,1:04:39.00,中文,,0,0,0,,否则，服务器上的 0 和 1 还是旧的，直到你手动编译。
Dialogue: 0,1:04:39.00,1:04:39.72,中文,,0,0,0,,我们来解决这个问题。
Dialogue: 0,1:04:39.72,1:04:41.28,中文,,0,0,0,,输入 make compare，回车。
Dialogue: 0,1:04:41.28,1:04:42.00,中文,,0,0,0,,没有错误信息。
Dialogue: 0,1:04:42.00,1:04:42.46,中文,,0,0,0,,很好。
Dialogue: 0,1:04:42.46,1:04:45.58,中文,,0,0,0,,输入 ./compare，2，1。
Dialogue: 0,1:04:45.58,1:04:47.26,中文,,0,0,0,,现在我得到了输出。
Dialogue: 0,1:04:47.26,1:04:49.32,中文,,0,0,0,,所以 x 不小于 y。
Dialogue: 0,1:04:49.32,1:04:52.32,中文,,0,0,0,,如果我添加第三个条件会怎么样？
Dialogue: 0,1:04:52.32,1:04:55.77,中文,,0,0,0,,我们可以高效地完成，也可以低效地完成。
Dialogue: 0,1:04:55.77,1:04:57.27,中文,,0,0,0,,我先来优化一下。
Dialogue: 0,1:04:57.27,1:05:11.15,中文,,0,0,0,,所以 else if x > y，我们就直接说 x > y。现在我可以再写一个 else if x = y，但我认为我们已经说过这没必要，而且效率低下。
Dialogue: 0,1:05:11.15,1:05:12.98,中文,,0,0,0,,我们直接使用万能语句。
Dialogue: 0,1:05:12.98,1:05:20.00,中文,,0,0,0,,在这里我要说，“x = y\ n，引号。
Dialogue: 0,1:05:20.00,1:05:24.04,中文,,0,0,0,,现在，我认为这段代码已经处理了所有三种情况。
Dialogue: 0,1:05:24.04,1:05:28.88,中文,,0,0,0,,让我重新编译它，make compare，dot slash compare。
Dialogue: 0,1:05:28.88,1:05:33.98,中文,,0,0,0,,现在是 1 和 2，x < y。我再运行一次。
Dialogue: 0,1:05:33.98,1:05:41.25,中文,,0,0,0,,2 和 1，x > y。最后，1 和 1，x = y。
Dialogue: 0,1:05:41.25,1:05:43.11,中文,,0,0,0,,大多数情况下，代码越来越长。
Dialogue: 0,1:05:43.11,1:05:47.91,中文,,0,0,0,,我们已经写了大约 21 行代码，尽管其中一些只是屏幕上的单个字符。
Dialogue: 0,1:05:47.91,1:05:49.45,中文,,0,0,0,,几乎所有其他内容都是相同的。
Dialogue: 0,1:05:49.45,1:05:57.86,中文,,0,0,0,,我使用 CS50 库的头文件来调用我的 get_int 函数，使用 stdio.h 来调用我的 printf 函数。
Dialogue: 0,1:05:57.86,1:06:01.88,中文,,0,0,0,,剩下的只是条件语句的新语法。
Dialogue: 0,1:06:01.88,1:06:08.37,中文,,0,0,0,,那么，关于这个 C 语言实现的基本比较，大家还有什么问题吗？
Dialogue: 0,1:06:08.37,1:06:08.81,中文,,0,0,0,,还有什么问题吗？
Dialogue: 0,1:06:08.81,1:06:14.61,中文,,0,0,0,,有。
Dialogue: 0,1:06:14.61,1:06:15.19,中文,,0,0,0,,问得好。
Dialogue: 0,1:06:15.19,1:06:17.36,中文,,0,0,0,,左括号需要另起一行吗？
Dialogue: 0,1:06:17.36,1:06:18.62,中文,,0,0,0,,在 CS50 中，是的。
Dialogue: 0,1:06:18.62,1:06:25.60,中文,,0,0,0,,你会看到，作为提交过程的一部分，我们会将代码与风格指南进行比较，这是业界规范。
Dialogue: 0,1:06:25.60,1:06:29.40,中文,,0,0,0,,公司会有自己的风格，以及代码应该是什么样子。
Dialogue: 0,1:06:29.40,1:06:35.25,中文,,0,0,0,,通常，公司内部会有一些自动化工具来帮助提供代码反馈或对其进行风格化。
Dialogue: 0,1:06:35.25,1:06:38.45,中文,,0,0,0,,除了我们在课堂上使用的风格之外，还有一些其他的风格。
Dialogue: 0,1:06:38.45,1:06:51.50,中文,,0,0,0,,我们特意保留花括号并要求你将花括号放在单独的行上，因为这与 Scratch 块的嵌套性质相似，并且更清楚地表明了它们的平衡、打开和关闭。
Dialogue: 0,1:06:51.50,1:06:58.53,中文,,0,0,0,,但是，某些语言和程序员的另一种常见范式是这样的。
Dialogue: 0,1:06:58.53,1:07:03.81,中文,,0,0,0,,在每一行上，你都可以看到左花括号与这里在同一行。
Dialogue: 0,1:07:03.81,1:07:04.91,中文,,0,0,0,,我们不建议这样做。
Dialogue: 0,1:07:04.91,1:07:08.07,中文,,0,0,0,,这在 JavaScript 和其他一些领域很流行。
Dialogue: 0,1:07:08.07,1:07:16.32,中文,,0,0,0,,但最终，在现实世界中，这取决于每个程序员或他们所属的公司（如果适用）来决定这些事情。
Dialogue: 0,1:07:16.32,1:07:21.05,中文,,0,0,0,,那么除了这些条件语句之外，如果我们想做一些很常见的事情怎么办？
Dialogue: 0,1:07:21.05,1:07:30.30,中文,,0,0,0,,现在几乎所有你使用的软件或网站都会让你输入 yes 或 no，或者 y 表示 yes，n 表示 no 来同意某些条款和条件。
Dialogue: 0,1:07:30.30,1:07:33.28,中文,,0,0,0,,那么我们如何实现某种协议系统呢？
Dialogue: 0,1:07:33.28,1:07:33.96,中文,,0,0,0,,我来演示一下。
Dialogue: 0,1:07:33.96,1:07:37.95,中文,,0,0,0,,我来创建一个名为 agree.c 的新程序。
Dialogue: 0,1:07:37.95,1:07:41.33,中文,,0,0,0,,我要编写代码 agree.c，以便给自己一个新的选项卡。
Dialogue: 0,1:07:41.33,1:07:44.23,中文,,0,0,0,,像往常一样，我先包含 cs50.h。
Dialogue: 0,1:07:44.23,1:07:46.69,中文,,0,0,0,,包含 stdio.h。
Dialogue: 0,1:07:46.69,1:07:53.43,中文,,0,0,0,,然后是我的 int main void，同样，就今天的目的而言，我们将不加解释地直接复制粘贴它。
Dialogue: 0,1:07:53.43,1:08:00.49,中文,,0,0,0,,如果我只想获取 y 或 n，而不是 yes 或 no，我们在这里可以使用更简单的变量。
Dialogue: 0,1:08:00.49,1:08:02.00,中文,,0,0,0,,用 char 怎么样？
Dialogue: 0,1:08:02.00,1:08:03.84,中文,,0,0,0,,一个字符，单个字符。
Dialogue: 0,1:08:03.84,1:08:09.98,中文,,0,0,0,,我可以用 getchar 询问用户，例如，你同意吗？
Dialogue: 0,1:08:09.98,1:08:12.90,中文,,0,0,0,,但和以前一样，我需要把它存储在某个地方。
Dialogue: 0,1:08:12.90,1:08:15.17,中文,,0,0,0,,我不想用字符串，因为我只需要一个字符。
Dialogue: 0,1:08:15.17,1:08:16.29,中文,,0,0,0,,我不想用整数。
Dialogue: 0,1:08:16.29,1:08:17.35,中文,,0,0,0,,我只需要一个字符。
Dialogue: 0,1:08:17.35,1:08:19.45,中文,,0,0,0,,它的类型就是 char。
Dialogue: 0,1:08:19.45,1:08:21.47,中文,,0,0,0,,我可以给它起任何名字。
Dialogue: 0,1:08:21.47,1:08:22.31,中文,,0,0,0,,这是惯例。
Dialogue: 0,1:08:22.31,1:08:34.46,中文,,0,0,0,,如果你有一个简单的程序，只有一个变量，并且它的类型是 char，就称它为 c。\N如果是 int，就称它为 i。如果是字符串，就称它为 s。现在，为了简单起见，我把它叫做 c。现在我问一个问题。
Dialogue: 0,1:08:34.46,1:08:42.48,中文,,0,0,0,,如果 c== y。
Dialogue: 0,1:08:42.48,1:08:50.50,中文,,0,0,0,,那就打印 agreed 和一个换行符，就好像他们同意了我的条款和条件一样。
Dialogue: 0,1:08:50.50,1:09:04.22,中文,,0,0,0,,否则，如果这个字符等于 n，那就打印 Not agreed，就好像他们不同意一样。
Dialogue: 0,1:09:04.22,1:09:07.26,中文,,0,0,0,,我们先这样吧。
Dialogue: 0,1:09:07.26,1:09:11.86,中文,,0,0,0,,现在，你可能注意到了一个奇怪的地方，或者说不一致的地方。
Dialogue: 0,1:09:11.86,1:09:15.80,中文,,0,0,0,,有人想说出来吗？虽然这有点微妙。
Dialogue: 0,1:09:15.80,1:09:19.69,中文,,0,0,0,,我做了一些稍微不同的事情，但还没有解释。
Dialogue: 0,1:09:19.69,1:09:23.14,中文,,0,0,0,,你看到了吗？
Dialogue: 0,1:09:23.14,1:09:30.60,中文,,0,0,0,,是的，我突然对单个字符使用单引号，而对实际的文本字符串使用双引号。
Dialogue: 0,1:09:30.60,1:09:41.37,中文,,0,0,0,,这在 C 语言中是必要的。当你处理字符串时，比如文本字符串，比如某人的名字、一句话、一段话，任何超过一个字符的东西，你通常都使用双引号。
Dialogue: 0,1:09:41.37,1:09:42.57,中文,,0,0,0,,实际上，你必须这样做。
Dialogue: 0,1:09:42.57,1:09:49.91,中文,,0,0,0,,当你处理单个字符时，就像我在这里用 y 或 n 一样，你必须使用单引号。
Dialogue: 0,1:09:49.91,1:09:50.43,中文,,0,0,0,,为什么？
Dialogue: 0,1:09:50.43,1:09:54.56,中文,,0,0,0,,这样可以确保计算机知道它确实是一个字符而不是字符串。
Dialogue: 0,1:09:54.56,1:09:55.96,中文,,0,0,0,,所以双引号用于字符串。
Dialogue: 0,1:09:55.96,1:09:57.70,中文,,0,0,0,,单引号用于字符。
Dialogue: 0,1:09:57.70,1:10:00.64,中文,,0,0,0,,那么，说完这些，让我继续，缩小一下。
Dialogue: 0,1:10:00.64,1:10:04.98,中文,,0,0,0,,让我在我的终端窗口中运行 make agree，回车。
Dialogue: 0,1:10:04.98,1:10:08.83,中文,,0,0,0,,看起来运行正常，让我继续，运行 ./agree。
Dialogue: 0,1:10:08.83,1:10:13.35,中文,,0,0,0,,让我继续，输入 Y。开始了。
Dialogue: 0,1:10:13.35,1:10:15.35,中文,,0,0,0,,回车。
Dialogue: 0,1:10:15.35,1:10:16.55,中文,,0,0,0,,什么？
Dialogue: 0,1:10:16.55,1:10:17.51,中文,,0,0,0,,让我再试一次。
Dialogue: 0,1:10:17.51,1:10:19.05,中文,,0,0,0,,重新运行 ./agree。
Dialogue: 0,1:10:19.05,1:10:20.39,中文,,0,0,0,,输入 N 怎么样？
Dialogue: 0,1:10:20.39,1:10:22.63,中文,,0,0,0,,回车。
Dialogue: 0,1:10:22.63,1:10:28.58,中文,,0,0,0,,为什么它没有按我预期的方式运行？
Dialogue: 0,1:10:28.58,1:10:32.20,中文,,0,0,0,,是的，我刚才作弊了，我在开始输入的时候按下了大写锁定键。
Dialogue: 0,1:10:32.20,1:10:32.42,中文,,0,0,0,,为什么？
Dialogue: 0,1:10:32.42,1:10:37.54,中文,,0,0,0,,因为我故意想输入大写字母而不是小写字母，这合情合理。
Dialogue: 0,1:10:37.54,1:10:42.65,中文,,0,0,0,,如果你只是需要一个简单的答案，却强迫用户打开或关闭大写锁定键，那就有点令人讨厌了。
Dialogue: 0,1:10:42.65,1:10:47.21,中文,,0,0,0,,这不是最佳的用户体验或 UX，但如果我配合的话，它就能工作。
Dialogue: 0,1:10:47.21,1:10:49.87,中文,,0,0,0,,让我在关闭大写锁定的情况下再次运行它。
Dialogue: 0,1:10:49.87,1:10:52.29,中文,,0,0,0,,输入 Y，小写的，代表“是”。
Dialogue: 0,1:10:52.29,1:10:53.23,中文,,0,0,0,,啊，可以了。
Dialogue: 0,1:10:53.23,1:10:55.37,中文,,0,0,0,,输入 N，小写的，代表“否”。
Dialogue: 0,1:10:55.37,1:10:56.01,中文,,0,0,0,,这也行。
Dialogue: 0,1:10:56.01,1:10:58.05,中文,,0,0,0,,但是怎么才能让它两种情况都适用呢？
Dialogue: 0,1:10:58.05,1:10:59.13,中文,,0,0,0,,这样如何？
Dialogue: 0,1:10:59.13,1:11:01.34,中文,,0,0,0,,让我来添加两种可能性。
Dialogue: 0,1:11:01.34,1:11:20.45,中文,,0,0,0,,添加 else if (c == "Y")，然后同样执行 printf("Agreed.\ n");。然后在这下面，添加 else if (c == ' N')，然后执行 printf("Not agreed.\ n");。
Dialogue: 0,1:11:20.45,1:11:23.85,中文,,0,0,0,,好了，我认为现在这样就对了。
Dialogue: 0,1:11:23.85,1:11:27.09,中文,,0,0,0,,快速执行 make agree，./agree。
Dialogue: 0,1:11:27.09,1:11:28.35,中文,,0,0,0,,这次输入大写的。
Dialogue: 0,1:11:28.35,1:11:29.19,中文,,0,0,0,,可以了。
Dialogue: 0,1:11:29.19,1:11:30.67,中文,,0,0,0,,输入大写的 N。
Dialogue: 0,1:11:30.67,1:11:32.35,中文,,0,0,0,,也行。
Dialogue: 0,1:11:32.35,1:11:34.53,中文,,0,0,0,,但这也许不是最佳设计。
Dialogue: 0,1:11:34.53,1:11:39.55,中文,,0,0,0,,让我先隐藏终端窗口，把代码放到整个屏幕上。
Dialogue: 0,1:11:39.55,1:11:46.20,中文,,0,0,0,,为什么说这可能不是最佳设计，即使它是正确的？
Dialogue: 0,1:11:46.20,1:11:47.94,中文,,0,0,0,,我们可以用另一个专业术语。
Dialogue: 0,1:11:47.94,1:11:51.04,中文,,0,0,0,,比如，这段代码闻起来有点不对劲。
Dialogue: 0,1:11:51.04,1:11:52.24,中文,,0,0,0,,这是一个专业的术语。
Dialogue: 0,1:11:52.24,1:11:53.86,中文,,0,0,0,,就像代码有异味。
Dialogue: 0,1:11:53.86,1:11:55.94,中文,,0,0,0,,就像，闻起来有点不对劲。
Dialogue: 0,1:11:55.94,1:11:56.62,中文,,0,0,0,,为什么？
Dialogue: 0,1:11:56.62,1:12:07.45,中文,,0,0,0,,你觉得呢？
Dialogue: 0,1:12:07.45,1:12:09.25,中文,,0,0,0,,是的，同样的输出一遍又一遍地出现。
Dialogue: 0,1:12:09.25,1:12:10.49,中文,,0,0,0,,我是说，我手动输入的。
Dialogue: 0,1:12:10.49,1:12:17.15,中文,,0,0,0,,但老实说，我还不如直接复制粘贴大部分原始代码，一遍又一遍地处理这两个大写字母。
Dialogue: 0,1:12:17.15,1:12:27.14,中文,,0,0,0,,如果第 10 行和第 14 行相同，第 18 行和第 22 行相同，然后剩下的这些 if 和 else if 也几乎相同，
Dialogue: 0,1:12:27.14,1:12:28.36,中文,,0,0,0,,就像，代码中有一些异味。
Dialogue: 0,1:12:28.36,1:12:29.34,中文,,0,0,0,,就像，它设计得不好。
Dialogue: 0,1:12:29.34,1:12:29.98,中文,,0,0,0,,为什么？
Dialogue: 0,1:12:29.98,1:12:36.87,中文,,0,0,0,,因为如果我现在想改变一些东西，就像上周在 Scratch 中一样，我可能要在多个地方修改代码，而复制粘贴从来都不是一件好事。
Dialogue: 0,1:12:36.87,1:12:42.83,中文,,0,0,0,,而且，如果我想添加对“yes”和“no”完整单词的支持，代码真的会变得很长。
Dialogue: 0,1:12:42.83,1:12:44.07,中文,,0,0,0,,那么我们如何解决这个问题呢？
Dialogue: 0,1:12:44.07,1:12:47.15,中文,,0,0,0,,事实证明，我们可以结合其中的一些想法。
Dialogue: 0,1:12:47.15,1:12:49.64,中文,,0,0,0,,我先试着改进对“yes”的处理。
Dialogue: 0,1:12:49.64,1:12:54.34,中文,,0,0,0,,事实证明，如果我删除那个子句，我可以把条件用“或”连接起来。
Dialogue: 0,1:12:54.34,1:13:06.81,中文,,0,0,0,,在 Scratch 中，有一些拼图块，如果你没有发现它们的话，\N它们上面写着“或”和“与”的字样，可以让你组合布尔表达式，这样这个或那个为真，或者这个和那个为真。
Dialogue: 0,1:13:06.81,1:13:09.39,中文,,0,0,0,,在 C 语言中，你不能直接使用“或”这个词。
Dialogue: 0,1:13:09.39,1:13:13.01,中文,,0,0,0,,而是使用两个竖线。
Dialogue: 0,1:13:13.01,1:13:16.36,中文,,0,0,0,,两个竖线在一起表示逻辑“或”。
Dialogue: 0,1:13:16.36,1:13:21.86,中文,,0,0,0,,我可以说 C 等于等于 双引号 Y 双引号，表示同意。
Dialogue: 0,1:13:21.86,1:13:26.63,中文,,0,0,0,,现在我可以删除下面的代码，然后继续写
Dialogue: 0,1:13:26.63,1:13:32.55,中文,,0,0,0,,竖线，竖线，两次 c 等于，双引号，大写 N 双引号。
Dialogue: 0,1:13:32.55,1:13:36.95,中文,,0,0,0,,现在我的程序大约缩短了三分之一，这很好。
Dialogue: 0,1:13:36.95,1:13:38.03,中文,,0,0,0,,减少了冗余。
Dialogue: 0,1:13:38.03,1:13:56.76,中文,,0,0,0,,如果我重新打开终端窗口，重新运行 make agree，./agree，\N现在我可以输入小写 y 或大写 Y。小写和大写的 N 也是如此。对于这种语法还有其他问题吗？现在你可以组合想法并简化代码了。
Dialogue: 0,1:13:56.76,1:13:58.01,中文,,0,0,0,,还有其他类似的技巧。
Dialogue: 0,1:13:58.01,1:14:02.32,中文,,0,0,0,,是的。
Dialogue: 0,1:14:02.32,1:14:06.44,中文,,0,0,0,,一个很好的问题，没有函数可以忽略大小写吗？
Dialogue: 0,1:14:06.44,1:14:07.92,中文,,0,0,0,,简短的回答，有。
Dialogue: 0,1:14:07.92,1:14:10.94,中文,,0,0,0,,我们将在大概一周后看到如何做到这一点。
Dialogue: 0,1:14:10.94,1:14:20.05,中文,,0,0,0,,在其他语言中，甚至有更多的方法可以规范化用户的输入，丢弃他们可能意外输入的任何空格字符，强制所有字符都小写。
Dialogue: 0,1:14:20.05,1:14:23.33,中文,,0,0,0,,在 C 语言中，我们需要做更多的工作来实现这一点。
Dialogue: 0,1:14:23.33,1:14:25.97,中文,,0,0,0,,但事实上，最早在下周，我们就会看到如何做到这一点。
Dialogue: 0,1:14:25.97,1:14:29.66,中文,,0,0,0,,但就目前而言，我们确实只是在比较这些字面值。
Dialogue: 0,1:14:29.66,1:14:32.55,中文,,0,0,0,,还有其他问题吗？
Dialogue: 0,1:14:32.55,1:14:38.28,中文,,0,0,0,,你可以输入你应该输入的内容。
Dialogue: 0,1:14:38.28,1:14:39.06,中文,,0,0,0,,很好的问题。
Dialogue: 0,1:14:39.06,1:14:43.26,中文,,0,0,0,,在这个程序和之前的所有程序中，我们假设用户是合作的。
Dialogue: 0,1:14:43.26,1:14:46.57,中文,,0,0,0,,当我询问他们的名字时，他们输入的是 David，而不是 123。
Dialogue: 0,1:14:46.57,1:14:50.25,中文,,0,0,0,,或者在这种情况下，他们输入的是一个字符，而不是一个完整的单词。
Dialogue: 0,1:14:50.25,1:14:53.53,中文,,0,0,0,,这就是使用库函数的特性之一。
Dialogue: 0,1:14:53.53,1:15:01.40,中文,,0,0,0,,例如，如果我再次运行 agree，输入类似 sure，回车，它会完全拒绝。
Dialogue: 0,1:15:01.40,1:15:01.86,中文,,0,0,0,,为什么？
Dialogue: 0,1:15:01.86,1:15:05.88,中文,,0,0,0,,因为 S-U-R-E 是一个字符串。
Dialogue: 0,1:15:05.88,1:15:07.42,中文,,0,0,0,,它不是单个字符。
Dialogue: 0,1:15:07.42,1:15:11.36,中文,,0,0,0,,现在，我可以输入 x，它既不是 y 也不是 n。
Dialogue: 0,1:15:11.36,1:15:14.18,中文,,0,0,0,,但它可以接受，因为它是一个字符。
Dialogue: 0,1:15:14.18,1:15:19.08,中文,,0,0,0,,但 CS50 库内置了一些对非预期输入的拒绝机制。
Dialogue: 0,1:15:19.08,1:15:27.15,中文,,0,0,0,,如果你使用 get_int，用户输入的不是数字 1 或 2，而是 cat，C-A-T，它会反复提示他们。
Dialogue: 0,1:15:27.15,1:15:33.03,中文,,0,0,0,,如果你用 C 语言手动完成这个功能，你最终会写大量的代码来检查所有这些错误。
Dialogue: 0,1:15:33.03,1:15:34.19,中文,,0,0,0,,检查所有这些错误。
Dialogue: 0,1:15:34.19,1:15:38.20,中文,,0,0,0,,这就是为什么我们要使用这些“辅助轮”几个星期，只是为了使代码更加健壮。
Dialogue: 0,1:15:38.20,1:15:45.37,中文,,0,0,0,,但在几周后，我们会去掉这个库，你会看到并理解它是如何做到这一切的。
Dialogue: 0,1:15:45.37,1:15:46.69,中文,,0,0,0,,那么这个呢？
Dialogue: 0,1:15:46.69,1:15:54.59,中文,,0,0,0,,让我们来创建一个更像 Scratch 的程序，叫做 meow，文件名是 meow.c。
Dialogue: 0,1:15:54.59,1:15:56.53,中文,,0,0,0,,这个程序没有音频功能。
Dialogue: 0,1:15:56.53,1:15:57.91,中文,,0,0,0,,我们将只使用 print 函数。
Dialogue: 0,1:15:57.91,1:16:03.00,中文,,0,0,0,,假设我想用 C 语言写一个程序来模拟猫叫。
Dialogue: 0,1:16:03.00,1:16:04.86,中文,,0,0,0,,目前还不需要任何用户输入。
Dialogue: 0,1:16:04.86,1:16:07.10,中文,,0,0,0,,所以只需要使用 stdio.h。
Dialogue: 0,1:16:07.10,1:16:10.00,中文,,0,0,0,,还是像往常一样，写 int main void。
Dialogue: 0,1:16:10.00,1:16:13.99,中文,,0,0,0,,然后直接写 printf meow\ n。
Dialogue: 0,1:16:13.99,1:16:16.65,中文,,0,0,0,,像上周那样，让这只猫叫三次。
Dialogue: 0,1:16:16.65,1:16:19.07,中文,,0,0,0,,所以要写 meow，meow，meow。
Dialogue: 0,1:16:19.07,1:16:22.33,中文,,0,0,0,,注意，顺便说一下，当你选中这些行时，会看到一些小点出现。
Dialogue: 0,1:16:22.33,1:16:26.63,中文,,0,0,0,,这只是一个视觉提示，让你知道缩进了多少个空格。
Dialogue: 0,1:16:26.63,1:16:30.28,中文,,0,0,0,,VS Code 和很多编辑器一样，会自动帮你缩进代码。
Dialogue: 0,1:16:30.28,1:16:32.52,中文,,0,0,0,,我没有每次都敲四次空格键。
Dialogue: 0,1:16:32.52,1:16:34.18,中文,,0,0,0,,我甚至没有按 Tab 键。
Dialogue: 0,1:16:34.18,1:16:36.04,中文,,0,0,0,,然而，在 C 语言中，
Dialogue: 0,1:16:36.04,1:16:40.42,中文,,0,0,0,,约定俗成是在适当的地方用四个空格缩进行。
Dialogue: 0,1:16:40.42,1:16:42.08,中文,,0,0,0,,所以不是三个，也不是五个。
Dialogue: 0,1:16:42.08,1:16:46.00,中文,,0,0,0,,这些点可以帮助你看到这些东西，让它们排列整齐，这是一种良好的代码风格。
Dialogue: 0,1:16:46.00,1:16:46.36,中文,,0,0,0,,好的。
Dialogue: 0,1:16:46.36,1:16:49.56,中文,,0,0,0,,我现在要说明的是，这个程序确实可以运行。
Dialogue: 0,1:16:49.56,1:16:51.46,中文,,0,0,0,,发出“喵”的声音，这还挺可爱的。
Dialogue: 0,1:16:51.46,1:16:54.00,中文,,0,0,0,,现在，“喵”叫了三次。
Dialogue: 0,1:16:54.00,1:16:54.58,中文,,0,0,0,,正确。
Dialogue: 0,1:16:54.58,1:16:55.50,中文,,0,0,0,,它喵了三次。
Dialogue: 0,1:16:55.50,1:16:57.04,中文,,0,0,0,,但这显然不是一个好的设计。
Dialogue: 0,1:16:57.04,1:16:59.06,中文,,0,0,0,,上周在 Scratch 中的设计也不好。
Dialogue: 0,1:16:59.06,1:17:00.59,中文,,0,0,0,,为什么？
Dialogue: 0,1:17:00.59,1:17:03.21,中文,,0,0,0,,我应该怎么做才好呢？
Dialogue: 0,1:17:03.21,1:17:05.25,中文,,0,0,0,,嗯？
Dialogue: 0,1:17:05.25,1:17:07.27,中文,,0,0,0,,嗯。
Dialogue: 0,1:17:07.27,1:17:09.49,中文,,0,0,0,,这是一个使用循环的绝佳机会。
Dialogue: 0,1:17:09.49,1:17:09.81,中文,,0,0,0,,为什么？
Dialogue: 0,1:17:09.81,1:17:18.35,中文,,0,0,0,,因为如果你想改变这些单词的大小写，或者你想把声音改成狗叫声之类的，你必须在一处、两处、三处都进行修改。
Dialogue: 0,1:17:18.35,1:17:20.15,中文,,0,0,0,,这有点蠢，对吧？
Dialogue: 0,1:17:20.15,1:17:23.31,中文,,0,0,0,,在代码中，理想情况下应该只在一个地方修改。
Dialogue: 0,1:17:23.31,1:17:24.79,中文,,0,0,0,,那么我该怎么做呢？
Dialogue: 0,1:17:24.79,1:17:27.28,中文,,0,0,0,,我们可以引入循环。
Dialogue: 0,1:17:27.28,1:17:32.70,中文,,0,0,0,,但我们还需要另一个 Scratch 中的构建块，即变量。
Dialogue: 0,1:17:32.70,1:17:38.64,中文,,0,0,0,,回想一下，代数中的变量，x、y、z 等等，可以为你存储一个值。
Dialogue: 0,1:17:38.64,1:17:42.72,中文,,0,0,0,,Scratch 中的变量可能长这样。
Dialogue: 0,1:17:42.72,1:17:49.86,中文,,0,0,0,,可以使用这个橙色的拼图块来设置任意名称的变量，而不仅仅是 x、y 或 z，可以给它起一个更具描述性的名称，比如 counter。
Dialogue: 0,1:17:49.86,1:17:52.08,中文,,0,0,0,,可以将它设置为某个值。
Dialogue: 0,1:17:52.08,1:17:54.42,中文,,0,0,0,,在 C 语言中，这样做的方法是：
Dialogue: 0,1:17:54.42,1:17:57.67,中文,,0,0,0,,这与我们目前为止见过的一些语法在精神上是相似的。
Dialogue: 0,1:17:57.67,1:18:01.77,中文,,0,0,0,,首先，写出你想要的变量名，一个等号，然后是值。
Dialogue: 0,1:18:01.77,1:18:05.53,中文,,0,0,0,,如果你想初始化它，也要进行复制，因此是从右到左复制。
Dialogue: 0,1:18:05.53,1:18:06.02,中文,,0,0,0,,为什么？
Dialogue: 0,1:18:06.02,1:18:09.76,中文,,0,0,0,,因为等号同样表示从右到左赋值。
Dialogue: 0,1:18:09.76,1:18:10.76,中文,,0,0,0,,但这还不够。
Dialogue: 0,1:18:10.76,1:18:17.03,中文,,0,0,0,,你可能已经凭直觉知道，仅仅为了创建一个变量，这行代码中还缺少什么。
Dialogue: 0,1:18:17.03,1:18:20.73,中文,,0,0,0,,我们需要 int 来确保计算机知道这确实是一个 int。
Dialogue: 0,1:18:20.73,1:18:23.71,中文,,0,0,0,,最后，也要加上分号。
Dialogue: 0,1:18:23.71,1:18:25.27,中文,,0,0,0,,这样就完成了这个想法。
Dialogue: 0,1:18:25.27,1:18:28.56,中文,,0,0,0,,所以比 Scratch 稍微麻烦一点，但我们开始看到一些模式了。
Dialogue: 0,1:18:28.56,1:18:30.90,中文,,0,0,0,,所以并不是每个语法都是全新的。
Dialogue: 0,1:18:30.90,1:18:37.55,中文,,0,0,0,,如果你想把计数器加一，Scratch 使用动词 change，意思是把值加到计数器上。
Dialogue: 0,1:18:37.55,1:18:41.79,中文,,0,0,0,,如果我想把一个名为 counter 的现有变量递增，
Dialogue: 0,1:18:41.79,1:18:44.03,中文,,0,0,0,,这个语法就有点意思了。
Dialogue: 0,1:18:44.03,1:18:48.48,中文,,0,0,0,,事实证明，代码看起来像这样，这几乎像是一个悖论。
Dialogue: 0,1:18:48.48,1:18:51.80,中文,,0,0,0,,比如，counter 怎么会等于 counter 加 1 呢？
Dialogue: 0,1:18:51.80,1:18:53.16,中文,,0,0,0,,比如，这不是数学的算法。
Dialogue: 0,1:18:53.16,1:18:56.92,中文,,0,0,0,,但同样，单个等号表示从右到左赋值。
Dialogue: 0,1:18:56.92,1:19:04.03,中文,,0,0,0,,这行代码的意思是，取 counter 的值，加 1，然后将结果从右到左复制到 counter 本身。
Dialogue: 0,1:19:04.03,1:19:06.89,中文,,0,0,0,,你仍然需要分号。
Dialogue: 0,1:19:06.89,1:19:13.29,中文,,0,0,0,,我认为更新现有变量时不需要再提 int 关键字。
Dialogue: 0,1:19:13.29,1:19:23.48,中文,,0,0,0,,只有在 C 语言中创建变量时才会使用 string、int 或之后会看到的其他关键字，而且只在第一次创建或初始化时使用。
Dialogue: 0,1:19:23.48,1:19:25.74,中文,,0,0,0,,之后，如果你想改变它，它就已经存在了。
Dialogue: 0,1:19:25.74,1:19:27.16,中文,,0,0,0,,它就是你给它的那个词。
Dialogue: 0,1:19:27.16,1:19:30.02,中文,,0,0,0,,计算机足够聪明，至少能记住它的类型。
Dialogue: 0,1:19:30.02,1:19:32.26,中文,,0,0,0,,这行代码现在完成了。
Dialogue: 0,1:19:32.26,1:19:37.88,中文,,0,0,0,,事实证明，在代码中，我们会经常需要把东西加在一起，或者把东西加 1。
Dialogue: 0,1:19:37.88,1:19:40.80,中文,,0,0,0,,实际上有不同的语法来表达同一个意思。
Dialogue: 0,1:19:40.80,1:19:43.26,中文,,0,0,0,,这里的专业术语是语法糖。
Dialogue: 0,1:19:43.26,1:19:49.81,中文,,0,0,0,,在代码中，通常有很多方法可以做同一件事，即使最终它们的功能完全相同。
Dialogue: 0,1:19:49.81,1:19:57.87,中文,,0,0,0,,例如， 如果在学习 CS50 几天后，你觉得在程序中反复输入这段代码有点麻烦，你可以把它简化为这样。
Dialogue: 0,1:19:57.87,1:19:59.35,中文,,0,0,0,,这就是语法糖。
Dialogue: 0,1:19:59.35,1:20:03.85,中文,,0,0,0,,你可以使用加等号，并且在左边只写一次变量名。
Dialogue: 0,1:20:03.85,1:20:06.57,中文,,0,0,0,,它会知道这意味着之前的值。
Dialogue: 0,1:20:06.57,1:20:10.48,中文,,0,0,0,,这样写只是更简洁一些。
Dialogue: 0,1:20:10.48,1:20:12.90,中文,,0,0,0,,给一个值加 1 也是一件很常见的事情。
Dialogue: 0,1:20:12.90,1:20:13.80,中文,,0,0,0,,而且不一定是加 1。
Dialogue: 0,1:20:13.80,1:20:14.66,中文,,0,0,0,,但在这种情况下，它是。
Dialogue: 0,1:20:14.66,1:20:20.72,中文,,0,0,0,,但如果它确实是 1，你可以进一步简化代码，只写 counter++。
Dialogue: 0,1:20:20.72,1:20:26.79,中文,,0,0,0,,所以在 C 语言中，每当你看到 ++，就意味着给那个特定的变量加 1。
Dialogue: 0,1:20:26.79,1:20:28.81,中文,,0,0,0,,还有其他方法可以反过来做。
Dialogue: 0,1:20:28.81,1:20:38.48,中文,,0,0,0,,如果你想从一个变量中减去 1，你可以使用前面任何一种语法，用减号代替加号，或者你可以更简洁地写成 counter--。
Dialogue: 0,1:20:38.48,1:20:42.54,中文,,0,0,0,,这是一个典型的 C 程序员会这样做的方法。
Dialogue: 0,1:20:42.54,1:20:47.43,中文,,0,0,0,,好了，如果我们没有变量，让我们继续用循环来解决喵喵叫的问题。
Dialogue: 0,1:20:47.43,1:20:49.37,中文,,0,0,0,,所以在 Scratch 中，我们看到了这样的循环。
Dialogue: 0,1:20:49.37,1:20:52.89,中文,,0,0,0,,这当然会让猫喵喵叫三次。
Dialogue: 0,1:20:52.89,1:20:54.58,中文,,0,0,0,,我们如何在 C 语言中做到这一点？
Dialogue: 0,1:20:54.58,1:20:58.96,中文,,0,0,0,,现在，这就是代码方面变得有点复杂的地方了。
Dialogue: 0,1:20:58.96,1:21:03.67,中文,,0,0,0,,但如果你理解每一行，就会明白逻辑上发生了什么。
Dialogue: 0,1:21:03.67,1:21:12.09,中文,,0,0,0,,所以我声称这是一种在 C 语言中实现迭代三次的循环的方法。这有点荒谬，对吧？
Dialogue: 0,1:21:12.09,1:21:18.97,中文,,0,0,0,,就像，我们从两个超级简单的拼图块变成了，天哪，像是一、二、三、四、五、六行代码，所有这些都相当复杂。
Dialogue: 0,1:21:18.97,1:21:20.77,中文,,0,0,0,,就像，这升级得也太快了。
Dialogue: 0,1:21:20.77,1:21:21.95,中文,,0,0,0,,但每一行是做什么的？
Dialogue: 0,1:21:21.95,1:21:24.30,中文,,0,0,0,,我们将看到其他更简单的方法来做到这一点。
Dialogue: 0,1:21:24.30,1:21:28.94,中文,,0,0,0,,我们初始化一个名为 counter 的变量为 3，就像之前一样。
Dialogue: 0,1:21:28.94,1:21:29.34,中文,,0,0,0,,为什么？
Dialogue: 0,1:21:29.34,1:21:32.80,中文,,0,0,0,,那么，循环或重复某件事三次意味着什么？
Dialogue: 0,1:21:32.80,1:21:41.31,中文,,0,0,0,,这就像做三次事情，做完一次就倒计时，再做一次，再倒计时，一直做下去直到计数为零。
Dialogue: 0,1:21:41.31,1:21:45.13,中文,,0,0,0,,这里声明了一个名为 counter 的变量，并将其设置为 3。
Dialogue: 0,1:21:45.13,1:21:52.45,中文,,0,0,0,,然后我在 C 中引入了一个循环，它在精神上类似于重复 3 次，但需要自己进行更多的数学运算。
Dialogue: 0,1:21:52.45,1:21:58.16,中文,,0,0,0,,我在括号中提出问题，当 counter > 0 时。
Dialogue: 0,1:21:58.16,1:21:59.10,中文,,0,0,0,,我想做什么？
Dialogue: 0,1:21:59.10,1:22:04.32,中文,,0,0,0,,根据花括号内的缩进，我想让它喵一声。
Dialogue: 0,1:22:04.32,1:22:07.17,中文,,0,0,0,,然后，需要说明的是，最后一行代码在做什么？
Dialogue: 0,1:22:07.17,1:22:10.43,中文,,0,0,0,,如果 counter 的初始值为 3，这会使它变成什么？
Dialogue: 0,1:22:10.43,1:22:12.28,中文,,0,0,0,,变成 2，因为它减去了 1。
Dialogue: 0,1:22:12.28,1:22:13.40,中文,,0,0,0,,然后会发生什么？
Dialogue: 0,1:22:13.40,1:22:20.90,中文,,0,0,0,,循环的本质就像 Scratch 中一样，它知道来回执行，即使 Scratch 中有一个漂亮的箭头而这里没有。
Dialogue: 0,1:22:20.90,1:22:28.90,中文,,0,0,0,,C 知道要一遍又一遍地执行此操作，不断地询问这个问题，然后在最后更新这个值。
Dialogue: 0,1:22:28.90,1:22:33.82,中文,,0,0,0,,如果我只看其中几个步骤，变量的初始值为 3。
Dialogue: 0,1:22:33.82,1:22:35.10,中文,,0,0,0,,实际上，让我简化一下。
Dialogue: 0,1:22:35.10,1:22:43.61,中文,,0,0,0,,我之前说过，当使用单个变量时，人们通常将其称为 i 代表 int，c 代表 char，s 代表 string，除非有多个变量。
Dialogue: 0,1:22:43.61,1:22:44.71,中文,,0,0,0,,让我把代码缩减一下。
Dialogue: 0,1:22:44.71,1:22:47.31,中文,,0,0,0,,这样看起来就更容易接受了。
Dialogue: 0,1:22:47.31,1:22:49.27,中文,,0,0,0,,让我再进一步精简一下。
Dialogue: 0,1:22:49.27,1:22:50.25,中文,,0,0,0,,再进一步。
Dialogue: 0,1:22:50.25,1:22:54.76,中文,,0,0,0,,现在这段代码已经尽可能的简洁了。
Dialogue: 0,1:22:54.76,1:22:56.24,中文,,0,0,0,,这里实际上会发生什么呢？
Dialogue: 0,1:22:56.24,1:22:59.70,中文,,0,0,0,,第一行代码执行，将 i 初始化为 3。
Dialogue: 0,1:22:59.70,1:23:01.08,中文,,0,0,0,,然后我们检查条件。
Dialogue: 0,1:23:01.08,1:23:03.80,中文,,0,0,0,,当 i > 0 时，i > 0 吗？
Dialogue: 0,1:23:03.80,1:23:05.72,中文,,0,0,0,,根据我的三根手指，显然是的。
Dialogue: 0,1:23:05.72,1:23:07.77,中文,,0,0,0,,我们在屏幕上打印 meow。
Dialogue: 0,1:23:07.77,1:23:15.47,中文,,0,0,0,,然后我们从 i 中减去 1，此时 i 的值为 2。然后代码回到条件判断。
Dialogue: 0,1:23:15.47,1:23:17.55,中文,,0,0,0,,注意，那里的条件在括号中。
Dialogue: 0,1:23:17.55,1:23:19.50,中文,,0,0,0,,那是另一个布尔表达式。
Dialogue: 0,1:23:19.50,1:23:25.08,中文,,0,0,0,,所以循环可以使用布尔表达式，就像条件语句使用布尔表达式来做决定一样。
Dialogue: 0,1:23:25.08,1:23:31.46,中文,,0,0,0,,不过，循环不是决定做这件事还是那件事，而是决定是否一遍又一遍地做同一件事。
Dialogue: 0,1:23:31.46,1:23:40.48,中文,,0,0,0,,当它一行一行地执行代码时，最终会到 1，然后是 0，然后停止。
Dialogue: 0,1:23:40.48,1:23:42.82,中文,,0,0,0,,换句话说，我带了一些道具来。
Dialogue: 0,1:23:42.82,1:23:49.56,中文,,0,0,0,,假设这个球是你的变量，你用三个解压球把它初始化为 3。
Dialogue: 0,1:23:49.56,1:23:51.58,中文,,0,0,0,,你可以做三遍，对吧？
Dialogue: 0,1:23:51.58,1:23:56.64,中文,,0,0,0,,如果我想发出三个解压球，这是你获得三个解压球的机会，不需要回答任何问题。
Dialogue: 0,1:23:56.64,1:23:57.32,中文,,0,0,0,,好的，就这样。
Dialogue: 0,1:23:57.32,1:23:58.46,中文,,0,0,0,,开始了。
Dialogue: 0,1:23:58.46,1:24:00.18,中文,,0,0,0,,从我的变量中减去 1。
Dialogue: 0,1:24:00.18,1:24:01.88,中文,,0,0,0,,我还剩 2 个。
Dialogue: 0,1:24:01.88,1:24:02.50,中文,,0,0,0,,我的天哪。
Dialogue: 0,1:24:02.50,1:24:04.24,中文,,0,0,0,,好吧。
Dialogue: 0,1:24:04.24,1:24:06.36,中文,,0,0,0,,别告诉桑德斯。
Dialogue: 0,1:24:06.36,1:24:08.65,中文,,0,0,0,,哦，抱歉。
Dialogue: 0,1:24:08.65,1:24:10.33,中文,,0,0,0,,好吧，结局不太好。
Dialogue: 0,1:24:10.33,1:24:11.11,中文,,0,0,0,,抱歉。
Dialogue: 0,1:24:11.11,1:24:17.26,中文,,0,0,0,,但现在的教育意义在于，我的变量被进一步递减到只剩下一个了。
Dialogue: 0,1:24:17.26,1:24:18.26,中文,,0,0,0,,我不会再扔那么远了。
Dialogue: 0,1:24:18.26,1:24:19.62,中文,,0,0,0,,我做不到。
Dialogue: 0,1:24:19.62,1:24:20.30,中文,,0,0,0,,好了。
Dialogue: 0,1:24:20.30,1:24:21.28,中文,,0,0,0,,好了，开始了。
Dialogue: 0,1:24:21.28,1:24:25.58,中文,,0,0,0,,最后一次减法，现在我们的变量空了。
Dialogue: 0,1:24:25.58,1:24:28.36,中文,,0,0,0,,我们那里有三个减压球，这就是变量的全部，对吧？
Dialogue: 0,1:24:28.36,1:24:29.52,中文,,0,0,0,,这是一种存储方式。
Dialogue: 0,1:24:29.52,1:24:32.26,中文,,0,0,0,,当然，它实际上是在计算机内存中实现的。
Dialogue: 0,1:24:32.26,1:24:35.73,中文,,0,0,0,,但打个比方，它就像一个装有一些值的碗。
Dialogue: 0,1:24:35.73,1:24:39.85,中文,,0,0,0,,每次你加，或者在这个例子中是减，你只是在改变那个变量的值。
Dialogue: 0,1:24:39.85,1:24:44.65,中文,,0,0,0,,同时，代码在括号里所做的只是检查，碗空了吗？
Dialogue: 0,1:24:44.65,1:24:45.37,中文,,0,0,0,,碗空了吗？
Dialogue: 0,1:24:45.37,1:24:46.69,中文,,0,0,0,,碗空了吗？
Dialogue: 0,1:24:46.69,1:24:50.49,中文,,0,0,0,,也就是说，i 是否大于 0？
Dialogue: 0,1:24:50.49,1:24:55.25,中文,,0,0,0,,关于我们用这种方式实现循环，大家有什么问题吗？
Dialogue: 0,1:24:55.25,1:24:58.15,中文,,0,0,0,,下课后我会给大家一个压力球。
Dialogue: 0,1:24:58.15,1:24:59.95,中文,,0,0,0,,关于循环还有什么问题吗？
Dialogue: 0,1:24:59.95,1:25:03.23,中文,,0,0,0,,结果发现这有点难看。
Dialogue: 0,1:25:03.23,1:25:09.49,中文,,0,0,0,,当你不得不写出一连串的步骤时，这真的开始让编程失去乐趣了。
Dialogue: 0,1:25:09.49,1:25:11.41,中文,,0,0,0,,事实证明，还有其他方法可以做到这一点。
Dialogue: 0,1:25:11.41,1:25:16.55,中文,,0,0,0,,但首先，让我们从逻辑上看看你还能如何表达这一点，因为我们一直使用 0 有点奇怪。
Dialogue: 0,1:25:16.55,1:25:19.99,中文,,0,0,0,,所以另一种方法是反转逻辑。
Dialogue: 0,1:25:19.99,1:25:23.98,中文,,0,0,0,,你可以从你的变量开始，把它叫做 i 并设为 1。
Dialogue: 0,1:25:23.98,1:25:28.46,中文,,0,0,0,,然后你可以问，i 是否小于或等于 3？
Dialogue: 0,1:25:28.46,1:25:30.34,中文,,0,0,0,,注意这里有一个新的语法。
Dialogue: 0,1:25:30.34,1:25:37.91,中文,,0,0,0,,在你的键盘上，没有像你在数学课上写的那样，一个符号在另一个符号之上的小于等于号或大于等于号。
Dialogue: 0,1:25:37.91,1:25:45.35,中文,,0,0,0,,所以在 C 语言中，你使用两个字符，小于号后面跟着一个等号，或者如果合适的话，大于号后面跟着一个等号。
Dialogue: 0,1:25:45.35,1:25:47.59,中文,,0,0,0,,这在逻辑上抓住了这个想法。
Dialogue: 0,1:25:47.59,1:25:50.56,中文,,0,0,0,,注意，我正在改变我的问题。
Dialogue: 0,1:25:50.56,1:25:52.18,中文,,0,0,0,,我将 i 初始化为 1。
Dialogue: 0,1:25:52.18,1:25:55.94,中文,,0,0,0,,然后我最终要把它递增到 2，然后是 3。
Dialogue: 0,1:25:55.94,1:26:00.37,中文,,0,0,0,,但因为我做的是小于或等于，它仍然会从 1 到 3。
Dialogue: 0,1:26:00.37,1:26:01.69,中文,,0,0,0,,所以这也能行。
Dialogue: 0,1:26:01.69,1:26:03.81,中文,,0,0,0,,我们可以用另一种方式来实现。
Dialogue: 0,1:26:03.81,1:26:06.55,中文,,0,0,0,,我们可以将 i 初始化为 0。
Dialogue: 0,1:26:06.55,1:26:11.70,中文,,0,0,0,,然后我们可以说，当 i < 3 时，就一直增加它。
Dialogue: 0,1:26:11.70,1:26:14.94,中文,,0,0,0,,我之前展示的最后一种形式实际上是最规范的。
Dialogue: 0,1:26:14.94,1:26:18.66,中文,,0,0,0,,从 1 到 3 思考可能更符合人类的思维方式。
Dialogue: 0,1:26:18.66,1:26:23.82,中文,,0,0,0,,从 3 到 0 倒计时思考可能更像压力球的思维方式。
Dialogue: 0,1:26:23.82,1:26:29.18,中文,,0,0,0,,但通常情况下，一旦你习惯了从 0 开始计数，大多数程序员的首选语法是，
Dialogue: 0,1:26:29.18,1:26:35.75,中文,,0,0,0,,始终从 0 开始计数，并计数到比要计数到的值小 1 的位置。
Dialogue: 0,1:26:35.75,1:26:40.43,中文,,0,0,0,,如果将这里的小于改为小于或等于 3，那就错了。
Dialogue: 0,1:26:40.43,1:26:44.52,中文,,0,0,0,,如果我把小于改为小于或等于，会发生什么？
Dialogue: 0,1:26:44.52,1:26:47.46,中文,,0,0,0,,是的，实际上，现在总共是四次，对吧？
Dialogue: 0,1:26:47.46,1:26:51.12,中文,,0,0,0,,因为你会从 0 开始，然后是 1，然后是 2，然后是 3。
Dialogue: 0,1:26:51.12,1:26:55.36,中文,,0,0,0,,小于或等于 3，抱歉，3 会给你第四次。
Dialogue: 0,1:26:55.36,1:26:58.76,中文,,0,0,0,,我们确实希望它只是一个简单的小于号。
Dialogue: 0,1:26:58.76,1:27:02.46,中文,,0,0,0,,既然我们有了这些选项，让我再给你一个。
Dialogue: 0,1:27:02.46,1:27:07.24,中文,,0,0,0,,这个也需要一些时间来适应，但这可能是更常见的写法。
Dialogue: 0,1:27:07.24,1:27:11.47,中文,,0,0,0,,让我来提议一下，我们按如下方式实现。
Dialogue: 0,1:27:11.47,1:27:13.47,中文,,0,0,0,,让我回到我的代码这里。
Dialogue: 0,1:27:13.47,1:27:21.25,中文,,0,0,0,,让我进入我的几个 printf，最终删除除一个之外的所有 printf。
Dialogue: 0,1:27:21.25,1:27:22.67,中文,,0,0,0,,让我们在代码中实现这一点。
Dialogue: 0,1:27:22.67,1:27:25.35,中文,,0,0,0,,我们让 int i 获得 0。
Dialogue: 0,1:27:25.35,1:27:42.55,中文,,0,0,0,,那么当 i < 3 的时候，我们继续，然后说 printf 引号 mello，meow\ n。然后我们必须 i 减减还是加加？
Dialogue: 0,1:27:42.55,1:27:47.29,中文,,0,0,0,,加加，因为我们从 0 开始，增加到 2，但不到 3。
Dialogue: 0,1:27:47.29,1:27:51.64,中文,,0,0,0,,让我现在继续，在清空终端后，创建 meow，点斜杠 meow。
Dialogue: 0,1:27:51.64,1:27:56.76,中文,,0,0,0,,它仍然是正确的，但设计得更好一些。
Dialogue: 0,1:27:56.76,1:27:57.36,中文,,0,0,0,,为什么？
Dialogue: 0,1:27:57.36,1:28:02.01,中文,,0,0,0,,因为现在如果我想把它从 3 次改成 30 次，例如，我可以在这里改。
Dialogue: 0,1:28:02.01,1:28:04.01,中文,,0,0,0,,我可以重新编译我的代码。
Dialogue: 0,1:28:04.01,1:28:06.07,中文,,0,0,0,,我可以执行点斜杠 meow，完成。
Dialogue: 0,1:28:06.07,1:28:09.47,中文,,0,0,0,,我不必再复制粘贴 27 次才能达到这种效果。
Dialogue: 0,1:28:09.47,1:28:13.58,中文,,0,0,0,,我甚至可以通过在一个地方修改来改变这个词。
Dialogue: 0,1:28:13.58,1:28:16.10,中文,,0,0,0,,但事实证明还有其他方法可以做到这一点。
Dialogue: 0,1:28:16.10,1:28:20.70,中文,,0,0,0,,让我建议大家了解一下所谓的 for 循环。
Dialogue: 0,1:28:20.70,1:28:26.24,中文,,0,0,0,,如果你想重复某件事三次，你完全可以使用我们刚才看到的 while 循环方法。
Dialogue: 0,1:28:26.24,1:28:27.54,中文,,0,0,0,,或者你可以这样做。
Dialogue: 0,1:28:27.54,1:28:34.29,中文,,0,0,0,,这需要一点时间来适应，但它将所有相同的逻辑整合到一行中。
Dialogue: 0,1:28:34.29,1:28:36.81,中文,,0,0,0,,注意，这里有关键字 for。
Dialogue: 0,1:28:36.81,1:28:42.38,中文,,0,0,0,,在这种情况下，for 只是一个介词，通常表示循环开始了。
Dialogue: 0,1:28:42.38,1:28:46.44,中文,,0,0,0,,括号内的内容不仅仅是一个布尔表达式。
Dialogue: 0,1:28:46.44,1:28:48.02,中文,,0,0,0,,这就是事情变得有点奇怪的地方。
Dialogue: 0,1:28:48.02,1:28:55.11,中文,,0,0,0,,分号左边、两个分号中间和分号右边，总共有三个部分。
Dialogue: 0,1:28:55.11,1:28:58.43,中文,,0,0,0,,实际上，在其他情况下很少会看到分号，这很奇怪。
Dialogue: 0,1:28:58.43,1:29:00.13,中文,,0,0,0,,通常情况下，它会出现在一行的末尾。
Dialogue: 0,1:29:00.13,1:29:05.06,中文,,0,0,0,,现在一行中间出现了两个分号，但这就是很多年前人们决定这样做的方式。
Dialogue: 0,1:29:05.06,1:29:06.18,中文,,0,0,0,,那么，这是在做什么呢？
Dialogue: 0,1:29:06.18,1:29:08.04,中文,,0,0,0,,几乎是一样的。
Dialogue: 0,1:29:08.04,1:29:12.60,中文,,0,0,0,,它将初始化一个名为 i 的变量，并将其设置为 0。
Dialogue: 0,1:29:12.60,1:29:16.67,中文,,0,0,0,,然后它会检查它是否小于 3。
Dialogue: 0,1:29:16.67,1:29:20.07,中文,,0,0,0,,然后它会执行花括号中的任何内容。
Dialogue: 0,1:29:20.07,1:29:23.09,中文,,0,0,0,,最后，它会递增 i 并重复。
Dialogue: 0,1:29:23.09,1:29:28.51,中文,,0,0,0,,依次突出显示这些内容，首先，i 被初始化为 0，就像之前一样。
Dialogue: 0,1:29:28.51,1:29:30.17,中文,,0,0,0,,然后检查这个条件。
Dialogue: 0,1:29:30.17,1:29:32.20,中文,,0,0,0,,这是一个布尔表达式。
Dialogue: 0,1:29:32.20,1:29:34.80,中文,,0,0,0,,它的答案是“是”或“否”，“真”或“假”。
Dialogue: 0,1:29:34.80,1:29:40.76,中文,,0,0,0,,如果 i < 3，它从 0 开始就应该是这样，那么我们将继续打印“meow”。
Dialogue: 0,1:29:40.76,1:29:42.38,中文,,0,0,0,,然后 i 会递增。
Dialogue: 0,1:29:42.38,1:29:43.58,中文,,0,0,0,,它从 0 开始。
Dialogue: 0,1:29:43.58,1:29:45.38,中文,,0,0,0,,现在变成 1。
Dialogue: 0,1:29:45.38,1:29:48.19,中文,,0,0,0,,此时，再次检查布尔表达式。
Dialogue: 0,1:29:48.19,1:29:50.85,中文,,0,0,0,,这样就不会一直将 i 改回 0。
Dialogue: 0,1:29:50.85,1:29:53.37,中文,,0,0,0,,第一步只发生一次。
Dialogue: 0,1:29:53.37,1:29:56.33,中文,,0,0,0,,但现在你要重复执行这三个高亮显示的部分。
Dialogue: 0,1:29:56.33,1:29:57.79,中文,,0,0,0,,我检查 i 是否小于 3。
Dialogue: 0,1:29:57.79,1:29:58.37,中文,,0,0,0,,它是。
Dialogue: 0,1:29:58.37,1:29:59.72,中文,,0,0,0,,我打印出 meow。
Dialogue: 0,1:29:59.72,1:30:03.56,中文,,0,0,0,,然后它会增加 i。我检查 i，现在是 2，是否小于 3。
Dialogue: 0,1:30:03.56,1:30:04.04,中文,,0,0,0,,它是。
Dialogue: 0,1:30:04.04,1:30:05.44,中文,,0,0,0,,我打印出 meow。
Dialogue: 0,1:30:05.44,1:30:06.44,中文,,0,0,0,,i 自增。
Dialogue: 0,1:30:06.44,1:30:07.14,中文,,0,0,0,,我现在检查。
Dialogue: 0,1:30:07.14,1:30:08.20,中文,,0,0,0,,i 是否小于 3？
Dialogue: 0,1:30:08.20,1:30:11.51,中文,,0,0,0,,不，它不是，因为 3 不小于 3。
Dialogue: 0,1:30:11.51,1:30:12.89,中文,,0,0,0,,整个过程就停止了。
Dialogue: 0,1:30:12.89,1:30:17.41,中文,,0,0,0,,然后，这个花括号下面的任何代码，如果有的话，都会开始执行。
Dialogue: 0,1:30:17.41,1:30:22.77,中文,,0,0,0,,就像在 Scratch 中一样，你跳出了循环和被包围的拼图块。
Dialogue: 0,1:30:22.77,1:30:30.12,中文,,0,0,0,,那么，关于这种循环的替代语法，也就是
Dialogue: 0,1:30:30.12,1:30:34.76,中文,,0,0,0,,for 循环，有什么问题吗？
Dialogue: 0,1:30:34.76,1:30:37.60,中文,,0,0,0,,抱歉，再说一遍？
Dialogue: 0,1:30:37.60,1:30:40.52,中文,,0,0,0,,是的，你能再解释一下为什么它没有重置为 0 吗？
Dialogue: 0,1:30:40.52,1:30:41.76,中文,,0,0,0,,坦白说，就是这样的。
Dialogue: 0,1:30:41.76,1:30:43.60,中文,,0,0,0,,这就是他们选择的语法。
Dialogue: 0,1:30:43.60,1:30:47.64,中文,,0,0,0,,第一个分号前的这部分只执行一次。
Dialogue: 0,1:30:47.64,1:30:48.92,中文,,0,0,0,,它就是这样设计的。
Dialogue: 0,1:30:48.92,1:30:51.77,中文,,0,0,0,,其他所有内容都会一遍又一遍地循环。
Dialogue: 0,1:30:51.77,1:30:55.61,中文,,0,0,0,,这只是使用 while 循环的另一种语法，代码行数稍微少一些。
Dialogue: 0,1:30:55.61,1:30:57.75,中文,,0,0,0,,使用 while 循环需要六行代码。
Dialogue: 0,1:30:57.75,1:30:59.71,中文,,0,0,0,,逻辑上，两者是一样的。
Dialogue: 0,1:30:59.71,1:31:05.32,中文,,0,0,0,,程序员一旦熟悉了，就会更喜欢这种方式，因为它能更简洁地表达你的想法。
Dialogue: 0,1:31:05.32,1:31:06.50,中文,,0,0,0,,就这样。
Dialogue: 0,1:31:06.50,1:31:07.76,中文,,0,0,0,,是的。
Dialogue: 0,1:31:07.76,1:31:11.16,中文,,0,0,0,,我们把它用到我的 meow 例子中。
Dialogue: 0,1:31:11.16,1:31:12.76,中文,,0,0,0,,回到代码这里。
Dialogue: 0,1:31:12.76,1:31:16.19,中文,,0,0,0,,注意，如果我选中所有这些行，我们可以把它精简一下。
Dialogue: 0,1:31:16.19,1:31:21.61,中文,,0,0,0,,删除所有这些，然后输入 for int i equals 0。
Dialogue: 0,1:31:21.61,1:31:22.81,中文,,0,0,0,,我说的是 equals。
Dialogue: 0,1:31:22.81,1:31:24.37,中文,,0,0,0,,大多数程序员会说 get。
Dialogue: 0,1:31:24.37,1:31:28.39,中文,,0,0,0,,所以 int i get 0 表示赋值，get 这个词。
Dialogue: 0,1:31:28.39,1:31:32.44,中文,,0,0,0,,现在我要写 i < 3, i ++。
Dialogue: 0,1:31:32.44,1:31:37.88,中文,,0,0,0,,现在在这里，我要写 printf，引号 meow 反斜杠 n。
Dialogue: 0,1:31:37.88,1:31:39.30,中文,,0,0,0,,它确实更简洁了。
Dialogue: 0,1:31:39.30,1:31:41.06,中文,,0,0,0,,我的意思是，有两行只是花括号。
Dialogue: 0,1:31:41.06,1:31:43.70,中文,,0,0,0,,现在实际上只有两行代码是有用的。
Dialogue: 0,1:31:43.70,1:31:47.53,中文,,0,0,0,,让我继续，执行 make meow ./meow。
Dialogue: 0,1:31:47.53,1:31:51.70,中文,,0,0,0,,同样，我们又可以正常工作了，只打印三次。
Dialogue: 0,1:31:51.70,1:31:56.48,中文,,0,0,0,,还有一个结构我们需要探讨，因为它有时很有用。
Dialogue: 0,1:31:56.48,1:31:58.10,中文,,0,0,0,,这是一个永远循环块。
Dialogue: 0,1:31:58.10,1:32:02.83,中文,,0,0,0,,在 Scratch 中，只说永远喵一声会有点奇怪，至少在没有等待的情况下是这样。
Dialogue: 0,1:32:02.83,1:32:07.69,中文,,0,0,0,,但 Scratch 中确实有一个永远循环块，这意味着永远执行以下操作。
Dialogue: 0,1:32:07.69,1:32:11.38,中文,,0,0,0,,我记得上周至少口头提出了一个例子，说明这很有用。
Dialogue: 0,1:32:11.38,1:32:13.06,中文,,0,0,0,,永远喵喵叫，有点烦人。
Dialogue: 0,1:32:13.06,1:32:19.30,中文,,0,0,0,,但你能想到哪些常见情况下，你可能想编写代码或使用一个永远循环的程序吗？
Dialogue: 0,1:32:19.30,1:32:21.90,中文,,0,0,0,,是的。
Dialogue: 0,1:32:21.90,1:32:28.35,中文,,0,0,0,,是的，播放音乐，就像 Spotify 播放列表一遍又一遍地重复播放，就是一种循环。
Dialogue: 0,1:32:28.35,1:32:29.85,中文,,0,0,0,,在 Scratch 中检查碰撞。
Dialogue: 0,1:32:29.85,1:32:36.95,中文,,0,0,0,,看看是否有东西从墙上或另一个精灵上弹开，是的。
Dialogue: 0,1:32:36.95,1:32:37.87,中文,,0,0,0,,检查输入。
Dialogue: 0,1:32:37.87,1:32:44.53,中文,,0,0,0,,是的，get_string 本质上只是一直在那里等待我输入一些内容，直到我输入为止。
Dialogue: 0,1:32:44.53,1:32:48.66,中文,,0,0,0,,检查时间，并实际维护人类时间，就像你身后的挂钟一样。
Dialogue: 0,1:32:48.66,1:32:50.73,中文,,0,0,0,,那是一样的吗？
Dialogue: 0,1:32:50.73,1:32:52.93,中文,,0,0,0,,检查时间，还有一个。
Dialogue: 0,1:32:52.93,1:32:58.36,中文,,0,0,0,,检测按键也是一样，就像在 Scratch 中一样，只是在等待某种事件的发生，就像在手机或浏览器上一样。
Dialogue: 0,1:32:58.36,1:33:04.60,中文,,0,0,0,,有很多例子，你可能想永远地做某件事，所以你已经看到了相应的 C 语言构建块。
Dialogue: 0,1:33:04.60,1:33:09.48,中文,,0,0,0,,这有点奇怪，但这可能是最规范的做法。
Dialogue: 0,1:33:09.48,1:33:18.87,中文,,0,0,0,,在 C 语言中，如果你想永远打印 meow，这会有点疯狂，因为它会不停地打印 meow 并占满你的电脑，你通常会这样做。
Dialogue: 0,1:33:18.87,1:33:19.49,中文,,0,0,0,,为什么？
Dialogue: 0,1:33:19.49,1:33:22.83,中文,,0,0,0,,因为 while 循环的括号里需要一个布尔表达式。
Dialogue: 0,1:33:22.83,1:33:26.17,中文,,0,0,0,,而布尔表达式，就是一个“是”或“否”，“真”或“假”的问题。
Dialogue: 0,1:33:26.17,1:33:35.23,中文,,0,0,0,,但如果你希望这个问题的答案永远是“是”，或者说永远是“真”，在 C 语言和很多其他语言中，你只需要写 true。
Dialogue: 0,1:33:35.23,1:33:38.80,中文,,0,0,0,,因为 true，T-R-U-E，永远不会神奇地变成 false。
Dialogue: 0,1:33:38.80,1:33:41.60,中文,,0,0,0,,它只是编程语言中的一个特殊单词。
Dialogue: 0,1:33:41.60,1:33:45.72,中文,,0,0,0,,所以说 while true，就意味着永远做下面的事情。
Dialogue: 0,1:33:45.72,1:33:54.25,中文,,0,0,0,,在 true 和 false 成为普遍现象之前，另一种常见的写法是，把 while true 改成 while one。
Dialogue: 0,1:33:54.25,1:33:57.96,中文,,0,0,0,,你可能会在网上的例子、文本等地方看到这种写法。
Dialogue: 0,1:33:57.96,1:34:05.10,中文,,0,0,0,,while one 实际上是一样的，任何值为零的值通常被计算机解释为 false。
Dialogue: 0,1:34:05.10,1:34:11.26,中文,,0,0,0,,任何值为一或任何其他非零值通常被解释为 true。
Dialogue: 0,1:34:11.26,1:34:15.55,中文,,0,0,0,,while true 或 while one 的效果是一样的。
Dialogue: 0,1:34:15.55,1:34:18.81,中文,,0,0,0,,一般来说，现在 while true 的写法更清晰一些。
Dialogue: 0,1:34:18.81,1:34:20.63,中文,,0,0,0,,永远喵喵叫可不是什么好事。
Dialogue: 0,1:34:20.63,1:34:23.73,中文,,0,0,0,,但假设我是有意或无意地这样做的。
Dialogue: 0,1:34:23.73,1:34:25.04,中文,,0,0,0,,我们试试这个。
Dialogue: 0,1:34:25.04,1:34:26.50,中文,,0,0,0,,我打开代码。
Dialogue: 0,1:34:26.50,1:34:32.24,中文,,0,0,0,,我要删除 for 循环，并将 while 循环改为 true。
Dialogue: 0,1:34:32.24,1:34:35.21,中文,,0,0,0,,我们保留这部分。
Dialogue: 0,1:34:35.21,1:34:36.15,中文,,0,0,0,,我们来试试。
Dialogue: 0,1:34:36.15,1:34:38.43,中文,,0,0,0,,输入 make meow，回车。
Dialogue: 0,1:34:38.43,1:34:41.76,中文,,0,0,0,,你会看到这个错误提示：使用了未声明的标识符 true。
Dialogue: 0,1:34:41.76,1:34:46.38,中文,,0,0,0,,这其实暗示了之前提到的旧方法是使用 0 和 1。
Dialogue: 0,1:34:46.38,1:34:48.37,中文,,0,0,0,,现在，可以使用 true 或 false。
Dialogue: 0,1:34:48.37,1:34:53.65,中文,,0,0,0,,但 true 和 false 本身是特殊的词，需要包含对应的头文件。
Dialogue: 0,1:34:53.65,1:35:03.80,中文,,0,0,0,,事实证明，如果要使用像这样的特殊布尔值，需要包含另一个名为 standard bool 的头文件，它本质上是将 true 和 false 创建为关键字。
Dialogue: 0,1:35:03.80,1:35:06.57,中文,,0,0,0,,或者，CS50 已经包含了该文件。
Dialogue: 0,1:35:06.57,1:35:09.15,中文,,0,0,0,,所以在 CS50 中更常见的是这种写法。
Dialogue: 0,1:35:09.15,1:35:15.40,中文,,0,0,0,,现在，如果我清除终端窗口并输入 make meow，然后输入 ./meow 并回车。
Dialogue: 0,1:35:15.40,1:35:21.26,中文,,0,0,0,,不幸的是，当你在云端使用浏览器时，无限循环并不是什么好事。
Dialogue: 0,1:35:21.26,1:35:25.10,中文,,0,0,0,,这实际上是一个全屏的浏览器。
Dialogue: 0,1:35:25.10,1:35:29.88,中文,,0,0,0,,这意味着我正在通过互联网向我的电脑发送数百万条 meow。
Dialogue: 0,1:35:29.88,1:35:31.16,中文,,0,0,0,,你迟早会遇到这种情况。
Dialogue: 0,1:35:31.16,1:35:34.13,中文,,0,0,0,,可能不是 meow，但你会失去对终端窗口的控制。
Dialogue: 0,1:35:34.13,1:35:34.39,中文,,0,0,0,,为什么？
Dialogue: 0,1:35:34.39,1:35:35.15,中文,,0,0,0,,因为你犯错了。
Dialogue: 0,1:35:35.15,1:35:36.25,中文,,0,0,0,,你写了一个无限循环。
Dialogue: 0,1:35:36.25,1:35:37.09,中文,,0,0,0,,你并非有意为之。
Dialogue: 0,1:35:37.09,1:35:37.69,中文,,0,0,0,,也可能你是故意的。
Dialogue: 0,1:35:37.69,1:35:39.41,中文,,0,0,0,,你想看看会发生什么。
Dialogue: 0,1:35:39.41,1:35:42.01,中文,,0,0,0,,你要怎么做？
Dialogue: 0,1:35:42.01,1:35:44.11,中文,,0,0,0,,猫叫声什么时候停止？
Dialogue: 0,1:35:44.11,1:35:45.59,中文,,0,0,0,,我们有什么办法？
Dialogue: 0,1:35:45.59,1:35:48.57,中文,,0,0,0,,Control-C 可以帮到你。
Dialogue: 0,1:35:48.57,1:35:55.57,中文,,0,0,0,,有时在云环境中需要多按几次，但 Control-C 可以中断正在运行的程序。
Dialogue: 0,1:35:55.57,1:36:02.75,中文,,0,0,0,,我保证几乎所有人都会在某个时候因为计算错误而意外地引入无限循环。
Dialogue: 0,1:36:02.75,1:36:09.72,中文,,0,0,0,,遇到这种情况时，点击终端窗口，按下 Control-C，有时需要多次，这会取消正在进行的操作。
Dialogue: 0,1:36:09.72,1:36:14.32,中文,,0,0,0,,在这种情况下，我可能是故意的，但有时并非如此。
Dialogue: 0,1:36:14.32,1:36:19.28,中文,,0,0,0,,我们已经习惯了图形用户界面。
Dialogue: 0,1:36:19.28,1:36:23.89,中文,,0,0,0,,包括我输入的命令和点击的按钮。
Dialogue: 0,1:36:23.89,1:36:31.71,中文,,0,0,0,,让我来告诉你，我们一直在使用的底层系统是什么，一个叫做 Linux 的操作系统。
Dialogue: 0,1:36:31.71,1:36:38.90,中文,,0,0,0,,我一直提到 Mac 和 PC，因为现在几乎每个人都在台式机或笔记本电脑上运行 Mac OS 或 Windows。
Dialogue: 0,1:36:38.90,1:36:40.90,中文,,0,0,0,,但还有很多其他的操作系统。
Dialogue: 0,1:36:40.90,1:36:43.40,中文,,0,0,0,,其中最流行的一种叫做 Linux。
Dialogue: 0,1:36:43.40,1:36:51.69,中文,,0,0,0,,现在，Linux 经常用于服务器，比如托管电子邮件的公司、托管网站或应用程序的公司。
Dialogue: 0,1:36:51.69,1:36:57.11,中文,,0,0,0,,有些计算机科学家或学生喜欢吹嘘他们运行 Linux 系统。
Dialogue: 0,1:36:57.11,1:37:01.23,中文,,0,0,0,,它实际上是 Mac OS 或 Windows 的替代品，
Dialogue: 0,1:37:01.23,1:37:07.62,中文,,0,0,0,,它既可以提供 GUI 界面（如果你需要的话），也特别提供命令行环境。
Dialogue: 0,1:37:07.62,1:37:12.54,中文,,0,0,0,,有趣的是，Windows 和 Mac OS 确实有终端窗口，或者类似的东西。
Dialogue: 0,1:37:12.54,1:37:16.35,中文,,0,0,0,,最终，你可能会在自己的 Mac 或 PC 上使用它来解决一些问题。
Dialogue: 0,1:37:16.35,1:37:18.35,中文,,0,0,0,,但 Linux 真正的优势在于，
Dialogue: 0,1:37:18.35,1:37:26.51,中文,,0,0,0,,以及其他操作系统，它的命令行环境，也就是我之前提到的与 GUI 不同的命令行界面（CLI）。
Dialogue: 0,1:37:26.51,1:37:29.41,中文,,0,0,0,,它指的就是终端窗口。
Dialogue: 0,1:37:29.41,1:37:42.41,中文,,0,0,0,,回到 VS Code，让我关闭标签页，把注意力集中在终端窗口上，这个终端窗口实际上就是你访问云端服务器的命令行界面。
Dialogue: 0,1:37:42.41,1:37:47.66,中文,,0,0,0,,专业术语叫“容器”，你们每个人在云端都有自己的容器，就像你们自己的电脑一样，
Dialogue: 0,1:37:47.66,1:37:57.60,中文,,0,0,0,,运行在互联网上的某个地方，你有自己的用户名和密码，可以访问你自己的“硬盘”（也就是你的主文件夹），里面存放着你上课的所有文件。
Dialogue: 0,1:37:57.60,1:38:01.58,中文,,0,0,0,,除非你开启实时共享，否则只有你能访问。
Dialogue: 0,1:38:01.58,1:38:06.51,中文,,0,0,0,,当你在这里输入命令时，看起来就像是在你自己的 Mac 或 PC 上输入一样。
Dialogue: 0,1:38:06.51,1:38:15.99,中文,,0,0,0,,但它们实际上是通过浏览器发送到云端的某个服务器上，你在那里控制着，
Dialogue: 0,1:38:15.99,1:38:19.40,中文,,0,0,0,,实际上，还有一些其他命令值得了解。
Dialogue: 0,1:38:19.40,1:38:21.66,中文,,0,0,0,,今天只介绍其中几个。
Dialogue: 0,1:38:21.66,1:38:24.62,中文,,0,0,0,,在接下来的几周里，我们还会有机会学习其他的命令。
Dialogue: 0,1:38:24.62,1:38:26.26,中文,,0,0,0,,这些只是一些基础知识。
Dialogue: 0,1:38:26.26,1:38:28.75,中文,,0,0,0,,而且它们都非常简洁。
Dialogue: 0,1:38:28.75,1:38:33.81,中文,,0,0,0,,因为在命令行中输入内容时，人们通常不想输入很长的命令。
Dialogue: 0,1:38:33.81,1:38:36.03,中文,,0,0,0,,这里很多都是缩写。
Dialogue: 0,1:38:36.03,1:38:44.55,中文,,0,0,0,,最常用的命令可能是 ls，小写的 l 和小写的 s，它是 list（列表）的缩写。
Dialogue: 0,1:38:44.55,1:38:56.31,中文,,0,0,0,,到目前为止，我只在终端窗口中输入过代码，比如使用 VS Code 创建和打开文件，以及使用 make 编译代码。如果现在输入 ls 会怎样？
Dialogue: 0,1:38:56.31,1:39:02.04,中文,,0,0,0,,这将列出当前文件夹中的所有文件，也就是云端硬盘上的文件。
Dialogue: 0,1:39:02.04,1:39:05.72,中文,,0,0,0,,按下回车键，你会看到一堆结果。
Dialogue: 0,1:39:05.72,1:39:07.32,中文,,0,0,0,,它们的颜色也不一样。
Dialogue: 0,1:39:07.32,1:39:10.02,中文,,0,0,0,,这里白色的文件以 .c 结尾。
Dialogue: 0,1:39:10.02,1:39:15.99,中文,,0,0,0,,这些是我今天上课时写的源代码文件，agree.c、compare.c、hello.c 和 meow.c。
Dialogue: 0,1:39:15.99,1:39:24.49,中文,,0,0,0,,你可能已经猜到，绿色的文件名后面有一个星号，表示它们比较特殊，代表什么？
Dialogue: 0,1:39:24.49,1:39:25.33,中文,,0,0,0,,另外四个是什么？
Dialogue: 0,1:39:25.33,1:39:27.89,中文,,0,0,0,,对。
Dialogue: 0,1:39:27.89,1:39:29.41,中文,,0,0,0,,是机器代码。
Dialogue: 0,1:39:29.41,1:39:34.52,中文,,0,0,0,,这些是我的实际程序，名称相同，只是没有 .c 扩展名。
Dialogue: 0,1:39:34.52,1:39:36.82,中文,,0,0,0,,星号表示它们是可执行文件。
Dialogue: 0,1:39:36.82,1:39:39.82,中文,,0,0,0,,也就是说，在 Mac OS 或 Windows 中，你可以双击它们。
Dialogue: 0,1:39:39.82,1:39:47.45,中文,,0,0,0,,但在命令行环境中，你需要输入 ./ 加上文件名（不带星号）来执行或运行代码。
Dialogue: 0,1:39:47.45,1:39:55.07,中文,,0,0,0,,如果我打开文件资源管理器（我在电脑上按下了快捷键 Command+B），你会看到完全相同的内容。
Dialogue: 0,1:39:55.07,1:39:59.35,中文,,0,0,0,,所以 ls 是一个命令行界面命令，用于列出你账户中的文件。
Dialogue: 0,1:39:59.35,1:40:06.16,中文,,0,0,0,,但在这里，因为我使用的是 VS Code 或类似的程序，所以我也能看到图形用户界面。
Dialogue: 0,1:40:06.16,1:40:07.96,中文,,0,0,0,,这只是两种不同的方式。
Dialogue: 0,1:40:07.96,1:40:09.66,中文,,0,0,0,,你可以选择你习惯的方式。
Dialogue: 0,1:40:09.66,1:40:14.84,中文,,0,0,0,,但随着时间的推移，你会不会自然而然地对单独使用终端窗口感到更舒服、更有能力？
Dialogue: 0,1:40:14.84,1:40:17.16,中文,,0,0,0,,那么，这张清单上还有什么？
Dialogue: 0,1:40:17.16,1:40:23.53,中文,,0,0,0,,在休息期间，我看到你们中至少有一个人创建了一个名为 hello 的文件，而不是 hello.c。
Dialogue: 0,1:40:23.53,1:40:27.37,中文,,0,0,0,,你不小心遇到了这种情况，并按下了回车键。
Dialogue: 0,1:40:27.37,1:40:30.53,中文,,0,0,0,,然后你继续输入了所有代码，就像这样。
Dialogue: 0,1:40:30.53,1:40:34.99,中文,,0,0,0,,然后在终端窗口中，你尝试执行 make hello 回车。
Dialogue: 0,1:40:34.99,1:40:38.70,中文,,0,0,0,,但这实际上没有任何作用。
Dialogue: 0,1:40:38.70,1:40:42.38,中文,,0,0,0,,我正在点击，我正在尝试运行该命令。
Dialogue: 0,1:40:42.38,1:40:44.72,中文,,0,0,0,,我得到了拒绝访问的提示，就像你们中至少有一个人遇到过的那样。
Dialogue: 0,1:40:44.72,1:40:45.64,中文,,0,0,0,,这是为什么呢？
Dialogue: 0,1:40:45.64,1:40:46.92,中文,,0,0,0,,我们来快速检查一下。
Dialogue: 0,1:40:46.92,1:40:49.84,中文,,0,0,0,,如果我执行 ls，我现在看到了 hello。
Dialogue: 0,1:40:49.84,1:40:53.14,中文,,0,0,0,,但 hello 旁边没有星号，这意味着它不可执行。
Dialogue: 0,1:40:53.14,1:40:53.94,中文,,0,0,0,,那是我的代码。
Dialogue: 0,1:40:53.94,1:40:54.52,中文,,0,0,0,,为什么呢？
Dialogue: 0,1:40:54.52,1:40:57.55,中文,,0,0,0,,注意，我的标签顶部确认，哦，我搞砸了。
Dialogue: 0,1:40:57.55,1:41:00.95,中文,,0,0,0,,我没有把我的文件命名为 hello.c，而它必须是这个名字。
Dialogue: 0,1:41:00.95,1:41:01.83,中文,,0,0,0,,那该怎么办？
Dialogue: 0,1:41:01.83,1:41:05.83,中文,,0,0,0,,你可以非常笨拙地复制它，创建一个新文件，然后粘贴进去。
Dialogue: 0,1:41:05.83,1:41:06.75,中文,,0,0,0,,或者不，不，不。
Dialogue: 0,1:41:06.75,1:41:10.01,中文,,0,0,0,,我们知道如何重命名，因为这是我们的一种选择。
Dialogue: 0,1:41:10.01,1:41:11.13,中文,,0,0,0,,我来演示一下。
Dialogue: 0,1:41:11.13,1:41:17.58,中文,,0,0,0,,输入 mv 表示移动，然后是 hello，接着是 hello.c，按下回车键。
Dialogue: 0,1:41:17.58,1:41:20.20,中文,,0,0,0,,你会看到选项卡关闭了，因为 hello 不再存在。
Dialogue: 0,1:41:20.20,1:41:25.14,中文,,0,0,0,,但如果我现在输入 ls，你会看到，啊，这里有 hello.c。
Dialogue: 0,1:41:25.14,1:41:28.95,中文,,0,0,0,,如果我现在打开这个文件，里面有我所有的代码。
Dialogue: 0,1:41:28.95,1:41:35.09,中文,,0,0,0,,现在如果我执行 make hello，make hello，我确实得到了一个可执行文件。
Dialogue: 0,1:41:35.09,1:41:37.27,中文,,0,0,0,,它到哪里去了？
Dialogue: 0,1:41:37.27,1:41:43.02,中文,,0,0,0,,所以 mv 不仅是一个重命名的命令，而且最终也会用于移动文件。
Dialogue: 0,1:41:43.02,1:41:45.24,中文,,0,0,0,,你还可以创建目录或文件夹。
Dialogue: 0,1:41:45.24,1:41:52.89,中文,,0,0,0,,例如，如果我再次进入 VS Code，假设我将鼠标悬停在这里，点击的不是加号文件图标，而是加号文件夹图标。
Dialogue: 0,1:41:52.89,1:41:57.75,中文,,0,0,0,,我可以创建一个名为 pset1 的文件夹，表示这门课的习题集 1。
Dialogue: 0,1:41:57.75,1:42:03.01,中文,,0,0,0,,你会看到它现在是空的，因为我所有其他的文件都在我账户的默认文件夹里。
Dialogue: 0,1:42:03.01,1:42:05.58,中文,,0,0,0,,但我也可以像这样进去。
Dialogue: 0,1:42:05.58,1:42:07.60,中文,,0,0,0,,我可以点击文件。
Dialogue: 0,1:42:07.60,1:42:13.56,中文,,0,0,0,,现在我可以创建一个名为 mario.c 的新文件，例如，这是第一个问题。
Dialogue: 0,1:42:13.56,1:42:19.04,中文,,0,0,0,,但你会注意到 mario.c 现在在 pset1 文件夹里面。
Dialogue: 0,1:42:19.04,1:42:20.70,中文,,0,0,0,,所以我缩小一下。
Dialogue: 0,1:42:20.70,1:42:23.48,中文,,0,0,0,,我在终端窗口输入 ls。
Dialogue: 0,1:42:23.48,1:42:28.81,中文,,0,0,0,,我不会在任何地方看到 mario.c，但我确实看到了一个 pset1 文件夹。
Dialogue: 0,1:42:28.81,1:42:31.73,中文,,0,0,0,,它显示为淡蓝色，后面跟着一个斜杠，这个斜杠你不需要输入。
Dialogue: 0,1:42:31.73,1:42:33.33,中文,,0,0,0,,它只是表明这是一个文件夹。
Dialogue: 0,1:42:33.33,1:42:37.79,中文,,0,0,0,,现在，我可以很直观地在左上角看到 pset1 文件夹包含 mario.c。
Dialogue: 0,1:42:37.79,1:42:44.59,中文,,0,0,0,,但是如果我尝试在这里执行类似 make Mario 的操作，就会提示没有规则来创建目标 Mario，它似乎不存在。
Dialogue: 0,1:42:44.59,1:42:46.73,中文,,0,0,0,,这是因为你位于错误的目录中。
Dialogue: 0,1:42:46.73,1:42:51.68,中文,,0,0,0,,在命令行界面中，它不像点击文件夹然后打开那样简单。
Dialogue: 0,1:42:51.68,1:42:55.40,中文,,0,0,0,,你必须切换到该目录或文件夹。
Dialogue: 0,1:42:55.40,1:42:57.74,中文,,0,0,0,,cd 就是用来做这件事的命令。
Dialogue: 0,1:42:57.74,1:43:04.28,中文,,0,0,0,,如果我真的想进入那个目录，我可以输入 cd 空格 pset1 回车。
Dialogue: 0,1:43:04.28,1:43:05.95,中文,,0,0,0,,现在你会看到我的提示符发生了变化。
Dialogue: 0,1:43:05.95,1:43:09.37,中文,,0,0,0,,这只是一个常见的惯例，但并不是唯一的。
Dialogue: 0,1:43:09.37,1:43:12.47,中文,,0,0,0,,现在我仍然有一个美元符号，它指示我可以在哪里输入命令。
Dialogue: 0,1:43:12.47,1:43:16.53,中文,,0,0,0,,但在它之前，我会看到一个不断提醒我所在文件夹的信息。
Dialogue: 0,1:43:16.53,1:43:21.70,中文,,0,0,0,,我们特意把它放在那里，就像很多 Linux 用户做的那样，只是为了提醒自己在哪里。
Dialogue: 0,1:43:21.70,1:43:29.16,中文,,0,0,0,,因为不像 Windows 那样，你有一个很大的窗口告诉你所在的位置，在命令行中，你需要通过文本来提醒自己。
Dialogue: 0,1:43:29.16,1:43:34.46,中文,,0,0,0,,但现在，如果我输入 ls 并按下回车键，我应该会看到什么？
Dialogue: 0,1:43:34.46,1:43:36.34,中文,,0,0,0,,对，mario.c。
Dialogue: 0,1:43:36.34,1:43:44.17,中文,,0,0,0,,现在，如果我真的想编译它，我可以在输入所有代码后，在这个目录中运行 make mario。
Dialogue: 0,1:43:44.17,1:43:50.99,中文,,0,0,0,,请放心，在习题集和实验中，我们几乎总是，尤其是在课程的最初几周，会准确地告诉你需要输入的命令。
Dialogue: 0,1:43:50.99,1:43:55.27,中文,,0,0,0,,很有可能，因为这对你们中的许多人来说都是新的，你会不小心输入错误的命令。
Dialogue: 0,1:43:55.27,1:43:56.03,中文,,0,0,0,,没什么大不了的。
Dialogue: 0,1:43:56.03,1:43:58.81,中文,,0,0,0,,只要记住，解决这些问题的方法有很多。
Dialogue: 0,1:43:58.81,1:44:02.17,中文,,0,0,0,,你可以使用图形文件浏览器，这应该感觉更熟悉一些。
Dialogue: 0,1:44:02.17,1:44:06.79,中文,,0,0,0,,但随着时间的推移，你会开始了解，并且可能更喜欢使用像这样的命令。
Dialogue: 0,1:44:06.79,1:44:22.89,中文,,0,0,0,,cd 用于切换目录，cp 用于复制文件，\Nls 用于列出文件，mkdir 用于创建目录（在命令行而不是用按钮创建新文件夹），mv 用于移动或重命名，rm 用于？
Dialogue: 0,1:44:22.89,1:44:24.95,中文,,0,0,0,,删除，所以使用这个命令要小心。
Dialogue: 0,1:44:24.95,1:44:28.83,中文,,0,0,0,,rmdir 用于删除目录，还有几十个、几百个其他命令。
Dialogue: 0,1:44:28.83,1:44:33.33,中文,,0,0,0,,你不需要用到很多，但我们会随着时间的推移逐渐深入了解。
Dialogue: 0,1:44:33.33,1:44:52.05,中文,,0,0,0,,但最终，这个命令行界面将成为一种更强大的机制，一种更有能力的机制，最终，一种更有效的机制，\N用于编写代码、运行命令、解决问题、更广泛地分析数据，即使，是的，早期会有一些成长的烦恼，因为它对你们中的许多人来说可能太新了。
Dialogue: 0,1:44:52.05,1:44:56.45,中文,,0,0,0,,说到这里，我们还有一些问题要解决，但我们今天答应了要吃饼干。
Dialogue: 0,1:44:56.45,1:44:58.34,中文,,0,0,0,,那我们休息 10 分钟吧。
Dialogue: 0,1:44:58.34,1:45:03.19,中文,,0,0,0,,饼干现在在教堂的交叉甬道里提供，我们 10 分钟后回来。
Dialogue: 0,1:45:03.19,1:45:04.71,中文,,0,0,0,,好了，我们回来了。
Dialogue: 0,1:45:04.71,1:45:10.86,中文,,0,0,0,,到目前为止，我们在 C 语言中所做的每个代码示例都是为了展示一个特定的主题。
Dialogue: 0,1:45:10.86,1:45:25.29,中文,,0,0,0,,但我们想尝试退一步，解决一个更普遍的问题，让你了解，例如，在面对一个问题集，\N或者更普遍地说，面对一个编程问题时，当你甚至不知道练习的重点是什么时，你应该从哪里开始，以及如何着手解决它。
Dialogue: 0,1:45:25.29,1:45:28.57,中文,,0,0,0,,我最喜欢的往日游戏之一就是这个。
Dialogue: 0,1:45:28.57,1:45:31.67,中文,,0,0,0,,超级马里奥兄弟，自那以后出现了许多不同的版本。
Dialogue: 0,1:45:31.67,1:45:37.34,中文,,0,0,0,,但在最初的这个二维横向卷轴游戏中，有很多像这样的艺术作品。
Dialogue: 0,1:45:37.34,1:45:40.30,中文,,0,0,0,,例如，在天空的这里有四个问号。
Dialogue: 0,1:45:40.30,1:45:55.95,中文,,0,0,0,,我们会发现，在 C 语言和最初的许多编程语言中，\N专注于黑白类型的文本交互式程序要比完整的图形等更容易、更容易理解，但在不久的将来，我们会更多地关注图形声学类型的程序。
Dialogue: 0,1:45:55.95,1:46:09.12,中文,,0,0,0,,不过现在，我们先用 ASCII 艺术来实现它，\NASCII 是一种将数字映射到字母的代码，至少对英语来说是这样，我们将用它来实现这四个问号的文本版本。
Dialogue: 0,1:46:09.12,1:46:11.18,中文,,0,0,0,,为此，我们打开 VS Code。
Dialogue: 0,1:46:11.18,1:46:17.21,中文,,0,0,0,,我要创建自己的 mario.c 版本，它将不同于你在习题集中遇到的版本。
Dialogue: 0,1:46:17.21,1:46:25.05,中文,,0,0,0,,事实上，在习题集中，你会被要求构建类似的东西，不过是用井号作为 ASCII 艺术而不是图形。
Dialogue: 0,1:46:25.05,1:46:28.03,中文,,0,0,0,,在 mario.c 中，我想先解决这个简单的问题。
Dialogue: 0,1:46:28.03,1:46:29.77,中文,,0,0,0,,这都与输出有关。
Dialogue: 0,1:46:29.77,1:46:33.18,中文,,0,0,0,,我要包含 stdio.h，这样我就可以使用 printf 了。
Dialogue: 0,1:46:33.18,1:46:37.44,中文,,0,0,0,,我要写 int main void，关于为什么我们要这样做，我们会在以后几周再讨论。
Dialogue: 0,1:46:37.44,1:46:50.46,中文,,0,0,0,,一开始我会做一些简单的事情，比如 1、2、3、4、\ n，这是我能想到的最简单的方法，用这样的纯文本实现天空中的四个问号。
Dialogue: 0,1:46:50.46,1:46:52.70,中文,,0,0,0,,让我们继续，执行 make mario。
Dialogue: 0,1:46:52.70,1:46:55.94,中文,,0,0,0,,输入 ./mario，瞧，我们得到了那四个问号。
Dialogue: 0,1:46:55.94,1:46:58.84,中文,,0,0,0,,但我们当然已经知道，还有更好的方法来实现这一点。
Dialogue: 0,1:46:58.84,1:47:08.13,中文,,0,0,0,,如果你想把它推广到五个问号、六个、六十个不同的问号，循环一直是避免重复自己的答案。
Dialogue: 0,1:47:08.13,1:47:12.93,中文,,0,0,0,,也许我应该更灵活地改写一下，像这样写。
Dialogue: 0,1:47:12.93,1:47:17.13,中文,,0,0,0,,对于 int i = 0，i < 4，i ++。
Dialogue: 0,1:47:17.13,1:47:22.09,中文,,0,0,0,,然后在 for 循环中，现在我可以只写一个问号了。
Dialogue: 0,1:47:22.09,1:47:25.90,中文,,0,0,0,,但我认为我刚才做的不对。
Dialogue: 0,1:47:25.90,1:47:29.42,中文,,0,0,0,,有人发现美学上的错误了吗？
Dialogue: 0,1:47:29.42,1:47:31.19,中文,,0,0,0,,是的。
Dialogue: 0,1:47:31.19,1:47:34.19,中文,,0,0,0,,如果我想打印相同的东西，为什么这是错的？
Dialogue: 0,1:47:34.19,1:47:38.84,中文,,0,0,0,,嗯。
Dialogue: 0,1:47:38.84,1:47:44.78,中文,,0,0,0,,我不希望在每个问号后面都加一个\ n，因为我的目标是在天上打印一行问号。
Dialogue: 0,1:47:44.78,1:47:50.72,中文,,0,0,0,,如果我现在重新编译，make Mario， ./Mario，就快完成了。
Dialogue: 0,1:47:50.72,1:47:54.95,中文,,0,0,0,,但现在美元符号没有单独在一行，又回到了之前的问题。
Dialogue: 0,1:47:54.95,1:47:59.79,中文,,0,0,0,,我想我需要一个换行符，但我不认为我想把它放在这里，因为那样结果会很糟糕。
Dialogue: 0,1:47:59.79,1:48:03.35,中文,,0,0,0,,我想把它放在哪里呢？
Dialogue: 0,1:48:03.35,1:48:03.93,中文,,0,0,0,,有什么想法吗？
Dialogue: 0,1:48:03.93,1:48:05.74,中文,,0,0,0,,嗯。
Dialogue: 0,1:48:05.74,1:48:07.38,中文,,0,0,0,,把它放到 for 循环外面。
Dialogue: 0,1:48:07.38,1:48:11.67,中文,,0,0,0,,我可以直接在第 8 行下面、第 9 行上面创建一个新行。
Dialogue: 0,1:48:11.67,1:48:15.33,中文,,0,0,0,,现在可以像这样打印一个新行了。
Dialogue: 0,1:48:15.33,1:48:17.31,中文,,0,0,0,,你不必在它旁边打印任何其他东西。
Dialogue: 0,1:48:17.31,1:48:18.89,中文,,0,0,0,,它本身就是一个字符。
Dialogue: 0,1:48:18.89,1:48:21.97,中文,,0,0,0,,让我们最后一次执行 make mario，./mario。
Dialogue: 0,1:48:21.97,1:48:24.03,中文,,0,0,0,,现在我们又可以正常运行了。
Dialogue: 0,1:48:24.03,1:48:31.52,中文,,0,0,0,,如果我们想做马里奥的另一个场景，比如这个，有很多垂直障碍物，比如这里的砖块，该怎么办呢？
Dialogue: 0,1:48:31.52,1:48:40.41,中文,,0,0,0,,如果我现在想打印一列三块砖，我将使用井号来表示这些砖块，而不是使用任何图形，我想我们快完成了，对吧？
Dialogue: 0,1:48:40.41,1:48:42.33,中文,,0,0,0,,我想我现在可以。
Dialogue: 0,1:48:42.33,1:48:43.99,中文,,0,0,0,,这可能更容易一些。
Dialogue: 0,1:48:43.99,1:48:49.22,中文,,0,0,0,,我可以回到这里，把问号改成更像砖块的东西，比如这个井号。
Dialogue: 0,1:48:49.22,1:48:56.42,中文,,0,0,0,,我想现在我确实需要换行符了，因为当我执行 make mario ./mario 后，OK，这里出现了我的四块砖墙。
Dialogue: 0,1:48:56.42,1:48:58.19,中文,,0,0,0,,哦，等等，我不想要四块。
Dialogue: 0,1:48:58.19,1:49:01.05,中文,,0,0,0,,我希望它和这里的场景保持一致。
Dialogue: 0,1:49:01.05,1:49:02.39,中文,,0,0,0,,我只想要 3 块。
Dialogue: 0,1:49:02.39,1:49:04.83,中文,,0,0,0,,这样我仍然可以在一个地方更改它。
Dialogue: 0,1:49:04.83,1:49:06.35,中文,,0,0,0,,同样，这里也是这种范例。
Dialogue: 0,1:49:06.35,1:49:15.99,中文,,0,0,0,,无论你使用的是 4 还是 3，如果你养成了从 0 开始计数的习惯，你会一直数到 2，而不是数到你想要的值。
Dialogue: 0,1:49:15.99,1:49:20.02,中文,,0,0,0,,这就是为什么我使用小于而不是小于等于的原因。
Dialogue: 0,1:49:20.02,1:49:25.39,中文,,0,0,0,,这将是常见的范例，尽管你当然可以像我们之前看到的那样以不同的方式计数。
Dialogue: 0,1:49:25.39,1:49:28.09,中文,,0,0,0,,但是，如果事情再升级一级呢？
Dialogue: 0,1:49:28.09,1:49:35.40,中文,,0,0,0,,当你进入超级玛丽兄弟的地下版本时，会有很多这样的地下障碍物，包括像这样的砖块网格。
Dialogue: 0,1:49:35.40,1:49:45.47,中文,,0,0,0,,我猜测，如果你把它切开，它大概是一个 3×3 的砖块网格，所有砖块都很好地连锁在一起，形成了一个这样的大砖块。
Dialogue: 0,1:49:45.47,1:49:50.87,中文,,0,0,0,,如果我想打印出一个 3×3 的网格，现在事情变得更有趣了。
Dialogue: 0,1:49:50.87,1:49:56.73,中文,,0,0,0,,因为到目前为止，我只打印了一行水平的或一列垂直的。
Dialogue: 0,1:49:56.73,1:50:02.90,中文,,0,0,0,,但是我们还没有真正见过任何代码，我是在打印或生活在像游戏所暗示的两个不同的维度中。
Dialogue: 0,1:50:02.90,1:50:05.62,中文,,0,0,0,,但是，让我建议我们可以这样做。
Dialogue: 0,1:50:05.62,1:50:10.78,中文,,0,0,0,,让我继续说，好吧，假设我想打印一个 3×3 的砖块网格。
Dialogue: 0,1:50:10.78,1:50:13.21,中文,,0,0,0,,实际上，我想打印的是。
Dialogue: 0,1:50:13.21,1:50:13.67,中文,,0,0,0,,什么？
Dialogue: 0,1:50:13.67,1:50:16.38,中文,,0,0,0,,三行砖块。
Dialogue: 0,1:50:16.38,1:50:17.98,中文,,0,0,0,,例如，网格有三行。
Dialogue: 0,1:50:17.98,1:50:22.42,中文,,0,0,0,,如果我从这个高级思想出发，把它简化一下，我该怎么做？
Dialogue: 0,1:50:22.42,1:50:24.88,中文,,0,0,0,,我先暂时去掉 printf，就像我之前做的那样。
Dialogue: 0,1:50:24.88,1:50:31.17,中文,,0,0,0,,我们先不管这个 for 循环目前还没有做任何有用的事情，它会执行多少次？
Dialogue: 0,1:50:31.17,1:50:33.42,中文,,0,0,0,,仅仅是设计使然。
Dialogue: 0,1:50:33.42,1:50:34.50,中文,,0,0,0,,三次，对吧？
Dialogue: 0,1:50:34.50,1:50:35.84,中文,,0,0,0,,这个 for 循环没问题。
Dialogue: 0,1:50:35.84,1:50:39.46,中文,,0,0,0,,它会执行三次，用 i 来计数。
Dialogue: 0,1:50:39.46,1:50:51.11,中文,,0,0,0,,如果我现在想在一行中打印出三个砖块，这和我们之前在屏幕上打印四个问号非常相似。
Dialogue: 0,1:50:51.11,1:50:55.37,中文,,0,0,0,,我们已经看到了一种解决方案，我敢说我们可以把它们组合在一起。
Dialogue: 0,1:50:55.37,1:50:58.81,中文,,0,0,0,,如果我想打印一行砖块，
Dialogue: 0,1:50:58.81,1:51:05.33,中文,,0,0,0,,我可以这样做，for int i = 0, i < 3, i ++。
Dialogue: 0,1:51:05.33,1:51:12.06,中文,,0,0,0,,然后在这个内部循环中，让我打印出一个砖块，像这样。
Dialogue: 0,1:51:12.06,1:51:17.82,中文,,0,0,0,,我不喜欢现在的结果，但我认为我已经把两个想法结合起来了。
Dialogue: 0,1:51:17.82,1:51:23.22,中文,,0,0,0,,但是第 5 行和第 7 行目前可能存在什么问题？
Dialogue: 0,1:51:23.22,1:51:24.81,中文,,0,0,0,,这里可能有什么问题？
Dialogue: 0,1:51:24.81,1:51:28.14,中文,,0,0,0,,后面那位同学？
Dialogue: 0,1:51:28.14,1:51:32.08,中文,,0,0,0,,我使用了相同的整数 i，我觉得这可能会给我带来麻烦，对吧？
Dialogue: 0,1:51:32.08,1:51:41.58,中文,,0,0,0,,如果我想在这里计算三个东西，但是却挟持了这个变量并在循环内部使用它，我觉得我应该避免这种名称冲突。
Dialogue: 0,1:51:41.58,1:51:43.95,中文,,0,0,0,,那么 i 的一个好的替代方案是什么？
Dialogue: 0,1:51:43.95,1:51:48.09,中文,,0,0,0,,嗯，如果程序员以这种方式嵌套循环，通常会使用 j。
Dialogue: 0,1:51:48.09,1:51:52.57,中文,,0,0,0,,如果你想要更具描述性的变量，当然可以把它改成行和列。
Dialogue: 0,1:51:52.57,1:51:55.05,中文,,0,0,0,,但 i 和 j 是非常标准的。
Dialogue: 0,1:51:55.05,1:51:59.12,中文,,0,0,0,,我要继续这样做，所有地方都用 j++ 代替 i++。
Dialogue: 0,1:51:59.12,1:52:00.28,中文,,0,0,0,,让我试着编译一下。
Dialogue: 0,1:52:00.28,1:52:04.42,中文,,0,0,0,,make Mario，回车，./Mario。
Dialogue: 0,1:52:04.42,1:52:06.44,中文,,0,0,0,,这里有几个问题。
Dialogue: 0,1:52:06.44,1:52:08.55,中文,,0,0,0,,这不是 3×3 的网格。
Dialogue: 0,1:52:08.55,1:52:13.44,中文,,0,0,0,,但如果你数一数，我到底打印了多少个？
Dialogue: 0,1:52:13.44,1:52:15.26,中文,,0,0,0,,大概逻辑上猜一猜就行了。
Dialogue: 0,1:52:15.26,1:52:16.98,中文,,0,0,0,,是的，那里有九个井号。
Dialogue: 0,1:52:16.98,1:52:21.63,中文,,0,0,0,,不幸的是，它们都在同一行，而不是在三行不同的行上。
Dialogue: 0,1:52:21.63,1:52:25.07,中文,,0,0,0,,那么，从逻辑上讲，我可以在哪里修复这个问题呢？
Dialogue: 0,1:52:25.07,1:52:26.59,中文,,0,0,0,,我打印了所有的砖块。
Dialogue: 0,1:52:26.59,1:52:27.68,中文,,0,0,0,,只是它们不在正确的级别上。
Dialogue: 0,1:52:27.68,1:52:32.76,中文,,0,0,0,,是的。
Dialogue: 0,1:52:32.76,1:52:37.90,中文,,0,0,0,,是的，所以在第一个循环，也就是这个内循环，或者说是嵌套循环之后，放一个换行符。
Dialogue: 0,1:52:37.90,1:52:41.10,中文,,0,0,0,,让我继续，在这里打印一个\ n。
Dialogue: 0,1:52:41.10,1:52:42.12,中文,,0,0,0,,这是在做什么？
Dialogue: 0,1:52:42.12,1:52:47.18,中文,,0,0,0,,我认为这将通过在完成一行之后将光标移动到下一行来解决问题。
Dialogue: 0,1:52:47.18,1:52:50.93,中文,,0,0,0,,让我继续，执行 make mario 并运行 ./mario。
Dialogue: 0,1:52:50.93,1:52:52.01,中文,,0,0,0,,现在可以开始了。
Dialogue: 0,1:52:52.01,1:52:59.45,中文,,0,0,0,,这是一个非常简化的版本，但现在我利用了两种不同的思路，或者说，是将同一个思路用两次。
Dialogue: 0,1:52:59.45,1:53:04.07,中文,,0,0,0,,我使用一个循环来控制光标逐行移动。
Dialogue: 0,1:53:04.07,1:53:11.12,中文,,0,0,0,,然后在循环内部，我从左到右打印 “.”，就像这样打印出每一块砖块。
Dialogue: 0,1:53:11.12,1:53:13.40,中文,,0,0,0,,现在还有一些小问题。
Dialogue: 0,1:53:13.40,1:53:26.50,中文,,0,0,0,,比如，如果我想让它始终是一个正方形，因为它在游戏里看起来就是这样的，我可以把它改成 4x4 的正方形，或者 5x5 的网格。
Dialogue: 0,1:53:26.50,1:53:33.47,中文,,0,0,0,,为什么在我想要改变大小时，仅仅改变数字不是最好的设计呢？
Dialogue: 0,1:53:33.47,1:53:34.43,中文,,0,0,0,,这可能会导致什么问题？
Dialogue: 0,1:53:34.43,1:53:38.93,中文,,0,0,0,,是的。
Dialogue: 0,1:53:38.93,1:53:43.08,中文,,0,0,0,,是的，如果它始终是一个正方形，高度和宽度相同，我这样做就是在自找麻烦，对吧？
Dialogue: 0,1:53:43.08,1:53:44.10,中文,,0,0,0,,我最终会搞砸的。
Dialogue: 0,1:53:44.10,1:53:45.56,中文,,0,0,0,,我会改变一个，但不会改变另一个。
Dialogue: 0,1:53:45.56,1:53:48.26,中文,,0,0,0,,然后它就会变成一个长方形，而不是一个正方形。
Dialogue: 0,1:53:48.26,1:53:50.40,中文,,0,0,0,,我应该用不同的方法来解决这个问题。
Dialogue: 0,1:53:50.40,1:53:51.26,中文,,0,0,0,,让我来试试。
Dialogue: 0,1:53:51.26,1:54:01.14,中文,,0,0,0,,在我的 main 函数的顶部，让我定义一个名为 n 的变量，表示我想要水平和垂直方向上的砖块数量。
Dialogue: 0,1:54:01.14,1:54:03.68,中文,,0,0,0,,我将它初始化为 3。
Dialogue: 0,1:54:03.68,1:54:06.73,中文,,0,0,0,,然后我不再使用数字 3，而是直接使用 n。
Dialogue: 0,1:54:06.73,1:54:13.93,中文,,0,0,0,,我在两个地方都这样做，这样以后如果我想改变它，把它改成 4 或 5 或其他任何数字，我只需要改动一处即可。
Dialogue: 0,1:54:13.93,1:54:16.91,中文,,0,0,0,,它的设计更好，因为出错的可能性更低。
Dialogue: 0,1:54:16.91,1:54:20.01,中文,,0,0,0,,但我技术上仍然可能以某种方式搞砸。
Dialogue: 0,1:54:20.01,1:54:24.47,中文,,0,0,0,,我技术上可能会不小心写一行代码，比如 n++。
Dialogue: 0,1:54:24.47,1:54:29.10,中文,,0,0,0,,或者我可以直接改变那个变量的值，即使我不希望它改变。
Dialogue: 0,1:54:29.10,1:54:30.54,中文,,0,0,0,,也许是因为我是一个糟糕的程序员。
Dialogue: 0,1:54:30.54,1:54:31.52,中文,,0,0,0,,我复制粘贴错了。
Dialogue: 0,1:54:31.52,1:54:34.46,中文,,0,0,0,,我和一个不知道 n 代表什么的人一起工作。
Dialogue: 0,1:54:34.46,1:54:41.20,中文,,0,0,0,,我可以通过转到第 5 行来保护我的代码免受此类人为错误的影响。
Dialogue: 0,1:54:41.20,1:54:50.91,中文,,0,0,0,,我可以不只是像在 Scratch 中那样声明一个简单变量，而是可以使用关键字 const 将其声明为常量，从而进一步强化我的代码。
Dialogue: 0,1:54:50.91,1:54:59.31,中文,,0,0,0,,这只是 C 语言和其他一些语言的一个特性，可以通过主动声明 n 为常量来防止你犯错。
Dialogue: 0,1:54:59.31,1:55:05.50,中文,,0,0,0,,具体来说，数字 5，或者之前的数字 3，你不能在其他地方不小心写代码来改变它。
Dialogue: 0,1:55:05.50,1:55:08.34,中文,,0,0,0,,计算机将抛出一个错误并捕获该错误。
Dialogue: 0,1:55:08.34,1:55:12.30,中文,,0,0,0,,这只是更具防御性地编程的一种方式。
Dialogue: 0,1:55:12.30,1:55:14.12,中文,,0,0,0,,有些语言有这个功能，有些语言没有。
Dialogue: 0,1:55:14.12,1:55:15.98,中文,,0,0,0,,但总的来说，这是一个好的做法。
Dialogue: 0,1:55:15.98,1:55:20.62,中文,,0,0,0,,它使你的代码设计得更好，因为它不容易出错。
Dialogue: 0,1:55:20.62,1:55:23.63,中文,,0,0,0,,无论是来自你、同事还是任何其他使用该代码的人。
Dialogue: 0,1:55:23.63,1:55:26.49,中文,,0,0,0,,让我把它改回 3，作为默认值。
Dialogue: 0,1:55:26.49,1:55:28.47,中文,,0,0,0,,但现在我在两个地方都使用了 n。
Dialogue: 0,1:55:28.47,1:55:33.26,中文,,0,0,0,,如果我执行 mario ./mario，就会回到最初的状态。
Dialogue: 0,1:55:33.26,1:55:35.80,中文,,0,0,0,,但这段代码的设计更好一些。
Dialogue: 0,1:55:35.80,1:55:37.48,中文,,0,0,0,,我还想说明一下。
Dialogue: 0,1:55:37.48,1:55:41.78,中文,,0,0,0,,一直以来，我都在强调代码的正确性和设计的重要性。
Dialogue: 0,1:55:41.78,1:55:43.68,中文,,0,0,0,,还有代码风格的问题。
Dialogue: 0,1:55:43.68,1:55:49.06,中文,,0,0,0,,我一直刻意在写漂亮的代码，不仅是自动的语法高亮。
Dialogue: 0,1:55:49.06,1:55:52.11,中文,,0,0,0,,注意，我一直把所有内容都进行了良好的缩进。
Dialogue: 0,1:55:52.11,1:55:57.53,中文,,0,0,0,,每当出现花括号时，比如第 4 行和第 14 行，所有内容都缩进一级。
Dialogue: 0,1:55:57.53,1:56:04.59,中文,,0,0,0,,当我在第 7 行和第 13 行有额外的花括号时，所有内容也都进行了良好的缩进。
Dialogue: 0,1:56:04.59,1:56:10.28,中文,,0,0,0,,从技术上讲，计算机并不关心这种空白。
Dialogue: 0,1:56:10.28,1:56:17.26,中文,,0,0,0,,你真的会把代码搞得一团糟，因为你有奇怪的代码风格，或者只是因为你有点马虎。
Dialogue: 0,1:56:17.26,1:56:20.38,中文,,0,0,0,,但这段代码实际上仍然是正确的。
Dialogue: 0,1:56:20.38,1:56:28.37,中文,,0,0,0,,如果我重新编译它，打开终端窗口，输入 make mario，没有错误，./mario，它运行得很好。
Dialogue: 0,1:56:28.37,1:56:36.73,中文,,0,0,0,,但你可以想象，现在读起来有多么烦人，对助教来说，对你第二天来说，对必须阅读你代码的同事来说，都是如此。
Dialogue: 0,1:56:36.73,1:56:38.03,中文,,0,0,0,,这只是糟糕的代码风格。
Dialogue: 0,1:56:38.03,1:56:39.11,中文,,0,0,0,,它仍然有效。
Dialogue: 0,1:56:39.11,1:56:43.23,中文,,0,0,0,,它的设计很好，因为你写代码时很有防范意识。
Dialogue: 0,1:56:43.23,1:56:44.21,中文,,0,0,0,,你使用了常量。
Dialogue: 0,1:56:44.21,1:56:46.59,中文,,0,0,0,,但天哪，这种风格太糟糕了。
Dialogue: 0,1:56:46.59,1:56:53.85,中文,,0,0,0,,通常，你会发现有些工具可以帮助你按照课程或公司的风格格式化代码。
Dialogue: 0,1:56:53.85,1:57:03.75,中文,,0,0,0,,但随着时间的推移，你会希望培养起这种肌肉记忆，在 VS Code 为你输出代码行时，接受它的建议，因为它试图以一种可读的方式格式化你的代码。
Dialogue: 0,1:57:03.75,1:57:13.86,中文,,0,0,0,,天啊，如果你的代码里真的有bug，而且连缩进都不对，那你这个人类根本不可能搞清楚到底发生了什么以及问题出在哪里。
Dialogue: 0,1:57:13.86,1:57:16.20,中文,,0,0,0,,你只是在给自己制造麻烦
Dialogue: 0,1:57:16.20,1:57:21.26,中文,,0,0,0,,所以要养成良好的代码风格习惯。
Dialogue: 0,1:57:21.26,1:57:24.88,中文,,0,0,0,,我们不希望只是一个 3×3 的网格。
Dialogue: 0,1:57:24.88,1:57:27.00,中文,,0,0,0,,我们希望它更动态一些。
Dialogue: 0,1:57:27.00,1:57:38.28,中文,,0,0,0,,假设我们不再使用常量，而是使用一个名为 n 的整数。我们使用之前用过的 get_int 函数，询问用户网格的大小。
Dialogue: 0,1:57:38.28,1:57:40.38,中文,,0,0,0,,我把它存储在 n 中。
Dialogue: 0,1:57:40.38,1:57:45.25,中文,,0,0,0,,然后我可以更动态地运行，使用 make mario 编译它。
Dialogue: 0,1:57:45.25,1:57:49.92,中文,,0,0,0,,糟糕。 我不小心搞砸了。
Dialogue: 0,1:57:49.92,1:57:56.80,中文,,0,0,0,,它建议我做什么，尽管很隐晦？
Dialogue: 0,1:57:56.80,1:57:59.92,中文,,0,0,0,,我忘了在文件顶部包含 CS50 头文件。
Dialogue: 0,1:57:59.92,1:58:03.33,中文,,0,0,0,,所以它不知道 get_int 实际上是有效的。
Dialogue: 0,1:58:03.33,1:58:04.93,中文,,0,0,0,,这很容易修复。
Dialogue: 0,1:58:04.93,1:58:07.83,中文,,0,0,0,,我只需要在这里包含 cs50.h。
Dialogue: 0,1:58:07.83,1:58:10.91,中文,,0,0,0,,现在我要清除终端并重新运行 make mario。
Dialogue: 0,1:58:10.91,1:58:12.91,中文,,0,0,0,,现在好了，./mario。
Dialogue: 0,1:58:12.91,1:58:14.43,中文,,0,0,0,,注意，现在提示我输入大小。
Dialogue: 0,1:58:14.43,1:58:16.61,中文,,0,0,0,,如果我输入 3，结果和之前一样。
Dialogue: 0,1:58:16.61,1:58:18.62,中文,,0,0,0,,如果我输入 10，它会更大。
Dialogue: 0,1:58:18.62,1:58:21.08,中文,,0,0,0,,但这现在都是自动完成的。
Dialogue: 0,1:58:21.08,1:58:23.34,中文,,0,0,0,,但有些事情我们还没检测到。
Dialogue: 0,1:58:23.34,1:58:26.06,中文,,0,0,0,,例如，假设我输入 cat。
Dialogue: 0,1:58:26.06,1:58:28.62,中文,,0,0,0,,就像我之前说的，get_int 函数会处理它。
Dialogue: 0,1:58:28.62,1:58:30.20,中文,,0,0,0,,这就是使用库函数的特性之一。
Dialogue: 0,1:58:30.20,1:58:32.76,中文,,0,0,0,,你不需要处理错误输入。
Dialogue: 0,1:58:32.76,1:58:36.30,中文,,0,0,0,,但我们设计的 get_int 函数只能获取一个整数。
Dialogue: 0,1:58:36.30,1:58:40.79,中文,,0,0,0,,我们不知道你想要的是正数、负数、0，还是它们的组合。
Dialogue: 0,1:58:40.79,1:58:45.63,中文,,0,0,0,,允许用户输入 -1 作为网格的大小，这有点奇怪。
Dialogue: 0,1:58:45.63,1:58:48.43,中文,,0,0,0,,或者输入 -3 作为网格的大小。
Dialogue: 0,1:58:48.43,1:58:49.80,中文,,0,0,0,,实际上，你的代码什么也不做。
Dialogue: 0,1:58:49.80,1:58:51.38,中文,,0,0,0,,至少它没有崩溃。
Dialogue: 0,1:58:51.38,1:58:52.58,中文,,0,0,0,,但这有点蠢，对吧？
Dialogue: 0,1:58:52.58,1:58:57.29,中文,,0,0,0,,如果用户想要一个网格，最好强制他们给我们一个正值。
Dialogue: 0,1:58:57.29,1:58:58.43,中文,,0,0,0,,那我们该怎么做呢？
Dialogue: 0,1:58:58.43,1:59:03.99,中文,,0,0,0,,我可以往上走，我可以说， 如果 n < 1。
Dialogue: 0,1:59:03.99,1:59:08.14,中文,,0,0,0,,如果它是 0 或负数，我不想这样，我能做什么？
Dialogue: 0,1:59:08.14,1:59:12.48,中文,,0,0,0,,我可以说，再次提示用户输入大小。
Dialogue: 0,1:59:12.48,1:59:18.51,中文,,0,0,0,,注意，我没有再次声明 n，因为它一旦存在，就不必再次提及数据类型。
Dialogue: 0,1:59:18.51,1:59:20.01,中文,,0,0,0,,我们之前说过。
Dialogue: 0,1:59:20.01,1:59:21.67,中文,,0,0,0,,但这有点蠢。
Dialogue: 0,1:59:21.67,1:59:22.01,中文,,0,0,0,,为什么？
Dialogue: 0,1:59:22.01,1:59:33.02,中文,,0,0,0,,因为当你再给用户一次机会的时候，好吧，也许我会这样做，好吧，如果这次 n < 1，好吧，让我们再去提示用户第三次。
Dialogue: 0,1:59:33.02,1:59:35.08,中文,,0,0,0,,我的意思是，你可以想象这会变得多么愚蠢。
Dialogue: 0,1:59:35.08,1:59:39.68,中文,,0,0,0,,这不可能是正确的解决方案，一遍又一遍地递归地输入相同的东西。
Dialogue: 0,1:59:39.68,1:59:40.84,中文,,0,0,0,,它会在哪里停止？
Dialogue: 0,1:59:40.84,1:59:45.04,中文,,0,0,0,,你必须给他们有限的次数，或者把你的代码弄得一团糟。
Dialogue: 0,1:59:45.04,1:59:49.58,中文,,0,0,0,,那么，直观上来说，这里有什么更好的解决方案呢？
Dialogue: 0,1:59:49.58,1:59:50.74,中文,,0,0,0,,是的，某种循环。
Dialogue: 0,1:59:50.74,1:59:52.15,中文,,0,0,0,,我们已经见过 while 循环了。
Dialogue: 0,1:59:52.15,1:59:53.21,中文,,0,0,0,,我们见过 for 循环。
Dialogue: 0,1:59:53.21,1:59:54.15,中文,,0,0,0,,所以也许是其中之一。
Dialogue: 0,1:59:54.15,1:59:55.29,中文,,0,0,0,,让我试试这个。
Dialogue: 0,1:59:55.29,1:59:58.75,中文,,0,0,0,,让我删除这些乱七八糟的东西，回到第一个问题。
Dialogue: 0,1:59:58.75,1:59:59.89,中文,,0,0,0,,让我这样做。
Dialogue: 0,1:59:59.89,2:00:09.76,中文,,0,0,0,,所以当 n < 1 时，也就是当数字不是我们想要的时，让我们这次在一个循环中提示用户输入大小。
Dialogue: 0,2:00:09.76,2:00:15.60,中文,,0,0,0,,这里也是一样，这更好，因为它只请求了两次信息。
Dialogue: 0,2:00:15.60,2:00:19.98,中文,,0,0,0,,但很明显，第 6 行和第 9 行除了 int 之外几乎是相同的。
Dialogue: 0,2:00:19.98,2:00:27.33,中文,,0,0,0,,如果我进去改变大小，如果我改变这里的措辞，把它改成另一种语言，我必须在两个地方改变它。
Dialogue: 0,2:00:27.33,2:00:27.79,中文,,0,0,0,,这可不妙。
Dialogue: 0,2:00:27.79,2:00:29.73,中文,,0,0,0,,复制粘贴，不好。
Dialogue: 0,2:00:29.73,2:00:31.03,中文,,0,0,0,,那什么方法更好呢？
Dialogue: 0,2:00:31.03,2:00:37.73,中文,,0,0,0,,其实，C 语言中还有另一种编程范式可以解决这个问题，避免代码重复。
Dialogue: 0,2:00:37.73,2:00:41.40,中文,,0,0,0,,如果我只写一次代码，那就好多了。
Dialogue: 0,2:00:41.40,2:00:45.60,中文,,0,0,0,,我可以使用第三种循环类型，叫做 do-while 循环来实现。
Dialogue: 0,2:00:45.60,2:00:48.00,中文,,0,0,0,,在 C 语言中，你可以这样做。
Dialogue: 0,2:00:48.00,2:00:53.28,中文,,0,0,0,,如果你想先获取一个变量的值，比如 n，只是创建变量而没有初始值。
Dialogue: 0,2:00:53.28,2:00:57.55,中文,,0,0,0,,那么 int n;  意味着我们还不知道它的值，但这没关系。
Dialogue: 0,2:00:57.55,2:01:00.07,中文,,0,0,0,,我们最终会给它赋值的。
Dialogue: 0,2:01:00.07,2:01:01.43,中文,,0,0,0,,然后我要说的是。
Dialogue: 0,2:01:01.43,2:01:04.49,中文,,0,0,0,,Do，字面意思，我要打开花括号。
Dialogue: 0,2:01:04.49,2:01:06.11,中文,,0,0,0,,我想做什么呢？
Dialogue: 0,2:01:06.11,2:01:11.90,中文,,0,0,0,,我想把 get_int 的返回值赋给 n，提示用户输入大小。
Dialogue: 0,2:01:11.90,2:01:14.02,中文,,0,0,0,,你什么时候想这么做？
Dialogue: 0,2:01:14.02,2:01:18.12,中文,,0,0,0,,我想在 n < 1 的情况下执行此操作。
Dialogue: 0,2:01:18.12,2:01:23.58,中文,,0,0,0,,这段代码现在实现了完全相同的功能，但不会重复我自己。
Dialogue: 0,2:01:23.58,2:01:24.28,中文,,0,0,0,,为什么？
Dialogue: 0,2:01:24.28,2:01:31.53,中文,,0,0,0,,请注意，在现在的代码行中，我在第 6 行明确表示，给我一个名为 n 的整型变量。
Dialogue: 0,2:01:31.53,2:01:33.19,中文,,0,0,0,,它最初没有值，但这没关系。
Dialogue: 0,2:01:33.19,2:01:34.79,中文,,0,0,0,,你能做到。
Dialogue: 0,2:01:34.79,2:01:36.37,中文,,0,0,0,,第七行，执行以下操作。
Dialogue: 0,2:01:36.37,2:01:37.47,中文,,0,0,0,,你想做什么？
Dialogue: 0,2:01:37.47,2:01:53.88,中文,,0,0,0,,使用 get_int 函数，提示用户输入金字塔的大小，并将该值存储在变量 n 中。\N由于 C 代码从上到下、从左到右执行，所以在第 11 行询问这个问题是合理的：n 的当前值（在第 8 行肯定已经获取了）是否小于 1？
Dialogue: 0,2:01:53.88,2:01:58.61,中文,,0,0,0,,如果用户不配合，输入了 0、-1 或 -3，会发生什么？
Dialogue: 0,2:01:58.61,2:02:04.59,中文,,0,0,0,,程序会返回到这里，并重复、重复、重复 do-while 循环中的所有内容。
Dialogue: 0,2:02:04.59,2:02:10.88,中文,,0,0,0,,所以 C 语言中的 do-while 循环（有些语言没有，比如 Python，如果你了解的话，它就没有 do-while 循环）。
Dialogue: 0,2:02:10.88,2:02:20.72,中文,,0,0,0,,这也许是实现这一目标最简洁的方式，尽管你必须先声明变量、创建变量，然后在下边检查它，这有点奇怪。
Dialogue: 0,2:02:20.72,2:02:22.99,中文,,0,0,0,,但除此之外，它与 while 循环类似。
Dialogue: 0,2:02:22.99,2:02:26.39,中文,,0,0,0,,它只是颠倒了你提问的顺序。
Dialogue: 0,2:02:26.39,2:02:29.00,中文,,0,0,0,,对这种结构有什么疑问吗？
Dialogue: 0,2:02:29.00,2:02:35.67,中文,,0,0,0,,一般来说，当你想要从用户那里获取输入并确保它满足某些要求时，do-while 循环非常有用。
Dialogue: 0,2:02:35.67,2:02:41.77,中文,,0,0,0,,好了，现在我们已经有了这个构建块，如何在刚才的插曲之后清理这段代码呢？
Dialogue: 0,2:02:41.77,2:02:47.71,中文,,0,0,0,,然后，让我们最后看一下我们的代码不能做、不能很好地做或不能正确做的事情。
Dialogue: 0,2:02:47.71,2:02:53.45,中文,,0,0,0,,让我在最终版本的 Mario 中添加一些注释。
Dialogue: 0,2:02:53.45,2:02:59.38,中文,,0,0,0,,事实证明，在 C 代码中， 你可以定义注释，这只是给自己的笔记。
Dialogue: 0,2:02:59.38,2:03:00.82,中文,,0,0,0,,你们中的一些人在 Scratch 中发现了这些。
Dialogue: 0,2:03:00.82,2:03:04.72,中文,,0,0,0,,你可以使用黄色的小便利贴来添加引用或解释。
Dialogue: 0,2:03:04.72,2:03:07.00,中文,,0,0,0,,在 C 语言中，有几种方法可以编写注释。
Dialogue: 0,2:03:07.00,2:03:13.86,中文,,0,0,0,,总的来说，注释是为你自己、你的助教、你的同事写的，用来解释你的代码在做什么、为什么这样做以及如何做。
Dialogue: 0,2:03:13.86,2:03:17.94,中文,,0,0,0,,它是一个用英语或任何你的人类语言写的小注释。
Dialogue: 0,2:03:17.94,2:03:34.53,中文,,0,0,0,,例如，我可以这样做在这个版本的 Mario 实现中，\N我可能会先问自己一个问题，我可能会在新的一行代码上方给自己写一个这样的笔记，获取网格大小。
Dialogue: 0,2:03:34.53,2:03:36.59,中文,,0,0,0,,这只是一个解释性的注释。
Dialogue: 0,2:03:36.59,2:03:43.73,中文,,0,0,0,,用简洁的英语概括解释接下来的六行左右的代码，或者说下一块代码块。
Dialogue: 0,2:03:43.73,2:03:46.66,中文,,0,0,0,,对每一行代码都进行注释就有点过分了。
Dialogue: 0,2:03:46.66,2:03:49.82,中文,,0,0,0,,在某种程度上，程序员应该知道每一行代码的作用。
Dialogue: 0,2:03:49.82,2:03:55.88,中文,,0,0,0,,但是，能够快速浏览第 6 行以两个斜杠开头的注释还是很好的。
Dialogue: 0,2:03:55.88,2:03:58.08,中文,,0,0,0,,由于语法高亮显示，它会变成灰色。
Dialogue: 0,2:03:58.08,2:03:59.08,中文,,0,0,0,,它不是逻辑。
Dialogue: 0,2:03:59.08,2:04:00.64,中文,,0,0,0,,这只是一个给自己的笔记。
Dialogue: 0,2:04:00.64,2:04:05.35,中文,,0,0,0,,它通常会给我一个关于下面几行代码应该做什么以及为什么做的小抄。
Dialogue: 0,2:04:05.35,2:04:08.93,中文,,0,0,0,,然后在这里，有一个代码块，里面有很多行代码。
Dialogue: 0,2:04:08.93,2:04:14.31,中文,,0,0,0,,但是，这些代码加在一起就是打印砖块网格。
Dialogue: 0,2:04:14.31,2:04:23.92,中文,,0,0,0,,这是另一个给自己的注释，通过添加一些英文解释，使这 20 多行代码的功能更容易理解。
Dialogue: 0,2:04:23.92,2:04:33.76,中文,,0,0,0,,但是现在我已经有了这些，如果我能把这些功能抽象出来，把获取大小和打印网格的功能抽象出来，那不是很好吗？
Dialogue: 0,2:04:33.76,2:04:37.56,中文,,0,0,0,,换句话说，假设你不知道从哪里开始解决这个问题。
Dialogue: 0,2:04:37.56,2:04:46.63,中文,,0,0,0,,而手头的问题是实现一个程序，打印一个大小可变的砖块网格，3 或 4 或 5 或任何用户输入的数字。
Dialogue: 0,2:04:46.63,2:04:56.33,中文,,0,0,0,,如果你真的不知道从哪里开始，注释实际上是一个很好的开始方式，因为注释可以看作是我们上周所说的伪代码的近似值。
Dialogue: 0,2:04:56.33,2:05:02.18,中文,,0,0,0,,伪代码是用简洁的英语表达你的观点，就像我们上次课讲的电话簿搜索那样。
Dialogue: 0,2:05:02.18,2:05:06.94,中文,,0,0,0,,如果你真的不知道从哪里开始，你可以这样做。
Dialogue: 0,2:05:06.94,2:05:14.61,中文,,0,0,0,,例如，我可以先写“获取网格大小”，然后写“打印砖块网格”作为第二步。
Dialogue: 0,2:05:14.61,2:05:16.49,中文,,0,0,0,,到目前为止，我的程序就是这样。
Dialogue: 0,2:05:16.49,2:05:18.79,中文,,0,0,0,,现在是用伪代码实现的。
Dialogue: 0,2:05:18.79,2:05:20.69,中文,,0,0,0,,我还有很多占位符。
Dialogue: 0,2:05:20.69,2:05:22.51,中文,,0,0,0,,比如，我还有很多工作要做。
Dialogue: 0,2:05:22.51,2:05:26.17,中文,,0,0,0,,但至少我有一个用注释写的高级解决方案。
Dialogue: 0,2:05:26.17,2:05:28.31,中文,,0,0,0,,现在我甚至可以做到这一步。
Dialogue: 0,2:05:28.31,2:05:34.79,中文,,0,0,0,,我可以说，假设已经存在一个叫做 get size 的函数。
Dialogue: 0,2:05:34.79,2:05:36.15,中文,,0,0,0,,我可以这样做。
Dialogue: 0,2:05:36.15,2:05:38.97,中文,,0,0,0,,我可以写 int n = get_size。
Dialogue: 0,2:05:38.97,2:05:43.08,中文,,0,0,0,,现在，我只需要暂时假设存在一个名为 get_size 的抽象概念。
Dialogue: 0,2:05:43.08,2:05:43.48,中文,,0,0,0,,它不存在。
Dialogue: 0,2:05:43.48,2:05:45.58,中文,,0,0,0,,这在 CS50 库中没有。
Dialogue: 0,2:05:45.58,2:05:47.62,中文,,0,0,0,,但我敢打赌我可以发明它。
Dialogue: 0,2:05:47.62,2:05:49.26,中文,,0,0,0,,我还可以怎么做呢？
Dialogue: 0,2:05:49.26,2:05:57.27,中文,,0,0,0,,让我们暂时假设还有一个名为 print_grid 的函数，它可以打印一个大小为 n 的网格。
Dialogue: 0,2:05:57.27,2:05:58.99,中文,,0,0,0,,这里也有一个抽象概念。
Dialogue: 0,2:05:58.99,2:06:00.33,中文,,0,0,0,,这些拼图碎片并不存在。
Dialogue: 0,2:06:00.33,2:06:01.99,中文,,0,0,0,,这些函数还不存在。
Dialogue: 0,2:06:01.99,2:06:06.47,中文,,0,0,0,,但是在 C 语言中，就像 Scratch 一样，我可以创建自己的函数。
Dialogue: 0,2:06:06.47,2:06:07.59,中文,,0,0,0,,怎么做呢？
Dialogue: 0,2:06:07.59,2:06:09.65,中文,,0,0,0,,让我先往下看文件。
Dialogue: 0,2:06:09.65,2:06:12.81,中文,,0,0,0,,按照惯例，通常需要将 main 函数放在代码的顶部。
Dialogue: 0,2:06:12.81,2:06:13.05,中文,,0,0,0,,为什么？
Dialogue: 0,2:06:13.05,2:06:14.24,中文,,0,0,0,,因为它就是主函数。
Dialogue: 0,2:06:14.24,2:06:18.32,中文,,0,0,0,,人们会习惯性地先看代码文件的 main 函数，了解它做了什么。
Dialogue: 0,2:06:18.32,2:06:19.38,中文,,0,0,0,,我来演示一下。
Dialogue: 0,2:06:19.38,2:06:26.20,中文,,0,0,0,,我要创建一个名为 get_size 的函数，它的作用是获取用户想要的尺寸。
Dialogue: 0,2:06:26.20,2:06:28.44,中文,,0,0,0,,我希望这个函数返回一个整数。
Dialogue: 0,2:06:28.44,2:06:35.07,中文,,0,0,0,,实现方法是，像声明变量一样，先写出这个函数返回的数据类型。
Dialogue: 0,2:06:35.07,2:06:37.61,中文,,0,0,0,,这个函数不需要任何输入。
Dialogue: 0,2:06:37.61,2:06:45.82,中文,,0,0,0,,我将使用一个我们一直在用的新关键字，稍后会详细介绍，叫做 void，它表示这个 get_size 函数不接受任何输入。
Dialogue: 0,2:06:45.82,2:06:47.14,中文,,0,0,0,,它确实有一个输出。
Dialogue: 0,2:06:47.14,2:06:48.46,中文,,0,0,0,,它输出一个 int 类型的值。
Dialogue: 0,2:06:48.46,2:06:50.42,中文,,0,0,0,,这就是编写函数时的特殊顺序。
Dialogue: 0,2:06:50.42,2:06:56.12,中文,,0,0,0,,你需要先写输出格式，然后是函数名，最后是输入（如果有的话），放在括号里。
Dialogue: 0,2:06:56.12,2:06:57.80,中文,,0,0,0,,现在我可以实现 get_size 函数了。
Dialogue: 0,2:06:57.80,2:07:03.19,中文,,0,0,0,,但我已经实现了 get_size 函数，或者至少现在，在这个阶段，我知道该怎么做了。
Dialogue: 0,2:07:03.19,2:07:13.31,中文,,0,0,0,,我可以找到答案，最终，可能需要一些尝试和错误，如果我声明一个变量，然后执行以下操作：n = get_int，提示用户输入大小。
Dialogue: 0,2:07:13.31,2:07:16.61,中文,,0,0,0,,当 n < 1 时，我一直这样做。
Dialogue: 0,2:07:16.61,2:07:27.54,中文,,0,0,0,,一旦那段代码执行完毕，这里有一个 C 语言中的新关键字，你可以使用它返回 n 的值。我一直将某些函数返回的值称为返回值。
Dialogue: 0,2:07:27.54,2:07:35.32,中文,,0,0,0,,在 C 语言中，确实有一个名为 return 的关键字，它会将值返回给任何使用该函数的函数。
Dialogue: 0,2:07:35.32,2:07:37.10,中文,,0,0,0,,也就是那个值。
Dialogue: 0,2:07:37.10,2:07:47.27,中文,,0,0,0,,简而言之，在现在的第 15 行到 21 行之间，这是一些与我们之前的解决方案相同的代码，它从用户那里获取一个正整数 n。
Dialogue: 0,2:07:47.27,2:07:48.71,中文,,0,0,0,,它是 1、2 或更大。
Dialogue: 0,2:07:48.71,2:07:51.46,中文,,0,0,0,,它不是 0，也不是小于 1 的数。
Dialogue: 0,2:07:51.46,2:07:54.75,中文,,0,0,0,,一旦我们得到了这个值，我们就将其返回。
Dialogue: 0,2:07:54.75,2:07:59.13,中文,,0,0,0,,作为返回值，请注意我在第 7 行是如何使用这个函数的。
Dialogue: 0,2:07:59.13,2:08:10.34,中文,,0,0,0,,就像 get_int 和 get_string 一样，我正在调用这个函数，在这种情况下，括号中没有任何内容，但是我正在使用赋值运算符将它的返回值
Dialogue: 0,2:08:10.34,2:08:19.34,中文,,0,0,0,,复制到我的变量 n 中。现在我有一个以前不存在的函数，叫做 get_size，它可以为我获取一个正整数，无论如何。
Dialogue: 0,2:08:19.34,2:08:21.60,中文,,0,0,0,,现在，对于网格，我该怎么做呢？
Dialogue: 0,2:08:21.60,2:08:27.20,中文,,0,0,0,,我如何创建一个名为 print_grid 的函数，它接受一个参数，一个数字，并打印一个该大小的网格？
Dialogue: 0,2:08:27.20,2:08:29.22,中文,,0,0,0,,我们来看看。
Dialogue: 0,2:08:29.22,2:08:32.21,中文,,0,0,0,,我要写下这个函数的名称，print_grid。
Dialogue: 0,2:08:32.21,2:08:33.51,中文,,0,0,0,,这个函数只需要打印。
Dialogue: 0,2:08:33.51,2:08:35.61,中文,,0,0,0,,它有一个副作用，就像我们一直说的那样。
Dialogue: 0,2:08:35.61,2:08:38.27,中文,,0,0,0,,我只想说它没有返回值。
Dialogue: 0,2:08:38.27,2:08:39.05,中文,,0,0,0,,它只是 void。
Dialogue: 0,2:08:39.05,2:08:40.85,中文,,0,0,0,,它本身没有输出。
Dialogue: 0,2:08:40.85,2:08:42.86,中文,,0,0,0,,这只是一个美学上的副作用。
Dialogue: 0,2:08:42.86,2:08:44.68,中文,,0,0,0,,但它确实需要一个参数。
Dialogue: 0,2:08:44.68,2:08:46.08,中文,,0,0,0,,参数就是一个输入。
Dialogue: 0,2:08:46.08,2:08:52.34,中文,,0,0,0,,在 C 语言中，语法是命名输入的类型和变量的名称。
Dialogue: 0,2:08:52.34,2:08:53.91,中文,,0,0,0,,我可以随便给它起个名字。
Dialogue: 0,2:08:53.91,2:08:54.95,中文,,0,0,0,,我把它叫做 size。
Dialogue: 0,2:08:54.95,2:09:01.23,中文,,0,0,0,,我也可以叫它 n。在不同的函数中可以使用相同的变量，但我在这里叫它 size，以便区分。
Dialogue: 0,2:09:01.23,2:09:05.59,中文,,0,0,0,,在这个函数中，我要从内存中复制与之前相同的代码。
Dialogue: 0,2:09:05.59,2:09:12.03,中文,,0,0,0,,对于 int i = 0，i < size 而不是 3，i ++。
Dialogue: 0,2:09:12.03,2:09:18.84,中文,,0,0,0,,在这个循环里面，对于 int j = 0，j < size，j ++。
Dialogue: 0,2:09:18.84,2:09:23.70,中文,,0,0,0,,在它里面，用 printf 打印一个井号。
Dialogue: 0,2:09:23.70,2:09:27.94,中文,,0,0,0,,在循环结束后打印一个换行符。
Dialogue: 0,2:09:27.94,2:09:28.80,中文,,0,0,0,,就是这样。
Dialogue: 0,2:09:28.80,2:09:30.42,中文,,0,0,0,,我承认，我这样做有点快。
Dialogue: 0,2:09:30.42,2:09:33.04,中文,,0,0,0,,但它和我之前写的代码是一样的。
Dialogue: 0,2:09:33.04,2:09:39.41,中文,,0,0,0,,但是现在，就像我在 Scratch 中做的那样，让我任意地按几次回车，把代码移到视线之外，眼不见心不烦。
Dialogue: 0,2:09:39.41,2:09:40.91,中文,,0,0,0,,现在我有了抽象。
Dialogue: 0,2:09:40.91,2:09:46.93,中文,,0,0,0,,我有了一些叫做 get_size 和 print_grid 的拼图块，它们的语法需要一些时间来适应。
Dialogue: 0,2:09:46.93,2:09:50.74,中文,,0,0,0,,但它们现在确实存在，不过我需要做一件事。
Dialogue: 0,2:09:50.74,2:09:59.48,中文,,0,0,0,,因为 C 语言有点天真，如果我现在尝试 make Mario 并按下回车，函数 get_size 的隐式声明是无效的。
Dialogue: 0,2:09:59.48,2:10:03.46,中文,,0,0,0,,之前见过这种情况，当我忘记包含某个文件时，对吧？
Dialogue: 0,2:10:03.46,2:10:06.82,中文,,0,0,0,,当我忘记包含 CS50 库时，get_int 就无法使用。
Dialogue: 0,2:10:06.82,2:10:09.12,中文,,0,0,0,,但这不是这里的问题，因为这不是来自库。
Dialogue: 0,2:10:09.12,2:10:10.50,中文,,0,0,0,,这只是我自定义的函数。
Dialogue: 0,2:10:10.50,2:10:12.62,中文,,0,0,0,,C 语言的理解非常字面。
Dialogue: 0,2:10:12.62,2:10:19.14,中文,,0,0,0,,如果你在文件底部定义这些函数，那么在第 7 行或第 10 行它们就不存在。
Dialogue: 0,2:10:19.14,2:10:20.60,中文,,0,0,0,,我可以这样做。
Dialogue: 0,2:10:20.60,2:10:21.44,中文,,0,0,0,,我可以这样做，好吧，可以。
Dialogue: 0,2:10:21.44,2:10:26.54,中文,,0,0,0,,让我把所有这些高亮显示，剪切到剪贴板，然后粘贴到这里。
Dialogue: 0,2:10:26.54,2:10:27.54,中文,,0,0,0,,这样可以解决问题。
Dialogue: 0,2:10:27.54,2:10:30.39,中文,,0,0,0,,我可以把所有这些函数都移到文件的顶部。
Dialogue: 0,2:10:30.39,2:10:33.29,中文,,0,0,0,,这有点烦人，因为现在 main 函数在文件的最底部。
Dialogue: 0,2:10:33.29,2:10:34.71,中文,,0,0,0,,找到它需要更长时间。
Dialogue: 0,2:10:34.71,2:10:36.63,中文,,0,0,0,,这不是一个简洁的解决方案。
Dialogue: 0,2:10:36.63,2:10:39.30,中文,,0,0,0,,让我把它放回它在底部的位置。
Dialogue: 0,2:10:39.30,2:10:40.76,中文,,0,0,0,,让我这样做。
Dialogue: 0,2:10:40.76,2:10:46.32,中文,,0,0,0,,这是在 CS50 乃至整个 C 编程中唯一一次复制粘贴是合理的情况。
Dialogue: 0,2:10:46.32,2:11:01.12,中文,,0,0,0,,如果你从每个函数中复制并粘贴第一行代码，并在末尾加上一个分号，\N你就可以通过在文件顶部给编译器一个足够的提示来“戏弄”它，让它知道，这些函数在后面才会出现。
Dialogue: 0,2:11:01.12,2:11:03.36,中文,,0,0,0,,但这里有一个提示，它们将会存在。
Dialogue: 0,2:11:03.36,2:11:07.81,中文,,0,0,0,,这就是你说服编译器信任你的方法。
Dialogue: 0,2:11:07.81,2:11:12.03,中文,,0,0,0,,这些函数仍然可以在文件下方，在 main 函数的下面。
Dialogue: 0,2:11:12.03,2:11:15.50,中文,,0,0,0,,但现在当我执行 make Mario 时，糟糕。
Dialogue: 0,2:11:15.50,2:11:17.30,中文,,0,0,0,,我写成了 print 而不是 printf。
Dialogue: 0,2:11:17.30,2:11:19.49,中文,,0,0,0,,我的错。
Dialogue: 0,2:11:19.49,2:11:27.80,中文,,0,0,0,,应该是 printf。如果我执行 make mario 和 ./mario，现在我可以输入 3，程序又能正常运行了。
Dialogue: 0,2:11:27.80,2:11:32.96,中文,,0,0,0,,这是一个非常笨拙且冗长的解决方案。
Dialogue: 0,2:11:32.96,2:11:35.24,中文,,0,0,0,,但是这个方案在某种意义上设计得更好。
Dialogue: 0,2:11:35.24,2:11:35.86,中文,,0,0,0,,为什么？
Dialogue: 0,2:11:35.86,2:11:38.10,中文,,0,0,0,,因为现在，尤其是在没有注释的情况下，
Dialogue: 0,2:11:38.10,2:11:40.09,中文,,0,0,0,,我的代码非常简短。
Dialogue: 0,2:11:40.09,2:11:42.43,中文,,0,0,0,,我的 main 函数实际上只有两行代码。
Dialogue: 0,2:11:42.43,2:11:43.03,中文,,0,0,0,,为什么？
Dialogue: 0,2:11:43.03,2:11:46.31,中文,,0,0,0,,我把重要的部分提取到了单独的函数中。
Dialogue: 0,2:11:46.31,2:12:00.48,中文,,0,0,0,,现在，特别是如果我和同事或其他人一起工作，\N你可以想象将大型程序分成更小的部分，让不同的人实现不同的部分，只要你们事先就这些输入和输出达成一致。
Dialogue: 0,2:12:00.48,2:12:04.36,中文,,0,0,0,,现在让我们来看看计算机擅长什么，不擅长什么。
Dialogue: 0,2:12:04.36,2:12:14.04,中文,,0,0,0,,C 语言实际上支持一大堆数学运算符，我们可以用它们进行加法、减法、乘法、除法，甚至可以计算一个数除以另一个数的余数。
Dialogue: 0,2:12:14.04,2:12:19.06,中文,,0,0,0,,事实上，我们可以用一个非常简单的程序来使用它们，制作我们自己的计算器。
Dialogue: 0,2:12:19.06,2:12:21.50,中文,,0,0,0,,让我们回到 VS Code。
Dialogue: 0,2:12:21.50,2:12:25.29,中文,,0,0,0,,我们创建一个名为 calculator.c 的新文件。
Dialogue: 0,2:12:25.29,2:12:28.69,中文,,0,0,0,,在这个文件中，我们先包含几个
Dialogue: 0,2:12:28.69,2:12:33.83,中文,,0,0,0,,熟悉的头文件，cs50.h 和 stdio.h。
Dialogue: 0,2:12:33.83,2:12:37.71,中文,,0,0,0,,我们继续声明 main 函数：int main(void)。
Dialogue: 0,2:12:37.71,2:12:40.12,中文,,0,0,0,,在 main 函数内部，我们来做一些相对简单的事情。
Dialogue: 0,2:12:40.12,2:12:50.12,中文,,0,0,0,,我们声明一个 int 类型的变量 x，并将它设置为 get_int 函数的返回值，该函数会提示用户输入 x 的值。然后我们再创建一个变量。
Dialogue: 0,2:12:50.12,2:12:51.63,中文,,0,0,0,,我们把它叫做 y。
Dialogue: 0,2:12:51.63,2:13:05.13,中文,,0,0,0,,将 y 设置为另一个 get_int 函数的返回值，这次提示用户输入 y 的值。最后，我们简单地在最后打印出 x 和 y 的和，一个超级简单的计算器。
Dialogue: 0,2:13:05.13,2:13:10.99,中文,,0,0,0,,我将使用 printf，格式字符串为 "%i\ n"，%i 用于打印整数，\ n 用于换行。
Dialogue: 0,2:13:10.99,2:13:14.75,中文,,0,0,0,,然后我将使用 x + y 来打印出它们的和。
Dialogue: 0,2:13:14.75,2:13:16.83,中文,,0,0,0,,现在让我切换到终端窗口。
Dialogue: 0,2:13:16.83,2:13:20.44,中文,,0,0,0,,输入 make calculator 命令来编译代码。
Dialogue: 0,2:13:20.44,2:13:22.18,中文,,0,0,0,,没有错误信息，很好。
Dialogue: 0,2:13:22.18,2:13:23.86,中文,,0,0,0,,运行程序：./calculator。
Dialogue: 0,2:13:23.86,2:13:28.52,中文,,0,0,0,,我们来计算 2 + 2，结果应该是 4。
Dialogue: 0,2:13:28.52,2:13:29.50,中文,,0,0,0,,结果正确。
Dialogue: 0,2:13:29.50,2:13:34.68,中文,,0,0,0,,但事实证明，有时我们会遇到一些限制。
Dialogue: 0,2:13:34.68,2:13:36.51,中文,,0,0,0,,让我们来点更有挑战性的。
Dialogue: 0,2:13:36.51,2:13:37.97,中文,,0,0,0,,清空终端窗口。
Dialogue: 0,2:13:37.97,2:13:40.03,中文,,0,0,0,,再次运行 calculator。
Dialogue: 0,2:13:40.03,2:13:44.53,中文,,0,0,0,,这次，输入 20 亿 作为 x 的值。
Dialogue: 0,2:13:44.53,2:13:52.82,中文,,0,0,0,,y 也输入 20 亿。当然，现在 20 亿 加 20 亿 应该是 40 亿。
Dialogue: 0,2:13:52.82,2:13:53.98,中文,,0,0,0,,但事实并非如此。
Dialogue: 0,2:13:53.98,2:14:02.09,中文,,0,0,0,,奇怪的是，我们在这里看到了一个负数，这表明加号运算符的工作方式可能与我们预期不符。
Dialogue: 0,2:14:02.09,2:14:04.25,中文,,0,0,0,,为什么会这样呢？
Dialogue: 0,2:14:04.25,2:14:08.83,中文,,0,0,0,,实际上，在计算机内部是内存或 RAM，也就是随机存取存储器。
Dialogue: 0,2:14:08.83,2:14:13.66,中文,,0,0,0,,根据计算机的大小和类型，它可能看起来像这样。
Dialogue: 0,2:14:13.66,2:14:21.74,中文,,0,0,0,,就像一块小电路板，上面有很多黑色的模块，这些模块实际上包含了电脑内存的所有字节。
Dialogue: 0,2:14:21.74,2:14:32.78,中文,,0,0,0,,不幸的是，你和我的电脑里只有有限的内存，这意味着无论我们想数到多高，最终都会受到内存限制，因为我们只有有限的内存。
Dialogue: 0,2:14:32.78,2:14:35.83,中文,,0,0,0,,我们没有无限多的 0 和 1 可以使用。
Dialogue: 0,2:14:35.83,2:14:38.83,中文,,0,0,0,,我们最终必须受到限制。
Dialogue: 0,2:14:38.83,2:14:40.17,中文,,0,0,0,,这意味着什么呢？
Dialogue: 0,2:14:40.17,2:14:48.27,中文,,0,0,0,,事实证明，计算机通常使用多达 32 位，即 0 或 1，来表示像整数这样的数据类型，在 C 语言中是 int。
Dialogue: 0,2:14:48.27,2:14:55.53,中文,,0,0,0,,例如，使用 32 位可以表示的最小数字当然是 0。
Dialogue: 0,2:14:55.53,2:14:57.17,中文,,0,0,0,,就像这里的 32 个 0。
Dialogue: 0,2:14:57.17,2:15:07.19,中文,,0,0,0,,可以表示的最大数字是将所有 0 变成 1，在这种情况下，理想情况下，我们将得到一个大约等于 40 亿的数字。
Dialogue: 0,2:15:07.19,2:15:17.34,中文,,0,0,0,,实际上，如果将所有 32 位都设置为 1，然后进行实际计算，最大值是 4,294,967,295。
Dialogue: 0,2:15:17.34,2:15:24.76,中文,,0,0,0,,但问题是，我们人类和计算机通常有时也希望并且需要能够表示负数。
Dialogue: 0,2:15:24.76,2:15:33.39,中文,,0,0,0,,因此，如果要同时表示负数和正数，就不能仅仅从 0 开始计数，一直到大约 40 亿。
Dialogue: 0,2:15:33.39,2:15:42.00,中文,,0,0,0,,您必须将其拆分，将 0 和 1 的模式中的一半分配给负数，另一半分配给正数。
Dialogue: 0,2:15:42.00,2:15:52.50,中文,,0,0,0,,因此，实际上，即使使用多达 32 位，大多数计算机能够计数的最高值，尤其是在像 C 语言这样的程序中使用 int 类型时，也只有大约 20 亿。
Dialogue: 0,2:15:52.50,2:15:57.35,中文,,0,0,0,,也就是 2,147,483,647。
Dialogue: 0,2:15:57.35,2:16:06.73,中文,,0,0,0,,但另一方面，使用不同的位模式，我们也可以表示负数，低至负 20 亿左右。
Dialogue: 0,2:16:06.73,2:16:16.42,中文,,0,0,0,,但这意味着，如果我们只有有限的位数，并且只能计数到这么高，那么在某种程度上，我们将耗尽位数。
Dialogue: 0,2:16:16.42,2:16:21.83,中文,,0,0,0,,换句话说，我们会遇到通常所说的整数溢出，也就是你想使用的位数
Dialogue: 0,2:16:21.83,2:16:26.81,中文,,0,0,0,,超过了可用的位数，结果就是溢出了可用空间。
Dialogue: 0,2:16:26.81,2:16:28.47,中文,,0,0,0,,这实际上意味着什么？
Dialogue: 0,2:16:28.47,2:16:37.21,中文,,0,0,0,,假设你只有三位，但我将把第四位灰显出来，以便说明我们最终想要放置一个额外的位。
Dialogue: 0,2:16:37.21,2:16:41.60,中文,,0,0,0,,如果这是 0，根据我们对 0 的讨论，这是 1。
Dialogue: 0,2:16:41.60,2:16:45.50,中文,,0,0,0,,2，3，4，5，6，7。
Dialogue: 0,2:16:45.50,2:16:56.36,中文,,0,0,0,,理想情况下，在二进制中，如果你想给这个值 7 再加 1，你就必须在数学上进位 1，理想情况下你会得到 1，0，0，0。 2，3，4，5，6，7。
Dialogue: 0,2:16:56.36,2:17:10.59,中文,,0,0,0,,但如果你没有四位，而你的计算机只支持三位，甚至不是 32 位，而是三位，这意味着你实际上表示的不是 1，0，0，0，而是 0，0，0。
Dialogue: 0,2:17:10.59,2:17:15.19,中文,,0,0,0,,没有空间存储我在这里灰显的第四位。
Dialogue: 0,2:17:15.19,2:17:17.95,中文,,0,0,0,,也就是说你的整数可能溢出。
Dialogue: 0,2:17:17.95,2:17:23.07,中文,,0,0,0,,一旦你达到 7，当你加 1 时，下一个数字实际上将是 0。
Dialogue: 0,2:17:23.07,2:17:27.23,中文,,0,0,0,,或者更糟的是，就像我们在代码中看到的那样，变成了一个负值。
Dialogue: 0,2:17:27.23,2:17:30.19,中文,,0,0,0,,那么，我们可以做些什么来解决这种问题呢？
Dialogue: 0,2:17:30.19,2:17:32.51,中文,,0,0,0,,C 语言不仅有整数或 int 类型。
Dialogue: 0,2:17:32.51,2:17:38.51,中文,,0,0,0,,它还有 long 类型，顾名思义，它就是更长的整数，这意味着它们有更多可用的位。
Dialogue: 0,2:17:38.51,2:17:40.04,中文,,0,0,0,,让我回到代码中。
Dialogue: 0,2:17:40.04,2:17:41.56,中文,,0,0,0,,我将清除终端窗口。
Dialogue: 0,2:17:41.56,2:17:47.06,中文,,0,0,0,,让我继续，把这里的 int 改成 long，这里也是。
Dialogue: 0,2:17:47.06,2:17:53.36,中文,,0,0,0,,我得把 CS50 库中的函数从 get_int 改成 get_long。
Dialogue: 0,2:17:53.36,2:17:55.76,中文,,0,0,0,,这确实是我们在库中提供的另一个函数。
Dialogue: 0,2:17:55.76,2:17:57.84,中文,,0,0,0,,让我把这个 get_int 也改成 get_long。
Dialogue: 0,2:17:57.84,2:17:59.32,中文,,0,0,0,,我将保留相同的变量名。
Dialogue: 0,2:17:59.32,2:18:01.51,中文,,0,0,0,,但我还需要做另一个改动。
Dialogue: 0,2:18:01.51,2:18:04.35,中文,,0,0,0,,事实证明，printf 支持其他函数。
Dialogue: 0,2:18:04.35,2:18:16.55,中文,,0,0,0,,格式代码，不仅有表示整数的 %i 或表示字符串的 %s，还有例如表示长整数的 %li，以及表示带小数的浮点值的 %f。
Dialogue: 0,2:18:16.55,2:18:21.91,中文,,0,0,0,,让我们继续把 printf 行从 %i 改成 %li。
Dialogue: 0,2:18:21.91,2:18:26.36,中文,,0,0,0,,现在让我再执行一次 make calculator。 回车。
Dialogue: 0,2:18:26.36,2:18:29.18,中文,,0,0,0,,现在没有明显的错误了。 ./calculator。
Dialogue: 0,2:18:29.18,2:18:31.89,中文,,0,0,0,,2 加 2 仍然等于 4，和之前一样。
Dialogue: 0,2:18:31.89,2:18:36.44,中文,,0,0,0,,但是现在，如果我再次运行 calculator，让我们输入 2。
Dialogue: 0,2:18:36.44,2:18:48.49,中文,,0,0,0,,又是 20 亿，y 也是 20 亿。之前，我们溢出了整数的大小，得到了一些奇怪的负数，因为这个模式被误解成了负数。
Dialogue: 0,2:18:48.49,2:18:57.90,中文,,0,0,0,,但是 long 不是使用 32 位，而是通常使用 64 位，这意味着当我们把 20 亿加上 20 亿时，我们有足够的空间。
Dialogue: 0,2:18:57.90,2:19:05.06,中文,,0,0,0,,现在，我们得到了 40 亿的正确答案，它确实适合 long 的大小。
Dialogue: 0,2:19:05.06,2:19:07.34,中文,,0,0,0,,现在，long 可以计数到很高。
Dialogue: 0,2:19:07.34,2:19:12.51,中文,,0,0,0,,事实上，它可以计数到 9 百亿亿这么高。
Dialogue: 0,2:19:12.51,2:19:14.87,中文,,0,0,0,,这样就会给我们更多空间。
Dialogue: 0,2:19:14.87,2:19:18.33,中文,,0,0,0,,但它最终还是有限的。
Dialogue: 0,2:19:18.33,2:19:23.19,中文,,0,0,0,,如果你的数字需要比这更大，你可能仍然会有问题。
Dialogue: 0,2:19:23.19,2:19:25.29,中文,,0,0,0,,现在，我们还可能遇到另一个问题。
Dialogue: 0,2:19:25.29,2:19:28.76,中文,,0,0,0,,即使在这个简单的计算器中我们也能看到它。
Dialogue: 0,2:19:28.76,2:19:43.64,中文,,0,0,0,,计算机也可能遭受所谓的“截断”的影响，特别是当你进行涉及浮点值的数学运算时，\N也就是带小数的数字，你可能会意外地、不知不觉地截断该值，也就是丢失小数点后的所有内容。
Dialogue: 0,2:19:43.64,2:19:45.55,中文,,0,0,0,,事实上，让我回到 VS Code。
Dialogue: 0,2:19:45.55,2:19:47.03,中文,,0,0,0,,我要清除终端窗口。
Dialogue: 0,2:19:47.03,2:19:52.49,中文,,0,0,0,,我们仍然使用 long 类型，但让我们继续使用除法，而不是加法。
Dialogue: 0,2:19:52.49,2:19:55.19,中文,,0,0,0,,让我把这个加号改成除号。
Dialogue: 0,2:19:55.19,2:19:59.19,中文,,0,0,0,,让我继续用 make calculator 重新编译代码。
Dialogue: 0,2:19:59.19,2:20:01.27,中文,,0,0,0,,让我继续运行 ./calculator。
Dialogue: 0,2:20:01.27,2:20:08.54,中文,,0,0,0,,让我继续输入 1 作为 x，3 作为 y。然后我们会看到，等等。
Dialogue: 0,2:20:08.54,2:20:11.54,中文,,0,0,0,,我知道 1 除以 3 应该是三分之一。
Dialogue: 0,2:20:11.54,2:20:16.62,中文,,0,0,0,,但在浮点值中，应该是 0.3。
Dialogue: 0,2:20:16.62,2:20:21.75,中文,,0,0,0,,3、3、3、3、3，你知道，在小学的时候可能会在上面画一条线，但实际上是无限个 3。
Dialogue: 0,2:20:21.75,2:20:30.25,中文,,0,0,0,,然而，我们似乎连小数点后的一个 3 都丢失了，因为这里返回的答案是 0。
Dialogue: 0,2:20:30.25,2:20:31.65,中文,,0,0,0,,为什么会这样呢？
Dialogue: 0,2:20:31.65,2:20:37.74,中文,,0,0,0,,如果我知道两个整数相除应该得到一个分数，一个分数。
Dialogue: 0,2:20:37.74,2:20:46.44,中文,,0,0,0,,如果要表示带小数点的浮点数，我不能继续使用整数，在这种情况下，也不能使用不支持小数点的长整数。
Dialogue: 0,2:20:46.44,2:20:56.71,中文,,0,0,0,,让我继续，把这里的格式代码从 %li 改成 %f，它同样代表一个浮点值，而不是一个长整数，甚至不是一个整数。
Dialogue: 0,2:20:56.71,2:21:04.02,中文,,0,0,0,,让我进一步定义，也许是第三个变量，z，它本身就是一个浮点数。
Dialogue: 0,2:21:04.02,2:21:24.75,中文,,0,0,0,,我会给自己一个变量 z = x/y。现在，与其打印 x 除以 y，不如直接打印 z。现在我在一个浮点值的世界里操作，\N因为我事先知道，一个长整数或整数除以另一个这样的值，如果它意味着有一个分数，就需要存储在一个浮点值中，一个带小数点的值。
Dialogue: 0,2:21:24.75,2:21:28.97,中文,,0,0,0,,让我到下面的终端窗口，重新运行 make calculator。
Dialogue: 0,2:21:28.97,2:21:29.95,中文,,0,0,0,,看起来工作正常。
Dialogue: 0,2:21:29.95,2:21:34.36,中文,,0,0,0,,输入 ./calculator，让我们再做一次 1 除以 3。
Dialogue: 0,2:21:34.36,2:21:37.02,中文,,0,0,0,,在这里，我们仍然看到所有都是 0。
Dialogue: 0,2:21:37.02,2:21:38.46,中文,,0,0,0,,我们至少看到了一个小数点。
Dialogue: 0,2:21:38.46,2:21:41.50,中文,,0,0,0,,由于 %f 和 float 的原因，我们已经取得了一些进展。
Dialogue: 0,2:21:41.50,2:21:46.74,中文,,0,0,0,,但似乎我们已经截断了 1 除以 3 的值。
Dialogue: 0,2:21:46.74,2:21:48.48,中文,,0,0,0,,那么我们如何才能真正解决这个问题呢？
Dialogue: 0,2:21:48.48,2:21:58.43,中文,,0,0,0,,作为程序员，如果你知道你正在处理一个会给你带小数点的浮点值的世界，你很可能需要使用一种叫做类型转换的功能。
Dialogue: 0,2:21:58.43,2:22:04.54,中文,,0,0,0,,也就是说，通过明确地告诉编译器你想这样做，将一种数据类型转换为另一种数据类型。
Dialogue: 0,2:22:04.54,2:22:05.36,中文,,0,0,0,,那么，我该怎么做呢？
Dialogue: 0,2:22:05.36,2:22:07.16,中文,,0,0,0,,让我们回到我的代码。
Dialogue: 0,2:22:07.16,2:22:16.87,中文,,0,0,0,,如果根本问题是 C 语言仍然将 x 和 y 当作整数，或者说技术上的长整数来处理，没有小数点。
Dialogue: 0,2:22:16.87,2:22:22.50,中文,,0,0,0,,因此，将一个数除以另一个数，可以说，小数点后面没有任何数字的空间。
Dialogue: 0,2:22:22.50,2:22:24.88,中文,,0,0,0,,为什么我不预先这样做呢？
Dialogue: 0,2:22:24.88,2:22:31.71,中文,,0,0,0,,让我用带括号的新语法来指定我想预先转换 x。
Dialogue: 0,2:22:31.71,2:22:40.07,中文,,0,0,0,,从 long 到 float，让我预先指定我也想将 y 从 long 转换为 float。
Dialogue: 0,2:22:40.07,2:22:49.41,中文,,0,0,0,,现在，让我继续相信，在 z 中的结果应该是由 float 除以 float，而不是 long 除以 long 或 int 除以 int。
Dialogue: 0,2:22:49.41,2:22:52.69,中文,,0,0,0,,让我清空终端窗口，再次运行 make calculator。
Dialogue: 0,2:22:52.69,2:22:54.03,中文,,0,0,0,,看起来工作正常。
Dialogue: 0,2:22:54.03,2:23:00.89,中文,,0,0,0,,输入". /calculator"，现在输入 1 和 3，希望现在我们能看到
Dialogue: 0,2:23:00.89,2:23:05.38,中文,,0,0,0,,我的代码输出了 0.333333。
Dialogue: 0,2:23:05.38,2:23:12.00,中文,,0,0,0,,我认为如果我们在小数点后继续显示更多数字，理论上我们会看到我们想要的那么多 3。
Dialogue: 0,2:23:12.00,2:23:19.27,中文,,0,0,0,,还有一个问题，特别是在我们使用有限的内存以这种方式在计算机中处理数字时。
Dialogue: 0,2:23:19.27,2:23:27.28,中文,,0,0,0,,除了整数溢出、截断之外，我们可能遇到的另一个挑战是浮点数不精确。
Dialogue: 0,2:23:27.28,2:23:36.32,中文,,0,0,0,,正如我们无法仅使用 int 或 long 来表示我们想要的那么大的整数（因为会有一个上限）一样，我们的数字精度也会有一个界限。
Dialogue: 0,2:23:36.32,2:23:39.43,中文,,0,0,0,,我们的数字只能精确到一定程度。
Dialogue: 0,2:23:39.43,2:23:41.51,中文,,0,0,0,,让我们回到 VS Code。
Dialogue: 0,2:23:41.51,2:23:43.49,中文,,0,0,0,,我将再次清空我的终端窗口。
Dialogue: 0,2:23:43.49,2:23:52.31,中文,,0,0,0,,这次，让我使用一些不太常见的语法来指定我不想看到默认的小数点后位数，这是 %f 自动给我们的。
Dialogue: 0,2:23:52.31,2:23:57.52,中文,,0,0,0,,让我们继续，让我看看小数点后 20 位数字。
Dialogue: 0,2:23:57.52,2:24:03.02,中文,,0,0,0,,这样做的奇怪语法不是使用 %f，而是使用 %.
Dialogue: 0,2:24:03.02,2:24:08.52,中文,,0,0,0,,20 表示我想看到 20 位数字，而不是现在默认的小数点后的位数。
Dialogue: 0,2:24:08.52,2:24:10.57,中文,,0,0,0,,让我重新运行 make calculator。
Dialogue: 0,2:24:10.57,2:24:12.55,中文,,0,0,0,,再运行一下 ./calculator。
Dialogue: 0,2:24:12.55,2:24:13.77,中文,,0,0,0,,我们输入 1。
Dialogue: 0,2:24:13.77,2:24:15.11,中文,,0,0,0,,再输入 3。
Dialogue: 0,2:24:15.11,2:24:17.59,中文,,0,0,0,,现在更奇怪了，对吧？
Dialogue: 0,2:24:17.59,2:24:21.57,中文,,0,0,0,,你可能在小学就学过，1 除以 3 等于三分之一。
Dialogue: 0,2:24:21.57,2:24:26.96,中文,,0,0,0,,那应该是 0.33333 无限循环下去，或者在纸上写成，
Dialogue: 0,2:24:26.96,2:24:28.48,中文,,0,0,0,,那么，背后到底发生了什么？
Dialogue: 0,2:24:28.48,2:24:42.24,中文,,0,0,0,,上面有一条小线。但是电脑在这里做了一些奇怪的近似。是一堆3，然后是4326744079590。好吧，实际上在底层发生了什么，又是浮点数精度问题。
Dialogue: 0,2:24:42.24,2:24:51.43,中文,,0,0,0,,如果只有有限的比特位，进而只有有限的内存，计算机直观上只能达到一定的精度。
Dialogue: 0,2:24:51.43,2:24:57.17,中文,,0,0,0,,等效地，计算机决定了某种表示浮点值的方式。
Dialogue: 0,2:24:57.17,2:25:07.18,中文,,0,0,0,,但问题是，根据小学数学，数字是无限多的，浮点值也是无限多的，因为你可以根据需要不断添加更多数字。
Dialogue: 0,2:25:07.18,2:25:11.86,中文,,0,0,0,,因此，考虑到计算机实现这些浮点值的方式，它实际上是在给我们
Dialogue: 0,2:25:11.86,2:25:14.68,中文,,0,0,0,,它能提供的最接近的近似值。
Dialogue: 0,2:25:14.68,2:25:17.80,中文,,0,0,0,,那么，我们如何改进这种情况呢？
Dialogue: 0,2:25:17.80,2:25:19.20,中文,,0,0,0,,有一种替代方案。
Dialogue: 0,2:25:19.20,2:25:24.75,中文,,0,0,0,,我可以不使用 float，而是使用一种叫做 double 的类型，顾名思义，它使用的比特位是 float 的两倍。
Dialogue: 0,2:25:24.75,2:25:27.95,中文,,0,0,0,,它通常会使用 64 位而不是 32 位。
Dialogue: 0,2:25:27.95,2:25:31.59,中文,,0,0,0,,这就像 long 和 int 之间的区别一样，它们给了我们更多的比特位。
Dialogue: 0,2:25:31.59,2:25:34.61,中文,,0,0,0,,但在这种情况下，这将用于提高精度。
Dialogue: 0,2:25:34.61,2:25:36.95,中文,,0,0,0,,让我们继续将 x 强制转换为 double 类型。
Dialogue: 0,2:25:36.95,2:25:38.90,中文,,0,0,0,,我们把 y 强制转换为 double 类型。
Dialogue: 0,2:25:38.90,2:25:45.34,中文,,0,0,0,,现在我们继续使用相同的格式代码，%0.20f 对于 double 类型仍然适用。
Dialogue: 0,2:25:45.34,2:25:47.16,中文,,0,0,0,,让我运行一下 calculator。
Dialogue: 0,2:25:47.16,2:25:49.00,中文,,0,0,0,,让我运行 ./calculator。
Dialogue: 0,2:25:49.00,2:25:52.21,中文,,0,0,0,,现在让我计算 1 除以 3，我们仍然
Dialogue: 0,2:25:52.21,2:25:53.75,中文,,0,0,0,,会有一些精度损失。
Dialogue: 0,2:25:53.75,2:25:56.75,中文,,0,0,0,,如果我们查看超过 20 位数字，我们会看到更多这样的情况。
Dialogue: 0,2:25:56.75,2:25:59.99,中文,,0,0,0,,但现在我们在小数点后有更多个 3。
Dialogue: 0,2:25:59.99,2:26:02.51,中文,,0,0,0,,它至少更精确了。
Dialogue: 0,2:26:02.51,2:26:06.69,中文,,0,0,0,,虽然它并不完美，但至少更精确了。
Dialogue: 0,2:26:06.69,2:26:18.92,中文,,0,0,0,,每当你进行数值计算或科学计算时，都需要牢记这类问题，至少在像 C 这样的语言中，你会遇到硬件和语言本身的现实限制。
Dialogue: 0,2:26:18.92,2:26:20.10,中文,,0,0,0,,在本学期晚些时候，
Dialogue: 0,2:26:20.10,2:26:22.24,中文,,0,0,0,,我们将过渡到一种叫做 Python 的语言。
Dialogue: 0,2:26:22.24,2:26:29.49,中文,,0,0,0,,这实际上将为我们解决至少其中一个问题，它会根据需要自动为我们提供更多位数，至少对于整数来说是这样。
Dialogue: 0,2:26:29.49,2:26:33.13,中文,,0,0,0,,但即使是浮点数和精度的问题仍然存在。
Dialogue: 0,2:26:33.13,2:26:35.19,中文,,0,0,0,,那么，这些问题在现实世界中有多严重呢？
Dialogue: 0,2:26:35.19,2:26:45.18,中文,,0,0,0,,早在 1999 年，我们就体会到了这一点，当时全世界意识到，在过去几年里，用两位数来存储年份可能不是一个好主意，比如不用 1999 来表示年份，
Dialogue: 0,2:26:45.18,2:27:01.73,中文,,0,0,0,,很多计算机出于节省空间和成本的考虑，习惯于走捷径，只用两位数来跟踪年份。
Dialogue: 0,2:27:01.73,2:27:17.16,中文,,0,0,0,,问题在于，如果系统在 1999 年之前没有更新以支持 2000 年、2001 年等等，\N那么就像之前的整数溢出一样，一些计算机可能会在内存中将年份加 1，99 就会变成 100。
Dialogue: 0,2:27:17.16,2:27:18.96,中文,,0,0,0,,这应该是 2000 年。
Dialogue: 0,2:27:18.96,2:27:30.83,中文,,0,0,0,,但如果他们只用两位数表示年份，他们可能会像某些系统那样，将年份误认为是 1900 年，如果可以这么说，这简直是开了一个大倒车。
Dialogue: 0,2:27:30.83,2:27:37.37,中文,,0,0,0,,现在，你可能认为这种问题已经过去了，尤其是在我们更加了解代码和计算的局限性之后。
Dialogue: 0,2:27:37.37,2:27:42.32,中文,,0,0,0,,但实际上，我们将在短短几年内再次遇到同样的问题。
Dialogue: 0,2:27:42.32,2:27:47.95,中文,,0,0,0,,在 2038 年 1 月 19 日，我们将耗尽用于记录时间的比特位。
Dialogue: 0,2:27:47.95,2:27:50.93,中文,,0,0,0,,现在大多数计算机都是这样记录时间的。
Dialogue: 0,2:27:50.93,2:27:58.95,中文,,0,0,0,,事实证明，多年前，人们决定使用一个 32 位整数来跟踪时间的流逝秒数。
Dialogue: 0,2:27:58.95,2:28:06.86,中文,,0,0,0,,他们选择了过去一个随意的日期，1970 年 1 月 1 日，并从那时起开始计算秒数。
Dialogue: 0,2:28:06.86,2:28:14.90,中文,,0,0,0,,因此，如果计算机存储了一定数量的秒数，它就能知道自 1970 年 1 月 1 日那个特定日期以来已经过去了多少秒。
Dialogue: 0,2:28:14.90,2:28:23.66,中文,,0,0,0,,不幸的是，正如我们所见，使用 32 位整数，你只能计算到一个有限的数字，超过这个数字就会导致变量溢出。
Dialogue: 0,2:28:23.66,2:28:42.55,中文,,0,0,0,,因此，如果我们人类、社会和计算机科学家不提前做好准备，\N到 2038 年 1 月 19 日，这个位可能会翻转，从而导致这些整数溢出，使我们在计算上回到 1901 年 12 月 13 日。
Dialogue: 0,2:28:42.55,2:28:48.78,中文,,0,0,0,,因此，拥有强大的计算能力和代码也意味着编写正确代码的责任。
Dialogue: 0,2:28:48.78,2:28:50.56,中文,,0,0,0,,下周，我们将揭开其中的一些奥秘。
Dialogue: 0,2:28:50.56,2:28:52.44,中文,,0,0,0,,第一周的内容就到这里。
Dialogue: 0,2:28:52.44,2:28:54.16,中文,,0,0,0,,祝各位在习题集一中取得好成绩。
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
