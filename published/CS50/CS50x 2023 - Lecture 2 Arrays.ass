[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: CS50x 2023 - Lecture 2 - Arrays .mp4
Video File: CS50x 2023 - Lecture 2 - Arrays .mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.625000
Scroll Position: 2057
Active Line: 2060
Video Position: 2431

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: 英文,Arial,28,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,10,10,10,1
Style: 中文,微软雅黑,38,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,10,10,45,1
Style: 中文大字幕,Arial,38,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:01:12.96,0:01:20.61,英文,,0,0,0,,All right, this is CS50, and this is week two, wherein we're going to take a look at a lower level at how things work.
Dialogue: 0,0:01:20.61,0:01:36.23,英文,,0,0,0,,And indeed, among the goals of the course is this bottom-up understanding, so that in a couple of weeks' time, even a few years' time, when you encounter some new technology, you'll be able to think back, hopefully, on some of this week's and this course's basic building blocks and primitives, and really just deduce how tomorrow's technologies work.
Dialogue: 0,0:01:36.23,0:01:41.27,英文,,0,0,0,,But along the way, it's going to be a little hard, perhaps, to see the forest for the trees, so to speak.
Dialogue: 0,0:01:41.27,0:01:45.02,英文,,0,0,0,,And so the goal at the end of the day still is going to be problem solving.
Dialogue: 0,0:01:45.02,0:01:50.68,英文,,0,0,0,,And so we thought we'd begin today with a look at some of the problems we'll talk about or solve this coming week.
Dialogue: 0,0:01:50.68,0:01:53.26,英文,,0,0,0,,And for that, we have some brave volunteers who have already come up.
Dialogue: 0,0:01:53.26,0:01:58.56,英文,,0,0,0,,If we could turn on some dramatic lighting and meet today's volunteers.
Dialogue: 0,0:01:58.56,0:02:00.68,英文,,0,0,0,,So on my left here, we have?
Dialogue: 0,0:02:00.68,0:02:01.88,英文,,0,0,0,,Hi, my name is Alex.
Dialogue: 0,0:02:01.88,0:02:05.34,英文,,0,0,0,,I'm a first year at the college, and I'm from Chapel Hill, North Carolina.
Dialogue: 0,0:02:05.34,0:02:07.40,英文,,0,0,0,,Welcome to Alex.
Dialogue: 0,0:02:07.40,0:02:09.30,英文,,0,0,0,,And to Alex's right.
Dialogue: 0,0:02:09.30,0:02:11.20,英文,,0,0,0,,I'm Sarah. I'm from Toronto, Canada.
Dialogue: 0,0:02:11.20,0:02:13.31,英文,,0,0,0,,And I'm also a first year student at the college.
Dialogue: 0,0:02:13.31,0:02:13.85,英文,,0,0,0,,Wonderful.
Dialogue: 0,0:02:13.85,0:02:15.95,英文,,0,0,0,,Well, welcome to both Alex and Sarah.
Dialogue: 0,0:02:15.95,0:02:22.72,英文,,0,0,0,,So one of the problems you'll perhaps solve this week for problem set two is to analyze the reading level of a body of text.
Dialogue: 0,0:02:22.72,0:02:28.66,英文,,0,0,0,,Whether someone reads at a first-grade level, second-grade level, third-grade level, all the way up to 12 or 13 or beyond.
Dialogue: 0,0:02:28.66,0:02:36.75,英文,,0,0,0,,But you've perhaps never quite thought about, certainly in terms of code, how you would analyze some text, some book, and figure out what reading level is it at.
Dialogue: 0,0:02:36.75,0:02:40.45,英文,,0,0,0,,And yet, surely, our teachers growing up kind of knew or had an intuitive sense of this.
Dialogue: 0,0:02:40.45,0:02:42.45,英文,,0,0,0,,So let's consider some sample text.
Dialogue: 0,0:02:42.45,0:02:46.28,英文,,0,0,0,,For instance, Alex, what have you been reading lately?
Dialogue: 0,0:02:46.28,0:02:52.69,英文,,0,0,0,,One fish, two fish, red fish, blue fish.
Dialogue: 0,0:02:52.69,0:02:53.45,英文,,0,0,0,,Wonderful.
Dialogue: 0,0:02:53.45,0:02:58.86,英文,,0,0,0,,So given that, what grade level would you say Alex is currently reading at?
Dialogue: 0,0:02:58.86,0:03:01.62,英文,,0,0,0,,Feel free to just shout it out.
Dialogue: 0,0:03:01.62,0:03:10.43,英文,,0,0,0,,First, first. So indeed, you'll see this week, if you run your code on Alex's text, it actually turns out he reads below a first grade reading level.
Dialogue: 0,0:03:10.43,0:03:12.45,英文,,0,0,0,,But why might that be?
Dialogue: 0,0:03:12.45,0:03:19.03,英文,,0,0,0,,What might your intuition be for why we've accused Alex of reading at this level?
Dialogue: 0,0:03:19.03,0:03:21.25,英文,,0,0,0,,Feel free to shout out.
Dialogue: 0,0:03:21.25,0:03:24.50,英文,,0,0,0,,Yeah, so very few syllables, short words, short sentences.
Dialogue: 0,0:03:24.50,0:03:30.36,英文,,0,0,0,,And so there's some heuristics, perhaps, we can infer from that short text that that probably means that it's best for younger children.
Dialogue: 0,0:03:30.36,0:03:33.43,英文,,0,0,0,,Now, Sarah, by contrast, what have you been reading?
Dialogue: 0,0:03:33.43,0:03:34.39,英文,,0,0,0,,Mr. And Ms.
Dialogue: 0,0:03:34.39,0:03:38.42,英文,,0,0,0,,Dursley of number four, Privet Drive, were proud to say,
Dialogue: 0,0:03:38.42,0:03:39.88,英文,,0,0,0,,That they were perfectly normal.
Dialogue: 0,0:03:39.88,0:03:41.16,英文,,0,0,0,,Thank you very much.
Dialogue: 0,0:03:41.16,0:03:48.73,英文,,0,0,0,,They were the last people you'd expect to be involved in anything strange or mysterious because they just didn't hold with much nonsense.
Dialogue: 0,0:03:48.73,0:03:48.93,英文,,0,0,0,,All right.
Dialogue: 0,0:03:48.93,0:03:55.35,英文,,0,0,0,,Now, irrespective of what grade you were in when you might have read that text, what grade level does Sarah seem to be reading at?
Dialogue: 0,0:03:55.35,0:03:57.63,英文,,0,0,0,,So eighth grade, second grade.
Dialogue: 0,0:03:57.63,0:04:03.23,英文,,0,0,0,,OK, so hearing a bit of everything, so that, at least according to code, would actually be seventh grade.
Dialogue: 0,0:04:03.23,0:04:05.32,英文,,0,0,0,,And what might the intuition there be?
Dialogue: 0,0:04:05.32,0:04:11.43,英文,,0,0,0,,Why is that a higher grade level, even though we might disagree exactly which grade it is?
Dialogue: 0,0:04:11.43,0:04:14.21,英文,,0,0,0,,Yeah, so complicated sentences, longer sentences.
Dialogue: 0,0:04:14.21,0:04:18.39,英文,,0,0,0,,So indeed, a lot more words were being spoken by Sarah because there was so much more there on the page.
Dialogue: 0,0:04:18.39,0:04:26.89,英文,,0,0,0,,So we'll translate these ideas this coming week in problem set two, if you tackle this one, to code so that you can ultimately infer things of these quantitatively.
Dialogue: 0,0:04:26.89,0:04:29.19,英文,,0,0,0,,But to do so, we're going to have to understand text.
Dialogue: 0,0:04:29.19,0:04:40.83,英文,,0,0,0,,So let's first thank our volunteers, and then we'll dive in to that lower level. Stress balls. Sorry. You can keep those.
Dialogue: 0,0:04:40.83,0:04:50.12,英文,,0,0,0,,All right, so besides that, let's consider one other body of text, perhaps, that you might see this week, which is namely a little something like this.
Dialogue: 0,0:04:50.12,0:04:53.86,英文,,0,0,0,,What I have here on the screen is what we'll start calling today ciphertext.
Dialogue: 0,0:04:53.86,0:04:56.54,英文,,0,0,0,,It's the result of encrypting some piece of information.
Dialogue: 0,0:04:56.54,0:05:01.12,英文,,0,0,0,,And encryption, or more generally, the art and science of cryptography, is all around us.
Dialogue: 0,0:05:01.12,0:05:03.66,英文,,0,0,0,,It's what you're using on the web, on your phones, with your banks.
Dialogue: 0,0:05:03.66,0:05:07.12,英文,,0,0,0,,And anything that tries to keep data secure is using encryption.
Dialogue: 0,0:05:07.12,0:05:11.15,英文,,0,0,0,,But there's gonna be different levels of encryption, strong encryption, weak encryption.
Dialogue: 0,0:05:11.15,0:05:14.73,英文,,0,0,0,,And what you see here on the screen isn't all that strong.
Dialogue: 0,0:05:14.73,0:05:22.18,英文,,0,0,0,,But we'll see later today how we might decrypt this and actually reveal what the plain text is that corresponds to that cipher text.
Dialogue: 0,0:05:22.18,0:05:26.18,英文,,0,0,0,,But in order to do so, we have to start taking off some training wheels, so to speak.
Dialogue: 0,0:05:26.18,0:05:39.75,英文,,0,0,0,,And believe it or not, even though your time with C this past week, for the first time probably, might have been rather in the weeds and much more complicated, seemingly, than C, it turns out that along the way, we have been providing and will continue to provide certain training wheels.
Dialogue: 0,0:05:39.75,0:05:49.62,英文,,0,0,0,,For instance, the CS50 library is one of them, and even some of the explanations we give of topics for now in these early weeks will be somewhat simplified, abstracted away, if you will.
Dialogue: 0,0:05:49.62,0:06:01.15,英文,,0,0,0,,But the goal ultimately is for you to understand each and every one of those details so that after CS 50 you really can stand on your own and understand and wrap your mind around any future technologies as well.
Dialogue: 0,0:06:01.15,0:06:05.99,英文,,0,0,0,,So let's consider first the very first program with which we began last week, which was this one.
Dialogue: 0,0:06:05.99,0:06:11.68,英文,,0,0,0,,So hello world and see at the end of the day, it was really the print a function that was doing the interesting part of the work.
Dialogue: 0,0:06:11.68,0:06:14.88,英文,,0,0,0,,But there was a lot of technical stuff above and below it.
Dialogue: 0,0:06:14.88,0:06:19.60,英文,,0,0,0,,The curly braces, the parentheses, words like void and include.
Dialogue: 0,0:06:19.60,0:06:21.90,英文,,0,0,0,,And then, of course, the angled brackets and more.
Dialogue: 0,0:06:21.90,0:06:30.37,英文,,0,0,0,,But at the end of the day, we needed to convert that source code in C to machine code, the zeros and ones in binary that the computer understood.
Dialogue: 0,0:06:30.37,0:06:37.43,英文,,0,0,0,,And to do that, of course, we ran, we compiled the code, we ran make, and then we were able to actually run that code there.
Dialogue: 0,0:06:37.43,0:06:44.42,英文,,0,0,0,,So let me actually go over here to VS code and really quickly recreate that hello dot C pretty much by transcribing the same.
Dialogue: 0,0:06:44.42,0:06:49.69,英文,,0,0,0,,So I might have here include standard io dot H.
Dialogue: 0,0:06:49.69,0:06:52.21,英文,,0,0,0,,Uh, int main void.
Dialogue: 0,0:06:52.21,0:06:57.58,英文,,0,0,0,,And then in here I had quite simply hello, come a world with my backslash end quotes and more.
Dialogue: 0,0:06:57.58,0:07:01.98,英文,,0,0,0,,Now, last time to compile this, I indeed ran make hello followed by enter.
Dialogue: 0,0:07:01.98,0:07:03.76,英文,,0,0,0,,Hopefully you see no errors, and that's a good thing.
Dialogue: 0,0:07:03.76,0:07:07.97,英文,,0,0,0,,And if you do dot slash hello, you see, in fact, the results of that program.
Dialogue: 0,0:07:07.97,0:07:11.47,英文,,0,0,0,,But it turns out that make is not actually a compiler.
Dialogue: 0,0:07:11.47,0:07:19.02,英文,,0,0,0,,As I alluded to last week, it's a program that clearly makes your program, but it itself just automates the process of using an actual compiler.
Dialogue: 0,0:07:19.02,0:07:21.34,英文,,0,0,0,,And there's lots of different compilers out there.
Dialogue: 0,0:07:21.34,0:07:27.75,英文,,0,0,0,,And the one that it's actually using underneath the hood is a little something called clang for C language.
Dialogue: 0,0:07:27.75,0:07:30.15,英文,,0,0,0,,And Clang is a pretty popular compiler nowadays.
Dialogue: 0,0:07:30.15,0:07:33.65,英文,,0,0,0,,There's another one that's been around for ages called GCC.
Dialogue: 0,0:07:33.65,0:07:40.38,英文,,0,0,0,,But these are just specific names for types of compilers that different people, different companies, different groups have actually created.
Dialogue: 0,0:07:40.38,0:07:50.69,英文,,0,0,0,,But if you use, in week one, a compiler yourself manually, you have to know, you have to understand a little more about what's going on, because it's even more cryptic than we just make alone.
Dialogue: 0,0:07:50.69,0:07:53.13,英文,,0,0,0,,So in fact, let me go back to my terminal window here.
Dialogue: 0,0:07:53.13,0:07:59.27,英文,,0,0,0,,Let me go ahead and clear the screen a little bit and just run, really, the raw compiler command.
Dialogue: 0,0:07:59.27,0:08:03.67,英文,,0,0,0,,So what Make is automating for me, let me actually do this manually for just a moment.
Dialogue: 0,0:08:03.67,0:08:17.36,英文,,0,0,0,,So if I want to compile hello.c into an executable program I can run, I can do this, clang space hello.c and then Enter.
Dialogue: 0,0:08:17.36,0:08:19.80,英文,,0,0,0,,And now there's no output, which is a good thing.
Dialogue: 0,0:08:19.80,0:08:21.00,英文,,0,0,0,,In this case, no errors.
Dialogue: 0,0:08:21.00,0:08:21.98,英文,,0,0,0,,But notice this.
Dialogue: 0,0:08:21.98,0:08:32.13,英文,,0,0,0,,If I go ahead and type LS, it turns out there's a file that's been created suddenly in my current folder, weirdly called a.out.
Dialogue: 0,0:08:32.13,0:08:33.57,英文,,0,0,0,,That stands for Assembler Output.
Dialogue: 0,0:08:33.57,0:08:39.37,英文,,0,0,0,,And long story short, that's actually the default name of a program that's created when you just run Clang by itself.
Dialogue: 0,0:08:39.37,0:08:43.92,英文,,0,0,0,,Now, that's a pretty bad name for a program, because it doesn't describe what it does.
Dialogue: 0,0:08:43.92,0:08:55.43,英文,,0,0,0,,So better would be here to perhaps do, well, instead of a.out, which, yes, still prints hello.world, but isn't really a clearly named program, it'd be nice to name this hello.
Dialogue: 0,0:08:55.43,0:08:56.17,英文,,0,0,0,,So what could I do?
Dialogue: 0,0:08:56.17,0:08:57.47,英文,,0,0,0,,I could do like we learned last week.
Dialogue: 0,0:08:57.47,0:09:01.91,英文,,0,0,0,,Well, I could rename a.out to hello by using Linux's mv command.
Dialogue: 0,0:09:01.91,0:09:04.63,英文,,0,0,0,,So I'm going to move a.out to become hello.
Dialogue: 0,0:09:04.63,0:09:06.38,英文,,0,0,0,,But that, too, seems kind of tedious.
Dialogue: 0,0:09:06.38,0:09:12.30,英文,,0,0,0,,Now I have three steps, like write my code, compile my code, and then rename it before I can even run it.
Dialogue: 0,0:09:12.30,0:09:13.66,英文,,0,0,0,,We can do better than that.
Dialogue: 0,0:09:13.66,0:09:20.42,英文,,0,0,0,,And so it turns out that certain commands, like clang, support what we're going to start today calling command line arguments.
Dialogue: 0,0:09:20.42,0:09:33.34,英文,,0,0,0,,A command line argument, unlike an argument to a function, is just an additional word or key phrase that you type after a command at your prompt in your terminal window that just modifies the behavior of that command.
Dialogue: 0,0:09:33.34,0:09:35.66,英文,,0,0,0,,It configures it a little more specifically.
Dialogue: 0,0:09:35.66,0:09:43.35,英文,,0,0,0,,So what you're seeing here on the screen is a summary of a better command with which to run Clang so that now I can specify the output
Dialogue: 0,0:09:43.35,0:09:45.45,英文,,0,0,0,,Of this command per this show.
Dialogue: 0,0:09:45.45,0:09:46.59,英文,,0,0,0,,So what I mean by that?
Dialogue: 0,0:09:46.59,0:09:52.57,英文,,0,0,0,,Well, let me go ahead and clear my terminal window again and more explicitly type clang dash. O, hello.
Dialogue: 0,0:09:52.57,0:09:56.57,英文,,0,0,0,,Hello dot C. And then enter nothing again appears to happen.
Dialogue: 0,0:09:56.57,0:09:58.43,英文,,0,0,0,,But that's a good thing when you see no errors.
Dialogue: 0,0:09:58.43,0:10:03.08,英文,,0,0,0,,And now the program I just created is indeed called hello.
Dialogue: 0,0:10:03.08,0:10:06.86,英文,,0,0,0,,So it achieves really the same exact effect as make did.
Dialogue: 0,0:10:06.86,0:10:10.98,英文,,0,0,0,,But what I don't have to do with make is type and remember something as long as this command.
Dialogue: 0,0:10:10.98,0:10:12.78,英文,,0,0,0,,And this, too, is a bit of a white lie.
Dialogue: 0,0:10:12.78,0:10:23.04,英文,,0,0,0,,It turns out we have pre-configured VS Code in the cloud for you to also use some other features of Clang that would be even more tedious for you to write yourselves.
Dialogue: 0,0:10:23.04,0:10:28.28,英文,,0,0,0,,And so really, this is why we distill this as ultimately just running make.
Dialogue: 0,0:10:28.28,0:10:49.32,英文,,0,0,0,,So let me pause here to see first if there's any questions on what I've done by taking my very first program in C and just now compiling it first with make, but then starting over and now manually compiling it with Clang with what we'll call command line arguments, dash o, space hello, and then the name of the file.
Dialogue: 0,0:10:49.32,0:10:51.92,英文,,0,0,0,,Yeah, so a dot out is a historical name.
Dialogue: 0,0:10:51.92,0:10:55.28,英文,,0,0,0,,It refers to assembler output more on that soon.
Dialogue: 0,0:10:55.28,0:11:03.00,英文,,0,0,0,,And it's just the default file name that you get automatically if you just run the compiler on any file so that you have just a standard name for it.
Dialogue: 0,0:11:03.00,0:11:05.30,英文,,0,0,0,,But it's not a very well named program.
Dialogue: 0,0:11:05.30,0:11:09.94,英文,,0,0,0,,Instead of running Microsoft Word on your Mac or PC, it would like be like double clicking on a dot out.
Dialogue: 0,0:11:09.94,0:11:17.48,英文,,0,0,0,,So instead, with these command line arguments, you can customize the output of playing and call it hello or anything you want.
Dialogue: 0,0:11:17.48,0:11:25.65,英文,,0,0,0,,Other questions on what I've done here with Clang itself, the compiler?
Dialogue: 0,0:11:25.65,0:11:30.41,英文,,0,0,0,,So dash o, and you would only know this from reading the manual, taking a class, means output.
Dialogue: 0,0:11:30.41,0:11:38.67,英文,,0,0,0,,So dash o means change Clang's output to be a file called hello instead of the default, which is a dot out.
Dialogue: 0,0:11:38.67,0:11:44.90,英文,,0,0,0,,And this, too, is, again, a detail you would have to look up on a web page, read the manual, hear someone like me tell you about it.
Dialogue: 0,0:11:44.90,0:11:46.84,英文,,0,0,0,,And in fact, there's even more than these options.
Dialogue: 0,0:11:46.84,0:11:49.05,英文,,0,0,0,,But we'll just scratch the surface here.
Dialogue: 0,0:11:49.05,0:11:53.50,英文,,0,0,0,,All right, so if we now know this, what more is actually happening underneath the hood?
Dialogue: 0,0:11:53.50,0:12:06.04,英文,,0,0,0,,Well, let's take a closer look at not just this version of my code, but my slightly more complicated version last week, which looked a little something like this, wherein I added in some dynamic input from the user.
Dialogue: 0,0:12:06.04,0:12:11.85,英文,,0,0,0,,So I could say not hello, world, to everyone, but hello, David, or hello to whoever actually runs this program.
Dialogue: 0,0:12:11.85,0:12:17.77,英文,,0,0,0,,So in fact, let me go ahead and change my code here in VS Code just to match that same code from last week.
Dialogue: 0,0:12:17.77,0:12:19.19,英文,,0,0,0,,So no new code yet.
Dialogue: 0,0:12:19.19,0:12:22.75,英文,,0,0,0,,I'm just going to, in a moment, compile it in a slightly different way.
Dialogue: 0,0:12:22.75,0:12:31.80,英文,,0,0,0,,So I did last week string, I think, answer equals get string, quote unquote, what's your name, just like in Scratch.
Dialogue: 0,0:12:31.80,0:12:37.66,英文,,0,0,0,,And then down here, instead of doing world, I initially wrote answer, but that didn't go well.
Dialogue: 0,0:12:37.66,0:12:43.06,英文,,0,0,0,,What did I ultimately do instead to print out Hello, David or Hello, so and so?
Dialogue: 0,0:12:43.06,0:12:44.84,英文,,0,0,0,,Yeah.
Dialogue: 0,0:12:44.84,0:12:46.56,英文,,0,0,0,,Sorry, a little louder.
Dialogue: 0,0:12:46.56,0:12:46.84,英文,,0,0,0,,Yeah.
Dialogue: 0,0:12:46.84,0:12:51.03,英文,,0,0,0,,So percent s, the so-called format code that printf just knows how to deal with.
Dialogue: 0,0:12:51.03,0:12:52.37,英文,,0,0,0,,And I had to add one other thing.
Dialogue: 0,0:12:52.37,0:12:56.17,英文,,0,0,0,,Someone else besides percent f. Yeah.
Dialogue: 0,0:12:56.17,0:13:01.73,英文,,0,0,0,,The name of the variable that I want to plug in to that placeholder percent s. And in this case, it's answer.
Dialogue: 0,0:13:01.73,0:13:04.53,英文,,0,0,0,,Now, let me make one refinement, only because now we're in week two.
Dialogue: 0,0:13:04.53,0:13:11.68,英文,,0,0,0,,And we're going to start writing more lines of code, even though Scratch called the return value of the ask puzzle piece answer always.
Dialogue: 0,0:13:11.68,0:13:14.54,英文,,0,0,0,,In C, we have full control over what our variables are called.
Dialogue: 0,0:13:14.54,0:13:19.98,英文,,0,0,0,,And now it's probably good not to just generically always call my variable answer if I'm using get string.
Dialogue: 0,0:13:19.98,0:13:20.96,英文,,0,0,0,,Let's call it what it is.
Dialogue: 0,0:13:20.96,0:13:23.78,英文,,0,0,0,,So this is now just a matter of style, if you will.
Dialogue: 0,0:13:23.78,0:13:25.38,英文,,0,0,0,,Let me change the variable.
Dialogue: 0,0:13:25.38,0:13:34.13,英文,,0,0,0,,to be named, just so that it's a little clearer to me, to you, to a TF or TA exactly what that variable represents instead of more generically answer.
Dialogue: 0,0:13:34.13,0:13:37.05,英文,,0,0,0,,All right, so that said, let me go down to my terminal window.
Dialogue: 0,0:13:37.05,0:13:41.27,英文,,0,0,0,,And last week, again, I ran make to compile this exact same program.
Dialogue: 0,0:13:41.27,0:13:43.29,英文,,0,0,0,,Now, though, let me go ahead and just use clang.
Dialogue: 0,0:13:43.29,0:13:47.75,英文,,0,0,0,,So clang dash o. I'll still call this version hello.
Dialogue: 0,0:13:47.75,0:13:56.31,英文,,0,0,0,,Space hello dot C. So exact same command is before. The only thing that's different is I've added a couple of more lines of code to get the user's input.
Dialogue: 0,0:13:56.31,0:13:57.76,英文,,0,0,0,,Let me hit enter.
Dialogue: 0,0:13:57.76,0:13:59.88,英文,,0,0,0,,And now, darn it, our first error.
Dialogue: 0,0:13:59.88,0:14:02.76,英文,,0,0,0,,So output from clang and make is not a good thing.
Dialogue: 0,0:14:02.76,0:14:05.44,英文,,0,0,0,,And here we're seeing something particularly cryptic.
Dialogue: 0,0:14:05.44,0:14:07.86,英文,,0,0,0,,So something in function main
Dialogue: 0,0:14:07.86,0:14:13.48,英文,,0,0,0,,Undefined reference to get string and then linker command failed with exit code one.
Dialogue: 0,0:14:13.48,0:14:16.70,英文,,0,0,0,,So there's actually a lot of jargon in there that will tease apart today.
Dialogue: 0,0:14:16.70,0:14:22.21,英文,,0,0,0,,But my hint is that clearly my problems in Maine, although that's not surprising because there's nothing else going on here.
Dialogue: 0,0:14:22.21,0:14:26.87,英文,,0,0,0,,Get string is an issue and the issue is that it's an undefined reference.
Dialogue: 0,0:14:26.87,0:14:28.97,英文,,0,0,0,,And yet notice I was pretty good.
Dialogue: 0,0:14:28.97,0:14:36.16,英文,,0,0,0,,I added the CS 50 header file and I said last week that that's enough to teach the compiler that functions exist.
Dialogue: 0,0:14:36.16,0:14:51.94,英文,,0,0,0,,But the problem is that even though this does, in fact, teach Clang that getString exists, it is not sufficient information for Clang to go find on the hard drive of the computer the zeros and ones that actually implement getString itself.
Dialogue: 0,0:14:51.94,0:14:55.06,英文,,0,0,0,,So in other words, this include line per last week is a little bit of a hint.
Dialogue: 0,0:14:55.06,0:14:59.68,英文,,0,0,0,,It's a teaser to Clang that you're about to see and use this function somewhere.
Dialogue: 0,0:14:59.68,0:15:15.51,英文,,0,0,0,,But if you actually want to use the zeros and ones that CS50 wrote some time ago and bake those into your program so your program actually knows how to get input from the user, well, then I'm going to have to go ahead and run a slightly different command.
Dialogue: 0,0:15:15.51,0:15:16.15,英文,,0,0,0,,So let me do this.
Dialogue: 0,0:15:16.15,0:15:18.83,英文,,0,0,0,,Let me clear my terminal window just to get rid of that distraction.
Dialogue: 0,0:15:18.83,0:15:23.24,英文,,0,0,0,,And let me propose now that we run this command instead.
Dialogue: 0,0:15:23.24,0:15:32.48,英文,,0,0,0,,Almost the same as before, clang-o, space hello, then hello.c, but with one additional command line argument at the end.
Dialogue: 0,0:15:32.48,0:15:35.07,英文,,0,0,0,,And this is a dash L, not a number one.
Dialogue: 0,0:15:35.07,0:15:39.55,英文,,0,0,0,,So dash L, CS50, with no space in between those two.
Dialogue: 0,0:15:39.55,0:15:49.00,英文,,0,0,0,,Now the L. is going to result in all of those zeros and ones that actually were written by CS 50 being linked into your code, your few lines of code or mind here.
Dialogue: 0,0:15:49.00,0:16:00.37,英文,,0,0,0,,But that's the second step that the compiler requires in order to know how to actually execute and rather compile your code and CS fifties and CS 50 is not the only one that does this.
Dialogue: 0,0:16:00.37,0:16:08.35,英文,,0,0,0,,If you use any third party library and see that doesn't come with the language, you would do dash L such and such.
Dialogue: 0,0:16:08.35,0:16:09.99,英文,,0,0,0,,However they've named their own library.
Dialogue: 0,0:16:09.99,0:16:14.48,英文,,0,0,0,,But you don't have to do it for built-in things like we've been using thus far.
Dialogue: 0,0:16:14.48,0:16:16.12,英文,,0,0,0,,All right, so let me go ahead and try this.
Dialogue: 0,0:16:16.12,0:16:17.86,英文,,0,0,0,,I'll go back to VS Code here.
Dialogue: 0,0:16:17.86,0:16:23.63,英文,,0,0,0,,And let me go ahead now and run clang-o hello, then hello.c.
Dialogue: 0,0:16:23.63,0:16:29.85,英文,,0,0,0,,And now instead of just hitting Enter, dash l cs50 with no space between the l and the cs50, Enter.
Dialogue: 0,0:16:29.85,0:16:31.25,英文,,0,0,0,,Now nothing bad happens.
Dialogue: 0,0:16:31.25,0:16:33.53,英文,,0,0,0,,And now I can do dot slash hello.
Dialogue: 0,0:16:33.53,0:16:34.16,英文,,0,0,0,,What's your name?
Dialogue: 0,0:16:34.16,0:16:35.14,英文,,0,0,0,,I'll type in David.
Dialogue: 0,0:16:35.14,0:16:35.88,英文,,0,0,0,,Enter.
Dialogue: 0,0:16:35.88,0:16:37.92,英文,,0,0,0,,And now we see Hello, David.
Dialogue: 0,0:16:37.92,0:16:40.34,英文,,0,0,0,,Now, honestly, this is where we're really getting into the weeds.
Dialogue: 0,0:16:40.34,0:16:46.50,英文,,0,0,0,,And now this is taking this is really just adding nuisance to the process of compiling and running your code.
Dialogue: 0,0:16:46.50,0:16:57.11,英文,,0,0,0,,And so the reality is, even though this is indeed what is happening, this is why we used last week and we're going to continue using this week onward make because it just automates that whole process for you.
Dialogue: 0,0:16:57.11,0:17:05.96,英文,,0,0,0,,But it's ideal to understand what's going wrong, because any of the error messages you saw for problem set one, any of the error messages you see for the next few weeks, probably aren't coming from make.
Dialogue: 0,0:17:05.96,0:17:10.80,英文,,0,0,0,,They're coming from Clang underneath the hood, because make is just automating the process.
Dialogue: 0,0:17:10.80,0:17:14.04,英文,,0,0,0,,But with make, you literally just write make, and then the name of the program.
Dialogue: 0,0:17:14.04,0:17:17.72,英文,,0,0,0,,You don't have to worry about any of those command line arguments.
Dialogue: 0,0:17:17.72,0:17:22.22,英文,,0,0,0,,Questions, then, on compiling with dash L, CS50, or anything else?
Dialogue: 0,0:17:22.22,0:17:24.96,英文,,0,0,0,,Yeah?
Dialogue: 0,0:17:24.96,0:17:27.47,英文,,0,0,0,,Sorry, what is the benefit of?
Dialogue: 0,0:17:27.47,0:17:30.15,英文,,0,0,0,,What is the benefit of using clang manually?
Dialogue: 0,0:17:30.15,0:17:30.91,英文,,0,0,0,,None really.
Dialogue: 0,0:17:30.91,0:17:35.42,英文,,0,0,0,,In fact, all main is doing is just make is doing is saving us some keystrokes.
Dialogue: 0,0:17:35.42,0:17:42.23,英文,,0,0,0,,If you prefer, though, and you just like to be more in control, you can totally run clang manually if you remember the various command line arguments.
Dialogue: 0,0:17:42.23,0:17:47.76,英文,,0,0,0,,Yeah.
Dialogue: 0,0:17:47.76,0:17:48.18,英文,,0,0,0,,Exactly.
Dialogue: 0,0:17:48.18,0:17:55.64,英文,,0,0,0,,Why did I have to explain, that is, provide a hint to CS50 with the CS50.h header file, but I didn't have to do that with standard io.h?
Dialogue: 0,0:17:55.64,0:17:56.43,英文,,0,0,0,,Just because.
Dialogue: 0,0:17:56.43,0:18:03.11,英文,,0,0,0,,Standard io.h comes with C, just like a few other libraries come with C that we'll start seeing today.
Dialogue: 0,0:18:03.11,0:18:12.03,英文,,0,0,0,,CS50, though, is not built into C everywhere, and so you do have to explicitly add that one there.
Dialogue: 0,0:18:12.03,0:18:25.67,英文,,0,0,0,,A command line argument is a word or phrase that you type at the command line, a.k.a. your terminal, in order to influence the behavior of a program. Yeah, it changes the defaults, right?
Dialogue: 0,0:18:25.67,0:18:29.69,英文,,0,0,0,,In our GUI world, graphical user interface, you and I would probably click some boxes.
Dialogue: 0,0:18:29.69,0:18:33.55,英文,,0,0,0,,We would select some menu options to configure a program to behave in the same way.
Dialogue: 0,0:18:33.55,0:18:36.87,英文,,0,0,0,,At a command line interface, you have to just say everything all at once.
Dialogue: 0,0:18:36.87,0:18:43.60,英文,,0,0,0,,And that's why we have command line arguments.
Dialogue: 0,0:18:43.60,0:18:45.14,英文,,0,0,0,,No, make is not just for CS50.
Dialogue: 0,0:18:45.14,0:18:52.00,英文,,0,0,0,,It's used globally in any project really nowadays using C, C++, even other languages as well.
Dialogue: 0,0:18:52.00,0:18:57.63,英文,,0,0,0,,In fact, most every command you see in this class, unless it has 5, 0 at the end of it, is globally used.
Dialogue: 0,0:18:57.63,0:19:00.75,英文,,0,0,0,,Only those suffixed with 50 are indeed course specific.
Dialogue: 0,0:19:00.75,0:19:07.05,英文,,0,0,0,,And even those will gradually take training wheels off of so that you know exactly what those commands are doing as well.
Dialogue: 0,0:19:07.05,0:19:09.31,英文,,0,0,0,,All right, so what is it that we've just done?
Dialogue: 0,0:19:09.31,0:19:11.71,英文,,0,0,0,,Everything we've just done, of course, I keep calling compiling.
Dialogue: 0,0:19:11.71,0:19:18.01,英文,,0,0,0,,But let's just go down one rabbit hole so that you understand that when you compile code, there's actually a whole bunch of steps happening.
Dialogue: 0,0:19:18.01,0:19:27.16,英文,,0,0,0,,And this is going to enable a lot of features, like companies can write code and then convert it to run it on Macs and PCs alike or phones or the like.
Dialogue: 0,0:19:27.16,0:19:30.40,英文,,0,0,0,,So it's not just a matter of converting source code to machine code.
Dialogue: 0,0:19:30.40,0:19:32.28,英文,,0,0,0,,There's actually four steps.
Dialogue: 0,0:19:32.28,0:19:35.82,英文,,0,0,0,,involved in what you and I, as of last week, know as compiling.
Dialogue: 0,0:19:35.82,0:19:41.61,英文,,0,0,0,,And these aren't terms that you'll have to keep in mind constantly, because again, we're going to abstract a lot of this away.
Dialogue: 0,0:19:41.61,0:19:49.27,英文,,0,0,0,,But just so we've gone down the rabbit hole once, let's consider each of these four steps that have been happening for you for a week automatically.
Dialogue: 0,0:19:49.27,0:19:51.23,英文,,0,0,0,,The first of which is called pre processing.
Dialogue: 0,0:19:51.23,0:19:52.21,英文,,0,0,0,,So what does this mean?
Dialogue: 0,0:19:52.21,0:19:57.92,英文,,0,0,0,,Well, let's consider that same program is before notice that two of the lines of code start with a hash mark.
Dialogue: 0,0:19:57.92,0:20:02.52,英文,,0,0,0,,That is a special symbol in C and it's a so called pre processor directive.
Dialogue: 0,0:20:02.52,0:20:13.29,英文,,0,0,0,,You don't need to memorize terms like that, but it just means that it's a little different from every other line and anything with a hash symbol here should be pre process that is analyzed initially before anything else happens.
Dialogue: 0,0:20:13.29,0:20:15.25,英文,,0,0,0,,So let's consider these two lines up top.
Dialogue: 0,0:20:15.25,0:20:17.13,英文,,0,0,0,,What exactly is happening?
Dialogue: 0,0:20:17.13,0:20:23.67,英文,,0,0,0,,Well, it turns out with these two lines, you have two header files, of course, cs50.h and standardio.h.
Dialogue: 0,0:20:23.67,0:20:24.85,英文,,0,0,0,,Where are those files?
Dialogue: 0,0:20:24.85,0:20:28.54,英文,,0,0,0,,Because they've never been in VS Code for you, seemingly.
Dialogue: 0,0:20:28.54,0:20:35.90,英文,,0,0,0,,If you type ls, if you open up the file explorer in the GUI, you have never seen probably cs50.h or standardio.h.
Dialogue: 0,0:20:35.90,0:20:37.10,英文,,0,0,0,,They just work.
Dialogue: 0,0:20:37.10,0:20:40.84,英文,,0,0,0,,But that's because there's a folder somewhere on
Dialogue: 0,0:20:40.84,0:20:50.39,英文,,0,0,0,,The hard drive that you're using on your Mac or PC or somewhere in the cloud, as in our case, and inside of this folder, traditionally called slash user slash include.
Dialogue: 0,0:20:50.39,0:20:52.15,英文,,0,0,0,,And user is deliberately misspelled.
Dialogue: 0,0:20:52.15,0:20:55.92,英文,,0,0,0,,It's just slightly more succinct, although it's a little weird why we dropped that one letter.
Dialogue: 0,0:20:55.92,0:20:58.68,英文,,0,0,0,,But user slash include is just a folder.
Dialogue: 0,0:20:58.68,0:21:04.02,英文,,0,0,0,,on the server that contains CS50.h, StandardIO.h, and a bunch of other things as well.
Dialogue: 0,0:21:04.02,0:21:15.45,英文,,0,0,0,,So in fact, if you type in VS code in your terminal window when you're using code spaces in the cloud and type ls space slash user slash include, you can see all of the files in that folder.
Dialogue: 0,0:21:15.45,0:21:17.67,英文,,0,0,0,,But we've pre-installed all of that stuff for you.
Dialogue: 0,0:21:17.67,0:21:20.25,英文,,0,0,0,,So let's consider what's actually in those files here.
Dialogue: 0,0:21:20.25,0:21:28.96,英文,,0,0,0,,Well, if I highlight these two lines up top that start with hash include, well, I kind of hinted last week that what's in that first file
Dialogue: 0,0:21:28.96,0:21:32.86,英文,,0,0,0,,is a hint as to what functions CS50 wrote for you.
Dialogue: 0,0:21:32.86,0:21:41.06,英文,,0,0,0,,So you can kind of think of these include lines as being temporary placeholders for what's going to become like a global find and replace.
Dialogue: 0,0:21:41.06,0:21:44.42,英文,,0,0,0,,That is, the first thing Clang is going to do, it's preprocess this file.
Dialogue: 0,0:21:44.42,0:21:47.45,英文,,0,0,0,,It's going to look for any line that starts with hash include.
Dialogue: 0,0:21:47.45,0:21:56.61,英文,,0,0,0,,And if it sees that, it's going to essentially go into that file, like CS50.h, and then just copy and paste the contents of that file magically there for you.
Dialogue: 0,0:21:56.61,0:22:00.13,英文,,0,0,0,,You don't see it visually on the screen, but it's happening behind the scenes.
Dialogue: 0,0:22:00.13,0:22:10.97,英文,,0,0,0,,And so really, what's happening with this first line is that somewhere in CS50.h is the declaration of get string, like we talked last week.
Dialogue: 0,0:22:10.97,0:22:13.37,英文,,0,0,0,,And it probably looks a little something like this.
Dialogue: 0,0:22:13.37,0:22:17.25,英文,,0,0,0,,And we didn't spend much time on this yet this past week, but we will in time more.
Dialogue: 0,0:22:17.25,0:22:21.57,英文,,0,0,0,,Notice that this is how a function is declared.
Dialogue: 0,0:22:21.57,0:22:23.89,英文,,0,0,0,,That is, it is decreed to exist.
Dialogue: 0,0:22:23.89,0:22:25.93,英文,,0,0,0,,The name of the function, of course, is getString.
Dialogue: 0,0:22:25.93,0:22:28.35,英文,,0,0,0,,Inside of the parentheses are its arguments.
Dialogue: 0,0:22:28.35,0:22:33.23,英文,,0,0,0,,In this case, there's one argument to getString, I claim today. But you've known this implicitly.
Dialogue: 0,0:22:33.23,0:22:34.28,英文,,0,0,0,,And it's a prompt.
Dialogue: 0,0:22:34.28,0:22:37.00,英文,,0,0,0,,It's the prompt that the human sees when you use getString.
Dialogue: 0,0:22:37.00,0:22:37.74,英文,,0,0,0,,What is that prompt?
Dialogue: 0,0:22:37.74,0:22:39.18,英文,,0,0,0,,Well, it's a string of text.
Dialogue: 0,0:22:39.18,0:22:43.18,英文,,0,0,0,,Like, quote unquote, what's your name or anything else that I asked last week?
Dialogue: 0,0:22:43.18,0:22:46.60,英文,,0,0,0,,Meanwhile, get string, as we know from last week, has a return value.
Dialogue: 0,0:22:46.60,0:22:49.77,英文,,0,0,0,,It returns something to you, and that, too, is a string.
Dialogue: 0,0:22:49.77,0:22:52.33,英文,,0,0,0,,So again, this is also called a functions prototype.
Dialogue: 0,0:22:52.33,0:23:02.24,英文,,0,0,0,,It's the thing toward the end of last week that I just copied and pasted from the bottom of my file to the top, just so that it was like this teaser for clang as to what would exist later.
Dialogue: 0,0:23:02.24,0:23:17.73,英文,,0,0,0,,So you can think, then, of these include lines as just kind of combining all of those function declarations in some separate file called cs50.h so that you yourself don't have to type them every time you use the library, or worse, so that you yourself don't have to copy and paste.
Dialogue: 0,0:23:17.73,0:23:22.79,英文,,0,0,0,,Those lines, this is what Clang is doing for you in its first step of pre-processing.
Dialogue: 0,0:23:22.79,0:23:29.36,英文,,0,0,0,,Second and last in this example, what happens when Clang pre-processes this second include line?
Dialogue: 0,0:23:29.36,0:23:38.25,英文,,0,0,0,,Well, the only other function we care about in this story is printf, of course, which comes with C. So essentially, you can think of printf's prototype
Dialogue: 0,0:23:38.25,0:23:42.85,英文,,0,0,0,,Or declaration as just being this printf is the name of the function.
Dialogue: 0,0:23:42.85,0:23:52.15,英文,,0,0,0,,It takes a string that you want to format, like hello, comma, world or hello, comma, percent s. And then with dot dot dot, this actually has technical meaning.
Dialogue: 0,0:23:52.15,0:23:56.35,英文,,0,0,0,,It means, of course, that you can plug in Zero variables, one variable, two, or 10.
Dialogue: 0,0:23:56.35,0:23:58.67,英文,,0,0,0,,So dot, dot, dot means some number of variables.
Dialogue: 0,0:23:58.67,0:24:01.58,英文,,0,0,0,,Now, we haven't talked about this yet, and we won't really in general.
Dialogue: 0,0:24:01.58,0:24:07.31,英文,,0,0,0,,Printf actually returns a value, a number, that is an integer. But more on that perhaps another time.
Dialogue: 0,0:24:07.31,0:24:11.05,英文,,0,0,0,,It's generally not something the programmer tends to look at.
Dialogue: 0,0:24:11.05,0:24:18.82,英文,,0,0,0,,But that's all we mean by pre processing so that the end of this process, even though there's more lines of code in CS 50 dot H and standard io dot H.
Dialogue: 0,0:24:18.82,0:24:27.82,英文,,0,0,0,,What's really just happening is that clang in pre processing the file copies and paste the contents of those files into your code so that now your code knows about everything.
Dialogue: 0,0:24:27.82,0:24:31.17,英文,,0,0,0,,Get string, print F and anything else.
Dialogue: 0,0:24:31.17,0:24:35.33,英文,,0,0,0,,Any questions then on that first step pre processing?
Dialogue: 0,0:24:35.33,0:24:49.67,英文,,0,0,0,,Yes.
Dialogue: 0,0:24:49.67,0:24:50.33,英文,,0,0,0,,Good question.
Dialogue: 0,0:24:50.33,0:24:54.87,英文,,0,0,0,,When you include a file, does it only include what you need or does it include everything?
Dialogue: 0,0:24:54.87,0:24:56.30,英文,,0,0,0,,Think of it is including everything.
Dialogue: 0,0:24:56.30,0:24:59.18,英文,,0,0,0,,So if it's a big file, that's a lot of code at the very top.
Dialogue: 0,0:24:59.18,0:25:08.98,英文,,0,0,0,,And that's why, if you think back to all of the zeros and ones I showed a little bit ago, as well as last week, there's a lot of zeros and ones that end up on the screen as a result of just writing hello world.
Dialogue: 0,0:25:08.98,0:25:15.05,英文,,0,0,0,,A lot of those zeros and ones are perhaps coming from code that you didn't actually necessarily need, but some of it is perhaps there.
Dialogue: 0,0:25:15.05,0:25:17.85,英文,,0,0,0,,But there are ways to optimize that as well.
Dialogue: 0,0:25:17.85,0:25:22.57,英文,,0,0,0,,All right, so step two of compiling is confusingly called compiling.
Dialogue: 0,0:25:22.57,0:25:28.14,英文,,0,0,0,,It's just this is the term that most everyone uses to describe the whole process instead of just this one step.
Dialogue: 0,0:25:28.14,0:25:35.91,英文,,0,0,0,,But once a program has been pre processed behind the scenes by the compiler for you, it looks now a little something like this.
Dialogue: 0,0:25:35.91,0:25:38.81,英文,,0,0,0,,And I put dot dot dots just to imply that yes to your question.
Dialogue: 0,0:25:38.81,0:25:39.81,英文,,0,0,0,,There's more stuff above it.
Dialogue: 0,0:25:39.81,0:25:40.77,英文,,0,0,0,,There's more stuff below it.
Dialogue: 0,0:25:40.77,0:25:43.17,英文,,0,0,0,,It's just not interesting right now for us.
Dialogue: 0,0:25:43.17,0:25:44.87,英文,,0,0,0,,So now we have just C code.
Dialogue: 0,0:25:44.87,0:25:46.95,英文,,0,0,0,,There's no more preprocessor directives.
Dialogue: 0,0:25:46.95,0:25:52.78,英文,,0,0,0,,At this point, all of the hash symbols and those lines of code have been preprocessed and converted to something else.
Dialogue: 0,0:25:52.78,0:26:03.46,英文,,0,0,0,,And so now, and this is where things get a little spooky looking, here now is what happens when Clang, or any compiler, literally compiles code like this.
Dialogue: 0,0:26:03.46,0:26:08.84,英文,,0,0,0,,It converts it from this in C to this in assembly code.
Dialogue: 0,0:26:08.84,0:26:10.74,英文,,0,0,0,,So this is among the scarier languages.
Dialogue: 0,0:26:10.74,0:26:12.56,英文,,0,0,0,,I myself don't really have fond memories.
Dialogue: 0,0:26:12.56,0:26:14.80,英文,,0,0,0,,This is not a language that many people program in.
Dialogue: 0,0:26:14.80,0:26:21.63,英文,,0,0,0,,If you take a subsequent class in computer science in systems, a higher level class, you might actually learn this or some variant thereof.
Dialogue: 0,0:26:21.63,0:26:29.69,英文,,0,0,0,,But there's at least a few people out there that need to know this stuff, because this is closer to what the computers themselves nowadays understand.
Dialogue: 0,0:26:29.69,0:26:40.12,英文,,0,0,0,,The Intel CPUs or the AMD CPUs, the brains of today's computers and phones, understand stuff that looks more like this and less like C. Now, it's completely esoteric.
Dialogue: 0,0:26:40.12,0:26:42.38,英文,,0,0,0,,But let me just highlight a few phrases.
Dialogue: 0,0:26:42.38,0:26:44.68,英文,,0,0,0,,There's some stuff that's a little familiar.
Dialogue: 0,0:26:44.68,0:26:47.67,英文,,0,0,0,,There is mention of main at the top there in yellow.
Dialogue: 0,0:26:47.67,0:26:49.75,英文,,0,0,0,,There is mention of get string toward the bottom.
Dialogue: 0,0:26:49.75,0:26:52.17,英文,,0,0,0,,There is mention of printf down below.
Dialogue: 0,0:26:52.17,0:27:00.27,英文,,0,0,0,,So this is just another programming language called assembly language that decades ago humans, myself included in school, did write code in.
Dialogue: 0,0:27:00.27,0:27:06.24,英文,,0,0,0,,And absolutely, some people still write this code, especially since you can write very, very efficient code.
Dialogue: 0,0:27:06.24,0:27:11.40,英文,,0,0,0,,But it's a lot more Arcane, it's a lot less user friendly.
Dialogue: 0,0:27:11.40,0:27:24.15,英文,,0,0,0,,So you'll see in yellow now, these are the so-called instructions that a computer's brain or CPU understands, pushing values around, moving them, subtracting values, calling functions, and move, move, move.
Dialogue: 0,0:27:24.15,0:27:34.28,英文,,0,0,0,,So really, the low-level operations that computers understand tend to be Arithmetic operations, subtraction, addition, and the like, moving things in and out of memory.
Dialogue: 0,0:27:34.28,0:27:37.33,英文,,0,0,0,,It's just a lot more tedious for folks like us to write code like this.
Dialogue: 0,0:27:37.33,0:27:40.55,英文,,0,0,0,,This is why you and I tend to write stuff like this.
Dialogue: 0,0:27:40.55,0:27:46.56,英文,,0,0,0,,And ideally, still, people like you and I tend to drag and drop puzzle pieces that sort of abstract all of that away further.
Dialogue: 0,0:27:46.56,0:27:49.54,英文,,0,0,0,,But for now, this is, again, called assembly language.
Dialogue: 0,0:27:49.54,0:27:54.46,英文,,0,0,0,,It is what happens when the compiler literally compiles your code.
Dialogue: 0,0:27:54.46,0:27:57.02,英文,,0,0,0,,But of course, this still not zeros and ones.
Dialogue: 0,0:27:57.02,0:27:58.65,英文,,0,0,0,,So we've got two steps to go.
Dialogue: 0,0:27:58.65,0:28:05.61,英文,,0,0,0,,So when a compiler proceeds to step three, this is where things get converted to machine code.
Dialogue: 0,0:28:05.61,0:28:11.81,英文,,0,0,0,,And when a compiler assembles your code for you, it converts what we just saw on the screen here
Dialogue: 0,0:28:11.81,0:28:18.76,英文,,0,0,0,,to actual zeros and ones, the so-called machine code that your phone or your computer understands.
Dialogue: 0,0:28:18.76,0:28:24.44,英文,,0,0,0,,But it's worth noting that these are not necessarily all of the zeros and ones of your program.
Dialogue: 0,0:28:24.44,0:28:32.55,英文,,0,0,0,,Yes, they are the zeros and ones that correspond to your hello program or printf and get string and the like.
Dialogue: 0,0:28:32.55,0:28:37.23,英文,,0,0,0,,But notice that here we need one final step.
Dialogue: 0,0:28:37.23,0:28:40.11,英文,,0,0,0,,In those zeros and ones are only your lines of code.
Dialogue: 0,0:28:40.11,0:28:43.53,英文,,0,0,0,,But what about CS 50s lines of code that we wrote to implement get string?
Dialogue: 0,0:28:43.53,0:28:47.12,英文,,0,0,0,,What about the lines of code that humans wrote decades ago to implement print F?
Dialogue: 0,0:28:47.12,0:28:51.38,英文,,0,0,0,,Those air somewhere on this hard drive, like on my Mac, my PC or somewhere in the cloud.
Dialogue: 0,0:28:51.38,0:28:56.72,英文,,0,0,0,,But we need to combine all of those zeros and ones together and link
Dialogue: 0,0:28:56.72,0:29:02.50,英文,,0,0,0,,My code, with CS50's code, with standard IO's code, all together.
Dialogue: 0,0:29:02.50,0:29:12.38,英文,,0,0,0,,And so what happens in the last step, ultimately, is that if we have my code here in yellow, and then the code that CS50 wrote, and the code that the authors of C itself wrote,
Dialogue: 0,0:29:12.38,0:29:24.74,英文,,0,0,0,,what really is happening is that somewhere we have not only hello.c, which obviously I wrote and wrote with us live here, there's also, let's assume, somewhere on the computer, a CS50.c file.
Dialogue: 0,0:29:24.74,0:29:28.34,英文,,0,0,0,,That coincidentally, I and CS50 staff wrote years ago.
Dialogue: 0,0:29:28.34,0:29:30.82,英文,,0,0,0,,And also somewhere on the computer, there's another file.
Dialogue: 0,0:29:30.82,0:29:34.17,英文,,0,0,0,,Let me oversimplify by just calling it standard io.c.
Dialogue: 0,0:29:34.17,0:29:37.01,英文,,0,0,0,,In practice, it's probably specifically called printf.c.
Dialogue: 0,0:29:37.01,0:29:39.69,英文,,0,0,0,,But there's somewhere these two other files.
Dialogue: 0,0:29:39.69,0:29:45.85,英文,,0,0,0,,And so this last step, called linking, takes my zeros and ones from the code I just wrote,
Dialogue: 0,0:29:45.85,0:29:48.35,英文,,0,0,0,,Namely this code on the screen here.
Dialogue: 0,0:29:48.35,0:29:56.52,英文,,0,0,0,,It then grabs the zeros and ones that CS 50 row and it grabs the zeros and ones that the authors of C wrote in order to implement the standard I O library.
Dialogue: 0,0:29:56.52,0:30:00.65,英文,,0,0,0,,And lastly, voila links them all together.
Dialogue: 0,0:30:00.65,0:30:04.17,英文,,0,0,0,,And this is the same blob of zeros and ones that we saw earlier.
Dialogue: 0,0:30:04.17,0:30:11.90,英文,,0,0,0,,It's just now the result of Pre-processing your code, compiling your code, assembling your code, linking your code.
Dialogue: 0,0:30:11.90,0:30:17.82,英文,,0,0,0,,And my god, at this point, if there were any fun in programming for you yet, we've just taken it all away.
Dialogue: 0,0:30:17.82,0:30:19.70,英文,,0,0,0,,We just call this whole process compiling.
Dialogue: 0,0:30:19.70,0:30:20.20,英文,,0,0,0,,Why?
Dialogue: 0,0:30:20.20,0:30:32.53,英文,,0,0,0,,Because now that we know those steps exist and smart people solve that problem for us, you and I can kind of operate at this level of abstraction and just assume that compiling converts source code to machine code.
Dialogue: 0,0:30:32.53,0:30:35.45,英文,,0,0,0,,Questions, though, on any of these intermediate
Dialogue: 0,0:30:35.45,0:30:36.47,英文,,0,0,0,,steps.
Dialogue: 0,0:30:36.47,0:30:50.37,英文,,0,0,0,,Yeah.
Dialogue: 0,0:30:50.37,0:30:53.18,英文,,0,0,0,,A good question, so where are all of these zeros and ones stored?
Dialogue: 0,0:30:53.18,0:30:54.92,英文,,0,0,0,,Because you and I, we've been using a browser.
Dialogue: 0,0:30:54.92,0:30:58.40,英文,,0,0,0,,At code.cs50.io, of course, is this web-based user interface.
Dialogue: 0,0:30:58.40,0:31:09.17,英文,,0,0,0,,But again, recall from last week, even though you're using a web browser to access VS Code, that web-based version of VS Code is connected to an actual server somewhere in the cloud.
Dialogue: 0,0:31:09.17,0:31:15.45,英文,,0,0,0,,And on that server, you have your own account, and your own files, and really your own hard drive virtually in the cloud.
Dialogue: 0,0:31:15.45,0:31:19.83,英文,,0,0,0,,Think of it a little like Dropbox, or Box, or Google Drive, or OneDrive, or something like that.
Dialogue: 0,0:31:19.83,0:31:23.45,英文,,0,0,0,,So you have a hard drive somewhere out there that we've provisioned for you.
Dialogue: 0,0:31:23.45,0:31:37.10,英文,,0,0,0,,And it's on that hard drive that we have your code that you just wrote, or I just wrote, cs50.c, standardio.c, and all of the other code that implements the math functions and everything else that C supports.
Dialogue: 0,0:31:37.10,0:31:52.50,英文,,0,0,0,,Good question.
Dialogue: 0,0:31:52.50,0:31:53.04,英文,,0,0,0,,Good question.
Dialogue: 0,0:31:53.04,0:31:57.12,英文,,0,0,0,,That hash includes CS50.h line at the top of my code.
Dialogue: 0,0:31:57.12,0:32:01.59,英文,,0,0,0,,If I just replace that with the contents of CS50.c, would that work?
Dialogue: 0,0:32:01.59,0:32:03.57,英文,,0,0,0,,Short answer, yes, that would work.
Dialogue: 0,0:32:03.57,0:32:05.29,英文,,0,0,0,,You could copy all of the code there.
Dialogue: 0,0:32:05.29,0:32:08.69,英文,,0,0,0,,However, there's some order of operations that might come into play.
Dialogue: 0,0:32:08.69,0:32:10.91,英文,,0,0,0,,And so it's probably not quite as simple as copy paste.
Dialogue: 0,0:32:10.91,0:32:13.32,英文,,0,0,0,,But conceptually, yes, that's what's happening.
Dialogue: 0,0:32:13.32,0:32:16.76,英文,,0,0,0,,Now, with that said, in CS50.h,
Dialogue: 0,0:32:16.76,0:32:25.82,英文,,0,0,0,,are only the prototypes of the functions, the hints as to how the functions look, what their return type is, what their name is, and what their arguments are.
Dialogue: 0,0:32:25.82,0:32:29.93,英文,,0,0,0,,It's in the .c file that actual code tends to be written.
Dialogue: 0,0:32:29.93,0:32:34.13,英文,,0,0,0,,And this is a little confusing now, because you and I have only written code in .c files.
Dialogue: 0,0:32:34.13,0:32:40.65,英文,,0,0,0,,But in the next few weeks, you'll actually start writing some of your own .h files as well, just like CS50, just like standard I-O.
Dialogue: 0,0:32:40.65,0:32:44.89,英文,,0,0,0,,But in essence, that line of code just makes it easier to use and reuse code.
Dialogue: 0,0:32:44.89,0:32:45.89,英文,,0,0,0,,That's already been written.
Dialogue: 0,0:32:45.89,0:32:50.80,英文,,0,0,0,,And that's the whole point of a library.
Dialogue: 0,0:32:50.80,0:32:54.88,英文,,0,0,0,,I say that a little louder.
Dialogue: 0,0:32:54.88,0:32:55.18,英文,,0,0,0,,Yes.
Dialogue: 0,0:32:55.18,0:32:57.00,英文,,0,0,0,,Does linking happen when you compile your code?
Dialogue: 0,0:32:57.00,0:32:57.60,英文,,0,0,0,,Yes.
Dialogue: 0,0:32:57.60,0:33:04.66,英文,,0,0,0,,When you run make as we have been doing the past week now, all four of these steps are happening.
Dialogue: 0,0:33:04.66,0:33:07.95,英文,,0,0,0,,Pre processing converts the hash include lines to something else.
Dialogue: 0,0:33:07.95,0:33:12.73,英文,,0,0,0,,Compiling technically converts it to assembly code, which the Mac, the PC, the server,
Dialogue: 0,0:33:12.73,0:33:22.52,英文,,0,0,0,,more closely understands, assembly converts that language to binary, the machine code that this computer actually understands, and then linking combines everything together.
Dialogue: 0,0:33:22.52,0:33:29.79,英文,,0,0,0,,And in fact, if you think back a few minutes ago to when I did this dash L CS50,
Dialogue: 0,0:33:29.79,0:33:38.79,英文,,0,0,0,,the reason I had to add that and the reason my code did not compile at first was because I forgot to tell Clang to link in CS50's 0's and 1's per that last step.
Dialogue: 0,0:33:38.79,0:33:41.05,英文,,0,0,0,,I don't need to do dash L standard IO.
Dialogue: 0,0:33:41.05,0:33:44.38,英文,,0,0,0,,Because it comes with C. So that would just be tedious for everyone in the world.
Dialogue: 0,0:33:44.38,0:33:47.26,英文,,0,0,0,,But CS 50 does not come with C. So we link that in.
Dialogue: 0,0:33:47.26,0:33:49.76,英文,,0,0,0,,And to be clear, too, we won't always use CS fifties library.
Dialogue: 0,0:33:49.76,0:33:52.54,英文,,0,0,0,,That'll be yet another pair of training wheels we take off in the coming weeks.
Dialogue: 0,0:33:52.54,0:33:55.06,英文,,0,0,0,,But for now, it makes a few things simpler.
Dialogue: 0,0:33:55.06,0:34:09.32,英文,,0,0,0,,Yeah.
Dialogue: 0,0:34:09.32,0:34:12.86,英文,,0,0,0,,Short answer, yes. So what do the 0s and 1s, the machine code, translate to?
Dialogue: 0,0:34:12.86,0:34:17.37,英文,,0,0,0,,Yes, there is a one-to-one relationship between the machine code and the assembly code.
Dialogue: 0,0:34:17.37,0:34:22.91,英文,,0,0,0,,Assembly code, it's not really English, but at least it's symbols I recognize. It's not 0s and 1s.
Dialogue: 0,0:34:22.91,0:34:24.81,英文,,0,0,0,,Machine code, of course, is just 0s and 1s.
Dialogue: 0,0:34:24.81,0:34:30.74,英文,,0,0,0,,So back in the day, before C existed, people were programming only in assembly code.
Dialogue: 0,0:34:30.74,0:34:34.46,英文,,0,0,0,,Before assembly code existed, people were coding in zeros and ones.
Dialogue: 0,0:34:34.46,0:34:36.71,英文,,0,0,0,,And you can imagine just how painful that was.
Dialogue: 0,0:34:36.71,0:34:40.11,英文,,0,0,0,,And so each of these languages makes life for us sort of easier and easier.
Dialogue: 0,0:34:40.11,0:34:48.20,英文,,0,0,0,,In a few weeks, we'll transition to Python, which will, in turn, make C even simpler, or coding in general, simpler to do, too.
Dialogue: 0,0:34:48.20,0:34:54.94,英文,,0,0,0,,All right, so with that said, what could go wrong with this?
Dialogue: 0,0:34:54.94,0:34:59.22,英文,,0,0,0,,Well, it turns out that besides compiling, technically speaking, there's decompiling.
Dialogue: 0,0:34:59.22,0:35:01.22,英文,,0,0,0,,And we've not done this, and we won't do this.
Dialogue: 0,0:35:01.22,0:35:04.30,英文,,0,0,0,,But it's worth considering for just a moment.
Dialogue: 0,0:35:04.30,0:35:16.52,英文,,0,0,0,,If you were to not compile your code, but decompile it, as the word suggests, this just means reversing the process, converting it, ideally, from machine code, 0's and 1's, maybe back to C.
Dialogue: 0,0:35:16.52,0:35:19.75,英文,,0,0,0,,Now, this would be cool, perhaps, if all you have is a program.
Dialogue: 0,0:35:19.75,0:35:22.25,英文,,0,0,0,,You could convert it and see the actual source code.
Dialogue: 0,0:35:22.25,0:35:28.66,英文,,0,0,0,,What might a downside be if anyone on the internet is able to decompile code on their machine?
Dialogue: 0,0:35:28.66,0:35:30.64,英文,,0,0,0,,Yeah.
Dialogue: 0,0:35:30.64,0:35:35.54,英文,,0,0,0,,OK, so it's easier to find bugs in the code. Oh, to exploit.
Dialogue: 0,0:35:35.54,0:35:45.15,英文,,0,0,0,,So it might be easier to hack into the software by finding mistakes you and I made, because literally they're staring at you in code, whereas the zeros and ones make it way less obvious.
Dialogue: 0,0:35:45.15,0:35:48.33,英文,,0,0,0,,Other downsides of what I call decompiling?
Dialogue: 0,0:35:48.33,0:35:56.14,英文,,0,0,0,,Yeah. Yeah.
Dialogue: 0,0:35:56.14,0:36:05.66,英文,,0,0,0,,Yeah, if your code, your work is your intellectual property, copyrighted or otherwise, that's kind of obnoxious that someone can just run a command, and boom, they can see the original code that you wrote.
Dialogue: 0,0:36:05.66,0:36:08.54,英文,,0,0,0,,Now, it turns out it's not quite as simple as that.
Dialogue: 0,0:36:08.54,0:36:17.00,英文,,0,0,0,,And so even though, yes, you could take a program like Hello or even Microsoft Word and convert it from 0's and 1's back to some form of
Dialogue: 0,0:36:17.00,0:36:22.55,英文,,0,0,0,,Source code, be it in C, or Java, or Python, or something else, whatever it was originally written in.
Dialogue: 0,0:36:22.55,0:36:25.85,英文,,0,0,0,,Odds are it's going to be an utter mess to look at.
Dialogue: 0,0:36:25.85,0:36:26.43,英文,,0,0,0,,Why?
Dialogue: 0,0:36:26.43,0:36:30.92,英文,,0,0,0,,Because things like variable names are not retained in the 0's and 1's typically.
Dialogue: 0,0:36:30.92,0:36:34.10,英文,,0,0,0,,Function names might not be retained in the 0's and 1's.
Dialogue: 0,0:36:34.10,0:36:34.72,英文,,0,0,0,,The code is.
Dialogue: 0,0:36:34.72,0:36:35.78,英文,,0,0,0,,The logic is.
Dialogue: 0,0:36:35.78,0:36:40.76,英文,,0,0,0,,But the computer doesn't care what pretty variables you chose and how nicely named your functions were.
Dialogue: 0,0:36:40.76,0:36:43.05,英文,,0,0,0,,It just needs to know them as 0's and 1's.
Dialogue: 0,0:36:43.05,0:36:46.59,英文,,0,0,0,,Moreover, if you think about last week, we introduced things like loops in C.
Dialogue: 0,0:36:46.59,0:36:50.71,英文,,0,0,0,,And besides for loops, there's what other kind of loop, for instance?
Dialogue: 0,0:36:50.71,0:36:51.61,英文,,0,0,0,,So a while loop.
Dialogue: 0,0:36:51.61,0:36:57.31,英文,,0,0,0,,And even though they look different, and you have to write different code, they achieve exactly the same functionality.
Dialogue: 0,0:36:57.31,0:37:07.34,英文,,0,0,0,,Which is to say, when you compile a for loop or you compile a while loop, if they logically do the same thing, they might end up looking identical as 0's and 1's.
Dialogue: 0,0:37:07.34,0:37:11.30,英文,,0,0,0,,And so therefore, it's not necessarily predictable that you'll get back the original code.
Dialogue: 0,0:37:11.30,0:37:11.86,英文,,0,0,0,,Why?
Dialogue: 0,0:37:11.86,0:37:16.86,英文,,0,0,0,,Because the 0's and 1's might not know, so to speak, whether it was a for loop or a while loop.
Dialogue: 0,0:37:16.86,0:37:20.14,英文,,0,0,0,,So maybe decompiling will show you one or the other.
Dialogue: 0,0:37:20.14,0:37:26.79,英文,,0,0,0,,Decompiling, while possible, and it's one way of reverse engineering someone's product, odds are, if you're good enough to start reading code
Dialogue: 0,0:37:26.79,0:37:34.79,英文,,0,0,0,,that's been decompiled and reading through the messiness of it, odds are you have the talent, probably, to just write that same program from scratch yourself.
Dialogue: 0,0:37:34.79,0:37:40.46,英文,,0,0,0,,Now, that's an overstatement, perhaps, but it's not quite as easy or threatening as you might first think.
Dialogue: 0,0:37:40.46,0:37:49.83,英文,,0,0,0,,So in general, once code is compiled, it's pretty challenging, time-consuming, costly to reverse engineer it, much like it would be in the real world.
Dialogue: 0,0:37:49.83,0:37:50.05,英文,,0,0,0,,Right?
Dialogue: 0,0:37:50.05,0:37:52.83,英文,,0,0,0,,Like all of us have some kind of phone probably nowadays in our pocket.
Dialogue: 0,0:37:52.83,0:37:57.13,英文,,0,0,0,,There's nothing stopping you from opening it up somehow poking around, recreating what's there.
Dialogue: 0,0:37:57.13,0:37:59.13,英文,,0,0,0,,That's a huge amount of effort, most likely.
Dialogue: 0,0:37:59.13,0:38:03.20,英文,,0,0,0,,And at that point, maybe you should just invent the phone instead of trying to reverse engineer it.
Dialogue: 0,0:38:03.20,0:38:06.46,英文,,0,0,0,,So same kind of idea in the physical world.
Dialogue: 0,0:38:06.46,0:38:13.15,英文,,0,0,0,,Any questions then on compiling or even decompiling in these forms?
Dialogue: 0,0:38:13.15,0:38:17.25,英文,,0,0,0,,All right, so odds are at this point, not only I, but you have made mistakes.
Dialogue: 0,0:38:17.25,0:38:19.05,英文,,0,0,0,,And you've written buggy code.
Dialogue: 0,0:38:19.05,0:38:26.67,英文,,0,0,0,,A bug in a code is just a mistake, a logical error or otherwise, where the code just does not behave correctly as you intend.
Dialogue: 0,0:38:26.67,0:38:35.42,英文,,0,0,0,,And up until now, odds are your debugging techniques have been to maybe look back at what I did in class, maybe ask a question online or in person.
Dialogue: 0,0:38:35.42,0:38:39.58,英文,,0,0,0,,But ultimately, it would be nice if you had some tools of your own with which to debug code.
Dialogue: 0,0:38:39.58,0:38:41.70,英文,,0,0,0,,And this, honestly, is a lifelong skill.
Dialogue: 0,0:38:41.70,0:38:46.29,英文,,0,0,0,,You're not gonna emerge from CS 50 and even 20 years from now, you're not gonna be writing if you're writing code at all.
Dialogue: 0,0:38:46.29,0:38:50.97,英文,,0,0,0,,Correct code all of the time, like all of us on the staff continue to write bugs.
Dialogue: 0,0:38:50.97,0:38:55.45,英文,,0,0,0,,Hopefully they get a little more sophisticated and not sort of like oops, I missed a semicolon.
Dialogue: 0,0:38:55.45,0:38:57.88,英文,,0,0,0,,But even those kinds of mistakes we make to
Dialogue: 0,0:38:57.88,0:39:03.46,英文,,0,0,0,,But there's tools out there and techniques that can make your life easier when it comes to solving those problems.
Dialogue: 0,0:39:03.46,0:39:06.38,英文,,0,0,0,,Now, the term bug has actually been around for decades.
Dialogue: 0,0:39:06.38,0:39:13.69,英文,,0,0,0,,But a fun story to tell is that the first documented actual bug was actually somehow connected to Harvard.
Dialogue: 0,0:39:13.69,0:39:16.15,英文,,0,0,0,,In fact, this is the logbook.
Dialogue: 0,0:39:16.15,0:39:29.13,英文,,0,0,0,,Relating to the Harvard Mark two computer from 1947, whereby if you read the notes here and I'll zoom in, this was an actual moth discovered inside of this big mainframe computer that was causing some kind of problems.
Dialogue: 0,0:39:29.13,0:39:33.64,英文,,0,0,0,,And the engineers at the time actually thought it was funny that wow, physical bug actually explains the issue.
Dialogue: 0,0:39:33.64,0:39:39.24,英文,,0,0,0,,And it's been forever taped to this sheet of paper, which I believe now is on display in the Smithsonian.
Dialogue: 0,0:39:39.24,0:39:43.24,英文,,0,0,0,,With that said, this is just representative to of a logical bug.
Dialogue: 0,0:39:43.24,0:39:50.52,英文,,0,0,0,,And that story is actually That story was often retold by a famous mathematician, then computer scientist, really, Dr. Grace Hopper,
Dialogue: 0,0:39:50.52,0:39:56.52,英文,,0,0,0,,who actually worked not only on the Harvard Mark II computer, but its predecessor, the Harvard Mark I.
Dialogue: 0,0:39:56.52,0:40:07.52,英文,,0,0,0,,And if you ever spent time yet in the engineering building across the river here, you can actually see much of this computer, which is along the wall when you first walk into the Science and Engineering Complex.
Dialogue: 0,0:40:07.52,0:40:09.52,英文,,0,0,0,,And indeed, as you've probably heard growing up,
Dialogue: 0,0:40:09.52,0:40:10.86,英文,,0,0,0,,This is a mainframe computer.
Dialogue: 0,0:40:10.86,0:40:22.75,英文,,0,0,0,,Like, this is what Macs and PCs, so to speak, looked like back in the day, with very physical things that essentially implemented the zeros and ones that you and I take for granted now being miniaturized in our laptops and phones.
Dialogue: 0,0:40:22.75,0:40:23.89,英文,,0,0,0,,So there's a piece of history there.
Dialogue: 0,0:40:23.89,0:40:27.51,英文,,0,0,0,,If you visit campus, that side of campus sometime, do take a look.
Dialogue: 0,0:40:27.51,0:40:31.61,英文,,0,0,0,,But let's consider, then, how we solve not, of course, physical bugs, but logical bugs.
Dialogue: 0,0:40:31.61,0:40:40.35,英文,,0,0,0,,And let's consider something like this from last week, whereby we were trying very simply to print this column of three bricks using hashtags of sorts.
Dialogue: 0,0:40:40.35,0:40:44.51,英文,,0,0,0,,So let me go over here in just a moment to VS Code.
Dialogue: 0,0:40:44.51,0:40:47.08,英文,,0,0,0,,And I'm going to go ahead and open a program I wrote in advance.
Dialogue: 0,0:40:47.08,0:40:49.28,英文,,0,0,0,,And I'm bringing it to class because there's a bug in it.
Dialogue: 0,0:40:49.28,0:40:51.68,英文,,0,0,0,,And I'd like to figure out how to solve this bug.
Dialogue: 0,0:40:51.68,0:40:56.24,英文,,0,0,0,,So let me open up buggy0.c, which is version 0 of my code.
Dialogue: 0,0:40:56.24,0:40:58.30,英文,,0,0,0,,And let's just take a quick peek at what's here.
Dialogue: 0,0:40:58.30,0:41:01.54,英文,,0,0,0,,It's pretty short, includes only standard io.h.
Dialogue: 0,0:41:01.54,0:41:02.71,英文,,0,0,0,,It uses printf.
Dialogue: 0,0:41:02.71,0:41:03.75,英文,,0,0,0,,It uses a for loop.
Dialogue: 0,0:41:03.75,0:41:07.85,英文,,0,0,0,,And the goal, quite simply, is to print out that column of three bricks.
Dialogue: 0,0:41:07.85,0:41:13.38,英文,,0,0,0,,Now, it's short enough that some of you, if you're getting comfy already with C, you might already see the logical bug.
Dialogue: 0,0:41:13.38,0:41:16.36,英文,,0,0,0,,It's not a syntax error, like it will compile and run.
Dialogue: 0,0:41:16.36,0:41:17.26,英文,,0,0,0,,But there's a bug there.
Dialogue: 0,0:41:17.26,0:41:24.27,英文,,0,0,0,,And suppose that I'm very new to C. I'm very uncomfortable with C. It's 2 AM, and I just can't see the bug.
Dialogue: 0,0:41:24.27,0:41:27.99,英文,,0,0,0,,What are my recourses here for actually finding a mistake like this?
Dialogue: 0,0:41:27.99,0:41:29.41,英文,,0,0,0,,Well, first, let's look at the symptom.
Dialogue: 0,0:41:29.41,0:41:31.89,英文,,0,0,0,,Let me go down to my terminal window.
Dialogue: 0,0:41:31.89,0:41:36.21,英文,,0,0,0,,I'm going to use make buggy 0, because again, the file's called buggy0.c.
Dialogue: 0,0:41:36.21,0:41:37.26,英文,,0,0,0,,I'm not going to use Clang.
Dialogue: 0,0:41:37.26,0:41:39.78,英文,,0,0,0,,In fact, I'm never really going to use Clang manually here and out.
Dialogue: 0,0:41:39.78,0:41:42.60,英文,,0,0,0,,I'm just going to use make, because it makes our lives easier.
Dialogue: 0,0:41:42.60,0:41:44.28,英文,,0,0,0,,It does compile, no errors.
Dialogue: 0,0:41:44.28,0:41:45.38,英文,,0,0,0,,So it's not syntax.
Dialogue: 0,0:41:45.38,0:41:47.84,英文,,0,0,0,,It's not something silly like a missing semicolon.
Dialogue: 0,0:41:47.84,0:41:53.28,英文,,0,0,0,,But when I run dot slash buggy zero, I, of course, see 1, 2, 3, 4.
Dialogue: 0,0:41:53.28,0:41:59.84,英文,,0,0,0,,And this, of course, does not match the 1, 2, 3 bricks that I actually intended for that column.
Dialogue: 0,0:41:59.84,0:42:02.95,英文,,0,0,0,,And yet, I'm starting counting at 0, as I usually do.
Dialogue: 0,0:42:02.95,0:42:03.91,英文,,0,0,0,,I've got 3.
Dialogue: 0,0:42:03.91,0:42:05.31,英文,,0,0,0,,I'm going up to 3.
Dialogue: 0,0:42:05.31,0:42:06.77,英文,,0,0,0,,So where is my logical error?
Dialogue: 0,0:42:06.77,0:42:10.13,英文,,0,0,0,,If it hasn't obviously jumped out at you already, well, how can I solve this?
Dialogue: 0,0:42:10.13,0:42:16.13,英文,,0,0,0,,Well, first and foremost, Perhaps the best technique for solving bugs, at least early on, is just use printf.
Dialogue: 0,0:42:16.13,0:42:20.07,英文,,0,0,0,,Like thus far, we've used printf to say hello and other things on the screen.
Dialogue: 0,0:42:20.07,0:42:22.61,英文,,0,0,0,,But printf is just a function for printing anything.
Dialogue: 0,0:42:22.61,0:42:31.34,英文,,0,0,0,,And there's no reason you can't temporarily use printf to print out the contents of variables, what's going on inside of your program, just to figure out where your mistake is.
Dialogue: 0,0:42:31.34,0:42:32.90,英文,,0,0,0,,And then you can delete that line of code later.
Dialogue: 0,0:42:32.90,0:42:34.72,英文,,0,0,0,,It doesn't have to stay there forever.
Dialogue: 0,0:42:34.72,0:42:35.76,英文,,0,0,0,,So let me do this.
Dialogue: 0,0:42:35.76,0:42:51.71,英文,,0,0,0,,Instead of just printing out in VS code the hash symbol, let me do a little Safety check here and print out the value of I. So let me go ahead and say something like I is now I want to say I is this.
Dialogue: 0,0:42:51.71,0:42:58.75,英文,,0,0,0,,But of course this is not how I print out the value of I. If I want to print out the value of I. What should I put here?
Dialogue: 0,0:42:58.75,0:43:02.12,英文,,0,0,0,,So %i for integer instead of %s for string.
Dialogue: 0,0:43:02.12,0:43:05.04,英文,,0,0,0,,So there's still placeholders, but we use %s for integers.
Dialogue: 0,0:43:05.04,0:43:13.11,英文,,0,0,0,,And now if I want to print out i, I just need the comma as the second argument and then i. All right, let me go ahead and back to my terminal window.
Dialogue: 0,0:43:13.11,0:43:15.95,英文,,0,0,0,,Let me recompile the program because I've changed it.
Dialogue: 0,0:43:15.95,0:43:19.10,英文,,0,0,0,,That still works fine dot slash buggy zero.
Dialogue: 0,0:43:19.10,0:43:22.64,英文,,0,0,0,,And now let me increase the size of my terminal window here.
Dialogue: 0,0:43:22.64,0:43:25.33,英文,,0,0,0,,You just see some diagnostic information, if you will.
Dialogue: 0,0:43:25.33,0:43:26.63,英文,,0,0,0,,Like this is not the goal.
Dialogue: 0,0:43:26.63,0:43:28.97,英文,,0,0,0,,This is not what you should be submitting for this homework problem.
Dialogue: 0,0:43:28.97,0:43:30.25,英文,,0,0,0,,We're at one.
Dialogue: 0,0:43:30.25,0:43:32.41,英文,,0,0,0,,But it is helping us diagnostically know that.
Dialogue: 0,0:43:32.41,0:43:34.56,英文,,0,0,0,,Okay, when I is zero, here's a hash.
Dialogue: 0,0:43:34.56,0:43:36.26,英文,,0,0,0,,When I is one, here's a hash.
Dialogue: 0,0:43:36.26,0:43:37.38,英文,,0,0,0,,When I is two, here's a hash.
Dialogue: 0,0:43:37.38,0:43:39.14,英文,,0,0,0,,When I is three, here's a hash.
Dialogue: 0,0:43:39.14,0:43:39.90,英文,,0,0,0,,Well, wait a minute.
Dialogue: 0,0:43:39.90,0:43:41.70,英文,,0,0,0,,That's 1234.
Dialogue: 0,0:43:41.70,0:43:44.40,英文,,0,0,0,,So clearly I'm printing it one too many times.
Dialogue: 0,0:43:44.40,0:43:56.23,英文,,0,0,0,,So let me look back at the code here by shrinking my terminal window and let me just ask the group where is in fact the mistake or what equivalently would be the solution?
Dialogue: 0,0:43:56.23,0:44:00.11,英文,,0,0,0,,Yeah, in the middle.
Dialogue: 0,0:44:00.11,0:44:03.80,英文,,0,0,0,,Yeah, instead of less than or equal to, use just less than.
Dialogue: 0,0:44:03.80,0:44:05.14,英文,,0,0,0,,So you've got to kind of pick a lane here.
Dialogue: 0,0:44:05.14,0:44:11.14,英文,,0,0,0,,Like, if you're going to start counting from 0, you generally use less than and go up 2, but not through the value.
Dialogue: 0,0:44:11.14,0:44:17.33,英文,,0,0,0,,Or if you prefer, like in the human world, counting from 1 on up, you can use less than or equal to, but you have to be consistent.
Dialogue: 0,0:44:17.33,0:44:22.73,英文,,0,0,0,,And in general, as a programmer, just always start counting from 0 if you're doing something canonical like this.
Dialogue: 0,0:44:22.73,0:44:25.35,英文,,0,0,0,,But the solution is indeed just to change this.
Dialogue: 0,0:44:25.35,0:44:39.22,英文,,0,0,0,,By changing the less than or equal to to less than, if I recompile this program with make buggy 0, and then do dot buggy 0 again, and let me increase the size of my terminal window, now you see, OK, almost the same output.
Dialogue: 0,0:44:39.22,0:44:43.80,英文,,0,0,0,,But indeed, i starts at 0 and goes up 2, but not through.
Dialogue: 0,0:44:43.80,0:44:48.92,英文,,0,0,0,,All right, so printf, in short, should be, can be your first diagnostic tool.
Dialogue: 0,0:44:48.92,0:44:57.41,英文,,0,0,0,,Instead of just staring at the screen or raising your hand, I mean, use printf to see literally what's going on inside of your program by just printing out things of interest.
Dialogue: 0,0:44:57.41,0:45:02.87,英文,,0,0,0,,And then once you've solved the problem, you can go back into your code, as I'll do here, by shrinking my terminal window.
Dialogue: 0,0:45:02.87,0:45:04.63,英文,,0,0,0,,I'll delete the printf line.
Dialogue: 0,0:45:04.63,0:45:09.00,英文,,0,0,0,,And now I'm ready to share this program with the world or submit it as homework or the like.
Dialogue: 0,0:45:09.00,0:45:11.66,英文,,0,0,0,,It's just meant there to be temporary.
Dialogue: 0,0:45:11.66,0:45:12.98,英文,,0,0,0,,Any questions?
Dialogue: 0,0:45:12.98,0:45:18.54,英文,,0,0,0,,on printf as a debugging tool.
Dialogue: 0,0:45:18.54,0:45:20.98,英文,,0,0,0,,All right, well, that only gets us so far.
Dialogue: 0,0:45:20.98,0:45:31.85,英文,,0,0,0,,And honestly, as your programs grow and grow and grow, it's going to actually get really annoying to start going in and adding printfs, then removing them and figuring out if you've got multiple printfs, well, which one printed what?
Dialogue: 0,0:45:31.85,0:45:34.79,英文,,0,0,0,,It just gets messy eventually to rely on printf alone.
Dialogue: 0,0:45:34.79,0:45:41.17,英文,,0,0,0,,So being a computer scientist, computer scientists have written software to make it easier to debug code.
Dialogue: 0,0:45:41.17,0:45:48.68,英文,,0,0,0,,That software is what we would generally call a debugger, which would be the second tool of the trade that you can use to actually solve problems in your code.
Dialogue: 0,0:45:48.68,0:45:52.62,英文,,0,0,0,,Now, in the world of VS Code, there's actually a debugger built in.
Dialogue: 0,0:45:52.62,0:45:56.93,英文,,0,0,0,,So the graphical user interface you're about to see in VS Code isn't specific to CS50.
Dialogue: 0,0:45:56.93,0:46:03.21,英文,,0,0,0,,It actually comes with VS Code, and it supports C and C++ and Java and Python and lots of other languages, too.
Dialogue: 0,0:46:03.21,0:46:04.86,英文,,0,0,0,,But it's admittedly a little
Dialogue: 0,0:46:04.86,0:46:07.62,英文,,0,0,0,,complicated to just start using the debugger.
Dialogue: 0,0:46:07.62,0:46:13.58,英文,,0,0,0,,You have to create a configuration file and do some annoying steps that just get in the way of solving real problems.
Dialogue: 0,0:46:13.58,0:46:17.10,英文,,0,0,0,,So we have automated the process for you of just starting the debugger.
Dialogue: 0,0:46:17.10,0:46:19.73,英文,,0,0,0,,And thereafter, it's sort of industry standard how you use it.
Dialogue: 0,0:46:19.73,0:46:23.47,英文,,0,0,0,,But we save you the headache of having to create those configuration files.
Dialogue: 0,0:46:23.47,0:46:25.33,英文,,0,0,0,,So suppose I want to do this.
Dialogue: 0,0:46:25.33,0:46:30.45,英文,,0,0,0,,Suppose I want to try to debug this program step by step using special software.
Dialogue: 0,0:46:30.45,0:46:31.85,英文,,0,0,0,,Well, how can I do that?
Dialogue: 0,0:46:31.85,0:46:41.80,英文,,0,0,0,,Well, let me propose that if I revert this back to the original version where I was less than or equal to three, I'm pretty sure that I was printing too many hashes.
Dialogue: 0,0:46:41.80,0:46:45.24,英文,,0,0,0,,So I'm gonna do this and you might have done this accidentally or never at all.
Dialogue: 0,0:46:45.24,0:46:47.78,英文,,0,0,0,,But notice if you hover over the gutter,
Dialogue: 0,0:46:47.78,0:46:54.54,英文,,0,0,0,,So to speak, in VS code, the part of it all the way to the left of the editor, you see this sort of grayed out red dot.
Dialogue: 0,0:46:54.54,0:46:57.32,英文,,0,0,0,,If you click there, it becomes a brighter red dot.
Dialogue: 0,0:46:57.32,0:46:59.86,英文,,0,0,0,,And this represents what we're going to call a break point.
Dialogue: 0,0:46:59.86,0:47:03.60,英文,,0,0,0,,And this is just a visual indicator that you've put like a stop sign equivalent there.
Dialogue: 0,0:47:03.60,0:47:07.34,英文,,0,0,0,,And you're telling the debugger in a moment, stop running my code there.
Dialogue: 0,0:47:07.34,0:47:07.96,英文,,0,0,0,,Why?
Dialogue: 0,0:47:07.96,0:47:14.47,英文,,0,0,0,,Because I prefer to step through my code at sort of a human speed and not as computer speed, where it runs all at once.
Dialogue: 0,0:47:14.47,0:47:16.79,英文,,0,0,0,,So I've set my breakpoint, which is step one.
Dialogue: 0,0:47:16.79,0:47:18.57,英文,,0,0,0,,And then step two is quite simply this.
Dialogue: 0,0:47:18.57,0:47:26.30,英文,,0,0,0,,Instead of running the program itself, run a command called debug50 and then .slash buggy0.
Dialogue: 0,0:47:26.30,0:47:39.11,英文,,0,0,0,,And now this will start your program, but inside of the debugger, which is a special program that smart people wrote that will empower you to now step through your code line by line, and again, at your own comfort pace.
Dialogue: 0,0:47:39.11,0:47:40.51,英文,,0,0,0,,I'm going to hit Enter.
Dialogue: 0,0:47:40.51,0:47:41.93,英文,,0,0,0,,Some stuff's going to happen on the screen.
Dialogue: 0,0:47:41.93,0:47:43.17,英文,,0,0,0,,Whoops.
Dialogue: 0,0:47:43.17,0:47:45.85,英文,,0,0,0,,Notice this is a common mistake that I made accidentally here.
Dialogue: 0,0:47:45.85,0:47:47.11,英文,,0,0,0,,Looks like I've changed my code.
Dialogue: 0,0:47:47.11,0:47:49.98,英文,,0,0,0,,I did because I went in and changed the less than or equal to sign.
Dialogue: 0,0:47:49.98,0:47:53.74,英文,,0,0,0,,So let me go ahead and rerun make buggy zero enter.
Dialogue: 0,0:47:53.74,0:47:54.24,英文,,0,0,0,,Good.
Dialogue: 0,0:47:54.24,0:47:57.91,英文,,0,0,0,,Now let me rerun debug 50 enter.
Dialogue: 0,0:47:57.91,0:48:01.67,英文,,0,0,0,,And now some stuff just happened on the screen and it takes a moment to get started.
Dialogue: 0,0:48:01.67,0:48:09.58,英文,,0,0,0,,But once it started, you'll see this, you'll still see your code, but you'll see this yellow highlight, which you've probably not seen before.
Dialogue: 0,0:48:09.58,0:48:13.44,英文,,0,0,0,,And notice that it's specifically highlighting the same line that I said a break point on.
Dialogue: 0,0:48:13.44,0:48:14.08,英文,,0,0,0,,Why?
Dialogue: 0,0:48:14.08,0:48:20.73,英文,,0,0,0,,That just means the program has the debugger has executed all of these lines except for line seven.
Dialogue: 0,0:48:20.73,0:48:25.79,英文,,0,0,0,,It has broken at not in a bad way, but it has paused execution on line seven.
Dialogue: 0,0:48:25.79,0:48:30.47,英文,,0,0,0,,So it hasn't yet printed any hashes and you can You'll see that no hashes in the terminal window yet.
Dialogue: 0,0:48:30.47,0:48:32.21,英文,,0,0,0,,It's paused execution.
Dialogue: 0,0:48:32.21,0:48:37.43,英文,,0,0,0,,But what's interesting with the debugger is the stuff over here on the left hand side.
Dialogue: 0,0:48:37.43,0:48:42.01,英文,,0,0,0,,In the debugger here, you'll see under variables all of your so called local variables.
Dialogue: 0,0:48:42.01,0:48:45.25,英文,,0,0,0,,And we haven't really made a distinction between local and something called global.
Dialogue: 0,0:48:45.25,0:48:49.50,英文,,0,0,0,,But for now, local variables just means all of the variables that exist in your function.
Dialogue: 0,0:48:49.50,0:48:52.20,英文,,0,0,0,,So I currently has a value of zero.
Dialogue: 0,0:48:52.20,0:48:52.42,英文,,0,0,0,,Okay.
Dialogue: 0,0:48:52.42,0:48:53.50,英文,,0,0,0,,And that makes sense.
Dialogue: 0,0:48:53.50,0:48:57.50,英文,,0,0,0,,So now how do I step through my code and see what it's doing?
Dialogue: 0,0:48:57.50,0:49:03.80,英文,,0,0,0,,Well, at the top of the screen here, you'll see some playback icons kind of like a video player, but they have special meaning.
Dialogue: 0,0:49:03.80,0:49:08.20,英文,,0,0,0,,This first one will just play the rest of your program all the way to the end.
Dialogue: 0,0:49:08.20,0:49:13.30,英文,,0,0,0,,So you only click that if you're sort of solved the problem and you just want to run it to completion like before.
Dialogue: 0,0:49:13.30,0:49:16.98,英文,,0,0,0,,But the next three or next two really are really the juiciest.
Dialogue: 0,0:49:16.98,0:49:22.17,英文,,0,0,0,,The second one here, if you hover over it eventually, you'll see that it's called step over.
Dialogue: 0,0:49:22.17,0:49:28.54,英文,,0,0,0,,Step over means that the debugger will run this currently highlighted line of code, but it's not going to dive into it.
Dialogue: 0,0:49:28.54,0:49:32.88,英文,,0,0,0,,So if it's a function like print F, it's not going to start stepping through print F line by line.
Dialogue: 0,0:49:32.88,0:49:33.14,英文,,0,0,0,,Why?
Dialogue: 0,0:49:33.14,0:49:36.55,英文,,0,0,0,,Because I can pretty much assume print F written decades ago is correct.
Dialogue: 0,0:49:36.55,0:49:38.15,英文,,0,0,0,,Problems probably with me.
Dialogue: 0,0:49:38.15,0:49:54.20,英文,,0,0,0,,But this next line, if I did really want to step into the print F code to figure out how it works or find some problem in it all these years later, you can step into print F and then the screen would change and you'd see each of the lines for print F line by line, at least if you have the source code for print F installed.
Dialogue: 0,0:49:54.20,0:50:03.10,英文,,0,0,0,,All right, I'm gonna use the first one step over and watch as the yellow highlight moves and watch as in the terminal window there's a hash symbol.
Dialogue: 0,0:50:03.10,0:50:03.94,英文,,0,0,0,,Here we go.
Dialogue: 0,0:50:03.94,0:50:05.32,英文,,0,0,0,,There's one hash.
Dialogue: 0,0:50:05.32,0:50:07.22,英文,,0,0,0,,Now notice line five is highlighted.
Dialogue: 0,0:50:07.22,0:50:09.46,英文,,0,0,0,,That means it has paused on line five.
Dialogue: 0,0:50:09.46,0:50:11.24,英文,,0,0,0,,Line five has not yet been executed.
Dialogue: 0,0:50:11.24,0:50:12.70,英文,,0,0,0,,So what does that mean?
Dialogue: 0,0:50:12.70,0:50:16.50,英文,,0,0,0,,The value of I per the top left hand corner is still zero.
Dialogue: 0,0:50:16.50,0:50:24.64,英文,,0,0,0,,But as soon as I click step over again, watch what happens at the top left where I is a variable on the screen.
Dialogue: 0,0:50:24.64,0:50:28.12,英文,,0,0,0,,Now i, and it flashed briefly, has a value of 1.
Dialogue: 0,0:50:28.12,0:50:30.78,英文,,0,0,0,,And now if I step over again, watch the terminal window.
Dialogue: 0,0:50:30.78,0:50:32.29,英文,,0,0,0,,There's my second hash.
Dialogue: 0,0:50:32.29,0:50:34.65,英文,,0,0,0,,Now let me click Step Over on the for loop.
Dialogue: 0,0:50:34.65,0:50:36.61,英文,,0,0,0,,Watch the variable at top left.
Dialogue: 0,0:50:36.61,0:50:38.41,英文,,0,0,0,,Now 1 goes to 2.
Dialogue: 0,0:50:38.41,0:50:39.83,英文,,0,0,0,,Now let me click it again.
Dialogue: 0,0:50:39.83,0:50:40.63,英文,,0,0,0,,Third hash.
Dialogue: 0,0:50:40.63,0:50:43.33,英文,,0,0,0,,And here's where the logical error is perhaps revealed.
Dialogue: 0,0:50:43.33,0:50:45.15,英文,,0,0,0,,Let me go ahead and step over the loop.
Dialogue: 0,0:50:45.15,0:50:46.51,英文,,0,0,0,,Now i is 3.
Dialogue: 0,0:50:46.51,0:50:47.02,英文,,0,0,0,,Wait a minute.
Dialogue: 0,0:50:47.02,0:50:49.26,英文,,0,0,0,,I'm still going to print out a hash.
Dialogue: 0,0:50:49.26,0:50:49.84,英文,,0,0,0,,There it is.
Dialogue: 0,0:50:49.84,0:50:50.78,英文,,0,0,0,,There's the fourth hash.
Dialogue: 0,0:50:50.78,0:50:53.30,英文,,0,0,0,,And at this point, hopefully the light bulb proverbially has gone off.
Dialogue: 0,0:50:53.30,0:50:55.10,英文,,0,0,0,,I realized, oh, I screwed up.
Dialogue: 0,0:50:55.10,0:51:03.23,英文,,0,0,0,,I can either stop the program altogether with the red square or I can just let it run all the way to the end, which just terminates everything at this point.
Dialogue: 0,0:51:03.23,0:51:05.67,英文,,0,0,0,,I just want to get back into my code and start fixing things.
Dialogue: 0,0:51:05.67,0:51:10.94,英文,,0,0,0,,And you can close, for instance, as I will hear the file Explorer just to hide the panel that open.
Dialogue: 0,0:51:10.94,0:51:12.34,英文,,0,0,0,,So that's debug 50.
Dialogue: 0,0:51:12.34,0:51:19.65,英文,,0,0,0,,But it's not a CS 50 thing that just starts the debugger for you, which is something you'd find in most any programming environment nowadays.
Dialogue: 0,0:51:19.65,0:51:24.13,英文,,0,0,0,,Questions on debugging questions.
Dialogue: 0,0:51:24.13,0:51:27.91,英文,,0,0,0,,Yeah.
Dialogue: 0,0:51:27.91,0:51:28.39,英文,,0,0,0,,Good question.
Dialogue: 0,0:51:28.39,0:51:30.31,英文,,0,0,0,,Where does it tell you where it went wrong?
Dialogue: 0,0:51:30.31,0:51:33.17,英文,,0,0,0,,So sadly, it does not tell you any of that.
Dialogue: 0,0:51:33.17,0:51:39.75,英文,,0,0,0,,The onus is still on you, the human to use this tool productively to walk through your code at a saner pace.
Dialogue: 0,0:51:39.75,0:51:42.11,英文,,0,0,0,,But your brain is the one that still needs to solve it.
Dialogue: 0,0:51:42.11,0:51:49.05,英文,,0,0,0,,And I don't doubt down the line with artificial intelligence and more programs like this will get all the more helpful and start answering questions like that for us.
Dialogue: 0,0:51:49.05,0:51:52.99,英文,,0,0,0,,And there are other tools will introduce you this semester that are even more powerful than this.
Dialogue: 0,0:51:52.99,0:51:53.87,英文,,0,0,0,,But for now,
Dialogue: 0,0:51:53.87,0:51:57.84,英文,,0,0,0,,It's just a tool really to slow things down and not have to change your code.
Dialogue: 0,0:51:57.84,0:52:06.93,英文,,0,0,0,,The fact that I had that panel on the left that just showed me eyes changing value is just an alternative to print F and I can step through it a little more slowly.
Dialogue: 0,0:52:06.93,0:52:11.14,英文,,0,0,0,,Other questions on debugging.
Dialogue: 0,0:52:11.14,0:52:15.06,英文,,0,0,0,,Let me show you one final example with this debugger here.
Dialogue: 0,0:52:15.06,0:52:16.74,英文,,0,0,0,,And this one, too, I wrote in advance.
Dialogue: 0,0:52:16.74,0:52:22.53,英文,,0,0,0,,Let me close buggy0.c, and let me open up buggy1.c, my second version thereof.
Dialogue: 0,0:52:22.53,0:52:28.19,英文,,0,0,0,,Let me close my terminal window for a second and give you a quick tour of this program, which similarly has a mistake.
Dialogue: 0,0:52:28.19,0:52:33.03,英文,,0,0,0,,Now, at the top of this program, some familiar includes cs50.h and standardio.h.
Dialogue: 0,0:52:33.03,0:52:34.65,英文,,0,0,0,,This is not something we've seen before.
Dialogue: 0,0:52:34.65,0:52:38.90,英文,,0,0,0,,It's specific to this example, a function called get negative int.
Dialogue: 0,0:52:38.90,0:52:41.14,英文,,0,0,0,,Takes no arguments and it returns an integer.
Dialogue: 0,0:52:41.14,0:52:41.72,英文,,0,0,0,,What does it do?
Dialogue: 0,0:52:41.72,0:52:45.22,英文,,0,0,0,,It literally gets a negative integer, ideally from the user.
Dialogue: 0,0:52:45.22,0:52:47.18,英文,,0,0,0,,Fun fact though, it doesn't correctly.
Dialogue: 0,0:52:47.18,0:52:47.88,英文,,0,0,0,,That's the bug.
Dialogue: 0,0:52:47.88,0:52:50.20,英文,,0,0,0,,Get negative int is broken at the moment.
Dialogue: 0,0:52:50.20,0:52:51.44,英文,,0,0,0,,So what is main do?
Dialogue: 0,0:52:51.44,0:53:00.19,英文,,0,0,0,,Well, main just calls this function passing in nothing in parentheses, no inputs and stores the return value in I and then it just prints out I on the screen.
Dialogue: 0,0:53:00.19,0:53:06.36,英文,,0,0,0,,So honestly, just by eyeballing this, you know, I feel comfortable enough with programming and see, I think main is correct.
Dialogue: 0,0:53:06.36,0:53:09.64,英文,,0,0,0,,Let me just stipulate main is correct, but there is going to be a bug down here.
Dialogue: 0,0:53:09.64,0:53:11.24,英文,,0,0,0,,Now, what's the bug down here?
Dialogue: 0,0:53:11.24,0:53:14.88,英文,,0,0,0,,Well, let me look at get negative in implementation.
Dialogue: 0,0:53:14.88,0:53:19.20,英文,,0,0,0,,Notice this first line 12 is identical to the prototype up here.
Dialogue: 0,0:53:19.20,0:53:25.29,英文,,0,0,0,,The prototype is sort of stupidly required up here because C reads things top to bottom, left to right.
Dialogue: 0,0:53:25.29,0:53:26.61,英文,,0,0,0,,The compiler technically does.
Dialogue: 0,0:53:26.61,0:53:36.88,英文,,0,0,0,,So if you reference get negative in here, but you don't implement it until down here and you haven't told C in advance that it will exist again, you get the error we saw last week.
Dialogue: 0,0:53:36.88,0:53:39.18,英文,,0,0,0,,All right, so how does getNegativeInt work?
Dialogue: 0,0:53:39.18,0:53:43.65,英文,,0,0,0,,We declare a variable called n. We've got a do while loop that does what?
Dialogue: 0,0:53:43.65,0:53:47.27,英文,,0,0,0,,It uses getInt, which comes with the CS50 library, per last week.
Dialogue: 0,0:53:47.27,0:53:51.82,英文,,0,0,0,,It prompts the user for negative integer, quote unquote, and stores the value in n.
Dialogue: 0,0:53:51.82,0:53:56.61,英文,,0,0,0,,I then do all of this while n is less than zero.
Dialogue: 0,0:53:56.61,0:53:56.83,英文,,0,0,0,,Right.
Dialogue: 0,0:53:56.83,0:54:05.07,英文,,0,0,0,,Remember, we used to do while loop last week to make sure the human cooperates and doesn't give us the wrong type of value, be a positive or negative or something else.
Dialogue: 0,0:54:05.07,0:54:07.65,英文,,0,0,0,,And then we return n. And there's some subtleties.
Dialogue: 0,0:54:07.65,0:54:15.87,英文,,0,0,0,,Anyone recall or have an intuition for why I've declared an online 14 instead of online 17.
Dialogue: 0,0:54:15.87,0:54:23.80,英文,,0,0,0,,This is a C specific thing.
Dialogue: 0,0:54:23.80,0:54:25.89,英文,,0,0,0,,Exactly, there's this notion of scopency.
Dialogue: 0,0:54:25.89,0:54:33.61,英文,,0,0,0,,And we'll continue to see this over time, whereby a variable only exists inside of the most recent curly braces that you've opened.
Dialogue: 0,0:54:33.61,0:54:41.02,英文,,0,0,0,,So if I've declared n here on line 14, I can use it anywhere between lines 13 and 21, because those are the nearest curly braces.
Dialogue: 0,0:54:41.02,0:54:49.37,英文,,0,0,0,,If by contrast, as you note, if I instead said this int n equals get int and so forth and didn't have the current line 14.
Dialogue: 0,0:54:49.37,0:54:55.25,英文,,0,0,0,,Well, n would exist inside of these curly braces, but not here, which is too late and definitely not here.
Dialogue: 0,0:54:55.25,0:54:59.58,英文,,0,0,0,,So you just have to declare it first and then use and reuse it as such.
Dialogue: 0,0:54:59.58,0:55:01.66,英文,,0,0,0,,Now let me just show you how I can debug this.
Dialogue: 0,0:55:01.66,0:55:03.10,英文,,0,0,0,,But let me show you the symptoms first.
Dialogue: 0,0:55:03.10,0:55:04.98,英文,,0,0,0,,Let me open my terminal window.
Dialogue: 0,0:55:04.98,0:55:07.72,英文,,0,0,0,,Let me run make buggy one compiles.
Dialogue: 0,0:55:07.72,0:55:11.91,英文,,0,0,0,,Okay, so it's not something silly like a semicolon dot slash buggy one.
Dialogue: 0,0:55:11.91,0:55:13.63,英文,,0,0,0,,And I'm asked for negative integer.
Dialogue: 0,0:55:13.63,0:55:15.45,英文,,0,0,0,,All right, let me give it negative one.
Dialogue: 0,0:55:15.45,0:55:16.85,英文,,0,0,0,,Enter.
Dialogue: 0,0:55:16.85,0:55:20.86,英文,,0,0,0,,Well, the main function is supposed to print out what I typed, but it clearly didn't.
Dialogue: 0,0:55:20.86,0:55:21.74,英文,,0,0,0,,It's prompting me again.
Dialogue: 0,0:55:21.74,0:55:24.10,英文,,0,0,0,,All right, so maybe it'll like negative two.
Dialogue: 0,0:55:24.10,0:55:26.81,英文,,0,0,0,,No, maybe negative three.
Dialogue: 0,0:55:26.81,0:55:29.15,英文,,0,0,0,,50 OK, so it's definitely broken, right?
Dialogue: 0,0:55:29.15,0:55:31.66,英文,,0,0,0,,It kind of seems logically to be doing the opposite.
Dialogue: 0,0:55:31.66,0:55:33.70,英文,,0,0,0,,Now you can perhaps see why this is happening already.
Dialogue: 0,0:55:33.70,0:55:37.34,英文,,0,0,0,,These air deliberately simple programs by for demonstration sake.
Dialogue: 0,0:55:37.34,0:55:38.50,英文,,0,0,0,,But let's do this.
Dialogue: 0,0:55:38.50,0:55:45.17,英文,,0,0,0,,Let me go ahead and set a break point in Maine, even though I'm pretty sure Maine is correct, but it just helps me start my thought process.
Dialogue: 0,0:55:45.17,0:55:47.13,英文,,0,0,0,,Start with Maine and then take it from there.
Dialogue: 0,0:55:47.13,0:55:53.11,英文,,0,0,0,,Let me run now debug 50 dot slash buggy one enter.
Dialogue: 0,0:55:53.11,0:55:56.89,英文,,0,0,0,,And let's see, with that breakpoint now, the GUI is going to reconfigure itself.
Dialogue: 0,0:55:56.89,0:56:01.41,英文,,0,0,0,,It's going to pause on line 8, because that's the first interesting line inside of main.
Dialogue: 0,0:56:01.41,0:56:03.77,英文,,0,0,0,,So I could have just put the breakpoint on line 8, too.
Dialogue: 0,0:56:03.77,0:56:09.78,英文,,0,0,0,,It's smart enough to know that if I set it on 6, eh, you really mean line 8, because that's the first actual line of code.
Dialogue: 0,0:56:09.78,0:56:11.44,英文,,0,0,0,,And watch now what happens.
Dialogue: 0,0:56:11.44,0:56:18.12,英文,,0,0,0,,If I step over this line, notice that i, which at the moment seems to have a default value of 0.
Dialogue: 0,0:56:18.12,0:56:19.64,英文,,0,0,0,,More on that another time.
Dialogue: 0,0:56:19.64,0:56:22.22,英文,,0,0,0,,But if I click Step Over,
Dialogue: 0,0:56:22.22,0:56:24.80,英文,,0,0,0,,Like before, I'm prompted for a negative integer.
Dialogue: 0,0:56:24.80,0:56:32.53,英文,,0,0,0,,Let me type negative one enter and now notice there's no additional yellow highlight.
Dialogue: 0,0:56:32.53,0:56:32.99,英文,,0,0,0,,Why?
Dialogue: 0,0:56:32.99,0:56:34.29,英文,,0,0,0,,Where am I currently stuck?
Dialogue: 0,0:56:34.29,0:56:38.19,英文,,0,0,0,,Logically.
Dialogue: 0,0:56:38.19,0:56:40.77,英文,,0,0,0,,Yeah, just logically, I must be in that do while loop.
Dialogue: 0,0:56:40.77,0:56:43.56,英文,,0,0,0,,And even if you don't understand it, that's the only explanation.
Dialogue: 0,0:56:43.56,0:56:46.16,英文,,0,0,0,,If you keep getting prompted, surely there's a loop going on.
Dialogue: 0,0:56:46.16,0:56:49.18,英文,,0,0,0,,There's only one loop in my code, so there's probably a problem there.
Dialogue: 0,0:56:49.18,0:56:52.79,英文,,0,0,0,,So OK, I can't just set a breakpoint in main and then wait for this to work.
Dialogue: 0,0:56:52.79,0:56:56.57,英文,,0,0,0,,So let me stop this with the red square.
Dialogue: 0,0:56:56.57,0:56:57.55,英文,,0,0,0,,And let me think.
Dialogue: 0,0:56:57.55,0:56:57.91,英文,,0,0,0,,All right.
Dialogue: 0,0:56:57.91,0:57:05.38,英文,,0,0,0,,Instead of I can still set my break point in Maine, but let me rerun the debugger instead in this time, not step over that line of code.
Dialogue: 0,0:57:05.38,0:57:08.02,英文,,0,0,0,,Let me step into that line of code.
Dialogue: 0,0:57:08.02,0:57:09.26,英文,,0,0,0,,So watch what happens now.
Dialogue: 0,0:57:09.26,0:57:18.16,英文,,0,0,0,,Instead of clicking the second icon here, let me click the third, whose name is indeed step into and watch as the yellow highlight does not move to line nine.
Dialogue: 0,0:57:18.16,0:57:25.26,英文,,0,0,0,,It dives into line eight, the function on line eight, thereby bringing me, whoosh, down to line 17.
Dialogue: 0,0:57:25.26,0:57:28.32,英文,,0,0,0,,It's kind of going down into that next function.
Dialogue: 0,0:57:28.32,0:57:34.47,英文,,0,0,0,,Now, it didn't bother pausing on line 12 or 13 or 14, because there's nothing intellectually interesting there happening yet.
Dialogue: 0,0:57:34.47,0:57:37.11,英文,,0,0,0,,The juicy part really starts, it would seem, in line 17.
Dialogue: 0,0:57:37.11,0:57:41.23,英文,,0,0,0,,So now notice, n is my variable at the top left.
Dialogue: 0,0:57:41.23,0:57:46.04,英文,,0,0,0,,If I click, I don't want to click Step Into now, though.
Dialogue: 0,0:57:46.04,0:57:48.10,英文,,0,0,0,,What would go wrong if I click on Step Into?
Dialogue: 0,0:57:48.10,0:57:52.57,英文,,0,0,0,,Or what would it do that I don't think I want to do?
Dialogue: 0,0:57:52.57,0:57:55.01,英文,,0,0,0,,Yeah.
Dialogue: 0,0:57:55.01,0:57:56.65,英文,,0,0,0,,Yeah, it would step into Get Int.
Dialogue: 0,0:57:56.65,0:57:59.75,英文,,0,0,0,,But I'd like to think that the staff's version of Get Int is correct.
Dialogue: 0,0:57:59.75,0:58:00.87,英文,,0,0,0,,And that's not our problem today.
Dialogue: 0,0:58:00.87,0:58:02.28,英文,,0,0,0,,So I want to step over it.
Dialogue: 0,0:58:02.28,0:58:10.84,英文,,0,0,0,,And watch now at top left that nothing happens yet to the value of n until I go to the terminal window now and type in something like negative 1.
Dialogue: 0,0:58:10.84,0:58:11.98,英文,,0,0,0,,Now notice.
Dialogue: 0,0:58:11.98,0:58:14.69,英文,,0,0,0,,It jumps to line 19, which is the next interesting line.
Dialogue: 0,0:58:14.69,0:58:17.37,英文,,0,0,0,,Top left, n indeed is negative 1.
Dialogue: 0,0:58:17.37,0:58:25.32,英文,,0,0,0,,And here's where I can now pause as a human and think, all right, so while n is less than 0, n per the top left corner is negative 1.
Dialogue: 0,0:58:25.32,0:58:29.78,英文,,0,0,0,,So while negative 1 is less than 0, well, obviously that's true mathematically.
Dialogue: 0,0:58:29.78,0:58:31.08,英文,,0,0,0,,So what's going to happen?
Dialogue: 0,0:58:31.08,0:58:32.06,英文,,0,0,0,,It's a do while loop.
Dialogue: 0,0:58:32.06,0:58:35.49,英文,,0,0,0,,So when I click on Step Over again,
Dialogue: 0,0:58:35.49,0:58:39.62,英文,,0,0,0,,It's gonna go to this line because it's at the end of the inside of that loop.
Dialogue: 0,0:58:39.62,0:58:42.70,英文,,0,0,0,,And now here it's looping through again and again.
Dialogue: 0,0:58:42.70,0:58:44.30,英文,,0,0,0,,All right, let me do this once more.
Dialogue: 0,0:58:44.30,0:58:45.74,英文,,0,0,0,,I'm gonna step over.
Dialogue: 0,0:58:45.74,0:58:48.71,英文,,0,0,0,,All right, I'm gonna type in negative two and it's the exact same thing.
Dialogue: 0,0:58:48.71,0:58:50.37,英文,,0,0,0,,Now is my chance on the yellow line.
Dialogue: 0,0:58:50.37,0:58:51.31,英文,,0,0,0,,Okay, wait a minute.
Dialogue: 0,0:58:51.31,0:58:53.57,英文,,0,0,0,,Negative two is obviously less than zero.
Dialogue: 0,0:58:53.57,0:58:56.05,英文,,0,0,0,,Let me try this one more time.
Dialogue: 0,0:58:56.05,0:58:57.13,英文,,0,0,0,,Click it once here.
Dialogue: 0,0:58:57.13,0:58:59.25,英文,,0,0,0,,And now, all right, let me give it 50.
Dialogue: 0,0:58:59.25,0:59:05.06,英文,,0,0,0,,And now, OK, while 50 is less than 0, that's not true.
Dialogue: 0,0:59:05.06,0:59:08.96,英文,,0,0,0,,So the loop is over, because it's not going to do it while 50 is less than 0.
Dialogue: 0,0:59:08.96,0:59:09.66,英文,,0,0,0,,That's not true.
Dialogue: 0,0:59:09.66,0:59:12.48,英文,,0,0,0,,So now watch when I click Step Over once more.
Dialogue: 0,0:59:12.48,0:59:15.91,英文,,0,0,0,,It then finishes the loop, even though there's nothing more to do.
Dialogue: 0,0:59:15.91,0:59:21.49,英文,,0,0,0,,It's now about to return n. It jumps back up to main where I left off on line nine.
Dialogue: 0,0:59:21.49,0:59:23.85,英文,,0,0,0,,It now prints in my terminal window the number 50.
Dialogue: 0,0:59:23.85,0:59:28.41,英文,,0,0,0,,And hopefully at this point to your question earlier, my human brain has realized, oh, I'm an idiot.
Dialogue: 0,0:59:28.41,0:59:30.61,英文,,0,0,0,,Like I flipped my my sign there.
Dialogue: 0,0:59:30.61,0:59:32.67,英文,,0,0,0,,So I probably let me stop this.
Dialogue: 0,0:59:32.67,0:59:34.73,英文,,0,0,0,,I probably want to do something like this.
Dialogue: 0,0:59:34.73,0:59:45.22,英文,,0,0,0,,If the goal is to get a negative integer, I probably want to say, while n Is, for instance, greater than or equal to zero would work.
Dialogue: 0,0:59:45.22,0:59:48.70,英文,,0,0,0,,So while N is greater than or equal to zero, keep doing this.
Dialogue: 0,0:59:48.70,0:59:50.42,英文,,0,0,0,,And that's the logic I wanted to express.
Dialogue: 0,0:59:50.42,0:59:58.81,英文,,0,0,0,,So the debugger just saves me from staring at the screen, raising a hand, sort of asking someone else, at least in this case, it allows me to go through it at a healthier pace.
Dialogue: 0,0:59:58.81,1:00:07.78,英文,,0,0,0,,Questions now on debug 50, which should be your new friend, even if it's not your first instinct after print death.
Dialogue: 0,1:00:07.78,1:00:09.26,英文,,0,0,0,,Any questions on debug 50?
Dialogue: 0,1:00:09.26,1:00:09.84,英文,,0,0,0,,No?
Dialogue: 0,1:00:09.84,1:00:10.56,英文,,0,0,0,,All right.
Dialogue: 0,1:00:10.56,1:00:14.06,英文,,0,0,0,,Well, there's one last technique we can equip you with here.
Dialogue: 0,1:00:14.06,1:00:22.71,英文,,0,0,0,,And that is, in addition to printf and a debugger, no joke, a rubber duck is actually a reasonably recommended solution to finding bugs in your code.
Dialogue: 0,1:00:22.71,1:00:26.37,英文,,0,0,0,,To your question earlier, the duck2 is not going to solve the problem for you.
Dialogue: 0,1:00:26.37,1:00:30.49,英文,,0,0,0,,But if you've wondered why this little guy has been here for so long, there's this technique.
Dialogue: 0,1:00:30.49,1:00:35.76,英文,,0,0,0,,It has its own Wikipedia article called Rubber Duck Debugging, the idea of which is that
Dialogue: 0,1:00:35.76,1:00:51.49,英文,,0,0,0,,If you're home in your dorm room wrestling with some bug in your code, printf didn't quite reveal the source to you, debugger isn't really helping, honestly, maybe it would help to just sound out what problem you're having, similar to going to office hours, talking to a TA or a professor, just walking through your problems.
Dialogue: 0,1:00:51.49,1:00:59.29,英文,,0,0,0,,Because in sort of talking to the duck about the fact that you're doing this while n is less than 0.
Dialogue: 0,1:00:59.29,1:01:02.49,英文,,0,0,0,,And then if it is, wait a minute, I'm an idiot.
Dialogue: 0,1:01:02.49,1:01:03.79,英文,,0,0,0,,Not just for talking to the rubber duck.
Dialogue: 0,1:01:03.79,1:01:11.86,英文,,0,0,0,,You realize, hopefully, in expressing yourself literally, verbally, you probably will hear, with non-zero probability, some illogic in your statement.
Dialogue: 0,1:01:11.86,1:01:16.38,英文,,0,0,0,,And just by sounding things out, you'll realize, oh, that's my problem.
Dialogue: 0,1:01:16.38,1:01:19.84,英文,,0,0,0,,And so frankly, if you have roommates, you can also use a roommate for this.
Dialogue: 0,1:01:19.84,1:01:28.33,英文,,0,0,0,,But the rubber duck is just sort of a go to when your roommates have no interest in your C problem set, talking something through that as such.
Dialogue: 0,1:01:28.33,1:01:30.15,英文,,0,0,0,,And this is an invaluable technique.
Dialogue: 0,1:01:30.15,1:01:34.67,英文,,0,0,0,,I admittedly tend not to do it so much with a rubber duck, but ideally with colleagues, human colleagues.
Dialogue: 0,1:01:34.67,1:01:40.43,英文,,0,0,0,,But just talking through things often will help you just realize, oh, I said something illogical.
Dialogue: 0,1:01:40.43,1:01:41.87,英文,,0,0,0,,Now I can go back to the code.
Dialogue: 0,1:01:41.87,1:01:46.23,英文,,0,0,0,,So don't Solve problems by staring at your screen endlessly for minutes, for hours.
Dialogue: 0,1:01:46.23,1:01:53.04,英文,,0,0,0,,At that point, it's time for a break, time to walk away, time to talk to the duck if you've already exhausted some of those other tools.
Dialogue: 0,1:01:53.04,1:01:58.94,英文,,0,0,0,,As an aside, on your way out today at the end of class, we have clearly plenty of rubber ducks for you.
Dialogue: 0,1:01:58.94,1:02:05.76,英文,,0,0,0,,And it's become a thing over the years, at least among some, to bring the duck with them when they travel and send us photos.
Dialogue: 0,1:02:05.76,1:02:09.85,英文,,0,0,0,,Here, for instance, is CS50's Rubber Duck Debugger, a.k.a.
Dialogue: 0,1:02:09.85,1:02:18.80,英文,,0,0,0,,DDB for Duck Debugger, which is a pun on a geekier program called GDB, the GNU Debugger, which is an actual piece of software for debugging.
Dialogue: 0,1:02:18.80,1:02:25.34,英文,,0,0,0,,This is CS50's debugger in the hills of Puerto Rico, also here on the sea.
Dialogue: 0,1:02:25.34,1:02:31.71,英文,,0,0,0,,He made its way to San Francisco here, also down by Fisherman's Wharf by the sea lions, if familiar.
Dialogue: 0,1:02:31.71,1:02:39.06,英文,,0,0,0,,Here at Stanford, where there's a William Gates computer science building for computer science, down the road in SF at Google.
Dialogue: 0,1:02:39.06,1:02:41.90,英文,,0,0,0,,And this is the Trevi Fountain in Rome.
Dialogue: 0,1:02:41.90,1:02:43.80,英文,,0,0,0,,And lastly, the Coliseum.
Dialogue: 0,1:02:43.80,1:02:47.19,英文,,0,0,0,,So we'll be curious to see in the coming years where your duck to travels.
Dialogue: 0,1:02:47.19,1:02:49.25,英文,,0,0,0,,So that then was quite a bit.
Dialogue: 0,1:02:49.25,1:02:51.89,英文,,0,0,0,,Why don't we go ahead here and take a short five minute break?
Dialogue: 0,1:02:51.89,1:02:52.66,英文,,0,0,0,,No snacks yet.
Dialogue: 0,1:02:52.66,1:02:54.42,英文,,0,0,0,,You're welcome to get up or sit down.
Dialogue: 0,1:02:54.42,1:02:57.18,英文,,0,0,0,,We'll return in about five.
Dialogue: 0,1:02:57.18,1:02:58.52,英文,,0,0,0,,All right.
Dialogue: 0,1:02:58.52,1:03:00.06,英文,,0,0,0,,So we are back.
Dialogue: 0,1:03:00.06,1:03:17.27,英文,,0,0,0,,And if the goal ultimately today is to have a better understanding of things like strings so that we can solve problems with text, let's consider some simpler types of data first, how we might represent those, and then see if that doesn't lead us to a discovery as to how strings in just today's modern software is using things like that.
Dialogue: 0,1:03:17.27,1:03:27.78,英文,,0,0,0,,So when we talked on week zero about representation of data, we had different ways of doing it in terms of binary and decimal and unary even.
Dialogue: 0,1:03:27.78,1:03:34.09,英文,,0,0,0,,When we started talking about the same last week in code, we started talking about data types instead.
Dialogue: 0,1:03:34.09,1:03:38.59,英文,,0,0,0,,And these data types were a way of telling the computer, like, do you want an integer?
Dialogue: 0,1:03:38.59,1:03:39.99,英文,,0,0,0,,Do you want a character?
Dialogue: 0,1:03:39.99,1:03:45.26,英文,,0,0,0,,Do you want a floating point value, like a real number, or even a string, as we've seen?
Dialogue: 0,1:03:45.26,1:03:48.88,英文,,0,0,0,,But it turns out that computers, of course, only have finite
Dialogue: 0,1:03:48.88,1:03:55.83,英文,,0,0,0,,So let's take a look at some of the data types that we've seen thus far.
Dialogue: 0,1:03:55.83,1:03:59.80,英文,,0,0,0,,So for instance, here are some of the data types we've seen thus far.
Dialogue: 0,1:03:59.80,1:04:04.80,英文,,0,0,0,,And it turns out that each of these in C has a specific number of bits.
Dialogue: 0,1:04:04.80,1:04:25.22,英文,,0,0,0,,All right, let's go ahead and get started.
Dialogue: 0,1:04:25.22,1:04:34.10,英文,,0,0,0,,Which is true or false somewhat curiously uses a whole bite, even though that's way overkill because for a bull true or false, you, of course, only need one bit.
Dialogue: 0,1:04:34.10,1:04:41.22,英文,,0,0,0,,But it turns out, even though it's wasteful to use eight bits or one bite just to represent true or false, it's just easier for computers.
Dialogue: 0,1:04:41.22,1:04:47.61,英文,,0,0,0,,So a bull tends to be one bite an inch, which we've been using a lot, uses four bites typically or 32 bits.
Dialogue: 0,1:04:47.61,1:04:49.65,英文,,0,0,0,,And if I do some quick math from week zero,
Dialogue: 0,1:04:49.65,1:04:54.19,英文,,0,0,0,,With 32 bits, you have 4 billion possible values, roughly.
Dialogue: 0,1:04:54.19,1:05:01.03,英文,,0,0,0,,But if you want to represent positive and negative, that means you can represent roughly negative 2 billion all the way up to positive 2 billion.
Dialogue: 0,1:05:01.03,1:05:02.94,英文,,0,0,0,,So that's the range typically with ints.
Dialogue: 0,1:05:02.94,1:05:06.88,英文,,0,0,0,,If that's too few numbers for you, turns out there's things called longs.
Dialogue: 0,1:05:06.88,1:05:15.92,英文,,0,0,0,,And longs use 64 bits, which allow you to have a quintillion number of possibilities, which is a lot, certainly a lot more than 4 billion.
Dialogue: 0,1:05:15.92,1:05:17.42,英文,,0,0,0,,So sometimes you might use a long.
Dialogue: 0,1:05:17.42,1:05:18.86,英文,,0,0,0,,But even that's finite.
Dialogue: 0,1:05:18.86,1:05:28.45,英文,,0,0,0,,And so, as we discussed at the end of last week, bad things can happen if you make certain assumptions as the data because of things like integer overflow or the like, where things wrap around.
Dialogue: 0,1:05:28.45,1:05:31.42,英文,,0,0,0,,Then there's a float, which is a real number, something with a decimal point.
Dialogue: 0,1:05:31.42,1:05:34.88,英文,,0,0,0,,By convention, it's 4 bytes or 32 bits.
Dialogue: 0,1:05:34.88,1:05:37.78,英文,,0,0,0,,Which gives you, in short, only a specific amount of precision.
Dialogue: 0,1:05:37.78,1:05:41.60,英文,,0,0,0,,It doesn't necessarily dictate how many numbers to the left or to the right.
Dialogue: 0,1:05:41.60,1:05:47.75,英文,,0,0,0,,In the aggregate, ultimately, you have, though, four billion possible permutations still.
Dialogue: 0,1:05:47.75,1:05:54.05,英文,,0,0,0,,If you need more precision for scientific, for medical, for financial applications, you might use eight bytes, a.k.a.
Dialogue: 0,1:05:54.05,1:05:57.72,英文,,0,0,0,,a double, which just gives you more digits of precision.
Dialogue: 0,1:05:57.72,1:06:01.50,英文,,0,0,0,,They eventually get imprecise, per the example we looked at last week.
Dialogue: 0,1:06:01.50,1:06:03.78,英文,,0,0,0,,But it at least gets you further down the line.
Dialogue: 0,1:06:03.78,1:06:12.79,英文,,0,0,0,,As an aside in really, really important applications in finance and medicine and military operations and the like where you really can't have rounding errors.
Dialogue: 0,1:06:12.79,1:06:19.46,英文,,0,0,0,,Long story short, humans have developed libraries in C and other languages that use more even than eight bytes.
Dialogue: 0,1:06:19.46,1:06:22.14,英文,,0,0,0,,So there are solutions to these problems, but they're always finite.
Dialogue: 0,1:06:22.14,1:06:24.22,英文,,0,0,0,,You have to pick an upper bound.
Dialogue: 0,1:06:24.22,1:06:30.14,英文,,0,0,0,,Then there's char, which we saw briefly last week when I asked the user for y or n, for yes or no.
Dialogue: 0,1:06:30.14,1:06:34.48,英文,,0,0,0,,And then there's string, which I'm going to propose as a question mark, because a string totally depends.
Dialogue: 0,1:06:34.48,1:06:38.89,英文,,0,0,0,,Like hi, h, i, exclamation point would seem to be three bytes.
Dialogue: 0,1:06:38.89,1:06:41.31,英文,,0,0,0,,D-A-V-I-D would seem to be five.
Dialogue: 0,1:06:41.31,1:06:45.55,英文,,0,0,0,,So strings clearly are variable based on what you or the human type in.
Dialogue: 0,1:06:45.55,1:06:48.21,英文,,0,0,0,,So we'll see what this means, though, in just a bit.
Dialogue: 0,1:06:48.21,1:06:51.57,英文,,0,0,0,,This, though, is the thing inside of your Mac, your PC, your phone.
Dialogue: 0,1:06:51.57,1:06:56.43,英文,,0,0,0,,Might not look exactly like this, but this is a memory module for a modern computer.
Dialogue: 0,1:06:56.43,1:07:01.37,英文,,0,0,0,,And let's go ahead and use this really as just representative of the finite amount of memory that any computer indeed has.
Dialogue: 0,1:07:01.37,1:07:06.14,英文,,0,0,0,,Let's zoom in on one of these little black chips on the circuit board here.
Dialogue: 0,1:07:06.14,1:07:06.98,英文,,0,0,0,,Zoom in.
Dialogue: 0,1:07:06.98,1:07:11.86,英文,,0,0,0,,And let me propose that this rectangle really represents some number of bytes.
Dialogue: 0,1:07:11.86,1:07:19.30,英文,,0,0,0,,Tucked inside of this little black circuit on the board is maybe, I don't know, a gigabyte, a billion bytes, maybe it's 100 bytes, some number of bytes.
Dialogue: 0,1:07:19.30,1:07:22.84,英文,,0,0,0,,It totally depends on the computer and how much you paid for the stick of memory.
Dialogue: 0,1:07:22.84,1:07:25.74,英文,,0,0,0,,But if there's a finite number of bytes,
Dialogue: 0,1:07:25.74,1:07:32.43,英文,,0,0,0,,physically implemented somehow digitally inside of this hardware, well, then it stands to reason that we could number those bytes.
Dialogue: 0,1:07:32.43,1:07:38.90,英文,,0,0,0,,We can just arbitrarily decide that the top left corner is byte number 1, or really byte number 0.
Dialogue: 0,1:07:38.90,1:07:46.28,英文,,0,0,0,,The one next to it is number 1, then number 2, number 3, dot, dot, dot, number 2 billion, or whatever it is, however big this memory is.
Dialogue: 0,1:07:46.28,1:07:54.91,英文,,0,0,0,,So if you use a variable in a C program that's only one bite like a char, it might literally be stored in that top left hand corner of the memory.
Dialogue: 0,1:07:54.91,1:07:57.94,英文,,0,0,0,,Like in practice, you don't care where physically it is.
Dialogue: 0,1:07:57.94,1:08:03.10,英文,,0,0,0,,But really, the artist rendition would be this char might use one of those single bites.
Dialogue: 0,1:08:03.10,1:08:04.34,英文,,0,0,0,,Somewhere in the computer's memory.
Dialogue: 0,1:08:04.34,1:08:09.08,英文,,0,0,0,,If you use an int, which is four bytes, it would give you four bytes contiguous.
Dialogue: 0,1:08:09.08,1:08:11.00,英文,,0,0,0,,That is left to right, top to bottom.
Dialogue: 0,1:08:11.00,1:08:13.25,英文,,0,0,0,,But all 32 bits would be next to each other.
Dialogue: 0,1:08:13.25,1:08:16.27,英文,,0,0,0,,So the computer knows that those indeed all belong to the same int.
Dialogue: 0,1:08:16.27,1:08:21.05,英文,,0,0,0,,If you need a long or a double for that matter, then you might use a full eight bytes in this case.
Dialogue: 0,1:08:21.05,1:08:30.04,英文,,0,0,0,,And you just keep using and using this memory kind of like a canvas, almost in Photoshop or a spreadsheet, where you can just move pixels or you can move data around.
Dialogue: 0,1:08:30.04,1:08:37.15,英文,,0,0,0,,That's really what your computer's memory is, a canvas for storing information in units of bytes or 8 bits.
Dialogue: 0,1:08:37.15,1:08:39.16,英文,,0,0,0,,Now we don't need to keep looking at these circuit boards.
Dialogue: 0,1:08:39.16,1:08:41.44,英文,,0,0,0,,We can abstract it away as we often do.
Dialogue: 0,1:08:41.44,1:08:45.62,英文,,0,0,0,,And let's go ahead and zoom in on this grid just to consider some very specific variables.
Dialogue: 0,1:08:45.62,1:08:51.77,英文,,0,0,0,,So let me zoom in and now I see fewer but larger boxes on the screen, each of which again represents a bite.
Dialogue: 0,1:08:51.77,1:08:55.19,英文,,0,0,0,,And now let me propose that we play with some actual code.
Dialogue: 0,1:08:55.19,1:08:59.09,英文,,0,0,0,,So here in C, albeit without a full program or three inch,
Dialogue: 0,1:08:59.09,1:09:01.22,英文,,0,0,0,,Score one score to score three.
Dialogue: 0,1:09:01.22,1:09:09.02,英文,,0,0,0,,I have coincidentally given myself to two scores around 72 and 73 and then a pretty low score at 33.
Dialogue: 0,1:09:09.02,1:09:12.12,英文,,0,0,0,,Of course, last week or two weeks ago, this would have been high.
Dialogue: 0,1:09:12.12,1:09:13.86,英文,,0,0,0,,But now we're dealing with actual integers.
Dialogue: 0,1:09:13.86,1:09:17.80,英文,,0,0,0,,So these are three so so scores on my quizzes or tests or the like.
Dialogue: 0,1:09:17.80,1:09:28.50,英文,,0,0,0,,So let me go to V. S. Code here and let's make a program called scores dot C. So I'm gonna write code scores dot C. That's gonna give me my new file and let me go ahead and implement something like this.
Dialogue: 0,1:09:28.50,1:09:32.96,英文,,0,0,0,,Include standard io dot h int main void.
Dialogue: 0,1:09:32.96,1:09:36.75,英文,,0,0,0,,And then inside of here, let me do int score one will be 72.
Dialogue: 0,1:09:36.75,1:09:43.35,英文,,0,0,0,,Uh, int score two will be 73 and in score three will be 33.
Dialogue: 0,1:09:43.35,1:09:47.81,英文,,0,0,0,,And then let me just do something like write a program to average my three test scores together, something like that.
Dialogue: 0,1:09:47.81,1:09:49.83,英文,,0,0,0,,So let me do print F.
Dialogue: 0,1:09:49.83,1:09:58.48,英文,,0,0,0,,Quote unquote my average is and I'm going to go ahead and do say percent I backslash N. And now let me plug in the results.
Dialogue: 0,1:09:58.48,1:09:59.80,英文,,0,0,0,,And this is kind of grade school math.
Dialogue: 0,1:09:59.80,1:10:02.28,英文,,0,0,0,,Now, how do I compute the average of three values?
Dialogue: 0,1:10:02.28,1:10:14.72,英文,,0,0,0,,Well, just like on paper, I can do score one plus score two plus score three in parentheses because of order of operations divided by three since there's three total scores.
Dialogue: 0,1:10:14.72,1:10:16.04,英文,,0,0,0,,All right, so I think this checks out.
Dialogue: 0,1:10:16.04,1:10:20.74,英文,,0,0,0,,And indeed, you can use parentheses and operators like plus in your code like this and see.
Dialogue: 0,1:10:20.74,1:10:23.39,英文,,0,0,0,,Let me go ahead now and do make scores.
Dialogue: 0,1:10:23.39,1:10:24.35,英文,,0,0,0,,No syntax error.
Dialogue: 0,1:10:24.35,1:10:24.97,英文,,0,0,0,,So that's good.
Dialogue: 0,1:10:24.97,1:10:26.01,英文,,0,0,0,,Nothing missing there.
Dialogue: 0,1:10:26.01,1:10:28.87,英文,,0,0,0,,And now let me do dot slash scores and see what my test average is.
Dialogue: 0,1:10:28.87,1:10:29.21,英文,,0,0,0,,All right.
Dialogue: 0,1:10:29.21,1:10:32.60,英文,,0,0,0,,You know, it's not great, but I think I still passed.
Dialogue: 0,1:10:32.60,1:10:36.24,英文,,0,0,0,,And indeed, my average here is is 59.
Dialogue: 0,1:10:36.24,1:10:38.44,英文,,0,0,0,,Is it precisely 59 though?
Dialogue: 0,1:10:38.44,1:10:39.12,英文,,0,0,0,,Well, let's see.
Dialogue: 0,1:10:39.12,1:10:46.26,英文,,0,0,0,,Let's let's actually instead of using an end, how about we go ahead and use something like a floating point value here and let me go ahead and do this.
Dialogue: 0,1:10:46.26,1:10:49.15,英文,,0,0,0,,So let me recompile my code, make scores.
Dialogue: 0,1:10:49.15,1:10:49.49,英文,,0,0,0,,Huh?
Dialogue: 0,1:10:49.49,1:10:49.89,英文,,0,0,0,,All right.
Dialogue: 0,1:10:49.89,1:10:50.61,英文,,0,0,0,,I've got an issue.
Dialogue: 0,1:10:50.61,1:10:52.37,英文,,0,0,0,,Let me zoom in on my terminal window.
Dialogue: 0,1:10:52.37,1:10:54.87,英文,,0,0,0,,We've not seen this one necessarily before.
Dialogue: 0,1:10:54.87,1:11:00.53,英文,,0,0,0,,But error on line nine format specifies type double, which is a lot of precision.
Dialogue: 0,1:11:00.53,1:11:02.31,英文,,0,0,0,,But the argument has type in.
Dialogue: 0,1:11:02.31,1:11:03.17,英文,,0,0,0,,So what does this mean?
Dialogue: 0,1:11:03.17,1:11:08.97,英文,,0,0,0,,Well, it's showing me with these green squigglies that something's bad between the percent F and this thing over here.
Dialogue: 0,1:11:08.97,1:11:13.05,英文,,0,0,0,,Well, on the left, I'm implying a float or a double for that matter.
Dialogue: 0,1:11:13.05,1:11:17.17,英文,,0,0,0,,On the right, though, what data type are score one score to score three?
Dialogue: 0,1:11:17.17,1:11:18.02,英文,,0,0,0,,All right, so they're ints.
Dialogue: 0,1:11:18.02,1:11:19.58,英文,,0,0,0,,So Clang does not like this.
Dialogue: 0,1:11:19.58,1:11:24.34,英文,,0,0,0,,The compiler just doesn't like that I'm using ints on the right, but I want floats on the left.
Dialogue: 0,1:11:24.34,1:11:26.86,英文,,0,0,0,,So there's going to be different ways of solving this.
Dialogue: 0,1:11:26.86,1:11:32.82,英文,,0,0,0,,One way would be to just ignore the problem, like I originally did, and just go back to %i.
Dialogue: 0,1:11:32.82,1:11:38.45,英文,,0,0,0,,Or as an aside, %d is often an alternative to %i for a decimal number.
Dialogue: 0,1:11:38.45,1:11:40.75,英文,,0,0,0,,But we use %i because it sounds like int.
Dialogue: 0,1:11:40.75,1:11:42.63,英文,,0,0,0,,So %i is fine here, too.
Dialogue: 0,1:11:42.63,1:11:44.13,英文,,0,0,0,,But I don't want to just avoid the problem.
Dialogue: 0,1:11:44.13,1:11:46.39,英文,,0,0,0,,I want to actually display a floating point value.
Dialogue: 0,1:11:46.39,1:11:47.75,英文,,0,0,0,,So how can I fix this?
Dialogue: 0,1:11:47.75,1:11:49.81,英文,,0,0,0,,Well, it turns out I can solve this in a few different ways.
Dialogue: 0,1:11:49.81,1:11:59.47,英文,,0,0,0,,The simplest is just to make sure that at least one number on the right is a floating point value like 3.0 instead of just three.
Dialogue: 0,1:11:59.47,1:12:01.77,英文,,0,0,0,,Now I think clang will be happier.
Dialogue: 0,1:12:01.77,1:12:04.50,英文,,0,0,0,,Let me do make scores enter.
Dialogue: 0,1:12:04.50,1:12:05.32,英文,,0,0,0,,And indeed, it's okay.
Dialogue: 0,1:12:05.32,1:12:06.06,英文,,0,0,0,,Why?
Dialogue: 0,1:12:06.06,1:12:14.48,英文,,0,0,0,,As soon as you have at least one more precise data type on the right, it just treats everything at that point as floating point value so that the math works out.
Dialogue: 0,1:12:14.48,1:12:16.38,英文,,0,0,0,,So dot slash scores enter.
Dialogue: 0,1:12:16.38,1:12:17.74,英文,,0,0,0,,And now there we go, right?
Dialogue: 0,1:12:17.74,1:12:20.41,英文,,0,0,0,,You know, some of us might really want that third of a point.
Dialogue: 0,1:12:20.41,1:12:21.97,英文,,0,0,0,,Our average was not 59.
Dialogue: 0,1:12:21.97,1:12:25.01,英文,,0,0,0,,It's 59 and a third, as in this case here.
Dialogue: 0,1:12:25.01,1:12:27.01,英文,,0,0,0,,All right, so we've solved that there.
Dialogue: 0,1:12:27.01,1:12:31.08,英文,,0,0,0,,As an aside, though, there's one other technique to show here.
Dialogue: 0,1:12:31.08,1:12:36.40,英文,,0,0,0,,If you didn't want to change it to 3.0 because that's a little weird because there were literally three scores.
Dialogue: 0,1:12:36.40,1:12:38.85,英文,,0,0,0,,It's not like that needs to have a decimal point.
Dialogue: 0,1:12:38.85,1:12:46.16,英文,,0,0,0,,You could also explicitly convert the three. to a float by saying in parentheses float.
Dialogue: 0,1:12:46.16,1:12:48.26,英文,,0,0,0,,This is what's called type casting.
Dialogue: 0,1:12:48.26,1:12:52.46,英文,,0,0,0,,And this will just convert the thing right after it to that data type if it's possible.
Dialogue: 0,1:12:52.46,1:12:58.28,英文,,0,0,0,,So if I do this again, make scores no errors now dot slash scores and I get in fact the same result.
Dialogue: 0,1:12:58.28,1:13:03.83,英文,,0,0,0,,There's a bit of a rounding issue here, but we know the rounding relates to the imprecision from last week.
Dialogue: 0,1:13:03.83,1:13:06.99,英文,,0,0,0,,For now, let me just be happy with my 59.3 something.
Dialogue: 0,1:13:06.99,1:13:08.57,英文,,0,0,0,,I'll take that for now.
Dialogue: 0,1:13:08.57,1:13:14.81,英文,,0,0,0,,But this is close to a good enough correct answer for me now.
Dialogue: 0,1:13:14.81,1:13:18.60,英文,,0,0,0,,But how do I think about now what's going on inside of the computer's memory?
Dialogue: 0,1:13:18.60,1:13:19.30,英文,,0,0,0,,Well, let's consider.
Dialogue: 0,1:13:19.30,1:13:20.56,英文,,0,0,0,,Here's that same grid of memory.
Dialogue: 0,1:13:20.56,1:13:22.78,英文,,0,0,0,,Each box represents a byte.
Dialogue: 0,1:13:22.78,1:13:25.94,英文,,0,0,0,,Where are score 1, score 2, and score 3 in my memory?
Dialogue: 0,1:13:25.94,1:13:28.78,英文,,0,0,0,,Well, score one, let me just propose, is at the top left.
Dialogue: 0,1:13:28.78,1:13:32.26,英文,,0,0,0,,But it's taking up four boxes for four bytes.
Dialogue: 0,1:13:32.26,1:13:36.78,英文,,0,0,0,,Score two probably ends up right next to it in memory, though this isn't always going to be the case.
Dialogue: 0,1:13:36.78,1:13:38.89,英文,,0,0,0,,But I've chosen simple examples.
Dialogue: 0,1:13:38.89,1:13:40.91,英文,,0,0,0,,73 is next to it, also taking up four bytes.
Dialogue: 0,1:13:40.91,1:13:45.37,英文,,0,0,0,,And then lastly, 33 is in score three down there underneath.
Dialogue: 0,1:13:45.37,1:13:55.83,英文,,0,0,0,,Now, if we really look at the computer's memory, look at it with some kind of microscope or the like, there's actually 32 bits, 32 bits, 32 bits in each of those
Dialogue: 0,1:13:55.83,1:13:59.33,英文,,0,0,0,,Four groups of four bytes representing those values.
Dialogue: 0,1:13:59.33,1:14:03.26,英文,,0,0,0,,But again, for today's purposes onwards, we don't really need to think again and again in binary.
Dialogue: 0,1:14:03.26,1:14:06.02,英文,,0,0,0,,It's just indeed these decimal numbers being stored there.
Dialogue: 0,1:14:06.02,1:14:08.40,英文,,0,0,0,,But I claim now this isn't the best design.
Dialogue: 0,1:14:08.40,1:14:14.55,英文,,0,0,0,,Even if you have never programmed before CS 50 what you're looking at here on the screen as an excerpt.
Dialogue: 0,1:14:14.55,1:14:20.25,英文,,0,0,0,,In what sense is this perhaps bad design, even though it's a correct way of storing three test scores?
Dialogue: 0,1:14:20.25,1:14:26.33,英文,,0,0,0,,What's kind of bad here?
Dialogue: 0,1:14:26.33,1:14:28.11,英文,,0,0,0,,Yeah, always do exactly what you did.
Dialogue: 0,1:14:28.11,1:14:31.85,英文,,0,0,0,,Extrapolate to four scores, five scores, 50 scores.
Dialogue: 0,1:14:31.85,1:14:42.47,英文,,0,0,0,,This can't be that well designed, because now you're going to have four lines of code, five lines of code, 50 lines of code that are almost identical, except for this arbitrary number that we're updating at the end of the variable.
Dialogue: 0,1:14:42.47,1:14:48.70,英文,,0,0,0,,So indeed, there's probably going to be a better way, even though, at least in C, we haven't yet seen that technique.
Dialogue: 0,1:14:48.70,1:14:52.64,英文,,0,0,0,,But the solution, today onward, is going to be something called an array.
Dialogue: 0,1:14:52.64,1:15:04.14,英文,,0,0,0,,An array is a way of storing your data back to back to back in the computer's memory in such a way that you can access each individual member easily.
Dialogue: 0,1:15:04.14,1:15:08.68,英文,,0,0,0,,Put another way, with an array, you can instead do something like this.
Dialogue: 0,1:15:08.68,1:15:15.84,英文,,0,0,0,,Instead of saying int score 1, int score 2, int score 3, giving each a value, you can first tell the computer,
Dialogue: 0,1:15:15.84,1:15:24.23,英文,,0,0,0,,Please give me a variable called scores, plural, though you can call it anything you want, of size 3, each of which will be an integer.
Dialogue: 0,1:15:24.23,1:15:30.99,英文,,0,0,0,,That is to say, this is how you declare an array in C that will have enough room to store three integers.
Dialogue: 0,1:15:30.99,1:15:39.41,英文,,0,0,0,,Put another way, this is the technical way of telling the computer, please give me 12 bytes in total.
Dialogue: 0,1:15:39.41,1:15:42.65,英文,,0,0,0,,3 times 4 each for an int, so give me 12 bytes in total.
Dialogue: 0,1:15:42.65,1:15:47.21,英文,,0,0,0,,And what the computer will do is guarantee that they're back to back to back in the computer's memory.
Dialogue: 0,1:15:47.21,1:15:49.43,英文,,0,0,0,,And that'll be useful in just a moment.
Dialogue: 0,1:15:49.43,1:15:51.72,英文,,0,0,0,,So let me go ahead and do something useful with this.
Dialogue: 0,1:15:51.72,1:15:53.86,英文,,0,0,0,,Let me store three actual scores.
Dialogue: 0,1:15:53.86,1:15:58.70,英文,,0,0,0,,Here's how I could now store those same numeric scores in this array.
Dialogue: 0,1:15:58.70,1:16:00.56,英文,,0,0,0,,Syntax is a little different.
Dialogue: 0,1:16:00.56,1:16:03.08,英文,,0,0,0,,But there's one variable called scores.
Dialogue: 0,1:16:03.08,1:16:14.31,英文,,0,0,0,,But if you want to go to its first location starting today, you use square brackets and go to location 0 first, which because things in C are 0 indexed, so to speak, you start counting at 0.
Dialogue: 0,1:16:14.31,1:16:16.63,英文,,0,0,0,,The first int is at bracket 0.
Dialogue: 0,1:16:16.63,1:16:18.03,英文,,0,0,0,,Second int is at bracket 1.
Dialogue: 0,1:16:18.03,1:16:19.57,英文,,0,0,0,,Third int is at bracket 2.
Dialogue: 0,1:16:19.57,1:16:20.83,英文,,0,0,0,,So it's not 1, 2, 3.
Dialogue: 0,1:16:20.83,1:16:22.27,英文,,0,0,0,,It's literally 0, 1, 2.
Dialogue: 0,1:16:22.27,1:16:24.07,英文,,0,0,0,,And this is not something you have control over.
Dialogue: 0,1:16:24.07,1:16:26.51,英文,,0,0,0,,You must start at 0.
Dialogue: 0,1:16:26.51,1:16:28.51,英文,,0,0,0,,So these lines now.
Dialogue: 0,1:16:28.51,1:16:33.72,英文,,0,0,0,,Create an array of size 3, and then insert 1, 2, 3 values into that array.
Dialogue: 0,1:16:33.72,1:16:37.78,英文,,0,0,0,,But the upside now is that you only have one name of the variable to remember.
Dialogue: 0,1:16:37.78,1:16:39.38,英文,,0,0,0,,It's just called scores.
Dialogue: 0,1:16:39.38,1:16:43.36,英文,,0,0,0,,Yes, you need to go into the array to get individual values.
Dialogue: 0,1:16:43.36,1:16:46.81,英文,,0,0,0,,You need to index into it using those square brackets.
Dialogue: 0,1:16:46.81,1:16:53.11,英文,,0,0,0,,But at least you don't have this hackish approach of declaring a separate variable for each and every one of these values.
Dialogue: 0,1:16:53.11,1:16:55.18,英文,,0,0,0,,So let me go back to scores.
Dialogue: 0,1:16:55.18,1:16:56.20,英文,,0,0,0,,Dot C here.
Dialogue: 0,1:16:56.20,1:16:57.48,英文,,0,0,0,,And let me propose that I do this.
Dialogue: 0,1:16:57.48,1:17:00.48,英文,,0,0,0,,Let me just kind of use that same idea to do the following.
Dialogue: 0,1:17:00.48,1:17:02.70,英文,,0,0,0,,Let me get rid of these three separate integers.
Dialogue: 0,1:17:02.70,1:17:07.82,英文,,0,0,0,,Let me give myself an int scores array of size three and then scores.
Dialogue: 0,1:17:07.82,1:17:10.95,英文,,0,0,0,,Bracket zero will, as before, be 72 scores.
Dialogue: 0,1:17:10.95,1:17:14.89,英文,,0,0,0,,Bracket one will be 73 and scores.
Dialogue: 0,1:17:14.89,1:17:16.83,英文,,0,0,0,,Bracket two will be 33.
Dialogue: 0,1:17:16.83,1:17:18.91,英文,,0,0,0,,And let me get rid of the little dot there.
Dialogue: 0,1:17:18.91,1:17:26.15,英文,,0,0,0,,All right, so now if I go ahead and run this again with make scores enter,
Dialogue: 0,1:17:26.15,1:17:29.17,英文,,0,0,0,,What did I do wrong here?
Dialogue: 0,1:17:29.17,1:17:31.63,英文,,0,0,0,,I think I got a little too ahead of myself.
Dialogue: 0,1:17:31.63,1:17:36.21,英文,,0,0,0,,Let me increase my terminal window.
Dialogue: 0,1:17:36.21,1:17:39.00,英文,,0,0,0,,Let's focus on line 10 here first.
Dialogue: 0,1:17:39.00,1:17:42.38,英文,,0,0,0,,Error use of undeclared identifier score one.
Dialogue: 0,1:17:42.38,1:17:43.62,英文,,0,0,0,,What did I do here?
Dialogue: 0,1:17:43.62,1:17:44.18,英文,,0,0,0,,That was dumb.
Dialogue: 0,1:17:44.18,1:17:47.58,英文,,0,0,0,,Yeah.
Dialogue: 0,1:17:47.58,1:17:49.40,英文,,0,0,0,,Right, so I didn't declare score 1.
Dialogue: 0,1:17:49.40,1:17:50.50,英文,,0,0,0,,I've got old code, right?
Dialogue: 0,1:17:50.50,1:17:53.91,英文,,0,0,0,,So I just kind of honestly got ahead of myself here, not even intentionally.
Dialogue: 0,1:17:53.91,1:17:56.13,英文,,0,0,0,,So let me go ahead and shrink my terminal window again.
Dialogue: 0,1:17:56.13,1:17:57.63,英文,,0,0,0,,I need to finish my thought here.
Dialogue: 0,1:17:57.63,1:18:03.04,英文,,0,0,0,,So let me clear my terminal and let me change this now to be scores bracket 0.
Dialogue: 0,1:18:03.04,1:18:05.88,英文,,0,0,0,,Plus scores bracket one plus scores bracket two.
Dialogue: 0,1:18:05.88,1:18:09.97,英文,,0,0,0,,So it's a little more verbose because I got these square brackets, so to speak.
Dialogue: 0,1:18:09.97,1:18:12.23,英文,,0,0,0,,But I think now my code is consistent.
Dialogue: 0,1:18:12.23,1:18:19.93,英文,,0,0,0,,So let me make scores now now compiles dot slash scores gives me indeed the same rough average with those same values.
Dialogue: 0,1:18:19.93,1:18:22.21,英文,,0,0,0,,All right, so let me go ahead and maybe
Dialogue: 0,1:18:22.21,1:18:24.44,英文,,0,0,0,,Um, tidy enhance this a little bit.
Dialogue: 0,1:18:24.44,1:18:31.68,英文,,0,0,0,,It's a little silly to have to write a special program just to check your average of three test scores like 72 73 33.
Dialogue: 0,1:18:31.68,1:18:37.33,英文,,0,0,0,,Why don't I actually make the program dynamic and ask the human for that average for those scores.
Dialogue: 0,1:18:37.33,1:18:39.21,英文,,0,0,0,,So instead, let me do this.
Dialogue: 0,1:18:39.21,1:18:46.48,英文,,0,0,0,,How about we get rid of the 72 and change this to get int and I'll just prompt the user for a score.
Dialogue: 0,1:18:46.48,1:18:52.70,英文,,0,0,0,,Let me get rid of the 33 and change 73 and get this to be get in score, quote unquote.
Dialogue: 0,1:18:52.70,1:18:57.81,英文,,0,0,0,,And then lastly, get rid of the 33 and replace it with get in quote unquote score.
Dialogue: 0,1:18:57.81,1:18:59.77,英文,,0,0,0,,Get into the CS 50 thing for now.
Dialogue: 0,1:18:59.77,1:19:03.73,英文,,0,0,0,,So I need to include CS 50 dot H as always.
Dialogue: 0,1:19:03.73,1:19:07.28,英文,,0,0,0,,But I think now it's sort of a better program, because now I can compile it once.
Dialogue: 0,1:19:07.28,1:19:08.64,英文,,0,0,0,,I can even share it with my friends.
Dialogue: 0,1:19:08.64,1:19:12.46,英文,,0,0,0,,And now any of us can average three scores on some classes test.
Dialogue: 0,1:19:12.46,1:19:17.01,英文,,0,0,0,,They don't need to know the code or rewrite the code just to type in their scores.
Dialogue: 0,1:19:17.01,1:19:19.25,英文,,0,0,0,,So make scores worked.
Dialogue: 0,1:19:19.25,1:19:20.29,英文,,0,0,0,,Dot slash scores.
Dialogue: 0,1:19:20.29,1:19:21.75,英文,,0,0,0,,Now I can type anything I want.
Dialogue: 0,1:19:21.75,1:19:26.45,英文,,0,0,0,,Maybe it's a 72 73 33 still get the same answer.
Dialogue: 0,1:19:26.45,1:19:29.35,英文,,0,0,0,,Or maybe I'm having a better semester.
Dialogue: 0,1:19:29.35,1:19:31.40,英文,,0,0,0,,100 100 maybe 99.
Dialogue: 0,1:19:31.40,1:19:33.54,英文,,0,0,0,,And now we get still a pretty high score there.
Dialogue: 0,1:19:33.54,1:19:34.70,英文,,0,0,0,,But now it's dynamic.
Dialogue: 0,1:19:34.70,1:19:35.98,英文,,0,0,0,,Now you don't need the source code.
Dialogue: 0,1:19:35.98,1:19:37.42,英文,,0,0,0,,You don't need to recompile the program.
Dialogue: 0,1:19:37.42,1:19:39.82,英文,,0,0,0,,It's just going to work again and again.
Dialogue: 0,1:19:39.82,1:19:46.15,英文,,0,0,0,,But this to let me propose that this code is correct if I want to get three scores from the user.
Dialogue: 0,1:19:46.15,1:19:49.35,英文,,0,0,0,,But these highlighted lines now six through nine
Dialogue: 0,1:19:49.35,1:19:55.23,英文,,0,0,0,,Are they well designed, would you say?
Dialogue: 0,1:19:55.23,1:19:55.91,英文,,0,0,0,,Yeah, right.
Dialogue: 0,1:19:55.91,1:19:58.21,英文,,0,0,0,,This is we can use a loop is the spoiler here.
Dialogue: 0,1:19:58.21,1:19:58.89,英文,,0,0,0,,Why?
Dialogue: 0,1:19:58.89,1:20:01.48,英文,,0,0,0,,I mean, I got it's like the same code again and again and again.
Dialogue: 0,1:20:01.48,1:20:03.02,英文,,0,0,0,,The only thing that's changing is the number.
Dialogue: 0,1:20:03.02,1:20:11.83,英文,,0,0,0,,And you should have kind of had some code smell again, because if I keep typing the same thing again and again, like that's clearly an opportunity to better design something.
Dialogue: 0,1:20:11.83,1:20:13.59,英文,,0,0,0,,So let me do this.
Dialogue: 0,1:20:13.59,1:20:18.61,英文,,0,0,0,,Let me go ahead and still create my my array of size three.
Dialogue: 0,1:20:18.61,1:20:21.87,英文,,0,0,0,,But let me use our old friend, the for loop for int.
Dialogue: 0,1:20:21.87,1:20:26.66,英文,,0,0,0,,I equals 0, I less than 3, I plus plus.
Dialogue: 0,1:20:26.66,1:20:29.68,英文,,0,0,0,,And then in here, let me do scores bracket.
Dialogue: 0,1:20:29.68,1:20:33.03,英文,,0,0,0,,We haven't seen this before, but any intuition?
Dialogue: 0,1:20:33.03,1:20:40.92,英文,,0,0,0,,Scores bracket i, because that will use whatever i is, be it 0 or 1 or 2 in iteration.
Dialogue: 0,1:20:40.92,1:20:47.06,英文,,0,0,0,,And then I can get an int, asking the user for score, without having to repeat myself again and again.
Dialogue: 0,1:20:47.06,1:20:49.91,英文,,0,0,0,,So hopefully, if I didn't make any typos, make scores.
Dialogue: 0,1:20:49.91,1:20:50.67,英文,,0,0,0,,All good.
Dialogue: 0,1:20:50.67,1:20:53.79,英文,,0,0,0,,Dot slash scores, 72, 73, 33.
Dialogue: 0,1:20:53.79,1:20:54.67,英文,,0,0,0,,And we're back in business.
Dialogue: 0,1:20:54.67,1:20:59.45,英文,,0,0,0,,But the code is arguably now better designed, because now I haven't actually
Dialogue: 0,1:20:59.45,1:21:05.04,英文,,0,0,0,,I haven't actually hard coded the scores and I haven't actually copied and pasted any of that code.
Dialogue: 0,1:21:05.04,1:21:10.64,英文,,0,0,0,,Well, if we consider now what's going on inside of the computer's memory, it's pretty much the same in terms of the values.
Dialogue: 0,1:21:10.64,1:21:17.22,英文,,0,0,0,,But instead of the variables being literally score one score to score three, there's just one variable.
Dialogue: 0,1:21:17.22,1:21:28.83,英文,,0,0,0,,It's an array called scores, but you can index into its three locations by using scores bracket zero to get the first scores bracket one to get the second scores bracket two to get The third.
Dialogue: 0,1:21:28.83,1:21:30.03,英文,,0,0,0,,But this is key.
Dialogue: 0,1:21:30.03,1:21:31.99,英文,,0,0,0,,The memory is contiguous.
Dialogue: 0,1:21:31.99,1:21:35.59,英文,,0,0,0,,It's only the screen is only so large, so it wraps around.
Dialogue: 0,1:21:35.59,1:21:40.26,英文,,0,0,0,,But physically, digitally, the memory is contiguous top to bottom, left to right.
Dialogue: 0,1:21:40.26,1:21:41.00,英文,,0,0,0,,And that's important.
Dialogue: 0,1:21:41.00,1:21:41.68,英文,,0,0,0,,Why?
Dialogue: 0,1:21:41.68,1:21:48.83,英文,,0,0,0,,Because the brackets indicate 012 that each of these integers is just one integer away from the next.
Dialogue: 0,1:21:48.83,1:21:50.59,英文,,0,0,0,,It can't be randomly down here.
Dialogue: 0,1:21:50.59,1:21:54.12,英文,,0,0,0,,All of a sudden it's got to be back to back to back.
Dialogue: 0,1:21:54.12,1:22:00.73,英文,,0,0,0,,All right, now equipped with that paradigm, what more could we actually do here?
Dialogue: 0,1:22:00.73,1:22:07.09,英文,,0,0,0,,Well, it turns out it's worth knowing that it's possible in code to even pass arrays around as arguments.
Dialogue: 0,1:22:07.09,1:22:11.44,英文,,0,0,0,,And let me just whip this program up somewhat quickly, just so you've seen it before long.
Dialogue: 0,1:22:11.44,1:22:13.20,英文,,0,0,0,,But let me go ahead and do this.
Dialogue: 0,1:22:13.20,1:22:15.02,英文,,0,0,0,,Let me propose that.
Dialogue: 0,1:22:15.02,1:22:18.16,英文,,0,0,0,,I create a function that does this averaging for me.
Dialogue: 0,1:22:18.16,1:22:22.79,英文,,0,0,0,,So I'm going to create a function called average that returns a float.
Dialogue: 0,1:22:22.79,1:22:28.61,英文,,0,0,0,,And the arguments this thing is going to take, let's see, it's going to be the array.
Dialogue: 0,1:22:28.61,1:22:33.22,英文,,0,0,0,,So it turns out, if you want to take in an array of numbers, you can call it anything you want.
Dialogue: 0,1:22:33.22,1:22:41.28,英文,,0,0,0,,This is how you tell C that a function takes not an integer, But in array of integers and you don't have to call it array.
Dialogue: 0,1:22:41.28,1:22:42.76,英文,,0,0,0,,I'm doing that just for the sake of discussion.
Dialogue: 0,1:22:42.76,1:22:44.42,英文,,0,0,0,,It can be called X. It can be numbers.
Dialogue: 0,1:22:44.42,1:22:45.56,英文,,0,0,0,,It can be anything else.
Dialogue: 0,1:22:45.56,1:22:49.29,英文,,0,0,0,,I'm just calling it array to be super explicit as to what it is there.
Dialogue: 0,1:22:49.29,1:22:51.83,英文,,0,0,0,,Now, how do I change my code down here?
Dialogue: 0,1:22:51.83,1:22:55.13,英文,,0,0,0,,What I think I'm going to do for the moment is just this.
Dialogue: 0,1:22:55.13,1:22:59.13,英文,,0,0,0,,I'm going to get rid of this code here where I manually computed the average.
Dialogue: 0,1:22:59.13,1:23:05.10,英文,,0,0,0,,And let me just call the average function here by passing in the whole array of scores.
Dialogue: 0,1:23:05.10,1:23:07.08,英文,,0,0,0,,So this is just an example of abstraction.
Dialogue: 0,1:23:07.08,1:23:08.90,英文,,0,0,0,,Like, now I have a function called average.
Dialogue: 0,1:23:08.90,1:23:09.76,英文,,0,0,0,,I don't care.
Dialogue: 0,1:23:09.76,1:23:12.36,英文,,0,0,0,,I don't have to remember how it works once I implement it.
Dialogue: 0,1:23:12.36,1:23:15.16,英文,,0,0,0,,And it just kind of tightens up my main code a little bit.
Dialogue: 0,1:23:15.16,1:23:17.12,英文,,0,0,0,,But I do still have to implement this.
Dialogue: 0,1:23:17.12,1:23:19.34,英文,,0,0,0,,So later in my file, let me repeat myself before.
Dialogue: 0,1:23:19.34,1:23:27.15,英文,,0,0,0,,The only time it's OK in C to repeat yourself again and again by typing out again average and then int array open bracket.
Dialogue: 0,1:23:27.15,1:23:28.61,英文,,0,0,0,,But now not a semicolon.
Dialogue: 0,1:23:28.61,1:23:30.37,英文,,0,0,0,,Now I have to implement this thing.
Dialogue: 0,1:23:30.37,1:23:33.55,英文,,0,0,0,,And I can implement this in a bunch of different ways.
Dialogue: 0,1:23:33.55,1:23:39.17,英文,,0,0,0,,But I don't know, huh, in advance, I can't just do this.
Dialogue: 0,1:23:39.17,1:23:52.10,英文,,0,0,0,,I can't just do array bracket 0 plus array bracket 1 plus array bracket 2 unless this program's only ever going to work on three numbers.
Dialogue: 0,1:23:52.10,1:23:55.40,英文,,0,0,0,,So, huh, let me go ahead and do this.
Dialogue: 0,1:23:55.40,1:23:58.82,英文,,0,0,0,,Let me first propose that there is a poor design here.
Dialogue: 0,1:23:58.82,1:24:05.16,英文,,0,0,0,,In my main function, what value have I repeated twice?
Dialogue: 0,1:24:05.16,1:24:09.02,英文,,0,0,0,,Among the highlighted lines, what jumps out at you is twice.
Dialogue: 0,1:24:09.02,1:24:10.68,英文,,0,0,0,,Yeah, the length of the array is just three.
Dialogue: 0,1:24:10.68,1:24:14.86,英文,,0,0,0,,Now, it's not a huge deal that I type the number three on line eight, on line nine.
Dialogue: 0,1:24:14.86,1:24:18.42,英文,,0,0,0,,But this is exactly the kind of shortcut that's going to get you in trouble eventually.
Dialogue: 0,1:24:18.42,1:24:18.90,英文,,0,0,0,,Why?
Dialogue: 0,1:24:18.90,1:24:22.36,英文,,0,0,0,,Because eventually, you or someone else is going to go in, make the array bigger or smaller.
Dialogue: 0,1:24:22.36,1:24:26.28,英文,,0,0,0,,And you're not going to realize that, magically, that same number is in two places.
Dialogue: 0,1:24:26.28,1:24:29.24,英文,,0,0,0,,And indeed, this is what a programmer would often call a magic number.
Dialogue: 0,1:24:29.24,1:24:32.14,英文,,0,0,0,,A magic number is one that just kind of appears magically.
Dialogue: 0,1:24:32.14,1:24:35.21,英文,,0,0,0,,And you're on the honor system to change it here if you change it here.
Dialogue: 0,1:24:35.21,1:24:36.59,英文,,0,0,0,,And then you change it over here.
Dialogue: 0,1:24:36.59,1:24:43.35,英文,,0,0,0,,Like, that's not going to end well if the onus is on the programmer to remember where they hard-coded, that is, wrote out three explicitly.
Dialogue: 0,1:24:43.35,1:24:46.35,英文,,0,0,0,,So any time you reuse a value like this, you know what?
Dialogue: 0,1:24:46.35,1:24:57.08,英文,,0,0,0,,We should probably do what we did last week, which was to declare a variable, perhaps at the very top of my program, so it's super obvious what it is, called maybe n and set that equal to three.
Dialogue: 0,1:24:57.08,1:25:02.55,英文,,0,0,0,,Better yet, what did I do last week to make sure that I can't screw up and accidentally change that value?
Dialogue: 0,1:25:02.55,1:25:03.49,英文,,0,0,0,,Yeah, constant.
Dialogue: 0,1:25:03.49,1:25:05.95,英文,,0,0,0,,And the key word there was just const, for short.
Dialogue: 0,1:25:05.95,1:25:14.64,英文,,0,0,0,,And now I have a global variable, global in the sense that I can access it anywhere, that is called n. It's an int, and it's always going to be 3.
Dialogue: 0,1:25:14.64,1:25:28.35,英文,,0,0,0,,And now I can improve my main function a little bit by just changing the 3s to n. So now if I, if a colleague, realize, oh, wait a minute, there's four tests this year, you change n to 4, recompile the code, and it just works everywhere else.
Dialogue: 0,1:25:28.35,1:25:34.05,英文,,0,0,0,,Except in my average function, let me change it back to three just for consistency.
Dialogue: 0,1:25:34.05,1:25:43.83,英文,,0,0,0,,This is not going to fly now to just sum up things like this, for instance, and then return this divided by three.
Dialogue: 0,1:25:43.83,1:25:58.12,英文,,0,0,0,,Why will this not work now as I've defined it?
Dialogue: 0,1:25:58.12,1:26:02.87,英文,,0,0,0,,Okay, I might be in returning an integer value when I intend to return a float per this.
Dialogue: 0,1:26:02.87,1:26:10.89,英文,,0,0,0,,But I think I'm okay because I use that little trick where I made sure that at least one of the numbers in my arithmetic expression is in fact a floating point value.
Dialogue: 0,1:26:10.89,1:26:15.82,英文,,0,0,0,,And just by adding the 0.0 make sure that everything gets treated as a float.
Dialogue: 0,1:26:15.82,1:26:19.34,英文,,0,0,0,,So I think that's okay.
Dialogue: 0,1:26:19.34,1:26:24.48,英文,,0,0,0,,Sorry, low ladder.
Dialogue: 0,1:26:24.48,1:26:25.28,英文,,0,0,0,,Exactly.
Dialogue: 0,1:26:25.28,1:26:33.62,英文,,0,0,0,,So left hand's not talking to the right hand here, in that my current implementation of average is still assuming that there's only going to be three tests or whatever.
Dialogue: 0,1:26:33.62,1:26:34.26,英文,,0,0,0,,But wait a minute.
Dialogue: 0,1:26:34.26,1:26:39.72,英文,,0,0,0,,I just went through the trouble of modifying this to be n, generically.
Dialogue: 0,1:26:39.72,1:26:46.58,英文,,0,0,0,,And if I change this to 4, I'm not going to be happy, perhaps, with my average, because now I'm going to ignore one of my test scores altogether.
Dialogue: 0,1:26:46.58,1:26:48.66,英文,,0,0,0,,So let me change this back to 3.
Dialogue: 0,1:26:48.66,1:26:52.22,英文,,0,0,0,,And unfortunately, if it's a variable now n,
Dialogue: 0,1:26:52.22,1:26:55.71,英文,,0,0,0,,And therefore, I have literally a variable number of scores.
Dialogue: 0,1:26:55.71,1:27:00.95,英文,,0,0,0,,How do I take the average of a variable number of things?
Dialogue: 0,1:27:00.95,1:27:10.50,英文,,0,0,0,,I mean, what's my building block there?
Dialogue: 0,1:27:10.50,1:27:14.75,英文,,0,0,0,,Yeah, why don't I use a loop that goes through the array and adds things up as you go?
Dialogue: 0,1:27:14.75,1:27:22.45,英文,,0,0,0,,I mean, kind of like grade school, as you take the average on your calculator or paper pencil, you just keep adding the numbers together, and then you divide at the end by the total number of things.
Dialogue: 0,1:27:22.45,1:27:23.41,英文,,0,0,0,,So how can I do this?
Dialogue: 0,1:27:23.41,1:27:30.59,英文,,0,0,0,,Well, let me change my implementation of average to first declare a variable called sum or whatever, set it equal to 0.
Dialogue: 0,1:27:30.59,1:27:33.15,英文,,0,0,0,,So this is like me on my piece of paper getting ready to count.
Dialogue: 0,1:27:33.15,1:27:36.75,英文,,0,0,0,,Or my calculator, of course, when you turn it on, typically defaults to 0.
Dialogue: 0,1:27:36.75,1:27:38.25,英文,,0,0,0,,And now let me do 4.
Dialogue: 0,1:27:38.25,1:27:39.93,英文,,0,0,0,,Int i equals zero.
Dialogue: 0,1:27:39.93,1:27:46.98,英文,,0,0,0,,I is less than a very, I didn't do that, n. I is less than n, i plus plus.
Dialogue: 0,1:27:46.98,1:28:00.36,英文,,0,0,0,,And now in here, let me go ahead and add to the current sum whatever is in the arrays location i. And then down here, I think I can just return sum divided by 3.0, n, perhaps here.
Dialogue: 0,1:28:00.36,1:28:08.50,英文,,0,0,0,,And actually, I think I'm gonna get let's make sure it's a float.
Dialogue: 0,1:28:08.50,1:28:15.55,英文,,0,0,0,,Let's use the type casting trick just to make sure I don't accidentally shortchange someone and throw away everything after the decimal point.
Dialogue: 0,1:28:15.55,1:28:17.09,英文,,0,0,0,,So it just escalated quickly, right?
Dialogue: 0,1:28:17.09,1:28:18.87,英文,,0,0,0,,Like average just got a lot more involved.
Dialogue: 0,1:28:18.87,1:28:22.27,英文,,0,0,0,,It's not just a single one line of code, but now it's dynamic.
Dialogue: 0,1:28:22.27,1:28:26.63,英文,,0,0,0,,I initialize a variable called some to zero in this loop.
Dialogue: 0,1:28:26.63,1:28:30.93,英文,,0,0,0,,I go through and just keep adding to some which is initially zero.
Dialogue: 0,1:28:30.93,1:28:32.99,英文,,0,0,0,,Whatever is in array bracket.
Dialogue: 0,1:28:32.99,1:28:36.82,英文,,0,0,0,,I or specifically a ray bracket zero, a bray bracket one, a bray bracket two.
Dialogue: 0,1:28:36.82,1:28:41.10,英文,,0,0,0,,That gives me a total sum that I return divided by the total number of things.
Dialogue: 0,1:28:41.10,1:28:45.64,英文,,0,0,0,,Now this I can tighten slightly recall that this is syntactic sugar for just adding things.
Dialogue: 0,1:28:45.64,1:28:48.78,英文,,0,0,0,,I can't use plus plus because that only literally adds one.
Dialogue: 0,1:28:48.78,1:28:52.74,英文,,0,0,0,,But I can use here plus equals
Dialogue: 0,1:28:52.74,1:28:54.92,英文,,0,0,0,,Questions on this implementation here?
Dialogue: 0,1:28:54.92,1:29:06.54,英文,,0,0,0,,Really, the only takeaway, or the most important takeaway, is that this is the syntax for how you tell a function that it expects a whole array, not a single variable like an int or the like.
Dialogue: 0,1:29:06.54,1:29:11.63,英文,,0,0,0,,You literally use square brackets, but you don't specify the length inside there.
Dialogue: 0,1:29:11.63,1:29:16.85,英文,,0,0,0,,Yeah?
Dialogue: 0,1:29:16.85,1:29:22.78,英文,,0,0,0,,What about the variable at the top?
Dialogue: 0,1:29:22.78,1:29:23.30,英文,,0,0,0,,Good question.
Dialogue: 0,1:29:23.30,1:29:26.24,英文,,0,0,0,,What do I have it defined as at the top, this variable n?
Dialogue: 0,1:29:26.24,1:29:33.99,英文,,0,0,0,,It must be an integer if you're going to use it inside of an array's square brackets here.
Dialogue: 0,1:29:33.99,1:29:38.49,英文,,0,0,0,,So this line 10, notice, no longer says 3. It says n.
Dialogue: 0,1:29:38.49,1:29:44.00,英文,,0,0,0,,And so whatever n is, three or four or something else, that's how many integers I will get in that array.
Dialogue: 0,1:29:44.00,1:29:48.45,英文,,0,0,0,,And it must be, by definition of an array, an integer that goes in those square brackets.
Dialogue: 0,1:29:48.45,1:29:50.17,英文,,0,0,0,,And here's a common source of confusion.
Dialogue: 0,1:29:50.17,1:29:56.40,英文,,0,0,0,,When you create the array, that is, declare it, you use square brackets like this, where you put the total number of elements you want.
Dialogue: 0,1:29:56.40,1:30:01.54,英文,,0,0,0,,When you subsequently use the array like I'm doing here, you don't mention it again.
Dialogue: 0,1:30:01.54,1:30:03.22,英文,,0,0,0,,Just like you don't mention it again and again.
Dialogue: 0,1:30:03.22,1:30:11.79,英文,,0,0,0,,Once a variable exists, you use the square bracket still, but you don't use in you use zero or one or two or generically here.
Dialogue: 0,1:30:11.79,1:30:17.11,英文,,0,0,0,,I so when C was designed, they sometimes use the same syntax for two different ideas or contexts.
Dialogue: 0,1:30:17.11,1:30:23.32,英文,,0,0,0,,Yeah.
Dialogue: 0,1:30:23.32,1:30:23.76,英文,,0,0,0,,Good question.
Dialogue: 0,1:30:23.76,1:30:26.60,英文,,0,0,0,,Do I have to include line six short answer?
Dialogue: 0,1:30:26.60,1:30:26.88,英文,,0,0,0,,Yes.
Dialogue: 0,1:30:26.88,1:30:32.90,英文,,0,0,0,,Because of the reason we ran into last week C or clang really reads your code top to bottom, left to right.
Dialogue: 0,1:30:32.90,1:30:43.69,英文,,0,0,0,,And so if the compiler sees some mention of this function average online 16 but you haven't told the compiler that average exists, you're gonna get an error on the screen.
Dialogue: 0,1:30:43.69,1:30:48.67,英文,,0,0,0,,So the conventional way to do that is you just copy paste the one first line of code from the function.
Dialogue: 0,1:30:48.67,1:30:51.65,英文,,0,0,0,,It's so called prototype or declaration.
Dialogue: 0,1:30:51.65,1:30:55.80,英文,,0,0,0,,Yeah.
Dialogue: 0,1:30:55.80,1:30:58.18,英文,,0,0,0,,Really good question and a perfect segue.
Dialogue: 0,1:30:58.18,1:31:01.34,英文,,0,0,0,,Is there a library you can use if you don't know the size of the array?
Dialogue: 0,1:31:01.34,1:31:01.76,英文,,0,0,0,,No.
Dialogue: 0,1:31:01.76,1:31:11.19,英文,,0,0,0,,And so if any of you have programmed in Java or Python or other languages, you can actually just ask the array, like, how big is it?
Dialogue: 0,1:31:11.19,1:31:13.97,英文,,0,0,0,,In C, you and I, the programmers, have to remember it.
Dialogue: 0,1:31:13.97,1:31:15.07,英文,,0,0,0,,And so short answer, no.
Dialogue: 0,1:31:15.07,1:31:17.63,英文,,0,0,0,,There's no function that will just automatically do this for us.
Dialogue: 0,1:31:17.63,1:31:21.67,英文,,0,0,0,,And in fact, let me make a more subtle claim that it's fine
Dialogue: 0,1:31:21.67,1:31:25.24,英文,,0,0,0,,to use global variables like this if they're really for configuration options.
Dialogue: 0,1:31:25.24,1:31:25.76,英文,,0,0,0,,Why?
Dialogue: 0,1:31:25.76,1:31:32.66,英文,,0,0,0,,It's just convenient to put them at the very top of the file because everyone you, your colleagues, your T. A. S. Are going to see them at the top of the code.
Dialogue: 0,1:31:32.66,1:31:36.09,英文,,0,0,0,,But you really shouldn't be using them everywhere throughout your code.
Dialogue: 0,1:31:36.09,1:31:40.75,英文,,0,0,0,,It would be better if the average function itself were independent of that special variable.
Dialogue: 0,1:31:40.75,1:31:45.22,英文,,0,0,0,,So by that I mean this, you know what I should really do if I really want to be
Dialogue: 0,1:31:45.22,1:31:46.48,英文,,0,0,0,,Well designed.
Dialogue: 0,1:31:46.48,1:31:51.64,英文,,0,0,0,,I should pass in the length of the array to the average function.
Dialogue: 0,1:31:51.64,1:31:54.29,英文,,0,0,0,,I should give the average function a second argument.
Dialogue: 0,1:31:54.29,1:31:57.91,英文,,0,0,0,,I'll call it length, for instance, but I could call it anything I want.
Dialogue: 0,1:31:57.91,1:32:02.63,英文,,0,0,0,,And so rather than putting N all the way down here at the bottom of my file,
Dialogue: 0,1:32:02.63,1:32:05.82,英文,,0,0,0,,Let me just dynamically say length instead.
Dialogue: 0,1:32:05.82,1:32:08.78,英文,,0,0,0,,And this is a subtlety and no need to get too tripped up over this.
Dialogue: 0,1:32:08.78,1:32:13.88,英文,,0,0,0,,But this now is just an example of how the same function can take not one but two arguments.
Dialogue: 0,1:32:13.88,1:32:19.90,英文,,0,0,0,,But indeed in C you must remember yourself what the length of an array is.
Dialogue: 0,1:32:19.90,1:32:23.32,英文,,0,0,0,,You can't just ask the array via some syntax like you can.
Dialogue: 0,1:32:23.32,1:32:26.71,英文,,0,0,0,,Those of you have programmed before in Java or Python.
Dialogue: 0,1:32:26.71,1:32:29.94,英文,,0,0,0,,Yeah.
Dialogue: 0,1:32:29.94,1:32:35.54,英文,,0,0,0,,LLM, LLM, LLM
Dialogue: 0,1:32:35.54,1:32:36.28,英文,,0,0,0,,Good question.
Dialogue: 0,1:32:36.28,1:32:38.90,英文,,0,0,0,,Would it be better designed to write a function that computes the size?
Dialogue: 0,1:32:38.90,1:32:46.17,英文,,0,0,0,,Short answer can't do that in C. As soon as you pass an array into a function in C, you cannot figure out its size.
Dialogue: 0,1:32:46.17,1:32:50.95,英文,,0,0,0,,If it's a generic array like that of integers, there are special cases that you can do that.
Dialogue: 0,1:32:50.95,1:32:57.17,英文,,0,0,0,,But in general, no, it's just not possible in C. And if that's some frustration, honestly, this is why more modern languages add that feature.
Dialogue: 0,1:32:57.17,1:32:57.37,英文,,0,0,0,,Why?
Dialogue: 0,1:32:57.37,1:33:03.22,英文,,0,0,0,,Because it was really annoying as I'm alluding here to not having that information now just to make sure I didn't screw up anywhere.
Dialogue: 0,1:33:03.22,1:33:07.67,英文,,0,0,0,,Let me compile this final version of scores.
Dialogue: 0,1:33:07.67,1:33:13.94,英文,,0,0,0,,Suspense, all good, dot slash scores, 72, 73, 33, and we're still back in business.
Dialogue: 0,1:33:13.94,1:33:15.70,英文,,0,0,0,,So this version is more complicated.
Dialogue: 0,1:33:15.70,1:33:18.48,英文,,0,0,0,,And as always, we'll have this version on the course's website for reference.
Dialogue: 0,1:33:18.48,1:33:30.45,英文,,0,0,0,,But the point really is that arrays not only can be used as containers to store multiple values, three or more in this case, you can also even pass them around as arguments as such.
Dialogue: 0,1:33:30.45,1:33:36.08,英文,,0,0,0,,All right, now, besides that, let's simplify for just a moment and consider now the world of chars.
Dialogue: 0,1:33:36.08,1:33:39.22,英文,,0,0,0,,If we've just got single bytes, where does this lead us?
Dialogue: 0,1:33:39.22,1:33:44.35,英文,,0,0,0,,And how does this get us ultimately to strings to solve problems like readability and cryptography and the like?
Dialogue: 0,1:33:44.35,1:33:49.35,英文,,0,0,0,,Well, here, for instance, are three lines of code out of context that simply store three chars.
Dialogue: 0,1:33:49.35,1:33:50.93,英文,,0,0,0,,You can already see where this is going.
Dialogue: 0,1:33:50.93,1:33:57.38,英文,,0,0,0,,Having three variables called C1, C2, C3 is clearly going to end up being bad design because of all the silly redundancy here.
Dialogue: 0,1:33:57.38,1:34:01.56,英文,,0,0,0,,But notice, I'm using single quotes like last week because these are single chars.
Dialogue: 0,1:34:01.56,1:34:04.11,英文,,0,0,0,,What does this look like in the computer's memory?
Dialogue: 0,1:34:04.11,1:34:05.39,英文,,0,0,0,,Well, it looks a little something like this.
Dialogue: 0,1:34:05.39,1:34:10.65,英文,,0,0,0,,If we clear out the old memory, C1, C2, C3 probably will end up here.
Dialogue: 0,1:34:10.65,1:34:12.59,英文,,0,0,0,,Maybe not literally in the top left-hand corner.
Dialogue: 0,1:34:12.59,1:34:14.21,英文,,0,0,0,,This is just an artist's rendition.
Dialogue: 0,1:34:14.21,1:34:18.62,英文,,0,0,0,,But C1, C2, C3 will probably end up like that.
Dialogue: 0,1:34:18.62,1:34:20.10,英文,,0,0,0,,Now, what's really there?
Dialogue: 0,1:34:20.10,1:34:21.76,英文,,0,0,0,,It's really those same three numbers, 72, 73, 33.
Dialogue: 0,1:34:21.76,1:34:28.03,英文,,0,0,0,,But how many bits does a byte have?
Dialogue: 0,1:34:28.03,1:34:29.13,英文,,0,0,0,,Just 8.
Dialogue: 0,1:34:29.13,1:34:35.35,英文,,0,0,0,,So if we were to look at the binary representation of these characters, it would only be 8 bits each.
Dialogue: 0,1:34:35.35,1:34:39.12,英文,,0,0,0,,That's enough to store small numbers like 72, 73, 33.
Dialogue: 0,1:34:39.12,1:34:41.70,英文,,0,0,0,,We're not dealing with Unicode and emoji and the like.
Dialogue: 0,1:34:41.70,1:34:43.00,英文,,0,0,0,,But the point is the same.
Dialogue: 0,1:34:43.00,1:34:45.28,英文,,0,0,0,,You don't have to use 4 bytes to store these numbers.
Dialogue: 0,1:34:45.28,1:34:47.16,英文,,0,0,0,,You can use a different data type like chars.
Dialogue: 0,1:34:47.16,1:34:51.54,英文,,0,0,0,,And underneath the hood, it's indeed going to use just single bytes for each.
Dialogue: 0,1:34:51.54,1:34:55.85,英文,,0,0,0,,But this isn't really how we implement strings.
Dialogue: 0,1:34:55.85,1:34:59.27,英文,,0,0,0,,When you wanted to say, hi, last week, or this, we used double quotes.
Dialogue: 0,1:34:59.27,1:35:02.87,英文,,0,0,0,,And we wrote all of the things together and used one variable, not three.
Dialogue: 0,1:35:02.87,1:35:06.28,英文,,0,0,0,,When I typed in David, I didn't have a variable for D-A-V-I-D.
Dialogue: 0,1:35:06.28,1:35:09.88,英文,,0,0,0,,I had one variable called name that stored the whole thing.
Dialogue: 0,1:35:09.88,1:35:13.30,英文,,0,0,0,,So in C, we keep talking about these things called strings.
Dialogue: 0,1:35:13.30,1:35:17.65,英文,,0,0,0,,We'll see eventually that strings are not necessarily what they seem to be.
Dialogue: 0,1:35:17.65,1:35:21.25,英文,,0,0,0,,But for now, the key thing about strings is that they're variable length.
Dialogue: 0,1:35:21.25,1:35:22.05,英文,,0,0,0,,So to speak, right?
Dialogue: 0,1:35:22.05,1:35:28.45,英文,,0,0,0,,They might be three characters high or five characters David or anything smaller or larger.
Dialogue: 0,1:35:28.45,1:35:33.25,英文,,0,0,0,,So how do we go about implementing strings if all we have at the end of the day is my memory?
Dialogue: 0,1:35:33.25,1:35:42.08,英文,,0,0,0,,Well, here is an example of just creating declaring and defining a string called s s because it's just a simple string and quote unquote high in double quotes.
Dialogue: 0,1:35:42.08,1:35:44.08,英文,,0,0,0,,What does this look like in the computer's memory?
Dialogue: 0,1:35:44.08,1:35:48.72,英文,,0,0,0,,Well, let's clear it again and here now because it's technically stored in one variable s.
Dialogue: 0,1:35:48.72,1:35:51.00,英文,,0,0,0,,Here is how I might draw it as an artist.
Dialogue: 0,1:35:51.00,1:35:54.10,英文,,0,0,0,,It's three bytes in total, HI exclamation point.
Dialogue: 0,1:35:54.10,1:35:56.02,英文,,0,0,0,,But there's no C1, C2, C3.
Dialogue: 0,1:35:56.02,1:36:07.05,英文,,0,0,0,,It's just the whole thing is S. But it turns out that a string, fun fact, is really just what underneath the hood?
Dialogue: 0,1:36:07.05,1:36:13.24,英文,,0,0,0,,Kind of leading up to this, what is a string if this is how it's laid out in memory?
Dialogue: 0,1:36:13.24,1:36:15.82,英文,,0,0,0,,Literally, it's just an array of characters.
Dialogue: 0,1:36:15.82,1:36:18.69,英文,,0,0,0,,And we didn't have to know about arrays last week to use strings.
Dialogue: 0,1:36:18.69,1:36:21.25,英文,,0,0,0,,This is where, again, the training wheels are starting to come off.
Dialogue: 0,1:36:21.25,1:36:25.94,英文,,0,0,0,,But a string is just an array of characters, HI exclamation point, for instance.
Dialogue: 0,1:36:25.94,1:36:33.14,英文,,0,0,0,,So technically, a string called s is really a variable called s.
Dialogue: 0,1:36:33.14,1:36:38.15,英文,,0,0,0,,That allows you to get at the first character with s bracket 0 if you want, s bracket 1, s bracket 2.
Dialogue: 0,1:36:38.15,1:36:47.15,英文,,0,0,0,,You can literally get individual characters just by treating s as though it's an array, which it really is underneath the hood in this case.
Dialogue: 0,1:36:47.15,1:36:48.83,英文,,0,0,0,,But there's a catch.
Dialogue: 0,1:36:48.83,1:36:51.59,英文,,0,0,0,,How do you know where strings end?
Dialogue: 0,1:36:51.59,1:36:57.12,英文,,0,0,0,,In the past, when I drew some integers on the screen, I know, I claim, they always take up four bytes.
Dialogue: 0,1:36:57.12,1:37:00.32,英文,,0,0,0,,If I had drawn a long, it always takes up eight bytes.
Dialogue: 0,1:37:00.32,1:37:03.72,英文,,0,0,0,,If I had drawn a character, it always takes up one byte.
Dialogue: 0,1:37:03.72,1:37:07.18,英文,,0,0,0,,But how many bytes does a string take up?
Dialogue: 0,1:37:07.18,1:37:08.44,英文,,0,0,0,,I mean, that's kind of the right answer.
Dialogue: 0,1:37:08.44,1:37:10.47,英文,,0,0,0,,In this case, three, it would seem.
Dialogue: 0,1:37:10.47,1:37:13.71,英文,,0,0,0,,But if it's David, that's a good five characters.
Dialogue: 0,1:37:13.71,1:37:16.21,英文,,0,0,0,,But where do we put the number three?
Dialogue: 0,1:37:16.21,1:37:17.81,英文,,0,0,0,,Where do you put the number five?
Dialogue: 0,1:37:17.81,1:37:20.21,英文,,0,0,0,,This is literally all that's into your computer.
Dialogue: 0,1:37:20.21,1:37:23.70,英文,,0,0,0,,This is all our building blocks in front of us.
Dialogue: 0,1:37:23.70,1:37:25.48,英文,,0,0,0,,So where does the 3 go?
Dialogue: 0,1:37:25.48,1:37:26.56,英文,,0,0,0,,Where does the 5 go?
Dialogue: 0,1:37:26.56,1:37:29.40,英文,,0,0,0,,Well, it turns out you can solve this in a couple of different ways.
Dialogue: 0,1:37:29.40,1:37:34.35,英文,,0,0,0,,But the way humans decided to implement strings years ago is indeed an array.
Dialogue: 0,1:37:34.35,1:37:42.46,英文,,0,0,0,,But they added one extra byte at the end of every such string array just to make clear with a so-called sentinel value that
Dialogue: 0,1:37:42.46,1:37:44.50,英文,,0,0,0,,The string ends here.
Dialogue: 0,1:37:44.50,1:37:45.18,英文,,0,0,0,,Why?
Dialogue: 0,1:37:45.18,1:37:54.56,英文,,0,0,0,,So that if you have two strings in the computer's memory, like high and by, you know where the barrier is between the exclamation point of one and the letter B in the next.
Dialogue: 0,1:37:54.56,1:37:56.24,英文,,0,0,0,,You need some kind of delimiter.
Dialogue: 0,1:37:56.24,1:38:00.43,英文,,0,0,0,,And so what really is underneath the hood is this.
Dialogue: 0,1:38:00.43,1:38:10.25,英文,,0,0,0,,When you store a string in memory, when you type in a string as the user, if you type in three characters, it's going to use 3 plus 1 equals 4 bytes in total.
Dialogue: 0,1:38:10.25,1:38:14.16,英文,,0,0,0,,If you type in David, it's going to use 5 plus 1 equals 6 bytes in total.
Dialogue: 0,1:38:14.16,1:38:14.76,英文,,0,0,0,,Why?
Dialogue: 0,1:38:14.76,1:38:20.36,英文,,0,0,0,,Because C automatically adds this special 0 at the end of the string.
Dialogue: 0,1:38:20.36,1:38:25.74,英文,,0,0,0,,I've drawn it with backslash zero because this is how you represent zero as a char, as a character.
Dialogue: 0,1:38:25.74,1:38:28.32,英文,,0,0,0,,But this is literally just zero, as we'll soon see.
Dialogue: 0,1:38:28.32,1:38:36.27,英文,,0,0,0,,So anytime there's a string in memory, it always takes up one more byte than you yourself as the programmer or human typed in.
Dialogue: 0,1:38:36.27,1:38:45.31,英文,,0,0,0,,In fact, if we convert this again just for discussion's sake to those integers, what's literally stored in the computer's memory is gonna be 72, 73, 33 and now a zero.
Dialogue: 0,1:38:45.31,1:38:48.21,英文,,0,0,0,,And the computer, because of C and how it was invented,
Dialogue: 0,1:38:48.21,1:38:54.71,英文,,0,0,0,,It's just smart enough to know that when you print out a string, it prints out every character until it sees a 0.
Dialogue: 0,1:38:54.71,1:38:56.19,英文,,0,0,0,,And then it just stops printing.
Dialogue: 0,1:38:56.19,1:38:58.49,英文,,0,0,0,,In particular, printf knows how this works.
Dialogue: 0,1:38:58.49,1:39:02.23,英文,,0,0,0,,And this is why printf knows when to stop printing.
Dialogue: 0,1:39:02.23,1:39:03.77,英文,,0,0,0,,Decimal numbers are not that enlightening.
Dialogue: 0,1:39:03.77,1:39:05.83,英文,,0,0,0,,We'll generally write the characters like this.
Dialogue: 0,1:39:05.83,1:39:09.23,英文,,0,0,0,,And again, backslash 0 is just special symbology.
Dialogue: 0,1:39:09.23,1:39:13.37,英文,,0,0,0,,It's what the programmer types to make clear that you're not saying, hi, 0.
Dialogue: 0,1:39:13.37,1:39:14.55,英文,,0,0,0,,You're saying hi.
Dialogue: 0,1:39:14.55,1:39:17.32,英文,,0,0,0,,And then it's a special zero specifically.
Dialogue: 0,1:39:17.32,1:39:22.24,英文,,0,0,0,,It is 80 bits that indicate that it's the end of the string.
Dialogue: 0,1:39:22.24,1:39:24.14,英文,,0,0,0,,Technically that backslash zero.
Dialogue: 0,1:39:24.14,1:39:30.32,英文,,0,0,0,,If you want to be fancy, it's called null and you l and it turns out you've seen this before that we didn't call it out.
Dialogue: 0,1:39:30.32,1:39:33.36,英文,,0,0,0,,Here's that same asking chart from the past couple of weeks.
Dialogue: 0,1:39:33.36,1:39:39.29,英文,,0,0,0,,If I highlight this, what is decimal number zero mapping to?
Dialogue: 0,1:39:39.29,1:39:44.05,英文,,0,0,0,,NUL, which is just programmer speak for the special null character, all zero bits.
Dialogue: 0,1:39:44.05,1:39:46.59,英文,,0,0,0,,That means the string ends here.
Dialogue: 0,1:39:46.59,1:39:48.44,英文,,0,0,0,,This all happens automatically for you.
Dialogue: 0,1:39:48.44,1:39:53.66,英文,,0,0,0,,You do not need to create these null characters or these zeros.
Dialogue: 0,1:39:53.66,1:40:00.17,英文,,0,0,0,,Any questions then on this implementation thus far?
Dialogue: 0,1:40:00.17,1:40:01.99,英文,,0,0,0,,Any questions here?
Dialogue: 0,1:40:01.99,1:40:02.91,英文,,0,0,0,,No, well, let me do this.
Dialogue: 0,1:40:02.91,1:40:05.39,英文,,0,0,0,,Let me go back to V. S. Code in a second.
Dialogue: 0,1:40:05.39,1:40:07.78,英文,,0,0,0,,And let's actually corroborate this with some code.
Dialogue: 0,1:40:07.78,1:40:11.96,英文,,0,0,0,,Let me go ahead and create a small program called high dot C. And how about we do this?
Dialogue: 0,1:40:11.96,1:40:18.72,英文,,0,0,0,,Let me include standard I O dot H. Let me include. Let me type out main void as always.
Dialogue: 0,1:40:18.72,1:40:20.98,英文,,0,0,0,,And now let me do something simple and kind of bad.
Dialogue: 0,1:40:20.98,1:40:25.12,英文,,0,0,0,,But char C one equals quote unquote H in single quotes.
Dialogue: 0,1:40:25.12,1:40:32.89,英文,,0,0,0,,Char C2 equals quote unquote I in single quotes and lastly char C3 equals exclamation point in single quotes.
Dialogue: 0,1:40:32.89,1:40:34.65,英文,,0,0,0,,And now let me just print this out.
Dialogue: 0,1:40:34.65,1:40:36.95,英文,,0,0,0,,I can't use percent s because that is not a string.
Dialogue: 0,1:40:36.95,1:40:40.45,英文,,0,0,0,,That's literally three chars because that's the design decision I made.
Dialogue: 0,1:40:40.45,1:40:42.01,英文,,0,0,0,,But I could do this.
Dialogue: 0,1:40:42.01,1:40:45.92,英文,,0,0,0,,%c, %c, %c, which we haven't seen before.
Dialogue: 0,1:40:45.92,1:40:51.32,英文,,0,0,0,,But %s is string, %i is int, %c is indeed char.
Dialogue: 0,1:40:51.32,1:40:54.20,英文,,0,0,0,,So let me put a backslash n at the end for cleanliness.
Dialogue: 0,1:40:54.20,1:40:56.49,英文,,0,0,0,,And now do c1, c2, c3.
Dialogue: 0,1:40:56.49,1:41:00.35,英文,,0,0,0,,So this is like a char-based version of printing string.
Dialogue: 0,1:41:00.35,1:41:01.87,英文,,0,0,0,,So let me make high.
Dialogue: 0,1:41:01.87,1:41:03.49,英文,,0,0,0,,And then let me do dot slash high.
Dialogue: 0,1:41:03.49,1:41:06.03,英文,,0,0,0,,And it looks like I used printf with %s.
Dialogue: 0,1:41:06.03,1:41:09.86,英文,,0,0,0,,But I did things very manually by printing out each individual character.
Dialogue: 0,1:41:09.86,1:41:16.56,英文,,0,0,0,,What's cool now, though, is that once you know that characters are just numbers and strings are just characters, you can kind of poke around.
Dialogue: 0,1:41:16.56,1:41:21.08,英文,,0,0,0,,Let me change all three placeholders to %i.
Dialogue: 0,1:41:21.08,1:41:23.78,英文,,0,0,0,,Instead, and this is totally fine, too.
Dialogue: 0,1:41:23.78,1:41:27.35,英文,,0,0,0,,Let me rerun this make high dot slash.
Dialogue: 0,1:41:27.35,1:41:31.45,英文,,0,0,0,,Um, actually, let me make one change just so we can see this.
Dialogue: 0,1:41:31.45,1:41:34.09,英文,,0,0,0,,Let me add spaces just for aesthetics sake.
Dialogue: 0,1:41:34.09,1:41:37.87,英文,,0,0,0,,Let me do make high dot slash high enter.
Dialogue: 0,1:41:37.87,1:41:44.46,英文,,0,0,0,,And voila, now you can actually see the numbers that I claimed back in week zero were, in fact, happening underneath the hood.
Dialogue: 0,1:41:44.46,1:41:45.88,英文,,0,0,0,,Well, this is not how you would make strings.
Dialogue: 0,1:41:45.88,1:41:50.94,英文,,0,0,0,,It would be incredibly tedious to have three variables for three-letter words, five variables for five-letter words.
Dialogue: 0,1:41:50.94,1:41:52.92,英文,,0,0,0,,We've been using, of course, strings since last week.
Dialogue: 0,1:41:52.92,1:41:54.60,英文,,0,0,0,,So let's do that instead.
Dialogue: 0,1:41:54.60,1:41:59.73,英文,,0,0,0,,String s equals quote, unquote, double quotes, hi.
Dialogue: 0,1:41:59.73,1:42:04.57,英文,,0,0,0,,For this, no, because of these training wheels, I need to include the CS50 library.
Dialogue: 0,1:42:04.57,1:42:06.62,英文,,0,0,0,,But we'll come back to that in the coming weeks.
Dialogue: 0,1:42:06.62,1:42:11.77,英文,,0,0,0,,But for now, I'm going to go ahead and create a string s called, quote unquote, hi.
Dialogue: 0,1:42:11.77,1:42:17.62,英文,,0,0,0,,And now I'm going to change this to be more familiar percent s. And now just print out s itself.
Dialogue: 0,1:42:17.62,1:42:19.54,英文,,0,0,0,,This, of course, is the same thing as last week.
Dialogue: 0,1:42:19.54,1:42:21.94,英文,,0,0,0,,Dot slash high gives me the exact same thing.
Dialogue: 0,1:42:21.94,1:42:24.94,英文,,0,0,0,,But now we're dealing, of course, with strings.
Dialogue: 0,1:42:24.94,1:42:27.51,英文,,0,0,0,,But how can we see a little beyond that?
Dialogue: 0,1:42:27.51,1:42:28.83,英文,,0,0,0,,Well, how about this?
Dialogue: 0,1:42:28.83,1:42:31.75,英文,,0,0,0,,Let's poke around further with today's primitives.
Dialogue: 0,1:42:31.75,1:42:39.16,英文,,0,0,0,,Even though s is a string, I could technically print out its first character with percent C by doing s bracket zero.
Dialogue: 0,1:42:39.16,1:42:43.22,英文,,0,0,0,,I could technically print out its second character with percent C by doing s bracket one.
Dialogue: 0,1:42:43.22,1:42:47.89,英文,,0,0,0,,I could print out its third character with percent C and printing out s bracket two.
Dialogue: 0,1:42:47.89,1:42:52.09,英文,,0,0,0,,So again, this just derives logically from my understanding now of that strings are raised.
Dialogue: 0,1:42:52.09,1:42:54.63,英文,,0,0,0,,As you note, let me do make
Dialogue: 0,1:42:54.63,1:42:58.56,英文,,0,0,0,,Let me do make high, dot slash high, and no visual change.
Dialogue: 0,1:42:58.56,1:43:00.68,英文,,0,0,0,,But I'm just kind of now tinkering around.
Dialogue: 0,1:43:00.68,1:43:03.42,英文,,0,0,0,,And in fact, if you're really curious, let me do this.
Dialogue: 0,1:43:03.42,1:43:09.80,英文,,0,0,0,,Let me change these back to i, back to i, back to i. And let me add a fourth one.
Dialogue: 0,1:43:09.80,1:43:14.67,英文,,0,0,0,,Because if I'm really curious now, let's see what's at s bracket 3.
Dialogue: 0,1:43:14.67,1:43:16.09,英文,,0,0,0,,This is the fourth byte.
Dialogue: 0,1:43:16.09,1:43:22.01,英文,,0,0,0,,And even though the string itself is hi, I think we can corroborate this whole null thing.
Dialogue: 0,1:43:22.01,1:43:25.25,英文,,0,0,0,,Make high dot slash high enter.
Dialogue: 0,1:43:25.25,1:43:26.37,英文,,0,0,0,,And there it is.
Dialogue: 0,1:43:26.37,1:43:29.60,英文,,0,0,0,,You could have done this last week if you really wanted to geek out on strings.
Dialogue: 0,1:43:29.60,1:43:36.58,英文,,0,0,0,,But like for now, it's just revealing what's going on underneath the hood questions then on what these strings are.
Dialogue: 0,1:43:36.58,1:43:41.48,英文,,0,0,0,,Yeah.
Dialogue: 0,1:43:41.48,1:43:46.12,英文,,0,0,0,,Why do we need the bracket?
Dialogue: 0,1:43:46.12,1:43:47.14,英文,,0,0,0,,Why do you not need brackets?
Dialogue: 0,1:43:47.14,1:43:47.92,英文,,0,0,0,,Good question.
Dialogue: 0,1:43:47.92,1:43:51.64,英文,,0,0,0,,Why do I not need brackets on line six?
Dialogue: 0,1:43:51.64,1:43:53.37,英文,,0,0,0,,Because S is a string.
Dialogue: 0,1:43:53.37,1:44:00.36,英文,,0,0,0,,We'll see in a couple of weeks that S is essentially implemented underneath the hood, indeed, as an array.
Dialogue: 0,1:44:00.36,1:44:02.26,英文,,0,0,0,,But that happens automatically for you.
Dialogue: 0,1:44:02.26,1:44:06.80,英文,,0,0,0,,You can treat S. as just a variable name without square brackets.
Dialogue: 0,1:44:06.80,1:44:13.87,英文,,0,0,0,,You will use square brackets when you have a raise of ints or you manually create a raise of chars or doubles or floats or anything else.
Dialogue: 0,1:44:13.87,1:44:14.91,英文,,0,0,0,,But strings are special.
Dialogue: 0,1:44:14.91,1:44:15.53,英文,,0,0,0,,Why?
Dialogue: 0,1:44:15.53,1:44:19.15,英文,,0,0,0,,I mean, every program you write seems to use strings text in some form.
Dialogue: 0,1:44:19.15,1:44:19.67,英文,,0,0,0,,We're humans.
Dialogue: 0,1:44:19.67,1:44:21.83,英文,,0,0,0,,We like text, not just numbers and and such.
Dialogue: 0,1:44:21.83,1:44:28.68,英文,,0,0,0,,So this is just treated a little specially in C and many other languages as well.
Dialogue: 0,1:44:28.68,1:44:31.48,英文,,0,0,0,,Other questions on this here.
Dialogue: 0,1:44:31.48,1:44:33.56,英文,,0,0,0,,Now let's add, then, one other string to the mix.
Dialogue: 0,1:44:33.56,1:44:38.81,英文,,0,0,0,,So instead of just saying hi, why don't we consider a version of the program that says both hi and bye.
Dialogue: 0,1:44:38.81,1:44:48.59,英文,,0,0,0,,And I claim now that that backslash 0, that null character, is going to be ever more important now if we've got two strings in memory so that C knows how to distinguish one from the other.
Dialogue: 0,1:44:48.59,1:44:51.14,英文,,0,0,0,,So let me go ahead and just get rid of these two lines for the moment.
Dialogue: 0,1:44:51.14,1:44:55.56,英文,,0,0,0,,Let me recreate string s equals quote, unquote, double quotes, hi.
Dialogue: 0,1:44:55.56,1:44:56.76,英文,,0,0,0,,Let me give myself another one.
Dialogue: 0,1:44:56.76,1:44:59.80,英文,,0,0,0,,And because I'm just playing around, I'll choose very short variable names.
Dialogue: 0,1:44:59.80,1:45:04.48,英文,,0,0,0,,String t equals quote unquote by exclamation point.
Dialogue: 0,1:45:04.48,1:45:06.52,英文,,0,0,0,,And then let me just print them both out.
Dialogue: 0,1:45:06.52,1:45:21.82,英文,,0,0,0,,Let me go ahead and print out percent s backslash n comma s and then print f percent s backslash n and then t. So very simple demonstration of just these two variables make high
Dialogue: 0,1:45:21.82,1:45:22.66,英文,,0,0,0,,Dot slash high.
Dialogue: 0,1:45:22.66,1:45:26.28,英文,,0,0,0,,And of course it prints out two lines one after the other.
Dialogue: 0,1:45:26.28,1:45:27.96,英文,,0,0,0,,What's actually going on underneath the hood?
Dialogue: 0,1:45:27.96,1:45:29.95,英文,,0,0,0,,Well, let's go back to the computer's memory high.
Dialogue: 0,1:45:29.95,1:45:32.09,英文,,0,0,0,,I think it's gonna be, I claim pretty much the same.
Dialogue: 0,1:45:32.09,1:45:36.19,英文,,0,0,0,,So s I'll claim is in the top left, followed by the backslash zero.
Dialogue: 0,1:45:36.19,1:45:43.18,英文,,0,0,0,,And that's important now because by probably is going to end up there and visually it wraps just by nature of how I've drawn this grid of bites.
Dialogue: 0,1:45:43.18,1:45:44.46,英文,,0,0,0,,But it's contiguous.
Dialogue: 0,1:45:44.46,1:45:49.19,英文,,0,0,0,,B, Y, E, exclamation point, null, AKA backslash zero.
Dialogue: 0,1:45:49.19,1:45:58.73,英文,,0,0,0,,This is now helpful to printf, because now printf knows where one begins and ends by way of that special null character.
Dialogue: 0,1:45:58.73,1:46:00.39,英文,,0,0,0,,But we can poke around now, too.
Dialogue: 0,1:46:00.39,1:46:01.52,英文,,0,0,0,,What else can I do here?
Dialogue: 0,1:46:01.52,1:46:03.04,英文,,0,0,0,,How about this?
Dialogue: 0,1:46:03.04,1:46:05.91,英文,,0,0,0,,How about I go into my code here?
Dialogue: 0,1:46:05.91,1:46:07.46,英文,,0,0,0,,Back to BS code.
Dialogue: 0,1:46:07.46,1:46:15.42,英文,,0,0,0,,And let me go ahead and say something like, well, if I've got two of these strings, let's put them in an array.
Dialogue: 0,1:46:15.42,1:46:20.42,英文,,0,0,0,,Let's kind of do this sort of arrays in arrays, sort of inception style here.
Dialogue: 0,1:46:20.42,1:46:23.14,英文,,0,0,0,,So string words, bracket 2.
Dialogue: 0,1:46:23.14,1:46:28.07,英文,,0,0,0,,So give me an array of two strings is what I'm saying here in code, even though we've not done it with strings yet.
Dialogue: 0,1:46:28.07,1:46:29.51,英文,,0,0,0,,We only did it with ints.
Dialogue: 0,1:46:29.51,1:46:30.95,英文,,0,0,0,,And now let me do this.
Dialogue: 0,1:46:30.95,1:46:32.73,英文,,0,0,0,,The first word, a.k.a.
Dialogue: 0,1:46:32.73,1:46:35.73,英文,,0,0,0,,words bracket 0, will equal, as before, hi.
Dialogue: 0,1:46:35.73,1:46:40.06,英文,,0,0,0,,And now words bracket one will equal, quote unquote, by bytes.
Dialogue: 0,1:46:40.06,1:46:41.14,英文,,0,0,0,,So by.
Dialogue: 0,1:46:41.14,1:46:43.16,英文,,0,0,0,,And now I've done the exact same thing.
Dialogue: 0,1:46:43.16,1:46:48.80,英文,,0,0,0,,But again, I'm just avoiding having S T Q R and like all these different variables in my code.
Dialogue: 0,1:46:48.80,1:46:52.97,英文,,0,0,0,,I just now I'm treating them as one single array of strings.
Dialogue: 0,1:46:52.97,1:46:54.63,英文,,0,0,0,,How do I change my code down here?
Dialogue: 0,1:46:54.63,1:46:57.53,英文,,0,0,0,,Well, if I want to print the first word, I do words bracket zero.
Dialogue: 0,1:46:57.53,1:46:59.98,英文,,0,0,0,,And if I want to print the second word, I do words bracket one.
Dialogue: 0,1:46:59.98,1:47:04.12,英文,,0,0,0,,This is not a useful exercise at the moment, because I'm just making my code more complicated.
Dialogue: 0,1:47:04.12,1:47:09.70,英文,,0,0,0,,But again, it allows us to poke around and see what's going on, because there is that hi and bye.
Dialogue: 0,1:47:09.70,1:47:10.83,英文,,0,0,0,,But watch this.
Dialogue: 0,1:47:10.83,1:47:14.71,英文,,0,0,0,,If I really want to be cool, I can do this.
Dialogue: 0,1:47:14.71,1:47:19.85,英文,,0,0,0,,Let's print out %c, %c, %c, backslash n.
Dialogue: 0,1:47:19.85,1:47:24.42,英文,,0,0,0,,And then here, %c, %c, %c, %c.
Dialogue: 0,1:47:24.42,1:47:25.94,英文,,0,0,0,,So four of those.
Dialogue: 0,1:47:25.94,1:47:28.64,英文,,0,0,0,,And now, here's where things get interesting.
Dialogue: 0,1:47:28.64,1:47:30.42,英文,,0,0,0,,Words is an array of strings.
Dialogue: 0,1:47:30.42,1:47:35.14,英文,,0,0,0,,But again, if I may, what's a string? An array of characters.
Dialogue: 0,1:47:35.14,1:47:36.94,英文,,0,0,0,,So just use the same logic.
Dialogue: 0,1:47:36.94,1:47:41.20,英文,,0,0,0,,If words is an array of strings, you get at the first string with words bracket 0.
Dialogue: 0,1:47:41.20,1:47:44.65,英文,,0,0,0,,How do you get at the first character in the first string?
Dialogue: 0,1:47:44.65,1:47:46.11,英文,,0,0,0,,Bracket 0.
Dialogue: 0,1:47:46.11,1:47:49.03,英文,,0,0,0,,Words bracket 0, bracket 1.
Dialogue: 0,1:47:49.03,1:47:52.39,英文,,0,0,0,,And lastly, words bracket 0 bracket 2.
Dialogue: 0,1:47:52.39,1:47:57.66,英文,,0,0,0,,And now down here, words bracket 1, but the first character is there.
Dialogue: 0,1:47:57.66,1:48:00.56,英文,,0,0,0,,Words bracket 1, the second character is here.
Dialogue: 0,1:48:00.56,1:48:03.17,英文,,0,0,0,,Words bracket 1, the third character's here.
Dialogue: 0,1:48:03.17,1:48:03.73,英文,,0,0,0,,Whoops.
Dialogue: 0,1:48:03.73,1:48:07.95,英文,,0,0,0,,Third character's here. And words bracket 1, the fourth character is here.
Dialogue: 0,1:48:07.95,1:48:09.17,英文,,0,0,0,,This is not how people program.
Dialogue: 0,1:48:09.17,1:48:10.83,英文,,0,0,0,,This is only for demonstration sake.
Dialogue: 0,1:48:10.83,1:48:13.04,英文,,0,0,0,,My God, it's so tedious and verbose already.
Dialogue: 0,1:48:13.04,1:48:23.17,英文,,0,0,0,,But if I make high now dot slash high now I'm like manually reinventing percent s if I forgot it existed using percent c alone.
Dialogue: 0,1:48:23.17,1:48:26.05,英文,,0,0,0,,But you can indeed manipulate a raise in this way.
Dialogue: 0,1:48:26.05,1:48:37.27,英文,,0,0,0,,But because strings are arrays of characters, you can manipulate strings in this way to any question now on this syntax.
Dialogue: 0,1:48:37.27,1:48:39.63,英文,,0,0,0,,Any questions here?
Dialogue: 0,1:48:39.63,1:48:39.97,英文,,0,0,0,,No?
Dialogue: 0,1:48:39.97,1:48:40.29,英文,,0,0,0,,All right.
Dialogue: 0,1:48:40.29,1:48:45.85,英文,,0,0,0,,Well, let's go ahead and propose that we solve a couple of other problems we might not have as before.
Dialogue: 0,1:48:45.85,1:48:49.23,英文,,0,0,0,,But first, a quick visual of what's been going on underneath the hood here.
Dialogue: 0,1:48:49.23,1:49:01.04,英文,,0,0,0,,If here, again, is where we left off on the screen high and back to back, here is really how I just treated these things, s bracket 0, 1, 2, 3, and then t 0, 1, 2, 3, 4.
Dialogue: 0,1:49:01.04,1:49:05.04,英文,,0,0,0,,But really, once I put them in an array, the picture becomes this.
Dialogue: 0,1:49:05.04,1:49:07.44,英文,,0,0,0,,Words bracket zero is the whole high words.
Dialogue: 0,1:49:07.44,1:49:08.70,英文,,0,0,0,,Bracket one is the whole by.
Dialogue: 0,1:49:08.70,1:49:20.79,英文,,0,0,0,,But if I really get into the weeds and start indexing into individual characters in those strings, all I'm using is new syntax in order to represent the same values here.
Dialogue: 0,1:49:20.79,1:49:28.84,英文,,0,0,0,,Questions then on these representations before we forge ahead.
Dialogue: 0,1:49:28.84,1:49:29.60,英文,,0,0,0,,No.
Dialogue: 0,1:49:29.60,1:49:33.51,英文,,0,0,0,,Yeah.
Dialogue: 0,1:49:33.51,1:49:42.84,英文,,0,0,0,,Does the new line character take up any space?
Dialogue: 0,1:49:42.84,1:49:48.95,英文,,0,0,0,,It does so far as printf is concerned, but I'm not storing the backslash n in my strings.
Dialogue: 0,1:49:48.95,1:49:53.43,英文,,0,0,0,,Printf is being manually handed that thing instead.
Dialogue: 0,1:49:53.43,1:50:00.68,英文,,0,0,0,,All right, so let's go ahead then and consider how we might solve some problems that have arisen now with these strings as follows here.
Dialogue: 0,1:50:00.68,1:50:02.68,英文,,0,0,0,,Suppose I, let's do this.
Dialogue: 0,1:50:02.68,1:50:04.58,英文,,0,0,0,,Let me go back to VS Code here.
Dialogue: 0,1:50:04.58,1:50:10.17,英文,,0,0,0,,And let me go ahead and open up a new file called, how about, length.c.
Dialogue: 0,1:50:10.17,1:50:16.15,英文,,0,0,0,,And let's consider for a moment how I might actually figure out what the length of a string is, which is distinct from the length of an array.
Dialogue: 0,1:50:16.15,1:50:20.21,英文,,0,0,0,,I claimed earlier, you cannot figure out dynamically what the length of an array is.
Dialogue: 0,1:50:20.21,1:50:27.02,英文,,0,0,0,,But I can figure out the length of a string specifically because of this implementation detail of that null character.
Dialogue: 0,1:50:27.02,1:50:28.52,英文,,0,0,0,,So let me go ahead and do this.
Dialogue: 0,1:50:28.52,1:50:32.12,英文,,0,0,0,,Let me include CS50.h in this second program here.
Dialogue: 0,1:50:32.12,1:50:35.28,英文,,0,0,0,,Let me include standard io.h as before.
Dialogue: 0,1:50:35.28,1:50:38.36,英文,,0,0,0,,And let me do this, int main void.
Dialogue: 0,1:50:38.36,1:50:40.94,英文,,0,0,0,,And in the first thing I'll do is just get a string from the user.
Dialogue: 0,1:50:40.94,1:50:43.27,英文,,0,0,0,,I'll ask the user as always for their name.
Dialogue: 0,1:50:43.27,1:50:46.43,英文,,0,0,0,,So I'll call get string and say, what's your name?
Dialogue: 0,1:50:46.43,1:50:48.43,英文,,0,0,0,,Question mark as always.
Dialogue: 0,1:50:48.43,1:50:55.91,英文,,0,0,0,,And then down here, if I want to figure out the length of this string and print the name, the print the length out on the screen.
Dialogue: 0,1:50:55.91,1:50:59.83,英文,,0,0,0,,Well, I can kind of do this similar in spirit to the average where I'm accumulating something.
Dialogue: 0,1:50:59.83,1:51:02.75,英文,,0,0,0,,Let me go ahead and initialize end to zero.
Dialogue: 0,1:51:02.75,1:51:04.83,英文,,0,0,0,,Let me give myself
Dialogue: 0,1:51:04.83,1:51:08.68,英文,,0,0,0,,Huh, it's not a for loop, because I don't know in advance how long it is.
Dialogue: 0,1:51:08.68,1:51:11.79,英文,,0,0,0,,But what if I do this?
Dialogue: 0,1:51:11.79,1:51:20.67,英文,,0,0,0,,while he value at name bracket n does not equal single quote backslash 0.
Dialogue: 0,1:51:20.67,1:51:25.57,英文,,0,0,0,,Crazy syntax at the moment, but it's just the culmination of these various building blocks.
Dialogue: 0,1:51:25.57,1:51:29.17,英文,,0,0,0,,Let me just finish the thought here, n plus plus.
Dialogue: 0,1:51:29.17,1:51:35.87,英文,,0,0,0,,And then down here, let's just print out with printf and %i that value of n.
Dialogue: 0,1:51:35.87,1:51:43.38,英文,,0,0,0,,So I claim this is going to show me the length of any string I type in, whether it's high or by or David or anything else.
Dialogue: 0,1:51:43.38,1:51:44.98,英文,,0,0,0,,I initialize a variable to zero.
Dialogue: 0,1:51:44.98,1:51:47.52,英文,,0,0,0,,And that's good because that's where you start counting in general.
Dialogue: 0,1:51:47.52,1:51:50.98,英文,,0,0,0,,While name bracket zero does not equal backslash zero.
Dialogue: 0,1:51:50.98,1:51:51.94,英文,,0,0,0,,What is this saying?
Dialogue: 0,1:51:51.94,1:51:59.53,英文,,0,0,0,,Well, if name is the string the user typed in and name is just an array, as you noted, the name bracket zero is going to be the first character.
Dialogue: 0,1:51:59.53,1:52:00.63,英文,,0,0,0,,And I'm asking the question,
Dialogue: 0,1:52:00.63,1:52:03.71,英文,,0,0,0,,Well, does the first character not equal backslash zero?
Dialogue: 0,1:52:03.71,1:52:06.33,英文,,0,0,0,,And if I type in David D, it's not.
Dialogue: 0,1:52:06.33,1:52:08.89,英文,,0,0,0,,So I keep going and I add one to end.
Dialogue: 0,1:52:08.89,1:52:11.12,英文,,0,0,0,,Then I'm gonna check name bracket one.
Dialogue: 0,1:52:11.12,1:52:16.02,英文,,0,0,0,,Well, if I typed in David name bracket one is gonna be a a does not equal backslash zero.
Dialogue: 0,1:52:16.02,1:52:17.38,英文,,0,0,0,,And so it's gonna go again.
Dialogue: 0,1:52:17.38,1:52:18.86,英文,,0,0,0,,And again and again.
Dialogue: 0,1:52:18.86,1:52:29.89,英文,,0,0,0,,But five steps in total later, it's going to get to the byte after DAVID realized, wait a minute, that is a backslash n. The loop finishes, and I print out the total length.
Dialogue: 0,1:52:29.89,1:52:34.95,英文,,0,0,0,,Arrays, in general, do not have this null character. However, strings do.
Dialogue: 0,1:52:34.95,1:52:39.77,英文,,0,0,0,,Again, strings are special versus all of the other data types we've talked about thus far.
Dialogue: 0,1:52:39.77,1:52:42.16,英文,,0,0,0,,But how could I, for instance,
Dialogue: 0,1:52:42.16,1:52:47.28,英文,,0,0,0,,do this differently, well, let's actually factor this out as a function, as I've commonly done.
Dialogue: 0,1:52:47.28,1:52:50.54,英文,,0,0,0,,But rather than implement it myself, you know what?
Dialogue: 0,1:52:50.54,1:52:57.27,英文,,0,0,0,,It turns out what's nice about strings being so common, there are many other people who have solved these problems before.
Dialogue: 0,1:52:57.27,1:53:00.55,英文,,0,0,0,,And in fact, there's a whole string library in C.
Dialogue: 0,1:53:00.55,1:53:04.38,英文,,0,0,0,,It is used by way of a header file called string.h.
Dialogue: 0,1:53:04.38,1:53:08.30,英文,,0,0,0,,And what string.h is is a library of string-related functions.
Dialogue: 0,1:53:08.30,1:53:16.53,英文,,0,0,0,,In fact, you can see in CS50's manual pages for C the string.h functions, at least those that we recommend as most useful.
Dialogue: 0,1:53:16.53,1:53:20.81,英文,,0,0,0,,And in particular, if you poke around there, you'll see that there's a function called strlang.
Dialogue: 0,1:53:20.81,1:53:22.14,英文,,0,0,0,,Means string length.
Dialogue: 0,1:53:22.14,1:53:25.84,英文,,0,0,0,,It was named very succinctly just because it's a little easier to type than string length.
Dialogue: 0,1:53:25.84,1:53:28.86,英文,,0,0,0,,But Sterling tells you the length of a string.
Dialogue: 0,1:53:28.86,1:53:30.96,英文,,0,0,0,,So how might I use this in my code here?
Dialogue: 0,1:53:30.96,1:53:34.03,英文,,0,0,0,,Well, it turns out I can simplify this quite a bit.
Dialogue: 0,1:53:34.03,1:53:40.01,英文,,0,0,0,,Let me get rid of my loop, get rid of my my counting manually and do something like this.
Dialogue: 0,1:53:40.01,1:53:45.70,英文,,0,0,0,,Int n equals Sterling of the human's name name.
Dialogue: 0,1:53:45.70,1:53:54.56,英文,,0,0,0,,And now I'll just use print F as before, with percent I backslash N and output the value of N. But but there's a bug at the moment.
Dialogue: 0,1:53:54.56,1:53:58.54,英文,,0,0,0,,What have I forgotten to do?
Dialogue: 0,1:53:58.54,1:54:01.72,英文,,0,0,0,,Yeah, I have to include the header file at the top of the screen.
Dialogue: 0,1:54:01.72,1:54:03.14,英文,,0,0,0,,So let me at the top of the code.
Dialogue: 0,1:54:03.14,1:54:10.99,英文,,0,0,0,,So let me also include string dot H at the top of my file so that C knows that in fact Sterling exists.
Dialogue: 0,1:54:10.99,1:54:14.27,英文,,0,0,0,,Let me go ahead and make length as before.
Dialogue: 0,1:54:14.27,1:54:18.77,英文,,0,0,0,,Dot slash length, or actually really for the first time, what's your name?
Dialogue: 0,1:54:18.77,1:54:19.57,英文,,0,0,0,,D-A-V-I-D.
Dialogue: 0,1:54:19.57,1:54:22.39,英文,,0,0,0,,And hopefully, I'm going to see, in fact, five.
Dialogue: 0,1:54:22.39,1:54:27.11,英文,,0,0,0,,By contrast, if I run it again and type in high exclamation point, now I see three.
Dialogue: 0,1:54:27.11,1:54:29.85,英文,,0,0,0,,So Sterling is just one of the functions in that library.
Dialogue: 0,1:54:29.85,1:54:30.91,英文,,0,0,0,,And there's so many more.
Dialogue: 0,1:54:30.91,1:54:35.85,英文,,0,0,0,,In fact, yet another library that might be useful moving forward is this one, ctype.
Dialogue: 0,1:54:35.85,1:54:40.50,英文,,0,0,0,,which relates to C data types and lots of functions therein that can be useful.
Dialogue: 0,1:54:40.50,1:54:49.44,英文,,0,0,0,,For instance, if you review its documentation in the manual pages online, you'll see that there are functions via which we can solve problems like this.
Dialogue: 0,1:54:49.44,1:54:52.51,英文,,0,0,0,,Let me go ahead and propose here.
Dialogue: 0,1:54:52.51,1:54:53.73,英文,,0,0,0,,Let me see.
Dialogue: 0,1:54:53.73,1:54:59.24,英文,,0,0,0,,Let's do example here involving
Dialogue: 0,1:54:59.24,1:55:06.79,英文,,0,0,0,,How about checking if something is uppercase or lowercase and converting it to uppercase only?
Dialogue: 0,1:55:06.79,1:55:11.09,英文,,0,0,0,,Let me go back to VS Code and code a program called uppercase.c.
Dialogue: 0,1:55:11.09,1:55:15.34,英文,,0,0,0,,In this file, I'm going to start by including now, as always, cs50.h.
Dialogue: 0,1:55:15.34,1:55:20.52,英文,,0,0,0,,I'm going to include standard io.h, and I'm going to add one other
Dialogue: 0,1:55:20.52,1:55:24.01,英文,,0,0,0,,to the mix, which is string.h now 2.
Dialogue: 0,1:55:24.01,1:55:26.49,英文,,0,0,0,,So I can access the length of things as needed.
Dialogue: 0,1:55:26.49,1:55:28.77,英文,,0,0,0,,Int main void comes next.
Dialogue: 0,1:55:28.77,1:55:34.43,英文,,0,0,0,,And then within my main function, I'm going to go ahead and declare a string called s. I'm going to call get string as before.
Dialogue: 0,1:55:34.43,1:55:38.18,英文,,0,0,0,,And I'm going to go ahead and just ask the user for a string called before.
Dialogue: 0,1:55:38.18,1:55:39.66,英文,,0,0,0,,I want to do a before and after.
Dialogue: 0,1:55:39.66,1:55:41.50,英文,,0,0,0,,Whatever the user types in is before.
Dialogue: 0,1:55:41.50,1:55:44.98,英文,,0,0,0,,But I want to force everything to uppercase thereafter.
Dialogue: 0,1:55:44.98,1:55:46.82,英文,,0,0,0,,Let me now, in this loop,
Dialogue: 0,1:55:46.82,1:55:48.68,英文,,0,0,0,,Here do this.
Dialogue: 0,1:55:48.68,1:55:53.96,英文,,0,0,0,,Let me print F quote unquote after just so we can see this on the screen.
Dialogue: 0,1:55:53.96,1:55:55.72,英文,,0,0,0,,And let me do four.
Dialogue: 0,1:55:55.72,1:55:57.97,英文,,0,0,0,,And I get zero.
Dialogue: 0,1:55:57.97,1:56:02.67,英文,,0,0,0,,I is less than Sterling of s I plus plus.
Dialogue: 0,1:56:02.67,1:56:03.63,英文,,0,0,0,,What am I about to do?
Dialogue: 0,1:56:03.63,1:56:17.12,英文,,0,0,0,,I'm about to iterate over every character in the string from left to right from zero on up to but not through the length of s. And how do I check if something is lower case so that I can actually force it to uppercase?
Dialogue: 0,1:56:17.12,1:56:27.62,英文,,0,0,0,,Well, it turns out I could do this literally if the character in s at location I is greater than or equal to capital A.
Dialogue: 0,1:56:27.62,1:56:33.31,英文,,0,0,0,,Ampersand, ampersand, which means and, instead of or, which we saw in the past.
Dialogue: 0,1:56:33.31,1:56:42.02,英文,,0,0,0,,S bracket i is less than or equal to little z. That means logically, in English, that this is indeed lowercase.
Dialogue: 0,1:56:42.02,1:56:44.98,英文,,0,0,0,,How do I now convert it to uppercase, this character?
Dialogue: 0,1:56:44.98,1:56:48.16,英文,,0,0,0,,Well, I could just literally print out the same character.
Dialogue: 0,1:56:48.16,1:56:52.38,英文,,0,0,0,,But that would not be the answer here, because that's not changing the value.
Dialogue: 0,1:56:52.38,1:56:54.37,英文,,0,0,0,,But what could I do instead?
Dialogue: 0,1:56:54.37,1:56:57.39,英文,,0,0,0,,Well, let me actually pull up here real fast.
Dialogue: 0,1:56:57.39,1:57:00.03,英文,,0,0,0,,The ASCII chart as before.
Dialogue: 0,1:57:00.03,1:57:03.35,英文,,0,0,0,,And let's see if we can't glean some insight.
Dialogue: 0,1:57:03.35,1:57:10.12,英文,,0,0,0,,If I pull up the same ASCII chart and suppose the human has typed in a lowercase a that's 97.
Dialogue: 0,1:57:10.12,1:57:11.82,英文,,0,0,0,,What letter?
Dialogue: 0,1:57:11.82,1:57:18.92,英文,,0,0,0,,I want to convert it to uppercase A. So what number do I want to convert the 97 to per week? Zero.
Dialogue: 0,1:57:18.92,1:57:21.07,英文,,0,0,0,,So 65, we keep coming back to that one.
Dialogue: 0,1:57:21.07,1:57:23.05,英文,,0,0,0,,What if the user types in lowercase b?
Dialogue: 0,1:57:23.05,1:57:27.45,英文,,0,0,0,,I want to change the 98 value to 66 and so forth.
Dialogue: 0,1:57:27.45,1:57:30.19,英文,,0,0,0,,And any quick math how far apart of those?
Dialogue: 0,1:57:30.19,1:57:31.69,英文,,0,0,0,,So it's always 32.
Dialogue: 0,1:57:31.69,1:57:35.91,英文,,0,0,0,,Like uppercase to lowercase is always wonderfully good design.
Dialogue: 0,1:57:35.91,1:57:38.15,英文,,0,0,0,,32 away one from the other.
Dialogue: 0,1:57:38.15,1:57:38.97,英文,,0,0,0,,So what does this mean?
Dialogue: 0,1:57:38.97,1:57:42.68,英文,,0,0,0,,Well, I think we saw earlier that underneath the hood, a char is just a number.
Dialogue: 0,1:57:42.68,1:57:44.34,英文,,0,0,0,,You can certainly do arithmetic on it.
Dialogue: 0,1:57:44.34,1:57:48.36,英文,,0,0,0,,And here again, if you understand these lower level primitives, what if I do this?
Dialogue: 0,1:57:48.36,1:57:57.82,英文,,0,0,0,,Whatever s bracket I is, if I know on line 13 that it's lower case, do I want to add or subtract 32?
Dialogue: 0,1:57:57.82,1:58:04.12,英文,,0,0,0,,So I want to subtract, because I want to go from, like, 97 to 65, or 98 to 66.
Dialogue: 0,1:58:04.12,1:58:06.59,英文,,0,0,0,,So indeed, if you do some quick math, that gives you 32.
Dialogue: 0,1:58:06.59,1:58:16.47,英文,,0,0,0,,So it suffices to just treat chars as numbers, subtract the 32, and printing it with %c, I think, will just convert lowercase to uppercase.
Dialogue: 0,1:58:16.47,1:58:26.46,英文,,0,0,0,,If you now fast forward to the real world, Microsoft Word or Google Docs, if you've ever chosen the menu option that forces things to uppercase or lowercase on occasion, literally, that's what Microsoft and Google have done.
Dialogue: 0,1:58:26.46,1:58:33.92,英文,,0,0,0,,They iterate over every character in the document, check if it's lowercase, and if so, they subtract 32 from it and show you the new value.
Dialogue: 0,1:58:33.92,1:58:36.70,英文,,0,0,0,,What if, though, it is not a lowercase letter?
Dialogue: 0,1:58:36.70,1:58:46.75,英文,,0,0,0,,I think I can keep it easy and just print out the current letter unchanged if my goal is to simply force things to all uppercase, and that letter then would be s bracket i.
Dialogue: 0,1:58:46.75,1:58:49.53,英文,,0,0,0,,So let me go ahead now and make uppercase.
Dialogue: 0,1:58:49.53,1:58:50.85,英文,,0,0,0,,Hopefully no errors.
Dialogue: 0,1:58:50.85,1:58:52.53,英文,,0,0,0,,Dot slash uppercase.
Dialogue: 0,1:58:52.53,1:58:57.02,英文,,0,0,0,,And I'll now type in David with an uppercase D, but lowercase everything else.
Dialogue: 0,1:58:57.02,1:59:00.16,英文,,0,0,0,,But now the after version is David.
Dialogue: 0,1:59:00.16,1:59:01.26,英文,,0,0,0,,An aesthetic bug.
Dialogue: 0,1:59:01.26,1:59:06.08,英文,,0,0,0,,Notice here I forgot to include, just for prettiness sake, a backslash n at the end.
Dialogue: 0,1:59:06.08,1:59:06.64,英文,,0,0,0,,No problem.
Dialogue: 0,1:59:06.64,1:59:07.76,英文,,0,0,0,,I'll add that.
Dialogue: 0,1:59:07.76,1:59:08.92,英文,,0,0,0,,Let me fix my mistake.
Dialogue: 0,1:59:08.92,1:59:10.74,英文,,0,0,0,,Make uppercase.
Dialogue: 0,1:59:10.74,1:59:13.63,英文,,0,0,0,,Dot slash uppercase enter D. A. B. I. D. Enter.
Dialogue: 0,1:59:13.63,1:59:14.31,英文,,0,0,0,,And voila.
Dialogue: 0,1:59:14.31,1:59:22.23,英文,,0,0,0,,And I deliberately added another space after the after just that they would line up pretty, even though before and after have different numbers of letters.
Dialogue: 0,1:59:22.23,1:59:34.10,英文,,0,0,0,,Questions then on this implementation of forcing something to uppercase, which in and of itself is not all that enlightening, but is representative now of how you can leverage these low level primitives.
Dialogue: 0,1:59:34.10,1:59:36.36,英文,,0,0,0,,Question.
Dialogue: 0,1:59:36.36,1:59:38.69,英文,,0,0,0,,All right, well, this honestly is tedious.
Dialogue: 0,1:59:38.69,1:59:40.59,英文,,0,0,0,,My God, like, does Microsoft Google everyone?
Dialogue: 0,1:59:40.59,1:59:43.65,英文,,0,0,0,,You have to literally write out this code just to do something simple.
Dialogue: 0,1:59:43.65,1:59:49.32,英文,,0,0,0,,Well, no, that's again why we have things like libraries and increasingly now for problem sets, projects and beyond.
Dialogue: 0,1:59:49.32,1:59:52.06,英文,,0,0,0,,Well, you just use libraries more often off the shelf.
Dialogue: 0,1:59:52.06,1:59:56.14,英文,,0,0,0,,So it's to solve problems that surely other people have had before you.
Dialogue: 0,1:59:56.14,1:59:58.13,英文,,0,0,0,,So how can I now use this?
Dialogue: 0,1:59:58.13,2:00:01.39,英文,,0,0,0,,Library C type dot H. Well, let me go back into my code.
Dialogue: 0,2:00:01.39,2:00:04.69,英文,,0,0,0,,Let me include this among my header files here.
Dialogue: 0,2:00:04.69,2:00:06.37,英文,,0,0,0,,I tend just so I can skim things easily.
Dialogue: 0,2:00:06.37,2:00:09.33,英文,,0,0,0,,I tend to alphabetize my headers, but that's not strictly necessary.
Dialogue: 0,2:00:09.33,2:00:13.93,英文,,0,0,0,,But it allows me at a glance to realize, did I or did I not include something I need now?
Dialogue: 0,2:00:13.93,2:00:15.69,英文,,0,0,0,,Let me go ahead and do this.
Dialogue: 0,2:00:15.69,2:00:23.79,英文,,0,0,0,,It turns out if you read the documentation for the C type library, there is a function wonderfully called if
Dialogue: 0,2:00:23.79,2:00:33.90,英文,,0,0,0,,is lower, that takes in a character as its argument, essentially, so s bracket i. And if that returns true, a Boolean value, if you will, well, I'm going to force it to lowercase.
Dialogue: 0,2:00:33.90,2:00:36.69,英文,,0,0,0,,But I don't have to do this math anymore.
Dialogue: 0,2:00:36.69,2:00:40.67,英文,,0,0,0,,Turns out, in the C type library, there's also a function called toUpper.
Dialogue: 0,2:00:40.67,2:00:50.50,英文,,0,0,0,,That takes a character as input, like s bracket i, and it just does the math for you so that you can abstract away the 32 thing and just know that someone else has solved that problem for you.
Dialogue: 0,2:00:50.50,2:00:55.28,英文,,0,0,0,,Otherwise, I can leave my code unchanged down below because I'm not changing anything else.
Dialogue: 0,2:00:55.28,2:01:03.82,英文,,0,0,0,,So if I do make uppercase now and then dot slash uppercase, D-A-V-I-D with just a capital D, and now it still works.
Dialogue: 0,2:01:03.82,2:01:07.66,英文,,0,0,0,,But if you read the documentation further, it turns out that two upper is smart.
Dialogue: 0,2:01:07.66,2:01:13.23,英文,,0,0,0,,If you pass in a character to two upper that's lowercase, it obviously converts its uppercase by doing that math.
Dialogue: 0,2:01:13.23,2:01:21.65,英文,,0,0,0,,But if you pass in a character to two upper that's already uppercase, the documentation you would see tells you that it leaves it unchanged.
Dialogue: 0,2:01:21.65,2:01:23.93,英文,,0,0,0,,So I can tighten all of this up.
Dialogue: 0,2:01:23.93,2:01:26.03,英文,,0,0,0,,I can get rid of the whole else.
Dialogue: 0,2:01:26.03,2:01:28.15,英文,,0,0,0,,I can get rid of the whole if.
Dialogue: 0,2:01:28.15,2:01:33.60,英文,,0,0,0,,And arguably now implement a program that's just as correct, but better designed.
Dialogue: 0,2:01:33.60,2:01:34.40,英文,,0,0,0,,Why?
Dialogue: 0,2:01:34.40,2:01:38.00,英文,,0,0,0,,Fewer lines of code, easier to read, lower probability of mistakes.
Dialogue: 0,2:01:38.00,2:01:43.30,英文,,0,0,0,,Assuming the library is correct, it just makes it easier and faster for me now to write code.
Dialogue: 0,2:01:43.30,2:01:50.22,英文,,0,0,0,,So if I now do one last time, make uppercase, Enter, dot slash uppercase, and type in my name, still working.
Dialogue: 0,2:01:50.22,2:01:57.86,英文,,0,0,0,,But now notice we've whittled this down to far fewer lines of code, albeit using now this additional library.
Dialogue: 0,2:01:57.86,2:02:03.99,英文,,0,0,0,,Questions, then, on how we did this.
Dialogue: 0,2:02:03.99,2:02:09.05,英文,,0,0,0,,Well, even though this code, I dare say, is correct, it's not necessarily well-designed just yet.
Dialogue: 0,2:02:09.05,2:02:18.09,英文,,0,0,0,,In fact, there's one line of code, one function call in this current implementation that's more inefficient than it needs to be.
Dialogue: 0,2:02:18.09,2:02:24.49,英文,,0,0,0,,And allow me to draw our attention to this here, line 10, wherein we're calling strlen.
Dialogue: 0,2:02:24.49,2:02:29.19,英文,,0,0,0,,But we're calling it inside of this for loop, specifically inside of the condition.
Dialogue: 0,2:02:29.19,2:02:33.87,英文,,0,0,0,,And why might that not necessarily be the best idea?
Dialogue: 0,2:02:33.87,2:02:36.81,英文,,0,0,0,,Well, is the length of the string s changing ever?
Dialogue: 0,2:02:36.81,2:02:38.85,英文,,0,0,0,,I mean, certainly not within the span of this loop.
Dialogue: 0,2:02:38.85,2:02:45.30,英文,,0,0,0,,And so here we are within our for loop on line 10, 11, 12, and 13, asking on every iteration that same question.
Dialogue: 0,2:02:45.30,2:02:48.52,英文,,0,0,0,,What's the length of s?
Dialogue: 0,2:02:48.52,2:02:52.74,英文,,0,0,0,,And in turn, we're calling strlen every time, even though we're getting back the same answer.
Dialogue: 0,2:02:52.74,2:02:59.65,英文,,0,0,0,,So I dare say a better solution here would be to maybe figure out the length of s earlier on in my code and maybe declare a variable.
Dialogue: 0,2:02:59.65,2:03:02.55,英文,,0,0,0,,Or perhaps do something that's syntactically a little more elegant.
Dialogue: 0,2:03:02.55,2:03:13.44,英文,,0,0,0,,And in fact, a very common design in a loop like this would be to declare not just one variable like i, but to actually declare a second variable called n, for instance, where n is just some number.
Dialogue: 0,2:03:13.44,2:03:24.70,英文,,0,0,0,,Set n equal to the length of s. But thereafter, inside of this condition, instead of calling strlen of s again and again and again, what might I now do?
Dialogue: 0,2:03:24.70,2:03:32.72,英文,,0,0,0,,I could instead just compare i against n itself, because n now will only be calculated once when it's initialized, just as i is initialized to 0.
Dialogue: 0,2:03:32.72,2:03:37.34,英文,,0,0,0,,And thereafter, we're going to be comparing i, which is changing, against n, which will not be.
Dialogue: 0,2:03:37.34,2:03:40.40,英文,,0,0,0,,So it's going to be marginally more efficient by design.
Dialogue: 0,2:03:40.40,2:03:47.27,英文,,0,0,0,,Now, with that said, a good compiler could also recognize that there was this optimization possibility and maybe do it for us.
Dialogue: 0,2:03:47.27,2:03:54.11,英文,,0,0,0,,But for now, best to get into the habit, best to develop the muscle memory for making those better design decisions yourselves.
Dialogue: 0,2:03:54.11,2:03:59.73,英文,,0,0,0,,Questions then on how we did this.
Dialogue: 0,2:03:59.73,2:04:00.17,英文,,0,0,0,,All right.
Dialogue: 0,2:04:00.17,2:04:03.27,英文,,0,0,0,,A few final building blocks for the day.
Dialogue: 0,2:04:03.27,2:04:16.19,英文,,0,0,0,,So we started by talking about those command line arguments that clang uses, whereby anything after the command that you type at a prompt, be it make or clang or even CD in Linux.
Dialogue: 0,2:04:16.19,2:04:21.27,英文,,0,0,0,,Any word thereafter or something cryptic like Dash O is a command line argument.
Dialogue: 0,2:04:21.27,2:04:22.95,英文,,0,0,0,,It's an input to the command.
Dialogue: 0,2:04:22.95,2:04:27.42,英文,,0,0,0,,It's different from a function argument, because a function argument, of course, is an input to a function.
Dialogue: 0,2:04:27.42,2:04:28.32,英文,,0,0,0,,But it's the same idea.
Dialogue: 0,2:04:28.32,2:04:31.12,英文,,0,0,0,,It's just different syntax after the dollar sign at the prompt.
Dialogue: 0,2:04:31.12,2:04:41.96,英文,,0,0,0,,Well, it turns out that command line arguments are something you can now use in your own programs by accessing words after the prompt.
Dialogue: 0,2:04:41.96,2:04:45.46,英文,,0,0,0,,And let me propose that we invent this as follows.
Dialogue: 0,2:04:45.46,2:04:49.80,英文,,0,0,0,,Let me propose that we switch back to VS Code here.
Dialogue: 0,2:04:49.80,2:04:53.62,英文,,0,0,0,,And I'll open a new file here called greet.c.
Dialogue: 0,2:04:53.62,2:04:57.19,英文,,0,0,0,,So in greet.c is going to be a program that very simply greets the user.
Dialogue: 0,2:04:57.19,2:05:02.35,英文,,0,0,0,,Had we written this last week, we would have done this, include CS50.h.
Dialogue: 0,2:05:02.35,2:05:06.39,英文,,0,0,0,,And then include standard io.h.
Dialogue: 0,2:05:06.39,2:05:08.37,英文,,0,0,0,,And then int main void.
Dialogue: 0,2:05:08.37,2:05:16.10,英文,,0,0,0,,And then we might do something simple like string name equals get string, quote unquote, what's your name, question mark.
Dialogue: 0,2:05:16.10,2:05:21.48,英文,,0,0,0,,And then we would have printed out, as always, hello, comma, percent s, and then plugging in that name.
Dialogue: 0,2:05:21.48,2:05:26.60,英文,,0,0,0,,So this is the same program we've implemented many times, just to make sure it works.
Dialogue: 0,2:05:26.60,2:05:29.16,英文,,0,0,0,,Although, nope, that's not quite the same program.
Dialogue: 0,2:05:29.16,2:05:31.16,英文,,0,0,0,,Semicolons in the wrong place.
Dialogue: 0,2:05:31.16,2:05:32.86,英文,,0,0,0,,This now is the same program.
Dialogue: 0,2:05:32.86,2:05:35.37,英文,,0,0,0,,So make greet dot slash greet.
Dialogue: 0,2:05:35.37,2:05:36.81,英文,,0,0,0,,And I'll type in my own name.
Dialogue: 0,2:05:36.81,2:05:37.51,英文,,0,0,0,,Hello, David.
Dialogue: 0,2:05:37.51,2:05:39.29,英文,,0,0,0,,So we're back there now.
Dialogue: 0,2:05:39.29,2:05:41.77,英文,,0,0,0,,What's arguably a little annoying about this program?
Dialogue: 0,2:05:41.77,2:05:49.10,英文,,0,0,0,,If I type in something else like Carter enter, you know, I have to run the program, wait for the prompt, type in my name, hit enter.
Dialogue: 0,2:05:49.10,2:05:50.06,英文,,0,0,0,,And that's fine.
Dialogue: 0,2:05:50.06,2:05:53.04,英文,,0,0,0,,But imagine if every program worked like this, like Make.
Dialogue: 0,2:05:53.04,2:05:54.62,英文,,0,0,0,,Suppose you could only type Make.
Dialogue: 0,2:05:54.62,2:05:55.76,英文,,0,0,0,,Then you wait for a prompt.
Dialogue: 0,2:05:55.76,2:05:57.62,英文,,0,0,0,,Then you type the name of the program you want to make.
Dialogue: 0,2:05:57.62,2:05:58.82,英文,,0,0,0,,Then you hit Enter.
Dialogue: 0,2:05:58.82,2:06:05.37,英文,,0,0,0,,Or worse, in Linux, when you have to change directories, as you might have for problem set one, what if you had to type CD, Enter.
Dialogue: 0,2:06:05.37,2:06:07.89,英文,,0,0,0,,Now type the name of the folder you want to change into, Enter.
Dialogue: 0,2:06:07.89,2:06:09.85,英文,,0,0,0,,I mean, it just slows life down.
Dialogue: 0,2:06:09.85,2:06:11.65,英文,,0,0,0,,And so it just gets annoying quickly.
Dialogue: 0,2:06:11.65,2:06:16.19,英文,,0,0,0,,So command line arguments just let you express your whole thought all at once.
Dialogue: 0,2:06:16.19,2:06:18.19,英文,,0,0,0,,So how can I do this?
Dialogue: 0,2:06:18.19,2:06:25.72,英文,,0,0,0,,Well, if I want to express the notion of command line arguments in my code, I could do something like this.
Dialogue: 0,2:06:25.72,2:06:34.99,英文,,0,0,0,,I could, for the very first time, go up and get rid of this void, which, as of today, means this program takes no command line arguments.
Dialogue: 0,2:06:34.99,2:06:37.81,英文,,0,0,0,,And I can change it to exactly this.
Dialogue: 0,2:06:37.81,2:06:43.54,英文,,0,0,0,,Int, argc, string, argv with brackets.
Dialogue: 0,2:06:43.54,2:06:46.34,英文,,0,0,0,,Now it's cryptic admittedly and let me zoom in.
Dialogue: 0,2:06:46.34,2:06:49.60,英文,,0,0,0,,But I think we can perhaps infer now what's going on.
Dialogue: 0,2:06:49.60,2:06:54.36,英文,,0,0,0,,If main now does not have void as its input, which means it takes no arguments.
Dialogue: 0,2:06:54.36,2:06:59.49,英文,,0,0,0,,Surely the spoiler here is that now main will take command line arguments somehow.
Dialogue: 0,2:06:59.49,2:07:05.31,英文,,0,0,0,,Any guesses as to what argv is or will be?
Dialogue: 0,2:07:05.31,2:07:08.44,英文,,0,0,0,,What might this represent?
Dialogue: 0,2:07:08.44,2:07:11.40,英文,,0,0,0,,It's an array of strings, right, by way of the syntax.
Dialogue: 0,2:07:11.40,2:07:15.54,英文,,0,0,0,,Yeah?
Dialogue: 0,2:07:15.54,2:07:16.03,英文,,0,0,0,,Exactly.
Dialogue: 0,2:07:16.03,2:07:19.99,英文,,0,0,0,,It will be all of the characters, or really, all of the words that you type at the prompt.
Dialogue: 0,2:07:19.99,2:07:24.49,英文,,0,0,0,,argc as an int, any guess?
Dialogue: 0,2:07:24.49,2:07:26.43,英文,,0,0,0,,Argument.
Dialogue: 0,2:07:26.43,2:07:30.29,英文,,0,0,0,,Count is what it generally stands for, though technically you could call these things anything.
Dialogue: 0,2:07:30.29,2:07:35.98,英文,,0,0,0,,But this is the convention because I claimed earlier that arrays don't keep track of their own length.
Dialogue: 0,2:07:35.98,2:07:44.79,英文,,0,0,0,,If you want to know how many words the human typed at the prompt after your program's name, you have to be told not just the array of the words, but the length.
Dialogue: 0,2:07:44.79,2:07:48.63,英文,,0,0,0,,Of that array, the strings you can figure out the length of using Sterling.
Dialogue: 0,2:07:48.63,2:07:55.10,英文,,0,0,0,,But you can't figure out the length of the array of strings, the collection of words that the human typed in.
Dialogue: 0,2:07:55.10,2:07:56.76,英文,,0,0,0,,So how can I now use this?
Dialogue: 0,2:07:56.76,2:07:59.18,英文,,0,0,0,,Well, let me go ahead and do this.
Dialogue: 0,2:07:59.18,2:08:07.79,英文,,0,0,0,,Let me go ahead and change this program now just to be print F quote unquote Hello, comma.
Dialogue: 0,2:08:07.79,2:08:11.81,英文,,0,0,0,,%s backslash n, then argv bracket 1.
Dialogue: 0,2:08:11.81,2:08:14.95,英文,,0,0,0,,So this is not the best version of my code yet, but it's my first.
Dialogue: 0,2:08:14.95,2:08:16.69,英文,,0,0,0,,Make greet.
Dialogue: 0,2:08:16.69,2:08:21.19,英文,,0,0,0,,And now let me do dot slash greet David all at once.
Dialogue: 0,2:08:21.19,2:08:22.17,英文,,0,0,0,,Enter.
Dialogue: 0,2:08:22.17,2:08:23.41,英文,,0,0,0,,Hello, David.
Dialogue: 0,2:08:23.41,2:08:25.91,英文,,0,0,0,,Now let me run it again. Dot slash greet Carter.
Dialogue: 0,2:08:25.91,2:08:27.67,英文,,0,0,0,,Enter. Hello, Carter.
Dialogue: 0,2:08:27.67,2:08:32.33,英文,,0,0,0,,You know, it's a marginal improvement, but I don't have to wait for get string to prompt me to hit enter.
Dialogue: 0,2:08:32.33,2:08:34.54,英文,,0,0,0,,It's just speeding things up twice as fast.
Dialogue: 0,2:08:34.54,2:08:37.10,英文,,0,0,0,,One less command to type in.
Dialogue: 0,2:08:37.10,2:08:39.42,英文,,0,0,0,,But I deliberately did bracket one.
Dialogue: 0,2:08:39.42,2:08:41.48,英文,,0,0,0,,But what's the beginning of RV?
Dialogue: 0,2:08:41.48,2:08:44.76,英文,,0,0,0,,It would be bracket. Zero.
Dialogue: 0,2:08:44.76,2:08:45.92,英文,,0,0,0,,Well, what's that?
Dialogue: 0,2:08:45.92,2:08:47.78,英文,,0,0,0,,This is sometimes useful, though.
Dialogue: 0,2:08:47.78,2:08:48.96,英文,,0,0,0,,For now, it's not.
Dialogue: 0,2:08:48.96,2:08:52.90,英文,,0,0,0,,Suppose I recompile my code and run this program now.
Dialogue: 0,2:08:52.90,2:08:54.25,英文,,0,0,0,,Greet David.
Dialogue: 0,2:08:54.25,2:08:59.63,英文,,0,0,0,,Anyone want to guess what's in RV zero?
Dialogue: 0,2:08:59.63,2:09:01.36,英文,,0,0,0,,Say again.
Dialogue: 0,2:09:01.36,2:09:02.16,英文,,0,0,0,,Greet.
Dialogue: 0,2:09:02.16,2:09:03.04,英文,,0,0,0,,Enter.
Dialogue: 0,2:09:03.04,2:09:04.72,英文,,0,0,0,,Hello dot slash greet.
Dialogue: 0,2:09:04.72,2:09:15.01,英文,,0,0,0,,So if you want sort of inception style your program to figure out what its own name is, or at least how it was executed at the command line at the terminal, you can look at our V zero in general.
Dialogue: 0,2:09:15.01,2:09:16.49,英文,,0,0,0,,Probably not that useful.
Dialogue: 0,2:09:16.49,2:09:21.89,英文,,0,0,0,,Probably better to start looking at bracket one, which was the first word after the program name.
Dialogue: 0,2:09:21.89,2:09:23.53,英文,,0,0,0,,And if there were more, I could do this.
Dialogue: 0,2:09:23.53,2:09:27.85,英文,,0,0,0,,How about RV bracket to let me add in a second percent s
Dialogue: 0,2:09:27.85,2:09:29.62,英文,,0,0,0,,Let me recompile greet.
Dialogue: 0,2:09:29.62,2:09:33.74,英文,,0,0,0,,Let me do dot slash greet David Malin enter.
Dialogue: 0,2:09:33.74,2:09:37.28,英文,,0,0,0,,And that too now works taking in two words at the prompt.
Dialogue: 0,2:09:37.28,2:09:40.08,英文,,0,0,0,,If I really want to be smart at this now, I could do something like this, though.
Dialogue: 0,2:09:40.08,2:09:44.94,英文,,0,0,0,,How about if the count of arguments A. K. A. R. C.
Dialogue: 0,2:09:44.94,2:09:58.59,英文,,0,0,0,,equals equals 2, then assume that the human typed in only their first name, and do printf hello, comma, percent s, backslash n, and then argv bracket 1.
Dialogue: 0,2:09:58.59,2:10:10.10,英文,,0,0,0,,Else, if the human did not provide exactly two arguments, the name of the program and their own name, let's just print out a default value lest they forgot their name or they typed in two names or three names.
Dialogue: 0,2:10:10.10,2:10:15.43,英文,,0,0,0,,Let's just do hello, world as a default and we'll just ignore what the human typed in.
Dialogue: 0,2:10:15.43,2:10:20.91,英文,,0,0,0,,If I recompile this make greet I can do dot slash greet and David again enter.
Dialogue: 0,2:10:20.91,2:10:22.17,英文,,0,0,0,,Oops.
Dialogue: 0,2:10:22.17,2:10:23.29,英文,,0,0,0,,Uh sorry.
Dialogue: 0,2:10:23.29,2:10:24.93,英文,,0,0,0,,What am I missing?
Dialogue: 0,2:10:24.93,2:10:25.29,英文,,0,0,0,,Yeah.
Dialogue: 0,2:10:25.29,2:10:27.97,英文,,0,0,0,,So newbie mistake else.
Dialogue: 0,2:10:27.97,2:10:28.37,英文,,0,0,0,,All right.
Dialogue: 0,2:10:28.37,2:10:32.73,英文,,0,0,0,,Make greet again dot slash greet David enter.
Dialogue: 0,2:10:32.73,2:10:34.23,英文,,0,0,0,,There's my Hello, David.
Dialogue: 0,2:10:34.23,2:10:37.75,英文,,0,0,0,,But if I omit my name, I just get the generic like a default value.
Dialogue: 0,2:10:37.75,2:10:41.86,英文,,0,0,0,,And if I get a little curious and I type in both names, then I get ignored too.
Dialogue: 0,2:10:41.86,2:10:42.04,英文,,0,0,0,,Why?
Dialogue: 0,2:10:42.04,2:10:45.00,英文,,0,0,0,,Because I just haven't built in support for arc C of three.
Dialogue: 0,2:10:45.00,2:10:46.16,英文,,0,0,0,,I could do anything I want.
Dialogue: 0,2:10:46.16,2:10:50.82,英文,,0,0,0,,But now we have access to these kinds of building blocks.
Dialogue: 0,2:10:50.82,2:10:52.76,英文,,0,0,0,,All right, what else might I do here?
Dialogue: 0,2:10:52.76,2:10:57.81,英文,,0,0,0,,Well, it turns out there might be some final features for us to now execute.
Dialogue: 0,2:10:57.81,2:11:10.52,英文,,0,0,0,,Notice, though, that in C, despite what you might see in books or online tutorials nowadays, the two official formats for defining a main function are either this, which we've been using now for two plus weeks, or now
Dialogue: 0,2:11:10.52,2:11:17.87,英文,,0,0,0,,This whereby you change the void to int arc C and then for now string RV and then empty brackets.
Dialogue: 0,2:11:17.87,2:11:21.31,英文,,0,0,0,,And we'll see that this too is a simplification, some training wheels, if you will.
Dialogue: 0,2:11:21.31,2:11:25.98,英文,,0,0,0,,But for now, those are the two forms, even though you will see an online tutorials and even books.
Dialogue: 0,2:11:25.98,2:11:27.82,英文,,0,0,0,,Some people use main in different ways.
Dialogue: 0,2:11:27.82,2:11:30.36,英文,,0,0,0,,These are the two now to keep in mind.
Dialogue: 0,2:11:30.36,2:11:33.36,英文,,0,0,0,,And I'll note that these command line arguments are kind of all over the place.
Dialogue: 0,2:11:33.36,2:11:35.47,英文,,0,0,0,,Didn't probably expect to see this word on the screen here.
Dialogue: 0,2:11:35.47,2:11:36.43,英文,,0,0,0,,And what does it mean?
Dialogue: 0,2:11:36.43,2:11:41.93,英文,,0,0,0,,Well, it turns out that for decades, there's actually this program that comes with Linux systems in particular called Cowsay.
Dialogue: 0,2:11:41.93,2:11:42.69,英文,,0,0,0,,Why?
Dialogue: 0,2:11:42.69,2:11:51.57,英文,,0,0,0,,Probably because someone had too much free time once and decided to write a program that creates ASCII art out of a cow saying something textually on the screen.
Dialogue: 0,2:11:51.57,2:11:55.69,英文,,0,0,0,,But you use Cowsay, just for fun, by way of command line arguments.
Dialogue: 0,2:11:55.69,2:11:58.63,英文,,0,0,0,,So for instance, let me propose that
Dialogue: 0,2:11:58.63,2:12:07.48,英文,,0,0,0,,I go back to V. S. Code here, not because I want to write any code, but I just want to use my terminal window and let me maximize my terminal window here.
Dialogue: 0,2:12:07.48,2:12:13.36,英文,,0,0,0,,And let me go ahead and type in something like how about cow say space move.
Dialogue: 0,2:12:13.36,2:12:14.90,英文,,0,0,0,,So cow say is not a program I wrote.
Dialogue: 0,2:12:14.90,2:12:19.02,英文,,0,0,0,,It's been around for decades, but we installed it in V. S. Code for you in the cloud.
Dialogue: 0,2:12:19.02,2:12:21.40,英文,,0,0,0,,It takes at least one command line argument.
Dialogue: 0,2:12:21.40,2:12:23.25,英文,,0,0,0,,What do you want the cow to say?
Dialogue: 0,2:12:23.25,2:12:25.39,英文,,0,0,0,,I can say cow say moo and hit enter.
Dialogue: 0,2:12:25.39,2:12:29.67,英文,,0,0,0,,And voila, there's my ASCII art of a cow saying moo on the screen.
Dialogue: 0,2:12:29.67,2:12:31.12,英文,,0,0,0,,It can say multiple words.
Dialogue: 0,2:12:31.12,2:12:34.12,英文,,0,0,0,,So I can say hello world enter.
Dialogue: 0,2:12:34.12,2:12:35.78,英文,,0,0,0,,And now it says hello world.
Dialogue: 0,2:12:35.78,2:12:39.12,英文,,0,0,0,,So this is just an example of a silly program that uses command-line arguments.
Dialogue: 0,2:12:39.12,2:12:40.65,英文,,0,0,0,,But it takes others, too.
Dialogue: 0,2:12:40.65,2:12:53.66,英文,,0,0,0,,Just like Clang used this convention of hyphens to change the output of the program, dash something is just a super common convention with command-line arguments when you want a very terse notation for some option, like output.
Dialogue: 0,2:12:53.66,2:12:57.84,英文,,0,0,0,,In Cowsay, I read the documentation, and it turns out there's a dash f
Dialogue: 0,2:12:57.84,2:13:03.53,英文,,0,0,0,,a command line argument that allows you to change the appearance of the cow, if you will.
Dialogue: 0,2:13:03.53,2:13:11.71,英文,,0,0,0,,So if I do cow say dash f duck and then some other word like quack, it's no longer a cow.
Dialogue: 0,2:13:11.71,2:13:15.99,英文,,0,0,0,,That command line argument turns it into a tiny, adorable duck instead.
Dialogue: 0,2:13:15.99,2:13:23.08,英文,,0,0,0,,And then lastly, just for fun, because I spent way too much time playing with command line arguments, cow say dash f dragon.
Dialogue: 0,2:13:23.08,2:13:25.38,英文,,0,0,0,,And then how about like rar enter?
Dialogue: 0,2:13:25.38,2:13:28.02,英文,,0,0,0,,You can even get this on the screen here.
Dialogue: 0,2:13:28.02,2:13:34.30,英文,,0,0,0,,So this, too, is just an example of what you can do with these command line arguments now that we have this building block.
Dialogue: 0,2:13:34.30,2:13:37.02,英文,,0,0,0,,And there's one final thing we can now do with code.
Dialogue: 0,2:13:37.02,2:13:48.49,英文,,0,0,0,,There's one last feature today that will introduce before we now connect all of these dots to readability and encryption by talking lastly about something called exit status.
Dialogue: 0,2:13:48.49,2:13:49.95,英文,,0,0,0,,It turns out
Dialogue: 0,2:13:49.95,2:13:58.41,英文,,0,0,0,,That whenever your main function exits, it returns a secret integer that you can figure out as the programmer or an advanced user what it was.
Dialogue: 0,2:13:58.41,2:14:02.41,英文,,0,0,0,,And these exit code exit statuses are typically used to indicate error.
Dialogue: 0,2:14:02.41,2:14:08.48,英文,,0,0,0,,So, for instance, over the past couple of years, if you've used zoom and you ever got some kind of error, you might have seen a screen like this.
Dialogue: 0,2:14:08.48,2:14:09.88,英文,,0,0,0,,It's usually not that helpful.
Dialogue: 0,2:14:09.88,2:14:13.20,英文,,0,0,0,,Maybe tells you to click report problem or contact support.
Dialogue: 0,2:14:13.20,2:14:25.23,英文,,0,0,0,,But very often in our human world on Max PCs and phones, you see cryptic error codes like literally numbers that probably only zoom knows or Microsoft or Google or whatever company wrote the software you're using.
Dialogue: 0,2:14:25.23,2:14:32.22,英文,,0,0,0,,But that number corresponds to a specific error that some human somewhere knows might very well happen.
Dialogue: 0,2:14:32.22,2:14:38.16,英文,,0,0,0,,These air used similarly, although under a different name that we'll talk about later in the term on the Web as well.
Dialogue: 0,2:14:38.16,2:14:39.40,英文,,0,0,0,,Have you ever seen this?
Dialogue: 0,2:14:39.40,2:14:41.46,英文,,0,0,0,,Maybe not character, but number.
Dialogue: 0,2:14:41.46,2:14:44.85,英文,,0,0,0,,So 404 means what?
Dialogue: 0,2:14:44.85,2:14:47.73,英文,,0,0,0,,So error, yes, but really not found.
Dialogue: 0,2:14:47.73,2:14:48.37,英文,,0,0,0,,So why?
Dialogue: 0,2:14:48.37,2:14:49.70,英文,,0,0,0,,I mean, this is the most arcane thing.
Dialogue: 0,2:14:49.70,2:14:53.12,英文,,0,0,0,,And we'll talk in a few weeks about what this and other numbers mean.
Dialogue: 0,2:14:53.12,2:14:55.10,英文,,0,0,0,,But numbers are all around us in technology.
Dialogue: 0,2:14:55.10,2:15:00.32,英文,,0,0,0,,And they very often mean something to the technical people who wrote the software, less so to humans like you and me.
Dialogue: 0,2:15:00.32,2:15:06.02,英文,,0,0,0,,Why so many of us recognize 404 is kind of weird, that that's been around long enough that we all know it.
Dialogue: 0,2:15:06.02,2:15:10.46,英文,,0,0,0,,But it really is just a special number that represents an error of some sort.
Dialogue: 0,2:15:10.46,2:15:18.37,英文,,0,0,0,,So it turns out the last thing we'll reveal today about what we've been taking for granted for two weeks is what the int is in main.
Dialogue: 0,2:15:18.37,2:15:29.70,英文,,0,0,0,,We've seen just a moment ago that the thing in the parentheses, which up until now has been void, which means no command line arguments, now int argc string argv brackets just means yes, command line arguments.
Dialogue: 0,2:15:29.70,2:15:31.42,英文,,0,0,0,,And we've seen how to access them.
Dialogue: 0,2:15:31.42,2:15:37.60,英文,,0,0,0,,So the last piece of the puzzle, honestly, of all the cryptic syntax the past two weeks is just what int means.
Dialogue: 0,2:15:37.60,2:15:46.39,英文,,0,0,0,,Int is always there for main, and it indicates that main will always return an integer, even though you and I have never done so explicitly.
Dialogue: 0,2:15:46.39,2:15:52.71,英文,,0,0,0,,Usually main returns zero by default, but it would be weird if you saw an error message saying zero.
Dialogue: 0,2:15:52.71,2:15:54.01,英文,,0,0,0,,So zero is just hidden.
Dialogue: 0,2:15:54.01,2:15:58.88,英文,,0,0,0,,You would never see it on the screen, but it's happening automatically by way of how C is designed.
Dialogue: 0,2:15:58.88,2:16:01.62,英文,,0,0,0,,So let me write one final program here.
Dialogue: 0,2:16:01.62,2:16:05.92,英文,,0,0,0,,I'll call it, for instance, status.c to show you these exit statuses.
Dialogue: 0,2:16:05.92,2:16:07.94,英文,,0,0,0,,Code of status.c.
Dialogue: 0,2:16:07.94,2:16:17.43,英文,,0,0,0,,And then up here, let me do something simple like include cs50.h, then include standard io.h, and then int main.
Dialogue: 0,2:16:17.43,2:16:21.71,英文,,0,0,0,,Let's do, actually, let's use a command line argument, int argc string argv.
Dialogue: 0,2:16:21.71,2:16:23.37,英文,,0,0,0,,So that's copy paste.
Dialogue: 0,2:16:23.37,2:16:26.26,英文,,0,0,0,,But now let's do this.
Dialogue: 0,2:16:26.26,2:16:29.54,英文,,0,0,0,,RGC does not equal to.
Dialogue: 0,2:16:29.54,2:16:30.70,英文,,0,0,0,,Why don't we do something like this?
Dialogue: 0,2:16:30.70,2:16:34.67,英文,,0,0,0,,Let's not just default to hello world like last time. Let's yell at the user.
Dialogue: 0,2:16:34.67,2:16:43.40,英文,,0,0,0,,So let's say something like print F missing command line arguments so that they know they screwed up and they need to run the program again correctly.
Dialogue: 0,2:16:43.40,2:16:46.30,英文,,0,0,0,,Else let's go ahead and
Dialogue: 0,2:16:46.30,2:16:56.84,英文,,0,0,0,,Say print out, as before, hello, comma, percent s. And then plug in argv bracket 1, so the human's name from the prompt.
Dialogue: 0,2:16:56.84,2:17:01.98,英文,,0,0,0,,Now at this point, let me go ahead and run status, dot slash status.
Dialogue: 0,2:17:01.98,2:17:03.72,英文,,0,0,0,,And I'll type nothing first.
Dialogue: 0,2:17:03.72,2:17:04.86,英文,,0,0,0,,I get yelled at.
Dialogue: 0,2:17:04.86,2:17:07.90,英文,,0,0,0,,This time I'll type it again, dot slash status David.
Dialogue: 0,2:17:07.90,2:17:10.22,英文,,0,0,0,,And it works properly.
Dialogue: 0,2:17:10.22,2:17:14.28,英文,,0,0,0,,But now let me show you a somewhat secret, cryptic command.
Dialogue: 0,2:17:14.28,2:17:18.83,英文,,0,0,0,,You can type this at your prompt, and it's just a coincidence that there's another dollar sign.
Dialogue: 0,2:17:18.83,2:17:20.27,英文,,0,0,0,,Echo, dollar sign, question mark.
Dialogue: 0,2:17:20.27,2:17:21.27,英文,,0,0,0,,Totally arcane.
Dialogue: 0,2:17:21.27,2:17:25.64,英文,,0,0,0,,But it allows you to see what exit status your program has ended with.
Dialogue: 0,2:17:25.64,2:17:27.68,英文,,0,0,0,,So let me run this again the wrong way.
Dialogue: 0,2:17:27.68,2:17:29.34,英文,,0,0,0,,Dot slash status.
Dialogue: 0,2:17:29.34,2:17:31.23,英文,,0,0,0,,Okay, I get the error message.
Dialogue: 0,2:17:31.23,2:17:32.79,英文,,0,0,0,,What was secretly returned?
Dialogue: 0,2:17:32.79,2:17:33.43,英文,,0,0,0,,I can't see it.
Dialogue: 0,2:17:33.43,2:17:38.07,英文,,0,0,0,,There's obviously no error screen, but by typing echo dollar sign question mark, I can see that.
Dialogue: 0,2:17:38.07,2:17:42.41,英文,,0,0,0,,Oh, my program automatically by default return zero.
Dialogue: 0,2:17:42.41,2:17:48.79,英文,,0,0,0,,However, if I run it again correctly dot slash status David enter, this is the correct version.
Dialogue: 0,2:17:48.79,2:17:53.02,英文,,0,0,0,,But if I run echo question mark status again, it's still entered with zero.
Dialogue: 0,2:17:53.02,2:17:55.88,英文,,0,0,0,,And long story short, this is just a missed opportunity.
Dialogue: 0,2:17:55.88,2:17:59.84,英文,,0,0,0,,When something goes wrong, why don't I return a value other than 0?
Dialogue: 0,2:17:59.84,2:18:01.08,英文,,0,0,0,,0 by default means success.
Dialogue: 0,2:18:01.08,2:18:02.86,英文,,0,0,0,,And it's always there automatically.
Dialogue: 0,2:18:02.86,2:18:05.16,英文,,0,0,0,,But you can control this.
Dialogue: 0,2:18:05.16,2:18:08.89,英文,,0,0,0,,I can go into my code here and return 1.
Dialogue: 0,2:18:08.89,2:18:12.83,英文,,0,0,0,,Else, if something works fine, I can return 0 by default.
Dialogue: 0,2:18:12.83,2:18:17.21,英文,,0,0,0,,And honestly, if I omit the return 0, again, 0 automatically is returned.
Dialogue: 0,2:18:17.21,2:18:20.95,英文,,0,0,0,,So let me go ahead and be explicit, just so I know what's going on.
Dialogue: 0,2:18:20.95,2:18:22.75,英文,,0,0,0,,Make status again.
Dialogue: 0,2:18:22.75,2:18:26.52,英文,,0,0,0,,Dot slash status. And let's do this correctly with David.
Dialogue: 0,2:18:26.52,2:18:27.38,英文,,0,0,0,,Enter.
Dialogue: 0,2:18:27.38,2:18:28.62,英文,,0,0,0,,Hello, David.
Dialogue: 0,2:18:28.62,2:18:30.92,英文,,0,0,0,,Echo? Echo? Dollar sign?
Dialogue: 0,2:18:30.92,2:18:32.16,英文,,0,0,0,,Question mark zero.
Dialogue: 0,2:18:32.16,2:18:33.36,英文,,0,0,0,,So all is well.
Dialogue: 0,2:18:33.36,2:18:39.28,英文,,0,0,0,,But now if I do dot slash status and nothing or multiple things, but not just David enter.
Dialogue: 0,2:18:39.28,2:18:40.42,英文,,0,0,0,,I get the error message.
Dialogue: 0,2:18:40.42,2:18:45.43,英文,,0,0,0,,But now, if I do echo $?, voila, there now is the one.
Dialogue: 0,2:18:45.43,2:18:47.45,英文,,0,0,0,,So what does this now mean?
Dialogue: 0,2:18:47.45,2:18:52.47,英文,,0,0,0,,This is, in the graphical world, we would just show something like this on the screen, which is a little more informative to the user.
Dialogue: 0,2:18:52.47,2:18:58.56,英文,,0,0,0,,But even in the Linux world, where you don't have a GUI, necessarily, even for the programs we've written, you can check these exit statuses.
Dialogue: 0,2:18:58.56,2:19:13.23,英文,,0,0,0,,And in fact, More comfortable, more advanced programmers when they write code that calls programs, be it cow, say, or anything else you can encode, check what the exit status is of a program and then decide, did my program work or did it not?
Dialogue: 0,2:19:13.23,2:19:15.71,英文,,0,0,0,,And now let's connect the final dots.
Dialogue: 0,2:19:15.71,2:19:27.78,英文,,0,0,0,,Before we adjourn for some fruit snacks, cryptography, namely one of the applications this week via which you'll be able to send, if you will, secret messages and better yet, decrypt secret messages.
Dialogue: 0,2:19:27.78,2:19:31.82,英文,,0,0,0,,This will be in addition to perhaps analyzing the readability of text using heuristics.
Dialogue: 0,2:19:31.82,2:19:34.23,英文,,0,0,0,,Like we identified at the start of class two.
Dialogue: 0,2:19:34.23,2:19:48.37,英文,,0,0,0,,So a cryptography is just the art, the science of encrypting information, scrambling information so that if you have a secret message to send in so called plain text, you can run it through some algorithm and turn it into what's called ciphertext.
Dialogue: 0,2:19:48.37,2:19:59.93,英文,,0,0,0,,Thereby encrypting it and only someone who knows what algorithm have used and what input you've used to the algorithm theoretically can decrypt that process and convert it back to the original message.
Dialogue: 0,2:19:59.93,2:20:03.07,英文,,0,0,0,,So if we use our mental model from last week, here is a problem.
Dialogue: 0,2:20:03.07,2:20:05.03,英文,,0,0,0,,Here is an input and output.
Dialogue: 0,2:20:05.03,2:20:09.16,英文,,0,0,0,,The goal I claim here is to take some plain text like the message you want to send.
Dialogue: 0,2:20:09.16,2:20:10.22,英文,,0,0,0,,Think back to grade school.
Dialogue: 0,2:20:10.22,2:20:13.74,英文,,0,0,0,,If you ever passed a note to a friend or to your crush saying I love you,
Dialogue: 0,2:20:13.74,2:20:16.88,英文,,0,0,0,,It's a little awkward if the teacher or someone else intercepts the paper.
Dialogue: 0,2:20:16.88,2:20:19.58,英文,,0,0,0,,And in English, it just says, I love you, or whatever it is.
Dialogue: 0,2:20:19.58,2:20:22.45,英文,,0,0,0,,It'd be nice if you had at least encrypted it in some way.
Dialogue: 0,2:20:22.45,2:20:32.15,英文,,0,0,0,,But the other person needs to know what algorithm you used and what inputs you used to that algorithm so that, ultimately, they can decode the so-called ciphertext, which is the output.
Dialogue: 0,2:20:32.15,2:20:34.19,英文,,0,0,0,,So what goes inside of the box today?
Dialogue: 0,2:20:34.19,2:20:38.02,英文,,0,0,0,,Well, an algorithm, as it relates to cryptography, is called a cipher.
Dialogue: 0,2:20:38.02,2:20:43.40,英文,,0,0,0,,And a cipher is a fancy name for an algorithm that encrypts text from plaintext to ciphertext.
Dialogue: 0,2:20:43.40,2:20:48.84,英文,,0,0,0,,The catch is, there needs to be not just the algorithm, there needs to be an input to it.
Dialogue: 0,2:20:48.84,2:20:53.08,英文,,0,0,0,,And so for instance, you might draw the picture like this for the first time today.
Dialogue: 0,2:20:53.08,2:20:54.14,英文,,0,0,0,,And we've seen this in code.
Dialogue: 0,2:20:54.14,2:20:57.31,英文,,0,0,0,,You can give multiple inputs or arguments to functions.
Dialogue: 0,2:20:57.31,2:21:01.11,英文,,0,0,0,,So in this black box, can you imagine passing in the message you want to send?
Dialogue: 0,2:21:01.11,2:21:02.69,英文,,0,0,0,,And then some secret.
Dialogue: 0,2:21:02.69,2:21:10.39,英文,,0,0,0,,So for instance, suppose that the simplest thing I could think of as a kid was, instead of sending the letter A, why don't I write the letter B?
Dialogue: 0,2:21:10.39,2:21:13.13,英文,,0,0,0,,Instead of the letter B, why don't I write the letter C?
Dialogue: 0,2:21:13.13,2:21:16.09,英文,,0,0,0,,So I can kind of shift the English alphabet by one space.
Dialogue: 0,2:21:16.09,2:21:24.22,英文,,0,0,0,,So a becomes B, B becomes C dot dot dot Z becomes a. You can wrap around at the end and let's assume no punctuation in this part of the story.
Dialogue: 0,2:21:24.22,2:21:26.56,英文,,0,0,0,,So that's a very simple algorithm.
Dialogue: 0,2:21:26.56,2:21:32.10,英文,,0,0,0,,Add a value to each letter and send the value as the cipher text.
Dialogue: 0,2:21:32.10,2:21:41.31,英文,,0,0,0,,And now the teacher, the classmate, they have to know that you use not only this rotational algorithm, also known as a Caesar cipher, they also need to know what number you used.
Dialogue: 0,2:21:41.31,2:21:45.41,英文,,0,0,0,,Did you add 1 to every letter, 2 to every letter, 25 to every letter?
Dialogue: 0,2:21:45.41,2:21:51.41,英文,,0,0,0,,Now, if they're super smart, and probably not the young age in this story, they could also just try all possibilities.
Dialogue: 0,2:21:51.41,2:21:52.92,英文,,0,0,0,,And that would be an attack on the algorithm.
Dialogue: 0,2:21:52.92,2:21:54.94,英文,,0,0,0,,This is not a sophisticated algorithm.
Dialogue: 0,2:21:54.94,2:21:57.04,英文,,0,0,0,,But it's enough to send a message in class.
Dialogue: 0,2:21:57.04,2:22:00.70,英文,,0,0,0,,So if the two inputs now are high, as the plain text message,
Dialogue: 0,2:22:00.70,2:22:10.93,英文,,0,0,0,,And 1, as the so-called key, the secret number that only you and the other person know, you might be able to encrypt a message from one way to the other.
Dialogue: 0,2:22:10.93,2:22:16.59,英文,,0,0,0,,And so in this case, for instance, hi would become IJ, exclamation point.
Dialogue: 0,2:22:16.59,2:22:19.77,英文,,0,0,0,,In this version of the algorithm, we're not going to bother with numbers or punctuation.
Dialogue: 0,2:22:19.77,2:22:23.29,英文,,0,0,0,,We'll only operate on A through Z, be it uppercase or lowercase.
Dialogue: 0,2:22:23.29,2:22:36.60,英文,,0,0,0,,So now, if you were to receive a slip of paper in class with IJ on it, you, the recipient, would know what it is so long as you know that the sender used 1, because you just reversed the algorithm and you subtract 1 instead.
Dialogue: 0,2:22:36.60,2:22:39.06,英文,,0,0,0,,The teacher, they probably don't know what this means.
Dialogue: 0,2:22:39.06,2:22:41.10,英文,,0,0,0,,And they're not going to spend time hacking the message.
Dialogue: 0,2:22:41.10,2:22:42.94,英文,,0,0,0,,So it just looks scrambled to them.
Dialogue: 0,2:22:42.94,2:22:44.76,英文,,0,0,0,,And that's what we get from encryption.
Dialogue: 0,2:22:44.76,2:22:52.87,英文,,0,0,0,,Someone who intercepts it, be it in class or in the real world, on the internet or anywhere else, can't actually figure out, ideally, what it is you have sent.
Dialogue: 0,2:22:52.87,2:22:55.13,英文,,0,0,0,,The opposite, of course, is indeed called decryption.
Dialogue: 0,2:22:55.13,2:22:56.29,英文,,0,0,0,,But the process is the same.
Dialogue: 0,2:22:56.29,2:22:58.63,英文,,0,0,0,,We now pass in negative 1.
Dialogue: 0,2:22:58.63,2:23:00.33,英文,,0,0,0,,And so how about this?
Dialogue: 0,2:23:00.33,2:23:03.33,英文,,0,0,0,,Why don't we end with a demonstration here?
Dialogue: 0,2:23:03.33,2:23:07.10,英文,,0,0,0,,u, y, j, t, x, b, t, d, t, 5, 0.
Dialogue: 0,2:23:07.10,2:23:08.36,英文,,0,0,0,,There's a bit of a tell there.
Dialogue: 0,2:23:08.36,2:23:14.31,英文,,0,0,0,,If we pass that in and do negative 1, well, how do we get out the plain text originally?
Dialogue: 0,2:23:14.31,2:23:21.60,英文,,0,0,0,,Well, if this is the ciphertext and we subtract 1 from each letter, I think u becomes t.
Dialogue: 0,2:23:21.60,2:23:37.57,英文,,0,0,0,,I becomes H. J becomes I. T becomes S. X becomes W. B becomes A. T becomes S. D becomes C. T becomes S. And this was indeed CS50.
Dialogue: 0,2:23:37.57,2:23:40.23,英文,,0,0,0,,Have a duck on your way out and some snacks in the lobby.
Dialogue: 0,0:01:12.96,0:01:20.61,中文,,0,0,0,,这里是CS50，这是第二周，我们将深入了解事物的运作原理。
Dialogue: 0,0:01:20.61,0:01:36.23,中文,,0,0,0,,事实上，课程的目标之一就是从底层开始理解，这样在几周甚至几年后，\N当你遇到一些新技术时，你能回想起本周和整个课程的基本构建模块和原语，从而推断出 新的技术是如何运作的。
Dialogue: 0,0:01:36.23,0:01:41.27,中文,,0,0,0,,不过在这个过程中，或许会有点难以看到大局，就像俗语所说的，可能会难以看到树木后的森林。
Dialogue: 0,0:01:41.27,0:01:45.02,中文,,0,0,0,,因此，最终的目标依然是解决问题。
Dialogue: 0,0:01:45.02,0:01:50.68,中文,,0,0,0,,我们想今天开始先看一些我们这周将要讨论或解决的问题。
Dialogue: 0,0:01:50.68,0:01:53.26,中文,,0,0,0,,为此，我们有一些勇敢的志愿者已经站出来。
Dialogue: 0,0:01:53.26,0:01:58.56,中文,,0,0,0,,如果我们能打开一些戏剧性的灯光，与今天的志愿者们见面。
Dialogue: 0,0:01:58.56,0:02:00.68,中文,,0,0,0,,那么在我左边，我们有谁呢？
Dialogue: 0,0:02:00.68,0:02:01.88,中文,,0,0,0,,嗨，我的名字是Alex。
Dialogue: 0,0:02:01.88,0:02:05.34,中文,,0,0,0,,我是一名大一新生，来自北卡罗来纳州的教堂山。
Dialogue: 0,0:02:05.34,0:02:07.40,中文,,0,0,0,,Alex，欢迎来到CS50。
Dialogue: 0,0:02:07.40,0:02:09.30,中文,,0,0,0,,还有Alex的右边。
Dialogue: 0,0:02:09.30,0:02:11.20,中文,,0,0,0,,我是Sarah。 我来自加拿大的多伦多。
Dialogue: 0,0:02:11.20,0:02:13.31,中文,,0,0,0,,而且，我也是大学的一年级学生。
Dialogue: 0,0:02:13.31,0:02:13.85,中文,,0,0,0,,太棒了。
Dialogue: 0,0:02:13.85,0:02:15.95,中文,,0,0,0,,那么，欢迎Alex和Sarah。
Dialogue: 0,0:02:15.95,0:02:22.72,中文,,0,0,0,,这周你们可能要解决问题集二中的一个问题，那就是分析一段文本的阅读水平。
Dialogue: 0,0:02:22.72,0:02:28.66,中文,,0,0,0,,无论是阅读水平是一年级，二年级，三年级，一直到12或13岁，甚至更高。
Dialogue: 0,0:02:28.66,0:02:36.75,中文,,0,0,0,,但你也许从来没有真正考虑过，尤其是在代码方面，如何分析一些文本，一些书，然后弄清楚它的阅读水平是什么。
Dialogue: 0,0:02:36.75,0:02:40.45,中文,,0,0,0,,然而，可以肯定的是，我们成长中的老师或多或少都知道或者有一种直觉感。
Dialogue: 0,0:02:40.45,0:02:42.45,中文,,0,0,0,,那么让我们考虑一些示例文本。
Dialogue: 0,0:02:42.45,0:02:46.28,中文,,0,0,0,,例如，Alex，你最近都读了些什么？
Dialogue: 0,0:02:46.28,0:02:52.69,中文,,0,0,0,,一条鱼，两条鱼，红鱼，蓝鱼。
Dialogue: 0,0:02:52.69,0:02:53.45,中文,,0,0,0,,太棒了。
Dialogue: 0,0:02:53.45,0:02:58.86,中文,,0,0,0,,那么鉴于此，你认为Alex目前读到了哪个年级？
Dialogue: 0,0:02:58.86,0:03:01.62,中文,,0,0,0,,随意喊出来就可以。
Dialogue: 0,0:03:01.62,0:03:10.43,中文,,0,0,0,,首先确实，你们会在这周看到，如果你们在Alex的文本上运行代码，实际上，他的阅读水平低于一年级。
Dialogue: 0,0:03:10.43,0:03:12.45,中文,,0,0,0,,但为什么会这样呢？
Dialogue: 0,0:03:12.45,0:03:19.03,中文,,0,0,0,,你们认为我们为什么指责Alex的阅读水平如此之低呢？
Dialogue: 0,0:03:19.03,0:03:21.25,中文,,0,0,0,,随时可以大声说出来。
Dialogue: 0,0:03:21.25,0:03:24.50,中文,,0,0,0,,是的，非常少的音节，短词汇，短句子。
Dialogue: 0,0:03:24.50,0:03:30.36,中文,,0,0,0,,因此，也许我们可以从这段短文本中推断出一些启发式方法，可能意味着它更适合年幼的孩子。
Dialogue: 0,0:03:30.36,0:03:33.43,中文,,0,0,0,,现在, 萨拉, 相比之下, 你都读了些什么呢?
Dialogue: 0,0:03:33.43,0:03:34.39,中文,,0,0,0,,先生和夫人。
Dialogue: 0,0:03:34.39,0:03:38.42,中文,,0,0,0,,第四号普里维特大街的达思里夫人和先生很自豪地说,
Dialogue: 0,0:03:38.42,0:03:39.88,中文,,0,0,0,,他们是绝对正常的。
Dialogue: 0,0:03:39.88,0:03:41.16,中文,,0,0,0,,非常感谢。
Dialogue: 0,0:03:41.16,0:03:48.73,中文,,0,0,0,,他们是你最不会期望卷入奇怪或神秘事情的最后的人, 因为他们不喜欢太多废话。
Dialogue: 0,0:03:48.73,0:03:48.93,中文,,0,0,0,,好的。
Dialogue: 0,0:03:48.93,0:03:55.35,中文,,0,0,0,,无论你读那篇文章时是几年级，Sarah似乎在读几年级的文本?
Dialogue: 0,0:03:55.35,0:03:57.63,中文,,0,0,0,,所以是八年级还是二年级。
Dialogue: 0,0:03:57.63,0:04:03.23,中文,,0,0,0,,听到了各种各样的声音，根据代码，实际上是七年级。
Dialogue: 0,0:04:03.23,0:04:05.32,中文,,0,0,0,,那里的直觉是什么?
Dialogue: 0,0:04:05.32,0:04:11.43,中文,,0,0,0,,为什么这是一个更高的年级，尽管我们可能在确切是哪个年级上有不同意见?
Dialogue: 0,0:04:11.43,0:04:14.21,中文,,0,0,0,,是的，复杂的句子，更长的句子。
Dialogue: 0,0:04:14.21,0:04:18.39,中文,,0,0,0,,确实，Sarah说了更多的话，因为页面上有更多的内容。
Dialogue: 0,0:04:18.39,0:04:26.89,中文,,0,0,0,,我们会在这一周的第二个问题集中翻译这些想法，如果你解决了这个问题，就可以编写代码，从而能够定量地推断这些事情。
Dialogue: 0,0:04:26.89,0:04:29.19,中文,,0,0,0,,但要做到这一点，我们需要理解文本。
Dialogue: 0,0:04:29.19,0:04:40.83,中文,,0,0,0,,那我们首先感谢一下我们的志愿者，然后再进入下一个环节。抱歉，压力球你们可以留着。
Dialogue: 0,0:04:40.83,0:04:50.12,中文,,0,0,0,,除此之外，让我们考虑这周可能会看到的另一段文本，也就是类似这样的一些东西。
Dialogue: 0,0:04:50.12,0:04:53.86,中文,,0,0,0,,我在屏幕上显示的是我们今天要开始称之为密文的东西。
Dialogue: 0,0:04:53.86,0:04:56.54,中文,,0,0,0,,这是加密一些信息的结果。
Dialogue: 0,0:04:56.54,0:05:01.12,中文,,0,0,0,,加密，或更广泛地说，密码学的艺术和科学，无处不在。
Dialogue: 0,0:05:01.12,0:05:03.66,中文,,0,0,0,,这就是你在网络上、手机上、与银行一起使用的东西。
Dialogue: 0,0:05:03.66,0:05:07.12,中文,,0,0,0,,任何试图保护数据安全的东西都在使用加密。
Dialogue: 0,0:05:07.12,0:05:11.15,中文,,0,0,0,,但会有不同级别的加密，强加密，弱加密。
Dialogue: 0,0:05:11.15,0:05:14.73,中文,,0,0,0,,而你在屏幕上看到的并不是那么强大。
Dialogue: 0,0:05:14.73,0:05:22.18,中文,,0,0,0,,但今天稍后我们将看到如何解密它，并揭示对应于密文的明文是什么。
Dialogue: 0,0:05:22.18,0:05:26.18,中文,,0,0,0,,但为了这样做，我们必须开始摘掉一些象征性的训练轮。
Dialogue: 0,0:05:26.18,0:05:39.75,中文,,0,0,0,,信不信由你，尽管你在过去的一周里与C交往的时间可能是第一次，\N可能会比C看起来更加复杂，但事实证明，在这个过程中，我们一直在提供并将继续提供某些辅助。
Dialogue: 0,0:05:39.75,0:05:49.62,中文,,0,0,0,,例如，cs50库就是其中之一，甚至有些在过去几周的学习中，我们对某些主题的解释将会有些简化，抽象化，你可以这么理解。
Dialogue: 0,0:05:49.62,0:06:01.15,中文,,0,0,0,,但最终的目标是让你理解每一个细节，这样在CS50之后，你真的能够独立站立起来，理解并掌握未来的技术。
Dialogue: 0,0:06:01.15,0:06:05.99,中文,,0,0,0,,首先让我们考虑上周我们开始的第一个程序，就是这个。
Dialogue: 0,0:06:05.99,0:06:11.68,中文,,0,0,0,,所以hello，world，最后可以看出，实际上打印函数才是做工作的有趣部分。
Dialogue: 0,0:06:11.68,0:06:14.88,中文,,0,0,0,,但在它上面和下面还有很多技术性的东西。
Dialogue: 0,0:06:14.88,0:06:19.60,中文,,0,0,0,,大括号，小括号，像void和include这样的单词。
Dialogue: 0,0:06:19.60,0:06:21.90,中文,,0,0,0,,当然还有尖括号等等。
Dialogue: 0,0:06:21.90,0:06:30.37,中文,,0,0,0,,但归根结底，我们需要将C源代码转换为计算机理解的二进制中的0和1。
Dialogue: 0,0:06:30.37,0:06:37.43,中文,,0,0,0,,为了做到这一点，当然，我们运行，我们编译代码，我们运行make，然后我们才能真正运行那段代码。
Dialogue: 0,0:06:37.43,0:06:44.42,中文,,0,0,0,,让我实际来到VS Code这里，通过基本上抄写相同的方式快速重建那个hello.c。
Dialogue: 0,0:06:44.42,0:06:49.69,中文,,0,0,0,,我可能在这里包括stdio.h。
Dialogue: 0,0:06:49.69,0:06:52.21,中文,,0,0,0,,int main(void)，表示 main 函数没有参数
Dialogue: 0,0:06:52.21,0:06:57.58,中文,,0,0,0,,然后在这里，我就简单地说一声hello，world,跟我的反斜杠结束引号等等。
Dialogue: 0,0:06:57.58,0:07:01.98,中文,,0,0,0,,上次编译它时，我确实运行了make hello然后按回车。
Dialogue: 0,0:07:01.98,0:07:03.76,中文,,0,0,0,,希望你看不到错误，那是好事。
Dialogue: 0,0:07:03.76,0:07:07.97,中文,,0,0,0,,如果你运行./hello，你会看到程序的结果，
Dialogue: 0,0:07:07.97,0:07:11.47,中文,,0,0,0,,但事实证明，make并不是一个编译器。
Dialogue: 0,0:07:11.47,0:07:19.02,中文,,0,0,0,,就像我上周提到的那样，它只是一个明显可以make你的程序的程序，但它本身只是自动化了使用实际编译器的过程。
Dialogue: 0,0:07:19.02,0:07:21.34,中文,,0,0,0,,而且有很多不同的编译器。
Dialogue: 0,0:07:21.34,0:07:27.75,中文,,0,0,0,,它实际上在底层使用的是一个叫做C语言的东西。
Dialogue: 0,0:07:27.75,0:07:30.15,中文,,0,0,0,,而clang如今是一个相当流行的编译器。
Dialogue: 0,0:07:30.15,0:07:33.65,中文,,0,0,0,,还有一个存在已久的叫做GCC的。
Dialogue: 0,0:07:33.65,0:07:40.38,中文,,0,0,0,,但这些只是不同人、不同公司、不同团体实际上创建的编译器类型的具体名称。
Dialogue: 0,0:07:40.38,0:07:50.69,中文,,0,0,0,,如果你在第一周自己手动使用编译器，你必须更多地了解正在发生的事情，因为它比我们所见到的更加晦涩。
Dialogue: 0,0:07:50.69,0:07:53.13,中文,,0,0,0,,事实上，让我回到我的终端窗口这里。
Dialogue: 0,0:07:53.13,0:07:59.27,中文,,0,0,0,,我清除一下屏幕，然后运行，真的是原始的编译器命令。
Dialogue: 0,0:07:59.27,0:08:03.67,中文,,0,0,0,,自动化为我做了什么，让我手动做一会儿。
Dialogue: 0,0:08:03.67,0:08:17.36,中文,,0,0,0,,如果我想把hello.c编译成一个可以运行的可执行程序，我可以这样做，输入clang空格hello.c然后按回车。
Dialogue: 0,0:08:17.36,0:08:19.80,中文,,0,0,0,,现在没有输出，这是一件好事。
Dialogue: 0,0:08:19.80,0:08:21.00,中文,,0,0,0,,在这种情况下，没有错误。
Dialogue: 0,0:08:21.00,0:08:21.98,中文,,0,0,0,,但请注意。
Dialogue: 0,0:08:21.98,0:08:32.13,中文,,0,0,0,,如果我继续输入ls，结果发现有一个文件突然出现在我的当前文件夹中，奇怪地叫做a.out。
Dialogue: 0,0:08:32.13,0:08:33.57,中文,,0,0,0,,这代表汇编输出。
Dialogue: 0,0:08:33.57,0:08:39.37,中文,,0,0,0,,长话短说，那实际上是当你只运行clang本身时创建的程序的默认名称。
Dialogue: 0,0:08:39.37,0:08:43.92,中文,,0,0,0,,这是一个相当糟糕的程序名称，因为它不描述它的功能。
Dialogue: 0,0:08:43.92,0:08:55.43,中文,,0,0,0,,更好的做法可能是在这里，不要使用a.out，这仍然会打印hello.world，但不是一个明确命名的程序，最好将其命名为hello。
Dialogue: 0,0:08:55.43,0:08:56.17,中文,,0,0,0,,那我该怎么做？
Dialogue: 0,0:08:56.17,0:08:57.47,中文,,0,0,0,,我可以像上周学的那样做。
Dialogue: 0,0:08:57.47,0:09:01.91,中文,,0,0,0,,我可以使用Linux的mv命令将a.out重命名为hello。
Dialogue: 0,0:09:01.91,0:09:04.63,中文,,0,0,0,,我要把a.out移动到hello。
Dialogue: 0,0:09:04.63,0:09:06.38,中文,,0,0,0,,但那也似乎有点繁琐。
Dialogue: 0,0:09:06.38,0:09:12.30,中文,,0,0,0,,现在我有三个步骤，就像编写我的代码，编译我的代码，然后才能运行之前重命名它。
Dialogue: 0,0:09:12.30,0:09:13.66,中文,,0,0,0,,我们可以做得更好。
Dialogue: 0,0:09:13.66,0:09:20.42,中文,,0,0,0,,因此，事实证明某些命令，如clang，支持我们今天要开始称之为命令行参数的东西。
Dialogue: 0,0:09:20.42,0:09:33.34,中文,,0,0,0,,命令行参数，与函数的参数不同，只是在你的终端窗口提示符后\N键入的一个附加单词或关键词短语，它只是修改该命令的行为的一种方式。
Dialogue: 0,0:09:33.34,0:09:35.66,中文,,0,0,0,,它更具体地配置了它。
Dialogue: 0,0:09:35.66,0:09:43.35,中文,,0,0,0,,你在屏幕上看到的是一个更好的clang运行命令的摘要，这样我就可以指定输出。
Dialogue: 0,0:09:43.35,0:09:45.45,中文,,0,0,0,,在这个命令的每个显示中。
Dialogue: 0,0:09:45.45,0:09:46.59,中文,,0,0,0,,那么我是什么意思呢？
Dialogue: 0,0:09:46.59,0:09:52.57,中文,,0,0,0,,让我再次清空我的终端窗口，然后更明确地输入clang短线o空格hello,hello点c
Dialogue: 0,0:09:52.57,0:09:56.57,中文,,0,0,0,,然后再次输入，似乎什么都没有发生。
Dialogue: 0,0:09:56.57,0:09:58.43,中文,,0,0,0,,但当你看到没有错误时，那是一件好事。
Dialogue: 0,0:09:58.43,0:10:03.08,中文,,0,0,0,,我刚刚创建的程序的确叫做hello。
Dialogue: 0,0:10:03.08,0:10:06.86,中文,,0,0,0,,它实际上达到了与make完全相同的效果。
Dialogue: 0,0:10:06.86,0:10:10.98,中文,,0,0,0,,但与make不同的是，我不必键入并记住这个命令的如此之长。
Dialogue: 0,0:10:10.98,0:10:12.78,中文,,0,0,0,,而这也有点夸张其词。
Dialogue: 0,0:10:12.78,0:10:23.04,中文,,0,0,0,,原来，我们已经为你在云中预配置了VS Code，以便你还可以使用clang的一些其他功能，这些功能如果自己编写将更加繁琐。
Dialogue: 0,0:10:23.04,0:10:28.28,中文,,0,0,0,,真正的原因是，最终我们只是运行make。
Dialogue: 0,0:10:28.28,0:10:49.32,中文,,0,0,0,,让我在这里暂停一下，看看是否有任何关于我刚刚拿我的第一个C程序，首先使用make编译它，然后重新开始，\N现在手动使用clang编译它，使用我们将称之为命令行参数的方法，dasho，空格hello，然后是文件的名称这部分有疑问的。
Dialogue: 0,0:10:49.32,0:10:51.92,中文,,0,0,0,,是的，".out" 是一个历史悠久的名称。
Dialogue: 0,0:10:51.92,0:10:55.28,中文,,0,0,0,,它指的是汇编程序的输出，稍后会详细介绍。
Dialogue: 0,0:10:55.28,0:11:03.00,中文,,0,0,0,,这只是默认的文件名，如果你只是在任何文件上运行编译器，你会自动得到这个标准的名字。
Dialogue: 0,0:11:03.00,0:11:05.30,中文,,0,0,0,,但它不是一个很好的命名程序。
Dialogue: 0,0:11:05.30,0:11:09.94,中文,,0,0,0,,与在你的Mac或PC上运行Microsoft Word不同，它就像双击.out一样。
Dialogue: 0,0:11:09.94,0:11:17.48,中文,,0,0,0,,通过这些命令行参数，你可以自定义播放的输出，并将其命名为hello或任何你想要的名字。
Dialogue: 0,0:11:17.48,0:11:25.65,中文,,0,0,0,,关于我在clang本身上做的事情，编译器还有其他问题吗？
Dialogue: 0,0:11:25.65,0:11:30.41,中文,,0,0,0,,所以dash o，只有通过阅读手册，上课，你才会知道，意思是输出。
Dialogue: 0,0:11:30.41,0:11:38.67,中文,,0,0,0,,dash o意味着将clang的输出更改为一个名为hello的文件，而不是默认的点输出。
Dialogue: 0,0:11:38.67,0:11:44.90,中文,,0,0,0,,而且，这也是你需要在网页上查找，阅读手册，或者听像我这样的人告诉你的细节。
Dialogue: 0,0:11:44.90,0:11:46.84,中文,,0,0,0,,实际上，还有更多选项。
Dialogue: 0,0:11:46.84,0:11:49.05,中文,,0,0,0,,但我们现在只是浅尝辄止。
Dialogue: 0,0:11:49.05,0:11:53.50,中文,,0,0,0,,现在我们知道了这些，那么在幕后实际发生了什么？
Dialogue: 0,0:11:53.50,0:12:06.04,中文,,0,0,0,,让我们仔细看看不仅仅是我的这个版本的代码，\N还有上周稍微复杂一点的版本，看起来有点像这样，我在这里添加了一些来自用户的动态输入。
Dialogue: 0,0:12:06.04,0:12:11.85,中文,,0,0,0,,我可以说不是大家好，世界，而是hello，大卫，或者hello，运行这个程序的人。
Dialogue: 0,0:12:11.85,0:12:17.77,中文,,0,0,0,,实际上，让我继续在VS Code中更改我的代码，以匹配上周的相同代码。
Dialogue: 0,0:12:17.77,0:12:19.19,中文,,0,0,0,,所以没有新的代码。
Dialogue: 0,0:12:19.19,0:12:22.75,中文,,0,0,0,,我只是在稍微不同的方式编译它。
Dialogue: 0,0:12:22.75,0:12:31.80,中文,,0,0,0,,我上周用了字符串（string），我认为是这样的，string answer = get_string("What's your name?");，就像在Scratch中一样。
Dialogue: 0,0:12:31.80,0:12:37.66,中文,,0,0,0,,然后在这里，我一开始写的不是world，而是答案，但那不太顺利。
Dialogue: 0,0:12:37.66,0:12:43.06,中文,,0,0,0,,我最终是怎么做的，而不是打印出“hello，David”或“你好，某某”？
Dialogue: 0,0:12:43.06,0:12:44.84,中文,,0,0,0,,是的。
Dialogue: 0,0:12:44.84,0:12:46.56,中文,,0,0,0,,抱歉，大声一点。
Dialogue: 0,0:12:46.56,0:12:46.84,中文,,0,0,0,,是的。
Dialogue: 0,0:12:46.84,0:12:51.03,中文,,0,0,0,,所以%s，就是printf只懂得如何处理的格式代码。
Dialogue: 0,0:12:51.03,0:12:52.37,中文,,0,0,0,,而且我还必须加入另一件事。
Dialogue: 0,0:12:52.37,0:12:56.17,中文,,0,0,0,,除了%f之外的其他人。是的。
Dialogue: 0,0:12:56.17,0:13:01.73,中文,,0,0,0,,我要插入到占位符%s的变量名称。在这种情况下，它是答案。
Dialogue: 0,0:13:01.73,0:13:04.53,中文,,0,0,0,,让我做一个微调，只是因为现在我们进入了第二周。
Dialogue: 0,0:13:04.53,0:13:11.68,中文,,0,0,0,,我们将开始编写更多行代码，即使Scratch总是称之为ask拼图答案的返回值。
Dialogue: 0,0:13:11.68,0:13:14.54,中文,,0,0,0,,在C中，我们完全控制变量的命名。
Dialogue: 0,0:13:14.54,0:13:19.98,中文,,0,0,0,,如果我正在使用get_string，现在不仅仅是一直称呼我的变量为答案，这可能是个好主意。
Dialogue: 0,0:13:19.98,0:13:20.96,中文,,0,0,0,,让我们称它为它的实际名称。
Dialogue: 0,0:13:20.96,0:13:23.78,中文,,0,0,0,,现在这只是一个风格问题，如果你愿意。
Dialogue: 0,0:13:23.78,0:13:25.38,中文,,0,0,0,,让我改变这个变量，
Dialogue: 0,0:13:25.38,0:13:34.13,中文,,0,0,0,,只是为了让我、你、还有TF或TA更清楚地知道这个变量代表什么，而不是更普遍的答案。
Dialogue: 0,0:13:34.13,0:13:37.05,中文,,0,0,0,,那么说了这么多，让我来到我的终端窗口。
Dialogue: 0,0:13:37.05,0:13:41.27,中文,,0,0,0,,而上周，再次运行make来编译这个完全相同的程序。
Dialogue: 0,0:13:41.27,0:13:43.29,中文,,0,0,0,,让我继续使用clang。
Dialogue: 0,0:13:43.29,0:13:47.75,中文,,0,0,0,,所以clang -o。我仍然会称这个版本为hello。
Dialogue: 0,0:13:47.75,0:13:56.31,中文,,0,0,0,,空格hello.c。和之前完全相同的命令。 唯一不同的是，我添加了几行代码来获取用户的输入。
Dialogue: 0,0:13:56.31,0:13:57.76,中文,,0,0,0,,让我按回车键。
Dialogue: 0,0:13:57.76,0:13:59.88,中文,,0,0,0,,该死的，我们的第一个错误。
Dialogue: 0,0:13:59.88,0:14:02.76,中文,,0,0,0,,所以从clang和make的输出不是好事。
Dialogue: 0,0:14:02.76,0:14:05.44,中文,,0,0,0,,在这里，我们看到了一些特别神秘的东西。
Dialogue: 0,0:14:05.44,0:14:07.86,中文,,0,0,0,,所以在主函数中有一些问题
Dialogue: 0,0:14:07.86,0:14:13.48,中文,,0,0,0,,对get_string的引用未定义，然后链接器命令失败，退出代码为1。
Dialogue: 0,0:14:13.48,0:14:16.70,中文,,0,0,0,,这里实际上有很多术语，我们今天将一一解释。
Dialogue: 0,0:14:16.70,0:14:22.21,中文,,0,0,0,,但我的提示是，显然我的问题在Maine，虽然这并不令人意外，因为这里没有别的事情发生。
Dialogue: 0,0:14:22.21,0:14:26.87,中文,,0,0,0,,获取字符串是一个问题，问题在于它是一个未定义的引用。
Dialogue: 0,0:14:26.87,0:14:28.97,中文,,0,0,0,,然而请注意，我做得相当不错。
Dialogue: 0,0:14:28.97,0:14:36.16,中文,,0,0,0,,我添加了cs50头文件，并且上周我说这已经足够让编译器知道函数的存在。
Dialogue: 0,0:14:36.16,0:14:51.94,中文,,0,0,0,,但问题是，即使这样做，事实上确实教会了clang get_string的存在，\N这对于clang来说并不足以在计算机的硬盘上找到实际实现get_string的那些0和1。
Dialogue: 0,0:14:51.94,0:14:55.06,中文,,0,0,0,,换句话说，这个包含行和上周一样是一个小提示。
Dialogue: 0,0:14:55.06,0:14:59.68,中文,,0,0,0,,这是一个提前看到并在某处使用此函数的提示。
Dialogue: 0,0:14:59.68,0:15:15.51,中文,,0,0,0,,但如果你真的想要使用cs 50之前编写的0和1，并将其嵌入到你的程序中，\N以便你的程序真正知道如何从用户那里获取输入，那么我将不得不运行一个略有不同的命令。
Dialogue: 0,0:15:15.51,0:15:16.15,中文,,0,0,0,,让我来做这个。
Dialogue: 0,0:15:16.15,0:15:18.83,中文,,0,0,0,,让我清空我的终端窗口，以摆脱那些干扰。
Dialogue: 0,0:15:18.83,0:15:23.24,中文,,0,0,0,,并且现在让我建议我们运行这个命令。
Dialogue: 0,0:15:23.24,0:15:32.48,中文,,0,0,0,,几乎与之前一样，clang-o，空格hello，然后hello.c，但在末尾多了一个命令行参数。
Dialogue: 0,0:15:32.48,0:15:35.07,中文,,0,0,0,,这是一个短横线l，不是数字1。
Dialogue: 0,0:15:35.07,0:15:39.55,中文,,0,0,0,,所以短横线l，cs50，中间没有空格。
Dialogue: 0,0:15:39.55,0:15:49.00,中文,,0,0,0,,现在是 l 会导致所有那些由cs50实际编写的0和1被链接到你的代码中，你的几行代码或思维在这里。
Dialogue: 0,0:15:49.00,0:16:00.37,中文,,0,0,0,,但这是编译器需要的第二步，以便知道如何实际执行和编译你的代码，而cs50不是唯一一个这样做的。
Dialogue: 0,0:16:00.37,0:16:08.35,中文,,0,0,0,,如果你使用任何第三方库，并且看到它不随语言一起提供，你可以使用短横线l然后是它的名称。
Dialogue: 0,0:16:08.35,0:16:09.99,中文,,0,0,0,,但他们已经为自己的库命名了。
Dialogue: 0,0:16:09.99,0:16:14.48,中文,,0,0,0,,你不必为像我们迄今使用的内置内容这样做。
Dialogue: 0,0:16:14.48,0:16:16.12,中文,,0,0,0,,那就让我去试试吧。
Dialogue: 0,0:16:16.12,0:16:17.86,中文,,0,0,0,,我会回到VS Code这里。
Dialogue: 0,0:16:17.86,0:16:23.63,中文,,0,0,0,,然后让我继续运行clang-o hello，然后hello.c。
Dialogue: 0,0:16:23.63,0:16:29.85,中文,,0,0,0,,不再只是按Enter键，是连字符l和cs50之间没有空格，然后按Enter。
Dialogue: 0,0:16:29.85,0:16:31.25,中文,,0,0,0,,什么坏事都不会发生。
Dialogue: 0,0:16:31.25,0:16:33.53,中文,,0,0,0,,我可以运行./hello。
Dialogue: 0,0:16:33.53,0:16:34.16,中文,,0,0,0,,你叫什么名字？
Dialogue: 0,0:16:34.16,0:16:35.14,中文,,0,0,0,,我会输入David。
Dialogue: 0,0:16:35.14,0:16:35.88,中文,,0,0,0,,输入。
Dialogue: 0,0:16:35.88,0:16:37.92,中文,,0,0,0,,现在我们看到hello，David。
Dialogue: 0,0:16:37.92,0:16:40.34,中文,,0,0,0,,老实说，这是我们真正深入细节的地方。
Dialogue: 0,0:16:40.34,0:16:46.50,中文,,0,0,0,,这真的只是给编译和运行代码增加了麻烦。
Dialogue: 0,0:16:46.50,0:16:57.11,中文,,0,0,0,,实际上，尽管这确实是发生的事情，这就是我们上周使用并将继续在本周使用的原因，因为它只是为你自动化了整个过程。
Dialogue: 0,0:16:57.11,0:17:05.96,中文,,0,0,0,,但最好能理解问题出在哪里，因为你在第一个问题集里看到的任何错误信息，\N以及接下来几周看到的任何错误信息，很可能都不是来自于 make。
Dialogue: 0,0:17:05.96,0:17:10.80,中文,,0,0,0,,它们都来自make底层的clang，因为make只是自动化了这个过程。
Dialogue: 0,0:17:10.80,0:17:14.04,中文,,0,0,0,,但有了make，你只需输入make，然后程序的名称。
Dialogue: 0,0:17:14.04,0:17:17.72,中文,,0,0,0,,你不必担心任何那些命令行参数。
Dialogue: 0,0:17:17.72,0:17:22.22,中文,,0,0,0,,对于使用-dash L、cs50或其他编译的问题，还有其他问题吗？
Dialogue: 0,0:17:22.22,0:17:24.96,中文,,0,0,0,,是吗？
Dialogue: 0,0:17:24.96,0:17:27.47,中文,,0,0,0,,抱歉，有什么好处吗？
Dialogue: 0,0:17:27.47,0:17:30.15,中文,,0,0,0,,手动使用clang有什么好处？
Dialogue: 0,0:17:30.15,0:17:30.91,中文,,0,0,0,,没有真的。
Dialogue: 0,0:17:30.91,0:17:35.42,中文,,0,0,0,,实际上，所有main函数所做的就是为我们省下一些按键的工作。
Dialogue: 0,0:17:35.42,0:17:42.23,中文,,0,0,0,,不过，如果你更喜欢掌控，你完全可以手动运行clang，只要你记得各种命令行参数。
Dialogue: 0,0:17:42.23,0:17:47.76,中文,,0,0,0,,是的。
Dialogue: 0,0:17:47.76,0:17:48.18,中文,,0,0,0,,完全正确。
Dialogue: 0,0:17:48.18,0:17:55.64,中文,,0,0,0,,为什么我要解释，也就是提供一下cs50.h头文件的提示给cs50，但我对stdio.h不需要这样做呢？
Dialogue: 0,0:17:55.64,0:17:56.43,中文,,0,0,0,,就是因为。
Dialogue: 0,0:17:56.43,0:18:03.11,中文,,0,0,0,,stdio.h是C语言自带的，就像其他一些库也是随C语言一起使用的，我们今天就要开始看到一些。
Dialogue: 0,0:18:03.11,0:18:12.03,中文,,0,0,0,,cs50并不是随处都内置在C语言中的，所以你必须明确地将它添加在那里。
Dialogue: 0,0:18:12.03,0:18:25.67,中文,,0,0,0,,命令行参数是你在命令行或终端中键入的一个单词或短语，也就是说为了影响程序的行为。 它会改变默认设置，对吧？
Dialogue: 0,0:18:25.67,0:18:29.69,中文,,0,0,0,,在我们的GUI世界中，图形用户界面，你和我可能会点击一些框。
Dialogue: 0,0:18:29.69,0:18:33.55,中文,,0,0,0,,我们会选择一些菜单选项来配置程序以相同的方式运行。
Dialogue: 0,0:18:33.55,0:18:36.87,中文,,0,0,0,,在命令行界面上，你必须一次性说出所有内容。
Dialogue: 0,0:18:36.87,0:18:43.60,中文,,0,0,0,,这就是为什么我们有命令行参数。
Dialogue: 0,0:18:43.60,0:18:45.14,中文,,0,0,0,,不，make 不仅仅是为了cs50。
Dialogue: 0,0:18:45.14,0:18:52.00,中文,,0,0,0,,它现在在使用C、C++甚至其他语言的任何项目中都全球使用。
Dialogue: 0,0:18:52.00,0:18:57.63,中文,,0,0,0,,事实上，这门课中的大多数命令，除非结尾是 50，都是全球通用的。
Dialogue: 0,0:18:57.63,0:19:00.75,中文,,0,0,0,,只有那些以50结尾的才真正是专业课程。
Dialogue: 0,0:19:00.75,0:19:07.05,中文,,0,0,0,,而且，即使是那些也会逐渐去掉让你明确了解那些命令在做什么。
Dialogue: 0,0:19:07.05,0:19:09.31,中文,,0,0,0,,那么我们刚刚做了什么？
Dialogue: 0,0:19:09.31,0:19:11.71,中文,,0,0,0,,当然，我一直在称之为编译。
Dialogue: 0,0:19:11.71,0:19:18.01,中文,,0,0,0,,但让我们深入了解一下，以便你明白，当你编译代码时，实际上有很多步骤在进行。
Dialogue: 0,0:19:18.01,0:19:27.16,中文,,0,0,0,,这将使许多功能得以实现，比如公司可以编写代码，然后将其转换为在Mac、PC或手机等设备上运行。
Dialogue: 0,0:19:27.16,0:19:30.40,中文,,0,0,0,,这不仅仅是将源代码转换为机器代码的问题。
Dialogue: 0,0:19:30.40,0:19:32.28,中文,,0,0,0,,实际上有四个步骤。
Dialogue: 0,0:19:32.28,0:19:35.82,中文,,0,0,0,,涉及到你和我，截至上周所知的编译。
Dialogue: 0,0:19:35.82,0:19:41.61,中文,,0,0,0,,而这些不是你必须时刻记住的术语，因为我们将抽象掉很多。
Dialogue: 0,0:19:41.61,0:19:49.27,中文,,0,0,0,,但只是为了一探究竟，让我们考虑一下这四个步骤，这已经在你身边自动进行了一个星期。
Dialogue: 0,0:19:49.27,0:19:51.23,中文,,0,0,0,,其中第一个被称为预处理。
Dialogue: 0,0:19:51.23,0:19:52.21,中文,,0,0,0,,那么这是什么意思呢？
Dialogue: 0,0:19:52.21,0:19:57.92,中文,,0,0,0,,让我们考虑一下，同样的程序之前注意到有两行代码以井号开头。
Dialogue: 0,0:19:57.92,0:20:02.52,中文,,0,0,0,,这是C语言中的一个特殊符号，它被称为预处理指令。
Dialogue: 0,0:20:02.52,0:20:13.29,中文,,0,0,0,,你不需要记住这样的术语，它只是意味着它和其他每一行都有点不同，\N这里带有井号的任何东西都应该在任何其他事情发生之前被预处理分析。
Dialogue: 0,0:20:13.29,0:20:15.25,中文,,0,0,0,,让我们考虑一下这前两行。
Dialogue: 0,0:20:15.25,0:20:17.13,中文,,0,0,0,,到底发生了什么？
Dialogue: 0,0:20:17.13,0:20:23.67,中文,,0,0,0,,事实证明，通过这两行，你有两个头文件，当然，cs50.h和stdio.h。
Dialogue: 0,0:20:23.67,0:20:24.85,中文,,0,0,0,,这些文件在哪里？
Dialogue: 0,0:20:24.85,0:20:28.54,中文,,0,0,0,,因为它们对于你在VS Code中似乎是从未存在过的。
Dialogue: 0,0:20:28.54,0:20:35.90,中文,,0,0,0,,如果你输入ls，如果你在GUI中打开文件浏览器，你可能从未见过cs50.h或stdio.h。
Dialogue: 0,0:20:35.90,0:20:37.10,中文,,0,0,0,,它们只是起作用。
Dialogue: 0,0:20:37.10,0:20:40.84,中文,,0,0,0,,但这是因为某个地方有一个文件夹
Dialogue: 0,0:20:40.84,0:20:50.39,中文,,0,0,0,,你的Mac或PC上正在使用的硬盘或云中的某个地方，就像我们的情况一样，文件夹里通常被称为“/用户/包含”。
Dialogue: 0,0:20:50.39,0:20:52.15,中文,,0,0,0,,而用户被故意拼错了。
Dialogue: 0,0:20:52.15,0:20:55.92,中文,,0,0,0,,这只是略微更简洁，尽管我们丢掉了一个字母有点奇怪。
Dialogue: 0,0:20:55.92,0:20:58.68,中文,,0,0,0,,但用户/包括只是一个文件夹。
Dialogue: 0,0:20:58.68,0:21:04.02,中文,,0,0,0,,在include<cs50.h>、stdio.h和许多其他东西的服务器上。
Dialogue: 0,0:21:04.02,0:21:15.45,中文,,0,0,0,,实际上，如果你在云中使用代码空间时在终端窗口中键入VS代码，\N然后键入ls空格斜杠usr空格include，你可以看到该文件夹中的所有文件。
Dialogue: 0,0:21:15.45,0:21:17.67,中文,,0,0,0,,但我们已经为你预先安装了所有这些东西。
Dialogue: 0,0:21:17.67,0:21:20.25,中文,,0,0,0,,让我们考虑一下这些文件实际上包含了什么。
Dialogue: 0,0:21:20.25,0:21:28.96,中文,,0,0,0,,如果我突出显示顶部的这两行以# include开头，那么我上周暗示过，第一个文件中包含的内容
Dialogue: 0,0:21:28.96,0:21:32.86,中文,,0,0,0,,是cs50为你编写的函数的提示。
Dialogue: 0,0:21:32.86,0:21:41.06,中文,,0,0,0,,你可以将这些包含行视为即将成为全局查找和替换的临时占位符。
Dialogue: 0,0:21:41.06,0:21:44.42,中文,,0,0,0,,也就是说，clang要做的第一件事情，是对这个文件进行预处理。
Dialogue: 0,0:21:44.42,0:21:47.45,中文,,0,0,0,,它会查找任何以# include开头的行。
Dialogue: 0,0:21:47.45,0:21:56.61,中文,,0,0,0,,如果它看到了，它就会进入那个文件，比如cs50.h，然后神奇地为你复制并粘贴那个文件的内容。
Dialogue: 0,0:21:56.61,0:22:00.13,中文,,0,0,0,,你在屏幕上看不到它，但它就在幕后发生。
Dialogue: 0,0:22:00.13,0:22:10.97,中文,,0,0,0,,这第一行的实际作用是在cs50.h的某处有get_ string的声明，就像我们上周讨论过的那样。
Dialogue: 0,0:22:10.97,0:22:13.37,中文,,0,0,0,,而且它可能看起来有点像这样。
Dialogue: 0,0:22:13.37,0:22:17.25,中文,,0,0,0,,虽然我们上周没有花太多时间讨论这个，但以后我们会更深入地了解。
Dialogue: 0,0:22:17.25,0:22:21.57,中文,,0,0,0,,请注意，这就是函数声明的方式。
Dialogue: 0,0:22:21.57,0:22:23.89,中文,,0,0,0,,也就是说，它被命令存在。
Dialogue: 0,0:22:23.89,0:22:25.93,中文,,0,0,0,,当然，这个函数的名字是get_string。
Dialogue: 0,0:22:25.93,0:22:28.35,中文,,0,0,0,,括号里面是它的参数。
Dialogue: 0,0:22:28.35,0:22:33.23,中文,,0,0,0,,在这种情况下，get_string有一个参数，虽然我今天才讲。 但你对此心知肚明。
Dialogue: 0,0:22:33.23,0:22:34.28,中文,,0,0,0,,这是一个提示。
Dialogue: 0,0:22:34.28,0:22:37.00,中文,,0,0,0,,使用get_string时，这是人类看到的提示。
Dialogue: 0,0:22:37.00,0:22:37.74,中文,,0,0,0,,那个提示是什么？
Dialogue: 0,0:22:37.74,0:22:39.18,中文,,0,0,0,,它是一串文本。
Dialogue: 0,0:22:39.18,0:22:43.18,中文,,0,0,0,,比如说，打了引号，你叫什么名字或者我上周问的其他问题。
Dialogue: 0,0:22:43.18,0:22:46.60,中文,,0,0,0,,与此同时，get_ string，正如我们上周知道的那样，有一个返回值。
Dialogue: 0,0:22:46.60,0:22:49.77,中文,,0,0,0,,它会给你返回一些东西，而且那也是一个字符串。
Dialogue: 0,0:22:49.77,0:22:52.33,中文,,0,0,0,,这也被称为函数的原型。
Dialogue: 0,0:22:52.33,0:23:02.24,中文,,0,0,0,,上周末末尾的那个东西，我只是从我的文件底部复制粘贴到顶部，这样就像是给clang的一个预告，告诉它接下来会有什么。
Dialogue: 0,0:23:02.24,0:23:17.73,中文,,0,0,0,,你可以想象，这些包含行只是将所有这些函数声明组合\N在一个名为cs50.h的单独文件中，这样你自己就不必每次使用库时都要键入它们，或者更糟的是，你自己不必复制粘贴。
Dialogue: 0,0:23:17.73,0:23:22.79,中文,,0,0,0,,这些行，这就是clang在预处理的第一步中为你做的事情。
Dialogue: 0,0:23:22.79,0:23:29.36,中文,,0,0,0,,在这个例子中是第二个也是最后一个，clang在预处理第二个包含行时会发生什么？
Dialogue: 0,0:23:29.36,0:23:38.25,中文,,0,0,0,,在这个故事中我们关心的另一个函数当然是printf，它是随C一起提供的。因此，你可以认为printf的原型
Dialogue: 0,0:23:38.25,0:23:42.85,中文,,0,0,0,,或声明只是这个printf是函数的名称。
Dialogue: 0,0:23:42.85,0:23:52.15,中文,,0,0,0,,它接受一个你想要格式化的字符串，比如hello，逗号，world或hello，逗号，%s。然后有点点点，这实际上有技术含义。
Dialogue: 0,0:23:52.15,0:23:56.35,中文,,0,0,0,,这意味着，当然，你可以插入 零个变量，一个变量，两个，或十个。
Dialogue: 0,0:23:56.35,0:23:58.67,中文,,0,0,0,,所以点，点，点表示一些变量的数量。
Dialogue: 0,0:23:58.67,0:24:01.58,中文,,0,0,0,,我们还没有讨论这个，一般情况下我们也不会。
Dialogue: 0,0:24:01.58,0:24:07.31,中文,,0,0,0,,Printf 实际上返回一个值，一个整数。 但更多关于这个的内容也许以后会讨论。
Dialogue: 0,0:24:07.31,0:24:11.05,中文,,0,0,0,,通常，这不是程序员关注的东西。
Dialogue: 0,0:24:11.05,0:24:18.82,中文,,0,0,0,,这就是我们所说的预处理的全部含义，以至于在此过程结束时，即使在 cs50.h和 std io.h 中有更多的代码行。
Dialogue: 0,0:24:18.82,0:24:27.82,中文,,0,0,0,,实际上发生的事情就是 clang 在预处理文件时将这些文件的内容复制并粘贴到你的代码中，以便你的代码现在了解所有内容。
Dialogue: 0,0:24:27.82,0:24:31.17,中文,,0,0,0,,获取字符串，打印 F 以及其他任何东西。
Dialogue: 0,0:24:31.17,0:24:35.33,中文,,0,0,0,,对于第一步预处理，有任何问题吗？
Dialogue: 0,0:24:35.33,0:24:49.67,中文,,0,0,0,,有。
Dialogue: 0,0:24:49.67,0:24:50.33,中文,,0,0,0,,好问题。
Dialogue: 0,0:24:50.33,0:24:54.87,中文,,0,0,0,,当你包含一个文件时，它只包括你需要的部分，还是包括所有内容？
Dialogue: 0,0:24:54.87,0:24:56.30,中文,,0,0,0,,将其视为包括所有内容。
Dialogue: 0,0:24:56.30,0:24:59.18,中文,,0,0,0,,如果它是一个大文件，顶部有很多代码。
Dialogue: 0,0:24:59.18,0:25:08.98,中文,,0,0,0,,这就是为什么，如果你回想一下我刚才和上周展示的所有的0和1，那么仅仅写个hello ,world，屏幕上就会出现很多0和1。
Dialogue: 0,0:25:08.98,0:25:15.05,中文,,0,0,0,,其中很多的0和1可能来自你实际上并不需要的代码，但也有一些可能是必要的。
Dialogue: 0,0:25:15.05,0:25:17.85,中文,,0,0,0,,但也有优化的方法。
Dialogue: 0,0:25:17.85,0:25:22.57,中文,,0,0,0,,编译的第二步令人困惑地被称为编译。
Dialogue: 0,0:25:22.57,0:25:28.14,中文,,0,0,0,,这只是大多数人用来描述整个过程而不仅仅是这个步骤的术语。
Dialogue: 0,0:25:28.14,0:25:35.91,中文,,0,0,0,,但一旦一个程序在幕后由编译器为你进行了预处理，它现在看起来有点像这样。
Dialogue: 0,0:25:35.91,0:25:38.81,中文,,0,0,0,,我用省略号来表示是的，回答你的问题。
Dialogue: 0,0:25:38.81,0:25:39.81,中文,,0,0,0,,上面还有更多的东西。
Dialogue: 0,0:25:39.81,0:25:40.77,中文,,0,0,0,,下面还有更多的东西。
Dialogue: 0,0:25:40.77,0:25:43.17,中文,,0,0,0,,现在对我们来说只是不太有趣。
Dialogue: 0,0:25:43.17,0:25:44.87,中文,,0,0,0,,现在我们只有C代码。
Dialogue: 0,0:25:44.87,0:25:46.95,中文,,0,0,0,,没有更多的预处理指令了。
Dialogue: 0,0:25:46.95,0:25:52.78,中文,,0,0,0,,到了这一点，所有的井号和那些行的代码都已经被预处理并转换成了其他东西。
Dialogue: 0,0:25:52.78,0:26:03.46,中文,,0,0,0,,现在，这就是事情变得有点可怕的地方，现在这是当clang或者任何编译器编译这样的代码时会发生的事情。
Dialogue: 0,0:26:03.46,0:26:08.84,中文,,0,0,0,,它将它从C中的这个转换成这个。 汇编代码中。
Dialogue: 0,0:26:08.84,0:26:10.74,中文,,0,0,0,,这是其中一种更可怕的语言。
Dialogue: 0,0:26:10.74,0:26:12.56,中文,,0,0,0,,我自己真的没有美好的回忆。
Dialogue: 0,0:26:12.56,0:26:14.80,中文,,0,0,0,,这不是很多人编程的语言。
Dialogue: 0,0:26:14.80,0:26:21.63,中文,,0,0,0,,如果你在计算机科学中的系统领域后续学一门高级课程，你可能会学到这个或某种变种。
Dialogue: 0,0:26:21.63,0:26:29.69,中文,,0,0,0,,但至少有一些人需要了解这些东西，因为这更接近现在计算机自己理解的东西。
Dialogue: 0,0:26:29.69,0:26:40.12,中文,,0,0,0,,英特尔CPU或AMD CPU，今天的计算机和手机的大脑，理解的更像这样的东西，而不是C。现在，它完全是深奥的。
Dialogue: 0,0:26:40.12,0:26:42.38,中文,,0,0,0,,但让我简要强调一下一些短语。
Dialogue: 0,0:26:42.38,0:26:44.68,中文,,0,0,0,,有一些东西有点熟悉。
Dialogue: 0,0:26:44.68,0:26:47.67,中文,,0,0,0,,顶部提到了main函数，用黄色标注。
Dialogue: 0,0:26:47.67,0:26:49.75,中文,,0,0,0,,底部提到了获取字符串。
Dialogue: 0,0:26:49.75,0:26:52.17,中文,,0,0,0,,底部还提到了printf。
Dialogue: 0,0:26:52.17,0:27:00.27,中文,,0,0,0,,这只是另一种叫做汇编语言的编程语言，几十年前人类，包括我在学校的时候，确实写了代码。
Dialogue: 0,0:27:00.27,0:27:06.24,中文,,0,0,0,,绝对地，有些人仍然写这些代码，特别是因为你可以写非常非常高效的代码。
Dialogue: 0,0:27:06.24,0:27:11.40,中文,,0,0,0,,但它更多 是晦涩难懂，对用户不太友好。
Dialogue: 0,0:27:11.40,0:27:24.15,中文,,0,0,0,,你现在会看到，这些就是计算机的大脑或CPU理解的所谓指令，它们推动值，移动它们，减去值，调用函数，再移动，再移动。
Dialogue: 0,0:27:24.15,0:27:34.28,中文,,0,0,0,,真正理解计算机的底层操作往往是算术运算，减法，加法，等等，将东西移到内存中和移出内存。
Dialogue: 0,0:27:34.28,0:27:37.33,中文,,0,0,0,,对于我们这样的人来说，写这样的代码会显得繁琐许多。
Dialogue: 0,0:27:37.33,0:27:40.55,中文,,0,0,0,,这就是你我倾向于写这样的东西的原因。
Dialogue: 0,0:27:40.55,0:27:46.56,中文,,0,0,0,,理想情况下，像你我这样的人倾向于拖放那些进一步抽象掉所有这些的拼图块。
Dialogue: 0,0:27:46.56,0:27:49.54,中文,,0,0,0,,但目前来说，这又被称为汇编语言。
Dialogue: 0,0:27:49.54,0:27:54.46,中文,,0,0,0,,这就是当编译器真正编译你的代码时会发生的事情。
Dialogue: 0,0:27:54.46,0:27:57.02,中文,,0,0,0,,当然，这还不是0和1。
Dialogue: 0,0:27:57.02,0:27:58.65,中文,,0,0,0,,我们还有两个步骤要走。
Dialogue: 0,0:27:58.65,0:28:05.61,中文,,0,0,0,,当编译器进行到第三步时，这就是代码被转换成机器码的地方。
Dialogue: 0,0:28:05.61,0:28:11.81,中文,,0,0,0,,而当编译器为你汇编代码时，它会把我们刚刚在屏幕上看到的内容转换成
Dialogue: 0,0:28:11.81,0:28:18.76,中文,,0,0,0,,实际的0和1，也就是你的手机或电脑能够理解的机器码。
Dialogue: 0,0:28:18.76,0:28:24.44,中文,,0,0,0,,但值得注意的是，这些并不一定是你程序中全部的0和1。
Dialogue: 0,0:28:24.44,0:28:32.55,中文,,0,0,0,,是的，它们是对应于你的hello程序或printf和get_string等的0和1。
Dialogue: 0,0:28:32.55,0:28:37.23,中文,,0,0,0,,但请注意，这里我们还需要一个最后的步骤。
Dialogue: 0,0:28:37.23,0:28:40.11,中文,,0,0,0,,在这些0和1中只有你的代码行。
Dialogue: 0,0:28:40.11,0:28:43.53,中文,,0,0,0,,但是关于我们编写的用于实现get_string的cs50行代码呢？
Dialogue: 0,0:28:43.53,0:28:47.12,中文,,0,0,0,,还有人类几十年前编写的用于实现printf的代码呢？
Dialogue: 0,0:28:47.12,0:28:51.38,中文,,0,0,0,,这些代码都存储在硬盘上的某个地方，就像在我的Mac、我的PC或云端的某个地方。
Dialogue: 0,0:28:51.38,0:28:56.72,中文,,0,0,0,,但我们需要将所有这些0和1连接在一起并链接起来，
Dialogue: 0,0:28:56.72,0:29:02.50,中文,,0,0,0,,我的代码，与cs50的代码，与标准IO的代码，全部连接在一起。
Dialogue: 0,0:29:02.50,0:29:12.38,中文,,0,0,0,,最后一步发生的事情实际上是，如果我们的代码在这里，是黄色的，然后是cs50编写的代码，还有C的作者编写的代码，
Dialogue: 0,0:29:12.38,0:29:24.74,中文,,0,0,0,,实际上在某个地方，不仅有hello.c，这显然是我编写的，也是我们现场编写的，还有，假设在计算机的某个地方，有一个cs50.c文件。
Dialogue: 0,0:29:24.74,0:29:28.34,中文,,0,0,0,,巧合的是，我和cs50的工作人员几年前写过。
Dialogue: 0,0:29:28.34,0:29:30.82,中文,,0,0,0,,还有在计算机上的某个地方，还有另一个文件。
Dialogue: 0,0:29:30.82,0:29:34.17,中文,,0,0,0,,让我简化一下，简单地称其为标准io.c。
Dialogue: 0,0:29:34.17,0:29:37.01,中文,,0,0,0,,在实际操作中，它可能具体称为printf.c。
Dialogue: 0,0:29:37.01,0:29:39.69,中文,,0,0,0,,但还有另外两个文件的位置。
Dialogue: 0,0:29:39.69,0:29:45.85,中文,,0,0,0,,这最后一步，称为链接，会将我刚刚写的代码中的0和1取出，
Dialogue: 0,0:29:45.85,0:29:48.35,中文,,0,0,0,,也就是这里屏幕上的这段代码。
Dialogue: 0,0:29:48.35,0:29:56.52,中文,,0,0,0,,然后它会获取cs50行的0和1，以及C语言的作者为实现标准I/O库所写的0和1。
Dialogue: 0,0:29:56.52,0:30:00.65,中文,,0,0,0,,最后，Voilà 将它们全部连接起来。
Dialogue: 0,0:30:00.65,0:30:04.17,中文,,0,0,0,,而这就是我们之前看到的那一堆0和1。
Dialogue: 0,0:30:04.17,0:30:11.90,中文,,0,0,0,,这只是现在的结果 对你的代码进行预处理，编译你的代码，汇编你的代码，链接你的代码。
Dialogue: 0,0:30:11.90,0:30:17.82,中文,,0,0,0,,天啊，此时如果编程对你来说还有一点乐趣的话，我们刚刚全都带走了。
Dialogue: 0,0:30:17.82,0:30:19.70,中文,,0,0,0,,我们将整个过程称之为编译。
Dialogue: 0,0:30:19.70,0:30:20.20,中文,,0,0,0,,为什么？
Dialogue: 0,0:30:20.20,0:30:32.53,中文,,0,0,0,,现在我们知道这些步骤存在，聪明人已经为我们解决了这个问题，你我可以在这个抽象层面上操作，假设编译会将源代码转换成机器码
Dialogue: 0,0:30:32.53,0:30:35.45,中文,,0,0,0,,然而，对于其中的任何一个中间步骤有问题吗？
Dialogue: 0,0:30:35.45,0:30:36.47,中文,,0,0,0,,这些步骤。
Dialogue: 0,0:30:36.47,0:30:50.37,中文,,0,0,0,,是的。
Dialogue: 0,0:30:50.37,0:30:53.18,中文,,0,0,0,,一个很好的问题，那么所有这些0和1都存储在哪里呢？
Dialogue: 0,0:30:53.18,0:30:54.92,中文,,0,0,0,,因为你我一直在使用浏览器。
Dialogue: 0,0:30:54.92,0:30:58.40,中文,,0,0,0,,当然，在 code.cs50.io 上，这是一个基于网络的用户界面。
Dialogue: 0,0:30:58.40,0:31:09.17,中文,,0,0,0,,不过再说一次，回想一下上周，尽管你是用网络浏览器访问VS Code，但这个基于网络的VS Code版本连接到云中某个实际的服务器。
Dialogue: 0,0:31:09.17,0:31:15.45,中文,,0,0,0,,而且在那个服务器上，你有自己的帐户，自己的文件，实际上在云中虚拟的硬盘。
Dialogue: 0,0:31:15.45,0:31:19.83,中文,,0,0,0,,可以把它想象成Dropbox、Box、Google Drive、OneDrive之类的东西。
Dialogue: 0,0:31:19.83,0:31:23.45,中文,,0,0,0,,你在某个地方有一块硬盘，我们已经为你提供了。
Dialogue: 0,0:31:23.45,0:31:37.10,中文,,0,0,0,,你的代码就在那个硬盘上，你刚写的，或者我刚写的，比如cs50.c，stdio.c，以及C支持的所有数学函数和其他东西的代码。
Dialogue: 0,0:31:37.10,0:31:52.50,中文,,0,0,0,,好问题。
Dialogue: 0,0:31:52.50,0:31:53.04,中文,,0,0,0,,好问题。
Dialogue: 0,0:31:53.04,0:31:57.12,中文,,0,0,0,,我的代码顶部包括cs50.h这一行。
Dialogue: 0,0:31:57.12,0:32:01.59,中文,,0,0,0,,如果我只是替换它与cs50.c的内容，会起作用吗？
Dialogue: 0,0:32:01.59,0:32:03.57,中文,,0,0,0,,简短回答是，是的，那会起作用。
Dialogue: 0,0:32:03.57,0:32:05.29,中文,,0,0,0,,你可以复制所有的代码。
Dialogue: 0,0:32:05.29,0:32:08.69,中文,,0,0,0,,不过，还有一些操作次序可能会影响到。
Dialogue: 0,0:32:08.69,0:32:10.91,中文,,0,0,0,,这可能没有那么简单，就是复制粘贴而已。
Dialogue: 0,0:32:10.91,0:32:13.32,中文,,0,0,0,,但从概念上来说，是的，就是这样的情况。
Dialogue: 0,0:32:13.32,0:32:16.76,中文,,0,0,0,,话虽如此，在cs50.h文件中，
Dialogue: 0,0:32:16.76,0:32:25.82,中文,,0,0,0,,只有函数的原型，函数的大致样子，返回类型，函数名以及参数的提示。
Dialogue: 0,0:32:25.82,0:32:29.93,中文,,0,0,0,,实际的代码通常在.c文件中编写。
Dialogue: 0,0:32:29.93,0:32:34.13,中文,,0,0,0,,这有点让人困惑，因为你和我只在.c文件中编写代码。
Dialogue: 0,0:32:34.13,0:32:40.65,中文,,0,0,0,,但在接下来的几周，你将开始编写一些你自己的.h文件，就像cs50，就像标准I-O一样。
Dialogue: 0,0:32:40.65,0:32:44.89,中文,,0,0,0,,但本质上，这行代码只是让使用和重用代码更容易。
Dialogue: 0,0:32:44.89,0:32:45.89,中文,,0,0,0,,那已经被写好了。
Dialogue: 0,0:32:45.89,0:32:50.80,中文,,0,0,0,,这就是库的全部目的。
Dialogue: 0,0:32:50.80,0:32:54.88,中文,,0,0,0,,我说得响一点。
Dialogue: 0,0:32:54.88,0:32:55.18,中文,,0,0,0,,是的。
Dialogue: 0,0:32:55.18,0:32:57.00,中文,,0,0,0,,编译代码时是否会发生链接？
Dialogue: 0,0:32:57.00,0:32:57.60,中文,,0,0,0,,是的。
Dialogue: 0,0:32:57.60,0:33:04.66,中文,,0,0,0,,当你像我们过去一周一直在做的那样运行make时，这四个步骤都会发生。
Dialogue: 0,0:33:04.66,0:33:07.95,中文,,0,0,0,,预处理将井号包含的行转换成其他东西。
Dialogue: 0,0:33:07.95,0:33:12.73,中文,,0,0,0,,编译技术上将其转换成汇编代码，这台Mac、这台PC、这台服务器，
Dialogue: 0,0:33:12.73,0:33:22.52,中文,,0,0,0,,更加了解，汇编将该语言转换为二进制，这台计算机实际理解的机器码，然后链接将一切组合在一起。
Dialogue: 0,0:33:22.52,0:33:29.79,中文,,0,0,0,,实际上，如果你回想一下几分钟前当我运行了这个-dash L cs50，
Dialogue: 0,0:33:29.79,0:33:38.79,中文,,0,0,0,,我不得不添加这个的原因，而且我的代码一开始没有编译成功，是因为我忘了告诉clang链接cs50的0和1，按照最后一步的要求。
Dialogue: 0,0:33:38.79,0:33:41.05,中文,,0,0,0,,我不需要做-dash L标准IO。
Dialogue: 0,0:33:41.05,0:33:44.38,中文,,0,0,0,,因为它已经包含在C中。所以对世界上的每个人来说，这只会很烦人。
Dialogue: 0,0:33:44.38,0:33:47.26,中文,,0,0,0,,但是 cs50 不包含 C 语言。所以我们要单独链接它。
Dialogue: 0,0:33:47.26,0:33:49.76,中文,,0,0,0,,而且要明确一点，我们不会总是使用 cs50 的库。
Dialogue: 0,0:33:49.76,0:33:52.54,中文,,0,0,0,,在接下来的几周里，我们还会摘掉另一副训练轮。
Dialogue: 0,0:33:52.54,0:33:55.06,中文,,0,0,0,,但目前来说，这会让一些事情变得更简单。
Dialogue: 0,0:33:55.06,0:34:09.32,中文,,0,0,0,,是的。
Dialogue: 0,0:34:09.32,0:34:12.86,中文,,0,0,0,,简短回答，是的。 0和1，机器码，会翻译成什么？
Dialogue: 0,0:34:12.86,0:34:17.37,中文,,0,0,0,,机器码和汇编代码之间有一一对应的关系。
Dialogue: 0,0:34:17.37,0:34:22.91,中文,,0,0,0,,汇编代码，它并不是真正的英语，但至少是我能识别的符号，不是0和1。
Dialogue: 0,0:34:22.91,0:34:24.81,中文,,0,0,0,,机器码，当然，只是0和1。
Dialogue: 0,0:34:24.81,0:34:30.74,中文,,0,0,0,,在以前，C语言出现之前，人们只用汇编代码编程。
Dialogue: 0,0:34:30.74,0:34:34.46,中文,,0,0,0,,在汇编代码出现之前，人们是用0和1编程的。
Dialogue: 0,0:34:34.46,0:34:36.71,中文,,0,0,0,,你可以想象那是多么痛苦。
Dialogue: 0,0:34:36.71,0:34:40.11,中文,,0,0,0,,每种语言都让我们的生活变得更加容易。
Dialogue: 0,0:34:40.11,0:34:48.20,中文,,0,0,0,,几周后，我们将转向Python，这将使C语言甚至更简单，或者说，编码变得更加简单。
Dialogue: 0,0:34:48.20,0:34:54.94,中文,,0,0,0,,那么说到这一点，有什么可能出错吗？
Dialogue: 0,0:34:54.94,0:34:59.22,中文,,0,0,0,,事实证明，除了编译，从技术上讲，还有反编译。
Dialogue: 0,0:34:59.22,0:35:01.22,中文,,0,0,0,,我们没有做过这个，也不会做。
Dialogue: 0,0:35:01.22,0:35:04.30,中文,,0,0,0,,但值得考虑一下，哪怕只是一瞬间。
Dialogue: 0,0:35:04.30,0:35:16.52,中文,,0,0,0,,如果你不编译你的代码，而是反编译它，正如字面意思所示，这只是意味着逆转这个过程，将它从机器码，0和1，转化回C语言。
Dialogue: 0,0:35:16.52,0:35:19.75,中文,,0,0,0,,如果你只有一个程序，这可能会很酷。
Dialogue: 0,0:35:19.75,0:35:22.25,中文,,0,0,0,,你可以将它转化并查看实际的源代码。
Dialogue: 0,0:35:22.25,0:35:28.66,中文,,0,0,0,,如果任何人在互联网上都能够在他们的机器上反编译代码，可能会有什么不利之处呢？
Dialogue: 0,0:35:28.66,0:35:30.64,中文,,0,0,0,,是的。
Dialogue: 0,0:35:30.64,0:35:35.54,中文,,0,0,0,,在代码中更容易找到错误来进行利用。
Dialogue: 0,0:35:35.54,0:35:45.15,中文,,0,0,0,,也许更容易通过找到你和我犯的错误来入侵软件，因为从字面上看，它们就在代码中盯着你，而0和1则不那么明显。
Dialogue: 0,0:35:45.15,0:35:48.33,中文,,0,0,0,,反编译的其他缺点呢？
Dialogue: 0,0:35:48.33,0:35:56.14,中文,,0,0,0,,是的。
Dialogue: 0,0:35:56.14,0:36:05.66,中文,,0,0,0,,如果你的代码你的工作是你的知识产权，无论是否受版权保护，有人可以仅仅运行一个命令，瞬间看到你写的原始代码，这有点讨厌。
Dialogue: 0,0:36:05.66,0:36:08.54,中文,,0,0,0,,事实并不像那么简单。
Dialogue: 0,0:36:08.54,0:36:17.00,中文,,0,0,0,,即使是像Hello或甚至Microsoft Word这样的程序，也可以从0和1转换回某种形式
Dialogue: 0,0:36:17.00,0:36:22.55,中文,,0,0,0,,源代码，无论是C、Java、Python还是其他什么，不管最初是用什么写的。
Dialogue: 0,0:36:22.55,0:36:25.85,中文,,0,0,0,,很有可能，看起来会一团糟。
Dialogue: 0,0:36:25.85,0:36:26.43,中文,,0,0,0,,为什么？
Dialogue: 0,0:36:26.43,0:36:30.92,中文,,0,0,0,,因为像变量名这样的东西通常在0和1中不会被保留。
Dialogue: 0,0:36:30.92,0:36:34.10,中文,,0,0,0,,函数名可能在0和1中也不会被保留。
Dialogue: 0,0:36:34.10,0:36:34.72,中文,,0,0,0,,但代码会。
Dialogue: 0,0:36:34.72,0:36:35.78,中文,,0,0,0,,逻辑也会。
Dialogue: 0,0:36:35.78,0:36:40.76,中文,,0,0,0,,但是计算机不在乎你选择了多么漂亮的变量名和多么好的函数名。
Dialogue: 0,0:36:40.76,0:36:43.05,中文,,0,0,0,,它只需要把它们看作是0和1。
Dialogue: 0,0:36:43.05,0:36:46.59,中文,,0,0,0,,而且，如果你回想一下上周，我们介绍了像C语言中的循环。
Dialogue: 0,0:36:46.59,0:36:50.71,中文,,0,0,0,,除了for循环，还有什么其他种类的循环，比如？
Dialogue: 0,0:36:50.71,0:36:51.61,中文,,0,0,0,,所以是while循环。
Dialogue: 0,0:36:51.61,0:36:57.31,中文,,0,0,0,,尽管它们看起来不同，你需要写不同的代码，但它们实现的功能完全相同。
Dialogue: 0,0:36:57.31,0:37:07.34,中文,,0,0,0,,也就是说，当你编译一个for循环或一个while循环时，如果它们在逻辑上做同样的事情，它们可能会以0和1的形式看起来相同。
Dialogue: 0,0:37:07.34,0:37:11.30,中文,,0,0,0,,因此，它不一定可以预测你会得到原始代码。
Dialogue: 0,0:37:11.30,0:37:11.86,中文,,0,0,0,,为什么？
Dialogue: 0,0:37:11.86,0:37:16.86,中文,,0,0,0,,可以这么说，0和1可能不知道它是一个for循环还是一个while循环。
Dialogue: 0,0:37:16.86,0:37:20.14,中文,,0,0,0,,也许反编译会显示给你其中一个。
Dialogue: 0,0:37:20.14,0:37:26.79,中文,,0,0,0,,尽管反编译是可能的，它是逆向工程某人的产品的一种方式，但如果你足够擅长开始阅读
Dialogue: 0,0:37:26.79,0:37:34.79,中文,,0,0,0,,已经被反编译的代码并阅读其中的混乱，那么很可能你有足够的天赋，可以自己从头开始编写同样的程序。
Dialogue: 0,0:37:34.79,0:37:40.46,中文,,0,0,0,,这可能有些言过其实，但它并不像你一开始想象的那么容易或威胁。
Dialogue: 0,0:37:40.46,0:37:49.83,中文,,0,0,0,,一般来说，一旦代码被编译，要对它进行逆向工程就相当具有挑战性、耗时和昂贵，就像在现实世界中一样。
Dialogue: 0,0:37:49.83,0:37:50.05,中文,,0,0,0,,对吧?
Dialogue: 0,0:37:50.05,0:37:52.83,中文,,0,0,0,,像我们大多数人现在可能都有手机在口袋里.
Dialogue: 0,0:37:52.83,0:37:57.13,中文,,0,0,0,,没有什么能阻止你打开它，瞎摸一通，重新make里面的东西.
Dialogue: 0,0:37:57.13,0:37:59.13,中文,,0,0,0,,这需要相当大的努力，很可能.
Dialogue: 0,0:37:59.13,0:38:03.20,中文,,0,0,0,,而在那个时候，也许你应该考虑发明手机，而不是试图逆向工程它.
Dialogue: 0,0:38:03.20,0:38:06.46,中文,,0,0,0,,在物理世界里也是同样的道理.
Dialogue: 0,0:38:06.46,0:38:13.15,中文,,0,0,0,,有关编译或者反编译这些形式的任何问题吗?
Dialogue: 0,0:38:13.15,0:38:17.25,中文,,0,0,0,,那么目前的情况是，不仅我，而且你都犯过错误。
Dialogue: 0,0:38:17.25,0:38:19.05,中文,,0,0,0,,而且你写了有错的代码。
Dialogue: 0,0:38:19.05,0:38:26.67,中文,,0,0,0,,代码中的一个bug只不过是一个错误，一个逻辑错误或其他错误，使代码不像你打算的那样正确运行。
Dialogue: 0,0:38:26.67,0:38:35.42,中文,,0,0,0,,直到现在，你的debug技巧可能是回顾我在课堂上讲的内容，或者在网上或面对面向他人提问。
Dialogue: 0,0:38:35.42,0:38:39.58,中文,,0,0,0,,但最终，如果你拥有一些自己用来debug代码的工具，那将是很好的。
Dialogue: 0,0:38:39.58,0:38:41.70,中文,,0,0,0,,老实说，这是一项终身技能。
Dialogue: 0,0:38:41.70,0:38:46.29,中文,,0,0,0,,你不会在cs50毕业后，甚至在20年后，如果你还在写代码的话，不会写出优秀的代码。
Dialogue: 0,0:38:46.29,0:38:50.97,中文,,0,0,0,,总是写出正确的代码，就像我们所有员工一样，持续不断地写bug。
Dialogue: 0,0:38:50.97,0:38:55.45,中文,,0,0,0,,希望他们变得更加复杂，而不是像哎呀，我忘了加分号那样。
Dialogue: 0,0:38:55.45,0:38:57.88,中文,,0,0,0,,但即使是这种错误，我们也会犯。
Dialogue: 0,0:38:57.88,0:39:03.46,中文,,0,0,0,,但有工具和技巧可以在解决这些问题时让你的生活变得更容易。
Dialogue: 0,0:39:03.46,0:39:06.38,中文,,0,0,0,,术语“bug”实际上已经存在了几十年。
Dialogue: 0,0:39:06.38,0:39:13.69,中文,,0,0,0,,但一个有趣的故事要讲述的是，第一个被记录的实际bug实际上与哈佛有某种联系。
Dialogue: 0,0:39:13.69,0:39:16.15,中文,,0,0,0,,实际上，这是日志记录。
Dialogue: 0,0:39:16.15,0:39:29.13,中文,,0,0,0,,关于1947年的哈佛Mark二号计算机，如果你看这里的笔记，我会放大一下，\N里面实际上发现了一只实际的飞蛾，它被发现在这台巨大的主机计算机内，导致了某种问题。
Dialogue: 0,0:39:29.13,0:39:33.64,中文,,0,0,0,,当时的工程师们实际上觉得很有趣，哇，实际的虫子竟然解释了这个问题。
Dialogue: 0,0:39:33.64,0:39:39.24,中文,,0,0,0,,它被永远地贴在这张纸上，我现在相信它在史密森尼展出。
Dialogue: 0,0:39:39.24,0:39:43.24,中文,,0,0,0,,话虽如此，这只是一个逻辑错误的代表。
Dialogue: 0,0:39:43.24,0:39:50.52,中文,,0,0,0,,实际上，这个故事经常被一位著名的数学家，后来成为计算机科学家的Dr. Grace Hopper讲述，
Dialogue: 0,0:39:50.52,0:39:56.52,中文,,0,0,0,,她不仅在哈佛Mark二号计算机上工作，还在它的前身哈佛Mark一号上工作。
Dialogue: 0,0:39:56.52,0:40:07.52,中文,,0,0,0,,如果你曾经在这边的大楼里花时间，你实际上可以看到这台计算机的很多部分，它位于科学与工程综合体的入口处的墙上。
Dialogue: 0,0:40:07.52,0:40:09.52,中文,,0,0,0,,而且，正如你可能在成长中听说的那样,
Dialogue: 0,0:40:09.52,0:40:10.86,中文,,0,0,0,,这是一台主机电脑。
Dialogue: 0,0:40:10.86,0:40:22.75,中文,,0,0,0,,就像这就是当时的Mac和PC，可以说，看起来就像是物理的东西，\N本质上实现了你我现在认为理所当然的0和1，被迷你化到我们的笔记本电脑和手机中。
Dialogue: 0,0:40:22.75,0:40:23.89,中文,,0,0,0,,这里有一段历史。
Dialogue: 0,0:40:23.89,0:40:27.51,中文,,0,0,0,,如果你有机会参观校园的话，不妨去看看。
Dialogue: 0,0:40:27.51,0:40:31.61,中文,,0,0,0,,但现在让我们考虑一下，如何解决问题，当然不是物理上的问题，而是逻辑上的问题。
Dialogue: 0,0:40:31.61,0:40:40.35,中文,,0,0,0,,再来看看上周的一个例子，我们试图非常简单地使用井号打印这列三块砖。
Dialogue: 0,0:40:40.35,0:40:44.51,中文,,0,0,0,,那么，让我马上转到VS Code。
Dialogue: 0,0:40:44.51,0:40:47.08,中文,,0,0,0,,我要先打开我提前写好的程序。
Dialogue: 0,0:40:47.08,0:40:49.28,中文,,0,0,0,,我带它来课上，因为里面有个bug。
Dialogue: 0,0:40:49.28,0:40:51.68,中文,,0,0,0,,我想看看怎么解决这个bug。
Dialogue: 0,0:40:51.68,0:40:56.24,中文,,0,0,0,,那么，让我打开 buggy0.c，这是我代码的第一版。
Dialogue: 0,0:40:56.24,0:40:58.30,中文,,0,0,0,,咱们先快速看看里面都有什么。
Dialogue: 0,0:40:58.30,0:41:01.54,中文,,0,0,0,,代码很简短，只include {\s1}。{\s}
Dialogue: 0,0:41:01.54,0:41:02.71,中文,,0,0,0,,还有 printf 的使用。
Dialogue: 0,0:41:02.71,0:41:03.75,中文,,0,0,0,,它使用了一个for循环。
Dialogue: 0,0:41:03.75,0:41:07.85,中文,,0,0,0,,而目标非常简单，就是打印出这列三块砖的内容。
Dialogue: 0,0:41:07.85,0:41:13.38,中文,,0,0,0,,现在它足够简短，如果你已经对C语言感到很熟悉，你可能已经看出了逻辑错误。
Dialogue: 0,0:41:13.38,0:41:16.36,中文,,0,0,0,,这不是语法错误，它将编译并运行。
Dialogue: 0,0:41:16.36,0:41:17.26,中文,,0,0,0,,但那里有一个bug。
Dialogue: 0,0:41:17.26,0:41:24.27,中文,,0,0,0,,假设我对C语言非常陌生，我感到非常不适应C语言。现在是凌晨2点，我就是找不到这个bug。
Dialogue: 0,0:41:24.27,0:41:27.99,中文,,0,0,0,,那么，我在这里真的有什么办法来找到这样的错误吗？
Dialogue: 0,0:41:27.99,0:41:29.41,中文,,0,0,0,,首先，我们来看一下症状。
Dialogue: 0,0:41:29.41,0:41:31.89,中文,,0,0,0,,我要下到我的终端窗口。
Dialogue: 0,0:41:31.89,0:41:36.21,中文,,0,0,0,,我要使用make buggy0，因为文件叫做buggy0.c。
Dialogue: 0,0:41:36.21,0:41:37.26,中文,,0,0,0,,我不会使用clang。
Dialogue: 0,0:41:37.26,0:41:39.78,中文,,0,0,0,,事实上，我从现在开始几乎不会手动使用clang。
Dialogue: 0,0:41:39.78,0:41:42.60,中文,,0,0,0,,我只会使用make，因为它让我们的生活更轻松。
Dialogue: 0,0:41:42.60,0:41:44.28,中文,,0,0,0,,它确实编译，没有错误。
Dialogue: 0,0:41:44.28,0:41:45.38,中文,,0,0,0,,这不是语法问题。
Dialogue: 0,0:41:45.38,0:41:47.84,中文,,0,0,0,,不是像漏了个分号这样愚蠢的事。
Dialogue: 0,0:41:47.84,0:41:53.28,中文,,0,0,0,,但是当我运行./buggy0时，当然会看到1、2、3、4。
Dialogue: 0,0:41:53.28,0:41:59.84,中文,,0,0,0,,当然，这不符合我实际打算放在那一列的1、2、3块砖。
Dialogue: 0,0:41:59.84,0:42:02.95,中文,,0,0,0,,然而，我开始从0开始计数，就像我通常做的那样。
Dialogue: 0,0:42:02.95,0:42:03.91,中文,,0,0,0,,我有3个。
Dialogue: 0,0:42:03.91,0:42:05.31,中文,,0,0,0,,我要升到3。
Dialogue: 0,0:42:05.31,0:42:06.77,中文,,0,0,0,,那么，我的逻辑错误在哪里呢？
Dialogue: 0,0:42:06.77,0:42:10.13,中文,,0,0,0,,如果它还没有明显地跳出来，那么，我该怎么解决这个问题呢？
Dialogue: 0,0:42:10.13,0:42:16.13,中文,,0,0,0,,首先 也许解决错误的最好技巧，至少在早期阶段，就是使用printf。
Dialogue: 0,0:42:16.13,0:42:20.07,中文,,0,0,0,,就像到目前为止，我们已经用printf在屏幕上显示了hello和其他东西。
Dialogue: 0,0:42:20.07,0:42:22.61,中文,,0,0,0,,但是printf只是一个用于打印任何内容的函数。
Dialogue: 0,0:42:22.61,0:42:31.34,中文,,0,0,0,,而且没有理由你不能临时使用printf来打印变量的内容，看看你的程序里面发生了什么，只是为了找出你的错误在哪里。
Dialogue: 0,0:42:31.34,0:42:32.90,中文,,0,0,0,,然后你以后可以删掉那行代码。
Dialogue: 0,0:42:32.90,0:42:34.72,中文,,0,0,0,,它不必永远留在那里。
Dialogue: 0,0:42:34.72,0:42:35.76,中文,,0,0,0,,让我来做这个。
Dialogue: 0,0:42:35.76,0:42:51.71,中文,,0,0,0,,不仅仅在VS Code中打印出井号，让我进行一点 安全检查，并打印出I的值。所以让我继续说一下，I现在是我想说I是这个样子。
Dialogue: 0,0:42:51.71,0:42:58.75,中文,,0,0,0,,但当然这不是我打印出I的方式。如果我想打印出I的值，我应该在这里放什么？
Dialogue: 0,0:42:58.75,0:43:02.12,中文,,0,0,0,,所以用%i代替%s，表示整数而不是字符串。
Dialogue: 0,0:43:02.12,0:43:05.04,中文,,0,0,0,,还有占位符，但我们用%s表示整数。
Dialogue: 0,0:43:05.04,0:43:13.11,中文,,0,0,0,,现在如果我想打印出i，我只需要逗号作为第二个参数，然后是i。让我继续回到我的终端窗口。
Dialogue: 0,0:43:13.11,0:43:15.95,中文,,0,0,0,,让我重新编译程序，因为我已经修改过它。
Dialogue: 0,0:43:15.95,0:43:19.10,中文,,0,0,0,,那仍然很好，./buggy0。
Dialogue: 0,0:43:19.10,0:43:22.64,中文,,0,0,0,,现在让我增加我的终端窗口的大小。
Dialogue: 0,0:43:22.64,0:43:25.33,中文,,0,0,0,,你只会看到一些诊断信息，如果你愿意的话。
Dialogue: 0,0:43:25.33,0:43:26.63,中文,,0,0,0,,就像这不是目标一样。
Dialogue: 0,0:43:26.63,0:43:28.97,中文,,0,0,0,,这不是你应该提交的作业问题。
Dialogue: 0,0:43:28.97,0:43:30.25,中文,,0,0,0,,我们在一个。
Dialogue: 0,0:43:30.25,0:43:32.41,中文,,0,0,0,,但它帮助我们诊断性地知道。
Dialogue: 0,0:43:32.41,0:43:34.56,中文,,0,0,0,,当i为0时，这是一个井号。
Dialogue: 0,0:43:34.56,0:43:36.26,中文,,0,0,0,,当i为一时，这是一个井号。
Dialogue: 0,0:43:36.26,0:43:37.38,中文,,0,0,0,,当i为2时，这是一个井号。
Dialogue: 0,0:43:37.38,0:43:39.14,中文,,0,0,0,,当i为3时，这是一个井号。
Dialogue: 0,0:43:39.14,0:43:39.90,中文,,0,0,0,,好嘛，等一下。
Dialogue: 0,0:43:39.90,0:43:41.70,中文,,0,0,0,,那是1234。
Dialogue: 0,0:43:41.70,0:43:44.40,中文,,0,0,0,,显然我打印了多一次。
Dialogue: 0,0:43:44.40,0:43:56.23,中文,,0,0,0,,让我缩小终端窗口，看看代码，然后问一下大家，错误在哪里，或者等效地，应该是什么解决方法？
Dialogue: 0,0:43:56.23,0:44:00.11,中文,,0,0,0,,对，就在中间。
Dialogue: 0,0:44:00.11,0:44:03.80,中文,,0,0,0,,对，不要用小于或等于，只用小于。
Dialogue: 0,0:44:03.80,0:44:05.14,中文,,0,0,0,,你得选个道路。
Dialogue: 0,0:44:05.14,0:44:11.14,中文,,0,0,0,,比如，如果你要从0开始计数，通常使用小于并增加2，但不包括这个值。
Dialogue: 0,0:44:11.14,0:44:17.33,中文,,0,0,0,,或者如果你喜欢，就像在人类世界中，从1开始计数，你可以使用小于或等于，但你必须保持一致。
Dialogue: 0,0:44:17.33,0:44:22.73,中文,,0,0,0,,而且一般来说，作为一个程序员，如果你在做类似这样的事情，总是从0开始计数。
Dialogue: 0,0:44:22.73,0:44:25.35,中文,,0,0,0,,但解决方案确实只是改变这个。
Dialogue: 0,0:44:25.35,0:44:39.22,中文,,0,0,0,,通过将小于或等于改为小于，如果我使用make buggy0重新编译这个程序，\N然后再次执行./buggy0，并让我增大终端窗口的大小，现在你看，几乎相同的输出。
Dialogue: 0,0:44:39.22,0:44:43.80,中文,,0,0,0,,但确实，i从0开始，每次增加2，但不包括这个值。
Dialogue: 0,0:44:43.80,0:44:48.92,中文,,0,0,0,,所以printf，简而言之，应该是你的第一个诊断工具。
Dialogue: 0,0:44:48.92,0:44:57.41,中文,,0,0,0,,不要只是盯着屏幕看或者举手，我是说，使用printf来看看你的程序里到底发生了什么，通过打印出你感兴趣的东西。
Dialogue: 0,0:44:57.41,0:45:02.87,中文,,0,0,0,,然后一旦你解决了问题，你可以回到你的代码，就像我在这里所做的，缩小我的终端窗口。
Dialogue: 0,0:45:02.87,0:45:04.63,中文,,0,0,0,,我会删除printf那一行。
Dialogue: 0,0:45:04.63,0:45:09.00,中文,,0,0,0,,现在我准备好与世界分享这个程序，或者将其提交为作业或类似的事情。
Dialogue: 0,0:45:09.00,0:45:11.66,中文,,0,0,0,,它只是暂时存在那里。
Dialogue: 0,0:45:11.66,0:45:12.98,中文,,0,0,0,,有任何问题吗？
Dialogue: 0,0:45:12.98,0:45:18.54,中文,,0,0,0,,关于printf作为debug工具。
Dialogue: 0,0:45:18.54,0:45:20.98,中文,,0,0,0,,这只是帮助有限。
Dialogue: 0,0:45:20.98,0:45:31.85,中文,,0,0,0,,而且说实话，随着你的程序越来越庞大，要一遍一遍地加入printf语句，\N然后再删掉它们，还要弄清楚哪个printf打印了什么，真的会变得非常烦人。
Dialogue: 0,0:45:31.85,0:45:34.79,中文,,0,0,0,,仅仅依赖printf最终会变得混乱不堪。
Dialogue: 0,0:45:34.79,0:45:41.17,中文,,0,0,0,,作为计算机科学家，计算机科学家们编写了软件，使debug代码变得更容易。
Dialogue: 0,0:45:41.17,0:45:48.68,中文,,0,0,0,,这个软件通常被称为调试器，这将是你可以用来解决代码问题的第二个工具。
Dialogue: 0,0:45:48.68,0:45:52.62,中文,,0,0,0,,在VS Code的世界中，实际上内置了一个调试器。
Dialogue: 0,0:45:52.62,0:45:56.93,中文,,0,0,0,,因此，你将要在VS Code中看到的图形用户界面并不特定于cs50。
Dialogue: 0,0:45:56.93,0:46:03.21,中文,,0,0,0,,实际上，它随附于VS Code，支持C、C++、Java、Python以及许多其他语言。
Dialogue: 0,0:46:03.21,0:46:04.86,中文,,0,0,0,,但诚然，有点
Dialogue: 0,0:46:04.86,0:46:07.62,中文,,0,0,0,,难以开始使用调试器。
Dialogue: 0,0:46:07.62,0:46:13.58,中文,,0,0,0,,你必须创建一个配置文件并执行一些烦人的步骤，这些步骤只会妨碍解决实际问题。
Dialogue: 0,0:46:13.58,0:46:17.10,中文,,0,0,0,,因此，我们为你自动化了启动调试器的过程。
Dialogue: 0,0:46:17.10,0:46:19.73,中文,,0,0,0,,之后，它的使用方式几乎是行业标准。
Dialogue: 0,0:46:19.73,0:46:23.47,中文,,0,0,0,,但我们为你省去了创建那些配置文件的烦恼。
Dialogue: 0,0:46:23.47,0:46:25.33,中文,,0,0,0,,假设我想这样做。
Dialogue: 0,0:46:25.33,0:46:30.45,中文,,0,0,0,,假设我想尝试使用特殊软件逐步debug这个程序。
Dialogue: 0,0:46:30.45,0:46:31.85,中文,,0,0,0,,那么，我该如何做呢？
Dialogue: 0,0:46:31.85,0:46:41.80,中文,,0,0,0,,让我提出一个建议，如果我将这个还原到原始版本，其中我小于或等于3，我相当肯定我打印了太多的井号。
Dialogue: 0,0:46:41.80,0:46:45.24,中文,,0,0,0,,我要这样做，你可能是偶然或根本没有这样做过。
Dialogue: 0,0:46:45.24,0:46:47.78,中文,,0,0,0,,但是请注意，如果你将鼠标悬停在边栏上，
Dialogue: 0,0:46:47.78,0:46:54.54,中文,,0,0,0,,所谓的，在VS Code中，编辑器左侧的部分，你会看到一种灰色的红点。
Dialogue: 0,0:46:54.54,0:46:57.32,中文,,0,0,0,,如果你点击那里，它会变成一个更亮的红点。
Dialogue: 0,0:46:57.32,0:46:59.86,中文,,0,0,0,,而这代表了我们将要称之为断点的东西。
Dialogue: 0,0:46:59.86,0:47:03.60,中文,,0,0,0,,这只是一个视觉指示，你已经像放了一个停车标志一样放在那里。
Dialogue: 0,0:47:03.60,0:47:07.34,中文,,0,0,0,,然后你马上告诉调试器，在那儿停止运行我的代码。
Dialogue: 0,0:47:07.34,0:47:07.96,中文,,0,0,0,,为什么呢？
Dialogue: 0,0:47:07.96,0:47:14.47,中文,,0,0,0,,因为我更喜欢以人的速度逐步执行我的代码，而不是以计算机的速度，它一次性全部运行。
Dialogue: 0,0:47:14.47,0:47:16.79,中文,,0,0,0,,我设置了我的断点，这就是第一步。
Dialogue: 0,0:47:16.79,0:47:18.57,中文,,0,0,0,,然后第二步就是这样的。
Dialogue: 0,0:47:18.57,0:47:26.30,中文,,0,0,0,,不是运行程序本身，而是运行一个叫做debug50的命令，然后是./buggy0。
Dialogue: 0,0:47:26.30,0:47:39.11,中文,,0,0,0,,现在这会启动你的程序，在调试器中，这是一款由聪明人编写的特殊程序，它将再次使你能够逐行浏览你的代码，按照你自己的节奏。
Dialogue: 0,0:47:39.11,0:47:40.51,中文,,0,0,0,,我要按回车键。
Dialogue: 0,0:47:40.51,0:47:41.93,中文,,0,0,0,,屏幕上会发生一些事情。
Dialogue: 0,0:47:41.93,0:47:43.17,中文,,0,0,0,,哎呀。
Dialogue: 0,0:47:43.17,0:47:45.85,中文,,0,0,0,,注意，这是一个常见的错误，我在这里不小心犯了。
Dialogue: 0,0:47:45.85,0:47:47.11,中文,,0,0,0,,看起来我改了我的代码。
Dialogue: 0,0:47:47.11,0:47:49.98,中文,,0,0,0,,我之所以这样做是因为我进去改了小于或等于号。
Dialogue: 0,0:47:49.98,0:47:53.74,中文,,0,0,0,,让我继续运行make buggy zero enter。
Dialogue: 0,0:47:53.74,0:47:54.24,中文,,0,0,0,,好的。
Dialogue: 0,0:47:54.24,0:47:57.91,中文,,0,0,0,,现在让我重新运行debug50,然后点击enter。
Dialogue: 0,0:47:57.91,0:48:01.67,中文,,0,0,0,,屏幕上发生了一些事情，需要一会儿才能开始。
Dialogue: 0,0:48:01.67,0:48:09.58,中文,,0,0,0,,但一旦它开始了，你会看到这个，你会看到你的代码，但你会看到这个黄色的高亮，你可能以前没见过。
Dialogue: 0,0:48:09.58,0:48:13.44,中文,,0,0,0,,注意，它特别强调了我在一个断点上说的同一行。
Dialogue: 0,0:48:13.44,0:48:14.08,中文,,0,0,0,,为什么？
Dialogue: 0,0:48:14.08,0:48:20.73,中文,,0,0,0,,这只是意味着程序在调试器上执行了所有这些行，除了第七行。
Dialogue: 0,0:48:20.73,0:48:25.79,中文,,0,0,0,,它在第七行暂停了执行，这并不是说它出了问题，而是暂停了执行。
Dialogue: 0,0:48:25.79,0:48:30.47,中文,,0,0,0,,它还没有打印任何井号，你会看到在终端窗口里还没有任何井号。
Dialogue: 0,0:48:30.47,0:48:32.21,中文,,0,0,0,,它暂停了执行。
Dialogue: 0,0:48:32.21,0:48:37.43,中文,,0,0,0,,但是调试器有趣的地方在于左侧这里的东西。
Dialogue: 0,0:48:37.43,0:48:42.01,中文,,0,0,0,,在调试器中，你会在变量下面看到所有所谓的本地变量。
Dialogue: 0,0:48:42.01,0:48:45.25,中文,,0,0,0,,而我们还没有真正区分本地和所谓的全局。
Dialogue: 0,0:48:45.25,0:48:49.50,中文,,0,0,0,,但就目前而言，本地变量仅意味着存在于你的函数中的所有变量。
Dialogue: 0,0:48:49.50,0:48:52.20,中文,,0,0,0,,所以，我目前的值是0。
Dialogue: 0,0:48:52.20,0:48:52.42,中文,,0,0,0,,好的。
Dialogue: 0,0:48:52.42,0:48:53.50,中文,,0,0,0,,这很有道理。
Dialogue: 0,0:48:53.50,0:48:57.50,中文,,0,0,0,,那么现在我怎么样才能逐步查看我的代码并了解它在做什么呢？
Dialogue: 0,0:48:57.50,0:49:03.80,中文,,0,0,0,,在屏幕顶部，你会看到一些回放图标，有点像视频播放器，但它们有特殊的含义。
Dialogue: 0,0:49:03.80,0:49:08.20,中文,,0,0,0,,第一个只会播放你的程序一直运行到结束。
Dialogue: 0,0:49:08.20,0:49:13.30,中文,,0,0,0,,只有在你已经解决了问题并且只想让它完全运行之前才点击它。
Dialogue: 0,0:49:13.30,0:49:16.98,中文,,0,0,0,,但接下来的两个才是最重要的。
Dialogue: 0,0:49:16.98,0:49:22.17,中文,,0,0,0,,这里的第二个，如果你将鼠标悬停在上面，你会看到它被称为“跨过”。
Dialogue: 0,0:49:22.17,0:49:28.54,中文,,0,0,0,,跨过的意思是调试器会运行当前高亮显示的代码行，但不会深入进入它。
Dialogue: 0,0:49:28.54,0:49:32.88,中文,,0,0,0,,如果它是一个像printf这样的函数，它不会逐行开始执行printf。
Dialogue: 0,0:49:32.88,0:49:33.14,中文,,0,0,0,,为什么？
Dialogue: 0,0:49:33.14,0:49:36.55,中文,,0,0,0,,因为我可以很肯定，几十年前编写的printf是正确的。
Dialogue: 0,0:49:36.55,0:49:38.15,中文,,0,0,0,,问题可能出在我身上。
Dialogue: 0,0:49:38.15,0:49:54.20,中文,,0,0,0,,但是下一行，如果我真的想要逐步进入printf的代码，以找出它的工作原理或找出多年后的问题，\N你可以逐步进入printf，然后屏幕会变化，你会逐行看到printf的每一行，至少如果你安装了printf的源代码。
Dialogue: 0,0:49:54.20,0:50:03.10,中文,,0,0,0,,我会使用第一个步骤跳过，观察黄色高亮的移动，同时在终端窗口中会有一个井号。
Dialogue: 0,0:50:03.10,0:50:03.94,中文,,0,0,0,,我们开始吧。
Dialogue: 0,0:50:03.94,0:50:05.32,中文,,0,0,0,,有一个井号。
Dialogue: 0,0:50:05.32,0:50:07.22,中文,,0,0,0,,现在注意第五行被突出显示。
Dialogue: 0,0:50:07.22,0:50:09.46,中文,,0,0,0,,这意味着它已经暂停在第五行。
Dialogue: 0,0:50:09.46,0:50:11.24,中文,,0,0,0,,第五行还没有被执行。
Dialogue: 0,0:50:11.24,0:50:12.70,中文,,0,0,0,,那是什么意思呢？
Dialogue: 0,0:50:12.70,0:50:16.50,中文,,0,0,0,,顶部左上角的I的值仍然是0。
Dialogue: 0,0:50:16.50,0:50:24.64,中文,,0,0,0,,但是一旦我再次点击“单步过程”，请看看屏幕上的变量I发生了什么。
Dialogue: 0,0:50:24.64,0:50:28.12,中文,,0,0,0,,现在，它闪过一下，值为1。
Dialogue: 0,0:50:28.12,0:50:30.78,中文,,0,0,0,,如果我再跨越一次，看终端窗口。
Dialogue: 0,0:50:30.78,0:50:32.29,中文,,0,0,0,,这是我的第二个井号。
Dialogue: 0,0:50:32.29,0:50:34.65,中文,,0,0,0,,现在让我点击for循环上的“单步跳过”。
Dialogue: 0,0:50:34.65,0:50:36.61,中文,,0,0,0,,观察左上角的变量。
Dialogue: 0,0:50:36.61,0:50:38.41,中文,,0,0,0,,现在1变成2了。
Dialogue: 0,0:50:38.41,0:50:39.83,中文,,0,0,0,,现在让我再次点击它。
Dialogue: 0,0:50:39.83,0:50:40.63,中文,,0,0,0,,第三次井号。
Dialogue: 0,0:50:40.63,0:50:43.33,中文,,0,0,0,,这里也许暴露了逻辑错误的地方。
Dialogue: 0,0:50:43.33,0:50:45.15,中文,,0,0,0,,我先跳过这个循环。
Dialogue: 0,0:50:45.15,0:50:46.51,中文,,0,0,0,,现在i是3。
Dialogue: 0,0:50:46.51,0:50:47.02,中文,,0,0,0,,等一下。
Dialogue: 0,0:50:47.02,0:50:49.26,中文,,0,0,0,,我还是要打印出一个井号。
Dialogue: 0,0:50:49.26,0:50:49.84,中文,,0,0,0,,就在这里。
Dialogue: 0,0:50:49.84,0:50:50.78,中文,,0,0,0,,这是第四个井号。
Dialogue: 0,0:50:50.78,0:50:53.30,中文,,0,0,0,,而且在这一点上，希望像俗语所说的那样，灯泡已经亮了。
Dialogue: 0,0:50:53.30,0:50:55.10,中文,,0,0,0,,我意识到，哦，我搞砸了。
Dialogue: 0,0:50:55.10,0:51:03.23,中文,,0,0,0,,我要么用红色方块停止程序，要么就让它一直运行到结束，这样一切都会终止在这一点。
Dialogue: 0,0:51:03.23,0:51:05.67,中文,,0,0,0,,我只是想回到我的代码中，开始修复问题。
Dialogue: 0,0:51:05.67,0:51:10.94,中文,,0,0,0,,而且你可以关闭，比如，我会听到文件资源管理器，只是为了隐藏面板。
Dialogue: 0,0:51:10.94,0:51:12.34,中文,,0,0,0,,所以这是debug 50。
Dialogue: 0,0:51:12.34,0:51:19.65,中文,,0,0,0,,但它并不是cs50的一项只是为你启动调试器的功能，这在如今大多数编程环境中都可以找到。
Dialogue: 0,0:51:19.65,0:51:24.13,中文,,0,0,0,,关于debug的问题。
Dialogue: 0,0:51:24.13,0:51:27.91,中文,,0,0,0,,是的。
Dialogue: 0,0:51:27.91,0:51:28.39,中文,,0,0,0,,好问题。
Dialogue: 0,0:51:28.39,0:51:30.31,中文,,0,0,0,,它告诉你程序哪里出错了吗？
Dialogue: 0,0:51:30.31,0:51:33.17,中文,,0,0,0,,很遗憾，它并不会告诉你这些。
Dialogue: 0,0:51:33.17,0:51:39.75,中文,,0,0,0,,责任仍然在你身上，要有效地使用这个工具，以更合理的速度浏览你的代码。
Dialogue: 0,0:51:39.75,0:51:42.11,中文,,0,0,0,,但是你的大脑仍然需要解决它。
Dialogue: 0,0:51:42.11,0:51:49.05,中文,,0,0,0,,而且我对未来有了人工智能和更多像这样的程序，会更加有帮助，开始为我们回答这类问题，一点都不怀疑。
Dialogue: 0,0:51:49.05,0:51:52.99,中文,,0,0,0,,而且这学期还会有其他工具会介绍给你，比这个更强大。
Dialogue: 0,0:51:52.99,0:51:53.87,中文,,0,0,0,,但目前来说，
Dialogue: 0,0:51:53.87,0:51:57.84,中文,,0,0,0,,它只是一个工具，真的只是为了减慢事情的速度，不必改变你的代码。
Dialogue: 0,0:51:57.84,0:52:06.93,中文,,0,0,0,,我左侧的面板只是显示了数值的变化，这只是打印 F 的一个替代，我可以更慢地逐步执行。
Dialogue: 0,0:52:06.93,0:52:11.14,中文,,0,0,0,,其他关于debug的问题。
Dialogue: 0,0:52:11.14,0:52:15.06,中文,,0,0,0,,让我用这个调试器给你演示最后一个例子。
Dialogue: 0,0:52:15.06,0:52:16.74,中文,,0,0,0,,还有这个，我提前写好的。
Dialogue: 0,0:52:16.74,0:52:22.53,中文,,0,0,0,,让我关闭 buggy0.c，然后打开 buggy1.c，我的第二个版本。
Dialogue: 0,0:52:22.53,0:52:28.19,中文,,0,0,0,,让我关闭终端窗口一下，给你快速介绍一下这个程序，同样有个错误。
Dialogue: 0,0:52:28.19,0:52:33.03,中文,,0,0,0,,现在，在程序的顶部，一些熟悉的包括 cs50.h 和 stdio.h。
Dialogue: 0,0:52:33.03,0:52:34.65,中文,,0,0,0,,这不是我们以前见过的。
Dialogue: 0,0:52:34.65,0:52:38.90,中文,,0,0,0,,这是针对这个例子的，一个叫做 get_negative_int 的函数。
Dialogue: 0,0:52:38.90,0:52:41.14,中文,,0,0,0,,不需要任何参数，返回一个整数。
Dialogue: 0,0:52:41.14,0:52:41.72,中文,,0,0,0,,它是做什么的？
Dialogue: 0,0:52:41.72,0:52:45.22,中文,,0,0,0,,从用户那里获取一个负整数，这是字面意思。
Dialogue: 0,0:52:45.22,0:52:47.18,中文,,0,0,0,,有趣的是，它不正确。
Dialogue: 0,0:52:47.18,0:52:47.88,中文,,0,0,0,,这就是bug。
Dialogue: 0,0:52:47.88,0:52:50.20,中文,,0,0,0,,获取负整数目前有问题。
Dialogue: 0,0:52:50.20,0:52:51.44,中文,,0,0,0,,那么main函数做什么？
Dialogue: 0,0:52:51.44,0:53:00.19,中文,,0,0,0,,主要就是调用这个函数，括号里什么都不传，没有输入，将返回值存储在I中，然后只是在屏幕上打印出I。
Dialogue: 0,0:53:00.19,0:53:06.36,中文,,0,0,0,,老实说，单凭眼力看，我对编程感到足够自信，我认为主要是正确的。
Dialogue: 0,0:53:06.36,0:53:09.64,中文,,0,0,0,,让我明确一下，主要是正确的，但下面会有一个bug。
Dialogue: 0,0:53:09.64,0:53:11.24,中文,,0,0,0,,那么，下面的bug是什么？
Dialogue: 0,0:53:11.24,0:53:14.88,中文,,0,0,0,,好，让我看一下get_ negative的实现。
Dialogue: 0,0:53:14.88,0:53:19.20,中文,,0,0,0,,注意，第12行与上面的原型完全相同。
Dialogue: 0,0:53:19.20,0:53:25.29,中文,,0,0,0,,上面的原型在这里有点蠢，因为C是从上到下、从左到右读取东西的。
Dialogue: 0,0:53:25.29,0:53:26.61,中文,,0,0,0,,编译器在技术上是这样的。
Dialogue: 0,0:53:26.61,0:53:36.88,中文,,0,0,0,,如果你在这里引用了负数，但是你直到后面才实现它，并且你之前没有告诉C它会再次存在，你就会得到我们上周看到的错误。
Dialogue: 0,0:53:36.88,0:53:39.18,中文,,0,0,0,,那么get_negative_int是如何工作的呢？
Dialogue: 0,0:53:39.18,0:53:43.65,中文,,0,0,0,,我们声明了一个叫做n的变量。我们有一个做什么的do while循环？
Dialogue: 0,0:53:43.65,0:53:47.27,中文,,0,0,0,,它使用get_int，它是上周提到的cs50库中的函数。
Dialogue: 0,0:53:47.27,0:53:51.82,中文,,0,0,0,,它提示用户输入负整数，打引号，然后将值存储在n中。
Dialogue: 0,0:53:51.82,0:53:56.61,中文,,0,0,0,,只要n小于0，我就会一直做所有这些。
Dialogue: 0,0:53:56.61,0:53:56.83,中文,,0,0,0,,对的。
Dialogue: 0,0:53:56.83,0:54:05.07,中文,,0,0,0,,记得，上周我们用while循环来确保人类合作，不给我们错误类型的值，要么是正数，要么是负数，要么是其他什么的。
Dialogue: 0,0:54:05.07,0:54:07.65,中文,,0,0,0,,然后我们返回n。还有一些微妙之处。
Dialogue: 0,0:54:07.65,0:54:15.87,中文,,0,0,0,,有人还记得或者对于我为什么在第14行而不是第17行声明了一个吗？
Dialogue: 0,0:54:15.87,0:54:23.80,中文,,0,0,0,,这是C语言特有的东西。
Dialogue: 0,0:54:23.80,0:54:25.89,中文,,0,0,0,,确切地说，这涉及到作用域的概念。
Dialogue: 0,0:54:25.89,0:54:33.61,中文,,0,0,0,,随着时间的推移，我们将继续看到这一点，即一个变量只存在于你最近打开的大括号内。
Dialogue: 0,0:54:33.61,0:54:41.02,中文,,0,0,0,,如果我在第14行声明了n，那么我可以在第13行和第21行之间的任何地方使用它，因为那些是最近的花括号。
Dialogue: 0,0:54:41.02,0:54:49.37,中文,,0,0,0,,相比之下，正如你所指出的，如果我改为说这个int n等于获取int等等，并且没有当前的第14行。
Dialogue: 0,0:54:49.37,0:54:55.25,中文,,0,0,0,,那么n将存在于这些花括号内，但不在这里，这已经太晚了，绝对不在这里。
Dialogue: 0,0:54:55.25,0:54:59.58,中文,,0,0,0,,你只需要先声明它，然后使用和重复使用它。
Dialogue: 0,0:54:59.58,0:55:01.66,中文,,0,0,0,,现在让我向你展示如何debug这个问题。
Dialogue: 0,0:55:01.66,0:55:03.10,中文,,0,0,0,,但让我先展示一下症状。
Dialogue: 0,0:55:03.10,0:55:04.98,中文,,0,0,0,,让我打开我的终端窗口。
Dialogue: 0,0:55:04.98,0:55:07.72,中文,,0,0,0,,让我来编译一个有问题的代码。
Dialogue: 0,0:55:07.72,0:55:11.91,中文,,0,0,0,,不要像分号点斜杠有毛病一样傻。
Dialogue: 0,0:55:11.91,0:55:13.63,中文,,0,0,0,,然后我需要输入负整数。
Dialogue: 0,0:55:13.63,0:55:15.45,中文,,0,0,0,,让我输入负一。
Dialogue: 0,0:55:15.45,0:55:16.85,中文,,0,0,0,,输入。
Dialogue: 0,0:55:16.85,0:55:20.86,中文,,0,0,0,,主函数应该打印出我输入的内容，但显然没有。
Dialogue: 0,0:55:20.86,0:55:21.74,中文,,0,0,0,,又提示我输入了。
Dialogue: 0,0:55:21.74,0:55:24.10,中文,,0,0,0,,好吧，也许它会像负二一样。
Dialogue: 0,0:55:24.10,0:55:26.81,中文,,0,0,0,,不，也许是负三。
Dialogue: 0,0:55:26.81,0:55:29.15,中文,,0,0,0,,50好吧，所以它肯定坏了，对吧？
Dialogue: 0,0:55:29.15,0:55:31.66,中文,,0,0,0,,从逻辑上看，它好像在做相反的事情。
Dialogue: 0,0:55:31.66,0:55:33.70,中文,,0,0,0,,你或许可以看出为什么发生这种情况。
Dialogue: 0,0:55:33.70,0:55:37.34,中文,,0,0,0,,这些是故意简单的程序，为了演示的目的。
Dialogue: 0,0:55:37.34,0:55:38.50,中文,,0,0,0,,但让我们这样做。
Dialogue: 0,0:55:38.50,0:55:45.17,中文,,0,0,0,,让我继续在int main设置一个断点，虽然我很确定int main是正确的，但这可以帮助我开始我的思维过程。
Dialogue: 0,0:55:45.17,0:55:47.13,中文,,0,0,0,,从int main开始，然后再展开。
Dialogue: 0,0:55:47.13,0:55:53.11,中文,,0,0,0,,现在让我debug50点斜杠buggy0,然后回车。
Dialogue: 0,0:55:53.11,0:55:56.89,中文,,0,0,0,,然后看看，有了断点，GUI将重新配置自身。
Dialogue: 0,0:55:56.89,0:56:01.41,中文,,0,0,0,,它会在第8行暂停，因为那是主函数中第一个有趣的行。
Dialogue: 0,0:56:01.41,0:56:03.77,中文,,0,0,0,,我也可以直接在第8行设置断点。
Dialogue: 0,0:56:03.77,0:56:09.78,中文,,0,0,0,,它足够智能，知道如果我在第6行设置它，你确实指的是第8行，因为那是第一行实际的代码。
Dialogue: 0,0:56:09.78,0:56:11.44,中文,,0,0,0,,看看现在会发生什么。
Dialogue: 0,0:56:11.44,0:56:18.12,中文,,0,0,0,,如果我跨越这条线，请注意，目前它似乎有一个默认值为0。
Dialogue: 0,0:56:18.12,0:56:19.64,中文,,0,0,0,,以后再说。
Dialogue: 0,0:56:19.64,0:56:22.22,中文,,0,0,0,,但如果我点击“逐过程”，
Dialogue: 0,0:56:22.22,0:56:24.80,中文,,0,0,0,,像以前一样，我会被要求输入一个负整数。
Dialogue: 0,0:56:24.80,0:56:32.53,中文,,0,0,0,,让我输入负一并回车，现在请注意没有额外的黄色高亮。
Dialogue: 0,0:56:32.53,0:56:32.99,中文,,0,0,0,,为什么呢？
Dialogue: 0,0:56:32.99,0:56:34.29,中文,,0,0,0,,我现在卡在哪里？
Dialogue: 0,0:56:34.29,0:56:38.19,中文,,0,0,0,,逻辑上说的。
Dialogue: 0,0:56:38.19,0:56:40.77,中文,,0,0,0,,是的，就是逻辑上，我肯定是在那个do while循环里。
Dialogue: 0,0:56:40.77,0:56:43.56,中文,,0,0,0,,即使你不懂，这也是唯一的解释。
Dialogue: 0,0:56:43.56,0:56:46.16,中文,,0,0,0,,如果你不断被提示，肯定有个循环在运行。
Dialogue: 0,0:56:46.16,0:56:49.18,中文,,0,0,0,,我的代码里只有一个循环，所以可能有问题。
Dialogue: 0,0:56:49.18,0:56:52.79,中文,,0,0,0,,我不能只在主函数中设置断点，然后等待它工作。
Dialogue: 0,0:56:52.79,0:56:56.57,中文,,0,0,0,,让我用红色方框停下来。
Dialogue: 0,0:56:56.57,0:56:57.55,中文,,0,0,0,,让我想想。
Dialogue: 0,0:56:57.55,0:56:57.91,中文,,0,0,0,,好的。
Dialogue: 0,0:56:57.91,0:57:05.38,中文,,0,0,0,,而不是我仍然可以在int main设置断点，让我重新运行调试器，而不是跳过那行代码。
Dialogue: 0,0:57:05.38,0:57:08.02,中文,,0,0,0,,让我进入那行代码。
Dialogue: 0,0:57:08.02,0:57:09.26,中文,,0,0,0,,看看现在会发生什么。
Dialogue: 0,0:57:09.26,0:57:18.16,中文,,0,0,0,,而不是点击这里的第二个图标，让我点击第三个，名字确实是“步入”，看看黄色的高亮不会移动到第九行。
Dialogue: 0,0:57:18.16,0:57:25.26,中文,,0,0,0,,它深入到第八行，第八行的函数，把我带到第17行，嗖的一下。
Dialogue: 0,0:57:25.26,0:57:28.32,中文,,0,0,0,,它有点走进了下一个函数。
Dialogue: 0,0:57:28.32,0:57:34.47,中文,,0,0,0,,现在，它不会在第12、13或14行停顿，因为那里还没有智力上的有趣之处。
Dialogue: 0,0:57:34.47,0:57:37.11,中文,,0,0,0,,多汁的部分似乎真正开始于第17行。
Dialogue: 0,0:57:37.11,0:57:41.23,中文,,0,0,0,,现在请注意，n是我的左上角的变量。
Dialogue: 0,0:57:41.23,0:57:46.04,中文,,0,0,0,,如果我点击，不过现在我不想点击“逐步进入”。
Dialogue: 0,0:57:46.04,0:57:48.10,中文,,0,0,0,,如果我点击“逐步进入”会出什么问题呢？
Dialogue: 0,0:57:48.10,0:57:52.57,中文,,0,0,0,,或者它会做一些我不想做的事情吗？
Dialogue: 0,0:57:52.57,0:57:55.01,中文,,0,0,0,,是的。
Dialogue: 0,0:57:55.01,0:57:56.65,中文,,0,0,0,,是的，它会进入 get_int。
Dialogue: 0,0:57:56.65,0:57:59.75,中文,,0,0,0,,但我希望工作人员版本的 get_int 是正确的。
Dialogue: 0,0:57:59.75,0:58:00.87,中文,,0,0,0,,而这不是我们今天要解决的问题。
Dialogue: 0,0:58:00.87,0:58:02.28,中文,,0,0,0,,我想跳过它。
Dialogue: 0,0:58:02.28,0:58:10.84,中文,,0,0,0,,现在请注意左上角，n 的值在我去终端窗口并输入类似负 1 的东西之前还没有发生任何变化。
Dialogue: 0,0:58:10.84,0:58:11.98,中文,,0,0,0,,现在注意。
Dialogue: 0,0:58:11.98,0:58:14.69,中文,,0,0,0,,它跳到第19行，这是下一行有趣的地方。
Dialogue: 0,0:58:14.69,0:58:17.37,中文,,0,0,0,,左上角，n确实是负1。
Dialogue: 0,0:58:17.37,0:58:25.32,中文,,0,0,0,,这就是我现在可以作为人类暂停并思考的地方，所以当n小于0时，左上角的n是负1。
Dialogue: 0,0:58:25.32,0:58:29.78,中文,,0,0,0,,当负1小于0时，很明显从数学上讲是对的。
Dialogue: 0,0:58:29.78,0:58:31.08,中文,,0,0,0,,那么会发生什么呢？
Dialogue: 0,0:58:31.08,0:58:32.06,中文,,0,0,0,,这是一个do-while循环。
Dialogue: 0,0:58:32.06,0:58:35.49,中文,,0,0,0,,当我再次点击“步过”时，
Dialogue: 0,0:58:35.49,0:58:39.62,中文,,0,0,0,,它会去到这一行，因为它在那个循环的内部结束了。
Dialogue: 0,0:58:39.62,0:58:42.70,中文,,0,0,0,,现在在这里，它一遍又一遍地循环。
Dialogue: 0,0:58:42.70,0:58:44.30,中文,,0,0,0,,让我再做一次。
Dialogue: 0,0:58:44.30,0:58:45.74,中文,,0,0,0,,我要“步过”。
Dialogue: 0,0:58:45.74,0:58:48.71,中文,,0,0,0,,我要输入负2，就是完全一样的东西。
Dialogue: 0,0:58:48.71,0:58:50.37,中文,,0,0,0,,现在是我的机会，黄线上。
Dialogue: 0,0:58:50.37,0:58:51.31,中文,,0,0,0,,等一分钟。
Dialogue: 0,0:58:51.31,0:58:53.57,中文,,0,0,0,,负2显然小于0。
Dialogue: 0,0:58:53.57,0:58:56.05,中文,,0,0,0,,让我再试一次。
Dialogue: 0,0:58:56.05,0:58:57.13,中文,,0,0,0,,在这里点击一次。
Dialogue: 0,0:58:57.13,0:58:59.25,中文,,0,0,0,,现在，让我给它50。
Dialogue: 0,0:58:59.25,0:59:05.06,中文,,0,0,0,,现在，当50小于0的时候，这是不对的。
Dialogue: 0,0:59:05.06,0:59:08.96,中文,,0,0,0,,循环结束了，因为它不会在50小于0的情况下执行。
Dialogue: 0,0:59:08.96,0:59:09.66,中文,,0,0,0,,这不是真的。
Dialogue: 0,0:59:09.66,0:59:12.48,中文,,0,0,0,,现在看，当我再次点击“单步跳过”时。
Dialogue: 0,0:59:12.48,0:59:15.91,中文,,0,0,0,,然后它完成了循环，尽管没有更多要做的事情。
Dialogue: 0,0:59:15.91,0:59:21.49,中文,,0,0,0,,它现在即将返回n。它跳回到主程序，在那里我在第九行离开。
Dialogue: 0,0:59:21.49,0:59:23.85,中文,,0,0,0,,现在在我的终端窗口中打印出数字50。
Dialogue: 0,0:59:23.85,0:59:28.41,中文,,0,0,0,,希望此时回答你之前的问题，我的大脑已经意识到，哦，我真是个傻瓜。
Dialogue: 0,0:59:28.41,0:59:30.61,中文,,0,0,0,,就像我在那里改变了我的符号一样。
Dialogue: 0,0:59:30.61,0:59:32.67,中文,,0,0,0,,我可能应该让我停下来。
Dialogue: 0,0:59:32.67,0:59:34.73,中文,,0,0,0,,我可能想做这样的事情。
Dialogue: 0,0:59:34.73,0:59:45.22,中文,,0,0,0,,如果目标是获得一个负整数，我可能希望说，只要 n 大于或等于0即可。
Dialogue: 0,0:59:45.22,0:59:48.70,中文,,0,0,0,,当n大于或等于0时，继续做这个。
Dialogue: 0,0:59:48.70,0:59:50.42,中文,,0,0,0,,这就是我想表达的逻辑。
Dialogue: 0,0:59:50.42,0:59:58.81,中文,,0,0,0,,调试器只是让我不用盯着屏幕，或者询问其他人，至少在这种情况下，它让我以更健康的速度进行。
Dialogue: 0,0:59:58.81,1:00:07.78,中文,,0,0,0,,现在有关debug50 的问题，它应该成为你的新朋友，即使在打印死机后不是你的第一反应。
Dialogue: 0,1:00:07.78,1:00:09.26,中文,,0,0,0,,有关debug50 的任何问题吗？
Dialogue: 0,1:00:09.26,1:00:09.84,中文,,0,0,0,,没有吗？
Dialogue: 0,1:00:09.84,1:00:10.56,中文,,0,0,0,,好的。
Dialogue: 0,1:00:10.56,1:00:14.06,中文,,0,0,0,,这里还有一种最后的技巧，我们可以提供给你。
Dialogue: 0,1:00:14.06,1:00:22.71,中文,,0,0,0,,这是再除了 printf 和调试器之外，毫不夸张地说，橡皮鸭实际上是寻找代码中错误的一个合理推荐方法。
Dialogue: 0,1:00:22.71,1:00:26.37,中文,,0,0,0,,针对你之前的问题，橡皮鸭不会为你解决问题。
Dialogue: 0,1:00:26.37,1:00:30.49,中文,,0,0,0,,不过如果你一直想知道为什么这小家伙在这里呆了这么久，那就是这个技巧。
Dialogue: 0,1:00:30.49,1:00:35.76,中文,,0,0,0,,它甚至有自己的维基百科页面，叫做“橡皮鸭调试法”，其核心思想就是，
Dialogue: 0,1:00:35.76,1:00:51.49,中文,,0,0,0,,如果你在宿舍房间里与代码中的某个错误苦苦搏斗，printf并没有完全揭示问题的根本，调试器也无济于事，\N老实说，也许大声表达一下你遇到的问题会有所帮助，就像去上导师办公时间、与助教或教授交流、仔细审视你的问题一样。
Dialogue: 0,1:00:51.49,1:00:59.29,中文,,0,0,0,,因为在与这只小鸭子交谈时，你会意识到你之所以在这里做这些事情是因为当 n小于0时。
Dialogue: 0,1:00:59.29,1:01:02.49,中文,,0,0,0,,如果 n 确实小于 0，你可能会意识到自己犯了个错误。
Dialogue: 0,1:01:02.49,1:01:03.79,中文,,0,0,0,,这不仅仅是与橡皮鸭交流。
Dialogue: 0,1:01:03.79,1:01:11.86,中文,,0,0,0,,通过用文字表达自己，你可能会听到自己的陈述中的一些不合逻辑之处。
Dialogue: 0,1:01:11.86,1:01:16.38,中文,,0,0,0,,而仅仅通过说出来，你会意识到，哦，这就是我的问题。
Dialogue: 0,1:01:16.38,1:01:19.84,中文,,0,0,0,,坦率地说，如果你有室友，你也可以用室友来帮助你。
Dialogue: 0,1:01:19.84,1:01:28.33,中文,,0,0,0,,但橡皮鸭通常是当你的室友对你的C编程问题没有兴趣时，讨论一些东西的常规选择。
Dialogue: 0,1:01:28.33,1:01:30.15,中文,,0,0,0,,这是一种无价的技巧。
Dialogue: 0,1:01:30.15,1:01:34.67,中文,,0,0,0,,我承认我不太经常和橡皮鸭这样做，但理想情况下是与同事，人类同事。
Dialogue: 0,1:01:34.67,1:01:40.43,中文,,0,0,0,,但经常讨论事情会帮助你意识到，哦，我说了一些不合逻辑的话。
Dialogue: 0,1:01:40.43,1:01:41.87,中文,,0,0,0,,现在我可以回到代码了。
Dialogue: 0,1:01:41.87,1:01:46.23,中文,,0,0,0,,所以不要不断地盯着屏幕数分钟，数小时，来希望问题能解决
Dialogue: 0,1:01:46.23,1:01:53.04,中文,,0,0,0,,在那时，是休息的时候，是走开的时候，是和鸭子交谈的时候，如果你已经用尽了其他工具的话。
Dialogue: 0,1:01:53.04,1:01:58.94,中文,,0,0,0,,顺便说一下，在课堂结束的时候，今天在出门的时候，我们有足够多的橡皮鸭子给你。
Dialogue: 0,1:01:58.94,1:02:05.76,中文,,0,0,0,,多年来，至少在一些人中间，随身携带鸭子并给我们发照片已经成了一种习惯。
Dialogue: 0,1:02:05.76,1:02:09.85,中文,,0,0,0,,在这里，例如，是cs50的橡皮鸭调试器，又名DDB
Dialogue: 0,1:02:09.85,1:02:18.80,中文,,0,0,0,,DDB 是 Duck Debugger 的缩写，这是一个取笑更极客的 GDB（GNU Debugger）程序，GDB 真的是一个用于debug的软件。
Dialogue: 0,1:02:18.80,1:02:25.34,中文,,0,0,0,,这是 cs50 在波多黎各山区的调试器，还有在海边。
Dialogue: 0,1:02:25.34,1:02:31.71,中文,,0,0,0,,它一路走到了旧金山，也来到了渔人码头旁边的海狮区。
Dialogue: 0,1:02:31.71,1:02:39.06,中文,,0,0,0,,如果你熟悉的话在斯坦福，那里有一个威廉·盖茨计算机科学楼，用于计算机科学，而在旧金山的谷歌公司附近。
Dialogue: 0,1:02:39.06,1:02:41.90,中文,,0,0,0,,这是罗马的特拉维喷泉。
Dialogue: 0,1:02:41.90,1:02:43.80,中文,,0,0,0,,最后，还有斗兽场。
Dialogue: 0,1:02:43.80,1:02:47.19,中文,,0,0,0,,我们将在未来几年看看你的小鸭子去了哪里。
Dialogue: 0,1:02:47.19,1:02:49.25,中文,,0,0,0,,应该有很多地方。
Dialogue: 0,1:02:49.25,1:02:51.89,中文,,0,0,0,,为什么我们不在这儿休息一下，休息五分钟？
Dialogue: 0,1:02:51.89,1:02:52.66,中文,,0,0,0,,还没有零食。
Dialogue: 0,1:02:52.66,1:02:54.42,中文,,0,0,0,,你可以站起来或坐下。
Dialogue: 0,1:02:54.42,1:02:57.18,中文,,0,0,0,,我们大约五分钟后回来。
Dialogue: 0,1:02:57.18,1:02:58.52,中文,,0,0,0,,好的。
Dialogue: 0,1:02:58.52,1:03:00.06,中文,,0,0,0,,我们回来了。
Dialogue: 0,1:03:00.06,1:03:17.27,中文,,0,0,0,,如果今天的最终目标是更好地理解字符串之类的东西，以便我们能够用文本解决问题，\N那么让我们首先考虑一些更简单的数据类型，看看这是否会让我们发现今天现代软件中使用这些东西的字符串的方法。
Dialogue: 0,1:03:17.27,1:03:27.78,中文,,0,0,0,,当我们在0周谈论数据的表示时，我们有不同的二进制、十进制和一进制的方法。
Dialogue: 0,1:03:27.78,1:03:34.09,中文,,0,0,0,,当我们上周开始讨论相同的代码时，我们开始谈论数据类型。
Dialogue: 0,1:03:34.09,1:03:38.59,中文,,0,0,0,,而这些数据类型是一种告诉计算机的方式，比如，你要整数吗？
Dialogue: 0,1:03:38.59,1:03:39.99,中文,,0,0,0,,你要字符吗？
Dialogue: 0,1:03:39.99,1:03:45.26,中文,,0,0,0,,你要浮点数值吗，比如实数，甚至像我们看到的字符串吗？
Dialogue: 0,1:03:45.26,1:03:48.88,中文,,0,0,0,,但事实证明，计算机当然只有有限的
Dialogue: 0,1:03:48.88,1:03:55.83,中文,,0,0,0,,让我们来看看到目前为止我们看到的一些数据类型。
Dialogue: 0,1:03:55.83,1:03:59.80,中文,,0,0,0,,例如，这里是到目前为止我们看到的一些数据类型。
Dialogue: 0,1:03:59.80,1:04:04.80,中文,,0,0,0,,事实证明，C语言中的每种数据类型都有特定数量的比特位。
Dialogue: 0,1:04:04.80,1:04:25.22,中文,,0,0,0,,让我们开始吧。
Dialogue: 0,1:04:25.22,1:04:34.10,中文,,0,0,0,,这是真还是假，有点奇怪地使用了一个完整的字节，尽管这对于布尔型的真或假来说绝对是过剩的，因为你当然只需要一个比特。
Dialogue: 0,1:04:34.10,1:04:41.22,中文,,0,0,0,,但事实证明，尽管使用8个比特或一个字节来表示真或假是浪费的，但对于计算机来说更容易。
Dialogue: 0,1:04:41.22,1:04:47.61,中文,,0,0,0,,布尔型通常占用一个字节，而英寸，我们一直在使用，通常使用四个字节，即32比特。
Dialogue: 0,1:04:47.61,1:04:49.65,中文,,0,0,0,,如果我从0周开始进行一些快速的数学计算，
Dialogue: 0,1:04:49.65,1:04:54.19,中文,,0,0,0,,32位的情况下，你有大约40亿个可能的值。
Dialogue: 0,1:04:54.19,1:05:01.03,中文,,0,0,0,,但如果你想要表示正数和负数，这意味着你可以表示大约负20亿一直到正20亿。
Dialogue: 0,1:05:01.03,1:05:02.94,中文,,0,0,0,,这通常是int的范围。
Dialogue: 0,1:05:02.94,1:05:06.88,中文,,0,0,0,,如果这对你来说数字太少，事实证明还有一种叫做longs的东西。
Dialogue: 0,1:05:06.88,1:05:15.92,中文,,0,0,0,,长整数使用64位，允许你拥有千亿亿种可能，绝对比40亿多得多。
Dialogue: 0,1:05:15.92,1:05:17.42,中文,,0,0,0,,有时候你可能会使用long。
Dialogue: 0,1:05:17.42,1:05:18.86,中文,,0,0,0,,但即便如此也是有限的。
Dialogue: 0,1:05:18.86,1:05:28.45,中文,,0,0,0,,就像我们在上周末讨论的那样，如果你对数据作出某些假设，比如整数溢出之类的情况，坏事就会发生，其中一种情况是数据会循环。
Dialogue: 0,1:05:28.45,1:05:31.42,中文,,0,0,0,,然后有浮点数，这是一个实数，带有小数点。
Dialogue: 0,1:05:31.42,1:05:34.88,中文,,0,0,0,,按照惯例，它有4字节或32位。
Dialogue: 0,1:05:34.88,1:05:37.78,中文,,0,0,0,,这只给你一个特定的精度。
Dialogue: 0,1:05:37.78,1:05:41.60,中文,,0,0,0,,它并不一定规定了左边或右边有多少数字。
Dialogue: 0,1:05:41.60,1:05:47.75,中文,,0,0,0,,总的来说，最终，你有四十亿种可能的排列。
Dialogue: 0,1:05:47.75,1:05:54.05,中文,,0,0,0,,如果你在科学、医学、金融应用中需要更高的精度，你可能会使用八个字节，也就是双精度。
Dialogue: 0,1:05:54.05,1:05:57.72,中文,,0,0,0,,双精度会给你更多的小数点位数。
Dialogue: 0,1:05:57.72,1:06:01.50,中文,,0,0,0,,它们最终会变得不够精确，就像我们上周看到的例子一样。
Dialogue: 0,1:06:01.50,1:06:03.78,中文,,0,0,0,,但至少能让你走得更远。
Dialogue: 0,1:06:03.78,1:06:12.79,中文,,0,0,0,,顺便说一下，在金融、医学和军事等非常重要的应用中，你真的不能容忍舍入误差。
Dialogue: 0,1:06:12.79,1:06:19.46,中文,,0,0,0,,长话短说，人类已经开发了在C和其他语言中使用甚至更多于八个字节的库来解决这些问题。
Dialogue: 0,1:06:19.46,1:06:22.14,中文,,0,0,0,,这些问题是有解决方案的，但它们总是有限的。
Dialogue: 0,1:06:22.14,1:06:24.22,中文,,0,0,0,,你得选一个上限。
Dialogue: 0,1:06:24.22,1:06:30.14,中文,,0,0,0,,然后还有char，上周我们简要地看到了，当我问用户要y还是n，即yes或no时。
Dialogue: 0,1:06:30.14,1:06:34.48,中文,,0,0,0,,然后还有string，我打算把它比作一个问号，因为一个字符串完全取决于内容。
Dialogue: 0,1:06:34.48,1:06:38.89,中文,,0,0,0,,比如hi，h，i，惊叹号看起来似乎是三个字节。
Dialogue: 0,1:06:38.89,1:06:41.31,中文,,0,0,0,,D-A-V-I-D看起来是五个。
Dialogue: 0,1:06:41.31,1:06:45.55,中文,,0,0,0,,所以字符串显然是根据你或人类输入的内容而变化的。
Dialogue: 0,1:06:45.55,1:06:48.21,中文,,0,0,0,,不过等会我们会看到这意味着什么。
Dialogue: 0,1:06:48.21,1:06:51.57,中文,,0,0,0,,不过，这就是你的Mac、PC和手机内部的东西。
Dialogue: 0,1:06:51.57,1:06:56.43,中文,,0,0,0,,它可能不会看起来完全像这个，但这是现代计算机的一个内存模块。
Dialogue: 0,1:06:56.43,1:07:01.37,中文,,0,0,0,,让我们把它当作代表任何计算机内部拥有的有限内存量。
Dialogue: 0,1:07:01.37,1:07:06.14,中文,,0,0,0,,让我们放大看一下这块电路板上的一个小黑芯片。
Dialogue: 0,1:07:06.14,1:07:06.98,中文,,0,0,0,,放大。
Dialogue: 0,1:07:06.98,1:07:11.86,中文,,0,0,0,,我想这个矩形其实代表了一些字节数。
Dialogue: 0,1:07:11.86,1:07:19.30,中文,,0,0,0,,藏在电路板上的这个小黑色芯片里可能有，我不知道，一千兆字节，也可能是一百字节，一些字节数。
Dialogue: 0,1:07:19.30,1:07:22.84,中文,,0,0,0,,这完全取决于计算机和你为这根内存棒付了多少钱。
Dialogue: 0,1:07:22.84,1:07:25.74,中文,,0,0,0,,但如果有限定数量的字节，
Dialogue: 0,1:07:25.74,1:07:32.43,中文,,0,0,0,,以某种数字方式在这个硬件内部实际实现，那么我们完全可以给这些字节编号。
Dialogue: 0,1:07:32.43,1:07:38.90,中文,,0,0,0,,我们可以随意决定左上角是第1个字节，或者真正的第0个字节。
Dialogue: 0,1:07:38.90,1:07:46.28,中文,,0,0,0,,它旁边的是第1个，然后是第2个，第3个，依此类推，第20亿个，或者无论这块内存有多大。
Dialogue: 0,1:07:46.28,1:07:54.91,中文,,0,0,0,,如果你在C程序中使用一个像char这样只有一个字节的变量，它可能确实存储在内存的左上角。
Dialogue: 0,1:07:54.91,1:07:57.94,中文,,0,0,0,,实际上，你并不关心它物理上存储在哪里。
Dialogue: 0,1:07:57.94,1:08:03.10,中文,,0,0,0,,但是实际上，艺术家的构想可能是这个字符可能使用其中一个单字节。
Dialogue: 0,1:08:03.10,1:08:04.34,中文,,0,0,0,,在计算机内存的某个地方。
Dialogue: 0,1:08:04.34,1:08:09.08,中文,,0,0,0,,如果你使用一个四字节的int，它会给你四个连续的字节。
Dialogue: 0,1:08:09.08,1:08:11.00,中文,,0,0,0,,从左到右，从上到下。
Dialogue: 0,1:08:11.00,1:08:13.25,中文,,0,0,0,,但所有的32位都会挨在一起。
Dialogue: 0,1:08:13.25,1:08:16.27,中文,,0,0,0,,计算机知道这些确实都属于同一个int。
Dialogue: 0,1:08:16.27,1:08:21.05,中文,,0,0,0,,如果你需要一个long或者一个double，那么在这种情况下你可能会使用完整的八个字节。
Dialogue: 0,1:08:21.05,1:08:30.04,中文,,0,0,0,,而且你就一直使用这个内存，就像在Photoshop或电子表格中一样，你可以随意移动像素或数据。
Dialogue: 0,1:08:30.04,1:08:37.15,中文,,0,0,0,,这确实就是你计算机内存的作用，一个用来存储信息的画布，以字节或8位为单位。
Dialogue: 0,1:08:37.15,1:08:39.16,中文,,0,0,0,,我们不需要一直看着这些电路板。
Dialogue: 0,1:08:39.16,1:08:41.44,中文,,0,0,0,,我们可以将其抽象化，就像我们经常做的那样。
Dialogue: 0,1:08:41.44,1:08:45.62,中文,,0,0,0,,让我们放大这个网格，考虑一些非常具体的变量。
Dialogue: 0,1:08:45.62,1:08:51.77,中文,,0,0,0,,让我放大一下，现在屏幕上看到的是更少但更大的方框，每个方框再次表示一个字节。
Dialogue: 0,1:08:51.77,1:08:55.19,中文,,0,0,0,,现在让我建议我们玩一些实际的代码。
Dialogue: 0,1:08:55.19,1:08:59.09,中文,,0,0,0,,在 C 语言中，虽然没有一个完整的程序或三英寸，
Dialogue: 0,1:08:59.09,1:09:01.22,中文,,0,0,0,,从scores1到scores3。
Dialogue: 0,1:09:01.22,1:09:09.02,中文,,0,0,0,,我碰巧给自己两个scores，分别是 72 和 73，然后一个相当低的scores是33。
Dialogue: 0,1:09:09.02,1:09:12.12,中文,,0,0,0,,当然，上周或两周前，这个scores会很高。
Dialogue: 0,1:09:12.12,1:09:13.86,中文,,0,0,0,,但现在我们正在处理实际的整数。
Dialogue: 0,1:09:13.86,1:09:17.80,中文,,0,0,0,,这些是我的测验或测试的三个scores。
Dialogue: 0,1:09:17.80,1:09:28.50,中文,,0,0,0,,让我在这里打开 V.S. Code，然后让我们创建一个叫code scores.c 的程序。\N我要写code scores.c。这会给我一个新的文件，然后让我来实现类似这样的东西。
Dialogue: 0,1:09:28.50,1:09:32.96,中文,,0,0,0,,包括stdio.h，main(void)。
Dialogue: 0,1:09:32.96,1:09:36.75,中文,,0,0,0,,在这里，让我做一个scores，一个将是72。
Dialogue: 0,1:09:36.75,1:09:43.35,中文,,0,0,0,,scores2将是73，scores3将是33。
Dialogue: 0,1:09:43.35,1:09:47.81,中文,,0,0,0,,然后让我写一个程序来计算我的三个考试成绩的平均值，就像这样。
Dialogue: 0,1:09:47.81,1:09:49.83,中文,,0,0,0,,让我做printf。
Dialogue: 0,1:09:49.83,1:09:58.48,中文,,0,0,0,,所谓的我的平均分是，我将继续说%i换行。现在让我插入结果。
Dialogue: 0,1:09:58.48,1:09:59.80,中文,,0,0,0,,这有点像小学数学。
Dialogue: 0,1:09:59.80,1:10:02.28,中文,,0,0,0,,我怎么计算三个数的平均值呢？
Dialogue: 0,1:10:02.28,1:10:14.72,中文,,0,0,0,,就像在纸上一样，我可以计算scores1加scores2加scores3，因为有运算顺序，然后除以3，因为总共有3个scores。
Dialogue: 0,1:10:14.72,1:10:16.04,中文,,0,0,0,,我觉得这没问题。
Dialogue: 0,1:10:16.04,1:10:20.74,中文,,0,0,0,,的确，你可以在你的代码中使用括号和加号等运算符，就像这样，然后看看。
Dialogue: 0,1:10:20.74,1:10:23.39,中文,,0,0,0,,让我继续make scores。
Dialogue: 0,1:10:23.39,1:10:24.35,中文,,0,0,0,,没有语法错误。
Dialogue: 0,1:10:24.35,1:10:24.97,中文,,0,0,0,,那就太好了。
Dialogue: 0,1:10:24.97,1:10:26.01,中文,,0,0,0,,没什么遗漏。
Dialogue: 0,1:10:26.01,1:10:28.87,中文,,0,0,0,,现在让我来执行./ scores看看我的测试平均分是多少。
Dialogue: 0,1:10:28.87,1:10:29.21,中文,,0,0,0,,好的。
Dialogue: 0,1:10:29.21,1:10:32.60,中文,,0,0,0,,你知道，虽然不太好，但我想我还是及格了。
Dialogue: 0,1:10:32.60,1:10:36.24,中文,,0,0,0,,确实，这里的平均分是59。
Dialogue: 0,1:10:36.24,1:10:38.44,中文,,0,0,0,,但确实是59吗？
Dialogue: 0,1:10:38.44,1:10:39.12,中文,,0,0,0,,让我们看看。
Dialogue: 0,1:10:39.12,1:10:46.26,中文,,0,0,0,,咱们咱们实际上不用用一个结束符号，我们可以考虑用一个浮点数值在这里，让我去做一下。
Dialogue: 0,1:10:46.26,1:10:49.15,中文,,0,0,0,,让我重新编译我的代码，生成scores。
Dialogue: 0,1:10:49.15,1:10:49.49,中文,,0,0,0,,啊？
Dialogue: 0,1:10:49.49,1:10:49.89,中文,,0,0,0,,好的。
Dialogue: 0,1:10:49.89,1:10:50.61,中文,,0,0,0,,我遇到了一个问题。
Dialogue: 0,1:10:50.61,1:10:52.37,中文,,0,0,0,,让我放大一下我的终端窗口。
Dialogue: 0,1:10:52.37,1:10:54.87,中文,,0,0,0,,我们之前可能没见过这个。
Dialogue: 0,1:10:54.87,1:11:00.53,中文,,0,0,0,,但第九行错误中指定了 double 类型，这需要很高的精度。
Dialogue: 0,1:11:00.53,1:11:02.31,中文,,0,0,0,,但参数的类型是 'in'。
Dialogue: 0,1:11:02.31,1:11:03.17,中文,,0,0,0,,那么这是什么意思？
Dialogue: 0,1:11:03.17,1:11:08.97,中文,,0,0,0,,它用这些绿色波浪线向我显示，%f 和这边的东西之间有问题。
Dialogue: 0,1:11:08.97,1:11:13.05,中文,,0,0,0,,左边，我在暗示一个浮点数或者说是 double。
Dialogue: 0,1:11:13.05,1:11:17.17,中文,,0,0,0,,但右边，score one 到 score three 的数据类型是什么？
Dialogue: 0,1:11:17.17,1:11:18.02,中文,,0,0,0,,它们是整数。
Dialogue: 0,1:11:18.02,1:11:19.58,中文,,0,0,0,,clang不喜欢这个。
Dialogue: 0,1:11:19.58,1:11:24.34,中文,,0,0,0,,编译器不喜欢我在右边使用整数，但我想要左边是浮点数。
Dialogue: 0,1:11:24.34,1:11:26.86,中文,,0,0,0,,解决这个问题的方法有很多种。
Dialogue: 0,1:11:26.86,1:11:32.82,中文,,0,0,0,,一种方法就是忽略这个问题，就像我最初做的那样，然后返回到%i。
Dialogue: 0,1:11:32.82,1:11:38.45,中文,,0,0,0,,另外，%d通常是十进制数字的一个替代品。
Dialogue: 0,1:11:38.45,1:11:40.75,中文,,0,0,0,,但我们使用%i，因为它听起来像整数。
Dialogue: 0,1:11:40.75,1:11:42.63,中文,,0,0,0,,所以在这里%i也可以。
Dialogue: 0,1:11:42.63,1:11:44.13,中文,,0,0,0,,不过我不只是想回避这个问题。
Dialogue: 0,1:11:44.13,1:11:46.39,中文,,0,0,0,,我想要真正显示一个浮点数值。
Dialogue: 0,1:11:46.39,1:11:47.75,中文,,0,0,0,,那么，我怎么解决这个问题呢？
Dialogue: 0,1:11:47.75,1:11:49.81,中文,,0,0,0,,事实证明我可以用几种不同的方法来解决这个问题。
Dialogue: 0,1:11:49.81,1:11:59.47,中文,,0,0,0,,最简单的方法就是确保右边至少有一个是浮点数值，比如3.0而不仅仅是3。
Dialogue: 0,1:11:59.47,1:12:01.77,中文,,0,0,0,,现在我想clang会更高兴。
Dialogue: 0,1:12:01.77,1:12:04.50,中文,,0,0,0,,让我来执行make scores ，然后enter。
Dialogue: 0,1:12:04.50,1:12:05.32,中文,,0,0,0,,其实，这没问题。
Dialogue: 0,1:12:05.32,1:12:06.06,中文,,0,0,0,,为什么呢？
Dialogue: 0,1:12:06.06,1:12:14.48,中文,,0,0,0,,只要右边至少有一个更精确的数据类型，它就会将那一点的所有东西都视为浮点值，以使数学计算正确。
Dialogue: 0,1:12:14.48,1:12:16.38,中文,,0,0,0,,所以./scores，然后enter。
Dialogue: 0,1:12:16.38,1:12:17.74,中文,,0,0,0,,然后我们就好了，对吧？
Dialogue: 0,1:12:17.74,1:12:20.41,中文,,0,0,0,,你知道的，有些人可能真的希望有那三分之一。
Dialogue: 0,1:12:20.41,1:12:21.97,中文,,0,0,0,,我们的平均分不是59。
Dialogue: 0,1:12:21.97,1:12:25.01,中文,,0,0,0,,这是59又1/3，就像这个案例中的情况一样。
Dialogue: 0,1:12:25.01,1:12:27.01,中文,,0,0,0,,我们解决了那个。
Dialogue: 0,1:12:27.01,1:12:31.08,中文,,0,0,0,,另外，还有一种方法要在这里展示。
Dialogue: 0,1:12:31.08,1:12:36.40,中文,,0,0,0,,如果你不想把它改成3.0，因为那有点奇怪，因为实际上有3个scores。
Dialogue: 0,1:12:36.40,1:12:38.85,中文,,0,0,0,,并不是说它需要有小数点。
Dialogue: 0,1:12:38.85,1:12:46.16,中文,,0,0,0,,你也可以明确地把这个3 转换成浮点数，用括号括起来说float。
Dialogue: 0,1:12:46.16,1:12:48.26,中文,,0,0,0,,这就是所谓的类型转换。
Dialogue: 0,1:12:48.26,1:12:52.46,中文,,0,0,0,,这将只是尝试将它右边的东西转换成那种数据类型，如果可能的话。
Dialogue: 0,1:12:52.46,1:12:58.28,中文,,0,0,0,,如果我再次这样做，现在没有错误了点斜杠scores，我得到的实际上是相同的结果。
Dialogue: 0,1:12:58.28,1:13:03.83,中文,,0,0,0,,这里有一点四舍五入问题，但我们知道四舍五入与上周的不精确有关。
Dialogue: 0,1:13:03.83,1:13:06.99,中文,,0,0,0,,让我只是对我的59.3多一些感到高兴。
Dialogue: 0,1:13:06.99,1:13:08.57,中文,,0,0,0,,我现在就要这个。
Dialogue: 0,1:13:08.57,1:13:14.81,中文,,0,0,0,,但这已经足够接近一个对的答案了，至少对我来说是这样。
Dialogue: 0,1:13:14.81,1:13:18.60,中文,,0,0,0,,但现在我怎么思考计算机内存里到底发生了什么呢？
Dialogue: 0,1:13:18.60,1:13:19.30,中文,,0,0,0,,让我们考虑一下。
Dialogue: 0,1:13:19.30,1:13:20.56,中文,,0,0,0,,这是同样的内存网格。
Dialogue: 0,1:13:20.56,1:13:22.78,中文,,0,0,0,,每个方框代表一个字节。
Dialogue: 0,1:13:22.78,1:13:25.94,中文,,0,0,0,,我的内存中的scores1、scores2和scores3分别在哪里呢？
Dialogue: 0,1:13:25.94,1:13:28.78,中文,,0,0,0,,scores1，我就提一下，应该在左上角。
Dialogue: 0,1:13:28.78,1:13:32.26,中文,,0,0,0,,但它占据了四个方框，也就是四个字节。
Dialogue: 0,1:13:32.26,1:13:36.78,中文,,0,0,0,,也许，"Score two" 很可能会在内存中紧挨在它旁边，虽然这并不总是会发生。
Dialogue: 0,1:13:36.78,1:13:38.89,中文,,0,0,0,,但我选择了简单的例子。
Dialogue: 0,1:13:38.89,1:13:40.91,中文,,0,0,0,,73 也挨着它，同样占用四个字节。
Dialogue: 0,1:13:40.91,1:13:45.37,中文,,0,0,0,,然后最后，33 就在下面的scores3那里。
Dialogue: 0,1:13:45.37,1:13:55.83,中文,,0,0,0,,如果我们真的观察计算机的内存，用某种显微镜之类的工具，实际上每个都有 32 位，32 位，32 位。
Dialogue: 0,1:13:55.83,1:13:59.33,中文,,0,0,0,,四组四个字节代表这些值。
Dialogue: 0,1:13:59.33,1:14:03.26,中文,,0,0,0,,但再说一次，对于今天的目的来说，我们不需要一遍又一遍地思考二进制。
Dialogue: 0,1:14:03.26,1:14:06.02,中文,,0,0,0,,这只是确实这些小数被存储在那里。
Dialogue: 0,1:14:06.02,1:14:08.40,中文,,0,0,0,,但我现在要说这不是最佳设计。
Dialogue: 0,1:14:08.40,1:14:14.55,中文,,0,0,0,,即使你以前从未编程过cs50，你在屏幕上看到的是一个摘录。
Dialogue: 0,1:14:14.55,1:14:20.25,中文,,0,0,0,,从哪个角度来看，尽管这是存储三个测试成绩的正确方法，但这可能是不好的设计？
Dialogue: 0,1:14:20.25,1:14:26.33,中文,,0,0,0,,这里有什么不好的地方？
Dialogue: 0,1:14:26.33,1:14:28.11,中文,,0,0,0,,是的，总是要做你所做的事情。
Dialogue: 0,1:14:28.11,1:14:31.85,中文,,0,0,0,,推断到四分，五分，五十分。
Dialogue: 0,1:14:31.85,1:14:42.47,中文,,0,0,0,,这不太好设计，因为现在你将有四行代码，五行代码，五十行代码，几乎相同，除了我们在变量末尾正在更新的这个任意数字。
Dialogue: 0,1:14:42.47,1:14:48.70,中文,,0,0,0,,确实，可能会有更好的方法，尽管至少在C中，我们还没有看到这种技术。
Dialogue: 0,1:14:48.70,1:14:52.64,中文,,0,0,0,,但解决方案，从今天开始，将是一种叫做数组的东西。
Dialogue: 0,1:14:52.64,1:15:04.14,中文,,0,0,0,,数组是一种将数据依次存储在计算机内存中的方式，以便你可以轻松访问每个单独的成员。
Dialogue: 0,1:15:04.14,1:15:08.68,中文,,0,0,0,,换句话说，有了数组，你可以像这样做。
Dialogue: 0,1:15:08.68,1:15:15.84,中文,,0,0,0,,不要说int score 1，int score 2，int score 3，为每个赋一个值，你可以先告诉计算机，
Dialogue: 0,1:15:15.84,1:15:24.23,中文,,0,0,0,,请给我一个名叫scores的变量，复数，虽然你可以随便取名，大小为3，每个都将是一个整数。
Dialogue: 0,1:15:24.23,1:15:30.99,中文,,0,0,0,,也就是说，这就是你在C中声明一个足够容纳三个整数的数组的方式。
Dialogue: 0,1:15:30.99,1:15:39.41,中文,,0,0,0,,换句话说，这是告诉计算机的技术方式，给我总共12字节。
Dialogue: 0,1:15:39.41,1:15:42.65,中文,,0,0,0,,整数（int）3次4等于12，所以总共占用12字节。
Dialogue: 0,1:15:42.65,1:15:47.21,中文,,0,0,0,,计算机将会保证它们在内存中依次排列。
Dialogue: 0,1:15:47.21,1:15:49.43,中文,,0,0,0,,这在一会儿会很有用。
Dialogue: 0,1:15:49.43,1:15:51.72,中文,,0,0,0,,让我继续用这个做点有用的事情。
Dialogue: 0,1:15:51.72,1:15:53.86,中文,,0,0,0,,让我存储三个实际scores。
Dialogue: 0,1:15:53.86,1:15:58.70,中文,,0,0,0,,这是我如何在这个数组中存储相同的数值分数的方式。
Dialogue: 0,1:15:58.70,1:16:00.56,中文,,0,0,0,,语法有点不同。
Dialogue: 0,1:16:00.56,1:16:03.08,中文,,0,0,0,,但有一个名为scores的变量。
Dialogue: 0,1:16:03.08,1:16:14.31,中文,,0,0,0,,但如果你想从今天开始去它的第一个位置，你要用方括号并且首先去到位置0，因为在C中事物是0索引的，这样说吧，你从0开始计数。
Dialogue: 0,1:16:14.31,1:16:16.63,中文,,0,0,0,,第一个整数在方括号0位置。
Dialogue: 0,1:16:16.63,1:16:18.03,中文,,0,0,0,,第二个整数在方括号1位置。
Dialogue: 0,1:16:18.03,1:16:19.57,中文,,0,0,0,,第三个整数在括号2。
Dialogue: 0,1:16:19.57,1:16:20.83,中文,,0,0,0,,所以不是1, 2, 3。
Dialogue: 0,1:16:20.83,1:16:22.27,中文,,0,0,0,,它真的是0, 1, 2。
Dialogue: 0,1:16:22.27,1:16:24.07,中文,,0,0,0,,而且这不是你能控制的。
Dialogue: 0,1:16:24.07,1:16:26.51,中文,,0,0,0,,你必须从0开始。
Dialogue: 0,1:16:26.51,1:16:28.51,中文,,0,0,0,,这些行现在。
Dialogue: 0,1:16:28.51,1:16:33.72,中文,,0,0,0,,创建一个大小为3的数组，然后将1, 2, 3的值插入到数组中。
Dialogue: 0,1:16:33.72,1:16:37.78,中文,,0,0,0,,不过现在的好处是，你只需要记住一个变量的名字。
Dialogue: 0,1:16:37.78,1:16:39.38,中文,,0,0,0,,它就叫做 scores。
Dialogue: 0,1:16:39.38,1:16:43.36,中文,,0,0,0,,是的，你需要进入数组来获取单个数值。
Dialogue: 0,1:16:43.36,1:16:46.81,中文,,0,0,0,,你需要使用那些方括号来索引它。
Dialogue: 0,1:16:46.81,1:16:53.11,中文,,0,0,0,,但至少你不需要采用这种魔法般的方法来为每一个数值声明一个单独的变量。
Dialogue: 0,1:16:53.11,1:16:55.18,中文,,0,0,0,,所以让我回到 scores。
Dialogue: 0,1:16:55.18,1:16:56.20,中文,,0,0,0,,这里是点 C。
Dialogue: 0,1:16:56.20,1:16:57.48,中文,,0,0,0,,让我提出这个建议，我这样做。
Dialogue: 0,1:16:57.48,1:17:00.48,中文,,0,0,0,,我只是用同样的想法来做以下的事情。
Dialogue: 0,1:17:00.48,1:17:02.70,中文,,0,0,0,,我去掉这三个单独的整数。
Dialogue: 0,1:17:02.70,1:17:07.82,中文,,0,0,0,,让我创建一个大小为3的整数数组 scores，然后初始化它。
Dialogue: 0,1:17:07.82,1:17:10.95,中文,,0,0,0,,方括号0将像以前一样是72分。
Dialogue: 0,1:17:10.95,1:17:14.89,中文,,0,0,0,,方括号1将是73和scores。
Dialogue: 0,1:17:14.89,1:17:16.83,中文,,0,0,0,,方括号2将是33。
Dialogue: 0,1:17:16.83,1:17:18.91,中文,,0,0,0,,让我去掉那个小点。
Dialogue: 0,1:17:18.91,1:17:26.15,中文,,0,0,0,,现在如果我继续运行这个，输入make scores，
Dialogue: 0,1:17:26.15,1:17:29.17,中文,,0,0,0,,我这里做错了什么？
Dialogue: 0,1:17:29.17,1:17:31.63,中文,,0,0,0,,我想我有点太急了。
Dialogue: 0,1:17:31.63,1:17:36.21,中文,,0,0,0,,让我调大我的终端窗口。
Dialogue: 0,1:17:36.21,1:17:39.00,中文,,0,0,0,,首先，我们专注于第10行。
Dialogue: 0,1:17:39.00,1:17:42.38,中文,,0,0,0,,错误：使用了未声明的标识符score1。
Dialogue: 0,1:17:42.38,1:17:43.62,中文,,0,0,0,,我在这儿做了什么？
Dialogue: 0,1:17:43.62,1:17:44.18,中文,,0,0,0,,太蠢了。
Dialogue: 0,1:17:44.18,1:17:47.58,中文,,0,0,0,,对，是的。
Dialogue: 0,1:17:47.58,1:17:49.40,中文,,0,0,0,,我没有声明score1
Dialogue: 0,1:17:49.40,1:17:50.50,中文,,0,0,0,,我有旧代码，对吧？
Dialogue: 0,1:17:50.50,1:17:53.91,中文,,0,0,0,,我在这里有点超前，甚至不是有意的。
Dialogue: 0,1:17:53.91,1:17:56.13,中文,,0,0,0,,让我再次缩小终端窗口。
Dialogue: 0,1:17:56.13,1:17:57.63,中文,,0,0,0,,我需要完成我的思路。
Dialogue: 0,1:17:57.63,1:18:03.04,中文,,0,0,0,,让我清除我的终端，然后让我将这个更改为scores括号0。
Dialogue: 0,1:18:03.04,1:18:05.88,中文,,0,0,0,,加scores括号1加scores括号2。
Dialogue: 0,1:18:05.88,1:18:09.97,中文,,0,0,0,,它有点啰嗦，因为我有这些方括号，这么说吧。
Dialogue: 0,1:18:09.97,1:18:12.23,中文,,0,0,0,,但我觉得现在我的代码是一致的。
Dialogue: 0,1:18:12.23,1:18:19.93,中文,,0,0,0,,让我现在编译scores点/scores点给我确实是相同的粗略平均值与那些相同的值。
Dialogue: 0,1:18:19.93,1:18:22.21,中文,,0,0,0,,让我继续吧
Dialogue: 0,1:18:22.21,1:18:24.44,中文,,0,0,0,,稍微优化一下。
Dialogue: 0,1:18:24.44,1:18:31.68,中文,,0,0,0,,为了检查你的三个考试成绩的平均分，似乎写一个特殊的程序有点傻。
Dialogue: 0,1:18:31.68,1:18:37.33,中文,,0,0,0,,为什么不让程序动态地询问用户这些分数的平均分呢？
Dialogue: 0,1:18:37.33,1:18:39.21,中文,,0,0,0,,让我这样做。
Dialogue: 0,1:18:39.21,1:18:46.48,中文,,0,0,0,,我们把72去掉，将其改成获取整数，并让用户输入scores。
Dialogue: 0,1:18:46.48,1:18:52.70,中文,,0,0,0,,把33去掉，将73改成获取整数scores，打引号。
Dialogue: 0,1:18:52.70,1:18:57.81,中文,,0,0,0,,最后，去掉33，用获取整数scores代替。
Dialogue: 0,1:18:57.81,1:18:59.77,中文,,0,0,0,,暂时进入cs50的世界。
Dialogue: 0,1:18:59.77,1:19:03.73,中文,,0,0,0,,我需要像以前一样include<cs50.h>。
Dialogue: 0,1:19:03.73,1:19:07.28,中文,,0,0,0,,但我觉得现在它是一个更好的程序，因为现在我可以编译它一次。
Dialogue: 0,1:19:07.28,1:19:08.64,中文,,0,0,0,,我甚至可以与我的朋友们分享它。
Dialogue: 0,1:19:08.64,1:19:12.46,中文,,0,0,0,,现在我们任何人都可以平均三门课程考试的成绩。
Dialogue: 0,1:19:12.46,1:19:17.01,中文,,0,0,0,,他们不需要知道代码或重新编写代码，只需输入他们的成绩。
Dialogue: 0,1:19:17.01,1:19:19.25,中文,,0,0,0,,所以分数计算正常工作。
Dialogue: 0,1:19:19.25,1:19:20.29,中文,,0,0,0,,点/斜线scores。
Dialogue: 0,1:19:20.29,1:19:21.75,中文,,0,0,0,,现在我可以输入任何我想要的东西。
Dialogue: 0,1:19:21.75,1:19:26.45,中文,,0,0,0,,也许是 72 73 33 仍然得到相同的答案。
Dialogue: 0,1:19:26.45,1:19:29.35,中文,,0,0,0,,或者也许我这个学期过得更好。
Dialogue: 0,1:19:29.35,1:19:31.40,中文,,0,0,0,,100 100 也许 99。
Dialogue: 0,1:19:31.40,1:19:33.54,中文,,0,0,0,,现在我们仍然得分相当高。
Dialogue: 0,1:19:33.54,1:19:34.70,中文,,0,0,0,,但现在它是动态的。
Dialogue: 0,1:19:34.70,1:19:35.98,中文,,0,0,0,,现在你不需要源代码。
Dialogue: 0,1:19:35.98,1:19:37.42,中文,,0,0,0,,你不需要重新编译程序。
Dialogue: 0,1:19:37.42,1:19:39.82,中文,,0,0,0,,它只是会一遍又一遍地工作。
Dialogue: 0,1:19:39.82,1:19:46.15,中文,,0,0,0,,但这是为了让我提出如果我想从用户那里获得3个scores，这段代码是正确的。
Dialogue: 0,1:19:46.15,1:19:49.35,中文,,0,0,0,,但这些突出显示的行现在是第六到第九行。
Dialogue: 0,1:19:49.35,1:19:55.23,中文,,0,0,0,,你觉得它们设计得好吗？
Dialogue: 0,1:19:55.23,1:19:55.91,中文,,0,0,0,,是的, 对的。
Dialogue: 0,1:19:55.91,1:19:58.21,中文,,0,0,0,,这就是我们可以使用循环的地方。
Dialogue: 0,1:19:58.21,1:19:58.89,中文,,0,0,0,,为什么呢？
Dialogue: 0,1:19:58.89,1:20:01.48,中文,,0,0,0,,我的意思是, 我明白了, 就是一遍又一遍地写相同的代码。
Dialogue: 0,1:20:01.48,1:20:03.02,中文,,0,0,0,,唯一改变的是数字。
Dialogue: 0,1:20:03.02,1:20:11.83,中文,,0,0,0,,而且你应该有点代码味道了, 因为如果我一遍又一遍地输入相同的东西, 显然这是一个更好地设计的机会。
Dialogue: 0,1:20:11.83,1:20:13.59,中文,,0,0,0,,让我来做这个。
Dialogue: 0,1:20:13.59,1:20:18.61,中文,,0,0,0,,我来先创建一个大小为3的数组。
Dialogue: 0,1:20:18.61,1:20:21.87,中文,,0,0,0,,但是，我要使用我们的老朋友，for循环。
Dialogue: 0,1:20:21.87,1:20:26.66,中文,,0,0,0,,用整数i=0，i=3，i++。
Dialogue: 0,1:20:26.66,1:20:29.68,中文,,0,0,0,,然后在这里，让我做scores。
Dialogue: 0,1:20:29.68,1:20:33.03,中文,,0,0,0,,这是我们以前没有见过的，但有什么直觉吗？
Dialogue: 0,1:20:33.03,1:20:40.92,中文,,0,0,0,,scores括号i，因为它将使用迭代中的0、1或2，无论i是什么。
Dialogue: 0,1:20:40.92,1:20:47.06,中文,,0,0,0,,然后我可以获取一个整数，询问用户scores，而不必一遍又一遍地重复自己。
Dialogue: 0,1:20:47.06,1:20:49.91,中文,,0,0,0,,希望我没有犯任何拼写错误，scores。
Dialogue: 0,1:20:49.91,1:20:50.67,中文,,0,0,0,,一切都好。
Dialogue: 0,1:20:50.67,1:20:53.79,中文,,0,0,0,,./scores，72，73，33。
Dialogue: 0,1:20:53.79,1:20:54.67,中文,,0,0,0,,我们又回到了正常状态。
Dialogue: 0,1:20:54.67,1:20:59.45,中文,,0,0,0,,但是代码现在可以说是更好地设计了，因为现在我实际上没有
Dialogue: 0,1:20:59.45,1:21:05.04,中文,,0,0,0,,我实际上没有硬编码scores，也没有复制粘贴任何代码。
Dialogue: 0,1:21:05.04,1:21:10.64,中文,,0,0,0,,如果我们考虑一下计算机内存中正在发生的事情，从数值上来说基本上是一样的。
Dialogue: 0,1:21:10.64,1:21:17.22,中文,,0,0,0,,但是不是字面上的scores1scores3，只有一个变量。
Dialogue: 0,1:21:17.22,1:21:28.83,中文,,0,0,0,,它是一个叫做scores的数组，但你可以通过使用scores方括号0来获取第一个scores方括号1来获取第二个scores方括号2来获取第3个。
Dialogue: 0,1:21:28.83,1:21:30.03,中文,,0,0,0,,但这是关键。
Dialogue: 0,1:21:30.03,1:21:31.99,中文,,0,0,0,,内存是连续的。
Dialogue: 0,1:21:31.99,1:21:35.59,中文,,0,0,0,,屏幕只有那么大，所以它会循环。
Dialogue: 0,1:21:35.59,1:21:40.26,中文,,0,0,0,,但从物理上来说，内存是从上到下，从左到右都是连续的。
Dialogue: 0,1:21:40.26,1:21:41.00,中文,,0,0,0,,那很重要。
Dialogue: 0,1:21:41.00,1:21:41.68,中文,,0,0,0,,为什么？
Dialogue: 0,1:21:41.68,1:21:48.83,中文,,0,0,0,,因为括号表示这012每个整数都离下一个整数只有一个整数的距离。
Dialogue: 0,1:21:48.83,1:21:50.59,中文,,0,0,0,,它不能随机下降。
Dialogue: 0,1:21:50.59,1:21:54.12,中文,,0,0,0,,它必须连续出现。
Dialogue: 0,1:21:54.12,1:22:00.73,中文,,0,0,0,,现在有了这个范式，我们实际上还能做什么？
Dialogue: 0,1:22:00.73,1:22:07.09,中文,,0,0,0,,结果表明在代码中甚至可以将数组作为参数传递。
Dialogue: 0,1:22:07.09,1:22:11.44,中文,,0,0,0,,让我迅速写个程序，这样你能很快看到。
Dialogue: 0,1:22:11.44,1:22:13.20,中文,,0,0,0,,但让我继续做这个。
Dialogue: 0,1:22:13.20,1:22:15.02,中文,,0,0,0,,我提议一下。
Dialogue: 0,1:22:15.02,1:22:18.16,中文,,0,0,0,,我创建一个函数来进行平均计算。
Dialogue: 0,1:22:18.16,1:22:22.79,中文,,0,0,0,,我要创建一个叫做average的函数，它会返回一个浮点数。
Dialogue: 0,1:22:22.79,1:22:28.61,中文,,0,0,0,,这个函数将接受的参数，让我看看，将会是一个数组。
Dialogue: 0,1:22:28.61,1:22:33.22,中文,,0,0,0,,事实证明，如果你想要输入一组数字，你可以随便取个名字。
Dialogue: 0,1:22:33.22,1:22:41.28,中文,,0,0,0,,这是告诉 C 一个函数不接收一个整数，而是接受整数数组的方式，你不必把它叫做 array(数组）。
Dialogue: 0,1:22:41.28,1:22:42.76,中文,,0,0,0,,我只是为了讨论而这么做。
Dialogue: 0,1:22:42.76,1:22:44.42,中文,,0,0,0,,它可以叫X，可以是数字，
Dialogue: 0,1:22:44.42,1:22:45.56,中文,,0,0,0,,也可以是其他任何东西。
Dialogue: 0,1:22:45.56,1:22:49.29,中文,,0,0,0,,我只是称其为数组，以明确它的含义。
Dialogue: 0,1:22:49.29,1:22:51.83,中文,,0,0,0,,那么，我如何修改下面的代码呢？
Dialogue: 0,1:22:51.83,1:22:55.13,中文,,0,0,0,,我现在打算做的是就这样。
Dialogue: 0,1:22:55.13,1:22:59.13,中文,,0,0,0,,我打算把我手动计算平均值的这段代码删掉。
Dialogue: 0,1:22:59.13,1:23:05.10,中文,,0,0,0,,然后我只需在这里调用平均值函数，将整个scores数组传进去。
Dialogue: 0,1:23:05.10,1:23:07.08,中文,,0,0,0,,这只是一个抽象的例子。
Dialogue: 0,1:23:07.08,1:23:08.90,中文,,0,0,0,,就像现在我有一个叫做平均值的函数。
Dialogue: 0,1:23:08.90,1:23:09.76,中文,,0,0,0,,我不在乎。
Dialogue: 0,1:23:09.76,1:23:12.36,中文,,0,0,0,,一旦我实现它，我就不必记住它是如何工作的。
Dialogue: 0,1:23:12.36,1:23:15.16,中文,,0,0,0,,它只是有点让我的主要代码紧凑了一点。
Dialogue: 0,1:23:15.16,1:23:17.12,中文,,0,0,0,,但我还是得实现这个。
Dialogue: 0,1:23:17.12,1:23:19.34,中文,,0,0,0,,在我的文件后面，让我再重复一次。
Dialogue: 0,1:23:19.34,1:23:27.15,中文,,0,0,0,,在C中唯一可以重复自己一遍又一遍的时间是通过再次输入平均和int数组打开括号。
Dialogue: 0,1:23:27.15,1:23:28.61,中文,,0,0,0,,但现在不是分号。
Dialogue: 0,1:23:28.61,1:23:30.37,中文,,0,0,0,,现在我得实现这个东西。
Dialogue: 0,1:23:30.37,1:23:33.55,中文,,0,0,0,,我可以用很多不同的方法来实现这个。
Dialogue: 0,1:23:33.55,1:23:39.17,中文,,0,0,0,,但是我不知道，在事先，我不能只是这样做。
Dialogue: 0,1:23:39.17,1:23:52.10,中文,,0,0,0,,除非这个程序只会用在三个数字上，否则我不能只是将数组中的第0项与数组中的第1项与数组中的第2项相加。
Dialogue: 0,1:23:52.10,1:23:55.40,中文,,0,0,0,,让我继续做这个。
Dialogue: 0,1:23:55.40,1:23:58.82,中文,,0,0,0,,首先让我提出这里存在一个不良设计。
Dialogue: 0,1:23:58.82,1:24:05.16,中文,,0,0,0,,在我的主函数中，我重复了哪个值？
Dialogue: 0,1:24:05.16,1:24:09.02,中文,,0,0,0,,在突出显示的行中，有什么让你注意到了两次。
Dialogue: 0,1:24:09.02,1:24:10.68,中文,,0,0,0,,是的，数组的长度只有三个。
Dialogue: 0,1:24:10.68,1:24:14.86,中文,,0,0,0,,在第八行、第九行输入数字3，其实也不是什么大问题。
Dialogue: 0,1:24:14.86,1:24:18.42,中文,,0,0,0,,但这正是会让你最终陷入麻烦的捷径。
Dialogue: 0,1:24:18.42,1:24:18.90,中文,,0,0,0,,为什么呢？
Dialogue: 0,1:24:18.90,1:24:22.36,中文,,0,0,0,,因为最终，你或别人会把数组变大或变小。
Dialogue: 0,1:24:22.36,1:24:26.28,中文,,0,0,0,,你并不会意识到，那个相同的数字神奇地出现在两个地方。
Dialogue: 0,1:24:26.28,1:24:29.24,中文,,0,0,0,,而事实上，这就是程序员通常所说的一个魔法数字。
Dialogue: 0,1:24:29.24,1:24:32.14,中文,,0,0,0,,魔法数字就是那种看起来像是神奇地出现的数字。
Dialogue: 0,1:24:32.14,1:24:35.21,中文,,0,0,0,,而且你得守信制度，在这里改了的话，就得在这里改回去。
Dialogue: 0,1:24:35.21,1:24:36.59,中文,,0,0,0,,然后你在这里修改。
Dialogue: 0,1:24:36.59,1:24:43.35,中文,,0,0,0,,就是说，如果责任在程序员身上记住他们在哪里硬编码的话，那结果可能不太好，明白吗？
Dialogue: 0,1:24:43.35,1:24:46.35,中文,,0,0,0,,每次你重复使用一个值像这样，你知道吗？
Dialogue: 0,1:24:46.35,1:24:57.08,中文,,0,0,0,,我们可能应该做上周我们做的事情，就是在我的程序的最顶部声明一个变量，这样很明显它是什么，叫它也许是n，然后将它设置为3。
Dialogue: 0,1:24:57.08,1:25:02.55,中文,,0,0,0,,更好的是，上周我是怎么做的，以确保我不能弄错并意外更改那个值的？
Dialogue: 0,1:25:02.55,1:25:03.49,中文,,0,0,0,,是的，常量。
Dialogue: 0,1:25:03.49,1:25:05.95,中文,,0,0,0,,关键词就是const，简称。
Dialogue: 0,1:25:05.95,1:25:14.64,中文,,0,0,0,,现在我有一个全局变量，全局意味着我可以在任何地方访问它，它叫做n。它是一个整数，它永远是3。
Dialogue: 0,1:25:14.64,1:25:28.35,中文,,0,0,0,,现在我可以稍微改进我的主函数，只需将3更改为n。\N所以现在如果同事意识到，等一下，今年有四个测试，你将n更改为4，重新编译代码，它在其他地方都可以正常工作。
Dialogue: 0,1:25:28.35,1:25:34.05,中文,,0,0,0,,除了在我的平均函数中，让我将它改回3，以保持一致。
Dialogue: 0,1:25:34.05,1:25:43.83,中文,,0,0,0,,现在不能再这样简单地总结事情，然后返回这个除以3。
Dialogue: 0,1:25:43.83,1:25:58.12,中文,,0,0,0,,为什么现在按我定义的方式不起作用呢？
Dialogue: 0,1:25:58.12,1:26:02.87,中文,,0,0,0,,我可能会在意图返回浮点数时返回整数值。
Dialogue: 0,1:26:02.87,1:26:10.89,中文,,0,0,0,,但我想我没问题，因为我使用了一个小技巧，在我的算术表达式中确保至少有一个数字实际上是一个浮点值。
Dialogue: 0,1:26:10.89,1:26:15.82,中文,,0,0,0,,只需添加0.0，确保所有内容都被视为浮点数。
Dialogue: 0,1:26:15.82,1:26:19.34,中文,,0,0,0,,我觉得没问题。
Dialogue: 0,1:26:19.34,1:26:24.48,中文,,0,0,0,,抱歉，低级错误。
Dialogue: 0,1:26:24.48,1:26:25.28,中文,,0,0,0,,没错。
Dialogue: 0,1:26:25.28,1:26:33.62,中文,,0,0,0,,左手和右手在这里没有沟通，我的当前平均实现仍然假定只会有三个测试或其他什么。
Dialogue: 0,1:26:33.62,1:26:34.26,中文,,0,0,0,,等等，等一下。
Dialogue: 0,1:26:34.26,1:26:39.72,中文,,0,0,0,,我刚刚费了点功夫把这个通用化了，
Dialogue: 0,1:26:39.72,1:26:46.58,中文,,0,0,0,,如果我把这个改成4，可能我对我的平均成绩不太满意，因为现在我会完全忽略掉一个测试分数。
Dialogue: 0,1:26:46.58,1:26:48.66,中文,,0,0,0,,让我把这个改回3。
Dialogue: 0,1:26:48.66,1:26:52.22,中文,,0,0,0,,不幸的是，如果它现在是一个变量n，
Dialogue: 0,1:26:52.22,1:26:55.71,中文,,0,0,0,,因此，我实际上有一个可变数量的scores。
Dialogue: 0,1:26:55.71,1:27:00.95,中文,,0,0,0,,我如何计算可变数量的东西的平均值呢？
Dialogue: 0,1:27:00.95,1:27:10.50,中文,,0,0,0,,我是说，那个构建基块是什么？
Dialogue: 0,1:27:10.50,1:27:14.75,中文,,0,0,0,,那为什么不用一个循环，遍历数组，边遍历边把数字加起来呢？
Dialogue: 0,1:27:14.75,1:27:22.45,中文,,0,0,0,,我是说，有点像小学时期，在计算器或纸上求平均数，你就一直把数字加在一起，最后再除以总数。
Dialogue: 0,1:27:22.45,1:27:23.41,中文,,0,0,0,,那么我该怎么做呢？
Dialogue: 0,1:27:23.41,1:27:30.59,中文,,0,0,0,,让我修改我的平均数实现，首先声明一个叫做sum的变量，将它设为0。
Dialogue: 0,1:27:30.59,1:27:33.15,中文,,0,0,0,,这就像我在纸上准备开始数数时的感觉。
Dialogue: 0,1:27:33.15,1:27:36.75,中文,,0,0,0,,或者我的计算器，当你打开它时，通常默认为0。
Dialogue: 0,1:27:36.75,1:27:38.25,中文,,0,0,0,,现在让我来做4。
Dialogue: 0,1:27:38.25,1:27:39.93,中文,,0,0,0,,整数i等于0。
Dialogue: 0,1:27:39.93,1:27:46.98,中文,,0,0,0,,当 i 小于 n 时，我没有这样做，i 自增。
Dialogue: 0,1:27:46.98,1:28:00.36,中文,,0,0,0,,然后在这里，让我继续添加数组位置 i 上的值到当前的总和中。然后在这里，我认为我可以返回 sum 除以 3.0斜杠n，或许是这里。
Dialogue: 0,1:28:00.36,1:28:08.50,中文,,0,0,0,,实际上， 我想我要确保它是一个浮点数。
Dialogue: 0,1:28:08.50,1:28:15.55,中文,,0,0,0,,让我们使用类型转换的技巧，只是为了确保我不会意外短路某人并丢弃小数点后的所有内容。
Dialogue: 0,1:28:15.55,1:28:17.09,中文,,0,0,0,,它就迅速升级了，对吧？
Dialogue: 0,1:28:17.09,1:28:18.87,中文,,0,0,0,,就像平均值变得更复杂了。
Dialogue: 0,1:28:18.87,1:28:22.27,中文,,0,0,0,,不再仅仅是一行代码，而是动态的了。
Dialogue: 0,1:28:22.27,1:28:26.63,中文,,0,0,0,,在这个循环中，我初始化一个名为 some 的变量为0。
Dialogue: 0,1:28:26.63,1:28:30.93,中文,,0,0,0,,然后我继续添加到 some 中，它最初是0。
Dialogue: 0,1:28:30.93,1:28:32.99,中文,,0,0,0,,无论在数组括号中有什么。
Dialogue: 0,1:28:32.99,1:28:36.82,中文,,0,0,0,,具体说，是一个光标0，光标1，光标2。
Dialogue: 0,1:28:36.82,1:28:41.10,中文,,0,0,0,,这给我一个总和，我返回除以总事物的数量。
Dialogue: 0,1:28:41.10,1:28:45.64,中文,,0,0,0,,这可以稍微收紧，记住这只是为了添加事物的语法糖。
Dialogue: 0,1:28:45.64,1:28:48.78,中文,,0,0,0,,我不能使用++，因为那只是字面上添加一个。
Dialogue: 0,1:28:48.78,1:28:52.74,中文,,0,0,0,,但我可以在这里使用加等于。
Dialogue: 0,1:28:52.74,1:28:54.92,中文,,0,0,0,,对这个实现有问题吗？
Dialogue: 0,1:28:54.92,1:29:06.54,中文,,0,0,0,,实际上，唯一的要点，或者最重要的要点，就是这是告诉函数它期望整个数组而不是单个变量（如int或类似的）的语法。
Dialogue: 0,1:29:06.54,1:29:11.63,中文,,0,0,0,,你字面上使用方括号，但里面没有指定长度。
Dialogue: 0,1:29:11.63,1:29:16.85,中文,,0,0,0,,是的？
Dialogue: 0,1:29:16.85,1:29:22.78,中文,,0,0,0,,顶部的变量呢？
Dialogue: 0,1:29:22.78,1:29:23.30,中文,,0,0,0,,好问题。
Dialogue: 0,1:29:23.30,1:29:26.24,中文,,0,0,0,,在顶部我把它定义为什么了，这个变量 n？
Dialogue: 0,1:29:26.24,1:29:33.99,中文,,0,0,0,,如果你要在数组的方括号里使用它，它必须是一个整数。
Dialogue: 0,1:29:33.99,1:29:38.49,中文,,0,0,0,,第10行请注意，不再是3，而是n。
Dialogue: 0,1:29:38.49,1:29:44.00,中文,,0,0,0,,无论n是什么，3个还是4个或其他什么，那就是我将在那个数组中获得的整数数量。
Dialogue: 0,1:29:44.00,1:29:48.45,中文,,0,0,0,,而且它必须是根据数组的定义，放入那些方括号的整数。
Dialogue: 0,1:29:48.45,1:29:50.17,中文,,0,0,0,,这里有一个常见的困惑来源。
Dialogue: 0,1:29:50.17,1:29:56.40,中文,,0,0,0,,当你创建数组，也就是声明它时，你使用方括号像这样，里面放入你想要的元素的总数。
Dialogue: 0,1:29:56.40,1:30:01.54,中文,,0,0,0,,当你随后像我这样使用数组时，不再提及它。
Dialogue: 0,1:30:01.54,1:30:03.22,中文,,0,0,0,,就像你不会一次又一次地提及它一样。
Dialogue: 0,1:30:03.22,1:30:11.79,中文,,0,0,0,,一旦存在一个变量，你还是要用方括号，但你不用在里面用0或1或2或者泛指的数字。
Dialogue: 0,1:30:11.79,1:30:17.11,中文,,0,0,0,,当C设计的时候，他们有时候会用相同的语法来表示两个不同的想法或上下文。
Dialogue: 0,1:30:17.11,1:30:23.32,中文,,0,0,0,,是的。
Dialogue: 0,1:30:23.32,1:30:23.76,中文,,0,0,0,,好问题。
Dialogue: 0,1:30:23.76,1:30:26.60,中文,,0,0,0,,我是不是一定要包括第六行，简短回答是？
Dialogue: 0,1:30:26.60,1:30:26.88,中文,,0,0,0,,是的。
Dialogue: 0,1:30:26.88,1:30:32.90,中文,,0,0,0,,因为我们上周遇到的原因，C或者clang真的是从上到下，从左到右读取你的代码。
Dialogue: 0,1:30:32.90,1:30:43.69,中文,,0,0,0,,如果编译器看到代码中提到了函数average online 16，但你没告诉编译器average是什么，就会在屏幕上报错。
Dialogue: 0,1:30:43.69,1:30:48.67,中文,,0,0,0,,传统的做法是你只需复制粘贴函数的第一行代码。
Dialogue: 0,1:30:48.67,1:30:51.65,中文,,0,0,0,,这就是所谓的原型或声明。
Dialogue: 0,1:30:51.65,1:30:55.80,中文,,0,0,0,,是的。
Dialogue: 0,1:30:55.80,1:30:58.18,中文,,0,0,0,,非常好的问题，也是一个完美的过渡。
Dialogue: 0,1:30:58.18,1:31:01.34,中文,,0,0,0,,如果你不知道数组的大小，是否有库可以使用呢？
Dialogue: 0,1:31:01.34,1:31:01.76,中文,,0,0,0,,没有。
Dialogue: 0,1:31:01.76,1:31:11.19,中文,,0,0,0,,如果你们中有人用过Java或Python或其他编程语言，你实际上可以直接询问这个数组，比如，它有多大？
Dialogue: 0,1:31:11.19,1:31:13.97,中文,,0,0,0,,在C语言中，你和我，程序员，必须记住它。
Dialogue: 0,1:31:13.97,1:31:15.07,中文,,0,0,0,,简短回答，不可以。
Dialogue: 0,1:31:15.07,1:31:17.63,中文,,0,0,0,,没有一个函数会自动帮我们完成这个任务。
Dialogue: 0,1:31:17.63,1:31:21.67,中文,,0,0,0,,事实上，让我提出一个更微妙的说法，这是可以的
Dialogue: 0,1:31:21.67,1:31:25.24,中文,,0,0,0,,如果它们真的是用来配置选项的全局变量。
Dialogue: 0,1:31:25.24,1:31:25.76,中文,,0,0,0,,为什么呢？
Dialogue: 0,1:31:25.76,1:31:32.66,中文,,0,0,0,,把它们放在文件的最顶部很方便，因为所有人，你，你的同事，你的T. A. S. 都会在代码的最上面看到它们。
Dialogue: 0,1:31:32.66,1:31:36.09,中文,,0,0,0,,但你真的不应该在代码的各个地方都使用它们。
Dialogue: 0,1:31:36.09,1:31:40.75,中文,,0,0,0,,如果平均函数本身与那个特殊变量无关，会更好。
Dialogue: 0,1:31:40.75,1:31:45.22,中文,,0,0,0,,我的意思是，你知道如果我真的想要
Dialogue: 0,1:31:45.22,1:31:46.48,中文,,0,0,0,,设计得好的话。
Dialogue: 0,1:31:46.48,1:31:51.64,中文,,0,0,0,,我应该把数组的长度传递给平均函数。
Dialogue: 0,1:31:51.64,1:31:54.29,中文,,0,0,0,,我应该给平均函数一个第二个参数。
Dialogue: 0,1:31:54.29,1:31:57.91,中文,,0,0,0,,我会叫它长度，比如，但我可以随便起个名字。
Dialogue: 0,1:31:57.91,1:32:02.63,中文,,0,0,0,,不是把 N放在我的文件底部，
Dialogue: 0,1:32:02.63,1:32:05.82,中文,,0,0,0,,让我直接用长度来表示。
Dialogue: 0,1:32:05.82,1:32:08.78,中文,,0,0,0,,这是一个细微之处，不必太过纠结。
Dialogue: 0,1:32:08.78,1:32:13.88,中文,,0,0,0,,但现在这只是一个例子，说明了同一个函数可以接受不只一个参数。
Dialogue: 0,1:32:13.88,1:32:19.90,中文,,0,0,0,,但在 C 语言中，你必须自己记住数组的长度。
Dialogue: 0,1:32:19.90,1:32:23.32,中文,,0,0,0,,你不能通过某种语法来询问数组。
Dialogue: 0,1:32:23.32,1:32:26.71,中文,,0,0,0,,在座的各位之中，有谁之前在Java或Python中编写过程序呢？
Dialogue: 0,1:32:26.71,1:32:29.94,中文,,0,0,0,,是的。
Dialogue: 0,1:32:29.94,1:32:35.54,中文,,0,0,0,,（学生问问题中）
Dialogue: 0,1:32:35.54,1:32:36.28,中文,,0,0,0,,好问题。
Dialogue: 0,1:32:36.28,1:32:38.90,中文,,0,0,0,,是不是更好的方式是编写一个函数来计算大小呢？
Dialogue: 0,1:32:38.90,1:32:46.17,中文,,0,0,0,,简短回答不能在C中这样做。一旦你将一个数组传递到C函数中，就无法确定其大小。
Dialogue: 0,1:32:46.17,1:32:50.95,中文,,0,0,0,,如果是类似整数的通用数组，那么有一些特殊情况可以这样做。
Dialogue: 0,1:32:50.95,1:32:57.17,中文,,0,0,0,,总的来说，在C中是不可能的。如果这让你有点沮丧，老实说，这就是为什么更现代的编程语言添加了这个功能。
Dialogue: 0,1:32:57.17,1:32:57.37,中文,,0,0,0,,为什么呢？
Dialogue: 0,1:32:57.37,1:33:03.22,中文,,0,0,0,,因为我在这里所提到的，没有这个信息真的很让人烦恼，现在只是为了确保我没有出错。
Dialogue: 0,1:33:03.22,1:33:07.67,中文,,0,0,0,,让我编译这个成绩的最终版本。
Dialogue: 0,1:33:07.67,1:33:13.94,中文,,0,0,0,,紧张刺激，一切都好，./scores，72、73、33，我们还在继续。
Dialogue: 0,1:33:13.94,1:33:15.70,中文,,0,0,0,,这个版本更加复杂。
Dialogue: 0,1:33:15.70,1:33:18.48,中文,,0,0,0,,就像往常一样，我们会把这个版本放在课程网站上供参考。
Dialogue: 0,1:33:18.48,1:33:30.45,中文,,0,0,0,,不过重点是数组不仅可以用来存储多个值，比如三个或更多，你还可以将它们作为参数传递。
Dialogue: 0,1:33:30.45,1:33:36.08,中文,,0,0,0,,除此之外，让我们简化一下，考虑一下字符的世界。
Dialogue: 0,1:33:36.08,1:33:39.22,中文,,0,0,0,,如果我们只有单字节，那这会把我们引向哪里呢？
Dialogue: 0,1:33:39.22,1:33:44.35,中文,,0,0,0,,这又如何最终帮助我们解决可读性和加密等问题呢？
Dialogue: 0,1:33:44.35,1:33:49.35,中文,,0,0,0,,比如这里，就是三行代码，它们只是简单地存储了三个字符。
Dialogue: 0,1:33:49.35,1:33:50.93,中文,,0,0,0,,你已经可以看出这会导向哪里了。
Dialogue: 0,1:33:50.93,1:33:57.38,中文,,0,0,0,,拥有三个叫做C1、C2、C3的变量显然会因为愚蠢的冗余而变得糟糕。
Dialogue: 0,1:33:57.38,1:34:01.56,中文,,0,0,0,,但要注意，我用单引号像上周一样，因为这些是单个字符。
Dialogue: 0,1:34:01.56,1:34:04.11,中文,,0,0,0,,这在计算机内存中是什么样子？
Dialogue: 0,1:34:04.11,1:34:05.39,中文,,0,0,0,,它看起来有点像这样。
Dialogue: 0,1:34:05.39,1:34:10.65,中文,,0,0,0,,如果我们清除旧的内存，C1，C2，C3可能会最终出现在这里。
Dialogue: 0,1:34:10.65,1:34:12.59,中文,,0,0,0,,也许不会真的在左上角。
Dialogue: 0,1:34:12.59,1:34:14.21,中文,,0,0,0,,这只是一个艺术家的想象。
Dialogue: 0,1:34:14.21,1:34:18.62,中文,,0,0,0,,但C1，C2，C3可能会最终变成这样。
Dialogue: 0,1:34:18.62,1:34:20.10,中文,,0,0,0,,现在，到底有什么？
Dialogue: 0,1:34:20.10,1:34:21.76,中文,,0,0,0,,确实是那3个数字，72，73，33。
Dialogue: 0,1:34:21.76,1:34:28.03,中文,,0,0,0,,但一个字节有多少位？
Dialogue: 0,1:34:28.03,1:34:29.13,中文,,0,0,0,,只有8位。
Dialogue: 0,1:34:29.13,1:34:35.35,中文,,0,0,0,,如果我们看这些字符的二进制表示，每个字符只有8位。
Dialogue: 0,1:34:35.35,1:34:39.12,中文,,0,0,0,,这已经足够存储像72、73、33这样的小数字了。
Dialogue: 0,1:34:39.12,1:34:41.70,中文,,0,0,0,,我们没有涉及Unicode和表情符号之类的东西。
Dialogue: 0,1:34:41.70,1:34:43.00,中文,,0,0,0,,但是重点是一样的。
Dialogue: 0,1:34:43.00,1:34:45.28,中文,,0,0,0,,你不必使用4个字节来存储这些数字。
Dialogue: 0,1:34:45.28,1:34:47.16,中文,,0,0,0,,你可以使用不同的数据类型，比如字符。
Dialogue: 0,1:34:47.16,1:34:51.54,中文,,0,0,0,,而在底层，它确实会为每个数字使用单个字节。
Dialogue: 0,1:34:51.54,1:34:55.85,中文,,0,0,0,,但这并不是我们实现字符串的方式。
Dialogue: 0,1:34:55.85,1:34:59.27,中文,,0,0,0,,当你想说“hi”上周或这周时，我们使用双引号。
Dialogue: 0,1:34:59.27,1:35:02.87,中文,,0,0,0,,然后我们将所有的东西写在一起并使用一个变量，而不是3个。
Dialogue: 0,1:35:02.87,1:35:06.28,中文,,0,0,0,,当我输入David时，我没有一个变量叫D-A-V-I-D。
Dialogue: 0,1:35:06.28,1:35:09.88,中文,,0,0,0,,我只有一个叫做name的变量，它存储了整个东西。
Dialogue: 0,1:35:09.88,1:35:13.30,中文,,0,0,0,,在C语言中，我们一直在谈论这些叫做字符串的东西。
Dialogue: 0,1:35:13.30,1:35:17.65,中文,,0,0,0,,我们迟早会发现，字符串并不一定是它们看起来的样子。
Dialogue: 0,1:35:17.65,1:35:21.25,中文,,0,0,0,,但就目前而言，关于字符串的关键是它们的长度是可变的。
Dialogue: 0,1:35:21.25,1:35:22.05,中文,,0,0,0,,对吧？
Dialogue: 0,1:35:22.05,1:35:28.45,中文,,0,0,0,,它们可以是三个字符高，也可以是五个字符的David，或者任何更小或更大的东西。
Dialogue: 0,1:35:28.45,1:35:33.25,中文,,0,0,0,,那我们如何在最后只剩下我的记忆的情况下实现字符串呢？
Dialogue: 0,1:35:33.25,1:35:42.08,中文,,0,0,0,,这里有一个创建、声明和定义字符串的示例，s就是因为它只是一个简单的字符串，用双引号引起来，高高地，引号括起来。
Dialogue: 0,1:35:42.08,1:35:44.08,中文,,0,0,0,,这在计算机内存中是什么样子？
Dialogue: 0,1:35:44.08,1:35:48.72,中文,,0,0,0,,让我们再次清空它，因为它实际上存储在一个名为s的变量中。
Dialogue: 0,1:35:48.72,1:35:51.00,中文,,0,0,0,,这是我作为艺术家可能会画出来的样子。
Dialogue: 0,1:35:51.00,1:35:54.10,中文,,0,0,0,,总共3个字节，HI感叹号。
Dialogue: 0,1:35:54.10,1:35:56.02,中文,,0,0,0,,但没有C1、C2、C3。
Dialogue: 0,1:35:56.02,1:36:07.05,中文,,0,0,0,,其实，整个东西就是S。但事实证明，一个字符串，有趣的事实是，在底层实际上就是什么呢？
Dialogue: 0,1:36:07.05,1:36:13.24,中文,,0,0,0,,在这方面的引导下，如果在内存中是这样排列的，那么字符串是什么呢？
Dialogue: 0,1:36:13.24,1:36:15.82,中文,,0,0,0,,从字面上看，它只是一组字符。
Dialogue: 0,1:36:15.82,1:36:18.69,中文,,0,0,0,,而我们上周使用字符串时，并不需要了解数组。
Dialogue: 0,1:36:18.69,1:36:21.25,中文,,0,0,0,,这就是，再次说，我们开始摆脱训练轮子的地方。
Dialogue: 0,1:36:21.25,1:36:25.94,中文,,0,0,0,,但是，字符串实际上只是一组字符，例如，HI叹号。
Dialogue: 0,1:36:25.94,1:36:33.14,中文,,0,0,0,,从技术上讲，一个名为s的字符串实际上是一个名为s的变量。
Dialogue: 0,1:36:33.14,1:36:38.15,中文,,0,0,0,,这使你可以使用s括号0来访问第一个字符，如果你想的话，s括号1，s括号2。
Dialogue: 0,1:36:38.15,1:36:47.15,中文,,0,0,0,,实际上，你可以通过将s视为数组来获取单个字符，就像在这种情况下底层确实是一样的。
Dialogue: 0,1:36:47.15,1:36:48.83,中文,,0,0,0,,但这里有个小问题。
Dialogue: 0,1:36:48.83,1:36:51.59,中文,,0,0,0,,你怎么知道字符串在哪里结束呢？
Dialogue: 0,1:36:51.59,1:36:57.12,中文,,0,0,0,,在过去，当我在屏幕上绘制一些整数时，我知道，我宣称，它们总是占用四个字节。
Dialogue: 0,1:36:57.12,1:37:00.32,中文,,0,0,0,,如果我画了一个长整数，它总是占用八个字节。
Dialogue: 0,1:37:00.32,1:37:03.72,中文,,0,0,0,,如果我画了一个字符，它总是占用一个字节。
Dialogue: 0,1:37:03.72,1:37:07.18,中文,,0,0,0,,字符串占用多少字节呢？
Dialogue: 0,1:37:07.18,1:37:08.44,中文,,0,0,0,,我是说，那应该是正确答案。
Dialogue: 0,1:37:08.44,1:37:10.47,中文,,0,0,0,,在这种情况下，好像是3个。
Dialogue: 0,1:37:10.47,1:37:13.71,中文,,0,0,0,,但如果是David，那就是五个字符。
Dialogue: 0,1:37:13.71,1:37:16.21,中文,,0,0,0,,但是数字3放在哪里呢？
Dialogue: 0,1:37:16.21,1:37:17.81,中文,,0,0,0,,数字五放在哪里呢？
Dialogue: 0,1:37:17.81,1:37:20.21,中文,,0,0,0,,这基本上就是进入你的电脑的全部内容。
Dialogue: 0,1:37:20.21,1:37:23.70,中文,,0,0,0,,这就是我们面前的所有积木。
Dialogue: 0,1:37:23.70,1:37:25.48,中文,,0,0,0,,那么3放在哪里呢？
Dialogue: 0,1:37:25.48,1:37:26.56,中文,,0,0,0,,5放在哪里呢？
Dialogue: 0,1:37:26.56,1:37:29.40,中文,,0,0,0,,事实上，你可以用几种不同的方式解决这个问题。
Dialogue: 0,1:37:29.40,1:37:34.35,中文,,0,0,0,,但是人们多年前决定实现字符串的方式确实是一个数组。
Dialogue: 0,1:37:34.35,1:37:42.46,中文,,0,0,0,,但他们在每个这样的字符串数组的末尾添加了一个额外的字节，只是为了明确一个所谓的哨兵值，表示
Dialogue: 0,1:37:42.46,1:37:44.50,中文,,0,0,0,,字符串到此结束。
Dialogue: 0,1:37:44.50,1:37:45.18,中文,,0,0,0,,为什么？
Dialogue: 0,1:37:45.18,1:37:54.56,中文,,0,0,0,,这样，如果计算机内存中有两个字符串，比如'high'和'by'，你就知道一个感叹号后面和下一个字母'B'之间的分界线在哪里。
Dialogue: 0,1:37:54.56,1:37:56.24,中文,,0,0,0,,你需要某种分隔符。
Dialogue: 0,1:37:56.24,1:38:00.43,中文,,0,0,0,,在底层，实际上是这样的。
Dialogue: 0,1:38:00.43,1:38:10.25,中文,,0,0,0,,当你把一个字符串存储在内存中时，当你作为用户输入一个字符串时，如果你输入了3个字符，它将使用3加1等于4个字节。
Dialogue: 0,1:38:10.25,1:38:14.16,中文,,0,0,0,,如果你输入了'David'，它将使用5加1等于6个字节。
Dialogue: 0,1:38:14.16,1:38:14.76,中文,,0,0,0,,为什么？
Dialogue: 0,1:38:14.76,1:38:20.36,中文,,0,0,0,,因为 C 自动在字符串的末尾添加这个特殊的 0。
Dialogue: 0,1:38:20.36,1:38:25.74,中文,,0,0,0,,我用反斜杠0来表示0，因为这就是你如何将0表示为字符，就是一个字符。
Dialogue: 0,1:38:25.74,1:38:28.32,中文,,0,0,0,,但这实际上只是0，我们马上就会看到。
Dialogue: 0,1:38:28.32,1:38:36.27,中文,,0,0,0,,无论何时在内存中有一个字符串，它总是比你自己作为程序员或人类键入的多占用一个字节。
Dialogue: 0,1:38:36.27,1:38:45.31,中文,,0,0,0,,实际上，如果我们再次将其转换，仅供讨论，存储在计算机内存中的内容会是 72、73、33，现在还有一个0。
Dialogue: 0,1:38:45.31,1:38:48.21,中文,,0,0,0,,而计算机，因为 C 以及它的发明方式，
Dialogue: 0,1:38:48.21,1:38:54.71,中文,,0,0,0,,它足够聪明，知道当打印出一个字符串时，它会打印出每个字符，直到看到一个 0。
Dialogue: 0,1:38:54.71,1:38:56.19,中文,,0,0,0,,然后它就停止打印。
Dialogue: 0,1:38:56.19,1:38:58.49,中文,,0,0,0,,特别是，printf知道这是如何工作的。
Dialogue: 0,1:38:58.49,1:39:02.23,中文,,0,0,0,,这就是为什么printf知道何时停止打印的原因。
Dialogue: 0,1:39:02.23,1:39:03.77,中文,,0,0,0,,十进制数并没有那么明了。
Dialogue: 0,1:39:03.77,1:39:05.83,中文,,0,0,0,,通常我们会像这样写字符。
Dialogue: 0,1:39:05.83,1:39:09.23,中文,,0,0,0,,再次强调，反斜杠0只是特殊的符号学。
Dialogue: 0,1:39:09.23,1:39:13.37,中文,,0,0,0,,这是程序员输入的，用来明确表示你并不是在说，hi ! \0。
Dialogue: 0,1:39:13.37,1:39:14.55,中文,,0,0,0,,你在打招呼。
Dialogue: 0,1:39:14.55,1:39:17.32,中文,,0,0,0,,然后它是一个特殊的0，特指这个。
Dialogue: 0,1:39:17.32,1:39:22.24,中文,,0,0,0,,这是80位，表示字符串的结尾。
Dialogue: 0,1:39:22.24,1:39:24.14,中文,,0,0,0,,从技术上讲，就是反斜杠0。
Dialogue: 0,1:39:24.14,1:39:30.32,中文,,0,0,0,,如果你想高级一点，它叫做null，你也遇到过这个，只是我们没有明说。
Dialogue: 0,1:39:30.32,1:39:33.36,中文,,0,0,0,,这是过去几周的同一个查询图。
Dialogue: 0,1:39:33.36,1:39:39.29,中文,,0,0,0,,如果我突出显示这个，它对应的十进制数是0吗？
Dialogue: 0,1:39:39.29,1:39:44.05,中文,,0,0,0,,NUL，这只是程序员说的特殊空字符，全是0位。
Dialogue: 0,1:39:44.05,1:39:46.59,中文,,0,0,0,,这意味着字符串到此结束。
Dialogue: 0,1:39:46.59,1:39:48.44,中文,,0,0,0,,这一切都会自动完成。
Dialogue: 0,1:39:48.44,1:39:53.66,中文,,0,0,0,,你不需要创建这些空字符或0。
Dialogue: 0,1:39:53.66,1:40:00.17,中文,,0,0,0,,到目前为止，有什么问题吗？
Dialogue: 0,1:40:00.17,1:40:01.99,中文,,0,0,0,,这里有什么问题吗？
Dialogue: 0,1:40:01.99,1:40:02.91,中文,,0,0,0,,没有，让我这样做。
Dialogue: 0,1:40:02.91,1:40:05.39,中文,,0,0,0,,等等，我马上回到VS. Code。
Dialogue: 0,1:40:05.39,1:40:07.78,中文,,0,0,0,,而且，咱们实际上可以用一些代码来证实一下。
Dialogue: 0,1:40:07.78,1:40:11.96,中文,,0,0,0,,那我来创建一个叫做high.c的小程序，这样怎么样？
Dialogue: 0,1:40:11.96,1:40:18.72,中文,,0,0,0,,我要include {\s1}，还要include。 我要像往常一样输入main(void)。{\s}
Dialogue: 0,1:40:18.72,1:40:20.98,中文,,0,0,0,,我要做一些简单而有点糟糕的事情。
Dialogue: 0,1:40:20.98,1:40:25.12,中文,,0,0,0,,但是，char c1等于单引号H中的双引号内的H。
Dialogue: 0,1:40:25.12,1:40:32.89,中文,,0,0,0,,字符22等于单引号内的字母I，最后字符C3等于单引号内的感叹号。
Dialogue: 0,1:40:32.89,1:40:34.65,中文,,0,0,0,,现在让我把这个打印出来。
Dialogue: 0,1:40:34.65,1:40:36.95,中文,,0,0,0,,我不能使用%s，因为那不是字符串。
Dialogue: 0,1:40:36.95,1:40:40.45,中文,,0,0,0,,那实际上是3个字符，因为那是我做出的设计决定。
Dialogue: 0,1:40:40.45,1:40:42.01,中文,,0,0,0,,但我可以这样做。
Dialogue: 0,1:40:42.01,1:40:45.92,中文,,0,0,0,,%c, %c, %c，这是我们以前没有见过的。
Dialogue: 0,1:40:45.92,1:40:51.32,中文,,0,0,0,,但%s是字符串，%i是整数，%c确实是字符。
Dialogue: 0,1:40:51.32,1:40:54.20,中文,,0,0,0,,让我在末尾加一个反斜杠 n 以保持整洁。
Dialogue: 0,1:40:54.20,1:40:56.49,中文,,0,0,0,,现在做 c1、c2、c3。
Dialogue: 0,1:40:56.49,1:41:00.35,中文,,0,0,0,,这就像是一个基于字符的字符串打印版本。
Dialogue: 0,1:41:00.35,1:41:01.87,中文,,0,0,0,,让我制造高。
Dialogue: 0,1:41:01.87,1:41:03.49,中文,,0,0,0,,然后让我做点斜杠高。
Dialogue: 0,1:41:03.49,1:41:06.03,中文,,0,0,0,,看起来我使用了 printf 与 %s。
Dialogue: 0,1:41:06.03,1:41:09.86,中文,,0,0,0,,但我非常手动地打印了每个单独的字符。
Dialogue: 0,1:41:09.86,1:41:16.56,中文,,0,0,0,,现在酷的是，一旦你知道字符只是数字，字符串只是字符，你就可以随便瞎弄。
Dialogue: 0,1:41:16.56,1:41:21.08,中文,,0,0,0,,让我把这3个占位符都改成%i。
Dialogue: 0,1:41:21.08,1:41:23.78,中文,,0,0,0,,而且，这也完全没问题。
Dialogue: 0,1:41:23.78,1:41:27.35,中文,,0,0,0,,让我重新运行这个make hi。 点斜杠
Dialogue: 0,1:41:27.35,1:41:31.45,中文,,0,0,0,,实际上，让我做一个小改变，这样我们就可以看到这个。
Dialogue: 0,1:41:31.45,1:41:34.09,中文,,0,0,0,,为了美观起见，让我加上空格。
Dialogue: 0,1:41:34.09,1:41:37.87,中文,,0,0,0,,让我执行make hi， 点斜杠 hi ，然后enter。
Dialogue: 0,1:41:37.87,1:41:44.46,中文,,0,0,0,,看，你现在可以真正看到我在第0周宣称的那些数字确实是在底层发生的。
Dialogue: 0,1:41:44.46,1:41:45.88,中文,,0,0,0,,这不是make字符串的方式。
Dialogue: 0,1:41:45.88,1:41:50.94,中文,,0,0,0,,对于3个字母的单词，需要3个变量，五个字母的单词需要五个变量，这将非常繁琐。
Dialogue: 0,1:41:50.94,1:41:52.92,中文,,0,0,0,,自上周以来，我们一直在使用字符串。
Dialogue: 0,1:41:52.92,1:41:54.60,中文,,0,0,0,,让我们这样做。
Dialogue: 0,1:41:54.60,1:41:59.73,中文,,0,0,0,,字符串s等于引号，双引号，hi。
Dialogue: 0,1:41:59.73,1:42:04.57,中文,,0,0,0,,对于这个，不行，因为有这些训练轮，我需要include<cs50.h>库。
Dialogue: 0,1:42:04.57,1:42:06.62,中文,,0,0,0,,但是我们会在接下来的几周内回到这个问题。
Dialogue: 0,1:42:06.62,1:42:11.77,中文,,0,0,0,,但目前，我要继续创建一个字符串s，名为，引号内的，hi。
Dialogue: 0,1:42:11.77,1:42:17.62,中文,,0,0,0,,我要将它更改为更熟悉的百分比s。然后只是打印出s本身。
Dialogue: 0,1:42:17.62,1:42:19.54,中文,,0,0,0,,当然，这与上周一样。
Dialogue: 0,1:42:19.54,1:42:21.94,中文,,0,0,0,,点斜线高给我完全相同的东西。
Dialogue: 0,1:42:21.94,1:42:24.94,中文,,0,0,0,,但现在，我们正在处理字符串。
Dialogue: 0,1:42:24.94,1:42:27.51,中文,,0,0,0,,但我们如何能够看得更远一些呢？
Dialogue: 0,1:42:27.51,1:42:28.83,中文,,0,0,0,,这样怎么样？
Dialogue: 0,1:42:28.83,1:42:31.75,中文,,0,0,0,,我们进一步研究一下今天的基本知识。
Dialogue: 0,1:42:31.75,1:42:39.16,中文,,0,0,0,,即使s是一个字符串，我也可以用%C打印出它的第一个字符，只需s方括号0。
Dialogue: 0,1:42:39.16,1:42:43.22,中文,,0,0,0,,我也可以用%C打印出它的第二个字符，只需s方括号1。
Dialogue: 0,1:42:43.22,1:42:47.89,中文,,0,0,0,,我可以用%C打印出它的第3个字符，并打印出s方括号2。
Dialogue: 0,1:42:47.89,1:42:52.09,中文,,0,0,0,,这只是从我现在对字符串的理解中逻辑上得出的结论。
Dialogue: 0,1:42:52.09,1:42:54.63,中文,,0,0,0,,正如你注意到的那样，让我来做
Dialogue: 0,1:42:54.63,1:42:58.56,中文,,0,0,0,,让我执行高级操作，点斜线高级，没有视觉变化。
Dialogue: 0,1:42:58.56,1:43:00.68,中文,,0,0,0,,但我现在只是有点摸索。
Dialogue: 0,1:43:00.68,1:43:03.42,中文,,0,0,0,,而且实际上，如果你真的很好奇，让我这样做。
Dialogue: 0,1:43:03.42,1:43:09.80,中文,,0,0,0,,让我把这些改回i，改回i，改回i。让我再添加一个。
Dialogue: 0,1:43:09.80,1:43:14.67,中文,,0,0,0,,因为如果我现在真的很好奇，看看s括号3处有什么。
Dialogue: 0,1:43:14.67,1:43:16.09,中文,,0,0,0,,这是第四个字节。
Dialogue: 0,1:43:16.09,1:43:22.01,中文,,0,0,0,,即使字符串本身是hi，我认为我们可以证实这个null的整个问题。
Dialogue: 0,1:43:22.01,1:43:25.25,中文,,0,0,0,,make高点斜线高回车。
Dialogue: 0,1:43:25.25,1:43:26.37,中文,,0,0,0,,就是这样。
Dialogue: 0,1:43:26.37,1:43:29.60,中文,,0,0,0,,如果你真的想要深入了解字符串，你上周就可以做这个了。
Dialogue: 0,1:43:29.60,1:43:36.58,中文,,0,0,0,,但是目前，它只是揭示了底层问题，而不是这些字符串的问题。
Dialogue: 0,1:43:36.58,1:43:41.48,中文,,0,0,0,,是的。
Dialogue: 0,1:43:41.48,1:43:46.12,中文,,0,0,0,,为什么我们需要方括号？
Dialogue: 0,1:43:46.12,1:43:47.14,中文,,0,0,0,,为什么你不需要括号？
Dialogue: 0,1:43:47.14,1:43:47.92,中文,,0,0,0,,好问题。
Dialogue: 0,1:43:47.92,1:43:51.64,中文,,0,0,0,,为什么第六行我不需要括号？
Dialogue: 0,1:43:51.64,1:43:53.37,中文,,0,0,0,,因为S是一个字符串。
Dialogue: 0,1:43:53.37,1:44:00.36,中文,,0,0,0,,几周后我们会看到S在内部实际上是作为一个数组实现的。
Dialogue: 0,1:44:00.36,1:44:02.26,中文,,0,0,0,,但这对你来说是自动发生的。
Dialogue: 0,1:44:02.26,1:44:06.80,中文,,0,0,0,,你可以把S当作一个变量名，不需要方括号。
Dialogue: 0,1:44:06.80,1:44:13.87,中文,,0,0,0,,当你有一个整数的集合或者你手动创建一个字符、双精度浮点数、浮点数或其他类型的集合时，你会使用方括号。
Dialogue: 0,1:44:13.87,1:44:14.91,中文,,0,0,0,,但字符串是特殊的。
Dialogue: 0,1:44:14.91,1:44:15.53,中文,,0,0,0,,为什么呢？
Dialogue: 0,1:44:15.53,1:44:19.15,中文,,0,0,0,,我是说，每个程序你写的似乎都使用文本字符串的形式。
Dialogue: 0,1:44:19.15,1:44:19.67,中文,,0,0,0,,我们是人类。
Dialogue: 0,1:44:19.67,1:44:21.83,中文,,0,0,0,,我们喜欢文本，不仅仅是数字之类的。
Dialogue: 0,1:44:21.83,1:44:28.68,中文,,0,0,0,,在C和许多其他语言中，这被特别对待。
Dialogue: 0,1:44:28.68,1:44:31.48,中文,,0,0,0,,其他问题在这里。
Dialogue: 0,1:44:31.48,1:44:33.56,中文,,0,0,0,,现在，让我们再添加一个字符串到混合中。
Dialogue: 0,1:44:33.56,1:44:38.81,中文,,0,0,0,,不只是说HI，为什么不考虑一个程序版本，可以同时说"HI"和"BYE"呢？
Dialogue: 0,1:44:38.81,1:44:48.59,中文,,0,0,0,,而且我现在声称，那个反斜杠0，也就是空字符，会变得更加重要，如果内存中有两个字符串的话，这样C语言知道如何区分它们。
Dialogue: 0,1:44:48.59,1:44:51.14,中文,,0,0,0,,让我暂时把这两行代码删除掉。
Dialogue: 0,1:44:51.14,1:44:55.56,中文,,0,0,0,,让我重新创建一个字符串s，等于引号，引号，双引号，HI。
Dialogue: 0,1:44:55.56,1:44:56.76,中文,,0,0,0,,再给我自己来一个。
Dialogue: 0,1:44:56.76,1:44:59.80,中文,,0,0,0,,因为我只是在玩，所以我会选择非常简短的变量名。
Dialogue: 0,1:44:59.80,1:45:04.48,中文,,0,0,0,,字符串 t 等于引号叹号。
Dialogue: 0,1:45:04.48,1:45:06.52,中文,,0,0,0,,然后让我打印它们两个出来。
Dialogue: 0,1:45:06.52,1:45:21.82,中文,,0,0,0,,我来继续打印% s 斜杠 n 逗号 s 然后打印 f % s 斜杠 n 然后 t。所以就是对这两个变量的非常简单的演示。
Dialogue: 0,1:45:21.82,1:45:22.66,中文,,0,0,0,,点斜杠hi。
Dialogue: 0,1:45:22.66,1:45:26.28,中文,,0,0,0,,当然，它会连续打印出两行。
Dialogue: 0,1:45:26.28,1:45:27.96,中文,,0,0,0,,底层到底发生了什么呢？
Dialogue: 0,1:45:27.96,1:45:29.95,中文,,0,0,0,,让我们回到计算机的高速存储器。
Dialogue: 0,1:45:29.95,1:45:32.09,中文,,0,0,0,,我认为它会差不多一样。
Dialogue: 0,1:45:32.09,1:45:36.19,中文,,0,0,0,,我要声明的是在左上角，然后是反斜杠0。
Dialogue: 0,1:45:36.19,1:45:43.18,中文,,0,0,0,,这很重要，因为它很可能会在那里结束，从视觉上看，这是因为我绘制了这个字节格的方式。
Dialogue: 0,1:45:43.18,1:45:44.46,中文,,0,0,0,,但它是连续的。
Dialogue: 0,1:45:44.46,1:45:49.19,中文,,0,0,0,,B，Y，E，感叹号，空格，又叫反斜杠0。
Dialogue: 0,1:45:49.19,1:45:58.73,中文,,0,0,0,,这对于printf来说现在很有帮助，因为现在printf知道从那个特殊的0字符开始和结束。
Dialogue: 0,1:45:58.73,1:46:00.39,中文,,0,0,0,,但是现在我们也可以四处瞧瞧。
Dialogue: 0,1:46:00.39,1:46:01.52,中文,,0,0,0,,在这里还能做什么呢？
Dialogue: 0,1:46:01.52,1:46:03.04,中文,,0,0,0,,这个怎么样？
Dialogue: 0,1:46:03.04,1:46:05.91,中文,,0,0,0,,我可以进入我的代码吗？
Dialogue: 0,1:46:05.91,1:46:07.46,中文,,0,0,0,,回到BS代码。
Dialogue: 0,1:46:07.46,1:46:15.42,中文,,0,0,0,,让我来说点像这样的话，如果我有两个这样的字符串，我们把它们放进一个数组里吧。
Dialogue: 0,1:46:15.42,1:46:20.42,中文,,0,0,0,,让我们在数组里做这种嵌套的数组，就像梦中的场景一样。
Dialogue: 0,1:46:20.42,1:46:23.14,中文,,0,0,0,,所以字符串单词，括号2。
Dialogue: 0,1:46:23.14,1:46:28.07,中文,,0,0,0,,给我一个包含两个字符串的数组是我在这里的代码中说的，尽管我们还没有用字符串做过。
Dialogue: 0,1:46:28.07,1:46:29.51,中文,,0,0,0,,我们只是用整数做过。
Dialogue: 0,1:46:29.51,1:46:30.95,中文,,0,0,0,,现在让我这样做。
Dialogue: 0,1:46:30.95,1:46:32.73,中文,,0,0,0,,第一个单词，也就是说。
Dialogue: 0,1:46:32.73,1:46:35.73,中文,,0,0,0,,单词括号0，将等于，就像以前一样，hi。
Dialogue: 0,1:46:35.73,1:46:40.06,中文,,0,0,0,,现在单词括号1将等于，引用，按字节计算。
Dialogue: 0,1:46:40.06,1:46:41.14,中文,,0,0,0,,所以这样做。
Dialogue: 0,1:46:41.14,1:46:43.16,中文,,0,0,0,,现在我做了完全相同的事情。
Dialogue: 0,1:46:43.16,1:46:48.80,中文,,0,0,0,,但再次，我只是避免在我的代码中有S T Q R等各种不同的变量。
Dialogue: 0,1:46:48.80,1:46:52.97,中文,,0,0,0,,我现在只是将它们视为一个字符串数组。
Dialogue: 0,1:46:52.97,1:46:54.63,中文,,0,0,0,,我怎么改我的代码下面呢？
Dialogue: 0,1:46:54.63,1:46:57.53,中文,,0,0,0,,如果我想打印第一个单词，我做单词方括号0。
Dialogue: 0,1:46:57.53,1:46:59.98,中文,,0,0,0,,如果我想打印第二个单词，我做单词方括号1。
Dialogue: 0,1:46:59.98,1:47:04.12,中文,,0,0,0,,现在这个练习没什么用，因为这只是让我的代码变得更复杂。
Dialogue: 0,1:47:04.12,1:47:09.70,中文,,0,0,0,,但是，它确实允许我们四处查找，看看发生了什么，因为这里有个你好和再见。
Dialogue: 0,1:47:09.70,1:47:10.83,中文,,0,0,0,,但是，看这个。
Dialogue: 0,1:47:10.83,1:47:14.71,中文,,0,0,0,,如果我真的想很酷，我可以这样做。
Dialogue: 0,1:47:14.71,1:47:19.85,中文,,0,0,0,,让我们打印出%c、%c、%c、换行符。
Dialogue: 0,1:47:19.85,1:47:24.42,中文,,0,0,0,,然后在这里，%c、%c、%c、%c。
Dialogue: 0,1:47:24.42,1:47:25.94,中文,,0,0,0,,所以这样有四个。
Dialogue: 0,1:47:25.94,1:47:28.64,中文,,0,0,0,,现在，事情变得有趣起来。
Dialogue: 0,1:47:28.64,1:47:30.42,中文,,0,0,0,,Words是一个字符串数组。
Dialogue: 0,1:47:30.42,1:47:35.14,中文,,0,0,0,,但是，如果我可以再说一次，什么是字符串？ 字符数组。
Dialogue: 0,1:47:35.14,1:47:36.94,中文,,0,0,0,,所以只需使用相同的逻辑。
Dialogue: 0,1:47:36.94,1:47:41.20,中文,,0,0,0,,如果words是一个字符串数组，你可以通过words括号0来获取第一个字符串。
Dialogue: 0,1:47:41.20,1:47:44.65,中文,,0,0,0,,如何获取第一个字符串中的第一个字符？
Dialogue: 0,1:47:44.65,1:47:46.11,中文,,0,0,0,,words括号 0,括号 0。
Dialogue: 0,1:47:46.11,1:47:49.03,中文,,0,0,0,,words括号 0、括号 1 。
Dialogue: 0,1:47:49.03,1:47:52.39,中文,,0,0,0,,最后，words括号 0、括号 2 。
Dialogue: 0,1:47:52.39,1:47:57.66,中文,,0,0,0,,现在这儿，words括号 1 ，但第1个字符在这儿，方括号0。
Dialogue: 0,1:47:57.66,1:48:00.56,中文,,0,0,0,,words括号 1 ，第2个字符在这儿，方括号1。
Dialogue: 0,1:48:00.56,1:48:03.17,中文,,0,0,0,,words括号 1 ，第3个字符在这儿，方括号2。
Dialogue: 0,1:48:03.17,1:48:03.73,中文,,0,0,0,,哎呀。
Dialogue: 0,1:48:03.73,1:48:07.95,中文,,0,0,0,,第3个字符就在这里，方括号1 还有一个括号，第四个字符就在这里，方括号3。
Dialogue: 0,1:48:07.95,1:48:09.17,中文,,0,0,0,,这不是人们编程的方式。
Dialogue: 0,1:48:09.17,1:48:10.83,中文,,0,0,0,,这只是为了演示的缘故。
Dialogue: 0,1:48:10.83,1:48:13.04,中文,,0,0,0,,天呐，已经如此繁琐冗长了。
Dialogue: 0,1:48:13.04,1:48:23.17,中文,,0,0,0,,但如果我现在做高点斜杠高点，我就像手动重新发明%s，如果我忘了它的存在，只使用%c。
Dialogue: 0,1:48:23.17,1:48:26.05,中文,,0,0,0,,但你确实可以以这种方式操纵一个数组。
Dialogue: 0,1:48:26.05,1:48:37.27,中文,,0,0,0,,因为字符串是字符数组，所以你可以这样操作字符串来回答任何问题，对于这种语法来说现在是合适的。
Dialogue: 0,1:48:37.27,1:48:39.63,中文,,0,0,0,,这里有任何问题吗？
Dialogue: 0,1:48:39.63,1:48:39.97,中文,,0,0,0,,没有？
Dialogue: 0,1:48:39.97,1:48:40.29,中文,,0,0,0,,好的。
Dialogue: 0,1:48:40.29,1:48:45.85,中文,,0,0,0,,那么，让我们继续提出我们可能以前没有遇到的一些其他问题的解决方案。
Dialogue: 0,1:48:45.85,1:48:49.23,中文,,0,0,0,,首先，让我们快速看一下底层发生了什么。
Dialogue: 0,1:48:49.23,1:49:01.04,中文,,0,0,0,,这里就是我们在屏幕上离开的地方，然后又回到了这里，这就是我是如何处理这些东西的，s[0 1 2 3]，然后t[0 1 2 3 4]。
Dialogue: 0,1:49:01.04,1:49:05.04,中文,,0,0,0,,但是真的，一旦我把它们放进一个数组，整个情景就变成了这样。
Dialogue: 0,1:49:05.04,1:49:07.44,中文,,0,0,0,,方括号零是整个高的单词。
Dialogue: 0,1:49:07.44,1:49:08.70,中文,,0,0,0,,方括号1 就是整个 by。
Dialogue: 0,1:49:08.70,1:49:20.79,中文,,0,0,0,,但是如果我真的深入其中，开始索引到这些字符串中的单个字符，我所做的只是使用新的语法来表示这里相同的值。
Dialogue: 0,1:49:20.79,1:49:28.84,中文,,0,0,0,,在我们继续前进之前，对于这些表示有什么问题吗？
Dialogue: 0,1:49:28.84,1:49:29.60,中文,,0,0,0,,没有。
Dialogue: 0,1:49:29.60,1:49:33.51,中文,,0,0,0,,是的.
Dialogue: 0,1:49:33.51,1:49:42.84,中文,,0,0,0,,换行符占用空间吗？
Dialogue: 0,1:49:42.84,1:49:48.95,中文,,0,0,0,,就printf而言，它是这样的，但是我没有在我的字符串中存储反斜杠n。
Dialogue: 0,1:49:48.95,1:49:53.43,中文,,0,0,0,,Printf正在手动处理那个东西。
Dialogue: 0,1:49:53.43,1:50:00.68,中文,,0,0,0,,那么我们继续考虑一下，如何解决这些字符串现在出现的一些问题。
Dialogue: 0,1:50:00.68,1:50:02.68,中文,,0,0,0,,假设我，我们来做这个。
Dialogue: 0,1:50:02.68,1:50:04.58,中文,,0,0,0,,让我回到VS Code这里。
Dialogue: 0,1:50:04.58,1:50:10.17,中文,,0,0,0,,然后让我继续打开一个新文件，叫做，比如，length.c。
Dialogue: 0,1:50:10.17,1:50:16.15,中文,,0,0,0,,让我们想一想，我可能如何实际确定字符串的长度，这与数组的长度不同。
Dialogue: 0,1:50:16.15,1:50:20.21,中文,,0,0,0,,我之前说过，你无法动态确定数组的长度。
Dialogue: 0,1:50:20.21,1:50:27.02,中文,,0,0,0,,但我可以确定字符串的长度，因为这与空字符的实现细节有关。
Dialogue: 0,1:50:27.02,1:50:28.52,中文,,0,0,0,,所以让我继续做这个。
Dialogue: 0,1:50:28.52,1:50:32.12,中文,,0,0,0,,在这个第二个程序中，让我include <cs50.h>。
Dialogue: 0,1:50:32.12,1:50:35.28,中文,,0,0,0,,和以前一样，让我include {\s1}。{\s}
Dialogue: 0,1:50:35.28,1:50:38.36,中文,,0,0,0,,让我这样做，int main(void)。
Dialogue: 0,1:50:38.36,1:50:40.94,中文,,0,0,0,,首先，我要做的事情就是从用户那里获取一个字符串。
Dialogue: 0,1:50:40.94,1:50:43.27,中文,,0,0,0,,我总是会询问用户他们的名字。
Dialogue: 0,1:50:43.27,1:50:46.43,中文,,0,0,0,,我会调用get_string然后说，你叫什么名字？
Dialogue: 0,1:50:46.43,1:50:48.43,中文,,0,0,0,,像往常一样，加个问号。
Dialogue: 0,1:50:48.43,1:50:55.91,中文,,0,0,0,,在这里，如果我想要弄清楚这个字符串的长度并在屏幕上打印出名字，打印出长度。
Dialogue: 0,1:50:55.91,1:50:59.83,中文,,0,0,0,,我可以以类似于平均值的方式来做这个，我正在累积某些东西。
Dialogue: 0,1:50:59.83,1:51:02.75,中文,,0,0,0,,让我继续，将end初始化为0。
Dialogue: 0,1:51:02.75,1:51:04.83,中文,,0,0,0,,让我给自己
Dialogue: 0,1:51:04.83,1:51:08.68,中文,,0,0,0,,不是for循环，因为我事先不知道有多长。
Dialogue: 0,1:51:08.68,1:51:11.79,中文,,0,0,0,,但如果我这样做呢？
Dialogue: 0,1:51:11.79,1:51:20.67,中文,,0,0,0,,while 括号name方括号n，不等于单引号反斜杠0。
Dialogue: 0,1:51:20.67,1:51:25.57,中文,,0,0,0,,目前的语法看起来有点疯狂，但它只是这些各种构建块的结晶。
Dialogue: 0,1:51:25.57,1:51:29.17,中文,,0,0,0,,让我把这个思想完成一下，n++。
Dialogue: 0,1:51:29.17,1:51:35.87,中文,,0,0,0,,在这里，让我们用 printf 和 %i 打印出 n 的值。
Dialogue: 0,1:51:35.87,1:51:43.38,中文,,0,0,0,,所以我说，这将显示我输入的任何字符串的长度，无论是 high、by、David 还是其他任何东西。
Dialogue: 0,1:51:43.38,1:51:44.98,中文,,0,0,0,,我将一个变量初始化为0。
Dialogue: 0,1:51:44.98,1:51:47.52,中文,,0,0,0,,这很好，因为这通常是计数的起点。
Dialogue: 0,1:51:47.52,1:51:50.98,中文,,0,0,0,,当名字的第一个字符不等于反斜杠0时。
Dialogue: 0,1:51:50.98,1:51:51.94,中文,,0,0,0,,这句话是什么意思？
Dialogue: 0,1:51:51.94,1:51:59.53,中文,,0,0,0,,如果名字是用户输入的字符串，而名字只是一个数组，正如你所指出的，名字的第一个字符将是第一个字符。
Dialogue: 0,1:51:59.53,1:52:00.63,中文,,0,0,0,,我问的问题是，
Dialogue: 0,1:52:00.63,1:52:03.71,中文,,0,0,0,,第一个字符不等于反斜杠0吗？
Dialogue: 0,1:52:03.71,1:52:06.33,中文,,0,0,0,,如果我输入David D，它不是。
Dialogue: 0,1:52:06.33,1:52:08.89,中文,,0,0,0,,所以我继续，我在末尾加1。
Dialogue: 0,1:52:08.89,1:52:11.12,中文,,0,0,0,,然后我要检查name括号1。
Dialogue: 0,1:52:11.12,1:52:16.02,中文,,0,0,0,,如果我输入David，name括号1会是a，不等于反斜杠0。
Dialogue: 0,1:52:16.02,1:52:17.38,中文,,0,0,0,,所以它会再次执行。
Dialogue: 0,1:52:17.38,1:52:18.86,中文,,0,0,0,,再来一遍，再来一遍。
Dialogue: 0,1:52:18.86,1:52:29.89,中文,,0,0,0,,但总共还要走五步，才能到达 DAVID 意识到，等一下，那是一个反斜杠 n 后面的字节。循环结束，我打印出总长度。
Dialogue: 0,1:52:29.89,1:52:34.95,中文,,0,0,0,,一般来说，数组不包含这个空字符。 但字符串不同。
Dialogue: 0,1:52:34.95,1:52:39.77,中文,,0,0,0,,再次强调，与我们迄今为止讨论的所有其他数据类型相比，字符串是特殊的。
Dialogue: 0,1:52:39.77,1:52:42.16,中文,,0,0,0,,不过，我可以怎么样，
Dialogue: 0,1:52:42.16,1:52:47.28,中文,,0,0,0,,比如以不同的方式来做这件事，实际上，让我们将这部分提取为一个函数，就像我通常做的那样。
Dialogue: 0,1:52:47.28,1:52:50.54,中文,,0,0,0,,不过，你知道怎么来实现它吗？
Dialogue: 0,1:52:50.54,1:52:57.27,中文,,0,0,0,,事实证明字符串如此常见，有很多其他人在以前解决了这些问题。
Dialogue: 0,1:52:57.27,1:53:00.55,中文,,0,0,0,,实际上，C语言中有一个完整的字符串库。
Dialogue: 0,1:53:00.55,1:53:04.38,中文,,0,0,0,,通过一个叫做 string.h 的头文件来使用它。
Dialogue: 0,1:53:04.38,1:53:08.30,中文,,0,0,0,,而 string.h 实际上是一个与字符串相关的函数库。
Dialogue: 0,1:53:08.30,1:53:16.53,中文,,0,0,0,,事实上，在 cs50 的 C 语言手册中，你可以查看 string.h 函数，至少是我们推荐的最有用的函数。
Dialogue: 0,1:53:16.53,1:53:20.81,中文,,0,0,0,,尤其是，如果你在那里仔细查看，你会发现有一个叫做 strlen 的函数。
Dialogue: 0,1:53:20.81,1:53:22.14,中文,,0,0,0,,这意味着字符串长度。
Dialogue: 0,1:53:22.14,1:53:25.84,中文,,0,0,0,,之所以被命名得如此简洁，只是因为它比字符串长度更容易输入。
Dialogue: 0,1:53:25.84,1:53:28.86,中文,,0,0,0,,但 strlen 告诉你字符串的长度。
Dialogue: 0,1:53:28.86,1:53:30.96,中文,,0,0,0,,那么在我的代码中，我该如何使用它呢？
Dialogue: 0,1:53:30.96,1:53:34.03,中文,,0,0,0,,事实证明我可以简化这个相当多。
Dialogue: 0,1:53:34.03,1:53:40.01,中文,,0,0,0,,让我摆脱我的循环，不再手动计数，像这样做。
Dialogue: 0,1:53:40.01,1:53:45.70,中文,,0,0,0,,int n = strlen(name);（整数 n 等于 strlen 括号名字）
Dialogue: 0,1:53:45.70,1:53:54.56,中文,,0,0,0,,现在我就像以前一样用printf，%I反斜杠n，输出n的值。但但目前有个bug。
Dialogue: 0,1:53:54.56,1:53:58.54,中文,,0,0,0,,我忘了什么了吗？
Dialogue: 0,1:53:58.54,1:54:01.72,中文,,0,0,0,,是的，我必须在屏幕顶部包含头文件。
Dialogue: 0,1:54:01.72,1:54:03.14,中文,,0,0,0,,让我在代码的顶部。
Dialogue: 0,1:54:03.14,1:54:10.99,中文,,0,0,0,,让我也在我的文件顶部include {\s1}，以便C知道实际上strlen是存在的。{\s}
Dialogue: 0,1:54:10.99,1:54:14.27,中文,,0,0,0,,让我继续像以前一样make长度。
Dialogue: 0,1:54:14.27,1:54:18.77,中文,,0,0,0,,点斜杠长度，或者说，实际上第一次，你叫什么名字？
Dialogue: 0,1:54:18.77,1:54:19.57,中文,,0,0,0,,D-A-V-I-D.
Dialogue: 0,1:54:19.57,1:54:22.39,中文,,0,0,0,,希望的话，我会看到，实际上是五个。
Dialogue: 0,1:54:22.39,1:54:27.11,中文,,0,0,0,,相比之下，如果我再次运行它，然后输入高感叹号，现在我看到3个。
Dialogue: 0,1:54:27.11,1:54:29.85,中文,,0,0,0,,所以 Strlen 只是那个库中的一个功能。
Dialogue: 0,1:54:29.85,1:54:30.91,中文,,0,0,0,,还有很多。
Dialogue: 0,1:54:30.91,1:54:35.85,中文,,0,0,0,,实际上，可能在将来会有用的另一个库是这个，ctype.h。
Dialogue: 0,1:54:35.85,1:54:40.50,中文,,0,0,0,,关于C数据类型和其中许多有用的函数。
Dialogue: 0,1:54:40.50,1:54:49.44,中文,,0,0,0,,例如，如果你在在线手册页上查看它的文档，你会发现有一些函数可以用来解决这类问题。
Dialogue: 0,1:54:49.44,1:54:52.51,中文,,0,0,0,,让我来提个建议。
Dialogue: 0,1:54:52.51,1:54:53.73,中文,,0,0,0,,我看看。
Dialogue: 0,1:54:53.73,1:54:59.24,中文,,0,0,0,,我们来做一个涉及示例
Dialogue: 0,1:54:59.24,1:55:06.79,中文,,0,0,0,,要不要检查一下某个东西是大写还是小写，并将它转换成大写？
Dialogue: 0,1:55:06.79,1:55:11.09,中文,,0,0,0,,让我回到VS Code，编写一个名为uppercase.c的程序。
Dialogue: 0,1:55:11.09,1:55:15.34,中文,,0,0,0,,在这个文件中，我将开始包括现在，一如既往地，cs50.h。
Dialogue: 0,1:55:15.34,1:55:20.52,中文,,0,0,0,,我将包括stdio.h，还要加一个
Dialogue: 0,1:55:20.52,1:55:24.01,中文,,0,0,0,,在其中，即string.h现在2。
Dialogue: 0,1:55:24.01,1:55:26.49,中文,,0,0,0,,这样我可以随时访问事物的长度。
Dialogue: 0,1:55:26.49,1:55:28.77,中文,,0,0,0,,主要的main(void)接下来。
Dialogue: 0,1:55:28.77,1:55:34.43,中文,,0,0,0,,然后在我的主要功能中，我会继续声明一个名为s的字符串。我将像以前一样调用get_string。
Dialogue: 0,1:55:34.43,1:55:38.18,中文,,0,0,0,,然后我会继续要求用户输入一个名为before的字符串。
Dialogue: 0,1:55:38.18,1:55:39.66,中文,,0,0,0,,我想要做一个前后对比。
Dialogue: 0,1:55:39.66,1:55:41.50,中文,,0,0,0,,无论用户输入什么，都是前面的。
Dialogue: 0,1:55:41.50,1:55:44.98,中文,,0,0,0,,但之后我想强制将所有内容都变成大写。
Dialogue: 0,1:55:44.98,1:55:46.82,中文,,0,0,0,,现在让我在这个循环中，
Dialogue: 0,1:55:46.82,1:55:48.68,中文,,0,0,0,,在这里做这个。
Dialogue: 0,1:55:48.68,1:55:53.96,中文,,0,0,0,,让我打印大写的F，后面跟着引号，这样我们可以在屏幕上看到这个。
Dialogue: 0,1:55:53.96,1:55:55.72,中文,,0,0,0,,然后让我做四个。
Dialogue: 0,1:55:55.72,1:55:57.97,中文,,0,0,0,,然后我得到0。
Dialogue: 0,1:55:57.97,1:56:02.67,中文,,0,0,0,,i<strlen(s); i++。
Dialogue: 0,1:56:02.67,1:56:03.63,中文,,0,0,0,,我要做什么？
Dialogue: 0,1:56:03.63,1:56:17.12,中文,,0,0,0,,我将从字符串的左边从0开始迭代每个字符，直到但不包括s的长度。我如何检查是否为小写字母，以便将其强制转换为大写？
Dialogue: 0,1:56:17.12,1:56:27.62,中文,,0,0,0,,事实证明，如果s中位置i的字符大于或等于大写字母A，我可以这样做。
Dialogue: 0,1:56:27.62,1:56:33.31,中文,,0,0,0,,和，和，意味着和，而不是或，我们在过去看到过。
Dialogue: 0,1:56:33.31,1:56:42.02,中文,,0,0,0,,s[i] 小于或等于小写字母z。这在英语中从逻辑上讲确实是小写字母。
Dialogue: 0,1:56:42.02,1:56:44.98,中文,,0,0,0,,怎么现在把它转成大写，这个字符？
Dialogue: 0,1:56:44.98,1:56:48.16,中文,,0,0,0,,我其实可以直接打印出相同的字符。
Dialogue: 0,1:56:48.16,1:56:52.38,中文,,0,0,0,,但是在这里这不是答案，因为那并没有改变值。
Dialogue: 0,1:56:52.38,1:56:54.37,中文,,0,0,0,,那我能做什么呢？
Dialogue: 0,1:56:54.37,1:56:57.39,中文,,0,0,0,,让我这边快速拉一下。
Dialogue: 0,1:56:57.39,1:57:00.03,中文,,0,0,0,,之前的ASCII表。
Dialogue: 0,1:57:00.03,1:57:03.35,中文,,0,0,0,,看看我们是否能够得到一些见解。
Dialogue: 0,1:57:03.35,1:57:10.12,中文,,0,0,0,,如果我打开相同的ASCII表，假设人类输入了小写字母a，那就是97。
Dialogue: 0,1:57:10.12,1:57:11.82,中文,,0,0,0,,哪个字母？
Dialogue: 0,1:57:11.82,1:57:18.92,中文,,0,0,0,,我想将它转换成大写字母A。根据上面的说明，我要将97转换成哪个数字？ 0。
Dialogue: 0,1:57:18.92,1:57:21.07,中文,,0,0,0,,所以65，我们回到大写A。
Dialogue: 0,1:57:21.07,1:57:23.05,中文,,0,0,0,,如果用户输入小写字母b呢？
Dialogue: 0,1:57:23.05,1:57:27.45,中文,,0,0,0,,我想把98的值改成66，依此类推。
Dialogue: 0,1:57:27.45,1:57:30.19,中文,,0,0,0,,任何快速的数学计算可以告诉我们它们有多远？
Dialogue: 0,1:57:30.19,1:57:31.69,中文,,0,0,0,,所以它总是32。
Dialogue: 0,1:57:31.69,1:57:35.91,中文,,0,0,0,,就像大写字母到小写字母总是非常好的设计一样。
Dialogue: 0,1:57:35.91,1:57:38.15,中文,,0,0,0,,相隔32个。
Dialogue: 0,1:57:38.15,1:57:38.97,中文,,0,0,0,,那么这是什么意思？
Dialogue: 0,1:57:38.97,1:57:42.68,中文,,0,0,0,,我认为我们之前看到，在底层，一个字符只是一个数字。
Dialogue: 0,1:57:42.68,1:57:44.34,中文,,0,0,0,,你当然可以对它进行算术运算。
Dialogue: 0,1:57:44.34,1:57:48.36,中文,,0,0,0,,再说一次，如果你了解这些低级原语，如果我这样做会怎样呢？
Dialogue: 0,1:57:48.36,1:57:57.82,中文,,0,0,0,,无论 s 括号 i  是什么，如果我知道在第 13 行它是小写，我想要加还是减 32 呢？
Dialogue: 0,1:57:57.82,1:58:04.12,中文,,0,0,0,,我想要减，因为我想从，比如，97 减到 65，或者 98 减到 66。
Dialogue: 0,1:58:04.12,1:58:06.59,中文,,0,0,0,,确实，如果你进行一些快速的数学计算，那会给你 32。
Dialogue: 0,1:58:06.59,1:58:16.47,中文,,0,0,0,,只需要将字符视为数字，减去 32，并使用 %c 打印，我认为，将小写转换为大写。
Dialogue: 0,1:58:16.47,1:58:26.46,中文,,0,0,0,,如果你现在快进到现实世界，Microsoft Word 或 Google Docs，\N如果你曾经选择过强制将东西转换为大写或小写的菜单选项，从字面上讲，这就是 Microsoft 和 Google 所做的。
Dialogue: 0,1:58:26.46,1:58:33.92,中文,,0,0,0,,他们遍历文档中的每个字符，检查是否是小写，如果是，就从中减去 32 并显示给你新值。
Dialogue: 0,1:58:33.92,1:58:36.70,中文,,0,0,0,,如果它不是小写字母怎么办？
Dialogue: 0,1:58:36.70,1:58:46.75,中文,,0,0,0,,我觉得如果我只是想强制将所有字母变成大写，那么我可以简单地将当前字母原样打印出来，那个字母就是s括号i。
Dialogue: 0,1:58:46.75,1:58:49.53,中文,,0,0,0,,现在让我转成大写。
Dialogue: 0,1:58:49.53,1:58:50.85,中文,,0,0,0,,希望没有错误。
Dialogue: 0,1:58:50.85,1:58:52.53,中文,,0,0,0,,点斜杠大写。
Dialogue: 0,1:58:52.53,1:58:57.02,中文,,0,0,0,,现在我会输入David，D是大写，其他都是小写。
Dialogue: 0,1:58:57.02,1:59:00.16,中文,,0,0,0,,但现在之后的版本是David.
Dialogue: 0,1:59:00.16,1:59:01.26,中文,,0,0,0,,一个美学上的错误。
Dialogue: 0,1:59:01.26,1:59:06.08,中文,,0,0,0,,注意这里我忘记包括，只是为了美观起见，在末尾加一个反斜杠n。
Dialogue: 0,1:59:06.08,1:59:06.64,中文,,0,0,0,,没问题。
Dialogue: 0,1:59:06.64,1:59:07.76,中文,,0,0,0,,我会加上的。
Dialogue: 0,1:59:07.76,1:59:08.92,中文,,0,0,0,,让我修复我的错误。
Dialogue: 0,1:59:08.92,1:59:10.74,中文,,0,0,0,,大写。
Dialogue: 0,1:59:10.74,1:59:13.63,中文,,0,0,0,,点 斜杠 大写 输入 D. A. B. I. D. 输入。
Dialogue: 0,1:59:13.63,1:59:14.31,中文,,0,0,0,,然后就这样。
Dialogue: 0,1:59:14.31,1:59:22.23,中文,,0,0,0,,我故意在后面多加了一个空格，只是为了让它们看起来整齐，尽管之前和之后的字母数是不同的。
Dialogue: 0,1:59:22.23,1:59:34.10,中文,,0,0,0,,然后就这样，关于强制将某事转换为大写的实现有问题，这本身并不是很具启发性，但现在代表了你如何利用这些底层原语。
Dialogue: 0,1:59:34.10,1:59:36.36,中文,,0,0,0,,问题。
Dialogue: 0,1:59:36.36,1:59:38.69,中文,,0,0,0,,坦率地说，这真的很繁琐。
Dialogue: 0,1:59:38.69,1:59:40.59,中文,,0,0,0,,我的天啊，微软谷歌每个人吗？
Dialogue: 0,1:59:40.59,1:59:43.65,中文,,0,0,0,,你必须逐字写出这段代码才能做一些简单的事情。
Dialogue: 0,1:59:43.65,1:59:49.32,中文,,0,0,0,,不，这就是为什么我们有图书馆，而现在越来越多的是为了解决问题集，项目等等。
Dialogue: 0,1:59:49.32,1:59:52.06,中文,,0,0,0,,你只是更经常地使用现成的库。
Dialogue: 0,1:59:52.06,1:59:56.14,中文,,0,0,0,,它是为了解决其他人肯定也遇到过的问题。
Dialogue: 0,1:59:56.14,1:59:58.13,中文,,0,0,0,,那么我现在怎么使用这个？
Dialogue: 0,1:59:58.13,2:00:01.39,中文,,0,0,0,,库C类型点H。让我回到我的代码。
Dialogue: 0,2:00:01.39,2:00:04.69,中文,,0,0,0,,让我把这个包括在我的头文件中。
Dialogue: 0,2:00:04.69,2:00:06.37,中文,,0,0,0,,我倾向于这样，这样我可以轻松地浏览事情。
Dialogue: 0,2:00:06.37,2:00:09.33,中文,,0,0,0,,我倾向于按字母顺序排列我的标题，但这并非绝对必要。
Dialogue: 0,2:00:09.33,2:00:13.93,中文,,0,0,0,,但这让我一眼就能意识到，我是不是忘了加上我现在需要的东西？
Dialogue: 0,2:00:13.93,2:00:15.69,中文,,0,0,0,,让我继续进行这个操作。
Dialogue: 0,2:00:15.69,2:00:23.79,中文,,0,0,0,,原来，如果你阅读C类型库的文档，有一个名为if的函数，非常奇妙。
Dialogue: 0,2:00:23.79,2:00:33.90,中文,,0,0,0,,is lower，它以字符作为参数，基本上是s括号i。如果它返回true，一个布尔值，如果你愿意的话，我就会强制它转换为小写。
Dialogue: 0,2:00:33.90,2:00:36.69,中文,,0,0,0,,但我不再需要做这个数学了。
Dialogue: 0,2:00:36.69,2:00:40.67,中文,,0,0,0,,原来，在C类型库中还有一个叫toupper的函数。
Dialogue: 0,2:00:40.67,2:00:50.50,中文,,0,0,0,,它接受一个字符作为输入，比如 s[i]，\N然后它会为你做数学运算，这样你就可以抽象掉那个 32 的东西，只需知道别人已经为你解决了那个问题。
Dialogue: 0,2:00:50.50,2:00:55.28,中文,,0,0,0,,否则，我可以在下面保持我的代码不变，因为我不会改变其他任何东西。
Dialogue: 0,2:00:55.28,2:01:03.82,中文,,0,0,0,,如果我现在做大写然后点斜杠大写，D-A-V-I-D 只有一个大写的 D，现在它仍然有效。
Dialogue: 0,2:01:03.82,2:01:07.66,中文,,0,0,0,,但是如果你进一步阅读文档，你会发现 toupper 是智能的。
Dialogue: 0,2:01:07.66,2:01:13.23,中文,,0,0,0,,如果你向 toupper 传递一个小写字符，它显然会通过进行数学运算将其转换为大写。
Dialogue: 0,2:01:13.23,2:01:21.65,中文,,0,0,0,,但是如果你向 toupper 传递一个已经是大写的字符，你会发现文档告诉你它会保持不变。
Dialogue: 0,2:01:21.65,2:01:23.93,中文,,0,0,0,,我可以把所有这些都整理紧凑。
Dialogue: 0,2:01:23.93,2:01:26.03,中文,,0,0,0,,我可以去掉整个 else 部分。
Dialogue: 0,2:01:26.03,2:01:28.15,中文,,0,0,0,,我可以去掉整个 if 部分。
Dialogue: 0,2:01:28.15,2:01:33.60,中文,,0,0,0,,可以说现在实现一个同样正确但设计更好的程序。
Dialogue: 0,2:01:33.60,2:01:34.40,中文,,0,0,0,,为什么？
Dialogue: 0,2:01:34.40,2:01:38.00,中文,,0,0,0,,代码行数更少，更易阅读，出错的可能性更低。
Dialogue: 0,2:01:38.00,2:01:43.30,中文,,0,0,0,,假设库是正确的，现在对我来说更容易更快地编写代码。
Dialogue: 0,2:01:43.30,2:01:50.22,中文,,0,0,0,,如果我现在最后一次，大写，回车，点斜杠大写，然后输入我的名字，仍然有效。
Dialogue: 0,2:01:50.22,2:01:57.86,中文,,0,0,0,,但是现在请注意，我们已经将代码减少到更少的行数，尽管现在使用了这个额外的库。
Dialogue: 0,2:01:57.86,2:02:03.99,中文,,0,0,0,,那么，关于我们是如何做到这一点的问题。
Dialogue: 0,2:02:03.99,2:02:09.05,中文,,0,0,0,,虽然这段代码，我敢说，是正确的，但还不一定设计得很好。
Dialogue: 0,2:02:09.05,2:02:18.09,中文,,0,0,0,,事实上，在这个当前实现中，有一行代码，一个函数调用，比它需要的要低效。
Dialogue: 0,2:02:18.09,2:02:24.49,中文,,0,0,0,,请允许我注意到这里，第10行，在这里我们调用strlen。
Dialogue: 0,2:02:24.49,2:02:29.19,中文,,0,0,0,,但是我们是在这个for循环内调用它，具体地说是在条件语句内。
Dialogue: 0,2:02:29.19,2:02:33.87,中文,,0,0,0,,为什么这可能不是最好的主意呢？
Dialogue: 0,2:02:33.87,2:02:36.81,中文,,0,0,0,,字符串s的长度有变吗？
Dialogue: 0,2:02:36.81,2:02:38.85,中文,,0,0,0,,我的意思是，肯定不会在这个循环的范围内发生变化。
Dialogue: 0,2:02:38.85,2:02:45.30,中文,,0,0,0,,在这里，我们在第10、11、12和13行的for循环中，每次迭代都问同样的问题。
Dialogue: 0,2:02:45.30,2:02:48.52,中文,,0,0,0,,s的长度是多少？
Dialogue: 0,2:02:48.52,2:02:52.74,中文,,0,0,0,,而且反过来，即使我们得到相同的答案，我们每次都在调用strlen。
Dialogue: 0,2:02:52.74,2:02:59.65,中文,,0,0,0,,我敢说这里可能有一个更好的解决方案，就是在我的代码中更早地找出s的长度，也许声明一个变量。
Dialogue: 0,2:02:59.65,2:03:02.55,中文,,0,0,0,,或者做一些在语法上更加优雅的事情。
Dialogue: 0,2:03:02.55,2:03:13.44,中文,,0,0,0,,在这样的循环中，一个非常常见的设计不仅仅是声明一个像i这样的变量，还要实际声明一个第二个变量，比如n，其中n只是一些数字。
Dialogue: 0,2:03:13.44,2:03:24.70,中文,,0,0,0,,将n设置为s的长度。但在这个条件内，而不是一次又一次地调用s的strlen，我现在可以做什么呢？
Dialogue: 0,2:03:24.70,2:03:32.72,中文,,0,0,0,,我可以相反地将i与n本身进行比较，因为n现在只会在初始化时计算一次，就像i初始化为0一样。
Dialogue: 0,2:03:32.72,2:03:37.34,中文,,0,0,0,,此后，我们将比较i（在变化）与n（不会变）的值。
Dialogue: 0,2:03:37.34,2:03:40.40,中文,,0,0,0,,因此，从设计上来说，这会稍微更加高效。
Dialogue: 0,2:03:40.40,2:03:47.27,中文,,0,0,0,,现在, 话虽如此, 一个好的编译器也可以识别到有这个优化可能性, 也许会为我们完成。
Dialogue: 0,2:03:47.27,2:03:54.11,中文,,0,0,0,,但是, 现在, 最好养成习惯, 最好培养出记忆肌肉, 去做出那些更好的设计决策。
Dialogue: 0,2:03:54.11,2:03:59.73,中文,,0,0,0,,对我们是如何做到这一点有什么问题吗。
Dialogue: 0,2:03:59.73,2:04:00.17,中文,,0,0,0,,好的。
Dialogue: 0,2:04:00.17,2:04:03.27,中文,,0,0,0,,今天的最后几个基本构件。
Dialogue: 0,2:04:03.27,2:04:16.19,中文,,0,0,0,,我们开始讨论clang使用的命令行参数,也就是你在提示符下输入的命令之后的任何内容, 无论是make, clang, 还是Linux中的CD。
Dialogue: 0,2:04:16.19,2:04:21.27,中文,,0,0,0,,在命令之后的任何单词或者像短横线-O这样的神秘东西都是命令行参数。
Dialogue: 0,2:04:21.27,2:04:22.95,中文,,0,0,0,,这是一个命令的输入。
Dialogue: 0,2:04:22.95,2:04:27.42,中文,,0,0,0,,它与函数参数不同，因为函数参数当然是函数的输入。
Dialogue: 0,2:04:27.42,2:04:28.32,中文,,0,0,0,,但是概念是一样的。
Dialogue: 0,2:04:28.32,2:04:31.12,中文,,0,0,0,,在提示符后的美元符号后，它只是不同的语法。
Dialogue: 0,2:04:31.12,2:04:41.96,中文,,0,0,0,,事实证明，命令行参数是你现在可以通过访问提示后的单词在自己的程序中使用的东西。
Dialogue: 0,2:04:41.96,2:04:45.46,中文,,0,0,0,,让我提议我们按照以下方式发明这个。
Dialogue: 0,2:04:45.46,2:04:49.80,中文,,0,0,0,,让我提议我们在这里切换回VS Code。
Dialogue: 0,2:04:49.80,2:04:53.62,中文,,0,0,0,,我会在这里打开一个叫做 greet.c 的新文件。
Dialogue: 0,2:04:53.62,2:04:57.19,中文,,0,0,0,,在 greet.c 中会有一个非常简单的程序来向用户打招呼。
Dialogue: 0,2:04:57.19,2:05:02.35,中文,,0,0,0,,如果我们上周写过这个的话，我们会这样做，包括 cs50.h。
Dialogue: 0,2:05:02.35,2:05:06.39,中文,,0,0,0,,然后包括标准 io.h。
Dialogue: 0,2:05:06.39,2:05:08.37,中文,,0,0,0,,然后 int main(void)。
Dialogue: 0,2:05:08.37,2:05:16.10,中文,,0,0,0,,然后我们可能会做一些简单的事情，比如 string 名称 等于 获取 字符串，引号里写 '你叫什么名字？'。
Dialogue: 0,2:05:16.10,2:05:21.48,中文,,0,0,0,,然后我们会打印出来，像往常一样，hello，逗号，% s，然后插入那个名字。
Dialogue: 0,2:05:21.48,2:05:26.60,中文,,0,0,0,,这就是我们已经实现过很多次的同一个程序，只是为了确保它能正常工作。
Dialogue: 0,2:05:26.60,2:05:29.16,中文,,0,0,0,,尽管，不是完全相同的程序。
Dialogue: 0,2:05:29.16,2:05:31.16,中文,,0,0,0,,分号放错位置了。
Dialogue: 0,2:05:31.16,2:05:32.86,中文,,0,0,0,,现在这就是同一个程序了。
Dialogue: 0,2:05:32.86,2:05:35.37,中文,,0,0,0,,所以运行 greet 点 斜杠 greet。
Dialogue: 0,2:05:35.37,2:05:36.81,中文,,0,0,0,,然后我会输入我的名字。
Dialogue: 0,2:05:36.81,2:05:37.51,中文,,0,0,0,,hello，David。
Dialogue: 0,2:05:37.51,2:05:39.29,中文,,0,0,0,,所以我们现在回到那里了。
Dialogue: 0,2:05:39.29,2:05:41.77,中文,,0,0,0,,这个程序有什么可能有点烦人的地方呢？
Dialogue: 0,2:05:41.77,2:05:49.10,中文,,0,0,0,,如果我输入其他东西，比如Carter，然后按回车，你知道的，我必须运行程序，等待提示，输入我的名字，然后按回车。
Dialogue: 0,2:05:49.10,2:05:50.06,中文,,0,0,0,,而且这样也可以。
Dialogue: 0,2:05:50.06,2:05:53.04,中文,,0,0,0,,但想象一下，如果每个程序都像这样工作，就像Make一样。
Dialogue: 0,2:05:53.04,2:05:54.62,中文,,0,0,0,,假设你只能输入Make。
Dialogue: 0,2:05:54.62,2:05:55.76,中文,,0,0,0,,然后等待提示。
Dialogue: 0,2:05:55.76,2:05:57.62,中文,,0,0,0,,然后你输入你想创建的程序的名称。
Dialogue: 0,2:05:57.62,2:05:58.82,中文,,0,0,0,,然后按下回车键。
Dialogue: 0,2:05:58.82,2:06:05.37,中文,,0,0,0,,或者更糟的是，在Linux中，当你需要改变目录时，就像你可能为问题集一所做的那样，如果你不得不输入CD，回车键。
Dialogue: 0,2:06:05.37,2:06:07.89,中文,,0,0,0,,现在输入你想要切换到的文件夹的名称，回车键。
Dialogue: 0,2:06:07.89,2:06:09.85,中文,,0,0,0,,我的意思是，它只会减慢生活的节奏。
Dialogue: 0,2:06:09.85,2:06:11.65,中文,,0,0,0,,它很快就会变得令人讨厌。
Dialogue: 0,2:06:11.65,2:06:16.19,中文,,0,0,0,,因此，命令行参数只让你一次表达你的整个思想。
Dialogue: 0,2:06:16.19,2:06:18.19,中文,,0,0,0,,我怎么做呢？
Dialogue: 0,2:06:18.19,2:06:25.72,中文,,0,0,0,,那么，如果我想在我的代码中表示命令行参数的概念，我可以像这样做。
Dialogue: 0,2:06:25.72,2:06:34.99,中文,,0,0,0,,我可以，第一次，去掉这个void，这意味着今天起，这个程序不接受命令行参数。
Dialogue: 0,2:06:34.99,2:06:37.81,中文,,0,0,0,,然后我可以把它改成这样。
Dialogue: 0,2:06:37.81,2:06:43.54,中文,,0,0,0,,整数，argc，字符串，argv，带括号。
Dialogue: 0,2:06:43.54,2:06:46.34,中文,,0,0,0,,现在它确实有点神秘，让我放大一下。
Dialogue: 0,2:06:46.34,2:06:49.60,中文,,0,0,0,,但我想现在我们或许可以推断出正在发生什么。
Dialogue: 0,2:06:49.60,2:06:54.36,中文,,0,0,0,,如果主函数现在的输入不是void，这意味着它不带参数。
Dialogue: 0,2:06:54.36,2:06:59.49,中文,,0,0,0,,这里的关键是现在主函数将以某种方式接受命令行参数。
Dialogue: 0,2:06:59.49,2:07:05.31,中文,,0,0,0,,你猜argv是什么，或者将会是什么吗？
Dialogue: 0,2:07:05.31,2:07:08.44,中文,,0,0,0,,这可能代表什么？
Dialogue: 0,2:07:08.44,2:07:11.40,中文,,0,0,0,,这是一个字符串数组，对吧，通过语法的方式。
Dialogue: 0,2:07:11.40,2:07:15.54,中文,,0,0,0,,是吗？
Dialogue: 0,2:07:15.54,2:07:16.03,中文,,0,0,0,,确切地说。
Dialogue: 0,2:07:16.03,2:07:19.99,中文,,0,0,0,,这将是你在提示符上键入的所有字符，或者确切地说，你在提示符上键入的所有单词。
Dialogue: 0,2:07:19.99,2:07:24.49,中文,,0,0,0,,argc作为一个整数，有什么猜测吗？
Dialogue: 0,2:07:24.49,2:07:26.43,中文,,0,0,0,,参数。
Dialogue: 0,2:07:26.43,2:07:30.29,中文,,0,0,0,,Count通常是它的代表，尽管从技术上讲，你可以称呼这些东西为任何东西。
Dialogue: 0,2:07:30.29,2:07:35.98,中文,,0,0,0,,但这是一种约定，因为我之前声称数组不会跟踪它们自己的长度。
Dialogue: 0,2:07:35.98,2:07:44.79,中文,,0,0,0,,如果你想知道在你的程序名称之后，人们在提示符上键入了多少单词，你不仅需要知道单词数组，还需要知道长度。
Dialogue: 0,2:07:44.79,2:07:48.63,中文,,0,0,0,,对于该数组，你可以通过Strlen计算出字符串的长度。
Dialogue: 0,2:07:48.63,2:07:55.10,中文,,0,0,0,,但你无法弄清楚字符串数组的长度，也就是人类输入的单词集合。
Dialogue: 0,2:07:55.10,2:07:56.76,中文,,0,0,0,,那我现在怎么使用这个？
Dialogue: 0,2:07:56.76,2:07:59.18,中文,,0,0,0,,让我继续做这个。
Dialogue: 0,2:07:59.18,2:08:07.79,中文,,0,0,0,,让我继续修改这个程序，只是为了打印F引号括号内的Hello,逗号。
Dialogue: 0,2:08:07.79,2:08:11.81,中文,,0,0,0,,%s反斜杠n，然后argv括号1。
Dialogue: 0,2:08:11.81,2:08:14.95,中文,,0,0,0,,这并不是我代码的最佳版本，但这是我的第一个版本。
Dialogue: 0,2:08:14.95,2:08:16.69,中文,,0,0,0,,greet。
Dialogue: 0,2:08:16.69,2:08:21.19,中文,,0,0,0,,现在让我一次性运行 ./greet David。
Dialogue: 0,2:08:21.19,2:08:22.17,中文,,0,0,0,,输入。
Dialogue: 0,2:08:22.17,2:08:23.41,中文,,0,0,0,,hello，David。
Dialogue: 0,2:08:23.41,2:08:25.91,中文,,0,0,0,,现在让我再次运行它 ./greet Carter。
Dialogue: 0,2:08:25.91,2:08:27.67,中文,,0,0,0,,输入。 hello，Carter。
Dialogue: 0,2:08:27.67,2:08:32.33,中文,,0,0,0,,你知道，这只是个微小的改进，但我不必等待获取字符串来提示我按回车键。
Dialogue: 0,2:08:32.33,2:08:34.54,中文,,0,0,0,,这只是将事情加快两倍。
Dialogue: 0,2:08:34.54,2:08:37.10,中文,,0,0,0,,少输入一个命令。
Dialogue: 0,2:08:37.10,2:08:39.42,中文,,0,0,0,,但我故意加了括号。
Dialogue: 0,2:08:39.42,2:08:41.48,中文,,0,0,0,,但RV的开始是什么？
Dialogue: 0,2:08:41.48,2:08:44.76,中文,,0,0,0,,那就应该是括号0。
Dialogue: 0,2:08:44.76,2:08:45.92,中文,,0,0,0,,那是什么？
Dialogue: 0,2:08:45.92,2:08:47.78,中文,,0,0,0,,虽然这有时会有用，但现在不需要。
Dialogue: 0,2:08:47.78,2:08:48.96,中文,,0,0,0,,目前来说，不需要。
Dialogue: 0,2:08:48.96,2:08:52.90,中文,,0,0,0,,假设我重新编译我的代码，然后现在运行这个程序。
Dialogue: 0,2:08:52.90,2:08:54.25,中文,,0,0,0,,greet David。
Dialogue: 0,2:08:54.25,2:08:59.63,中文,,0,0,0,,有人想猜猜寄存器0中是什么吗？
Dialogue: 0,2:08:59.63,2:09:01.36,中文,,0,0,0,,再说一遍。
Dialogue: 0,2:09:01.36,2:09:02.16,中文,,0,0,0,,greet。
Dialogue: 0,2:09:02.16,2:09:03.04,中文,,0,0,0,,进入。
Dialogue: 0,2:09:03.04,2:09:04.72,中文,,0,0,0,,hello，斜杠greet。
Dialogue: 0,2:09:04.72,2:09:15.01,中文,,0,0,0,,如果你想让你的程序像《盗梦空间》一样，去查找自己的名称，或者至少查找它在终端命令行中的执行方式，你可以查看 argv[0]
Dialogue: 0,2:09:15.01,2:09:16.49,中文,,0,0,0,,可能没那么有用。
Dialogue: 0,2:09:16.49,2:09:21.89,中文,,0,0,0,,可能更好的是从方括号1开始看起，这是程序名后的第一个词。
Dialogue: 0,2:09:21.89,2:09:23.53,中文,,0,0,0,,如果有更多的话，我也可以这样做。
Dialogue: 0,2:09:23.53,2:09:27.85,中文,,0,0,0,,RV括号让我加入第2个%s怎么样？
Dialogue: 0,2:09:27.85,2:09:29.62,中文,,0,0,0,,让我重新编译greet。
Dialogue: 0,2:09:29.62,2:09:33.74,中文,,0,0,0,,让我执行点斜杠greetDavid Malin输入。
Dialogue: 0,2:09:33.74,2:09:37.28,中文,,0,0,0,,现在也可以接受提示中的两个单词了。
Dialogue: 0,2:09:37.28,2:09:40.08,中文,,0,0,0,,如果我真的想在这个方面聪明一些，我可以像这样做，尽管如此。
Dialogue: 0,2:09:40.08,2:09:44.94,中文,,0,0,0,,如果参数的数量A. K. A. R. C等于等于2
Dialogue: 0,2:09:44.94,2:09:58.59,中文,,0,0,0,,那么假设人只输入了他们的名字，然后打印hello，逗号，%s，换行符，然后argv括号1。
Dialogue: 0,2:09:58.59,2:10:10.10,中文,,0,0,0,,如果人类没有提供确切的两个参数，程序的名称和他们自己的名字，\N那就打印出一个默认值吧，以防他们忘记了自己的名字或者输入了两个名字或三个名字。
Dialogue: 0,2:10:10.10,2:10:15.43,中文,,0,0,0,,我们就用“hello，world”作为默认，然后忽略人类输入的内容。
Dialogue: 0,2:10:15.43,2:10:20.91,中文,,0,0,0,,如果我重新编译这个“make greet”，我可以执行“./greet”再输入David。
Dialogue: 0,2:10:20.91,2:10:22.17,中文,,0,0,0,,哎呀。
Dialogue: 0,2:10:22.17,2:10:23.29,中文,,0,0,0,,抱歉。
Dialogue: 0,2:10:23.29,2:10:24.93,中文,,0,0,0,,我漏掉了什么吗？
Dialogue: 0,2:10:24.93,2:10:25.29,中文,,0,0,0,,是的。
Dialogue: 0,2:10:25.29,2:10:27.97,中文,,0,0,0,,所以这是一个新手错误。
Dialogue: 0,2:10:27.97,2:10:28.37,中文,,0,0,0,,好的。
Dialogue: 0,2:10:28.37,2:10:32.73,中文,,0,0,0,,再次greet点斜线greet大卫进入。
Dialogue: 0,2:10:32.73,2:10:34.23,中文,,0,0,0,,那是我的hello，David。
Dialogue: 0,2:10:34.23,2:10:37.75,中文,,0,0,0,,但如果我忽略我的名字，我只得到通用的，就像默认值一样。
Dialogue: 0,2:10:37.75,2:10:41.86,中文,,0,0,0,,如果我有点好奇，然后我输入两个名字，然后我也被忽略了。
Dialogue: 0,2:10:41.86,2:10:42.04,中文,,0,0,0,,为什么？
Dialogue: 0,2:10:42.04,2:10:45.00,中文,,0,0,0,,因为我还没有构建对 argc 3的支持
Dialogue: 0,2:10:45.00,2:10:46.16,中文,,0,0,0,,我可以做任何我想做的事情。
Dialogue: 0,2:10:46.16,2:10:50.82,中文,,0,0,0,,但现在我们可以访问这些构建块。
Dialogue: 0,2:10:50.82,2:10:52.76,中文,,0,0,0,,我还能做什么？
Dialogue: 0,2:10:52.76,2:10:57.81,中文,,0,0,0,,事实证明，现在我们可能有一些最终特性要执行。
Dialogue: 0,2:10:57.81,2:11:10.52,中文,,0,0,0,,注意，尽管你可能在书籍或在线教程中看到不同，但在 C 语言中，\N定义主函数的两种官方格式要么是这样的，我们已经使用了两周多，要么是现在这样
Dialogue: 0,2:11:10.52,2:11:17.87,中文,,0,0,0,,这里你改变 void 为 int argc，然后 string argv空括号。
Dialogue: 0,2:11:17.87,2:11:21.31,中文,,0,0,0,,现在我们会看到这也是一种简化，也就是一些训练轮。
Dialogue: 0,2:11:21.31,2:11:25.98,中文,,0,0,0,,但目前，这是两种形式，尽管你会在在线教程和甚至书籍中看到。
Dialogue: 0,2:11:25.98,2:11:27.82,中文,,0,0,0,,有些人以不同的方式使用主要。
Dialogue: 0,2:11:27.82,2:11:30.36,中文,,0,0,0,,这是现在要记住的两个。
Dialogue: 0,2:11:30.36,2:11:33.36,中文,,0,0,0,,而且我会指出这些命令行参数有点分散。
Dialogue: 0,2:11:33.36,2:11:35.47,中文,,0,0,0,,可能没想到会在屏幕上看到这个词。
Dialogue: 0,2:11:35.47,2:11:36.43,中文,,0,0,0,,那它是什么意思呢？
Dialogue: 0,2:11:36.43,2:11:41.93,中文,,0,0,0,,事实证明，几十年来，特别是与Linux系统一起的，实际上有一个叫做Cowsay的程序。
Dialogue: 0,2:11:41.93,2:11:42.69,中文,,0,0,0,,为什么？
Dialogue: 0,2:11:42.69,2:11:51.57,中文,,0,0,0,,可能是因为有人有太多的空闲时间，决定写一个程序，可以在屏幕上以ASCII艺术的方式让一头牛说一些文本。
Dialogue: 0,2:11:51.57,2:11:55.69,中文,,0,0,0,,但你可以用Cowsay，只是为了好玩，通过命令行参数的方式。
Dialogue: 0,2:11:55.69,2:11:58.63,中文,,0,0,0,,所以举个例子，让我建议
Dialogue: 0,2:11:58.63,2:12:07.48,中文,,0,0,0,,我回到VS. Code这里，不是因为我想写代码，只是想用我的终端窗口，让我最大化我的终端窗口。
Dialogue: 0,2:12:07.48,2:12:13.36,中文,,0,0,0,,让我继续输入一些，比如牛说空格移动。
Dialogue: 0,2:12:13.36,2:12:14.90,中文,,0,0,0,,牛说不是我写的程序。
Dialogue: 0,2:12:14.90,2:12:19.02,中文,,0,0,0,,它存在了几十年，但我们已经在云中为你安装在 Visual Studio Code 中。
Dialogue: 0,2:12:19.02,2:12:21.40,中文,,0,0,0,,至少需要一个命令行参数。
Dialogue: 0,2:12:21.40,2:12:23.25,中文,,0,0,0,,你希望牛说什么？
Dialogue: 0,2:12:23.25,2:12:25.39,中文,,0,0,0,,我可以说牛说咕噜，然后按回车。
Dialogue: 0,2:12:25.39,2:12:29.67,中文,,0,0,0,,屏幕上就会出现我的牛说咕噜的 ASCII 艺术。
Dialogue: 0,2:12:29.67,2:12:31.12,中文,,0,0,0,,它可以说多个单词。
Dialogue: 0,2:12:31.12,2:12:34.12,中文,,0,0,0,,我可以说hello，world，输入。
Dialogue: 0,2:12:34.12,2:12:35.78,中文,,0,0,0,,现在它说hello，world。
Dialogue: 0,2:12:35.78,2:12:39.12,中文,,0,0,0,,这只是一个使用命令行参数的傻瓜程序的示例。
Dialogue: 0,2:12:39.12,2:12:40.65,中文,,0,0,0,,但它也接受其他人。
Dialogue: 0,2:12:40.65,2:12:53.66,中文,,0,0,0,,就像clang使用连字符来更改程序的输出一样，\N当你想要一种非常简洁的记号来表示某个选项时，连字符也是命令行参数的一个非常常见的约定。
Dialogue: 0,2:12:53.66,2:12:57.84,中文,,0,0,0,,在Cowsay中，我阅读了文档，结果有一个-dash f
Dialogue: 0,2:12:57.84,2:13:03.53,中文,,0,0,0,,一个命令行参数，允许你改变牛的外观，如果你愿意。
Dialogue: 0,2:13:03.53,2:13:11.71,中文,,0,0,0,,如果我输入'cow say -f duck'，然后再加上其他单词，比如'quack'，它就不再是一只牛了。
Dialogue: 0,2:13:11.71,2:13:15.99,中文,,0,0,0,,这个命令行参数会把它变成一只迷你可爱的小鸭子。
Dialogue: 0,2:13:15.99,2:13:23.08,中文,,0,0,0,,最后，就是为了好玩，因为我花了太多时间在玩命令行参数，'cow say -f dragon'。
Dialogue: 0,2:13:23.08,2:13:25.38,中文,,0,0,0,,然后再来个'rar'，回车吧？
Dialogue: 0,2:13:25.38,2:13:28.02,中文,,0,0,0,,你甚至可以在屏幕上看到这个。
Dialogue: 0,2:13:28.02,2:13:34.30,中文,,0,0,0,,这也只是一个示例，展示了有了这个基本构件后，你可以用这些命令行参数做些什么。
Dialogue: 0,2:13:34.30,2:13:37.02,中文,,0,0,0,,还有一件事，现在我们可以用代码来做。
Dialogue: 0,2:13:37.02,2:13:48.49,中文,,0,0,0,,今天我们要介绍的最后一个功能是与可读性和加密相关的，最后谈论一下称为“退出状态”的东西。
Dialogue: 0,2:13:48.49,2:13:49.95,中文,,0,0,0,,原来如此
Dialogue: 0,2:13:49.95,2:13:58.41,中文,,0,0,0,,每当你的主函数退出时，它都会返回一个秘密的整数，你可以作为程序员或高级用户来确定它是什么。
Dialogue: 0,2:13:58.41,2:14:02.41,中文,,0,0,0,,而这些退出代码通常用于指示错误。
Dialogue: 0,2:14:02.41,2:14:08.48,中文,,0,0,0,,比如，在过去的几年里，如果你使用过 Zoom，你可能会遇到某种错误，可能会看到这样的屏幕。
Dialogue: 0,2:14:08.48,2:14:09.88,中文,,0,0,0,,通常情况下，它并不是很有帮助。
Dialogue: 0,2:14:09.88,2:14:13.20,中文,,0,0,0,,可能会告诉你点击“报告问题”或联系支持。
Dialogue: 0,2:14:13.20,2:14:25.23,中文,,0,0,0,,但是在我们的人类世界中，Max电脑和手机上经常出现一些晦涩的错误代码，\N就像一些数字，可能只有Zoom、Microsoft或Google之类的公司才懂，或者是写了你正在使用的软件的公司。
Dialogue: 0,2:14:25.23,2:14:32.22,中文,,0,0,0,,但是这个数字对应着某个特定的错误，某个地方的人知道它很可能会发生。
Dialogue: 0,2:14:32.22,2:14:38.16,中文,,0,0,0,,这些东西被类似地使用，尽管在网络上有一个不同的名称，我们稍后会谈到。
Dialogue: 0,2:14:38.16,2:14:39.40,中文,,0,0,0,,你见过这个吗？
Dialogue: 0,2:14:39.40,2:14:41.46,中文,,0,0,0,,也许不是字符，而是数字。
Dialogue: 0,2:14:41.46,2:14:44.85,中文,,0,0,0,,所以404是什么意思？
Dialogue: 0,2:14:44.85,2:14:47.73,中文,,0,0,0,,错误，是的，但真的找不到。
Dialogue: 0,2:14:47.73,2:14:48.37,中文,,0,0,0,,为什么呢？
Dialogue: 0,2:14:48.37,2:14:49.70,中文,,0,0,0,,我的意思是，这是最深奥的东西。
Dialogue: 0,2:14:49.70,2:14:53.12,中文,,0,0,0,,我们将在几周后讨论这个和其他数字的含义。
Dialogue: 0,2:14:53.12,2:14:55.10,中文,,0,0,0,,但数字在技术中随处可见。
Dialogue: 0,2:14:55.10,2:15:00.32,中文,,0,0,0,,它们往往对编写软件的技术人员有意义，对像你和我这样的人来说则意义较小。
Dialogue: 0,2:15:00.32,2:15:06.02,中文,,0,0,0,,为什么我们这么多人都认识404有点奇怪，这个数字已经存在很长时间了，以至于我们都知道它。
Dialogue: 0,2:15:06.02,2:15:10.46,中文,,0,0,0,,但它实际上只是一个表示某种错误的特殊数字。
Dialogue: 0,2:15:10.46,2:15:18.37,中文,,0,0,0,,原来，我们今天要揭示的最后一件事是我们在过去两周里理所当然的东西是main函数中的int。
Dialogue: 0,2:15:18.37,2:15:29.70,中文,,0,0,0,,刚刚我们看到，括号中的东西，直到现在都是void，\N这意味着没有命令行参数，现在int argc和string argv[]只是表示有命令行参数。
Dialogue: 0,2:15:29.70,2:15:31.42,中文,,0,0,0,,我们也看到了如何访问它们。
Dialogue: 0,2:15:31.42,2:15:37.60,中文,,0,0,0,,这个谜一样的语法过去两周里的最后一块拼图，就是int是什么意思。
Dialogue: 0,2:15:37.60,2:15:46.39,中文,,0,0,0,,int永远存在于main函数，它表示main函数将始终返回一个整数，即使你和我从未明确这样做过。
Dialogue: 0,2:15:46.39,2:15:52.71,中文,,0,0,0,,通常，main函数默认返回0，但如果你看到一个错误消息说0，那会很奇怪。
Dialogue: 0,2:15:52.71,2:15:54.01,中文,,0,0,0,,所以0只是隐藏的。
Dialogue: 0,2:15:54.01,2:15:58.88,中文,,0,0,0,,你在屏幕上看不到它，但它是通过C的设计自动发生的。
Dialogue: 0,2:15:58.88,2:16:01.62,中文,,0,0,0,,让我在这里写一个最终的程序。
Dialogue: 0,2:16:01.62,2:16:05.92,中文,,0,0,0,,我会把它叫做，比如说，status.c，来向你展示这些退出状态。
Dialogue: 0,2:16:05.92,2:16:07.94,中文,,0,0,0,,status.c的代码。
Dialogue: 0,2:16:07.94,2:16:17.43,中文,,0,0,0,,然后在这里，让我做一些简单的事情，比如include<cs50.h>，然后include{\s1}，然后是int main。{\s}
Dialogue: 0,2:16:17.43,2:16:21.71,中文,,0,0,0,,实际上，让我们使用一个命令行参数，int argc，string argv。
Dialogue: 0,2:16:21.71,2:16:23.37,中文,,0,0,0,,所以就这样复制粘贴。
Dialogue: 0,2:16:23.37,2:16:26.26,中文,,0,0,0,,但现在让我们这样做。
Dialogue: 0,2:16:26.26,2:16:29.54,中文,,0,0,0,,arge不等于2。
Dialogue: 0,2:16:29.54,2:16:30.70,中文,,0,0,0,,为什么不像这样做呢？
Dialogue: 0,2:16:30.70,2:16:34.67,中文,,0,0,0,,不要再默认使用 "hello, world" 了，让我们对用户大声说出来。
Dialogue: 0,2:16:34.67,2:16:43.40,中文,,0,0,0,,我们可以输出一些像 "缺少命令行参数" 这样的信息，这样他们就知道出了问题，需要正确地重新运行程序。
Dialogue: 0,2:16:43.40,2:16:46.30,中文,,0,0,0,,否则，让我们继续。
Dialogue: 0,2:16:46.30,2:16:56.84,中文,,0,0,0,,说出打印，如以前一样，hello，逗号，%s。然后插入argv括号1，从提示中获得人的名字。
Dialogue: 0,2:16:56.84,2:17:01.98,中文,,0,0,0,,在这一点上，让我继续运行status，点斜杠status。
Dialogue: 0,2:17:01.98,2:17:03.72,中文,,0,0,0,,我什么都不输入。
Dialogue: 0,2:17:03.72,2:17:04.86,中文,,0,0,0,,我被喊了。
Dialogue: 0,2:17:04.86,2:17:07.90,中文,,0,0,0,,这次我会再次输入，点斜杠status David。
Dialogue: 0,2:17:07.90,2:17:10.22,中文,,0,0,0,,然后它正常工作。
Dialogue: 0,2:17:10.22,2:17:14.28,中文,,0,0,0,,但现在让我向你展示一个有点秘密的神秘命令。
Dialogue: 0,2:17:14.28,2:17:18.83,中文,,0,0,0,,你可以在你的提示符下键入这个，这里只是巧合还有另一个美元符号。
Dialogue: 0,2:17:18.83,2:17:20.27,中文,,0,0,0,,美元符号，问号。
Dialogue: 0,2:17:20.27,2:17:21.27,中文,,0,0,0,,非常复杂。
Dialogue: 0,2:17:21.27,2:17:25.64,中文,,0,0,0,,但它允许你看到你的程序以什么退出状态结束。
Dialogue: 0,2:17:25.64,2:17:27.68,中文,,0,0,0,,让我再次以错误的方式运行这个。
Dialogue: 0,2:17:27.68,2:17:29.34,中文,,0,0,0,,点斜杠status。
Dialogue: 0,2:17:29.34,2:17:31.23,中文,,0,0,0,,我得到错误信息。
Dialogue: 0,2:17:31.23,2:17:32.79,中文,,0,0,0,,什么被秘密地归还了？
Dialogue: 0,2:17:32.79,2:17:33.43,中文,,0,0,0,,我看不见它。
Dialogue: 0,2:17:33.43,2:17:38.07,中文,,0,0,0,,显然没有错误屏幕，但通过键入echo美元符号问号，我可以看到。
Dialogue: 0,2:17:38.07,2:17:42.41,中文,,0,0,0,,哦，我的程序默认自动返回0。
Dialogue: 0,2:17:42.41,2:17:48.79,中文,,0,0,0,,然而，如果我再次正确运行./status David enter，这才是正确版本。
Dialogue: 0,2:17:48.79,2:17:53.02,中文,,0,0,0,,但是如果我再次运行echo问号status，它仍然是0。
Dialogue: 0,2:17:53.02,2:17:55.88,中文,,0,0,0,,长话短说，这只是一个错失的机会。
Dialogue: 0,2:17:55.88,2:17:59.84,中文,,0,0,0,,当出现问题时，为什么不返回一个非0的值呢？
Dialogue: 0,2:17:59.84,2:18:01.08,中文,,0,0,0,,默认情况下，0代表成功。
Dialogue: 0,2:18:01.08,2:18:02.86,中文,,0,0,0,,而且它总是自动存在的。
Dialogue: 0,2:18:02.86,2:18:05.16,中文,,0,0,0,,但你可以控制它。
Dialogue: 0,2:18:05.16,2:18:08.89,中文,,0,0,0,,我可以进入我的代码这里，返回1。
Dialogue: 0,2:18:08.89,2:18:12.83,中文,,0,0,0,,否则，如果一切正常运行，我可以默认返回0。
Dialogue: 0,2:18:12.83,2:18:17.21,中文,,0,0,0,,而且说实话，如果我省略了返回0，那么0还是会自动返回。
Dialogue: 0,2:18:17.21,2:18:20.95,中文,,0,0,0,,让我明确一下，这样我就知道发生了什么。
Dialogue: 0,2:18:20.95,2:18:22.75,中文,,0,0,0,,再次make status。
Dialogue: 0,2:18:22.75,2:18:26.52,中文,,0,0,0,,点 斜杠 status。 然后让我们和 David 正确地进行这个。
Dialogue: 0,2:18:26.52,2:18:27.38,中文,,0,0,0,,回车。
Dialogue: 0,2:18:27.38,2:18:28.62,中文,,0,0,0,,hello，David。
Dialogue: 0,2:18:28.62,2:18:30.92,中文,,0,0,0,,$ echo $ ？
Dialogue: 0,2:18:30.92,2:18:32.16,中文,,0,0,0,,回答0
Dialogue: 0,2:18:32.16,2:18:33.36,中文,,0,0,0,,一切都很好
Dialogue: 0,2:18:33.36,2:18:39.28,中文,,0,0,0,,但是现在，如果我运行点斜杠status，没有任何内容或多个内容，而不仅仅是David，然后输入。
Dialogue: 0,2:18:39.28,2:18:40.42,中文,,0,0,0,,我收到了错误消息
Dialogue: 0,2:18:40.42,2:18:45.43,中文,,0,0,0,,但是现在，如果我运行echo $？，哇，这就是1。
Dialogue: 0,2:18:45.43,2:18:47.45,中文,,0,0,0,,那现在意味着什么呢？
Dialogue: 0,2:18:47.45,2:18:52.47,中文,,0,0,0,,在图形世界中，我们会在屏幕上显示类似这样的东西，对用户来说更加信息丰富。
Dialogue: 0,2:18:52.47,2:18:58.56,中文,,0,0,0,,但即使在 Linux 世界中，你不一定有图形界面，即便是我们编写的程序，你也可以检查这些退出状态。
Dialogue: 0,2:18:58.56,2:19:13.23,中文,,0,0,0,,实际上， 更加熟练、更高级的程序员在编写调用程序的代码时，\N无论是 cow 还是其他你能编码的东西，都会检查程序的退出状态，然后决定，我的程序是正常工作了还是没有？
Dialogue: 0,2:19:13.23,2:19:15.71,中文,,0,0,0,,现在，让我们串起最后的部分。
Dialogue: 0,2:19:15.71,2:19:27.78,中文,,0,0,0,,在我们休息一下吃点水果零食之前，这周我们将要介绍的密码学，它是你将能够发送秘密消息并且更妙的是解密秘密消息的应用之一。
Dialogue: 0,2:19:27.78,2:19:31.82,中文,,0,0,0,,这将是对文本的可读性使用启发式分析的额外内容。
Dialogue: 0,2:19:31.82,2:19:34.23,中文,,0,0,0,,就像我们在第二堂课一开始所确定的。
Dialogue: 0,2:19:34.23,2:19:48.37,中文,,0,0,0,,因此，密码学只是加密信息、混淆信息的艺术和科学，\N这样，如果你有一条秘密消息要以所谓的明文发送，你可以通过某种算法运行它，将其转化为所谓的密文。
Dialogue: 0,2:19:48.37,2:19:59.93,中文,,0,0,0,,从而对其进行加密，只有知道使用了什么算法以及输入了什么信息的人理论上才能解密该过程并将其转化回原始消息。
Dialogue: 0,2:19:59.93,2:20:03.07,中文,,0,0,0,,如果我们使用上周的心智模型，这里有一个问题。
Dialogue: 0,2:20:03.07,2:20:05.03,中文,,0,0,0,,这里有一个输入和输出。
Dialogue: 0,2:20:05.03,2:20:09.16,中文,,0,0,0,,我在这里要求的目标是获取一些明文，就像你想要发送的消息。
Dialogue: 0,2:20:09.16,2:20:10.22,中文,,0,0,0,,回想一下小学的时候。
Dialogue: 0,2:20:10.22,2:20:13.74,中文,,0,0,0,,如果你曾经给朋友或心仪的人传过纸条，写着我爱你，
Dialogue: 0,2:20:13.74,2:20:16.88,中文,,0,0,0,,如果老师或其他人截获了这张纸条，那会有点尴尬。
Dialogue: 0,2:20:16.88,2:20:19.58,中文,,0,0,0,,而在英文中，它只是说，我爱你，或者其他什么。
Dialogue: 0,2:20:19.58,2:20:22.45,中文,,0,0,0,,如果你至少把它以某种方式加密了，那就好了。
Dialogue: 0,2:20:22.45,2:20:32.15,中文,,0,0,0,,但是对方需要知道你使用了什么算法以及输入了什么数据给该算法，以便最终他们可以解密所谓的密文，也就是输出。
Dialogue: 0,2:20:32.15,2:20:34.19,中文,,0,0,0,,那么今天盒子里装了什么呢？
Dialogue: 0,2:20:34.19,2:20:38.02,中文,,0,0,0,,与密码学相关的算法称为密码。
Dialogue: 0,2:20:38.02,2:20:43.40,中文,,0,0,0,,而密码是算法的一个花哨名称，用于将明文加密为密文。
Dialogue: 0,2:20:43.40,2:20:48.84,中文,,0,0,0,,问题是，它不仅需要算法，还需要一个输入。
Dialogue: 0,2:20:48.84,2:20:53.08,中文,,0,0,0,,因此，例如，今天你可能会第一次画出这样的图片。
Dialogue: 0,2:20:53.08,2:20:54.14,中文,,0,0,0,,我们在代码中已经见过这种情况。
Dialogue: 0,2:20:54.14,2:20:57.31,中文,,0,0,0,,你可以向函数传递多个输入或参数。
Dialogue: 0,2:20:57.31,2:21:01.11,中文,,0,0,0,,在这个黑匣子中，你能想象传入你想发送的消息吗？
Dialogue: 0,2:21:01.11,2:21:02.69,中文,,0,0,0,,然后还有一些秘密。
Dialogue: 0,2:21:02.69,2:21:10.39,中文,,0,0,0,,举个例子，假设我小时候能想到的最简单的事情是，我为什么不写信A，而是写信B呢？
Dialogue: 0,2:21:10.39,2:21:13.13,中文,,0,0,0,,而不是写信B，我为什么不写信C呢？
Dialogue: 0,2:21:13.13,2:21:16.09,中文,,0,0,0,,我可以把英文字母整体向后移动一个位置。
Dialogue: 0,2:21:16.09,2:21:24.22,中文,,0,0,0,,所以A变成了B，B变成了C依此类推，Z变成了a。在故事的这部分假设没有标点符号。
Dialogue: 0,2:21:24.22,2:21:26.56,中文,,0,0,0,,这是一个非常简单的算法。
Dialogue: 0,2:21:26.56,2:21:32.10,中文,,0,0,0,,为每个字母添加一个值，并将该值作为密码文本发送。
Dialogue: 0,2:21:32.10,2:21:41.31,中文,,0,0,0,,现在老师和同学，他们得知道你用的不仅是这个旋转算法，也被称为凯撒密码，他们还需要知道你用的是哪个数字。
Dialogue: 0,2:21:41.31,2:21:45.41,中文,,0,0,0,,你是每个字母都加1，还是加2，还是加25？
Dialogue: 0,2:21:45.41,2:21:51.41,中文,,0,0,0,,如果他们非常聪明，可能不是这个故事里的年轻人，他们也可以尝试所有的可能性。
Dialogue: 0,2:21:51.41,2:21:52.92,中文,,0,0,0,,那就是对这个算法的一种攻击。
Dialogue: 0,2:21:52.92,2:21:54.94,中文,,0,0,0,,这并不是一个复杂的算法。
Dialogue: 0,2:21:54.94,2:21:57.04,中文,,0,0,0,,但足以在课堂上传递信息。
Dialogue: 0,2:21:57.04,2:22:00.70,中文,,0,0,0,,如果现在两个输入都很高，就像明文消息一样，
Dialogue: 0,2:22:00.70,2:22:10.93,中文,,0,0,0,,首先，作为所谓的关键，这个只有你和对方知道的秘密数字，你也许可以用一种方式加密信息从一方传递到另一方。
Dialogue: 0,2:22:10.93,2:22:16.59,中文,,0,0,0,,在这种情况下，比如，hi会变成IJ，感叹号。
Dialogue: 0,2:22:16.59,2:22:19.77,中文,,0,0,0,,在这个算法的版本中，我们不会考虑数字或标点符号。
Dialogue: 0,2:22:19.77,2:22:23.29,中文,,0,0,0,,我们只会处理从A到Z的字母，不论是大写还是小写。
Dialogue: 0,2:22:23.29,2:22:36.60,中文,,0,0,0,,现在，如果你在课堂上收到一张写着IJ的纸条，作为接收者，\N只要你知道发件人使用了1，你就会知道它是什么，因为你刚刚反转了算法，然后减去1。
Dialogue: 0,2:22:36.60,2:22:39.06,中文,,0,0,0,,老师，他们可能不知道这是什么意思。
Dialogue: 0,2:22:39.06,2:22:41.10,中文,,0,0,0,,他们也不会花时间去破解这条消息。
Dialogue: 0,2:22:41.10,2:22:42.94,中文,,0,0,0,,它对他们来说看起来是乱的。
Dialogue: 0,2:22:42.94,2:22:44.76,中文,,0,0,0,,这就是我们从加密中得到的东西。
Dialogue: 0,2:22:44.76,2:22:52.87,中文,,0,0,0,,无论是在课堂上还是在现实世界中，无论是在互联网上还是在其他任何地方，拦截它的人都不能理想地弄清楚你发送了什么。
Dialogue: 0,2:22:52.87,2:22:55.13,中文,,0,0,0,,当然，相反的过程被称为解密。
Dialogue: 0,2:22:55.13,2:22:56.29,中文,,0,0,0,,但过程是一样的。
Dialogue: 0,2:22:56.29,2:22:58.63,中文,,0,0,0,,现在我们传入负1。
Dialogue: 0,2:22:58.63,2:23:00.33,中文,,0,0,0,,那么这个呢？
Dialogue: 0,2:23:00.33,2:23:03.33,中文,,0,0,0,,为什么不在这里结束演示呢？
Dialogue: 0,2:23:03.33,2:23:07.10,中文,,0,0,0,,u, y, j, t, x, b, t, d, t, 5, 0。
Dialogue: 0,2:23:07.10,2:23:08.36,中文,,0,0,0,,那里有一点线索。
Dialogue: 0,2:23:08.36,2:23:14.31,中文,,0,0,0,,如果我们传入并执行负 1，那么我们如何获得原始的纯文本呢？
Dialogue: 0,2:23:14.31,2:23:21.60,中文,,0,0,0,,如果这是密文，我们从每个字母中减去 1，我认为 u 变成了 t。
Dialogue: 0,2:23:21.60,2:23:37.57,中文,,0,0,0,,I 变成了 H。J 变成了 I。T 变成了 S。X 变成了 W。B 变成了 A。T 变成了 S。D 变成了 C。T 变成了 S。而这确实是 cs50。
Dialogue: 0,2:23:37.57,2:23:40.23,中文,,0,0,0,,在离开时拿只小鸭子，在大厅里有一些零食。
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
