[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: D:/python_code/video_tool/result/CS50x 2023 - Lecture 6 - Python.mp4
Video File: D:/python_code/video_tool/result/CS50x 2023 - Lecture 6 - Python.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 1738
Active Line: 1747
Video Position: 189350

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.99999,1.99999,2,11,11,11,1
Style: 英文,Arial,29,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,11,11,11,1
Style: 中文,微软雅黑,38,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.99999,1.99999,2,11,11,45,1
Style: 中文大字幕,Arial,38,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.99999,1.99999,2,11,11,11,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,英文,,0,0,0,,
Dialogue: 0,0:01:12.00,0:01:21.35,英文,,0,0,0,,All right, this is CS50, and this is week six, wherein we finally transition from Scratch to C to now Python.
Dialogue: 0,0:01:12.00,0:01:21.35,中文,,0,0,0,,好了，欢迎来到 cs50，这是第六周，我们终于要从 Scratch 和 C 语言过渡到 python 了。
Dialogue: 0,0:01:21.35,0:01:30.60,英文,,0,0,0,,And indeed, this is going to be somewhat of a unique experience in that just like a few weeks past, perhaps for the first time, and now today,
Dialogue: 0,0:01:21.35,0:01:30.60,中文,,0,0,0,,这确实会是一种独特的体验，就像几周前一样，也许是第一次，
Dialogue: 0,0:01:30.60,0:01:32.08,英文,,0,0,0,,You're going to learn a new language.
Dialogue: 0,0:01:30.60,0:01:32.08,中文,,0,0,0,,今天，你要学习一门新的语言。
Dialogue: 0,0:01:32.08,0:01:41.48,英文,,0,0,0,,But the goal isn't just to throw another fire hose of content, and syntax, and whatnot at you, but rather to really equip you all to actually teach yourself new languages in the future.
Dialogue: 0,0:01:32.08,0:01:41.48,中文,,0,0,0,,但我们的目标不是再向你灌输大量的知识、语法等等，而是让你能够在未来自学新的语言。
Dialogue: 0,0:01:41.48,0:01:46.55,英文,,0,0,0,,And so indeed, what we'll do today, what we'll do this coming week, is sort of prepare you to stand on your own.
Dialogue: 0,0:01:41.48,0:01:46.55,中文,,0,0,0,,我们今天要做的，以及接下来一周要做的，就是让你做好独自学习的准备。
Dialogue: 0,0:01:46.55,0:01:56.59,英文,,0,0,0,,And once Python is passe, and the world has moved on to some other language in some number of years, you'll be well-equipped to figure out how to wrap your mind around some new syntax, some new language, and solve problems as well.
Dialogue: 0,0:01:46.55,0:01:56.59,中文,,0,0,0,,一旦 python 过时，几年后世界转向了其他语言，你将有能力去学习新的语法、新的语言，并解决问题。
Dialogue: 0,0:01:56.59,0:02:01.51,英文,,0,0,0,,Now, you recall in week 0. This is where we started, just saying hello to the world.
Dialogue: 0,0:01:56.59,0:02:01.51,中文,,0,0,0,,回想一下，在第 0 周，我们是从这里开始的，只是简单地向世界问好。
Dialogue: 0,0:02:01.51,0:02:06.53,英文,,0,0,0,,And that quickly escalated just a week later in C to be something much, much more cryptic.
Dialogue: 0,0:02:01.51,0:02:06.53,中文,,0,0,0,,仅仅一周后，在 C 语言中，它就迅速升级成了更复杂的东西。
Dialogue: 0,0:02:06.53,0:02:13.11,英文,,0,0,0,,And if you've still sort of struggled with some of the syntax, find yourself checking your notes or your previous code, that's totally normal.
Dialogue: 0,0:02:06.53,0:02:13.11,中文,,0,0,0,,如果你还在为某些语法苦苦挣扎，发现自己在查阅笔记或之前的代码，这完全正常。
Dialogue: 0,0:02:13.11,0:02:19.26,英文,,0,0,0,,And that's one of the reasons why there are languages besides C out there, among them this language called Python.
Dialogue: 0,0:02:13.11,0:02:19.26,中文,,0,0,0,,这也是为什么除了 C 语言之外，还有其他语言的原因之一，其中就包括 python。
Dialogue: 0,0:02:19.26,0:02:24.20,英文,,0,0,0,,Humans over the decades have realized, gee, that wasn't necessarily the best design decision.
Dialogue: 0,0:02:19.26,0:02:24.20,中文,,0,0,0,,几十年来，人们已经意识到，那不一定是最佳的设计决策。
Dialogue: 0,0:02:24.20,0:02:25.88,英文,,0,0,0,,Humans have realized, wow, you know what?
Dialogue: 0,0:02:24.20,0:02:25.88,中文,,0,0,0,,人们意识到，哇，你知道吗？
Dialogue: 0,0:02:25.88,0:02:33.28,英文,,0,0,0,,Now that computers have gotten faster with more memory and more faster CPUs, we can actually do more with our programming languages.
Dialogue: 0,0:02:25.88,0:02:33.28,中文,,0,0,0,,现在计算机的速度更快了，内存更多了，CPU 也更快了，我们实际上可以用编程语言做更多的事情。
Dialogue: 0,0:02:33.28,0:02:37.22,英文,,0,0,0,,So just as human languages evolve, so do actual programming languages.
Dialogue: 0,0:02:33.28,0:02:37.22,中文,,0,0,0,,就像人类语言的演变一样，编程语言也在不断发展。
Dialogue: 0,0:02:37.22,0:02:40.85,英文,,0,0,0,,And even within a programming language, there's typically different versions.
Dialogue: 0,0:02:37.22,0:02:40.85,中文,,0,0,0,,即使在一种编程语言中，通常也有不同的版本。
Dialogue: 0,0:02:40.85,0:02:46.69,英文,,0,0,0,,We, for instance, have been using version C11 of C, which was updated in 2011.
Dialogue: 0,0:02:40.85,0:02:46.69,中文,,0,0,0,,例如，我们一直在使用 2011 年更新的 C 语言版本 C11。
Dialogue: 0,0:02:46.69,0:02:48.61,英文,,0,0,0,,But Python itself continues to evolve.
Dialogue: 0,0:02:46.69,0:02:48.61,中文,,0,0,0,,但 python 本身也在不断发展。
Dialogue: 0,0:02:48.61,0:02:50.95,英文,,0,0,0,,And it's now up to version 3 plus.
Dialogue: 0,0:02:48.61,0:02:50.95,中文,,0,0,0,,现在已经更新到 3 以上的版本了。
Dialogue: 0,0:02:50.95,0:02:53.81,英文,,0,0,0,,And so there, too, these things will evolve in the coming days.
Dialogue: 0,0:02:50.95,0:02:53.81,中文,,0,0,0,,因此，在未来的日子里，这些东西也会不断发展。
Dialogue: 0,0:02:53.81,0:02:57.82,英文,,0,0,0,,Thankfully, what you're about to see is Hello World for the third time.
Dialogue: 0,0:02:53.81,0:02:57.82,中文,,0,0,0,,谢天谢地，你即将第三次看到“Hello World”。
Dialogue: 0,0:02:57.82,0:02:59.50,英文,,0,0,0,,But it's going to be literally this.
Dialogue: 0,0:02:57.82,0:02:59.50,中文,,0,0,0,,而且就是像这样。
Dialogue: 0,0:02:59.50,0:03:02.12,英文,,0,0,0,,None of the crazy syntax above or below.
Dialogue: 0,0:02:59.50,0:03:02.12,中文,,0,0,0,,没有上面或下面那些疯狂的语法。
Dialogue: 0,0:03:02.12,0:03:04.64,英文,,0,0,0,,Fewer semicolons, if any.
Dialogue: 0,0:03:02.12,0:03:04.64,中文,,0,0,0,,分号更少，甚至没有。
Dialogue: 0,0:03:04.64,0:03:05.76,英文,,0,0,0,,Fewer curly braces.
Dialogue: 0,0:03:04.64,0:03:05.76,中文,,0,0,0,,花括号也更少。
Dialogue: 0,0:03:05.76,0:03:09.44,英文,,0,0,0,,And really, a lot of the distractions get out of the way.
Dialogue: 0,0:03:05.76,0:03:09.44,中文,,0,0,0,,真的，很多干扰都不见了。
Dialogue: 0,0:03:09.44,0:03:13.33,英文,,0,0,0,,there, let's consider exactly how we've been programming up until now.
Dialogue: 0,0:03:09.44,0:03:13.33,中文,,0,0,0,,那么，让我们来仔细看看我们到目前为止是如何编程的。
Dialogue: 0,0:03:13.33,0:03:17.19,英文,,0,0,0,,So you write a program in C. And you've got, hopefully, no syntax errors.
Dialogue: 0,0:03:13.33,0:03:17.19,中文,,0,0,0,,你用 C 语言编写程序，而且希望没有语法错误。
Dialogue: 0,0:03:17.19,0:03:19.29,英文,,0,0,0,,So you're ready to build it, that is, compile it.
Dialogue: 0,0:03:17.19,0:03:19.29,中文,,0,0,0,,然后准备构建它，也就是编译它。
Dialogue: 0,0:03:19.29,0:03:20.55,英文,,0,0,0,,And so you've run make.
Dialogue: 0,0:03:19.29,0:03:20.55,中文,,0,0,0,,于是你运行了 make。
Dialogue: 0,0:03:20.55,0:03:22.61,英文,,0,0,0,,And then you've run the program like .slash hello.
Dialogue: 0,0:03:20.55,0:03:22.61,中文,,0,0,0,,然后你运行程序，比如 ./hello。
Dialogue: 0,0:03:22.61,0:03:34.26,英文,,0,0,0,,Or if you think back to week two, where we took a peek underneath the hood of what make is doing, it's really running the actual compiler, something called Clang, maybe with some command line arguments, creating a program called hello.
Dialogue: 0,0:03:22.61,0:03:34.26,中文,,0,0,0,,或者回想一下第二周，我们简单了解了 make 的底层操作，\N它实际上是在运行真正的编译器，比如 Clang，可能还有一些命令行参数，最后创建了一个名为 hello 的程序。
Dialogue: 0,0:03:34.26,0:03:36.56,英文,,0,0,0,,And then you could do .slash hello.
Dialogue: 0,0:03:34.26,0:03:36.56,中文,,0,0,0,,然后你就可以运行 ./hello 了。
Dialogue: 0,0:03:36.56,0:03:40.48,英文,,0,0,0,,So today, you're going to start doing something similar in spirit, but fewer steps.
Dialogue: 0,0:03:36.56,0:03:40.48,中文,,0,0,0,,所以今天，你要开始做一些在精神上类似的事情，但步骤更少。
Dialogue: 0,0:03:40.48,0:03:47.63,英文,,0,0,0,,No longer will you have to compile your code and then run it, and then maybe fix or change it, and then compile your code and run it, and then repeat, repeat.
Dialogue: 0,0:03:40.48,0:03:47.63,中文,,0,0,0,,你不再需要先编译代码，然后运行它，然后可能要修复或修改它，然后再编译代码，再运行，然后再重复，重复。
Dialogue: 0,0:03:47.63,0:03:52.78,英文,,0,0,0,,The process of running your code is going to be distilled into just a single step.
Dialogue: 0,0:03:47.63,0:03:52.78,中文,,0,0,0,,运行代码的过程将被简化为一个步骤。
Dialogue: 0,0:03:52.78,0:04:05.87,英文,,0,0,0,,And the way to think of this for now is that whereas C is frequently used as, indeed, a compiled language, whereby you convert it first to 0's and 1's, Python's going to let you speed things up, whereby you, the human programmer, don't have to compile it.
Dialogue: 0,0:03:52.78,0:04:05.87,中文,,0,0,0,,现在可以这样理解：C 语言通常被用作编译语言，你需要先将其转换为 0 和 1，而 python 让你可以加快速度，你作为程序员不需要编译它。
Dialogue: 0,0:04:05.87,0:04:12.33,英文,,0,0,0,,You're just going to run what's called an interpreter, which, by design, is named the exact same thing as the language itself.
Dialogue: 0,0:04:05.87,0:04:12.33,中文,,0,0,0,,你只需运行一个叫做解释器的程序，顾名思义，它的名字和语言本身完全一样。
Dialogue: 0,0:04:12.33,0:04:23.78,英文,,0,0,0,,And by running this program, Installed in VS Code or eventually on your own Macs or PCs, this is just going to tell your computer to interpret this code and figure out how to get down to that lower level of 0's and 1's.
Dialogue: 0,0:04:12.33,0:04:23.78,中文,,0,0,0,,通过运行这个程序， 无论安装在 VS Code 中，还是最终安装在你自己的 Mac 或 PC 上，\N它都会告诉你的计算机解释这段代码，并弄清楚如何将其转换为底层的 0 和 1。
Dialogue: 0,0:04:23.78,0:04:27.06,英文,,0,0,0,,But you don't have to compile the code yourself anymore.
Dialogue: 0,0:04:23.78,0:04:27.06,中文,,0,0,0,,但你不再需要自己编译代码了。
Dialogue: 0,0:04:27.06,0:04:29.82,英文,,0,0,0,,So with that said, let's consider.
Dialogue: 0,0:04:27.06,0:04:29.82,中文,,0,0,0,,那么，让我们来看看。
Dialogue: 0,0:04:29.82,0:04:31.68,英文,,0,0,0,,what the code is going to look like side-by-side.
Dialogue: 0,0:04:29.82,0:04:31.68,中文,,0,0,0,,代码看起来会是什么样子。
Dialogue: 0,0:04:31.68,0:04:36.88,英文,,0,0,0,,In fact, let's look back at some scratch blocks, just like we did with C in week 1, and do some side-by-sides.
Dialogue: 0,0:04:31.68,0:04:36.88,中文,,0,0,0,,实际上，让我们回顾一下 Scratch 代码块，就像我们在第一周用 C 语言做的那样，做一些对比。
Dialogue: 0,0:04:36.88,0:04:42.81,英文,,0,0,0,,Because even though some of the syntax this week and beyond is going to be different, the ideas are truly going to be the same.
Dialogue: 0,0:04:36.88,0:04:42.81,中文,,0,0,0,,因为即使本周及以后的一些语法会有所不同，但思路实际上是相同的。
Dialogue: 0,0:04:42.81,0:04:45.85,英文,,0,0,0,,There's not all that much intellectually new just yet.
Dialogue: 0,0:04:42.81,0:04:45.85,中文,,0,0,0,,目前还没有太多全新的知识点。
Dialogue: 0,0:04:45.85,0:04:54.88,英文,,0,0,0,,So whereas in week 0, we might have said hello to the world with this purple puzzle piece, today, of course, or rather in week 1, it looked like this in C.
Dialogue: 0,0:04:45.85,0:04:54.88,中文,,0,0,0,,在第 0 周，我们可能用这个紫色的拼图块向世界问好，今天，或者更确切地说是第 1 周，它在 C 语言中看起来像这样。
Dialogue: 0,0:04:54.88,0:04:58.90,英文,,0,0,0,,But today, moving forward, it's going to quite simply look like this instead.
Dialogue: 0,0:04:54.88,0:04:58.90,中文,,0,0,0,,但今天，我们将继续前进，它看起来会很简单，就像这样。
Dialogue: 0,0:04:58.90,0:05:05.54,英文,,0,0,0,,And if we go back and forth for just a moment, here again is the version in C, noticing the very C-like characteristics.
Dialogue: 0,0:04:58.90,0:05:05.54,中文,,0,0,0,,如果我们来回看一看，这里又是 C 语言的版本，注意它非常像 C 语言的特点。
Dialogue: 0,0:05:05.54,0:05:09.37,英文,,0,0,0,,And just at a glance here, in Python, I claim it's now this.
Dialogue: 0,0:05:05.54,0:05:09.37,中文,,0,0,0,,乍一看，在 python 中，我认为它现在是这样的。
Dialogue: 0,0:05:09.37,0:05:13.35,英文,,0,0,0,,What do you apparently need not worry about anymore?
Dialogue: 0,0:05:09.37,0:05:13.35,中文,,0,0,0,,你显然不需要再担心什么了？
Dialogue: 0,0:05:13.35,0:05:15.11,英文,,0,0,0,,What's gone?
Dialogue: 0,0:05:13.35,0:05:15.11,中文,,0,0,0,,什么不见了？
Dialogue: 0,0:05:15.11,0:05:16.23,英文,,0,0,0,,So semicolon is gone.
Dialogue: 0,0:05:15.11,0:05:16.23,中文,,0,0,0,,分号不见了。
Dialogue: 0,0:05:16.23,0:05:19.19,英文,,0,0,0,,And indeed, you don't need those to finish most of your thoughts anymore.
Dialogue: 0,0:05:16.23,0:05:19.19,中文,,0,0,0,,实际上，你不再需要用它们来结束你的大部分语句了。
Dialogue: 0,0:05:19.19,0:05:20.95,英文,,0,0,0,,Anything else?
Dialogue: 0,0:05:19.19,0:05:20.95,中文,,0,0,0,,还有吗？
Dialogue: 0,0:05:20.95,0:05:27.35,英文,,0,0,0,,So the backslash n is absent, and that's kind of curious because we're still going to get a new line, but we'll see that it's become the default.
Dialogue: 0,0:05:20.95,0:05:27.35,中文,,0,0,0,,反斜杠 n 不见了，这有点奇怪，因为我们仍然会得到一个新行，但我们会看到它已经成为默认值。
Dialogue: 0,0:05:27.35,0:05:31.55,英文,,0,0,0,,And this one's a little more subtle, but now the function is called print instead of printf.
Dialogue: 0,0:05:27.35,0:05:31.55,中文,,0,0,0,,这一点更微妙，但现在这个函数叫做 print 而不是 printf。
Dialogue: 0,0:05:31.55,0:05:33.99,英文,,0,0,0,,So it's a little more familiar in that sense.
Dialogue: 0,0:05:31.55,0:05:33.99,中文,,0,0,0,,所以在这个意义上它更熟悉一些。
Dialogue: 0,0:05:33.99,0:05:43.32,英文,,0,0,0,,All right, so when it comes to using libraries, that is code that other people have written in the past, we've done things like hash include CS50.h to use CS50's own
Dialogue: 0,0:05:33.99,0:05:43.32,中文,,0,0,0,,说到使用库，也就是其他人过去编写的代码，我们做过类似 #include cs50.h 来使用 cs50 自己的头文件，
Dialogue: 0,0:05:43.32,0:05:49.26,英文,,0,0,0,,header file, or standard IO, or standard lib, or string, or any number of other header files you have all used.
Dialogue: 0,0:05:43.32,0:05:49.26,中文,,0,0,0,,或者 stdio.h，或者 stdlib.h，或者 string.h，或者你用过的其他任何头文件。
Dialogue: 0,0:05:49.26,0:05:56.79,英文,,0,0,0,,Well, moving forward, we're going to give you, for this first week, a similar CS50 library, just very short-term training wheels that will quickly take off.
Dialogue: 0,0:05:49.26,0:05:56.79,中文,,0,0,0,,接下来，在第一周，我们会给大家一个类似的 cs50 库，它就像自行车上的辅助轮一样，很快就会被拆除。
Dialogue: 0,0:05:56.79,0:06:00.61,英文,,0,0,0,,Because in reality, it's a lot easier to do things in Python, as we'll see.
Dialogue: 0,0:05:56.79,0:06:00.61,中文,,0,0,0,,因为实际上，用 python 做事情要容易得多，我们之后会看到的。
Dialogue: 0,0:06:00.61,0:06:05.64,英文,,0,0,0,,But the syntax for this now is going to be to import the CS50 library in this way.
Dialogue: 0,0:06:00.61,0:06:05.64,中文,,0,0,0,,但现在导入 cs50 库的语法是这样的。
Dialogue: 0,0:06:05.64,0:06:09.84,英文,,0,0,0,,And when we have now this ability, we can actually start writing some code right away.
Dialogue: 0,0:06:05.64,0:06:09.84,中文,,0,0,0,,现在我们有了这个能力，就可以马上开始写代码了。
Dialogue: 0,0:06:09.84,0:06:12.68,英文,,0,0,0,,In fact, let me switch over to VS Code here.
Dialogue: 0,0:06:09.84,0:06:12.68,中文,,0,0,0,,事实上，让我切换到 VS Code。
Dialogue: 0,0:06:12.68,0:06:14.74,英文,,0,0,0,,And just as in the past, I'll create a new file.
Dialogue: 0,0:06:12.68,0:06:14.74,中文,,0,0,0,,和以前一样，我会创建一个新文件。
Dialogue: 0,0:06:14.74,0:06:22.83,英文,,0,0,0,,But instead of creating something called .c, I'm going to go ahead and create my first program called hello.py using code space hello.py.
Dialogue: 0,0:06:14.74,0:06:22.83,中文,,0,0,0,,但我不会创建名为 .c 的文件，而是要创建我的第一个程序，名为 hello.py，使用代码空间 hello.py。
Dialogue: 0,0:06:22.83,0:06:24.37,英文,,0,0,0,,That, of course, gives me this new tab.
Dialogue: 0,0:06:22.83,0:06:24.37,中文,,0,0,0,,这会给我一个新的标签页。
Dialogue: 0,0:06:24.37,0:06:27.53,英文,,0,0,0,,And let me actually quite simply do what I proposed, print.
Dialogue: 0,0:06:24.37,0:06:27.53,中文,,0,0,0,,让我简单地完成我提出的目标，print。
Dialogue: 0,0:06:27.53,0:06:34.02,英文,,0,0,0,,Quote unquote, hello world, without the backslash n, without the semicolon, without the f in print.
Dialogue: 0,0:06:27.53,0:06:34.02,中文,,0,0,0,,用引号括起来，hello world，没有反斜杠 n，没有分号，print 中也没有 f。
Dialogue: 0,0:06:34.02,0:06:36.42,英文,,0,0,0,,And now let me go down to my terminal window.
Dialogue: 0,0:06:34.02,0:06:36.42,中文,,0,0,0,,现在让我进入终端窗口。
Dialogue: 0,0:06:36.42,0:06:38.16,英文,,0,0,0,,And I don't have to compile it.
Dialogue: 0,0:06:36.42,0:06:38.16,中文,,0,0,0,,我不需要编译它。
Dialogue: 0,0:06:38.16,0:06:39.48,英文,,0,0,0,,I don't have to do dot slash.
Dialogue: 0,0:06:38.16,0:06:39.48,中文,,0,0,0,,我不需要输入 点 斜杠。
Dialogue: 0,0:06:39.48,0:06:46.28,英文,,0,0,0,,I instead run a program called Python, whose purpose in life is now to interpret my code, top to bottom, left to right.
Dialogue: 0,0:06:39.48,0:06:46.28,中文,,0,0,0,,我要运行一个名为 python 的程序，它的作用是自上而下、从左到右地解释我的代码。
Dialogue: 0,0:06:46.28,0:06:51.16,英文,,0,0,0,,And if I run Python, if hello.py, crossing my fingers as always, voila.
Dialogue: 0,0:06:46.28,0:06:51.16,中文,,0,0,0,,如果我运行 python，输入 hello.py，像往常一样祈祷，瞧。
Dialogue: 0,0:06:51.16,0:06:53.20,英文,,0,0,0,,Now I have printed out hello world.
Dialogue: 0,0:06:51.16,0:06:53.20,中文,,0,0,0,,现在我打印出了 hello world。
Dialogue: 0,0:06:53.20,0:06:58.07,英文,,0,0,0,,So we seem to have gotten the new line for free, in this sense, where it's automatically happening.
Dialogue: 0,0:06:53.20,0:06:58.07,中文,,0,0,0,,在这种情况下，我们似乎免费获得了换行符，它是自动发生的。
Dialogue: 0,0:06:58.07,0:07:02.39,英文,,0,0,0,,The dollar sign isn't weirdly on the same line like it once was in week one.
Dialogue: 0,0:06:58.07,0:07:02.39,中文,,0,0,0,,美元符号没有像第一周那样奇怪地出现在同一行。
Dialogue: 0,0:07:02.39,0:07:04.83,英文,,0,0,0,,But that's just a minor detail here.
Dialogue: 0,0:07:02.39,0:07:04.83,中文,,0,0,0,,但这只是一个细节。
Dialogue: 0,0:07:04.83,0:07:13.09,英文,,0,0,0,,If we switch back to now some other capabilities, well, indeed, with the CS50 library, you can also not just import the library itself, but specific functions.
Dialogue: 0,0:07:04.83,0:07:13.09,中文,,0,0,0,,如果我们切换回其他功能，实际上，使用 cs50 库，你不仅可以导入库本身，还可以导入特定的函数。
Dialogue: 0,0:07:13.09,0:07:18.72,英文,,0,0,0,,And you'll see that temporarily, we're going to give you a helper function called getString, just like in C.
Dialogue: 0,0:07:13.09,0:07:18.72,中文,,0,0,0,,你会发现我们暂时会给你一个叫做 get_string 的辅助函数，就像在 C 语言中一样。
Dialogue: 0,0:07:18.72,0:07:29.87,英文,,0,0,0,,That just makes it work exactly the same way as in C. And we'll see a couple of other functions that will just make life easier initially, but quickly will we take those training wheels off so that nothing is indeed CS50 specific.
Dialogue: 0,0:07:18.72,0:07:29.87,中文,,0,0,0,,这使得它和 C 语言中的工作方式完全一样。我们还会看到其他一些函数，\N它们最初会让生活更轻松，但很快我们就会把这些辅助轮子去掉，这样就没有什么是 cs50 特有的了。
Dialogue: 0,0:07:29.87,0:07:32.65,英文,,0,0,0,,All right, well, how about functions more generally in Python?
Dialogue: 0,0:07:29.87,0:07:32.65,中文,,0,0,0,,好了，那么，更一般地说，python 中的函数是什么样的呢？
Dialogue: 0,0:07:32.65,0:07:39.03,英文,,0,0,0,,Let's do a whirlwind tour, if you will, much like we did in that first week of C, comparing one to the other.
Dialogue: 0,0:07:32.65,0:07:39.03,中文,,0,0,0,,让我们快速浏览一下，就像我们在 C 语言的第一周那样，将两者进行比较。
Dialogue: 0,0:07:39.03,0:07:45.50,英文,,0,0,0,,So back in our world of Scratch, one of the first programs we wrote was this one here, whereby we ask the human their name.
Dialogue: 0,0:07:39.03,0:07:45.50,中文,,0,0,0,,回到 Scratch 的世界，我们写的第一个程序是这样的，我们询问用户的名字。
Dialogue: 0,0:07:45.50,0:07:56.51,英文,,0,0,0,,We then used the return value that was sort of automatically stored in this answer variable as a second argument to join so that we could say, hello, David, or hello, Carter.
Dialogue: 0,0:07:45.50,0:07:56.51,中文,,0,0,0,,然后，我们使用自动存储在这个 answer 变量中的返回值作为 join 的第二个参数，以便我们可以说“hello，David”或“hello，Carter”。
Dialogue: 0,0:07:56.51,0:07:59.54,英文,,0,0,0,,So this was back in week 0.
Dialogue: 0,0:07:56.51,0:07:59.54,中文,,0,0,0,,这是在第 0 周。
Dialogue: 0,0:07:59.54,0:08:01.56,英文,,0,0,0,,In week 1, we converted it to this.
Dialogue: 0,0:07:59.54,0:08:01.56,中文,,0,0,0,,在第 1 周，我们把它转换成了这样。
Dialogue: 0,0:08:01.56,0:08:04.54,英文,,0,0,0,,And here's a perfect example of things like escalating quickly.
Dialogue: 0,0:08:01.56,0:08:04.54,中文,,0,0,0,,这是一个事情迅速升级的完美例子。
Dialogue: 0,0:08:04.54,0:08:09.22,英文,,0,0,0,,Again, this is why we start in Scratch. There's just so much distraction here to achieve the same idea.
Dialogue: 0,0:08:04.54,0:08:09.22,中文,,0,0,0,,这也是我们从 Scratch 开始的原因。为了实现同样的想法，这里有很多干扰。
Dialogue: 0,0:08:09.22,0:08:11.92,英文,,0,0,0,,But even today, we're going to chip away at some of that syntax.
Dialogue: 0,0:08:09.22,0:08:11.92,中文,,0,0,0,,但即使在今天，我们也要去掉一些语法。
Dialogue: 0,0:08:11.92,0:08:18.03,英文,,0,0,0,,So in C, we had to declare the variable as a string here.
Dialogue: 0,0:08:11.92,0:08:18.03,中文,,0,0,0,,在 C 语言中，我们必须在这里将变量声明为字符串。
Dialogue: 0,0:08:18.03,0:08:20.27,英文,,0,0,0,,We, of course, had the semicolon and more.
Dialogue: 0,0:08:18.03,0:08:20.27,中文,,0,0,0,,当然，我们还有分号等等。
Dialogue: 0,0:08:20.27,0:08:26.31,英文,,0,0,0,,Well, in Python, the comparable code now is going to look more simply like this.
Dialogue: 0,0:08:20.27,0:08:26.31,中文,,0,0,0,,在 python 中，现在相应的代码看起来更简单了。
Dialogue: 0,0:08:26.31,0:08:29.63,英文,,0,0,0,,So semicolon is, again, gone on both lines, for that matter.
Dialogue: 0,0:08:26.31,0:08:29.63,中文,,0,0,0,,所以分号又不见了，两行都没有了。
Dialogue: 0,0:08:29.63,0:08:30.59,英文,,0,0,0,,So that's good.
Dialogue: 0,0:08:29.63,0:08:30.59,中文,,0,0,0,,这很好。
Dialogue: 0,0:08:30.59,0:08:33.61,英文,,0,0,0,,What else appears to have changed or disappeared?
Dialogue: 0,0:08:30.59,0:08:33.61,中文,,0,0,0,,还有什么东西看起来改变或消失了？
Dialogue: 0,0:08:33.61,0:08:35.45,英文,,0,0,0,,Yeah?
Dialogue: 0,0:08:33.61,0:08:35.45,中文,,0,0,0,,什么？
Dialogue: 0,0:08:35.45,0:08:39.48,英文,,0,0,0,,Yeah, so I didn't have to specifically say that answer is now a string.
Dialogue: 0,0:08:35.45,0:08:39.48,中文,,0,0,0,,是的，我没有必要明确地说 answer 现在是一个字符串。
Dialogue: 0,0:08:39.48,0:08:42.18,英文,,0,0,0,,And indeed, Python is dynamically typed.
Dialogue: 0,0:08:39.48,0:08:42.18,中文,,0,0,0,,实际上，python 是动态类型的。
Dialogue: 0,0:08:42.18,0:08:48.16,英文,,0,0,0,,And in fact, it will infer from context exactly what it is you are storing in that variable.
Dialogue: 0,0:08:42.18,0:08:48.16,中文,,0,0,0,,事实上，它会根据上下文推断出你存储在变量中的内容。
Dialogue: 0,0:08:48.16,0:08:54.13,英文,,0,0,0,,Other details that seem a little bit different.
Dialogue: 0,0:08:48.16,0:08:54.13,中文,,0,0,0,,其他细节看起来也有些不同。
Dialogue: 0,0:08:54.13,0:08:56.11,英文,,0,0,0,,A little bit different. What else jumps out at you here?
Dialogue: 0,0:08:54.13,0:08:56.11,中文,,0,0,0,,有一点不同。还有什么地方让你觉得奇怪吗？
Dialogue: 0,0:08:56.11,0:08:56.73,英文,,0,0,0,,I'll go back.
Dialogue: 0,0:08:56.11,0:08:56.73,中文,,0,0,0,,我们回到上面。
Dialogue: 0,0:08:56.73,0:08:58.83,英文,,0,0,0,,This was the C version.
Dialogue: 0,0:08:56.73,0:08:58.83,中文,,0,0,0,,这是 C 语言版本。
Dialogue: 0,0:08:58.83,0:09:02.83,英文,,0,0,0,,And maybe focus now on the second line, because we've rather exhausted the first.
Dialogue: 0,0:08:58.83,0:09:02.83,中文,,0,0,0,,也许现在可以关注第二行了，因为我们已经把第一行分析得差不多了。
Dialogue: 0,0:09:02.83,0:09:04.89,英文,,0,0,0,,Here's now the Python version.
Dialogue: 0,0:09:02.83,0:09:04.89,中文,,0,0,0,,这里是 python 版本。
Dialogue: 0,0:09:04.89,0:09:11.08,英文,,0,0,0,,What's different here? Yeah?
Dialogue: 0,0:09:04.89,0:09:11.08,中文,,0,0,0,,有什么不同？
Dialogue: 0,0:09:11.08,0:09:13.08,英文,,0,0,0,,Yeah, there's no percent s anymore.
Dialogue: 0,0:09:11.08,0:09:13.08,中文,,0,0,0,,没有 `%s` 了。
Dialogue: 0,0:09:13.08,0:09:16.68,英文,,0,0,0,,There's no second argument at the moment, per se, to print.
Dialogue: 0,0:09:13.08,0:09:16.68,中文,,0,0,0,,`print` 函数目前没有第二个参数。
Dialogue: 0,0:09:16.68,0:09:17.96,英文,,0,0,0,,Now, it is still a little weird.
Dialogue: 0,0:09:16.68,0:09:17.96,中文,,0,0,0,,现在，它看起来还是有点奇怪。
Dialogue: 0,0:09:17.96,0:09:21.78,英文,,0,0,0,,It's as though I've deployed some addition here, arithmetically. But that's not the case.
Dialogue: 0,0:09:17.96,0:09:21.78,中文,,0,0,0,,好像我在这里使用了加法运算。但事实并非如此。
Dialogue: 0,0:09:21.78,0:09:23.22,英文,,0,0,0,,Some of you have programmed before.
Dialogue: 0,0:09:21.78,0:09:23.22,中文,,0,0,0,,你们中有些人以前编写过程序。
Dialogue: 0,0:09:23.22,0:09:27.43,英文,,0,0,0,,And plus, some of you might know, means what in this context?
Dialogue: 0,0:09:23.22,0:09:27.43,中文,,0,0,0,,你们可能知道，在这个语境下，加号是什么意思？
Dialogue: 0,0:09:27.43,0:09:30.29,英文,,0,0,0,,So to combine, or more technically, anyone know the buzzword?
Dialogue: 0,0:09:27.43,0:09:30.29,中文,,0,0,0,,表示组合，或者更专业的说法，有人知道那个专业术语吗？
Dialogue: 0,0:09:30.29,0:09:41.92,英文,,0,0,0,,Yeah. To concatenate. So to concatenate is like the fancy way of what Scratch calls joining, which is to take one string on the left, one string on the right, and to join them together, to glue them together, if you will.
Dialogue: 0,0:09:30.29,0:09:41.92,中文,,0,0,0,,对，连接。 连接就像 Scratch 中的“合并”，就是将左边的字符串和右边的字符串连接在一起，或者说是粘在一起。
Dialogue: 0,0:09:41.92,0:09:43.44,英文,,0,0,0,,So this is not addition.
Dialogue: 0,0:09:41.92,0:09:43.44,中文,,0,0,0,,所以这不是加法。
Dialogue: 0,0:09:43.44,0:09:45.42,英文,,0,0,0,,It would be if it were numbers involved instead.
Dialogue: 0,0:09:43.44,0:09:45.42,中文,,0,0,0,,如果是数字的话，那就是加法了。
Dialogue: 0,0:09:45.42,0:09:54.22,英文,,0,0,0,,But because we've got a string, hello, comma, and another string implicitly in this variable based on what the human typed in in response to this getString function,
Dialogue: 0,0:09:45.42,0:09:54.22,中文,,0,0,0,,但因为这里有一个字符串 "hello"，一个逗号，以及另一个根据用户在 `get_string` 函数中输入的内容隐式存储在这个变量中的字符串，
Dialogue: 0,0:09:54.22,0:10:00.22,英文,,0,0,0,,that's going to concatenate hello, comma, space, and then David, or Carter, or whatever the human has typed in.
Dialogue: 0,0:09:54.22,0:10:00.22,中文,,0,0,0,,所以它会将 "hello"、逗号、空格以及 "David"、"Carter" 或用户输入的其他内容连接起来。
Dialogue: 0,0:10:00.22,0:10:02.71,英文,,0,0,0,,But it turns out there's going to be different ways to do this in Python.
Dialogue: 0,0:10:00.22,0:10:02.71,中文,,0,0,0,,但事实证明，在 python 中，有很多不同的方法可以做到这一点。
Dialogue: 0,0:10:02.71,0:10:09.87,英文,,0,0,0,,And we'll show you a few different ones. And here, too, try not to get too hung up on or frustrated by all of the different ways you can solve problems.
Dialogue: 0,0:10:02.71,0:10:09.87,中文,,0,0,0,,我们将向你展示几种不同的方法。同样，不要因为解决问题的多种方法而感到困惑或沮丧。
Dialogue: 0,0:10:09.87,0:10:14.00,英文,,0,0,0,,Odds are you're going to be picking up tips and techniques for years to come if you continue programming.
Dialogue: 0,0:10:09.87,0:10:14.00,中文,,0,0,0,,如果你继续编程，未来几年你都将学习到各种技巧和技术。
Dialogue: 0,0:10:14.00,0:10:16.82,英文,,0,0,0,,So let's just give you a few of the possible ways.
Dialogue: 0,0:10:14.00,0:10:16.82,中文,,0,0,0,,我们先给你介绍几种可能的方法。
Dialogue: 0,0:10:16.82,0:10:18.18,英文,,0,0,0,,So here's a second way.
Dialogue: 0,0:10:16.82,0:10:18.18,中文,,0,0,0,,这是第二种方法。
Dialogue: 0,0:10:18.18,0:10:21.90,英文,,0,0,0,,You could print out hello, David or hello, Carter.
Dialogue: 0,0:10:18.18,0:10:21.90,中文,,0,0,0,,你可以打印出 hello, David 或 hello, Carter。
Dialogue: 0,0:10:21.90,0:10:22.88,英文,,0,0,0,,But what has changed?
Dialogue: 0,0:10:21.90,0:10:22.88,中文,,0,0,0,,但有什么变化？
Dialogue: 0,0:10:22.88,0:10:26.23,英文,,0,0,0,,In the previous version, I used concatenation explicitly.
Dialogue: 0,0:10:22.88,0:10:26.23,中文,,0,0,0,,在之前的版本中，我显式地使用了字符串连接。
Dialogue: 0,0:10:26.23,0:10:30.99,英文,,0,0,0,,And the space here is important grammatically, just so we get that in the final phrase.
Dialogue: 0,0:10:26.23,0:10:30.99,中文,,0,0,0,,这里的空格在语法上很重要，这样才能在最终的短语中得到它。
Dialogue: 0,0:10:30.99,0:10:37.27,英文,,0,0,0,,Now I'm proposing to get rid of that space to add a comma outside of the double quotes as well.
Dialogue: 0,0:10:30.99,0:10:37.27,中文,,0,0,0,,现在我建议去掉空格，并在双引号外添加逗号。
Dialogue: 0,0:10:37.27,0:10:45.35,英文,,0,0,0,,But if you think back to C, this probably just means that print, similar in spirit to printf, can take not just one argument, but even two.
Dialogue: 0,0:10:37.27,0:10:45.35,中文,,0,0,0,,但如果你回想一下 C 语言，这可能意味着 print 函数，类似于 printf，它不仅可以接受一个参数，甚至可以接受两个参数。
Dialogue: 0,0:10:45.35,0:10:50.59,英文,,0,0,0,,And in fact, because of this comma in the middle that's outside of the double quotes, it's hello, comma,
Dialogue: 0,0:10:45.35,0:10:50.59,中文,,0,0,0,,事实上，由于中间的这个逗号在双引号之外，它是 hello 加逗号，
Dialogue: 0,0:10:50.59,0:10:56.44,英文,,0,0,0,,And then it will be automatically concatenated with, even without using the plus, to whatever the value of answer is.
Dialogue: 0,0:10:50.59,0:10:56.44,中文,,0,0,0,,然后它会自动与 answer 的值连接起来，即使不使用加号。
Dialogue: 0,0:10:56.44,0:11:05.24,英文,,0,0,0,,And by default, just for grammatical prettiness, the print function always gives you a space for free in between each of the multiple arguments you pass in.
Dialogue: 0,0:10:56.44,0:11:05.24,中文,,0,0,0,,默认情况下，为了语法上的美观，print 函数会在你传入的每个参数之间自动添加一个空格。
Dialogue: 0,0:11:05.24,0:11:07.32,英文,,0,0,0,,We'll see how you can override that down the line.
Dialogue: 0,0:11:05.24,0:11:07.32,中文,,0,0,0,,稍后我们将看到如何覆盖它。
Dialogue: 0,0:11:07.32,0:11:09.29,英文,,0,0,0,,But for now, that's just another way to do it.
Dialogue: 0,0:11:07.32,0:11:09.29,中文,,0,0,0,,但现在，这只是另一种实现方法。
Dialogue: 0,0:11:09.29,0:11:18.53,英文,,0,0,0,,Now, perhaps the better, if slightly cryptic, way to do this, or just the increasingly common way, is probably this third version, which looks a little weird, too.
Dialogue: 0,0:11:09.29,0:11:18.53,中文,,0,0,0,,现在，也许更好，或者说更常见的做法是第三种版本，它看起来也有点奇怪。
Dialogue: 0,0:11:18.53,0:11:20.09,英文,,0,0,0,,And probably the weirdness jumps out.
Dialogue: 0,0:11:18.53,0:11:20.09,中文,,0,0,0,,奇怪之处很明显。
Dialogue: 0,0:11:20.09,0:11:26.08,英文,,0,0,0,,We've suddenly introduced these curly braces, which I promised were mostly gone, and they are.
Dialogue: 0,0:11:20.09,0:11:26.08,中文,,0,0,0,,我们突然引入了花括号，我之前说过它们基本消失了，确实如此。
Dialogue: 0,0:11:26.08,0:11:33.24,英文,,0,0,0,,But inside of this string here, I've done a curly brace, which might mean what, just intuitively?
Dialogue: 0,0:11:26.08,0:11:33.24,中文,,0,0,0,,但在这个字符串中，我用了一个花括号，直觉上这意味着什么呢？
Dialogue: 0,0:11:33.24,0:11:35.56,英文,,0,0,0,,And here is sort of an example of how you learn a new language.
Dialogue: 0,0:11:33.24,0:11:35.56,中文,,0,0,0,,这里展示了一个学习新语言的例子。
Dialogue: 0,0:11:35.56,0:11:40.12,英文,,0,0,0,,Just kind of infer from context how Python probably works.
Dialogue: 0,0:11:35.56,0:11:40.12,中文,,0,0,0,,从上下文推断 python 是如何工作的。
Dialogue: 0,0:11:40.12,0:11:40.96,英文,,0,0,0,,What might this mean? Yeah.
Dialogue: 0,0:11:40.12,0:11:40.96,中文,,0,0,0,,这可能是什么意思呢？
Dialogue: 0,0:11:46.04,0:11:55.72,英文,,0,0,0,,Yeah, so this is an indication, because the curly braces, because this is the way Python was designed, that we want to plug in the value of answer, not literally A-N-S-W-E-R.
Dialogue: 0,0:11:46.04,0:11:55.72,中文,,0,0,0,,因为有大括号，因为 python 就是这样设计的，我们希望插入 answer 的值，而不是字面上的 A-N-S-W-E-R。
Dialogue: 0,0:11:55.72,0:12:01.81,英文,,0,0,0,,And the fancy word here is that the answer variable will be interpolated, that is, substituted with its actual value.
Dialogue: 0,0:11:55.72,0:12:01.81,中文,,0,0,0,,这里有个专业术语叫做插值，也就是说，用 answer 变量的实际值替换它。
Dialogue: 0,0:12:01.81,0:12:04.67,英文,,0,0,0,,But, but, but, and this is actually weird looking.
Dialogue: 0,0:12:01.81,0:12:04.67,中文,,0,0,0,,但是，但是，这看起来很奇怪。
Dialogue: 0,0:12:04.67,0:12:07.01,英文,,0,0,0,,This was introduced a few years ago to Python.
Dialogue: 0,0:12:04.67,0:12:07.01,中文,,0,0,0,,这是几年前引入 python 的。
Dialogue: 0,0:12:07.01,0:12:11.79,英文,,0,0,0,,What else did I have to change to make these curly braces work, apparently?
Dialogue: 0,0:12:07.01,0:12:11.79,中文,,0,0,0,,为了让这些大括号起作用，我还得改变什么？
Dialogue: 0,0:12:11.79,0:12:13.95,英文,,0,0,0,,Yeah?
Dialogue: 0,0:12:11.79,0:12:13.95,中文,,0,0,0,,对吧？
Dialogue: 0,0:12:13.95,0:12:19.74,英文,,0,0,0,,Yeah, there's this weird f. And so it's sort of like part of printf, but now it's inside the curly.
Dialogue: 0,0:12:13.95,0:12:19.74,中文,,0,0,0,,这里有个奇怪的 f。它有点像 printf 的一部分，但是现在它在大括号里面，
Dialogue: 0,0:12:19.74,0:12:21.38,英文,,0,0,0,,It's inside the parenthesis there.
Dialogue: 0,0:12:19.74,0:12:21.38,中文,,0,0,0,,在括号里面。
Dialogue: 0,0:12:21.38,0:12:23.22,英文,,0,0,0,,This is just the way Python designed this.
Dialogue: 0,0:12:21.38,0:12:23.22,中文,,0,0,0,,这就是 python 设计它的方式。
Dialogue: 0,0:12:23.22,0:12:38.30,英文,,0,0,0,,So a few years ago, when they introduced what are called format strings, or f strings, you literally prefix your quoted string with the letter f. And then you can use trickery like this, like putting curly braces so that the value will be substituted automatically.
Dialogue: 0,0:12:23.22,0:12:38.30,中文,,0,0,0,,几年前，当他们引入格式字符串，也就是 f 字符串时，\N你需要在引用的字符串前面加上字母 f。然后你就可以使用这样的技巧，比如放大括号，这样值就会被自动替换。
Dialogue: 0,0:12:38.30,0:12:43.40,英文,,0,0,0,,If you forget the f, you're going to literally see hello, comma, curly brace, answer, close, curly brace.
Dialogue: 0,0:12:38.30,0:12:43.40,中文,,0,0,0,,如果你忘记了 f，你就会看到 hello，逗号，大括号，answer，大括号。
Dialogue: 0,0:12:43.40,0:12:45.73,英文,,0,0,0,,If you add the f, it's indeed interpolated.
Dialogue: 0,0:12:43.40,0:12:45.73,中文,,0,0,0,,如果你加上 f，它就会被插值。
Dialogue: 0,0:12:45.73,0:12:47.65,英文,,0,0,0,,The value is plugged in.
Dialogue: 0,0:12:45.73,0:12:47.65,中文,,0,0,0,,值就会被插入。
Dialogue: 0,0:12:47.65,0:12:52.92,英文,,0,0,0,,All right, questions on how we can just say hello to the world via Python in this case?
Dialogue: 0,0:12:47.65,0:12:52.92,中文,,0,0,0,,好，关于我们如何在 python 中向世界问好的问题？
Dialogue: 0,0:12:52.92,0:12:55.40,英文,,0,0,0,,Yeah?
Dialogue: 0,0:12:52.92,0:12:55.40,中文,,0,0,0,,什么？
Dialogue: 0,0:12:55.40,0:12:57.29,英文,,0,0,0,,If you do this without the?
Dialogue: 0,0:12:55.40,0:12:57.29,中文,,0,0,0,,如果没有这个？
Dialogue: 0,0:12:57.29,0:13:05.21,英文,,0,0,0,,Without the F, if you omit the F, you will literally see H-E-L-L-O, curly brace, A-N-S-W-E-R, close curly brace.
Dialogue: 0,0:12:57.29,0:13:05.21,中文,,0,0,0,,如果没有 f，你会看到 H-E-L-L-O，大括号，A-N-S-W-E-R，大括号。
Dialogue: 0,0:13:05.21,0:13:08.39,英文,,0,0,0,,So in fact, let's do this. Let me go back to VS Code here quickly.
Dialogue: 0,0:13:05.21,0:13:08.39,中文,,0,0,0,,实际上，我们来演示一下，快速回到 VS Code。
Dialogue: 0,0:13:08.39,0:13:11.77,英文,,0,0,0,,I've still got my file called hello.py open.
Dialogue: 0,0:13:08.39,0:13:11.77,中文,,0,0,0,,我仍然打开了名为 hello.py 的文件。
Dialogue: 0,0:13:11.77,0:13:14.51,英文,,0,0,0,,And let me go ahead and change this ever so slightly.
Dialogue: 0,0:13:11.77,0:13:14.51,中文,,0,0,0,,我要稍微修改一下这个文件。
Dialogue: 0,0:13:14.51,0:13:21.00,英文,,0,0,0,,So I'm going to go ahead and let's say from. CS50 import getString.
Dialogue: 0,0:13:14.51,0:13:21.00,中文,,0,0,0,,我要输入 from cs50 import get_string。
Dialogue: 0,0:13:21.00,0:13:26.38,英文,,0,0,0,,And that's just the new syntax I propose using to import a function from someone else's library.
Dialogue: 0,0:13:21.00,0:13:26.38,中文,,0,0,0,,这是我建议用于从其他人的库中导入函数的新语法。
Dialogue: 0,0:13:26.38,0:13:33.64,英文,,0,0,0,,I'm going to now go ahead and ask the question, let's go ahead and use getString, storing the result and answer.
Dialogue: 0,0:13:26.38,0:13:33.64,中文,,0,0,0,,接下来我要问一个问题，使用 get_string，将结果存储在 answer 中。
Dialogue: 0,0:13:33.64,0:13:37.89,英文,,0,0,0,,So getString, quote unquote, what's your name, question mark.
Dialogue: 0,0:13:33.64,0:13:37.89,中文,,0,0,0,,即 get_string("你叫什么名字？")。
Dialogue: 0,0:13:37.89,0:13:42.43,英文,,0,0,0,,And then on this line, I'm going to deliberately make a mistake here, exactly to your question.
Dialogue: 0,0:13:37.89,0:13:42.43,中文,,0,0,0,,在这一行，我将故意犯一个错误，正好对应你的问题。
Dialogue: 0,0:13:42.43,0:13:46.99,英文,,0,0,0,,Let me just say hello, comma, answer, and just this.
Dialogue: 0,0:13:42.43,0:13:46.99,中文,,0,0,0,,输入 hello, answer。
Dialogue: 0,0:13:46.99,0:13:54.17,英文,,0,0,0,,Now, even though answer is a variable, Python's not going to be so presumptuous as to just plug in the value of a variable called answer.
Dialogue: 0,0:13:46.99,0:13:54.17,中文,,0,0,0,,尽管 answer 是一个变量，但 python 并不会自作主张地插入名为 answer 的变量的值。
Dialogue: 0,0:13:54.17,0:13:59.05,英文,,0,0,0,,What it's going to do, of course, is if I type in my name, whoops, I typed too fast.
Dialogue: 0,0:13:54.17,0:13:59.05,中文,,0,0,0,,如果我输入我的名字，它会... 我输入太快了。
Dialogue: 0,0:13:59.05,0:14:00.47,英文,,0,0,0,,Let me go ahead and rerun that again.
Dialogue: 0,0:13:59.05,0:14:00.47,中文,,0,0,0,,我再运行一遍。
Dialogue: 0,0:14:00.47,0:14:04.77,英文,,0,0,0,,If I run Python of hello.py, type in my name, and hit Enter,
Dialogue: 0,0:14:00.47,0:14:04.77,中文,,0,0,0,,运行 python hello.py，输入我的名字，然后按回车键，
Dialogue: 0,0:14:04.77,0:14:06.04,英文,,0,0,0,,I get hello, comma, answer.
Dialogue: 0,0:14:04.77,0:14:06.04,中文,,0,0,0,,得到 hello, answer。
Dialogue: 0,0:14:06.04,0:14:07.16,英文,,0,0,0,,Well, let me do one better.
Dialogue: 0,0:14:06.04,0:14:07.16,中文,,0,0,0,,我再改进一下。
Dialogue: 0,0:14:07.16,0:14:10.74,英文,,0,0,0,,Let me apply these curly braces as before.
Dialogue: 0,0:14:07.16,0:14:10.74,中文,,0,0,0,,像之前一样应用花括号。
Dialogue: 0,0:14:10.74,0:14:13.38,英文,,0,0,0,,Let me rerun Python of hello.py.
Dialogue: 0,0:14:10.74,0:14:13.38,中文,,0,0,0,,重新运行 python hello.py。
Dialogue: 0,0:14:13.38,0:14:14.04,英文,,0,0,0,,What's your name?
Dialogue: 0,0:14:13.38,0:14:14.04,中文,,0,0,0,,你叫什么名字？
Dialogue: 0,0:14:14.04,0:14:14.78,英文,,0,0,0,,D-A-V-I-D.
Dialogue: 0,0:14:14.04,0:14:14.78,中文,,0,0,0,,D-A-V-I-D。
Dialogue: 0,0:14:14.78,0:14:16.48,英文,,0,0,0,,And here's, again, the answer to your question.
Dialogue: 0,0:14:14.78,0:14:16.48,中文,,0,0,0,,这就是你的问题的答案。
Dialogue: 0,0:14:16.48,0:14:18.87,英文,,0,0,0,,Now we get literally the curly braces.
Dialogue: 0,0:14:16.48,0:14:18.87,中文,,0,0,0,,现在我们真的用上了花括号。
Dialogue: 0,0:14:18.87,0:14:22.67,英文,,0,0,0,,So the fix here, ultimately, is just going to be to add the f there.
Dialogue: 0,0:14:18.87,0:14:22.67,中文,,0,0,0,,所以最终的解决方法就是在那里加上 f。
Dialogue: 0,0:14:22.67,0:14:27.03,英文,,0,0,0,,Rerun my program again with DAVID, and now hello, comma, David.
Dialogue: 0,0:14:22.67,0:14:27.03,中文,,0,0,0,,用 David 重新运行程序，现在输出“hello，David”。
Dialogue: 0,0:14:27.03,0:14:30.91,英文,,0,0,0,,So this is admittedly a little more cryptic than the ones with the plus or the comma.
Dialogue: 0,0:14:27.03,0:14:30.91,中文,,0,0,0,,诚然，这比使用加号或逗号的要难理解一些。
Dialogue: 0,0:14:30.91,0:14:32.41,英文,,0,0,0,,But this is just increasingly common.
Dialogue: 0,0:14:30.91,0:14:32.41,中文,,0,0,0,,但这越来越普遍了。
Dialogue: 0,0:14:32.41,0:14:34.91,英文,,0,0,0,,Why? Because you can read it left to right. It's nice and convenient.
Dialogue: 0,0:14:32.41,0:14:34.91,中文,,0,0,0,,为什么？因为你可以从左到右阅读，既方便又美观。
Dialogue: 0,0:14:34.91,0:14:36.47,英文,,0,0,0,,It's less cryptic than the %s is.
Dialogue: 0,0:14:34.91,0:14:36.47,中文,,0,0,0,,它比 %s 更容易理解。
Dialogue: 0,0:14:36.47,0:14:44.90,英文,,0,0,0,,So it's sort of a new and improved version, if you will, of printf in C, based on decades of experience of programmers doing things like this.
Dialogue: 0,0:14:36.47,0:14:44.90,中文,,0,0,0,,可以说，这是 C 语言中 printf 的一个新的改进版本，它基于程序员几十年来进行此类操作的经验。
Dialogue: 0,0:14:44.90,0:14:49.52,英文,,0,0,0,,Questions on printing in this way?
Dialogue: 0,0:14:44.90,0:14:49.52,中文,,0,0,0,,关于这种打印方式，大家有什么问题吗？
Dialogue: 0,0:14:49.52,0:14:52.18,英文,,0,0,0,,We're now on our way to programming in Python.
Dialogue: 0,0:14:49.52,0:14:52.18,中文,,0,0,0,,我们现在正在学习用 python 编程。
Dialogue: 0,0:14:52.18,0:14:53.52,英文,,0,0,0,,Anything?
Dialogue: 0,0:14:52.18,0:14:53.52,中文,,0,0,0,,有吗？
Dialogue: 0,0:14:53.52,0:14:57.11,英文,,0,0,0,,All right, well, what more can we do with this language here?
Dialogue: 0,0:14:53.52,0:14:57.11,中文,,0,0,0,,那么我们还能用这种语言做些什么呢？
Dialogue: 0,0:14:57.11,0:15:12.56,英文,,0,0,0,,Well, let me propose that we consider that we have, for instance, a few other features that we can add to the mix as well, namely, let's say, some data types as well.
Dialogue: 0,0:14:57.11,0:15:12.56,中文,,0,0,0,,我建议我们考虑一下，例如，我们还可以添加一些其他的特性，比如一些数据类型。
Dialogue: 0,0:15:12.56,0:15:15.57,英文,,0,0,0,,So let me flip over here to back to the slides.
Dialogue: 0,0:15:12.56,0:15:15.57,中文,,0,0,0,,让我回到幻灯片。
Dialogue: 0,0:15:15.57,0:15:18.53,英文,,0,0,0,,And there's different data types in Python, as we'll soon see.
Dialogue: 0,0:15:15.57,0:15:18.53,中文,,0,0,0,,正如我们很快就会看到的，python 中有不同的数据类型。
Dialogue: 0,0:15:18.53,0:15:23.25,英文,,0,0,0,,But they're not as explicit as we already saw by using a string from getString.
Dialogue: 0,0:15:18.53,0:15:23.25,中文,,0,0,0,,但它们并不像我们使用 get_string 获取字符串时那样明确。
Dialogue: 0,0:15:23.25,0:15:25.35,英文,,0,0,0,,You don't have to explicitly state what it is.
Dialogue: 0,0:15:23.25,0:15:25.35,中文,,0,0,0,,你不需要明确说明它是什么。
Dialogue: 0,0:15:25.35,0:15:29.34,英文,,0,0,0,,But you saw, recall, and see all of these various data types.
Dialogue: 0,0:15:25.35,0:15:29.34,中文,,0,0,0,,但你应该还记得并见过所有这些不同的数据类型。
Dialogue: 0,0:15:29.34,0:15:33.82,英文,,0,0,0,,And then in Python, Kind of nicely enough, this list is about to get shorter.
Dialogue: 0,0:15:29.34,0:15:33.82,中文,,0,0,0,,然后在 python 中， 巧的是，这个列表马上就要缩短了。
Dialogue: 0,0:15:33.82,0:15:37.74,英文,,0,0,0,,And so here is our list in C. Here is an abbreviated list in Python.
Dialogue: 0,0:15:33.82,0:15:37.74,中文,,0,0,0,,这是我们在 C 语言中的列表，这是 python 中的简略列表。
Dialogue: 0,0:15:37.74,0:15:43.18,英文,,0,0,0,,So we're still going to have strings, but they're going to be more succinctly called strs now, S-T-R.
Dialogue: 0,0:15:37.74,0:15:43.18,中文,,0,0,0,,我们仍然会有字符串，但现在它们会被更简洁地称为 strs，S-T-R。
Dialogue: 0,0:15:43.18,0:15:45.36,英文,,0,0,0,,We're still going to have ints for integers.
Dialogue: 0,0:15:43.18,0:15:45.36,中文,,0,0,0,,我们仍然会有表示整数的 int。
Dialogue: 0,0:15:45.36,0:15:47.46,英文,,0,0,0,,We're still going to have floats for floating point values.
Dialogue: 0,0:15:45.36,0:15:47.46,中文,,0,0,0,,我们仍然会有表示浮点值的 float。
Dialogue: 0,0:15:47.46,0:15:49.98,英文,,0,0,0,,We're even going to have bools for true and false.
Dialogue: 0,0:15:47.46,0:15:49.98,中文,,0,0,0,,我们甚至会有表示真假的 bool。
Dialogue: 0,0:15:49.98,0:15:53.64,英文,,0,0,0,,But what's missing now from the list is long and floats.
Dialogue: 0,0:15:49.98,0:15:53.64,中文,,0,0,0,,但现在列表中缺少的是 long 和 floats。
Dialogue: 0,0:15:53.64,0:15:54.54,英文,,0,0,0,,And why is that?
Dialogue: 0,0:15:53.64,0:15:54.54,中文,,0,0,0,,为什么会这样呢？
Dialogue: 0,0:15:54.54,0:15:56.32,英文,,0,0,0,,Or rather, long and double.
Dialogue: 0,0:15:54.54,0:15:56.32,中文,,0,0,0,,或者更确切地说，是 long 和 double。
Dialogue: 0,0:15:56.32,0:15:58.67,英文,,0,0,0,,Well, recall that in C, those used more bits.
Dialogue: 0,0:15:56.32,0:15:58.67,中文,,0,0,0,,回想一下，在 C 语言中，它们使用更多的位。
Dialogue: 0,0:15:58.67,0:16:05.17,英文,,0,0,0,,Well, in Python, the smaller data types previously, int and float, themselves just use more bits for you.
Dialogue: 0,0:15:58.67,0:16:05.17,中文,,0,0,0,,而在 python 中，之前较小的数据类型，int 和 float，它们本身就为你使用了更多的位。
Dialogue: 0,0:16:05.17,0:16:08.11,英文,,0,0,0,,And so you don't need to distinguish between small and large.
Dialogue: 0,0:16:05.17,0:16:08.11,中文,,0,0,0,,所以你不需要区分大小。
Dialogue: 0,0:16:08.11,0:16:12.80,英文,,0,0,0,,You just use one data type, and the language gives you a bigger range than before.
Dialogue: 0,0:16:08.11,0:16:12.80,中文,,0,0,0,,你只需使用一种数据类型，该语言就会给你比以前更大的范围。
Dialogue: 0,0:16:12.80,0:16:21.40,英文,,0,0,0,,It turns out, though, there's going to be some other features as well of Python, these data types, one of which will be called range, another of which will be list. So gone will be arrays.
Dialogue: 0,0:16:12.80,0:16:21.40,中文,,0,0,0,,不过，事实证明，python 还会有一些其他的特性，这些数据类型，其中一个叫做 range，另一个叫做 list。所以数组将不复存在。
Dialogue: 0,0:16:21.40,0:16:28.21,英文,,0,0,0,,We'll actually use something literally called a list. Tuples, sort of like xy pairs for coordinates and things like that.
Dialogue: 0,0:16:21.40,0:16:28.21,中文,,0,0,0,,我们实际上会使用一个叫做 list 的东西。元组，有点像坐标等的 xy 对。
Dialogue: 0,0:16:28.21,0:16:33.49,英文,,0,0,0,,Dict for dictionaries. So we'll have built-in capabilities for storing keys and values, we'll see.
Dialogue: 0,0:16:28.21,0:16:33.49,中文,,0,0,0,,dict 用于字典。所以我们将有内置的功能来存储键和值，我们将会看到。
Dialogue: 0,0:16:33.49,0:16:35.17,英文,,0,0,0,,And even a set, sort of mathematically.
Dialogue: 0,0:16:33.49,0:16:35.17,中文,,0,0,0,,甚至还有一个集合，有点像数学上的集合。
Dialogue: 0,0:16:35.17,0:16:39.15,英文,,0,0,0,,A set is like a collection of values, but it automatically gets rid of duplicates for you.
Dialogue: 0,0:16:35.17,0:16:39.15,中文,,0,0,0,,集合就像值的集合，但它会自动为你删除重复项。
Dialogue: 0,0:16:39.15,0:16:43.54,英文,,0,0,0,,So all of these things we could absolutely implement in C if we wanted.
Dialogue: 0,0:16:39.15,0:16:43.54,中文,,0,0,0,,所以如果我们愿意，我们完全可以用 C 语言实现所有这些东西。
Dialogue: 0,0:16:43.54,0:16:50.50,英文,,0,0,0,,And indeed, in problem set 5, you've been implementing your very own spell checker using some form of hash table.
Dialogue: 0,0:16:43.54,0:16:50.50,中文,,0,0,0,,事实上，在问题集 5 中，你一直在使用某种形式的哈希表来实现你自己的拼写检查器。
Dialogue: 0,0:16:50.50,0:16:56.09,英文,,0,0,0,,Well, it turns out that in Python, you can solve those same problems, but perhaps a little more readily.
Dialogue: 0,0:16:50.50,0:16:56.09,中文,,0,0,0,,事实证明，在 python 中，你可以解决同样的问题，而且可能更容易一些。
Dialogue: 0,0:16:56.09,0:16:59.17,英文,,0,0,0,,In fact, let me go back over here to VS Code.
Dialogue: 0,0:16:56.09,0:16:59.17,中文,,0,0,0,,让我回到 VS Code。
Dialogue: 0,0:16:59.17,0:17:06.30,英文,,0,0,0,,And let me propose that I do the following. Let me go ahead and create a file called dictionary.py.
Dialogue: 0,0:16:59.17,0:17:06.30,中文,,0,0,0,,我建议这样做。 我要创建一个名为 dictionary.py 的文件。
Dialogue: 0,0:17:06.30,0:17:17.08,英文,,0,0,0,,Let me propose that I try to implement, say, problem set 5, our spell checker in Python, instead of C, and achieve ultimately the same kind of behavior
Dialogue: 0,0:17:06.30,0:17:17.08,中文,,0,0,0,,我建议尝试用 python 实现第五个问题集，也就是我们的拼写检查器，而不是用 C 语言，并最终实现相同的功能。
Dialogue: 0,0:17:17.08,0:17:19.42,英文,,0,0,0,,Whereby I'll be able to spell check a whole bunch of words.
Dialogue: 0,0:17:17.08,0:17:19.42,中文,,0,0,0,,也就是能够拼写检查一大堆words。
Dialogue: 0,0:17:19.42,0:17:24.09,英文,,0,0,0,,So this is jumping the gun a little bit, because you're about to see syntax we'll revisit over the course of today.
Dialogue: 0,0:17:19.42,0:17:24.09,中文,,0,0,0,,这有点超前了，因为你将要看到的语法我们今天会重温。
Dialogue: 0,0:17:24.09,0:17:26.89,英文,,0,0,0,,But for now, I've got a new file called dictionary.py.
Dialogue: 0,0:17:24.09,0:17:26.89,中文,,0,0,0,,但现在，我创建了一个名为 dictionary.py 的新文件。
Dialogue: 0,0:17:26.89,0:17:30.79,英文,,0,0,0,,And let me begin to create some placeholders for functions.
Dialogue: 0,0:17:26.89,0:17:30.79,中文,,0,0,0,,让我开始为函数创建一些占位符。
Dialogue: 0,0:17:30.79,0:17:34.90,英文,,0,0,0,,We'll see in just a bit that in Python, you can define a function called check.
Dialogue: 0,0:17:30.79,0:17:34.90,中文,,0,0,0,,我们很快就会看到，在 python 中，你可以定义一个名为 check 的函数。
Dialogue: 0,0:17:34.90,0:17:38.28,英文,,0,0,0,,And that check function can take a word as its input.
Dialogue: 0,0:17:34.90,0:17:38.28,中文,,0,0,0,,这个 check 函数可以接受一个word作为输入。
Dialogue: 0,0:17:38.28,0:17:40.52,英文,,0,0,0,,And I'll come back to this in just a moment.
Dialogue: 0,0:17:38.28,0:17:40.52,中文,,0,0,0,,我马上会回到这一点。
Dialogue: 0,0:17:40.52,0:17:47.35,英文,,0,0,0,,In Python, I can define a second function, like load, which itself will take a whole dictionary, just like in problem set 5.
Dialogue: 0,0:17:40.52,0:17:47.35,中文,,0,0,0,,在 python 中，我可以定义第二个函数，比如 load，它本身将接受整个字典，就像在第五个问题集中一样。
Dialogue: 0,0:17:47.35,0:17:51.07,英文,,0,0,0,,And I'll go ahead and come back to the implementation of this.
Dialogue: 0,0:17:47.35,0:17:51.07,中文,,0,0,0,,我将继续回到它的实现。
Dialogue: 0,0:17:51.07,0:17:59.29,英文,,0,0,0,,Meanwhile, we might similarly implement a function called size, which takes no arguments, but ultimately is going to return the size of my dictionary of words.
Dialogue: 0,0:17:51.07,0:17:59.29,中文,,0,0,0,,同时，我们也可以类似地实现一个名为 size 的函数，它不接受任何参数，但最终将返回字典的大小。
Dialogue: 0,0:17:59.29,0:18:02.50,英文,,0,0,0,,And then lastly, for consistency with problem set 5,
Dialogue: 0,0:17:59.29,0:18:02.50,中文,,0,0,0,,最后，为了与第五个问题集保持一致，
Dialogue: 0,0:18:02.50,0:18:09.52,英文,,0,0,0,,We might define an unload function whose purpose in life is to free any memory that you've been using just to give it back to the computer.
Dialogue: 0,0:18:02.50,0:18:09.52,中文,,0,0,0,,我们可以定义一个 unload 函数，它的作用是释放你一直在使用的任何内存，将其归还给计算机。
Dialogue: 0,0:18:09.52,0:18:16.00,英文,,0,0,0,,Now, odds are, whether you're still working on Speller or have finished Speller, you wrote a decent amount of lines of code.
Dialogue: 0,0:18:09.52,0:18:16.00,中文,,0,0,0,,现在，无论你是在继续做拼写检查器还是已经完成了，你都写了不少代码。
Dialogue: 0,0:18:16.00,0:18:18.68,英文,,0,0,0,,And indeed, it's been, by design, a challenge.
Dialogue: 0,0:18:16.00,0:18:18.68,中文,,0,0,0,,事实上，设计它的初衷就是一个挑战。
Dialogue: 0,0:18:18.68,0:18:26.60,英文,,0,0,0,,But one of the reasons for these higher-level languages like Python is that you can stand on the shoulders of programmers before you and solve
Dialogue: 0,0:18:18.68,0:18:26.60,中文,,0,0,0,,但 python 之类的这些高级语言的原因之一是，你可以站在前人的肩膀上解决问题，
Dialogue: 0,0:18:26.60,0:18:34.83,英文,,0,0,0,,Very common problems, much more quickly, so that you can focus on building your new app, or your web application, or your own project to solve problems of interest to you.
Dialogue: 0,0:18:26.60,0:18:34.83,中文,,0,0,0,,这样你就可以更快地解决常见问题，从而专注于构建新的应用程序、Web 应用程序或自己的项目，以解决你感兴趣的问题。
Dialogue: 0,0:18:34.83,0:18:44.09,英文,,0,0,0,,So at the risk of crushing some spirits, let me propose that in Python, if you want a dictionary for something like a spell checker, well, that's fine.
Dialogue: 0,0:18:34.83,0:18:44.09,中文,,0,0,0,,冒着打击大家的积极性的风险，我建议在 python 中，如果你想要一个像拼写检查器那样的字典，那完全没问题。
Dialogue: 0,0:18:44.09,0:18:53.33,英文,,0,0,0,,Go ahead and give yourself a variable, like words, to store all of those words, and just assign it equal to a dictionary, or dict for short in Python.
Dialogue: 0,0:18:44.09,0:18:53.33,中文,,0,0,0,,你可以创建一个变量，比如 words，来存储所有这些word，然后将其赋值给一个字典，或者在 python 中简称为 dict。
Dialogue: 0,0:18:53.33,0:18:55.27,英文,,0,0,0,,That will give you a hash table.
Dialogue: 0,0:18:53.33,0:18:55.27,中文,,0,0,0,,这将为你提供一个哈希表。
Dialogue: 0,0:18:55.27,0:19:00.07,英文,,0,0,0,,Now it turns out in Speller, recall, you don't need to worry about words and definitions.
Dialogue: 0,0:18:55.27,0:19:00.07,中文,,0,0,0,,回想一下，在 Speller 中，你不需要担心words和def。
Dialogue: 0,0:19:00.07,0:19:02.19,英文,,0,0,0,,It's just about spell checking the words.
Dialogue: 0,0:19:00.07,0:19:02.19,中文,,0,0,0,,它只是用来拼写检查words的。
Dialogue: 0,0:19:02.19,0:19:04.41,英文,,0,0,0,,So strictly speaking, we don't need keys and values.
Dialogue: 0,0:19:02.19,0:19:04.41,中文,,0,0,0,,所以严格来说，我们不需要键和值。
Dialogue: 0,0:19:04.41,0:19:05.75,英文,,0,0,0,,We just need keys.
Dialogue: 0,0:19:04.41,0:19:05.75,中文,,0,0,0,,我们只需要键。
Dialogue: 0,0:19:05.75,0:19:11.38,英文,,0,0,0,,So I'm going to save myself a few more keystrokes by just saying that technically in Python, using a set suffices.
Dialogue: 0,0:19:05.75,0:19:11.38,中文,,0,0,0,,所以为了少打几个字，从技术上讲，在 python 中使用 set 就足够了。
Dialogue: 0,0:19:11.38,0:19:14.10,英文,,0,0,0,,Again, a set is just a collection of values with no duplicates.
Dialogue: 0,0:19:11.38,0:19:14.10,中文,,0,0,0,,同样，set 只是一个没有重复值的值的集合。
Dialogue: 0,0:19:14.10,0:19:18.34,英文,,0,0,0,,But they don't necessarily have keys and values. It's just one or the other.
Dialogue: 0,0:19:14.10,0:19:18.34,中文,,0,0,0,,但它们不一定有键和值。它只能是其中之一。
Dialogue: 0,0:19:18.34,0:19:23.38,英文,,0,0,0,,But now that I have on line 1, I claim, the equivalent in Python of a hash table,
Dialogue: 0,0:19:18.34,0:19:23.38,中文,,0,0,0,,但是现在我在第 1 行有了一个 python 中等效的哈希表，
Dialogue: 0,0:19:23.38,0:19:25.78,英文,,0,0,0,,I can actually do something like this.
Dialogue: 0,0:19:23.38,0:19:25.78,中文,,0,0,0,,我实际上可以这样做。
Dialogue: 0,0:19:25.78,0:19:29.15,英文,,0,0,0,,Here's how I might implement the check function in Python.
Dialogue: 0,0:19:25.78,0:19:29.15,中文,,0,0,0,,我可以这样在 python 中实现 check 函数。
Dialogue: 0,0:19:29.15,0:19:35.91,英文,,0,0,0,,If the word passed into this function is in my variable called words, well, return true.
Dialogue: 0,0:19:29.15,0:19:35.91,中文,,0,0,0,,如果传递给这个函数的word在我的变量 words 中，那么就返回 true。
Dialogue: 0,0:19:35.91,0:19:39.46,英文,,0,0,0,,Else, go ahead and return false.
Dialogue: 0,0:19:35.91,0:19:39.46,中文,,0,0,0,,否则，返回 false。
Dialogue: 0,0:19:39.46,0:19:40.38,英文,,0,0,0,,Done.
Dialogue: 0,0:19:39.46,0:19:40.38,中文,,0,0,0,,完成。
Dialogue: 0,0:19:40.38,0:19:46.87,英文,,0,0,0,,And wait, you're thinking, if anything at all, maybe we want to handle lowercase instead of just uppercase and lowercase.
Dialogue: 0,0:19:40.38,0:19:46.87,中文,,0,0,0,,等等，你在想，如果可以的话，也许我们想处理小写，而不仅仅是大写和小写。
Dialogue: 0,0:19:46.87,0:19:51.61,英文,,0,0,0,,Well, you know what? In Python, if you want to force a whole word to lowercase, you don't have to iterate over it with a loop.
Dialogue: 0,0:19:46.87,0:19:51.61,中文,,0,0,0,,你知道吗？在 python 中，如果你想强制将整个word转换为小写，你不需要使用循环遍历它。
Dialogue: 0,0:19:51.61,0:19:54.35,英文,,0,0,0,,You don't have to use any of that C-type functions or anything.
Dialogue: 0,0:19:51.61,0:19:54.35,中文,,0,0,0,,你不需要使用任何 C 类型函数或其他任何东西。
Dialogue: 0,0:19:54.35,0:19:59.31,英文,,0,0,0,,Just say word.lower, and that will convert the whole thing to lowercase for parity with the dictionary.
Dialogue: 0,0:19:54.35,0:19:59.31,中文,,0,0,0,,只要用 word.lower，它就会把整个字符串转换成小写，以便与字典保持一致。
Dialogue: 0,0:19:59.31,0:20:02.45,英文,,0,0,0,,All right, how about something like the load function in Python?
Dialogue: 0,0:19:59.31,0:20:02.45,中文,,0,0,0,,那 python 中的 load 函数怎么样？
Dialogue: 0,0:20:02.45,0:20:12.22,英文,,0,0,0,,Well, in Python, you can open files just like in C. For instance, in Python, I might do open the dictionary argument in read mode, just like fopen in Python.
Dialogue: 0,0:20:02.45,0:20:12.22,中文,,0,0,0,,在 python 中，你可以像在 C 语言中一样打开文件。例如，在 python 中，我可以像在 C 语言中使用 fopen 一样，以读取模式打开字典参数。
Dialogue: 0,0:20:12.22,0:20:21.60,英文,,0,0,0,,I might do something like this. For each line in that file, let me go ahead and add to my words variable that line.
Dialogue: 0,0:20:12.22,0:20:21.60,中文,,0,0,0,,我可以这样做。对于文件中的每一行，我都会把它添加到我的 words 变量中。
Dialogue: 0,0:20:21.60,0:20:25.11,英文,,0,0,0,,And then let me go ahead and close that file.
Dialogue: 0,0:20:21.60,0:20:25.11,中文,,0,0,0,,然后关闭文件。
Dialogue: 0,0:20:25.11,0:20:26.39,英文,,0,0,0,,And I think I'm done.
Dialogue: 0,0:20:25.11,0:20:26.39,中文,,0,0,0,,我想我已经完成了。
Dialogue: 0,0:20:26.39,0:20:28.77,英文,,0,0,0,,I'm just going to go ahead and return true.
Dialogue: 0,0:20:26.39,0:20:28.77,中文,,0,0,0,,我要做的就是返回 true。
Dialogue: 0,0:20:28.77,0:20:30.25,英文,,0,0,0,,just because I think I'm already done.
Dialogue: 0,0:20:28.77,0:20:30.25,中文,,0,0,0,,因为我认为我已经完成了。
Dialogue: 0,0:20:30.25,0:20:32.35,英文,,0,0,0,,Now here, too, I could nitpick a little bit.
Dialogue: 0,0:20:30.25,0:20:32.35,中文,,0,0,0,,这里我也可以挑剔一下。
Dialogue: 0,0:20:32.35,0:20:43.82,英文,,0,0,0,,Technically, if I'm reading in every line from the file, every line in the dictionary ends with technically a backslash n. But there's an easy way to get rid of that, just like you might in C with an alternative syntax.
Dialogue: 0,0:20:32.35,0:20:43.82,中文,,0,0,0,,从技术上讲，如果我读取文件中的每一行，字典中的每一行技术上都以反斜杠 n 结尾。\N但有一种简单的方法可以去掉它，就像你在 C 语言中使用另一种语法一样。
Dialogue: 0,0:20:43.82,0:20:45.38,英文,,0,0,0,,What I'm actually going to do is this.
Dialogue: 0,0:20:43.82,0:20:45.38,中文,,0,0,0,,我要做的是这个。
Dialogue: 0,0:20:45.38,0:20:48.01,英文,,0,0,0,,Let me grab from the current line.
Dialogue: 0,0:20:45.38,0:20:48.01,中文,,0,0,0,,让我从当前行抓取。
Dialogue: 0,0:20:48.01,0:20:58.14,英文,,0,0,0,,the current word by stripping off with reverse strip, rstrip, a function we'll again see that just gets rid of the trailing new line, the backslash n at the end of that line.
Dialogue: 0,0:20:48.01,0:20:58.14,中文,,0,0,0,,当前word，方法是用反向去除空格函数 rstrip 去掉尾随的换行符，也就是该行末尾的反斜杠 n。我们稍后会再次看到这个函数。
Dialogue: 0,0:20:58.14,0:21:02.14,英文,,0,0,0,,And what I really want to do then is add this word to that dictionary.
Dialogue: 0,0:20:58.14,0:21:02.14,中文,,0,0,0,,然后我真正想做的是把这个word添加到字典中。
Dialogue: 0,0:21:02.14,0:21:08.88,英文,,0,0,0,,Meanwhile, if I want to figure out what the size is of my dictionary, well, in C, you're probably writing code to iterate over all of those lines.
Dialogue: 0,0:21:02.14,0:21:08.88,中文,,0,0,0,,同时，如果我想知道字典的大小，在 C 语言中，你可能会编写代码来迭代所有这些行。
Dialogue: 0,0:21:08.88,0:21:12.13,英文,,0,0,0,,And you're just going to count them up using a variable.
Dialogue: 0,0:21:08.88,0:21:12.13,中文,,0,0,0,,然后使用一个变量来统计它们的数量。
Dialogue: 0,0:21:12.13,0:21:15.67,英文,,0,0,0,,Not so in Python. You can just return the length of those words.
Dialogue: 0,0:21:12.13,0:21:15.67,中文,,0,0,0,,在 python 中则不然。你可以直接返回这些words的长度。
Dialogue: 0,0:21:15.67,0:21:19.45,英文,,0,0,0,,And better still, in Python, you don't have to manage your own memory.
Dialogue: 0,0:21:15.67,0:21:19.45,中文,,0,0,0,,更好的是，在 python 中，你不需要管理自己的内存。
Dialogue: 0,0:21:19.45,0:21:24.33,英文,,0,0,0,,No more malloc, no more free, no more manual thinking about memory.
Dialogue: 0,0:21:19.45,0:21:24.33,中文,,0,0,0,,不再需要 malloc、free，也不再需要手动考虑内存问题。
Dialogue: 0,0:21:24.33,0:21:27.45,英文,,0,0,0,,The language just deals with all of that for you.
Dialogue: 0,0:21:24.33,0:21:27.45,中文,,0,0,0,,语言本身会帮你处理好这一切。
Dialogue: 0,0:21:27.45,0:21:33.85,英文,,0,0,0,,So you know what? It suffices for me to just return true and claim that unloading is done for me.
Dialogue: 0,0:21:27.45,0:21:33.85,中文,,0,0,0,,你知道吗？我只需要返回 true 并声明卸载已完成就足够了。
Dialogue: 0,0:21:33.85,0:21:35.23,英文,,0,0,0,,And that's it.
Dialogue: 0,0:21:33.85,0:21:35.23,中文,,0,0,0,,就是这样。
Dialogue: 0,0:21:35.23,0:21:45.70,英文,,0,0,0,,Again, whether you're in the middle of or already finished, this might perhaps suggest some frustration, but also enlightenment in that this is why higher level languages exist.
Dialogue: 0,0:21:35.23,0:21:45.70,中文,,0,0,0,,同样，无论你是正在进行中还是已经完成，这都可能暗示着一些挫败感，但也启发你，这就是为什么存在更高级别的语言。
Dialogue: 0,0:21:45.70,0:21:52.02,英文,,0,0,0,,You can build on top of the same principles, the same ideas with which you've been dealing, struggling even this past week.
Dialogue: 0,0:21:45.70,0:21:52.02,中文,,0,0,0,,你可以基于相同的原则、相同的理念进行构建，这些原则和理念正是你过去一周一直在处理甚至苦苦挣扎的内容。
Dialogue: 0,0:21:52.02,0:21:55.08,英文,,0,0,0,,But you can now express yourself all the more succinctly.
Dialogue: 0,0:21:52.02,0:21:55.08,中文,,0,0,0,,但你现在可以更简洁地表达自己。
Dialogue: 0,0:21:55.08,0:21:58.50,英文,,0,0,0,,Like this one line implements a hash table for you.
Dialogue: 0,0:21:55.08,0:21:58.50,中文,,0,0,0,,就像这一行代码就为你实现了一个哈希表。
Dialogue: 0,0:21:58.50,0:22:03.39,英文,,0,0,0,,And all of this now just uses that hash table in a simpler way.
Dialogue: 0,0:21:58.50,0:22:03.39,中文,,0,0,0,,而现在所有这些都以更简单的方式使用该哈希表。
Dialogue: 0,0:22:03.39,0:22:14.95,英文,,0,0,0,,Any questions now on this, keeping in mind that the point, nonetheless, of Speller and pset5 is to understand what's really going on underneath the hood, and better still, to notice this.
Dialogue: 0,0:22:03.39,0:22:14.95,中文,,0,0,0,,现在对这方面有任何疑问吗？请记住，Speller 和 pset5 的意义在于理解底层到底发生了什么，以及更好地注意到这一点。
Dialogue: 0,0:22:14.95,0:22:16.83,英文,,0,0,0,,This might seem all rather amazing.
Dialogue: 0,0:22:14.95,0:22:16.83,中文,,0,0,0,,这可能看起来很神奇。
Dialogue: 0,0:22:16.83,0:22:18.03,英文,,0,0,0,,But let me go ahead and do this.
Dialogue: 0,0:22:16.83,0:22:18.03,中文,,0,0,0,,但是让我继续这样做。
Dialogue: 0,0:22:18.03,0:22:21.39,英文,,0,0,0,,I've actually got a couple of versions of Speller written here.
Dialogue: 0,0:22:18.03,0:22:21.39,中文,,0,0,0,,我实际上已经写了几个版本的 Speller。
Dialogue: 0,0:22:21.39,0:22:24.85,英文,,0,0,0,,And I've got a version written in C that I won't show the source code for.
Dialogue: 0,0:22:21.39,0:22:24.85,中文,,0,0,0,,我有一个用 C 语言编写的版本，我不会展示它的源代码。
Dialogue: 0,0:22:24.85,0:22:29.09,英文,,0,0,0,,But I'm going to go ahead and make that version of Speller in C.
Dialogue: 0,0:22:24.85,0:22:29.09,中文,,0,0,0,,但我要继续制作 C 语言版本的 Speller。
Dialogue: 0,0:22:29.09,0:22:34.32,英文,,0,0,0,,And I'm going to go ahead here and, let's say, split my window here for just a moment.
Dialogue: 0,0:22:29.09,0:22:34.32,中文,,0,0,0,,我要在这里继续，比方说，将我的窗口拆分一会儿。
Dialogue: 0,0:22:34.32,0:22:38.70,英文,,0,0,0,,And I'm going to go into a Python version of Speller, really, that I just wrote.
Dialogue: 0,0:22:34.32,0:22:38.70,中文,,0,0,0,,我要进入我刚刚用 python 编写的 Speller 版本。
Dialogue: 0,0:22:38.70,0:22:44.97,英文,,0,0,0,,And on the left-hand side here, let me go ahead and run Speller, the version I compiled in C.
Dialogue: 0,0:22:38.70,0:22:44.97,中文,,0,0,0,,在我的左手边，让我继续运行 Speller，这是我用 C 语言编译的版本。
Dialogue: 0,0:22:44.97,0:22:50.11,英文,,0,0,0,,using a big text like the Sherlock Holmes text, which has a whole lot of words in it.
Dialogue: 0,0:22:44.97,0:22:50.11,中文,,0,0,0,,使用像夏洛克·福尔摩斯文本这样的大文本，其中包含很多words。
Dialogue: 0,0:22:50.11,0:22:57.61,英文,,0,0,0,,And on the right-hand side, let me run Python of speller.py, which is a separate file I wrote in advance, just like we give you, speller.c.
Dialogue: 0,0:22:50.11,0:22:57.61,中文,,0,0,0,,在我的右手边，让我运行 python 的 speller.py，这是我提前写好的一个单独的文件，就像我们给你的 speller.c 一样。
Dialogue: 0,0:22:57.61,0:23:00.95,英文,,0,0,0,,And I'll similarly run this on the Sherlock Holmes text.
Dialogue: 0,0:22:57.61,0:23:00.95,中文,,0,0,0,,我将类似地在夏洛克·福尔摩斯文本上运行它。
Dialogue: 0,0:23:00.95,0:23:06.21,英文,,0,0,0,,And I'm going to do my best to hit Enter on the left and the right of my screen at the same time.
Dialogue: 0,0:23:00.95,0:23:06.21,中文,,0,0,0,,我会尽力同时按下屏幕左侧和右侧的 Enter 键。
Dialogue: 0,0:23:06.21,0:23:10.65,英文,,0,0,0,,But we should see, hopefully, the same list of misspelled words and the timings thereof.
Dialogue: 0,0:23:06.21,0:23:10.65,中文,,0,0,0,,但我们应该能看到，相同的拼写错误words列表以及它们的时间。
Dialogue: 0,0:23:10.65,0:23:12.28,英文,,0,0,0,,So here we go on the right.
Dialogue: 0,0:23:10.65,0:23:12.28,中文,,0,0,0,,右边开始了。
Dialogue: 0,0:23:12.28,0:23:15.64,英文,,0,0,0,,Here we go on the left.
Dialogue: 0,0:23:12.28,0:23:15.64,中文,,0,0,0,,左边也开始了。
Dialogue: 0,0:23:15.64,0:23:18.67,英文,,0,0,0,,All right, sort of a race to see which one wins here.
Dialogue: 0,0:23:15.64,0:23:18.67,中文,,0,0,0,,好，看哪边赢。
Dialogue: 0,0:23:18.67,0:23:19.97,英文,,0,0,0,,C is on the left.
Dialogue: 0,0:23:18.67,0:23:19.97,中文,,0,0,0,,C 在左边。
Dialogue: 0,0:23:19.97,0:23:22.23,英文,,0,0,0,,Python is on the right.
Dialogue: 0,0:23:19.97,0:23:22.23,中文,,0,0,0,,python 在右边。
Dialogue: 0,0:23:22.23,0:23:25.64,英文,,0,0,0,,OK, interesting.
Dialogue: 0,0:23:22.23,0:23:25.64,中文,,0,0,0,,有意思。
Dialogue: 0,0:23:25.64,0:23:28.38,英文,,0,0,0,,Hopefully, Python's close behind.
Dialogue: 0,0:23:25.64,0:23:28.38,中文,,0,0,0,,希望 python 紧随其后。
Dialogue: 0,0:23:28.38,0:23:33.42,英文,,0,0,0,,Note that some of this is internet delay, and so it might not necessarily be a crazy number of seconds.
Dialogue: 0,0:23:28.38,0:23:33.42,中文,,0,0,0,,注意，这其中一部分是网络延迟，所以可能不一定是差了几秒。
Dialogue: 0,0:23:33.42,0:23:39.81,英文,,0,0,0,,But the system is indeed using, if we measure at a low level, how much time the CPU spent executing my code.
Dialogue: 0,0:23:33.42,0:23:39.81,中文,,0,0,0,,但系统确实在使用，如果我们以较低的级别测量，CPU 执行我的代码所花费的时间。
Dialogue: 0,0:23:39.81,0:23:42.31,英文,,0,0,0,,C took a total of 1.64 seconds.
Dialogue: 0,0:23:39.81,0:23:42.31,中文,,0,0,0,,C 花费了 1.64 秒。
Dialogue: 0,0:23:42.31,0:23:46.93,英文,,0,0,0,,That was pretty fast, even though it took a moment more for all of the bytes to come over the internet.
Dialogue: 0,0:23:42.31,0:23:46.93,中文,,0,0,0,,这已经相当快了，即使所有字节通过互联网传输还需要更多时间。
Dialogue: 0,0:23:46.93,0:23:50.25,英文,,0,0,0,,The Python version, though, took what?
Dialogue: 0,0:23:46.93,0:23:50.25,中文,,0,0,0,,那么 python 版本花了多少时间？
Dialogue: 0,0:23:50.25,0:23:50.80,英文,,0,0,0,,2.44 seconds.
Dialogue: 0,0:23:50.25,0:23:50.80,中文,,0,0,0,,2.44 秒。
Dialogue: 0,0:23:50.80,0:23:53.04,英文,,0,0,0,,So what might an inference be?
Dialogue: 0,0:23:50.80,0:23:53.04,中文,,0,0,0,,那么可以推断出什么？
Dialogue: 0,0:23:53.04,0:23:59.90,英文,,0,0,0,,I mean, one, maybe I'm just better at programming in C than I am in Python, which is probably not true.
Dialogue: 0,0:23:53.04,0:23:59.90,中文,,0,0,0,,我的意思是，也许我只是更擅长用 C 编程，而不是 python，这可能不是真的。
Dialogue: 0,0:23:59.90,0:24:11.74,英文,,0,0,0,,But what else might you infer from this example? Should we maybe give up on Python, stick with C?
Dialogue: 0,0:23:59.90,0:24:11.74,中文,,0,0,0,,但从这个例子中你还能推断出什么？我们应该放弃 python，坚持使用 C 吗？
Dialogue: 0,0:24:11.74,0:24:12.08,英文,,0,0,0,,No?
Dialogue: 0,0:24:11.74,0:24:12.08,中文,,0,0,0,,不？
Dialogue: 0,0:24:12.08,0:24:14.06,英文,,0,0,0,,So what might be going on here?
Dialogue: 0,0:24:12.08,0:24:14.06,中文,,0,0,0,,那么这里可能发生了什么？
Dialogue: 0,0:24:14.06,0:24:22.17,英文,,0,0,0,,Like, why is the Python version that I claim is correct, and I think the numbers all line up, just not the times, where's the trade-off here?
Dialogue: 0,0:24:14.06,0:24:22.17,中文,,0,0,0,,比如，为什么我声称 python 版本是正确的，我认为数字都对得上，只是时间不对，这里的代价是什么？
Dialogue: 0,0:24:22.17,0:24:24.28,英文,,0,0,0,,Well, here again is sort of this design trade-off, yeah.
Dialogue: 0,0:24:22.17,0:24:24.28,中文,,0,0,0,,这又回到了设计上的权衡问题。
Dialogue: 0,0:24:29.45,0:24:30.89,英文,,0,0,0,,Yeah, exactly.
Dialogue: 0,0:24:29.45,0:24:30.89,中文,,0,0,0,,没错。
Dialogue: 0,0:24:30.89,0:24:38.94,英文,,0,0,0,,In order to save the human programmer time, there's a lot more features built into Python, more functions, more automatic management of memory, and so forth.
Dialogue: 0,0:24:30.89,0:24:38.94,中文,,0,0,0,,为了节省程序员的时间，python 内置了更多特性，更多函数，更多内存自动管理等等。
Dialogue: 0,0:24:38.94,0:24:40.26,英文,,0,0,0,,And you have to pay a price.
Dialogue: 0,0:24:38.94,0:24:40.26,中文,,0,0,0,,但这是有代价的。
Dialogue: 0,0:24:40.26,0:24:43.70,英文,,0,0,0,,Like, someone else's code is doing all of that work for you.
Dialogue: 0,0:24:40.26,0:24:43.70,中文,,0,0,0,,比如，别人的代码为你做了所有这些工作。
Dialogue: 0,0:24:43.70,0:24:49.87,英文,,0,0,0,,But if they were in some number of lines of code, those are just more lines of code that need to be executed for you, whereas here,
Dialogue: 0,0:24:43.70,0:24:49.87,中文,,0,0,0,,但如果它们是若干行代码，那只是需要为你执行的更多行代码，而在这里。
Dialogue: 0,0:24:49.87,0:24:56.05,英文,,0,0,0,,The computer is, at the risk of oversimplifying, only running my lines of code. So there's just less overhead.
Dialogue: 0,0:24:49.87,0:24:56.05,中文,,0,0,0,,冒着过于简化的风险，计算机实际上只运行我的代码行，所以开销更少。
Dialogue: 0,0:24:56.05,0:24:57.61,英文,,0,0,0,,And so this is a perpetual trade-off.
Dialogue: 0,0:24:56.05,0:24:57.61,中文,,0,0,0,,所以这是一个永恒的权衡。
Dialogue: 0,0:24:57.61,0:25:03.74,英文,,0,0,0,,Typically, when using a more user-friendly, a more modern language, one of the prices you might pay is performance.
Dialogue: 0,0:24:57.61,0:25:03.74,中文,,0,0,0,,通常，使用更人性化、更现代的语言，你可能付出的代价之一就是性能。
Dialogue: 0,0:25:03.74,0:25:08.60,英文,,0,0,0,,Now, there's a lot of smart computer scientists in the world, though, trying to push back on those same trade-offs.
Dialogue: 0,0:25:03.74,0:25:08.60,中文,,0,0,0,,不过，世界上有很多聪明的计算机科学家正在努力克服这些问题。
Dialogue: 0,0:25:08.60,0:25:20.99,英文,,0,0,0,,And so these interpreters, like the print A command I wrote, Python, technically can, especially if you run a program again and again, they can actually sort of secretly behind the scenes compile your code for you down to zeros and ones.
Dialogue: 0,0:25:08.60,0:25:20.99,中文,,0,0,0,,所以这些解释器，比如我写的 print A 命令，\Npython，从技术上讲，特别是如果你一遍又一遍地运行一个程序，它们实际上可以在幕后偷偷地为你把代码编译成 0 和 1。
Dialogue: 0,0:25:20.99,0:25:25.25,英文,,0,0,0,,And then the second, the third, the fourth time you run that program, it might very well be faster.
Dialogue: 0,0:25:20.99,0:25:25.25,中文,,0,0,0,,然后第二次、第三次、第四次运行该程序时，它很可能会更快。
Dialogue: 0,0:25:25.25,0:25:29.65,英文,,0,0,0,,So this is a bit of a head fake here in that I'm running them once and only once.
Dialogue: 0,0:25:25.25,0:25:29.65,中文,,0,0,0,,所以这里有点耍花招，因为我只运行了一次。
Dialogue: 0,0:25:29.65,0:25:35.83,英文,,0,0,0,,But we could get benefit over time if we kept running the Python version again and again and perhaps fine-tune the performance.
Dialogue: 0,0:25:29.65,0:25:35.83,中文,,0,0,0,,但如果我们不断地运行 python 版本，并可能对其性能进行微调，随着时间的推移，我们就能从中受益。
Dialogue: 0,0:25:35.83,0:25:37.97,英文,,0,0,0,,But in general, there's going to be this trade-off.
Dialogue: 0,0:25:35.83,0:25:37.97,中文,,0,0,0,,但总的来说，需要权衡利弊。
Dialogue: 0,0:25:37.97,0:25:48.02,英文,,0,0,0,,Now, would you rather spend the 60 seconds I wrote implementing a spell checker or the 6 hours, 16 hours you might be or have spent implementing the same in C?
Dialogue: 0,0:25:37.97,0:25:48.02,中文,,0,0,0,,现在，你是愿意花 60 秒来实现一个拼写检查器，还是愿意花 6 个小时、16 个小时来用 C 语言实现同样的功能？
Dialogue: 0,0:25:48.02,0:25:48.98,英文,,0,0,0,,You know, probably not.
Dialogue: 0,0:25:48.02,0:25:48.98,中文,,0,0,0,,你可能不愿意。
Dialogue: 0,0:25:48.98,0:25:52.80,英文,,0,0,0,,For productivity's sake, this is why we have these additional languages.
Dialogue: 0,0:25:48.98,0:25:52.80,中文,,0,0,0,,为了提高效率，这就是我们使用这些额外语言的原因。
Dialogue: 0,0:25:52.80,0:25:56.65,英文,,0,0,0,,Just for fun, let me flip over to another screen here.
Dialogue: 0,0:25:52.80,0:25:56.65,中文,,0,0,0,,为了好玩，让我切换到另一个屏幕。
Dialogue: 0,0:25:56.65,0:26:06.55,英文,,0,0,0,,And open up a version of Python that's actually on my, in just a second, on my own Mac instead of the cloud so that I can actually do something with graphics.
Dialogue: 0,0:25:56.65,0:26:06.55,中文,,0,0,0,,打开一个 python 版本，这个版本实际上在我的电脑上，就在我的 Mac 上，而不是云端，这样我就可以用它来做一些图形方面的事情。
Dialogue: 0,0:26:06.55,0:26:10.05,英文,,0,0,0,,So here I just have a black and white terminal window on my very own Mac.
Dialogue: 0,0:26:06.55,0:26:10.05,中文,,0,0,0,,我的 Mac 上有一个黑白终端窗口。
Dialogue: 0,0:26:10.05,0:26:14.68,英文,,0,0,0,,And I've pre-installed Python just like we've done so for VS Code in the cloud for you.
Dialogue: 0,0:26:10.05,0:26:14.68,中文,,0,0,0,,我已经预装了 python，就像我们之前在云端的 VS Code 中为你所做的那样。
Dialogue: 0,0:26:14.68,0:26:17.50,英文,,0,0,0,,Notice that I've got this photo.
Dialogue: 0,0:26:14.68,0:26:17.50,中文,,0,0,0,,请注意，我有这张照片，
Dialogue: 0,0:26:17.50,0:26:21.54,英文,,0,0,0,,of perhaps one of your favorite TV shows here with the cast of The Office.
Dialogue: 0,0:26:17.50,0:26:21.54,中文,,0,0,0,,可能是你最喜欢的电视剧之一《办公室》的演员阵容。
Dialogue: 0,0:26:21.54,0:26:24.86,英文,,0,0,0,,Notice all of the faces in this image here.
Dialogue: 0,0:26:21.54,0:26:24.86,中文,,0,0,0,,请注意这张图片中所有人的脸。
Dialogue: 0,0:26:24.86,0:26:34.02,英文,,0,0,0,,And let me propose that we try to find one face in the crowd, sort of CSI style, whereby we want to find perhaps the Scranton Strangler, so to speak.
Dialogue: 0,0:26:24.86,0:26:34.02,中文,,0,0,0,,我提议我们试着在人群中找到一张脸，有点像犯罪现场调查那样，我们想找到斯克鲁顿勒人。
Dialogue: 0,0:26:34.02,0:26:37.16,英文,,0,0,0,,And so here is an example of this guy's face.
Dialogue: 0,0:26:34.02,0:26:37.16,中文,,0,0,0,,这是这家伙的脸的例子。
Dialogue: 0,0:26:37.16,0:26:40.81,英文,,0,0,0,,Now, how do we go about finding this specific face in the crowd?
Dialogue: 0,0:26:37.16,0:26:40.81,中文,,0,0,0,,那么，我们如何才能在人群中找到这张特定的脸呢？
Dialogue: 0,0:26:40.81,0:26:44.53,英文,,0,0,0,,Well, our human eyes obviously can pluck him out, especially if you're familiar with the show.
Dialogue: 0,0:26:40.81,0:26:44.53,中文,,0,0,0,,我们的肉眼显然可以把他认出来，尤其是如果你熟悉这部剧的话。
Dialogue: 0,0:26:44.53,0:26:47.05,英文,,0,0,0,,But let me go ahead and do this instead.
Dialogue: 0,0:26:44.53,0:26:47.05,中文,,0,0,0,,但是让我来做这件事吧。
Dialogue: 0,0:26:47.05,0:26:52.99,英文,,0,0,0,,Let me go ahead and propose that we run code that I already wrote in advance here.
Dialogue: 0,0:26:47.05,0:26:52.99,中文,,0,0,0,,让我继续，建议我们运行我已经预先写好的代码。
Dialogue: 0,0:26:52.99,0:26:59.02,英文,,0,0,0,,This is a Python program with more lines of code that we won't dwell on for today, but it's meant to motivate what we can do.
Dialogue: 0,0:26:52.99,0:26:59.02,中文,,0,0,0,,这是一个 python 程序，有更多行代码，我们今天不做详细介绍，但它旨在激发我们能做什么。
Dialogue: 0,0:26:59.02,0:27:12.30,英文,,0,0,0,,From a pillow library, implying a Python image library, I want to import Some feature called image, so that I can manipulate images not unlike our own problem set 4.
Dialogue: 0,0:26:59.02,0:27:12.30,中文,,0,0,0,,从 Pillow 库（暗示是一个 python 图像库）中，我想导入一些叫做 image 的功能，这样我就可以像我们的问题集 4 一样操作图像了。
Dialogue: 0,0:27:12.30,0:27:13.72,英文,,0,0,0,,And this is kind of powerful.
Dialogue: 0,0:27:12.30,0:27:13.72,中文,,0,0,0,,这有点强大。
Dialogue: 0,0:27:13.72,0:27:20.18,英文,,0,0,0,,In Python, you can just import face recognition as a library that someone else wrote.
Dialogue: 0,0:27:13.72,0:27:20.18,中文,,0,0,0,,在 python 中，你可以直接导入 face_recognition 作为一个别人写的库。
Dialogue: 0,0:27:20.18,0:27:22.80,英文,,0,0,0,,From there, I'm going to create a variable called image.
Dialogue: 0,0:27:20.18,0:27:22.80,中文,,0,0,0,,然后，我要创建一个名为 image 的变量。
Dialogue: 0,0:27:22.80,0:27:27.33,英文,,0,0,0,,I'm going to use this face recognitions library's load image file function.
Dialogue: 0,0:27:22.80,0:27:27.33,中文,,0,0,0,,我将使用这个 face_recognition 库的 load_image_file 函数。
Dialogue: 0,0:27:27.33,0:27:30.17,英文,,0,0,0,,It's a little verbose, but it's similar in spirit to fopen.
Dialogue: 0,0:27:27.33,0:27:30.17,中文,,0,0,0,,它有点冗长，但在精神上与 fopen 类似。
Dialogue: 0,0:27:30.17,0:27:32.21,英文,,0,0,0,,And I'm going to open office.jpeg.
Dialogue: 0,0:27:30.17,0:27:32.21,中文,,0,0,0,,我要打开 office.jpeg。
Dialogue: 0,0:27:32.21,0:27:37.13,英文,,0,0,0,,I'm going to then declare a second variable called face locations,
Dialogue: 0,0:27:32.21,0:27:37.13,中文,,0,0,0,,然后我要声明第二个变量，叫做 face_locations，
Dialogue: 0,0:27:37.13,0:27:45.06,英文,,0,0,0,,Because what I'm expecting to get back, per the documentation for this library, is a list of all of the faces' locations that are detected.
Dialogue: 0,0:27:37.13,0:27:45.06,中文,,0,0,0,,因为根据这个库的文档，我预期返回的是一个列表，其中包含所有检测到的人脸位置。
Dialogue: 0,0:27:45.06,0:27:50.59,英文,,0,0,0,,All right, then I'm going to iterate over each of those faces using a for loop that we'll see in more detail.
Dialogue: 0,0:27:45.06,0:27:50.59,中文,,0,0,0,,接下来，我将使用 for 循环遍历每张人脸，稍后会详细介绍。
Dialogue: 0,0:27:50.59,0:27:55.25,英文,,0,0,0,,I'm going to then infer what the top, right, bottom, and left corners are of that face.
Dialogue: 0,0:27:50.59,0:27:55.25,中文,,0,0,0,,然后，我将推断出人脸的顶部、右侧、底部和左侧角的位置。
Dialogue: 0,0:27:55.25,0:28:03.14,英文,,0,0,0,,And then what I'm going to do here is I'm is show that face alone, if I've detected the face in question.
Dialogue: 0,0:27:55.25,0:28:03.14,中文,,0,0,0,,接下来我要做的是如果我检测到目标人脸，就只显示这张人脸。
Dialogue: 0,0:28:03.14,0:28:09.04,英文,,0,0,0,,So let me go ahead here and run detect.py.
Dialogue: 0,0:28:03.14,0:28:09.04,中文,,0,0,0,,让我运行 detect.py。
Dialogue: 0,0:28:09.04,0:28:16.62,英文,,0,0,0,,And we'll see not just the one face we're looking for, but if I run Python of detect.py, it's going to. Do all of the analysis.
Dialogue: 0,0:28:09.04,0:28:16.62,中文,,0,0,0,,我们看到的不仅仅是我们正在寻找的那张脸，如果我运行 python detect.py，它将会进行所有分析。
Dialogue: 0,0:28:16.62,0:28:25.40,英文,,0,0,0,,I'll see a big opening here now of all of the faces that were detected in this here program.
Dialogue: 0,0:28:16.62,0:28:25.40,中文,,0,0,0,,现在，这里会打开一个很大的窗口，显示在这个程序中检测到的所有面部。
Dialogue: 0,0:28:25.40,0:28:30.17,英文,,0,0,0,,OK, some better than others, I guess, if you zoom in on catching someone typical Angela.
Dialogue: 0,0:28:25.40,0:28:30.17,中文,,0,0,0,,好吧，我想，有些比其他的好，如果你放大看，就能看到典型的 Angela。
Dialogue: 0,0:28:30.17,0:28:34.93,英文,,0,0,0,,If you now want to now find that one face, I think we need to train the software a bit more.
Dialogue: 0,0:28:30.17,0:28:34.93,中文,,0,0,0,,如果你现在想找到那张脸，我想我们需要对软件进行更多训练。
Dialogue: 0,0:28:34.93,0:28:39.41,英文,,0,0,0,,So let me actually open up a second program called Recognize that's got more going on.
Dialogue: 0,0:28:34.93,0:28:39.41,中文,,0,0,0,,因此，让我打开第二个程序 Recognize，它有更多功能。
Dialogue: 0,0:28:39.41,0:28:44.13,英文,,0,0,0,,But let me, with a wave of a hand, point out that I'm now loading not only the office.jpg,
Dialogue: 0,0:28:39.41,0:28:44.13,中文,,0,0,0,,但是，让我挥挥手，指出我现在不仅加载了 office.jpg，
Dialogue: 0,0:28:44.13,0:28:49.97,英文,,0,0,0,,But also toby.jpeg to sort of train the algorithm to find that specific face.
Dialogue: 0,0:28:44.13,0:28:49.97,中文,,0,0,0,,还加载了 toby.jpeg，以便训练算法找到那张特定的脸。
Dialogue: 0,0:28:49.97,0:28:57.78,英文,,0,0,0,,And so now, if I run this second version, recognize.py, with Python of recognize.py, hold my breath for just a moment.
Dialogue: 0,0:28:49.97,0:28:57.78,中文,,0,0,0,,现在，如果我运行第二个版本，recognize.py，用 python 运行 recognize.py，请屏住呼吸。
Dialogue: 0,0:28:57.78,0:29:00.48,英文,,0,0,0,,It's analyzing, presumably, all of the faces.
Dialogue: 0,0:28:57.78,0:29:00.48,中文,,0,0,0,,它大概正在分析所有面部。
Dialogue: 0,0:29:00.48,0:29:02.10,英文,,0,0,0,,You see the same original photo.
Dialogue: 0,0:29:00.48,0:29:02.10,中文,,0,0,0,,你会看到相同的原始照片。
Dialogue: 0,0:29:02.10,0:29:05.80,英文,,0,0,0,,But do you see one such face highlighted here?
Dialogue: 0,0:29:02.10,0:29:05.80,中文,,0,0,0,,但是你看到这里有一张脸被高亮显示了吗？
Dialogue: 0,0:29:05.80,0:29:12.30,英文,,0,0,0,,This version of the code found Toby, highlighted him with this green, and voila, we Face recognition.
Dialogue: 0,0:29:05.80,0:29:12.30,中文,,0,0,0,,这个版本的代码找到了 Toby，并用绿色高亮显示了他，瞧，我们实现了人脸识别。
Dialogue: 0,0:29:12.30,0:29:16.25,英文,,0,0,0,,So for better or for worse, this is what's happening increasingly societally nowadays.
Dialogue: 0,0:29:12.30,0:29:16.25,中文,,0,0,0,,不管好坏，这就是现在社会上越来越多发生的事情。
Dialogue: 0,0:29:16.25,0:29:21.59,英文,,0,0,0,,And honestly, even though I didn't write the code live, because it's a good dozen or more lines of code, it's not terribly many.
Dialogue: 0,0:29:16.25,0:29:21.59,中文,,0,0,0,,说实话，虽然我没有现场写代码，因为它有十几行甚至更多，但这并不算多。
Dialogue: 0,0:29:21.59,0:29:26.07,英文,,0,0,0,,And literally, all the authorities, all we have to do is import face recognition.
Dialogue: 0,0:29:21.59,0:29:26.07,中文,,0,0,0,,毫不夸张地说，所有权威机构，我们要做的就是导入 face_recognition。
Dialogue: 0,0:29:26.07,0:29:28.19,英文,,0,0,0,,And voila, you have access.
Dialogue: 0,0:29:26.07,0:29:28.19,中文,,0,0,0,,瞧，你就可以访问了。
Dialogue: 0,0:29:28.19,0:29:30.18,英文,,0,0,0,,These technologies are here already.
Dialogue: 0,0:29:28.19,0:29:30.18,中文,,0,0,0,,这些技术已经存在了。
Dialogue: 0,0:29:30.18,0:29:34.02,英文,,0,0,0,,But let's consider for just a moment, how did we find Toby?
Dialogue: 0,0:29:30.18,0:29:34.02,中文,,0,0,0,,但让我们思考一下，我们是如何找到 Toby 的？
Dialogue: 0,0:29:34.02,0:29:44.01,英文,,0,0,0,,How might that library, even though we're not going to look at its implementation details, how does it find Toby and distinguish him from all of these other? Faces in the crowd.
Dialogue: 0,0:29:34.02,0:29:44.01,中文,,0,0,0,,即使我们不打算研究它的实现细节，但这个库是如何找到 Toby 并将他与所有其他人区分开来的？
Dialogue: 0,0:29:44.01,0:29:47.17,英文,,0,0,0,,What might it be doing intuitively?
Dialogue: 0,0:29:44.01,0:29:47.17,中文,,0,0,0,,直观地说，它可能在做什么？
Dialogue: 0,0:29:47.17,0:29:50.85,英文,,0,0,0,,Think back even to pset4, like what you yourselves have access to data-wise.
Dialogue: 0,0:29:47.17,0:29:50.85,中文,,0,0,0,,回想一下 pset4，比如你们自己可以访问哪些数据。
Dialogue: 0,0:29:50.85,0:30:00.03,英文,,0,0,0,,Yeah? AUDIENCE 2 Since you gave it an image of Toby's face before, it probably looks at are the pixels in one area the same pixels in another area?
Dialogue: 0,0:29:50.85,0:30:00.03,中文,,0,0,0,,观众2 因为你之前给过它一张 Toby 的脸的图像，它可能会查看一个区域的像素是否与另一个区域的像素相同？
Dialogue: 0,0:30:00.03,0:30:03.78,英文,,0,0,0,,And a lot of them are the same from that reference image to this new image.
Dialogue: 0,0:30:00.03,0:30:03.78,中文,,0,0,0,,从参考图像到这张新图像，很多像素都是相同的。
Dialogue: 0,0:30:03.78,0:30:10.85,英文,,0,0,0,,And it's going to say, hey, a lot of similar pixel arrangements are here and here.
Dialogue: 0,0:30:03.78,0:30:08.94,中文,,0,0,0,,然后它会说，嘿，这里和这里有很多相似的像素排列。
Dialogue: 0,0:30:08.94,0:30:17.69,中文,,0,0,0,,但让我们思考一下，我们是如何找到 Toby 的？ 是的，没错。总结一下，我们已经通过给软件提供一张 Toby 的脸部照片来训练它了。
Dialogue: 0,0:30:10.85,0:30:17.69,英文,,0,0,0,,Yeah, exactly. And to summarize for camera here, we have trained the software, if you will, by giving it a photo of Toby's face.
Dialogue: 0,0:30:17.69,0:30:25.13,英文,,0,0,0,,So by looking for the same or really similar pixels, especially if it's a slightly different image of Toby, we can perhaps identify him in the crowd.
Dialogue: 0,0:30:17.69,0:30:25.13,中文,,0,0,0,,通过寻找相同或真正相似的像素，特别是如果这是一张 Toby 略有不同的图像，我们也许可以在人群中识别出他。
Dialogue: 0,0:30:25.13,0:30:26.51,英文,,0,0,0,,And what really is a human face?
Dialogue: 0,0:30:25.13,0:30:26.51,中文,,0,0,0,,那么，人脸到底是什么？
Dialogue: 0,0:30:26.51,0:30:32.29,英文,,0,0,0,,Well, at the end of the day, the computer only knows it as a pattern of bits, or really at a higher level, a pattern of pixels.
Dialogue: 0,0:30:26.51,0:30:32.29,中文,,0,0,0,,好吧，说到底，计算机只把它理解为比特的模式，或者更高级别上，像素的模式。
Dialogue: 0,0:30:32.29,0:30:40.66,英文,,0,0,0,,So maybe a human face is perhaps best defined in general as like two eyes and a nose and a mouth, that even though all of us look similar structurally,
Dialogue: 0,0:30:32.29,0:30:40.66,中文,,0,0,0,,也许人脸在一般情况下最好被定义为两只眼睛、一个鼻子和一张嘴，即使我们所有人在结构上看起来都很相似，
Dialogue: 0,0:30:40.66,0:30:57.68,英文,,0,0,0,,Odds are, the measurement between the eyes and the nose and the width of the mouth, the skin tone, and all of these other physical characteristics are patterns that software could perhaps detect and then look sort of statistically through the image, looking for the closest possible match to these various measurement shapes, colors, and sizes, and the like.
Dialogue: 0,0:30:40.66,0:30:57.68,中文,,0,0,0,,但很有可能，眼睛和鼻子之间的距离、嘴巴的宽度、肤色以及所有其他身体特征\N都是软件可以检测到的模式，然后可以在图像中进行统计学上的查找，寻找与这些不同的尺寸、形状、颜色和大小等最接近的匹配。
Dialogue: 0,0:30:57.68,0:30:59.34,英文,,0,0,0,,And indeed, that might be the intuition.
Dialogue: 0,0:30:57.68,0:30:59.34,中文,,0,0,0,,事实上，这可能就是直觉。
Dialogue: 0,0:30:59.34,0:31:06.41,英文,,0,0,0,,But what's powerful here, again, is just how easy and readily available this technology now is.
Dialogue: 0,0:30:59.34,0:31:06.41,中文,,0,0,0,,但这里强大的地方在于，这项技术现在变得多么容易获得。
Dialogue: 0,0:31:06.41,0:31:17.03,英文,,0,0,0,,All right, so with that said, let's propose to consider what more we can do with Python itself, get back to the fundamentals, so that you yourselves can start to implement something along those same lines.
Dialogue: 0,0:31:06.41,0:31:17.03,中文,,0,0,0,,既然如此，让我们考虑一下 python 本身还能做些什么，回到基础知识，这样你们自己就可以开始实现类似的东西了。
Dialogue: 0,0:31:17.03,0:31:24.97,英文,,0,0,0,,So besides having access to things like a getString function, the CS50 library provides a few other things as well.
Dialogue: 0,0:31:17.03,0:31:24.97,中文,,0,0,0,,除了可以访问 get_string 函数之类的东西外，cs50 库还提供了一些其他的东西。
Dialogue: 0,0:31:24.97,0:31:29.32,英文,,0,0,0,,Namely, in C we had these, but in Python we're going to have Fewer.
Dialogue: 0,0:31:24.97,0:31:29.32,中文,,0,0,0,,也就是说，在 C 语言中我们有这些，但在 python 中我们将拥有更少的。
Dialogue: 0,0:31:29.32,0:31:34.22,英文,,0,0,0,,In Python, our library, short-term, is going to give you not only getString, but also getInt and getFloat.
Dialogue: 0,0:31:29.32,0:31:34.22,中文,,0,0,0,,在 python 中，我们的库短期内将不仅提供 get_string，还将提供 ge_int 和 get_float。
Dialogue: 0,0:31:34.22,0:31:34.76,英文,,0,0,0,,Why?
Dialogue: 0,0:31:34.22,0:31:34.76,中文,,0,0,0,,为什么？
Dialogue: 0,0:31:34.76,0:31:47.36,英文,,0,0,0,,It's actually just kind of annoying, as we'll soon see, to get back an integer or a float from a user and just make sure that it's an int and a float and not a word like cat or dog or some string that's not actually a number.
Dialogue: 0,0:31:34.76,0:31:47.36,中文,,0,0,0,,正如我们很快就会看到的，从用户那里获取整数或浮点数，并确保它是 int 和 float 类型，\N而不是像 cat 或 dog 这样的word，或者一些实际上不是数字的字符串，这实际上有点烦人。
Dialogue: 0,0:31:47.36,0:31:56.11,英文,,0,0,0,,Well, we can import not just the specific function, getString, but we can actually import all of these functions one at a time like this, as we'll soon see.
Dialogue: 0,0:31:47.36,0:31:56.11,中文,,0,0,0,,我们可以不只是导入特定的函数 get_string，实际上我们可以像这样一次导入所有这些函数，我们很快就会看到。
Dialogue: 0,0:31:56.11,0:31:59.89,英文,,0,0,0,,Or you can even, in Python, import specific functions from a file.
Dialogue: 0,0:31:56.11,0:31:59.89,中文,,0,0,0,,或者你甚至可以在 python 中从文件中导入特定的函数。
Dialogue: 0,0:31:59.89,0:32:12.26,英文,,0,0,0,,One of you asked a while back, when you include something like CS50.h or StandardIO.h, you're actually getting all of the code in that file, which potentially can add bulk to your own program or time.
Dialogue: 0,0:31:59.89,0:32:12.26,中文,,0,0,0,,不久前你们中有人问过，当你包含 cs50.h 或 StandardIO.h 之类的东西时，\N你实际上是在获取该文件中的所有代码，这可能会增加你程序的体积或时间。
Dialogue: 0,0:32:12.26,0:32:13.86,英文,,0,0,0,,In this case, when you import,
Dialogue: 0,0:32:12.26,0:32:13.86,中文,,0,0,0,,在这种情况下，当你导入，
Dialogue: 0,0:32:13.86,0:32:21.36,英文,,0,0,0,,specific functions from Python, you can be a little more narrowly precise as to what it is you want to have access to.
Dialogue: 0,0:32:13.86,0:32:21.36,中文,,0,0,0,,python 中的特定函数时，你可以更精确地指定你想访问的内容。
Dialogue: 0,0:32:21.36,0:32:25.93,英文,,0,0,0,,All right, so with that said, let's go ahead and see what conditionals look like in Python.
Dialogue: 0,0:32:21.36,0:32:25.93,中文,,0,0,0,,既然如此，让我们继续看看 python 中的条件语句是什么样子的。
Dialogue: 0,0:32:25.93,0:32:28.99,英文,,0,0,0,,So in the left-hand side again here, we'll see Scratch.
Dialogue: 0,0:32:25.93,0:32:28.99,中文,,0,0,0,,在左边，我们再次看到 Scratch。
Dialogue: 0,0:32:28.99,0:32:37.65,英文,,0,0,0,,And here, for instance, was just kind of a contrived example asking if x is less than y, then say x is less than y. In C, it looked like this.
Dialogue: 0,0:32:28.99,0:32:37.65,中文,,0,0,0,,这里有一个简单的例子，询问如果 x < y，则输出 x 小于 y。在 C 语言中，它看起来像这样。
Dialogue: 0,0:32:37.65,0:32:41.27,英文,,0,0,0,,In Python now, it's going to look like this instead.
Dialogue: 0,0:32:37.65,0:32:41.27,中文,,0,0,0,,在 python 中，它看起来会是这样。
Dialogue: 0,0:32:41.27,0:32:43.97,英文,,0,0,0,,And here's before in C.
Dialogue: 0,0:32:41.27,0:32:43.97,中文,,0,0,0,,这是之前的 C 代码。
Dialogue: 0,0:32:43.97,0:32:45.25,英文,,0,0,0,,And here's after.
Dialogue: 0,0:32:43.97,0:32:45.25,中文,,0,0,0,,这是之后的。
Dialogue: 0,0:32:45.25,0:32:48.87,英文,,0,0,0,,And just to call out a few of the obvious differences, what has changed in Python?
Dialogue: 0,0:32:45.25,0:32:48.87,中文,,0,0,0,,为了指出一些明显的区别，python 中有哪些变化？
Dialogue: 0,0:32:48.87,0:32:52.97,英文,,0,0,0,,For conditionals, it would seem.
Dialogue: 0,0:32:48.87,0:32:52.97,中文,,0,0,0,,对于条件语句来说，似乎是这样的。
Dialogue: 0,0:32:52.97,0:32:53.55,英文,,0,0,0,,Sort of.
Dialogue: 0,0:32:52.97,0:32:53.55,中文,,0,0,0,,有点像。
Dialogue: 0,0:32:53.55,0:32:54.19,英文,,0,0,0,,What's the difference?
Dialogue: 0,0:32:53.55,0:32:54.19,中文,,0,0,0,,有什么区别？
Dialogue: 0,0:32:54.19,0:32:56.54,英文,,0,0,0,,Yeah.
Dialogue: 0,0:32:54.19,0:32:56.54,中文,,0,0,0,,是的。
Dialogue: 0,0:32:56.54,0:32:58.16,英文,,0,0,0,,Yeah, so there's no more curly braces.
Dialogue: 0,0:32:56.54,0:32:58.16,中文,,0,0,0,,是的，没有花括号了。
Dialogue: 0,0:32:58.16,0:32:59.58,英文,,0,0,0,,And indeed, you don't use those.
Dialogue: 0,0:32:58.16,0:32:59.58,中文,,0,0,0,,确实，你不需要使用它们了。
Dialogue: 0,0:32:59.58,0:33:07.08,英文,,0,0,0,,What appears to be taking their place, if you might infer? What seems to have taken their place? What do you think?
Dialogue: 0,0:32:59.58,0:33:07.08,中文,,0,0,0,,你觉得什么东西代替了它们？似乎是什么东西代替了它们？
Dialogue: 0,0:33:07.08,0:33:13.90,英文,,0,0,0,,So the colon at the start of this line here, but also even more important now, is this indentation below it.
Dialogue: 0,0:33:07.08,0:33:13.90,中文,,0,0,0,,这行的冒号，以及更重要的是它下面的缩进。
Dialogue: 0,0:33:13.90,0:33:19.27,英文,,0,0,0,,So some of you, and we know this from office hours, have a habit of indenting everything on the left, right?
Dialogue: 0,0:33:13.90,0:33:19.27,中文,,0,0,0,,我们从办公时间了解到，有些人习惯把所有东西都缩进到左边，对吧？
Dialogue: 0,0:33:19.27,0:33:21.67,英文,,0,0,0,,And it's just kind of this crazy mess to look at.
Dialogue: 0,0:33:19.27,0:33:21.67,中文,,0,0,0,,看起来乱七八糟的。
Dialogue: 0,0:33:21.67,0:33:23.15,英文,,0,0,0,,Frustrating for you, surely.
Dialogue: 0,0:33:21.67,0:33:23.15,中文,,0,0,0,,这对你来说肯定很令人沮丧。
Dialogue: 0,0:33:23.15,0:33:27.99,英文,,0,0,0,,But C and Clang is pretty tolerant when it comes to things like whitespace in a program.
Dialogue: 0,0:33:23.15,0:33:27.99,中文,,0,0,0,,但是 C 和 Clang 对程序中的空格之类的东西非常宽容。
Dialogue: 0,0:33:27.99,0:33:34.62,英文,,0,0,0,,Python, uh-uh. They realized years ago that let's help humans help themselves and just require standard indentation.
Dialogue: 0,0:33:27.99,0:33:34.62,中文,,0,0,0,,python， 他们多年前就意识到，让我们帮助人类自助，并要求标准的缩进。
Dialogue: 0,0:33:34.62,0:33:36.74,英文,,0,0,0,,So four spaces would be the norm here.
Dialogue: 0,0:33:34.62,0:33:36.74,中文,,0,0,0,,所以这里通常是四个空格。
Dialogue: 0,0:33:36.74,0:33:42.31,英文,,0,0,0,,But because it's indented below that colon, that indeed indicates that this now is part of that condition.
Dialogue: 0,0:33:36.74,0:33:42.31,中文,,0,0,0,,但因为它缩进在冒号下方，这确实表明它现在是该条件的一部分。
Dialogue: 0,0:33:42.31,0:33:46.55,英文,,0,0,0,,Something else has gone missing versus C in this conditional.
Dialogue: 0,0:33:42.31,0:33:46.55,中文,,0,0,0,,与 C 相比，这个条件语句中还缺少了一些东西。
Dialogue: 0,0:33:46.55,0:33:50.11,英文,,0,0,0,,What else is a little simplified?
Dialogue: 0,0:33:46.55,0:33:50.11,中文,,0,0,0,,还有什么被简化了？
Dialogue: 0,0:33:50.11,0:33:51.65,英文,,0,0,0,,Yeah, so no more parentheses.
Dialogue: 0,0:33:50.11,0:33:51.65,中文,,0,0,0,,是的，不再需要括号了。
Dialogue: 0,0:33:51.65,0:33:56.57,英文,,0,0,0,,You can still use them, especially when you need to logically to do order of operations like in math.
Dialogue: 0,0:33:51.65,0:33:56.57,中文,,0,0,0,,你仍然可以使用它们，尤其是在需要按照数学中的运算顺序进行逻辑运算时。
Dialogue: 0,0:33:56.57,0:34:01.34,英文,,0,0,0,,But in this case, if you just want to ask a simple question like if x less than y, you can just do it like that.
Dialogue: 0,0:33:56.57,0:34:01.34,中文,,0,0,0,,但在这种情况下，如果你只是想问一个简单的问题，比如 x 是否小于 y，你可以这样写。
Dialogue: 0,0:34:01.34,0:34:02.58,英文,,0,0,0,,How about when you have an if else?
Dialogue: 0,0:34:01.34,0:34:02.58,中文,,0,0,0,,如果有 if else 语句呢？
Dialogue: 0,0:34:02.58,0:34:07.08,英文,,0,0,0,,Well, this is almost the same here with these same changes in C. This looked like this.
Dialogue: 0,0:34:02.58,0:34:07.08,中文,,0,0,0,,这和 C 语言中的变化几乎相同，它看起来像这样。
Dialogue: 0,0:34:07.08,0:34:10.64,英文,,0,0,0,,And it's starting to get a bit bulky, at least if we use our curly braces in this way.
Dialogue: 0,0:34:07.08,0:34:10.64,中文,,0,0,0,,如果我们以这种方式使用花括号，它开始变得有点笨重。
Dialogue: 0,0:34:10.64,0:34:12.76,英文,,0,0,0,,In Python, we can tighten things up further.
Dialogue: 0,0:34:10.64,0:34:12.76,中文,,0,0,0,,在 python 中，我们可以进一步简化。
Dialogue: 0,0:34:12.76,0:34:15.98,英文,,0,0,0,,Even though, strictly speaking, in C, you don't always need the curly braces.
Dialogue: 0,0:34:12.76,0:34:15.98,中文,,0,0,0,,即使严格来说，在 C 语言中，你并不总是需要花括号。
Dialogue: 0,0:34:15.98,0:34:18.40,英文,,0,0,0,,But here, gone are the parentheses again.
Dialogue: 0,0:34:15.98,0:34:18.40,中文,,0,0,0,,但在这里，圆括号又不见了。
Dialogue: 0,0:34:18.40,0:34:20.08,英文,,0,0,0,,Gone are the curly braces.
Dialogue: 0,0:34:18.40,0:34:20.08,中文,,0,0,0,,花括号也不见了。
Dialogue: 0,0:34:20.08,0:34:21.98,英文,,0,0,0,,Indentation is consistent.
Dialogue: 0,0:34:20.08,0:34:21.98,中文,,0,0,0,,缩进是一致的。
Dialogue: 0,0:34:21.98,0:34:26.60,英文,,0,0,0,,And we've just added another keyword, else, with a colon, but no more semicolons as well.
Dialogue: 0,0:34:21.98,0:34:26.60,中文,,0,0,0,,我们只是添加了另一个关键字 else，后面跟着一个冒号，但也没有分号了。
Dialogue: 0,0:34:26.60,0:34:30.21,英文,,0,0,0,,How about something larger like this, an if, else, if, else?
Dialogue: 0,0:34:26.60,0:34:30.21,中文,,0,0,0,,像这样更大的结构呢，一个 if、else、if、else？
Dialogue: 0,0:34:30.21,0:34:33.83,英文,,0,0,0,,This one's a little curious. But in C, it looked like this.
Dialogue: 0,0:34:30.21,0:34:33.83,中文,,0,0,0,,这个有点奇怪，但在 C 语言中，它看起来像这样。
Dialogue: 0,0:34:33.83,0:34:38.31,英文,,0,0,0,,If else if else, in Python, it now looks like this.
Dialogue: 0,0:34:33.83,0:34:38.31,中文,,0,0,0,,如果 else if else，在 python 中，它现在看起来像这样。
Dialogue: 0,0:34:38.31,0:34:43.88,英文,,0,0,0,,And there's perhaps one curiosity here that, honestly, all these years later, I still can't remember how to spell it half the time.
Dialogue: 0,0:34:38.31,0:34:43.88,中文,,0,0,0,,这里可能有一个奇怪的地方，老实说，这么多年过去了，我还是经常记不住怎么拼写它。
Dialogue: 0,0:34:43.88,0:34:46.97,英文,,0,0,0,,What's weird about this?
Dialogue: 0,0:34:43.88,0:34:46.97,中文,,0,0,0,,这有什么奇怪的？
Dialogue: 0,0:34:46.97,0:34:50.87,英文,,0,0,0,,What do you spot as different?
Dialogue: 0,0:34:46.97,0:34:50.87,中文,,0,0,0,,你发现有什么不同？
Dialogue: 0,0:34:50.87,0:34:54.38,英文,,0,0,0,,Yeah, over here.
Dialogue: 0,0:34:50.87,0:34:54.38,中文,,0,0,0,,是的，在这里。
Dialogue: 0,0:34:54.38,0:34:56.76,英文,,0,0,0,,Yeah, instead of else if, it's l if.
Dialogue: 0,0:34:54.38,0:34:56.76,中文,,0,0,0,,是的，它不是 else if，而是 elif。
Dialogue: 0,0:34:56.76,0:34:57.56,英文,,0,0,0,,Why?
Dialogue: 0,0:34:56.76,0:34:57.56,中文,,0,0,0,,为什么？
Dialogue: 0,0:34:57.56,0:35:02.75,英文,,0,0,0,,Apparently else space if was just too many keystrokes for humans to type, so they condensed it into this way.
Dialogue: 0,0:34:57.56,0:35:02.75,中文,,0,0,0,,显然 else 空格 if 对人类来说输入的键太多了，所以他们把它简化成这样。
Dialogue: 0,0:35:02.75,0:35:08.69,英文,,0,0,0,,Probably means it's a little more distinguishable, too, for the computer between the if and the else to, but just something to remember now.
Dialogue: 0,0:35:02.75,0:35:08.69,中文,,0,0,0,,也可能意味着，计算机更容易区分 if 和 else，但这只是现在需要记住的事情。
Dialogue: 0,0:35:08.69,0:35:11.14,英文,,0,0,0,,It's indeed l if and not else if.
Dialogue: 0,0:35:08.69,0:35:11.14,中文,,0,0,0,,它确实是 elif 而不是 else if。
Dialogue: 0,0:35:11.14,0:35:12.92,英文,,0,0,0,,All right, so what about variables in Python?
Dialogue: 0,0:35:11.14,0:35:12.92,中文,,0,0,0,,那么 python 中的变量呢？
Dialogue: 0,0:35:12.92,0:35:20.14,英文,,0,0,0,,I've used a couple of them already, but let's This is still exactly how you define and declare these things as well.
Dialogue: 0,0:35:12.92,0:35:20.14,中文,,0,0,0,,我已经用过几个了，但让我们来看看如何定义和声明它们。
Dialogue: 0,0:35:20.14,0:35:25.85,英文,,0,0,0,,So in Scratch, if we wanted to create a variable called counter and set it equal initially to 0, we would do something like this.
Dialogue: 0,0:35:20.14,0:35:25.85,中文,,0,0,0,,在 Scratch 中，如果我们想创建一个名为 counter 的变量并将其初始值设置为 0，我们会这样做。
Dialogue: 0,0:35:25.85,0:35:30.59,英文,,0,0,0,,Specify that it's an int, use the assignment operator, end the thought with a semicolon.
Dialogue: 0,0:35:25.85,0:35:30.59,中文,,0,0,0,,指定它是 int 类型，使用赋值运算符，最后用分号结束。
Dialogue: 0,0:35:30.59,0:35:32.40,英文,,0,0,0,,In Python, it's just simpler.
Dialogue: 0,0:35:30.59,0:35:32.40,中文,,0,0,0,,在 python 中就简单多了。
Dialogue: 0,0:35:32.40,0:35:33.76,英文,,0,0,0,,You name the variable.
Dialogue: 0,0:35:32.40,0:35:33.76,中文,,0,0,0,,你命名变量。
Dialogue: 0,0:35:33.76,0:35:35.68,英文,,0,0,0,,You use the assignment operator as before.
Dialogue: 0,0:35:33.76,0:35:35.68,中文,,0,0,0,,像之前一样使用赋值运算符。
Dialogue: 0,0:35:35.68,0:35:37.14,英文,,0,0,0,,You set it equal to some value.
Dialogue: 0,0:35:35.68,0:35:37.14,中文,,0,0,0,,你将它设置为某个值。
Dialogue: 0,0:35:37.14,0:35:37.86,英文,,0,0,0,,And that's it.
Dialogue: 0,0:35:37.14,0:35:37.86,中文,,0,0,0,,就是这样。
Dialogue: 0,0:35:37.86,0:35:38.94,英文,,0,0,0,,You don't mention the type.
Dialogue: 0,0:35:37.86,0:35:38.94,中文,,0,0,0,,你不需要提及其类型。
Dialogue: 0,0:35:38.94,0:35:41.44,英文,,0,0,0,,You don't mention the semicolon or anything more.
Dialogue: 0,0:35:38.94,0:35:41.44,中文,,0,0,0,,你也不需要提分号或其他任何东西。
Dialogue: 0,0:35:41.44,0:35:46.40,英文,,0,0,0,,What if you want to change a variable, like the counter, by 1, that is incremented by 1?
Dialogue: 0,0:35:41.44,0:35:46.40,中文,,0,0,0,,如果你想将一个变量（比如 counter）改变 1，也就是递增 1，该怎么办？
Dialogue: 0,0:35:46.40,0:35:54.89,英文,,0,0,0,,You have a few different ways here in C. We saw syntax like this, where you can say counter equals counter plus 1, which, again, feels like illogical.
Dialogue: 0,0:35:46.40,0:35:54.89,中文,,0,0,0,,在 C 语言中，你有几种不同的方法。我们见过这样的语法，你可以写 counter = counter + 1，这又感觉不合逻辑。
Dialogue: 0,0:35:54.89,0:35:56.85,英文,,0,0,0,,How can counter equal counter plus 1?
Dialogue: 0,0:35:54.89,0:35:56.85,中文,,0,0,0,,counter = counter + 1 呢？
Dialogue: 0,0:35:56.85,0:35:59.97,英文,,0,0,0,,But again, we read this code really right to left.
Dialogue: 0,0:35:56.85,0:35:59.97,中文,,0,0,0,,但同样，我们实际上是从右到左阅读这段代码的。
Dialogue: 0,0:35:59.97,0:36:01.93,英文,,0,0,0,,Updating its value by one.
Dialogue: 0,0:35:59.97,0:36:01.93,中文,,0,0,0,,将其值更新 1。
Dialogue: 0,0:36:01.93,0:36:03.49,英文,,0,0,0,,In Python, it's almost the same.
Dialogue: 0,0:36:01.93,0:36:03.49,中文,,0,0,0,,在 python 中，这几乎是一样的。
Dialogue: 0,0:36:03.49,0:36:04.75,英文,,0,0,0,,You just get rid of the semicolon.
Dialogue: 0,0:36:03.49,0:36:04.75,中文,,0,0,0,,你只需要去掉分号。
Dialogue: 0,0:36:04.75,0:36:05.81,英文,,0,0,0,,So that logic is there.
Dialogue: 0,0:36:04.75,0:36:05.81,中文,,0,0,0,,所以逻辑就在那里。
Dialogue: 0,0:36:05.81,0:36:09.99,英文,,0,0,0,,But recall in C, we could do something slightly different that we can also do in Python.
Dialogue: 0,0:36:05.81,0:36:09.99,中文,,0,0,0,,但回想一下，在 C 语言中，我们可以做一些稍微不同的事情，这些事情在 python 中也可以做。
Dialogue: 0,0:36:09.99,0:36:15.54,英文,,0,0,0,,In Python, you can also more succinctly do this, plus equals, and then whatever number you want to add.
Dialogue: 0,0:36:09.99,0:36:15.54,中文,,0,0,0,,在 python 中，你还可以更简洁地做到这一点，使用加等号，然后加上你想加的任何数字。
Dialogue: 0,0:36:15.54,0:36:18.12,英文,,0,0,0,,Or you can even change it to subtract if you prefer.
Dialogue: 0,0:36:15.54,0:36:18.12,中文,,0,0,0,,或者你甚至可以把它改成减法，如果你愿意的话。
Dialogue: 0,0:36:18.12,0:36:21.82,英文,,0,0,0,,Sadly, gone is something you've probably typed a whole lot.
Dialogue: 0,0:36:18.12,0:36:21.82,中文,,0,0,0,,遗憾的是，你可能已经输入了很多次的东西不见了。
Dialogue: 0,0:36:21.82,0:36:24.99,英文,,0,0,0,,What was the other way? You can add one.
Dialogue: 0,0:36:21.82,0:36:24.99,中文,,0,0,0,,另一种方法是什么？你可以加一。
Dialogue: 0,0:36:24.99,0:36:27.23,英文,,0,0,0,,Plus plus is no more, sadly, in Python.
Dialogue: 0,0:36:24.99,0:36:27.23,中文,,0,0,0,,遗憾的是，python 中不再有加加了。
Dialogue: 0,0:36:27.23,0:36:31.75,英文,,0,0,0,,Just too many ways to do the same thing. So they got rid of it in favor of just this syntax here.
Dialogue: 0,0:36:27.23,0:36:31.75,中文,,0,0,0,,做同样的事情方法太多了。所以他们为了这里的语法而放弃了它。
Dialogue: 0,0:36:31.75,0:36:33.29,英文,,0,0,0,,So keep that in mind as well.
Dialogue: 0,0:36:31.75,0:36:33.29,中文,,0,0,0,,所以也要记住这一点。
Dialogue: 0,0:36:33.29,0:36:34.03,英文,,0,0,0,,What about loops?
Dialogue: 0,0:36:33.29,0:36:34.03,中文,,0,0,0,,那循环呢？
Dialogue: 0,0:36:34.03,0:36:36.53,英文,,0,0,0,,When you want to do something in Python again and again?
Dialogue: 0,0:36:34.03,0:36:36.53,中文,,0,0,0,,当你想在 python 中一遍又一遍地做某件事的时候呢？
Dialogue: 0,0:36:36.53,0:36:40.90,英文,,0,0,0,,Well, in Scratch, in week 0, here's how we meowed three times specifically.
Dialogue: 0,0:36:36.53,0:36:40.90,中文,,0,0,0,,在第 0 周的 Scratch 中，我们是这样特意喵了三次的。
Dialogue: 0,0:36:40.90,0:36:42.84,英文,,0,0,0,,In C, we had a couple of ways of doing this.
Dialogue: 0,0:36:40.90,0:36:42.84,中文,,0,0,0,,在 C 语言中，我们有几种方法可以做到这一点。
Dialogue: 0,0:36:42.84,0:36:48.16,英文,,0,0,0,,This was like the more mechanical approach, where you create a variable called i. You set it equal to 0.
Dialogue: 0,0:36:42.84,0:36:48.16,中文,,0,0,0,,这就像是一种更机械的方法，你要创建一个叫做 i 的变量。你把它设为 0。
Dialogue: 0,0:36:48.16,0:36:51.54,英文,,0,0,0,,You then do while i is less than 3 the following.
Dialogue: 0,0:36:48.16,0:36:51.54,中文,,0,0,0,,然后你做当 i 小于 3 的时候，执行以下操作。
Dialogue: 0,0:36:51.54,0:36:54.62,英文,,0,0,0,,And then you yourself increment i again and again.
Dialogue: 0,0:36:51.54,0:36:54.62,中文,,0,0,0,,然后你自己一遍又一遍地增加 i。
Dialogue: 0,0:36:54.62,0:36:59.29,英文,,0,0,0,,Mechanical in the sense that you have to implement all of these gears and make them turn yourself.
Dialogue: 0,0:36:54.62,0:36:59.29,中文,,0,0,0,,机械的意思是你必须实现所有这些齿轮，并让它们自己转动。
Dialogue: 0,0:36:59.29,0:37:01.35,英文,,0,0,0,,But this was a correct way to do that.
Dialogue: 0,0:36:59.29,0:37:01.35,中文,,0,0,0,,但这是一种正确的方法。
Dialogue: 0,0:37:01.35,0:37:03.93,英文,,0,0,0,,In Python, we can still achieve the same idea.
Dialogue: 0,0:37:01.35,0:37:03.93,中文,,0,0,0,,在 python 中，我们仍然可以实现同样的想法。
Dialogue: 0,0:37:03.93,0:37:06.27,英文,,0,0,0,,But we don't need the int keyword.
Dialogue: 0,0:37:03.93,0:37:06.27,中文,,0,0,0,,但我们不需要 int 关键字。
Dialogue: 0,0:37:06.27,0:37:07.77,英文,,0,0,0,,We don't need any of the semicolons.
Dialogue: 0,0:37:06.27,0:37:07.77,中文,,0,0,0,,我们不需要任何分号。
Dialogue: 0,0:37:07.77,0:37:08.89,英文,,0,0,0,,We don't need the parentheses.
Dialogue: 0,0:37:07.77,0:37:08.89,中文,,0,0,0,,我们不需要括号。
Dialogue: 0,0:37:08.89,0:37:10.45,英文,,0,0,0,,We don't need the curly braces.
Dialogue: 0,0:37:08.89,0:37:10.45,中文,,0,0,0,,我们不需要花括号。
Dialogue: 0,0:37:10.45,0:37:11.81,英文,,0,0,0,,We can't use the plus plus.
Dialogue: 0,0:37:10.45,0:37:11.81,中文,,0,0,0,,我们不能用 ++ 运算符。
Dialogue: 0,0:37:11.81,0:37:14.45,英文,,0,0,0,,So maybe that's a minor step backwards if you're a fan.
Dialogue: 0,0:37:11.81,0:37:14.45,中文,,0,0,0,,如果你是 ++ 的粉丝，这可能算是一种退步。
Dialogue: 0,0:37:14.45,0:37:18.09,英文,,0,0,0,,But otherwise, the code, the logic, is exactly the same.
Dialogue: 0,0:37:14.45,0:37:18.09,中文,,0,0,0,,但除此之外，代码和逻辑完全相同。
Dialogue: 0,0:37:18.09,0:37:20.52,英文,,0,0,0,,But there's other ways to achieve this same idea.
Dialogue: 0,0:37:18.09,0:37:20.52,中文,,0,0,0,,但是还有其他方法可以实现同样的想法。
Dialogue: 0,0:37:20.52,0:37:22.92,英文,,0,0,0,,Recall that in C, we could also do this.
Dialogue: 0,0:37:20.52,0:37:22.92,中文,,0,0,0,,回想一下，在 C 语言中，我们也可以这样做。
Dialogue: 0,0:37:22.92,0:37:27.28,英文,,0,0,0,,You could use a for loop, which does exactly the same thing. Both are correct.
Dialogue: 0,0:37:22.92,0:37:27.28,中文,,0,0,0,,你可以使用 for 循环，它的作用完全相同。两者都是正确的。
Dialogue: 0,0:37:27.28,0:37:32.22,英文,,0,0,0,,Both are arguably well-designed. It's kind of to each their own when it comes to choosing between these.
Dialogue: 0,0:37:27.28,0:37:32.22,中文,,0,0,0,,可以说两者都设计良好。至于在它们之间如何选择，就取决于个人喜好了。
Dialogue: 0,0:37:32.22,0:37:36.35,英文,,0,0,0,,In Python, though, we're going to have to think through how to do this.
Dialogue: 0,0:37:32.22,0:37:36.35,中文,,0,0,0,,不过，在 python 中，我们必须思考如何实现这一点。
Dialogue: 0,0:37:36.35,0:37:42.55,英文,,0,0,0,,So you don't do the same for loop as in C. The closest I could come up with is this.
Dialogue: 0,0:37:36.35,0:37:42.55,中文,,0,0,0,,因此，你不能像在 C 语言中那样使用相同的 for 循环。我能想到的最接近的做法是这样的。
Dialogue: 0,0:37:42.55,0:37:48.85,英文,,0,0,0,,where you say for i, or whatever variable you want to do the counting, in, literally, the preposition.
Dialogue: 0,0:37:42.55,0:37:48.85,中文,,0,0,0,,你可以写 `for i`，或者任何你想要用来计数的变量，`in`，就是一个介词，在...里面。
Dialogue: 0,0:37:48.85,0:37:50.92,英文,,0,0,0,,And then you use square brackets here.
Dialogue: 0,0:37:48.85,0:37:50.92,中文,,0,0,0,,然后你在这里使用方括号。
Dialogue: 0,0:37:50.92,0:37:55.66,英文,,0,0,0,,And we've used square brackets before in the context of arrays and things like that.
Dialogue: 0,0:37:50.92,0:37:55.66,中文,,0,0,0,,我们以前在数组之类的上下文中使用过方括号。
Dialogue: 0,0:37:55.66,0:38:01.52,英文,,0,0,0,,And the 0, 1, 2 looks like an array in some sense, even though we've also seen arrays with curly braces.
Dialogue: 0,0:37:55.66,0:38:01.52,中文,,0,0,0,,0、1、2 在某种意义上看起来像一个数组，尽管我们也见过用花括号表示的数组。
Dialogue: 0,0:38:01.52,0:38:04.06,英文,,0,0,0,,But these square brackets for now denote a list.
Dialogue: 0,0:38:01.52,0:38:04.06,中文,,0,0,0,,但这些方括号现在表示一个列表。
Dialogue: 0,0:38:04.06,0:38:05.44,英文,,0,0,0,,Python does not have arrays.
Dialogue: 0,0:38:04.06,0:38:05.44,中文,,0,0,0,,python 没有数组。
Dialogue: 0,0:38:05.44,0:38:14.60,英文,,0,0,0,,An array is that contiguous chunk of memory, back to back to back, that you have to resize somehow by moving things around in memory, as per two weeks ago.
Dialogue: 0,0:38:05.44,0:38:14.60,中文,,0,0,0,,数组是内存中连续的块，一个接一个，你必须通过在内存中移动数据来调整它的大小，就像两周前讲的那样。
Dialogue: 0,0:38:14.60,0:38:19.47,英文,,0,0,0,,In Python, though, you can just create a list like this using square brackets.
Dialogue: 0,0:38:14.60,0:38:19.47,中文,,0,0,0,,但是，在 python 中，你可以使用方括号创建这样的列表。
Dialogue: 0,0:38:19.47,0:38:25.11,英文,,0,0,0,,And better still, as we'll see, you can add or even remove things from that list down the road.
Dialogue: 0,0:38:19.47,0:38:25.11,中文,,0,0,0,,更好的是，我们稍后会看到，你可以向列表中添加内容，甚至删除内容。
Dialogue: 0,0:38:25.11,0:38:27.57,英文,,0,0,0,,This, though, is not going to be very well designed.
Dialogue: 0,0:38:25.11,0:38:27.57,中文,,0,0,0,,但这并不是一个很好的设计。
Dialogue: 0,0:38:27.57,0:38:28.75,英文,,0,0,0,,This will work.
Dialogue: 0,0:38:27.57,0:38:28.75,中文,,0,0,0,,这样可以运行。
Dialogue: 0,0:38:28.75,0:38:32.19,英文,,0,0,0,,This will iterate in Python three times.
Dialogue: 0,0:38:28.75,0:38:32.19,中文,,0,0,0,,这段 python 代码会迭代三次。
Dialogue: 0,0:38:32.19,0:38:37.05,英文,,0,0,0,,But what might rub you the wrong way about this design, even if you've never seen Python before?
Dialogue: 0,0:38:32.19,0:38:37.05,中文,,0,0,0,,但即使你以前从未见过 python，这种设计有什么让你觉得不对劲的地方吗？
Dialogue: 0,0:38:37.05,0:38:42.28,英文,,0,0,0,,How does this example not end well?
Dialogue: 0,0:38:37.05,0:38:42.28,中文,,0,0,0,,为什么这个例子最后不太好？
Dialogue: 0,0:38:42.28,0:38:51.19,英文,,0,0,0,,Yeah, like if you're making a large list, you have to type out each one of these numbers, like comma 3, comma 4, comma 5, comma dot, dot, dot, 50, comma dot, dot, dot, 500.
Dialogue: 0,0:38:42.28,0:38:51.19,中文,,0,0,0,,是的，比如你想创建一个很大的列表，你必须把每个数字都写出来，像这样：逗号 3，逗号 4，逗号 5，逗号…… 50，逗号…… 500。
Dialogue: 0,0:38:51.19,0:38:57.55,英文,,0,0,0,,Like surely that's not the best solution, to have all of these numbers on the screen wrapping endlessly on the screen.
Dialogue: 0,0:38:51.19,0:38:57.55,中文,,0,0,0,,这肯定不是最好的解决方案，把所有这些数字都显示在屏幕上，无休止地换行。
Dialogue: 0,0:38:57.55,0:39:04.39,英文,,0,0,0,,So in Python, another way to do this would be to use a function called range, which technically is a data type unto itself.
Dialogue: 0,0:38:57.55,0:39:04.39,中文,,0,0,0,,所以在 python 中，另一种方法是使用一个叫做 range 的函数，从技术上讲，它本身也是一种数据类型。
Dialogue: 0,0:39:04.39,0:39:10.00,英文,,0,0,0,,And this returns to you as many values as you ask for it. Range takes some other arguments as well.
Dialogue: 0,0:39:04.39,0:39:10.00,中文,,0,0,0,,它会根据你的要求返回相应数量的值。range 还可以接受其他参数。
Dialogue: 0,0:39:10.00,0:39:19.07,英文,,0,0,0,,But the simplest use case here is if you want back the numbers 0, 1, and 2, a total of three values, you say, hey, Python, please give me a range of three values.
Dialogue: 0,0:39:10.00,0:39:19.07,中文,,0,0,0,,但这里最简单的用例是，如果你想要 0、1 和 2 这三个值，你可以告诉 python，请给我一个包含三个值的范围。
Dialogue: 0,0:39:19.07,0:39:21.43,英文,,0,0,0,,And by default, they start at 0 on up.
Dialogue: 0,0:39:19.07,0:39:21.43,中文,,0,0,0,,默认情况下，它们从 0 开始递增。
Dialogue: 0,0:39:21.43,0:39:26.37,英文,,0,0,0,,But this is more efficient than it would be to hard code the entire list at once.
Dialogue: 0,0:39:21.43,0:39:26.37,中文,,0,0,0,,但这比硬编码整个列表要高效得多。
Dialogue: 0,0:39:26.37,0:39:29.15,英文,,0,0,0,,And the best metaphor I could come up with is something like this.
Dialogue: 0,0:39:26.37,0:39:29.15,中文,,0,0,0,,我能想到的最好的比喻是这样的。
Dialogue: 0,0:39:29.15,0:39:30.82,英文,,0,0,0,,Like here, for instance, is a deck of cards.
Dialogue: 0,0:39:29.15,0:39:30.82,中文,,0,0,0,,例如，这是一副扑克牌。
Dialogue: 0,0:39:30.82,0:39:32.64,英文,,0,0,0,,This is sort of normal human size.
Dialogue: 0,0:39:30.82,0:39:32.64,中文,,0,0,0,,这是普通的大小。
Dialogue: 0,0:39:32.64,0:39:34.98,英文,,0,0,0,,And there's presumably 52 cards here.
Dialogue: 0,0:39:32.64,0:39:34.98,中文,,0,0,0,,这里应该有 52 张牌。
Dialogue: 0,0:39:34.98,0:39:40.09,英文,,0,0,0,,So writing out 0 through 51 on code would be a little ridiculous for the reasons you note.
Dialogue: 0,0:39:34.98,0:39:40.09,中文,,0,0,0,,像你说的那样，在代码中写出 0 到 51 会有点荒谬。
Dialogue: 0,0:39:40.09,0:39:43.85,英文,,0,0,0,,It would just be very unwieldy and ugly and wrapping and all of that.
Dialogue: 0,0:39:40.09,0:39:43.85,中文,,0,0,0,,这样写会非常笨拙、难看，而且会不断换行。
Dialogue: 0,0:39:43.85,0:39:47.59,英文,,0,0,0,,It would be the virtual equivalent of me handing you
Dialogue: 0,0:39:43.85,0:39:47.59,中文,,0,0,0,,这就好比我把
Dialogue: 0,0:39:47.59,0:39:49.68,英文,,0,0,0,,all of these cards at once to just deal with.
Dialogue: 0,0:39:47.59,0:39:49.68,中文,,0,0,0,,所有这些牌都交给你去处理。
Dialogue: 0,0:39:49.68,0:39:52.90,英文,,0,0,0,,And they're not that big, but it's a lot of cards to hold onto.
Dialogue: 0,0:39:49.68,0:39:52.90,中文,,0,0,0,,虽然它们不是很大，但要拿住这么多牌还是很难的。
Dialogue: 0,0:39:52.90,0:39:55.88,英文,,0,0,0,,It requires a lot of memory or physical storage, if you will.
Dialogue: 0,0:39:52.90,0:39:55.88,中文,,0,0,0,,它需要大量的内存，或者说是物理存储空间。
Dialogue: 0,0:39:55.88,0:40:02.97,英文,,0,0,0,,What range does, metaphorically, is if you ask me for three cards, I hand you them one at a time.
Dialogue: 0,0:39:55.88,0:40:02.97,中文,,0,0,0,,而 range 的作用是，打个比方，如果你找我要三张牌，我会一张一张地给你。
Dialogue: 0,0:40:02.97,0:40:10.30,英文,,0,0,0,,Like this, so that at any point in time, you only have one number in the computer's memory until you're handed the next.
Dialogue: 0,0:40:02.97,0:40:10.30,中文,,0,0,0,,就像这样，在任何时候，你的计算机内存中都只有一个数字，直到你拿到下一个数字。
Dialogue: 0,0:40:10.30,0:40:15.40,英文,,0,0,0,,The alternative, the previous version, would be to hand me all three cards at once, or all 52 cards at once.
Dialogue: 0,0:40:10.30,0:40:15.40,中文,,0,0,0,,而另一种方式，也就是之前的版本，会是我一次性把三张牌都给你，或者一次性把 52 张牌都给你。
Dialogue: 0,0:40:15.40,0:40:17.84,英文,,0,0,0,,But in this case, range is just way more efficient.
Dialogue: 0,0:40:15.40,0:40:17.84,中文,,0,0,0,,但在这种情况下，range 的效率要高得多。
Dialogue: 0,0:40:17.84,0:40:23.09,英文,,0,0,0,,You can do range of 1,000. That's not going to give you a list of 1,000 values all at once.
Dialogue: 0,0:40:17.84,0:40:23.09,中文,,0,0,0,,你可以用 range 生成 1000 个数字，它不会一次性给你一个包含 1000 个值的列表。
Dialogue: 0,0:40:23.09,0:40:30.86,英文,,0,0,0,,It's going to give you 1,000 values one at a time, reducing memory significantly in the computer itself.
Dialogue: 0,0:40:23.09,0:40:30.86,中文,,0,0,0,,它会一次给你一个值，总共 1000 个，从而显著减少计算机本身的内存占用。
Dialogue: 0,0:40:30.86,0:40:35.15,英文,,0,0,0,,All right, so besides this, what about doing something forever in Scratch?
Dialogue: 0,0:40:30.86,0:40:35.15,中文,,0,0,0,,除此之外，如何在 Scratch 中实现无限循环呢？
Dialogue: 0,0:40:35.15,0:40:46.36,英文,,0,0,0,,Well, we could do this literally with a forever block, which didn't quite exist in C. In C, we had to hack it together by saying, while true, because true is, by definition, T-R-U-E, always true.
Dialogue: 0,0:40:35.15,0:40:46.36,中文,,0,0,0,,我们可以用一个 forever 语句块来实现，这在 C 语言中并不完全存在。\N在 C 语言中，我们必须用 while true 来实现，因为 true 从定义上来说，T-R-U-E，永远为真。
Dialogue: 0,0:40:46.36,0:40:50.57,英文,,0,0,0,,So this just deliberately induces an infinite loop for us.
Dialogue: 0,0:40:46.36,0:40:50.57,中文,,0,0,0,,所以这实际上是故意制造了一个无限循环。
Dialogue: 0,0:40:50.57,0:40:53.49,英文,,0,0,0,,In Python, the logic's going to be almost the same.
Dialogue: 0,0:40:50.57,0:40:53.49,中文,,0,0,0,,在 python 中，逻辑几乎是一样的。
Dialogue: 0,0:40:53.49,0:41:02.31,英文,,0,0,0,,And infinite loops in Python tend to actually be even more common, because you can always break out of them, as you could in C. In Python, it looks like this.
Dialogue: 0,0:40:53.49,0:41:02.31,中文,,0,0,0,,而且在 python 中，无限循环实际上更常见，因为你可以随时跳出循环，就像在 C 语言中一样。在 python 中，它看起来像这样。
Dialogue: 0,0:41:02.31,0:41:03.90,英文,,0,0,0,,And this is slightly more subtle.
Dialogue: 0,0:41:02.31,0:41:03.90,中文,,0,0,0,,这稍微有点微妙。
Dialogue: 0,0:41:03.90,0:41:06.10,英文,,0,0,0,,But gone are the curly braces.
Dialogue: 0,0:41:03.90,0:41:06.10,中文,,0,0,0,,没有了花括号。
Dialogue: 0,0:41:06.10,0:41:07.38,英文,,0,0,0,,Gone are the parentheses.
Dialogue: 0,0:41:06.10,0:41:07.38,中文,,0,0,0,,也没有了圆括号。
Dialogue: 0,0:41:07.38,0:41:10.64,英文,,0,0,0,,But ever so slight difference, too.
Dialogue: 0,0:41:07.38,0:41:10.64,中文,,0,0,0,,但也有一点点细微的差别。
Dialogue: 0,0:41:10.64,0:41:13.66,英文,,0,0,0,,A capital T for true, and it's going to be a capital F for false.
Dialogue: 0,0:41:10.64,0:41:13.66,中文,,0,0,0,,True 的 T 要大写，False 的 F 也要大写。
Dialogue: 0,0:41:13.66,0:41:14.73,英文,,0,0,0,,Stupid little differences.
Dialogue: 0,0:41:13.66,0:41:14.73,中文,,0,0,0,,这些都是很小的区别。
Dialogue: 0,0:41:14.73,0:41:16.35,英文,,0,0,0,,Eventually, you're going to mistype one or the other.
Dialogue: 0,0:41:14.73,0:41:16.35,中文,,0,0,0,,最终，你总会打错其中一个。
Dialogue: 0,0:41:16.35,0:41:21.93,英文,,0,0,0,,But these are the kinds of things to keep an eye out and to start recognizing in your mind's eye when you read code.
Dialogue: 0,0:41:16.35,0:41:21.93,中文,,0,0,0,,但这些都是在阅读代码时需要注意和识别的。
Dialogue: 0,0:41:21.93,0:41:25.92,英文,,0,0,0,,Questions now on any of these building blocks?
Dialogue: 0,0:41:21.93,0:41:25.92,中文,,0,0,0,,对于这些代码块，现在有任何问题吗？
Dialogue: 0,0:41:25.92,0:41:31.48,英文,,0,0,0,,Yeah.
Dialogue: 0,0:41:25.92,0:41:31.48,中文,,0,0,0,,有。
Dialogue: 0,0:41:31.48,0:41:38.69,英文,,0,0,0,,In the for loop, it was set to 0 on the first iteration, then 1 on the next, then 2 on the third.
Dialogue: 0,0:41:31.48,0:41:38.69,中文,,0,0,0,,在 for 循环中，它在第一次迭代时设置为 0，然后在下一次迭代时设置为 1，然后在第三次迭代时设置为 2。
Dialogue: 0,0:41:38.69,0:41:40.31,英文,,0,0,0,,And the same thing for range.
Dialogue: 0,0:41:38.69,0:41:40.31,中文,,0,0,0,,range 也是一样。
Dialogue: 0,0:41:40.31,0:41:44.24,英文,,0,0,0,,It just doesn't use up as much memory all at once.
Dialogue: 0,0:41:40.31,0:41:44.24,中文,,0,0,0,,它不会一次性占用太多内存。
Dialogue: 0,0:41:44.24,0:41:50.28,英文,,0,0,0,,Other questions now on any of these building blocks of Python?
Dialogue: 0,0:41:44.24,0:41:50.28,中文,,0,0,0,,对于 python 中的这些代码块，还有其他问题吗？
Dialogue: 0,0:41:50.28,0:41:53.70,英文,,0,0,0,,All right, well, let's go ahead and build something a little more than hello.
Dialogue: 0,0:41:50.28,0:41:53.70,中文,,0,0,0,,让我们继续构建一些比 hello 更复杂的东西。
Dialogue: 0,0:41:53.70,0:41:58.47,英文,,0,0,0,,Let me propose that over here we implement maybe the simplest of calculators here.
Dialogue: 0,0:41:53.70,0:41:58.47,中文,,0,0,0,,我建议我们在这里实现一个最简单的计算器。
Dialogue: 0,0:41:58.47,0:42:07.24,英文,,0,0,0,,So let me go back to VS Code here, open my terminal window, and open up, say, a file called calculator.py.
Dialogue: 0,0:41:58.47,0:42:07.24,中文,,0,0,0,,让我回到 VS Code，打开我的终端窗口，然后打开一个名为 calculator.py 的文件。
Dialogue: 0,0:42:07.24,0:42:18.04,英文,,0,0,0,,And in calculator.py, we'll have an opportunity to explore some of these building blocks, but we'll allow things to escalate pretty quickly to more interesting examples so that we can do the same thing ultimately as well.
Dialogue: 0,0:42:07.24,0:42:18.04,中文,,0,0,0,,在 calculator.py 中，我们将有机会探索其中的一些代码块，但我们会让事情迅速升级到更有趣的示例，以便我们最终也能做同样的事情。
Dialogue: 0,0:42:18.04,0:42:20.24,英文,,0,0,0,,And in fact, let me go ahead and do this moreover.
Dialogue: 0,0:42:18.04,0:42:20.24,中文,,0,0,0,,事实上，让我继续这样做。
Dialogue: 0,0:42:20.24,0:42:34.31,英文,,0,0,0,,I've brought some code with me in advance, for instance, something called calculator0.c from the first week of C. And let me go ahead and split my window here, in fact, so that I can now do something like,
Dialogue: 0,0:42:20.24,0:42:34.31,中文,,0,0,0,,我提前带来了一些代码，例如，来自 C 语言第一周的 calculator0.c。让我继续拆分我的窗口，以便我可以执行以下操作，
Dialogue: 0,0:42:34.31,0:42:38.43,英文,,0,0,0,,Let me move this over here, here. Calculator.py.
Dialogue: 0,0:42:34.31,0:42:38.43,中文,,0,0,0,,让我把它移到这边，这边。Calculator.py。
Dialogue: 0,0:42:38.43,0:42:45.80,英文,,0,0,0,,So now I have on the left of my screen calculator.c, or calculator0.c, because that's the first version I made, and calculator.py on the right.
Dialogue: 0,0:42:38.43,0:42:45.80,中文,,0,0,0,,所以现在我的屏幕左边是 calculator.c，或者说是 calculator0.c，因为这是我制作的第一个版本，右边是 calculator.py。
Dialogue: 0,0:42:45.80,0:42:48.60,英文,,0,0,0,,Let me go ahead and implement, really, the same idea here.
Dialogue: 0,0:42:45.80,0:42:48.60,中文,,0,0,0,,让我继续在这里实现同样的想法。
Dialogue: 0,0:42:48.60,0:42:53.03,英文,,0,0,0,,So on the right-hand side, the analog of including CS50.h would be from.
Dialogue: 0,0:42:48.60,0:42:53.03,中文,,0,0,0,,所以在右手边，包含 cs50.h 的模拟将来自。
Dialogue: 0,0:42:53.03,0:42:57.31,英文,,0,0,0,,CS50 import getint, if I want to indeed use this function.
Dialogue: 0,0:42:53.03,0:42:57.31,中文,,0,0,0,,cs50 import getint，如果我确实想使用这个函数的话。
Dialogue: 0,0:42:57.31,0:43:00.67,英文,,0,0,0,,Now I'm going to go ahead and give myself a variable x without defining its type.
Dialogue: 0,0:42:57.31,0:43:00.67,中文,,0,0,0,,现在我要继续创建一个变量 x，而不定义它的类型。
Dialogue: 0,0:43:00.67,0:43:14.79,英文,,0,0,0,,I'm going to use this getint function, and I'm going to prompt the user for x, just like in C. I'm then going to go ahead and prompt the user for another int, like y, here, just like in C. And at the very end, I'm going to go ahead and do print x plus y.
Dialogue: 0,0:43:00.67,0:43:14.79,中文,,0,0,0,,我要使用这个 getint 函数，我会提示用户输入 x，就像在 C 语言中一样。\N然后我会继续提示用户输入另一个整数，比如 y，就像在 C 语言中一样。最后，我会继续执行 print x 加 y。
Dialogue: 0,0:43:14.79,0:43:16.11,英文,,0,0,0,,And that's it.
Dialogue: 0,0:43:14.79,0:43:16.11,中文,,0,0,0,,就是这样。
Dialogue: 0,0:43:16.11,0:43:21.23,英文,,0,0,0,,Now granted, I have some comments in my C version of the code, just to remind you of what each line is doing.
Dialogue: 0,0:43:16.11,0:43:21.23,中文,,0,0,0,,当然，我的 C 代码版本中有一些注释，是为了提醒你每一行代码的作用。
Dialogue: 0,0:43:21.23,0:43:25.47,英文,,0,0,0,,But I've still distilled this into like six lines, or really four if I get rid of the blank line.
Dialogue: 0,0:43:21.23,0:43:25.47,中文,,0,0,0,,但我还是把它简化成了六行，如果去掉空行，实际上只有四行。
Dialogue: 0,0:43:25.47,0:43:28.46,英文,,0,0,0,,So it's already perhaps a bit tighter here.
Dialogue: 0,0:43:25.47,0:43:28.46,中文,,0,0,0,,所以这段代码已经相当简洁了。
Dialogue: 0,0:43:28.46,0:43:33.76,英文,,0,0,0,,But there's also, it's tighter because something really important historically is missing.
Dialogue: 0,0:43:28.46,0:43:33.76,中文,,0,0,0,,但也因为它省略了历史上非常重要的东西，所以它才更简洁。
Dialogue: 0,0:43:33.76,0:43:41.03,英文,,0,0,0,,What did I seem to omit altogether that we haven't really highlighted yet?
Dialogue: 0,0:43:33.76,0:43:41.03,中文,,0,0,0,,我似乎完全省略了什么，而我们还没有真正强调过的？
Dialogue: 0,0:43:41.03,0:43:42.83,英文,,0,0,0,,Yeah, the main function is gone.
Dialogue: 0,0:43:41.03,0:43:42.83,中文,,0,0,0,,对，`main` 函数不见了。
Dialogue: 0,0:43:42.83,0:43:47.21,英文,,0,0,0,,And in fact, maybe you took for granted that it just worked a moment ago when I wrote hello.
Dialogue: 0,0:43:42.83,0:43:47.21,中文,,0,0,0,,事实上，也许你认为它刚才在我写 `hello` 的时候就能工作是理所当然的。
Dialogue: 0,0:43:47.21,0:43:49.31,英文,,0,0,0,,But I didn't have a main function in hello either.
Dialogue: 0,0:43:47.21,0:43:49.31,中文,,0,0,0,,但我的 `hello` 程序里也没有 `main` 函数。
Dialogue: 0,0:43:49.31,0:43:52.75,英文,,0,0,0,,And this, too, is a feature of Python and a lot of other languages as well.
Dialogue: 0,0:43:49.31,0:43:52.75,中文,,0,0,0,,这也是 python 和许多其他语言的一个特性。
Dialogue: 0,0:43:52.75,0:43:57.27,英文,,0,0,0,,Instead of having to adhere to these longstanding traditions, if you just want to write code and get something done, fine.
Dialogue: 0,0:43:52.75,0:43:57.27,中文,,0,0,0,,如果你只是想写代码并完成工作，不必遵循这些由来已久的传统。
Dialogue: 0,0:43:57.27,0:44:01.55,英文,,0,0,0,,Just write code and get something done without necessarily all of the same boilerplate.
Dialogue: 0,0:43:57.27,0:44:01.55,中文,,0,0,0,,只需要写代码，完成工作，不需要所有相同的样板文件。
Dialogue: 0,0:44:01.55,0:44:11.14,英文,,0,0,0,,So whatever is in your Python file, left indented, if you will, by default, is just going to be the code that the interpreter runs top to bottom, left to right.
Dialogue: 0,0:44:01.55,0:44:11.14,中文,,0,0,0,,你的 python 文件中，默认情况下，任何左边缩进的代码，都将是解释器自上而下、从左到右运行的代码。
Dialogue: 0,0:44:11.14,0:44:14.54,英文,,0,0,0,,Well, let me go ahead now and run code like this.
Dialogue: 0,0:44:11.14,0:44:14.54,中文,,0,0,0,,接下来，让我运行这样的代码。
Dialogue: 0,0:44:14.54,0:44:19.46,英文,,0,0,0,,Let me go ahead and open back up my terminal window, run Python of calculator.py.
Dialogue: 0,0:44:14.54,0:44:19.46,中文,,0,0,0,,让我打开终端窗口，运行 `python calculator.py`。
Dialogue: 0,0:44:19.46,0:44:21.74,英文,,0,0,0,,And I'll do x is 1, y is 2.
Dialogue: 0,0:44:19.46,0:44:21.74,中文,,0,0,0,,我将输入 `x` 为 `1`，`y` 为 `2`。
Dialogue: 0,0:44:21.74,0:44:23.48,英文,,0,0,0,,And as you might expect, it gives me 3.
Dialogue: 0,0:44:21.74,0:44:23.48,中文,,0,0,0,,不出所料，它输出了 `3`。
Dialogue: 0,0:44:23.48,0:44:24.60,英文,,0,0,0,,Slight aesthetic bug.
Dialogue: 0,0:44:23.48,0:44:24.60,中文,,0,0,0,,有个小瑕疵。
Dialogue: 0,0:44:24.60,0:44:26.52,英文,,0,0,0,,I put my space in the wrong place here.
Dialogue: 0,0:44:24.60,0:44:26.52,中文,,0,0,0,,我把空格放错地方了。
Dialogue: 0,0:44:26.52,0:44:27.80,英文,,0,0,0,,So that's a newbie mistake.
Dialogue: 0,0:44:26.52,0:44:27.80,中文,,0,0,0,,这是新手常犯的错误。
Dialogue: 0,0:44:27.80,0:44:29.34,英文,,0,0,0,,Let me fix that aesthetically.
Dialogue: 0,0:44:27.80,0:44:29.34,中文,,0,0,0,,让我从美观角度修复一下。
Dialogue: 0,0:44:29.34,0:44:32.88,英文,,0,0,0,,Let me rerun Python of calculator.py, type in 1, type in 2.
Dialogue: 0,0:44:29.34,0:44:32.88,中文,,0,0,0,,让我重新运行一下 calculator.py，输入 1，再输入 2。
Dialogue: 0,0:44:32.88,0:44:36.38,英文,,0,0,0,,And voila, there is now my same version again.
Dialogue: 0,0:44:32.88,0:44:36.38,中文,,0,0,0,,瞧，现在又出现了我之前写的版本。
Dialogue: 0,0:44:36.38,0:44:39.58,英文,,0,0,0,,But let me propose now that We get rid of this training wheel.
Dialogue: 0,0:44:36.38,0:44:39.58,中文,,0,0,0,,但是现在我建议我们去掉这个辅助轮。
Dialogue: 0,0:44:39.58,0:44:43.53,英文,,0,0,0,,We don't want to keep taking one step forward and then two steps back by adding these training wheels.
Dialogue: 0,0:44:39.58,0:44:43.53,中文,,0,0,0,,我们不希望一直在前进了一步之后，又因为添加了这些辅助轮而后退两步。
Dialogue: 0,0:44:43.53,0:44:45.49,英文,,0,0,0,,So let me instead do this.
Dialogue: 0,0:44:43.53,0:44:45.49,中文,,0,0,0,,所以让我这样做。
Dialogue: 0,0:44:45.49,0:44:53.18,英文,,0,0,0,,In my version of calculator.py, suppose that we take away already the training wheel that is the CS50 library here.
Dialogue: 0,0:44:45.49,0:44:53.18,中文,,0,0,0,,在我的 calculator.py 版本中，假设我们已经去掉了这里的 cs50 库这个辅助轮。
Dialogue: 0,0:44:53.18,0:44:58.96,英文,,0,0,0,,And let me instead then use just Python's built-in function called input, which literally does just that.
Dialogue: 0,0:44:53.18,0:44:58.96,中文,,0,0,0,,让我用 python 内置的 input 函数来代替它，它的作用正如其名。
Dialogue: 0,0:44:58.96,0:45:01.54,英文,,0,0,0,,It gets input from the user.
Dialogue: 0,0:44:58.96,0:45:01.54,中文,,0,0,0,,它从用户那里获取输入。
Dialogue: 0,0:45:01.54,0:45:05.33,英文,,0,0,0,,And it stores it, as before, in x and y. So this is not CS50 specific.
Dialogue: 0,0:45:01.54,0:45:05.33,中文,,0,0,0,,和之前一样，它将输入存储在 x 和 y 中。所以这不是 cs50 特有的。
Dialogue: 0,0:45:05.33,0:45:07.65,英文,,0,0,0,,This is real-world Python programming.
Dialogue: 0,0:45:05.33,0:45:07.65,中文,,0,0,0,,这是现实世界中的 python 编程。
Dialogue: 0,0:45:07.65,0:45:10.97,英文,,0,0,0,,Well, let me go ahead and run, again, Python of calculator.py.
Dialogue: 0,0:45:07.65,0:45:10.97,中文,,0,0,0,,让我继续运行 python 的 calculator.py。
Dialogue: 0,0:45:10.97,0:45:16.28,英文,,0,0,0,,And of course, if x is 1 and y is 2, x plus y should, of course, still be 3.
Dialogue: 0,0:45:10.97,0:45:16.28,中文,,0,0,0,,当然，如果 x 是 1，y 是 2，那么 x 加 y 应该仍然是 3。
Dialogue: 0,0:45:16.28,0:45:24.60,英文,,0,0,0,,Hm. It's apparently 12, according to Python, until CS50's library gets involved.
Dialogue: 0,0:45:16.28,0:45:24.60,中文,,0,0,0,,嗯。根据 python 的说法，在 cs50 的库介入之前，结果显然是 12。
Dialogue: 0,0:45:24.60,0:45:28.63,英文,,0,0,0,,But does anyone want to infer what just went wrong?
Dialogue: 0,0:45:24.60,0:45:28.63,中文,,0,0,0,,但是有人能推断出哪里出问题了吗？
Dialogue: 0,0:45:28.63,0:45:33.57,英文,,0,0,0,,Yeah.
Dialogue: 0,0:45:28.63,0:45:33.57,中文,,0,0,0,,有的。
Dialogue: 0,0:45:33.57,0:45:38.09,英文,,0,0,0,,Exactly, the input function, by design, always returns a string of text.
Dialogue: 0,0:45:33.57,0:45:38.09,中文,,0,0,0,,没错，input 函数的设计初衷就是始终返回字符串。
Dialogue: 0,0:45:38.09,0:45:39.77,英文,,0,0,0,,After all, that's what the human typed in.
Dialogue: 0,0:45:38.09,0:45:39.77,中文,,0,0,0,,毕竟，这就是用户输入的内容。
Dialogue: 0,0:45:39.77,0:45:44.76,英文,,0,0,0,,And even though, yes, I typed the number keys on the keyboard, it's still coming back as all text.
Dialogue: 0,0:45:39.77,0:45:44.76,中文,,0,0,0,,即使我按下了键盘上的数字键，它仍然会以文本的形式返回。
Dialogue: 0,0:45:44.76,0:45:47.18,英文,,0,0,0,,Now, maybe we should use a getInt function.
Dialogue: 0,0:45:44.76,0:45:47.18,中文,,0,0,0,,现在，也许我们应该使用 ge_int 函数。
Dialogue: 0,0:45:47.18,0:45:48.92,英文,,0,0,0,,Well, that doesn't exist in Python.
Dialogue: 0,0:45:47.18,0:45:48.92,中文,,0,0,0,,python 中没有这个函数。
Dialogue: 0,0:45:48.92,0:45:52.48,英文,,0,0,0,,All you can do is get textual input, a string from the user.
Dialogue: 0,0:45:48.92,0:45:52.48,中文,,0,0,0,,你只能从用户那里获取文本输入，也就是字符串。
Dialogue: 0,0:45:52.48,0:45:54.75,英文,,0,0,0,,But we can convert one to the other.
Dialogue: 0,0:45:52.48,0:45:54.75,中文,,0,0,0,,但我们可以把一种类型转换为另一种类型。
Dialogue: 0,0:45:54.75,0:46:02.77,英文,,0,0,0,,And so a fix for this, so that we don't accidentally concatenate, that is, join x plus y together, would be to do something like this.
Dialogue: 0,0:45:54.75,0:46:02.77,中文,,0,0,0,,为了避免意外地将 x 和 y 连接在一起，我们可以这样做。
Dialogue: 0,0:46:02.77,0:46:05.09,英文,,0,0,0,,Let me go back to my Python code here.
Dialogue: 0,0:46:02.77,0:46:05.09,中文,,0,0,0,,让我回到 python 代码这里。
Dialogue: 0,0:46:05.09,0:46:08.85,英文,,0,0,0,,And whereas in C, we could previously do typecasting.
Dialogue: 0,0:46:05.09,0:46:08.85,中文,,0,0,0,,在 C 语言中，我们可以进行类型转换。
Dialogue: 0,0:46:08.85,0:46:11.21,英文,,0,0,0,,We could convert one type to another.
Dialogue: 0,0:46:08.85,0:46:11.21,中文,,0,0,0,,我们可以将一种类型转换为另一种类型。
Dialogue: 0,0:46:11.21,0:46:15.66,英文,,0,0,0,,That generally wasn't the case when you were doing something complex like a string to an int.
Dialogue: 0,0:46:11.21,0:46:15.66,中文,,0,0,0,,但是，当你在处理像字符串到整数这样复杂的转换时，通常情况并非如此。
Dialogue: 0,0:46:15.66,0:46:18.52,英文,,0,0,0,,You could do a char to an int, and vice versa.
Dialogue: 0,0:46:15.66,0:46:18.52,中文,,0,0,0,,你可以将字符转换为整数，反之亦然。
Dialogue: 0,0:46:18.52,0:46:25.28,英文,,0,0,0,,But for a string, recall there was a special function in the C type library called a to i, like ASCII to integer.
Dialogue: 0,0:46:18.52,0:46:25.28,中文,,0,0,0,,但是对于字符串，回想一下，在 C 语言类型库中有一个特殊的函数叫做 a to i，就像 ASCII 转换为整数一样。
Dialogue: 0,0:46:25.28,0:46:28.16,英文,,0,0,0,,That's the closest analog here.
Dialogue: 0,0:46:25.28,0:46:28.16,中文,,0,0,0,,这是这里最接近的类比。
Dialogue: 0,0:46:28.16,0:46:32.64,英文,,0,0,0,,And in fact, the way to do this in Python would be to use a function called int.
Dialogue: 0,0:46:28.16,0:46:32.64,中文,,0,0,0,,实际上，在 python 中实现这一点的方法是使用一个名为 int 的函数。
Dialogue: 0,0:46:32.64,0:46:36.61,英文,,0,0,0,,Which, indeed, is the name of the data type, too, even though I have not yet had to type it.
Dialogue: 0,0:46:32.64,0:46:36.61,中文,,0,0,0,,它也是数据类型的名称，即使我还没有输入它。
Dialogue: 0,0:46:36.61,0:46:44.77,英文,,0,0,0,,And I can convert the output of the input function automatically from a string immediately to an int.
Dialogue: 0,0:46:36.61,0:46:44.77,中文,,0,0,0,,我可以将 input 函数的输出自动从字符串转换为整数。
Dialogue: 0,0:46:44.77,0:46:53.14,英文,,0,0,0,,And now, if I go back to my terminal window, rerun Python of calculator.py with 1 and 2 for x and y, now I'm back in business.
Dialogue: 0,0:46:44.77,0:46:53.14,中文,,0,0,0,,现在，如果我回到终端窗口，用 1 和 2 作为 x 和 y 的值重新运行 calculator.py，现在我又可以正常工作了。
Dialogue: 0,0:46:53.14,0:46:59.91,英文,,0,0,0,,That then is, for instance, what the CS50 library does, if temporarily this week, is it just deals with the conversion for you.
Dialogue: 0,0:46:53.14,0:46:59.91,中文,,0,0,0,,例如，这就是 cs50 库的作用，本周暂时是这样，它只是为你处理转换。
Dialogue: 0,0:46:59.91,0:47:05.74,英文,,0,0,0,,And in fact, bad things could happen if I type the wrong thing, like dog or cat, instead of a number.
Dialogue: 0,0:46:59.91,0:47:05.74,中文,,0,0,0,,事实上，如果我输入错误的内容，比如 dog 或 cat，而不是数字，就会发生不好的事情。
Dialogue: 0,0:47:05.74,0:47:08.78,英文,,0,0,0,,But we'll cross that bridge in just a moment as well.
Dialogue: 0,0:47:05.74,0:47:08.78,中文,,0,0,0,,不过我们一会儿也会解决这个问题。
Dialogue: 0,0:47:08.78,0:47:12.01,英文,,0,0,0,,All right, what if we do something slightly different now with our calculator?
Dialogue: 0,0:47:08.78,0:47:12.01,中文,,0,0,0,,好了，如果我们现在对计算器做一些稍微不同的操作呢？
Dialogue: 0,0:47:12.01,0:47:18.97,英文,,0,0,0,,Instead of just addition, let me go ahead and do how about, instead of addition, let's do division instead.
Dialogue: 0,0:47:12.01,0:47:18.97,中文,,0,0,0,,不只是加法，让我继续，让我们来做除法，而不是加法。
Dialogue: 0,0:47:18.97,0:47:27.77,英文,,0,0,0,,So z equals x divided by y, thereby giving me a third variable z. Let me go ahead and run Python of calculator.py again.
Dialogue: 0,0:47:18.97,0:47:27.77,中文,,0,0,0,,所以 z 等于 x 除以 y，从而得到第三个变量 z，让我继续运行 calculator.py。
Dialogue: 0,0:47:27.77,0:47:29.21,英文,,0,0,0,,I'll type in 1.
Dialogue: 0,0:47:27.77,0:47:29.21,中文,,0,0,0,,我输入 1。
Dialogue: 0,0:47:29.21,0:47:32.05,英文,,0,0,0,,I'll type in 3 this time.
Dialogue: 0,0:47:29.21,0:47:32.05,中文,,0,0,0,,这次我输入 3。
Dialogue: 0,0:47:32.05,0:47:37.56,英文,,0,0,0,,And what problem do you think we're about to see?
Dialogue: 0,0:47:32.05,0:47:37.56,中文,,0,0,0,,你觉得我们接下来会遇到什么问题？
Dialogue: 0,0:47:37.56,0:47:38.42,英文,,0,0,0,,Or is it gone?
Dialogue: 0,0:47:37.56,0:47:38.42,中文,,0,0,0,,还是说它已经消失了？
Dialogue: 0,0:47:38.42,0:47:47.80,英文,,0,0,0,,What happened when I did this in C, albeit with some slightly more cryptic syntax, when I divided one number, like 1 divided by 3?
Dialogue: 0,0:47:38.42,0:47:47.80,中文,,0,0,0,,用 C 语言（尽管语法有点晦涩）做除法时，比如 1 除以 3，会发生什么？
Dialogue: 0,0:47:47.80,0:47:48.62,英文,,0,0,0,,Anyone recall?
Dialogue: 0,0:47:47.80,0:47:48.62,中文,,0,0,0,,有人记得吗？
Dialogue: 0,0:47:48.62,0:47:51.46,英文,,0,0,0,,Yeah.
Dialogue: 0,0:47:48.62,0:47:51.46,中文,,0,0,0,,记得。
Dialogue: 0,0:47:51.46,0:47:57.49,英文,,0,0,0,,Yeah, so it would round down to the nearest integer, whereby you experience truncation.
Dialogue: 0,0:47:51.46,0:47:57.49,中文,,0,0,0,,它会向下舍入到最接近的整数，也就是你遇到的截断现象。
Dialogue: 0,0:47:57.49,0:48:06.49,英文,,0,0,0,,So if you take an integer, like 1, you divide it by another integer, like 3, that technically should be 0.33333 infinitely long.
Dialogue: 0,0:47:57.49,0:48:06.49,中文,,0,0,0,,如果你用一个整数，比如 1，除以另一个整数，比如 3，技术上应该是 0.33333 无限循环。
Dialogue: 0,0:48:06.49,0:48:10.62,英文,,0,0,0,,But in C, recall, you truncate the value.
Dialogue: 0,0:48:06.49,0:48:10.62,中文,,0,0,0,,但回想一下，在 C 语言中，你会截断这个值。
Dialogue: 0,0:48:10.62,0:48:15.34,英文,,0,0,0,,If you divide an int by an int, you get back an int, which means you get only the integer part, which was the 0.
Dialogue: 0,0:48:10.62,0:48:15.34,中文,,0,0,0,,如果你用一个 int 类型除以一个 int 类型，你会得到一个 int 类型，这意味着你只得到整数部分，也就是 0。
Dialogue: 0,0:48:15.34,0:48:19.14,英文,,0,0,0,,Now, Python actually handles this for us and avoids the truncation.
Dialogue: 0,0:48:15.34,0:48:19.14,中文,,0,0,0,,现在，python 实际上帮我们处理了这个问题，避免了截断。
Dialogue: 0,0:48:19.14,0:48:27.51,英文,,0,0,0,,But it leaves us still with one other problem here, which is going to be, for instance, not necessarily visible at a glance.
Dialogue: 0,0:48:19.14,0:48:27.51,中文,,0,0,0,,但这仍然给我们留下了另一个问题，这个问题不一定一眼就能看出来。
Dialogue: 0,0:48:27.51,0:48:28.47,英文,,0,0,0,,This looks correct.
Dialogue: 0,0:48:27.51,0:48:28.47,中文,,0,0,0,,这看起来没问题。
Dialogue: 0,0:48:28.47,0:48:32.19,英文,,0,0,0,,This has solved the problem in C. So truncation does not happen.
Dialogue: 0,0:48:28.47,0:48:32.19,中文,,0,0,0,,这解决了 C 语言中的问题，所以不会发生截断。
Dialogue: 0,0:48:32.19,0:48:36.19,英文,,0,0,0,,The integers are automatically converted to a float, a floating point value.
Dialogue: 0,0:48:32.19,0:48:36.19,中文,,0,0,0,,整数会自动转换为 float，也就是浮点数。
Dialogue: 0,0:48:36.19,0:48:44.61,英文,,0,0,0,,But what other problem did we trip over back in week one?
Dialogue: 0,0:48:36.19,0:48:44.61,中文,,0,0,0,,但我们在第一周还遇到了什么其他问题？
Dialogue: 0,0:48:44.61,0:48:49.86,英文,,0,0,0,,What else got a little dicey when dealing with simple arithmetic?
Dialogue: 0,0:48:44.61,0:48:49.86,中文,,0,0,0,,在处理简单的算术运算时，还有什么问题？
Dialogue: 0,0:48:49.86,0:48:51.50,英文,,0,0,0,,Anyone recall?
Dialogue: 0,0:48:49.86,0:48:51.50,中文,,0,0,0,,有人记得吗？
Dialogue: 0,0:48:51.50,0:48:54.76,英文,,0,0,0,,Well, the syntax in Python is a little different, but let me go ahead and do this.
Dialogue: 0,0:48:51.50,0:48:54.76,中文,,0,0,0,,python 的语法有点不同，但是让我来演示一下。
Dialogue: 0,0:48:54.76,0:49:03.95,英文,,0,0,0,,It turns out in Python, if you want to see more significant digits than what I'm seeing here by default, which is a dozen or so, let me go ahead and print out z as follows.
Dialogue: 0,0:48:54.76,0:49:03.95,中文,,0,0,0,,事实证明，在 python 中，如果你想看到比默认的十几个有效数字更多，我可以像下面这样打印出 z。
Dialogue: 0,0:49:03.95,0:49:08.92,英文,,0,0,0,,Let me first print out a format string, because I want to format z in an interesting way.
Dialogue: 0,0:49:03.95,0:49:08.92,中文,,0,0,0,,我先打印一个格式字符串，因为我想以一种有趣的方式来格式化 z。
Dialogue: 0,0:49:08.92,0:49:11.38,英文,,0,0,0,,And notice, this would have no effect on the difference.
Dialogue: 0,0:49:08.92,0:49:11.38,中文,,0,0,0,,注意，这对结果没有影响。
Dialogue: 0,0:49:11.38,0:49:19.56,英文,,0,0,0,,This is just a format string that, for no compelling reason at the moment, is interpolating z in those curly braces using an f string, or format string.
Dialogue: 0,0:49:11.38,0:49:19.56,中文,,0,0,0,,这只是一个格式字符串，目前没有特别的原因，它使用 f 字符串或格式字符串将 z 插入到这些花括号中。
Dialogue: 0,0:49:19.56,0:49:23.51,英文,,0,0,0,,If I run this again with 1 and 3, we'll see, indeed, the exact same thing.
Dialogue: 0,0:49:19.56,0:49:23.51,中文,,0,0,0,,如果我用 1 和 3 再次运行它，我们会看到，确实是一样的结果。
Dialogue: 0,0:49:23.51,0:49:31.41,英文,,0,0,0,,But when you use an f string, you, indeed, have the ability to format that string more precisely, just like with %f in Python.
Dialogue: 0,0:49:23.51,0:49:31.41,中文,,0,0,0,,但是当你使用 f 字符串时，你确实能够更精确地格式化该字符串，就像 python 中的 %f 一样。
Dialogue: 0,0:49:31.41,0:49:37.13,英文,,0,0,0,,You could start to fine-tune how many significant digits you see in C.
Dialogue: 0,0:49:31.41,0:49:37.13,中文,,0,0,0,,你可以开始微调在 C 中看到的有效数字位数。
Dialogue: 0,0:49:37.13,0:49:40.65,英文,,0,0,0,,Rather, in Python, you can do the same, but the syntax is a little different.
Dialogue: 0,0:49:37.13,0:49:40.65,中文,,0,0,0,,更确切地说，在 python 中，你可以做同样的事情，但语法略有不同。
Dialogue: 0,0:49:40.65,0:49:51.71,英文,,0,0,0,,If you want the computer to interpolate z and show you 50 significant digits, that is, 50 numbers after the decimal point, syntax is similar to C, but it's a little different.
Dialogue: 0,0:49:40.65,0:49:51.71,中文,,0,0,0,,如果你想让计算机插入 z 并显示 50 位有效数字，也就是小数点后的 50 位数字，语法与 C 类似，但略有不同。
Dialogue: 0,0:49:51.71,0:49:54.63,英文,,0,0,0,,You literally put a colon after the variable's name.
Dialogue: 0,0:49:51.71,0:49:54.63,中文,,0,0,0,,你只需在变量名后面加一个冒号。
Dialogue: 0,0:49:54.63,0:49:59.27,英文,,0,0,0,,Dot 50 means show me the decimal point, and then 50 digits to the right.
Dialogue: 0,0:49:54.63,0:49:59.27,中文,,0,0,0,,点 50 表示显示小数点，然后是小数点右边的 50 位数字。
Dialogue: 0,0:49:59.27,0:50:02.83,英文,,0,0,0,,And the F just indicates, please treat this as a floating point value.
Dialogue: 0,0:49:59.27,0:50:02.83,中文,,0,0,0,,f 只是表示，请将此视为浮点值。
Dialogue: 0,0:50:02.83,0:50:12.80,英文,,0,0,0,,So now, if I rerun Python of calculator.py, divide 1 by 3, unfortunately, Python has not solved all of the world's problems for us.
Dialogue: 0,0:50:02.83,0:50:12.80,中文,,0,0,0,,所以现在，如果我重新运行 python 的 calculator.py，将 1 除以 3，不幸的是，python 并没有为我们解决所有世界难题。
Dialogue: 0,0:50:12.80,0:50:16.00,英文,,0,0,0,,This, again, was an example of floating-point imprecision.
Dialogue: 0,0:50:12.80,0:50:16.00,中文,,0,0,0,,这又是一个浮点精度不足的例子。
Dialogue: 0,0:50:16.00,0:50:17.88,英文,,0,0,0,,So that problem is still latent.
Dialogue: 0,0:50:16.00,0:50:17.88,中文,,0,0,0,,所以这个问题仍然存在。
Dialogue: 0,0:50:17.88,0:50:22.49,英文,,0,0,0,,So just because the world has advanced doesn't necessarily mean that all of our problems from C have gone away.
Dialogue: 0,0:50:17.88,0:50:22.49,中文,,0,0,0,,仅仅因为世界进步了，并不一定意味着我们在 C 中遇到的所有问题都消失了。
Dialogue: 0,0:50:22.49,0:50:27.51,英文,,0,0,0,,There are solutions using third-party libraries for scientific calculations and the like.
Dialogue: 0,0:50:22.49,0:50:27.51,中文,,0,0,0,,有一些解决方案，可以使用第三方库进行科学计算等。
Dialogue: 0,0:50:27.51,0:50:32.06,英文,,0,0,0,,But out of the box, floating-point imprecision is still an issue.
Dialogue: 0,0:50:27.51,0:50:32.06,中文,,0,0,0,,但是，开箱即用，浮点精度不足仍然是一个问题。
Dialogue: 0,0:50:32.06,0:50:37.44,英文,,0,0,0,,Meanwhile, there was one other problem in C that we ran into involving numbers.
Dialogue: 0,0:50:32.06,0:50:37.44,中文,,0,0,0,,同时，我们在 C 中还遇到了另一个与数字有关的问题。
Dialogue: 0,0:50:37.44,0:50:39.90,英文,,0,0,0,,And that was this. Integer overflow.
Dialogue: 0,0:50:37.44,0:50:39.90,中文,,0,0,0,,那就是这个。整数溢出。
Dialogue: 0,0:50:39.90,0:50:48.47,英文,,0,0,0,,Recall that an integer in C only took up, what, like 32 bits typically, which meant you could count as high as 4 billion, or maybe if you're doing positive and negatives, as high as 2 billion.
Dialogue: 0,0:50:39.90,0:50:48.47,中文,,0,0,0,,回想一下，C 语言中的整数通常只占用 32 位，这意味着你最多可以计数到 40 亿，或者如果考虑正负数的话，最多可以计数到 20 亿。
Dialogue: 0,0:50:48.47,0:50:50.33,英文,,0,0,0,,After which, weird things would happen.
Dialogue: 0,0:50:48.47,0:50:50.33,中文,,0,0,0,,超过这个范围，就会发生奇怪的事情。
Dialogue: 0,0:50:50.33,0:50:55.13,英文,,0,0,0,,The number would go to 0, or negative, or just it would overflow or wrap back around.
Dialogue: 0,0:50:50.33,0:50:55.13,中文,,0,0,0,,数字会变成 0，或者变成负数，或者溢出，或者回绕。
Dialogue: 0,0:50:55.13,0:50:58.29,英文,,0,0,0,,Well, wonderfully in Python, they did at least address this.
Dialogue: 0,0:50:55.13,0:50:58.29,中文,,0,0,0,,好消息是，python 至少解决了这个问题。
Dialogue: 0,0:50:58.29,0:51:01.19,英文,,0,0,0,,whereby you can count as high as you want.
Dialogue: 0,0:50:58.29,0:51:01.19,中文,,0,0,0,,你可以想计数多少就计数多少。
Dialogue: 0,0:51:01.19,0:51:06.61,英文,,0,0,0,,And Python will just use more and more and more and more bits and bytes to store really big numbers.
Dialogue: 0,0:51:01.19,0:51:06.61,中文,,0,0,0,,python 会使用越来越多的位和字节来存储非常大的数字。
Dialogue: 0,0:51:06.61,0:51:09.23,英文,,0,0,0,,So integer overflow is not a thing.
Dialogue: 0,0:51:06.61,0:51:09.23,中文,,0,0,0,,所以整数溢出不会发生。
Dialogue: 0,0:51:09.23,0:51:15.82,英文,,0,0,0,,With that said, Python is limited to how many digits it will show you on the screen at once as a string.
Dialogue: 0,0:51:09.23,0:51:15.82,中文,,0,0,0,,也就是说，python 在屏幕上一次性以字符串形式显示的数字位数是有限制的。
Dialogue: 0,0:51:15.82,0:51:18.64,英文,,0,0,0,,But mathematically, your math will be correct now.
Dialogue: 0,0:51:15.82,0:51:18.64,中文,,0,0,0,,但从数学上讲，你的计算现在是正确的。
Dialogue: 0,0:51:18.64,0:51:22.24,英文,,0,0,0,,So we've taken a couple steps forward, one step sideways.
Dialogue: 0,0:51:18.64,0:51:22.24,中文,,0,0,0,,所以我们向前迈了几步，也侧着走了一步。
Dialogue: 0,0:51:22.24,0:51:25.62,英文,,0,0,0,,But indeed, we've solved some of our problems here.
Dialogue: 0,0:51:22.24,0:51:25.62,中文,,0,0,0,,但我们确实解决了一些问题。
Dialogue: 0,0:51:25.62,0:51:32.64,英文,,0,0,0,,All right, questions now on any of these examples thus far?
Dialogue: 0,0:51:25.62,0:51:32.64,中文,,0,0,0,,好了，到目前为止，关于这些例子，大家有什么问题吗？
Dialogue: 0,0:51:32.64,0:51:34.43,英文,,0,0,0,,Question.
Dialogue: 0,0:51:32.64,0:51:34.43,中文,,0,0,0,,提问。
Dialogue: 0,0:51:34.43,0:51:39.61,英文,,0,0,0,,All right, well, how about another problem that we encountered in C?
Dialogue: 0,0:51:34.43,0:51:39.61,中文,,0,0,0,,我们再来看看在 C 语言中遇到的另一个问题。
Dialogue: 0,0:51:39.61,0:51:41.97,英文,,0,0,0,,Let's revisit it here in Python as well.
Dialogue: 0,0:51:39.61,0:51:41.97,中文,,0,0,0,,我们也来在 python 中回顾一下。
Dialogue: 0,0:51:41.97,0:51:49.70,英文,,0,0,0,,So let me go ahead, and on the left-hand side here, let me open up a file called, say, compare. Let's see.
Dialogue: 0,0:51:41.97,0:51:49.70,中文,,0,0,0,,让我来演示一下，在左侧，我打开一个名为 compare 的文件，比方说。
Dialogue: 0,0:51:49.70,0:51:54.08,英文,,0,0,0,,How about a file called compare3.c on the left?
Dialogue: 0,0:51:49.70,0:51:54.08,中文,,0,0,0,,在左侧创建一个名为 compare3.c 的文件怎么样？
Dialogue: 0,0:51:54.08,0:52:03.31,英文,,0,0,0,,And let me go ahead and create a new file on the right called compare.py, because recall that bad things happened when we needed to compare two values in C.
Dialogue: 0,0:51:54.08,0:52:03.31,中文,,0,0,0,,然后我在右侧创建一个名为 compare.py 的新文件，因为回想一下，当我们需要在 C 语言中比较两个值时，会发生不好的事情。
Dialogue: 0,0:52:03.31,0:52:11.31,英文,,0,0,0,,So on the left here is a reminder of what we once did in C, whereby if we want to compare values, we can get an int in C, store it in x,
Dialogue: 0,0:52:03.31,0:52:11.31,中文,,0,0,0,,左侧是我们在 C 语言中所做的事情的提醒，如果我们想比较值，我们可以使用 C 语言中的 int 类型，将其存储在 x 中，
Dialogue: 0,0:52:11.31,0:52:19.31,英文,,0,0,0,, get int in C, store it in y. We then have our familiar conditional logic here, just printing out if x is less than y or not.
Dialogue: 0,0:52:11.31,0:52:19.31,中文,,0,0,0,,再使用 C 语言中的 int 类型，将其存储在 y 中。然后我们使用熟悉的条件逻辑，打印出 x 是否小于 y。
Dialogue: 0,0:52:19.31,0:52:25.71,英文,,0,0,0,,Well, we can certainly do the same thing ultimately in Python by using some fairly familiar syntax.
Dialogue: 0,0:52:19.31,0:52:25.71,中文,,0,0,0,,当然，我们最终可以使用一些相当熟悉的语法在 python 中做同样的事情。
Dialogue: 0,0:52:25.71,0:52:27.73,英文,,0,0,0,,And let's just demonstrate this one quickly.
Dialogue: 0,0:52:25.71,0:52:27.73,中文,,0,0,0,,让我们快速演示一下。
Dialogue: 0,0:52:27.73,0:52:29.57,英文,,0,0,0,,Let me go over here, too.
Dialogue: 0,0:52:27.73,0:52:29.57,中文,,0,0,0,,我也要切换到这里。
Dialogue: 0,0:52:29.57,0:52:36.94,英文,,0,0,0,,I'll do from CS50 import getInt, even though I could do this instead with the input function itself.
Dialogue: 0,0:52:29.57,0:52:36.94,中文,,0,0,0,,我会执行 `from cs50 import ge_int`，虽然我也可以直接用 `input` 函数做到这一点。
Dialogue: 0,0:52:36.94,0:52:40.04,英文,,0,0,0,,x equals getInt, and I'll prompt the user for that.
Dialogue: 0,0:52:36.94,0:52:40.04,中文,,0,0,0,,`x` = `ge_int`，我会提示用户输入。
Dialogue: 0,0:52:40.04,0:52:43.30,英文,,0,0,0,,y equals getInt, and I'll prompt the user for that.
Dialogue: 0,0:52:40.04,0:52:43.30,中文,,0,0,0,,`y` = `ge_int`，我也会提示用户输入。
Dialogue: 0,0:52:43.30,0:52:54.12,英文,,0,0,0,,After that, recall that I can say, without parentheses, if x is less than y, then print out, without the f, x is less than y.
Dialogue: 0,0:52:43.30,0:52:54.12,中文,,0,0,0,,之后，回想一下，我可以不用括号，直接说如果 `x` < `y`，就打印出来，不用 f 字符串，`x` 小于 `y`。
Dialogue: 0,0:52:54.12,0:53:06.12,英文,,0,0,0,,Then I can go ahead and say, else if x is greater than y, I can print out, quote unquote, x is greater than y. If you'd like to interject now, what did I screw up?
Dialogue: 0,0:52:54.12,0:53:06.12,中文,,0,0,0,,然后我可以继续说，`else if`  `x` > `y`，我可以打印出来，用引号括起来，`x` 大于 `y`。如果你想打断我，我哪里写错了？
Dialogue: 0,0:53:06.12,0:53:07.39,英文,,0,0,0,,Yeah.
Dialogue: 0,0:53:06.12,0:53:07.39,中文,,0,0,0,,是的。
Dialogue: 0,0:53:07.39,0:53:20.15,英文,,0,0,0,,L if, right? So L if. Elif, x is greater than y. Else, this part's the same, print x is equal to y. So there's no new logic going on here.
Dialogue: 0,0:53:07.39,0:53:20.15,中文,,0,0,0,,`elif`，对吧？应该是 `elif`， `x` > `y`。`else`，这部分一样，打印 `x` 等于 `y`。这里没有新的逻辑。
Dialogue: 0,0:53:20.15,0:53:21.98,英文,,0,0,0,,But at least syntactically, it's a little cleaner.
Dialogue: 0,0:53:20.15,0:53:21.98,中文,,0,0,0,,但至少在语法上，它更简洁一些。
Dialogue: 0,0:53:21.98,0:53:25.62,英文,,0,0,0,,Indeed, this program is only 11 lines long, albeit without any comments.
Dialogue: 0,0:53:21.98,0:53:25.62,中文,,0,0,0,,的确，这个程序只有 11 行，尽管没有任何注释。
Dialogue: 0,0:53:25.62,0:53:28.18,英文,,0,0,0,,Let me go ahead and run Python of compare.py.
Dialogue: 0,0:53:25.62,0:53:28.18,中文,,0,0,0,,让我继续运行 `python compare.py`。
Dialogue: 0,0:53:28.18,0:53:30.58,英文,,0,0,0,,Let's see. Is 1 less than 2?
Dialogue: 0,0:53:28.18,0:53:30.58,中文,,0,0,0,,让我们看看。1 小于 2 吗？
Dialogue: 0,0:53:30.58,0:53:31.14,英文,,0,0,0,,Indeed.
Dialogue: 0,0:53:30.58,0:53:31.14,中文,,0,0,0,,确实是。
Dialogue: 0,0:53:31.14,0:53:32.12,英文,,0,0,0,,Let's run it again.
Dialogue: 0,0:53:31.14,0:53:32.12,中文,,0,0,0,,我们再运行一次。
Dialogue: 0,0:53:32.12,0:53:33.78,英文,,0,0,0,,Is 2 less than 1?
Dialogue: 0,0:53:32.12,0:53:33.78,中文,,0,0,0,,2 小于 1 吗？
Dialogue: 0,0:53:33.78,0:53:35.00,英文,,0,0,0,,No, it's greater than.
Dialogue: 0,0:53:33.78,0:53:35.00,中文,,0,0,0,,不，它大于 1。
Dialogue: 0,0:53:35.00,0:53:39.32,英文,,0,0,0,,And let's lastly type in 1 and 1 twice, x is equal to y.
Dialogue: 0,0:53:35.00,0:53:39.32,中文,,0,0,0,,最后让我们输入两次 1 和 1，`x` 等于 `y`。
Dialogue: 0,0:53:39.32,0:53:42.45,英文,,0,0,0,,So we've got a pretty side-by-side, one-to-one conversion here.
Dialogue: 0,0:53:39.32,0:53:42.45,中文,,0,0,0,,所以我们在这里进行了一个相当一对一的转换。
Dialogue: 0,0:53:42.45,0:53:49.52,英文,,0,0,0,,Let's do something a little more interesting then and see, how about I open instead something where we actually compared for a purpose?
Dialogue: 0,0:53:42.45,0:53:49.52,中文,,0,0,0,,让我们做一些更有趣的事情，看看我打开一个我们实际比较过的文件怎么样？
Dialogue: 0,0:53:49.52,0:53:57.59,英文,,0,0,0,,So if I open up from earlier in the course, how about agree.c?
Dialogue: 0,0:53:49.52,0:53:57.59,中文,,0,0,0,,如果我打开课程前面的内容，`agree.c` 怎么样？
Dialogue: 0,0:53:57.59,0:54:00.65,英文,,0,0,0,,which prompt the user to agree to something or not.
Dialogue: 0,0:53:57.59,0:54:00.65,中文,,0,0,0,,它会提示用户是否同意某件事。
Dialogue: 0,0:54:00.65,0:54:04.07,英文,,0,0,0,,And let me code up a new version here called agree.py.
Dialogue: 0,0:54:00.65,0:54:04.07,中文,,0,0,0,,让我来写一个新版本，叫做 agree.py。
Dialogue: 0,0:54:04.07,0:54:06.83,英文,,0,0,0,,And I'll do this on the right-hand side with agree.py.
Dialogue: 0,0:54:04.07,0:54:06.83,中文,,0,0,0,,我会在右边用 agree.py 来完成。
Dialogue: 0,0:54:06.83,0:54:24.17,英文,,0,0,0,,But on agree.c on the left, notice that this is how we did this sort of yes-no thing in C. We compared C, a character, equal to single quotes y or equal to single quotes little y, and then the same thing for n. Now in Python, this one's actually going to be a little bit different here.
Dialogue: 0,0:54:06.83,0:54:24.17,中文,,0,0,0,,但是在左边的 agree.c 中，注意这是我们在 C 语言中如何实现这种“是-否”判断的。\N我们将一个字符 c 与单引号 y 或单引号小写 y 进行比较，然后对 n 也进行同样的操作。现在在 python 中，这个会有点不一样。
Dialogue: 0,0:54:24.17,0:54:27.39,英文,,0,0,0,,Let me go ahead and in the Python version of this,
Dialogue: 0,0:54:24.17,0:54:27.39,中文,,0,0,0,,让我继续，在这个 python 版本中，
Dialogue: 0,0:54:27.39,0:54:29.65,英文,,0,0,0,,Let me do something like this.
Dialogue: 0,0:54:27.39,0:54:29.65,中文,,0,0,0,,让我这样做。
Dialogue: 0,0:54:29.65,0:54:31.41,英文,,0,0,0,,We'll use getString.
Dialogue: 0,0:54:29.65,0:54:31.41,中文,,0,0,0,,我们将使用 get_string。
Dialogue: 0,0:54:31.41,0:54:36.83,英文,,0,0,0,,Actually, no, we'll just use input in this case. So let's do s equals input.
Dialogue: 0,0:54:31.41,0:54:36.83,中文,,0,0,0,,实际上，不，在这种情况下我们将使用 input。所以我们写 s = input。
Dialogue: 0,0:54:36.83,0:54:38.97,英文,,0,0,0,,And we'll ask the user the same thing.
Dialogue: 0,0:54:36.83,0:54:38.97,中文,,0,0,0,,我们会问用户同样的问题。
Dialogue: 0,0:54:38.97,0:54:41.29,英文,,0,0,0,,Do you agree?
Dialogue: 0,0:54:38.97,0:54:41.29,中文,,0,0,0,,你同意吗？
Dialogue: 0,0:54:41.29,0:54:49.40,英文,,0,0,0,,Then let's go ahead and say, if s equals equals, how about y?
Dialogue: 0,0:54:41.29,0:54:49.40,中文,,0,0,0,,然后我们继续，如果 s ==于，Y 怎么样？
Dialogue: 0,0:54:49.40,0:54:50.64,英文,,0,0,0,,Huh, how do I do this?
Dialogue: 0,0:54:49.40,0:54:50.64,中文,,0,0,0,,我该怎么做呢？
Dialogue: 0,0:54:50.64,0:54:51.48,英文,,0,0,0,,Well, a few things.
Dialogue: 0,0:54:50.64,0:54:51.48,中文,,0,0,0,,好吧，有几点。
Dialogue: 0,0:54:51.48,0:54:57.64,英文,,0,0,0,,It turns out I'm going to do this, s equals equals little y. Then I'm going to go ahead and print out agreed.
Dialogue: 0,0:54:51.48,0:54:57.64,中文,,0,0,0,,事实证明我会这样做，s == y。然后我会继续打印出 agreed。
Dialogue: 0,0:54:57.64,0:55:05.99,英文,,0,0,0,,And l if s equals equals capital N or s equals equals lowercase n, I'm going to go ahead and print out not agreed.
Dialogue: 0,0:54:57.64,0:55:05.99,中文,,0,0,0,,如果 s == N 或 s == n，我会继续打印出 not agreed。
Dialogue: 0,0:55:05.99,0:55:10.95,英文,,0,0,0,,And I claim for the moment that this is identical now to the program on the right.
Dialogue: 0,0:55:05.99,0:55:10.95,中文,,0,0,0,,我认为目前这与右边的程序是相同的。
Dialogue: 0,0:55:10.95,0:55:13.96,英文,,0,0,0,,I have the program on the left in C. But what's different?
Dialogue: 0,0:55:10.95,0:55:13.96,中文,,0,0,0,,我在左边有 C 语言的程序。但是有什么不同呢？
Dialogue: 0,0:55:13.96,0:55:18.90,英文,,0,0,0,,So we're still doing the same kind of logic, these equal equals for comparing for equality.
Dialogue: 0,0:55:13.96,0:55:18.90,中文,,0,0,0,,所以我们仍然在做同样类型的逻辑，这些等于等于用于比较是否相等。
Dialogue: 0,0:55:18.90,0:55:22.18,英文,,0,0,0,,But notice that, nicely enough, Python got rid of the two vertical bars.
Dialogue: 0,0:55:18.90,0:55:22.18,中文,,0,0,0,,但是请注意，python 很好地去掉了两个竖线。
Dialogue: 0,0:55:22.18,0:55:23.88,英文,,0,0,0,,And it's just literally the word or.
Dialogue: 0,0:55:22.18,0:55:23.88,中文,,0,0,0,,它实际上就是 or 这个词。
Dialogue: 0,0:55:23.88,0:55:30.23,英文,,0,0,0,,If you recall seeing ampersand ampersand to express a logical and in C, you can just write literally the word and.
Dialogue: 0,0:55:23.88,0:55:30.23,中文,,0,0,0,,如果你还记得在 C 语言中用 & 符号来表示逻辑与，你实际上可以直接写 and 这个词。
Dialogue: 0,0:55:30.23,0:55:33.91,英文,,0,0,0,,And so here's a hint of why Python tends to be pretty popular.
Dialogue: 0,0:55:30.23,0:55:33.91,中文,,0,0,0,,这就是为什么 python 如此受欢迎。
Dialogue: 0,0:55:33.91,0:55:36.03,英文,,0,0,0,,People just like that it's a little closer to English.
Dialogue: 0,0:55:33.91,0:55:36.03,中文,,0,0,0,,因为它更接近英语。
Dialogue: 0,0:55:36.03,0:55:38.72,英文,,0,0,0,,There's a little less of the cryptic syntax here.
Dialogue: 0,0:55:36.03,0:55:38.72,中文,,0,0,0,,没有那么多难懂的语法。
Dialogue: 0,0:55:38.72,0:55:42.00,英文,,0,0,0,,Now, this is correct, as this code will now work.
Dialogue: 0,0:55:38.72,0:55:42.00,中文,,0,0,0,,这段代码现在可以运行了，它是正确的。
Dialogue: 0,0:55:42.00,0:55:45.92,英文,,0,0,0,,But I've also used double quotes instead of single quotes.
Dialogue: 0,0:55:42.00,0:55:45.92,中文,,0,0,0,,但我用了双引号而不是单引号。
Dialogue: 0,0:55:45.92,0:55:51.25,英文,,0,0,0,,And I also omitted a few minutes ago from my list of data types in Python the word char.
Dialogue: 0,0:55:45.92,0:55:51.25,中文,,0,0,0,,几分钟前，我在 python 数据类型列表中遗漏了“char”。
Dialogue: 0,0:55:51.25,0:55:53.41,英文,,0,0,0,,In Python, there are no chars.
Dialogue: 0,0:55:51.25,0:55:53.41,中文,,0,0,0,,python 中没有“char”。
Dialogue: 0,0:55:53.41,0:55:55.31,英文,,0,0,0,,There are no individual characters.
Dialogue: 0,0:55:53.41,0:55:55.31,中文,,0,0,0,,没有单个字符。
Dialogue: 0,0:55:55.31,0:56:01.86,英文,,0,0,0,,If you want to manipulate an individual character, you use a string, that is to say, a str of size 1.
Dialogue: 0,0:55:55.31,0:56:01.86,中文,,0,0,0,,如果要操作单个字符，需要用字符串，也就是大小为 1 的“str”。
Dialogue: 0,0:56:01.86,0:56:05.04,英文,,0,0,0,,Now, in Python, you can use single quotes or double quotes.
Dialogue: 0,0:56:01.86,0:56:05.04,中文,,0,0,0,,在 python 中，单引号和双引号都可以用。
Dialogue: 0,0:56:05.04,0:56:10.22,英文,,0,0,0,,I'm deliberately using double quotes everywhere just for consistency with how we treat strings in C.
Dialogue: 0,0:56:05.04,0:56:10.22,中文,,0,0,0,,为了与 C 语言中处理字符串的方式保持一致，我特意都用了双引号。
Dialogue: 0,0:56:10.22,0:56:16.24,英文,,0,0,0,,It's pretty common, though, to use single quotes instead, if only because on most keyboards, you don't have to hold the Shift key anymore.
Dialogue: 0,0:56:10.22,0:56:16.24,中文,,0,0,0,,不过，使用单引号也很常见，因为在大多数键盘上，这样就不用按住 Shift 键了。
Dialogue: 0,0:56:16.24,0:56:19.98,英文,,0,0,0,,I mean, humans have really started to optimize just how quickly they want to be able to code.
Dialogue: 0,0:56:16.24,0:56:19.98,中文,,0,0,0,,人类真的开始追求快速编码了。
Dialogue: 0,0:56:19.98,0:56:24.40,英文,,0,0,0,,So using a single quote tends to be pretty popular in Python and other languages as well.
Dialogue: 0,0:56:19.98,0:56:24.40,中文,,0,0,0,,所以在 python 和其他语言中，单引号也很流行。
Dialogue: 0,0:56:24.40,0:56:30.75,英文,,0,0,0,,They are fundamentally the same, single or double, unlike in C, where they have meaning.
Dialogue: 0,0:56:24.40,0:56:30.75,中文,,0,0,0,,单引号和双引号本质上是一样的，不像在 C 语言中那样有区别。
Dialogue: 0,0:56:30.75,0:56:33.31,英文,,0,0,0,,So this is correct, I claim.
Dialogue: 0,0:56:30.75,0:56:33.31,中文,,0,0,0,,我认为这样写是正确的。
Dialogue: 0,0:56:33.31,0:56:34.81,英文,,0,0,0,,And in fact, let me run this real quick.
Dialogue: 0,0:56:33.31,0:56:34.81,中文,,0,0,0,,我运行一下。
Dialogue: 0,0:56:34.81,0:56:37.05,英文,,0,0,0,,I'll open up my terminal window here.
Dialogue: 0,0:56:34.81,0:56:37.05,中文,,0,0,0,,打开终端窗口。
Dialogue: 0,0:56:37.05,0:56:40.49,英文,,0,0,0,,Let me get rid of the version in C and run Python of agree.py.
Dialogue: 0,0:56:37.05,0:56:40.49,中文,,0,0,0,,删除 C 语言版本，运行 python 版本的 agree.py。
Dialogue: 0,0:56:40.49,0:56:46.83,英文,,0,0,0,,And I'll type in y. OK, I'll run it again and type in little y. And I'll stipulate it's going to work for no as well.
Dialogue: 0,0:56:40.49,0:56:46.83,中文,,0,0,0,,输入“Y”。再运行一次，输入小写的“y”。我保证输入“no”也可以。
Dialogue: 0,0:56:46.83,0:56:49.71,英文,,0,0,0,,But this isn't necessarily the only way we can do this.
Dialogue: 0,0:56:46.83,0:56:49.71,中文,,0,0,0,,但这不一定是唯一的方法。
Dialogue: 0,0:56:49.71,0:56:52.55,英文,,0,0,0,,There are other ways to implement the same idea.
Dialogue: 0,0:56:49.71,0:56:52.55,中文,,0,0,0,,还有其他方法可以实现同样的想法。
Dialogue: 0,0:56:52.55,0:56:57.68,英文,,0,0,0,,And in fact, I can go about doing this instead.
Dialogue: 0,0:56:52.55,0:56:57.68,中文,,0,0,0,,事实上，我可以这样做。
Dialogue: 0,0:56:57.68,0:57:00.40,英文,,0,0,0,,Let me go back up to my code here.
Dialogue: 0,0:56:57.68,0:57:00.40,中文,,0,0,0,,让我回到代码这里。
Dialogue: 0,0:57:00.40,0:57:03.36,英文,,0,0,0,,And we saw a hint of this earlier.
Dialogue: 0,0:57:00.40,0:57:03.36,中文,,0,0,0,,我们之前已经看到过一些提示。
Dialogue: 0,0:57:03.36,0:57:05.54,英文,,0,0,0,,We know that lists exist in Python.
Dialogue: 0,0:57:03.36,0:57:05.54,中文,,0,0,0,,我们知道 python 中存在列表。
Dialogue: 0,0:57:05.54,0:57:08.23,英文,,0,0,0,,And you can create them just by using square brackets.
Dialogue: 0,0:57:05.54,0:57:08.23,中文,,0,0,0,,你可以使用方括号来创建它们。
Dialogue: 0,0:57:08.23,0:57:17.80,英文,,0,0,0,,So what if I simplify the code a little bit and just say if s is in the following list of values, capital Y or lowercase y?
Dialogue: 0,0:57:08.23,0:57:17.80,中文,,0,0,0,,那么，如果我简化一下代码，说如果 s 在以下值列表中：大写 Y 或小写 y，会怎么样？
Dialogue: 0,0:57:17.80,0:57:22.62,英文,,0,0,0,,It's not all bad. All that different logically, but it's a little tighter. It's a little more compact.
Dialogue: 0,0:57:17.80,0:57:22.62,中文,,0,0,0,,这并不完全是坏事。逻辑上完全不同，但更简洁一些，更紧凑一些。
Dialogue: 0,0:57:22.62,0:57:29.06,英文,,0,0,0,,So L if S is in, capital N or lowercase n, I can express that same idea too.
Dialogue: 0,0:57:22.62,0:57:29.06,中文,,0,0,0,,如果 s 在大写 N 或小写 n 中，我也可以表达同样的想法。
Dialogue: 0,0:57:29.06,0:57:32.32,英文,,0,0,0,,So here again, it's just getting a little more pleasant to write code.
Dialogue: 0,0:57:29.06,0:57:32.32,中文,,0,0,0,,同样，这样写代码更令人愉快一些。
Dialogue: 0,0:57:32.32,0:57:33.95,英文,,0,0,0,,There's less hitting of the keyboard.
Dialogue: 0,0:57:32.32,0:57:33.95,中文,,0,0,0,,敲键盘的次数更少了。
Dialogue: 0,0:57:33.95,0:57:36.27,英文,,0,0,0,,You can express yourself a little more succinctly.
Dialogue: 0,0:57:33.95,0:57:36.27,中文,,0,0,0,,你可以更简洁地表达自己的意思。
Dialogue: 0,0:57:36.27,0:57:44.39,英文,,0,0,0,,And using the keyword in, Python will figure out how to search the entire list for whatever the value of s is.
Dialogue: 0,0:57:36.27,0:57:44.39,中文,,0,0,0,,使用关键字 in，python 会找出如何在整个列表中搜索 s 的值。
Dialogue: 0,0:57:44.39,0:57:47.07,英文,,0,0,0,,And if it finds it, it will return true automatically.
Dialogue: 0,0:57:44.39,0:57:47.07,中文,,0,0,0,,如果找到了，它会自动返回 true。
Dialogue: 0,0:57:47.07,0:57:48.57,英文,,0,0,0,,Else, it will return false.
Dialogue: 0,0:57:47.07,0:57:48.57,中文,,0,0,0,,否则，它将返回 false。
Dialogue: 0,0:57:48.57,0:57:56.18,英文,,0,0,0,,So if I run agree.py again and type in capital Y or lowercase y, that still now works.
Dialogue: 0,0:57:48.57,0:57:56.18,中文,,0,0,0,,如果我再次运行 agree.py 并输入大写 Y 或小写 y，它仍然可以工作。
Dialogue: 0,0:57:56.18,0:58:00.75,英文,,0,0,0,,Well, I can tighten this up further if I want to add more features.
Dialogue: 0,0:57:56.18,0:58:00.75,中文,,0,0,0,,好吧，如果我想添加更多功能，我可以把它进一步简化。
Dialogue: 0,0:58:00.75,0:58:07.85,英文,,0,0,0,,Well, what if I want to support not just big Y and little y, but how about yes or no?
Dialogue: 0,0:58:00.75,0:58:07.85,中文,,0,0,0,,如果我不仅想支持大写 Y 和小写 y，还想支持 yes 或 no，该怎么办？
Dialogue: 0,0:58:07.85,0:58:14.72,英文,,0,0,0,,Yes, or in case the user is yelling or someone who isn't good with caps lock types in yes.
Dialogue: 0,0:58:07.85,0:58:14.72,中文,,0,0,0,,Yes，或者如果用户大喊大叫，或者是不擅长使用大写锁定键的人输入 YES。
Dialogue: 0,0:58:14.72,0:58:16.02,英文,,0,0,0,,Wait a minute, but it could be weird.
Dialogue: 0,0:58:14.72,0:58:16.02,中文,,0,0,0,,等一下，这可能有点奇怪。
Dialogue: 0,0:58:16.02,0:58:20.12,英文,,0,0,0,,Like, do we want to support this or this?
Dialogue: 0,0:58:16.02,0:58:20.12,中文,,0,0,0,,比如，我们想支持这个还是这个？
Dialogue: 0,0:58:20.12,0:58:25.88,英文,,0,0,0,,I mean, this gets really tedious quickly, combinatorically, if you consider all of these possible permutations.
Dialogue: 0,0:58:20.12,0:58:25.88,中文,,0,0,0,,我的意思是，如果考虑到所有可能的排列组合，这很快就会变得非常乏味。
Dialogue: 0,0:58:25.88,0:58:33.60,英文,,0,0,0,,What would be smarter than doing something like this if you want to just be able to tolerate yes in any form of capitalization?
Dialogue: 0,0:58:25.88,0:58:33.60,中文,,0,0,0,,如果只想接受任何大小写的“yes”，有什么比这更聪明的做法吗？
Dialogue: 0,0:58:33.60,0:58:34.94,英文,,0,0,0,,Like, logically, what would be nice?
Dialogue: 0,0:58:33.60,0:58:34.94,中文,,0,0,0,,逻辑上，什么方法比较好？
Dialogue: 0,0:58:40.90,0:58:52.01,英文,,0,0,0,,Exactly, super common paradigm, why don't we just force the user's input to all lowercase or all uppercase, doesn't matter, so long as we're self-consistent, and just compare against all uppercase or all lowercase.
Dialogue: 0,0:58:40.90,0:58:52.01,中文,,0,0,0,,没错，超级常见的范例，我们为什么不直接强制将用户的输入全部转换为小写或大写，只要我们保持一致，然后只比较全部大写或全部小写的形式。
Dialogue: 0,0:58:52.01,0:58:55.78,英文,,0,0,0,,And that will get rid of all of the possible permutations otherwise.
Dialogue: 0,0:58:52.01,0:58:55.78,中文,,0,0,0,,这样就可以避免所有可能的排列组合。
Dialogue: 0,0:58:55.78,0:58:58.52,英文,,0,0,0,,Now, in C, we might have done something like this.
Dialogue: 0,0:58:55.78,0:58:58.52,中文,,0,0,0,,现在，在 C 语言中，我们可能会这样做。
Dialogue: 0,0:58:58.52,0:59:08.31,英文,,0,0,0,,We might have simplified this whole list and just said, let's say, we'll do how about lowercase, so y, or.
Dialogue: 0,0:58:58.52,0:59:08.31,中文,,0,0,0,,我们可能会简化整个列表，然后说，比如，我们用小写，所以是 y，或者。
Dialogue: 0,0:59:08.31,0:59:10.53,英文,,0,0,0,,Yes, and we'll just leave it at that.
Dialogue: 0,0:59:08.31,0:59:10.53,中文,,0,0,0,,是的，我们就到此为止。
Dialogue: 0,0:59:10.53,0:59:12.71,英文,,0,0,0,,But we need to force now s to lowercase.
Dialogue: 0,0:59:10.53,0:59:12.71,中文,,0,0,0,,但现在我们需要强制将 s 转换为小写。
Dialogue: 0,0:59:12.71,0:59:16.09,英文,,0,0,0,,Well, in C, we would have used the ctype library.
Dialogue: 0,0:59:12.71,0:59:16.09,中文,,0,0,0,,在 C 语言中，我们会使用 ctype 库。
Dialogue: 0,0:59:16.09,0:59:19.86,英文,,0,0,0,,We would have done, like, to lower and called that function, passing it in.
Dialogue: 0,0:59:16.09,0:59:19.86,中文,,0,0,0,,我们会使用类似 tolower 的函数，并传入参数。
Dialogue: 0,0:59:19.86,0:59:25.86,英文,,0,0,0,,Although, not really, because in ctype, those operate on individual characters or chars, not whole strings.
Dialogue: 0,0:59:19.86,0:59:25.86,中文,,0,0,0,,不过，实际上并不是，因为在 ctype 中，这些函数操作的是单个字符，而不是整个字符串。
Dialogue: 0,0:59:25.86,0:59:31.22,英文,,0,0,0,,We actually didn't see a function that could convert a whole string in C to lowercase.
Dialogue: 0,0:59:25.86,0:59:31.22,中文,,0,0,0,,我们实际上并没有看到一个可以将 C 语言中的整个字符串转换为小写的函数。
Dialogue: 0,0:59:31.22,0:59:34.85,英文,,0,0,0,,But in Python, we're going to benefit from some other feature as well.
Dialogue: 0,0:59:31.22,0:59:34.85,中文,,0,0,0,,但在 python 中，我们也将受益于其他一些特性。
Dialogue: 0,0:59:34.85,0:59:39.81,英文,,0,0,0,,It turns out. The Python supports what's called object-oriented programming.
Dialogue: 0,0:59:34.85,0:59:39.81,中文,,0,0,0,,事实证明。 python 支持所谓的“面向对象编程”。
Dialogue: 0,0:59:39.81,0:59:42.10,英文,,0,0,0,,And we're only going to scratch the surface of this in CS50.
Dialogue: 0,0:59:39.81,0:59:42.10,中文,,0,0,0,,在 cs50 中，我们只会触及它的皮毛。
Dialogue: 0,0:59:42.10,0:59:46.86,英文,,0,0,0,,But if you take a higher level course in programming or CS, you'll explore this as a different paradigm.
Dialogue: 0,0:59:42.10,0:59:46.86,中文,,0,0,0,,但如果你参加更高级别的编程或计算机科学课程，你将探索它作为一种不同的范式。
Dialogue: 0,0:59:46.86,0:59:51.29,英文,,0,0,0,,Up until now in C, we've been focusing on what's called really procedural programming.
Dialogue: 0,0:59:46.86,0:59:51.29,中文,,0,0,0,,到目前为止，我们一直在 C 语言中学习所谓的过程式编程。
Dialogue: 0,0:59:51.29,0:59:52.19,英文,,0,0,0,,You write procedures.
Dialogue: 0,0:59:51.29,0:59:52.19,中文,,0,0,0,,你写的是程序。
Dialogue: 0,0:59:52.19,0:59:55.37,英文,,0,0,0,,You write functions, top to bottom. Left to right.
Dialogue: 0,0:59:52.19,0:59:55.37,中文,,0,0,0,,你写函数，从上到下。 从左到右。
Dialogue: 0,0:59:55.37,0:59:59.79,英文,,0,0,0,,And when you want to change some value, we were in the habit of using a procedure.
Dialogue: 0,0:59:55.37,0:59:59.79,中文,,0,0,0,,当你想要改变某个值时，我们习惯于使用一个过程。
Dialogue: 0,0:59:59.79,1:00:00.53,英文,,0,0,0,,That is, a function.
Dialogue: 0,0:59:59.79,1:00:00.53,中文,,0,0,0,,也就是说，一个函数。
Dialogue: 0,1:00:00.53,1:00:07.76,英文,,0,0,0,,You would pass something, like a variable, into a function, like toUpper or toLower, and it would do its thing and hand you back a value.
Dialogue: 0,1:00:00.53,1:00:07.76,中文,,0,0,0,,你会将一些东西，比如一个变量，传递给一个函数，比如 toUpper 或 toLower，它会完成它的工作并返回一个值。
Dialogue: 0,1:00:07.76,1:00:23.22,英文,,0,0,0,,Well, it turns out that it would be nicer Programming-wise, if some data types just had built-in functionality, like why do we have our variables over here and all of our helper functions, like two upper and two lower over here, such that we constantly have to pass one into the other?
Dialogue: 0,1:00:07.76,1:00:23.22,中文,,0,0,0,,事实证明，从编程的角度来看，如果某些数据类型具有内置功能，那会更好，\N比如为什么我们的变量在这里，而我们所有的辅助函数，比如 two upper 和 two lower 在这里，这样我们就不必不断地将一个传递给另一个？
Dialogue: 0,1:00:23.22,1:00:33.07,英文,,0,0,0,,It would be nice to sort of bake into our data types some built-in functionality so that you can change variables using their own default
Dialogue: 0,1:00:23.22,1:00:33.07,中文,,0,0,0,,如果能将一些内置功能融入到我们的数据类型中，这样你就可以使用变量自身的默认功能来改变变量，那就太好了
Dialogue: 0,1:00:33.07,1:00:50.09,英文,,0,0,0,,Built-in functionality, and so object-oriented programming, otherwise known as OOP, is a technique whereby certain types of values, like a string, a.k.a. str, not only have properties inside of them, attributes, just like a struct in C,
Dialogue: 0,1:00:33.07,1:00:50.09,中文,,0,0,0,,内置功能，因此面向对象编程，也称为 OOP，是一种技术，通过这种技术，\N某些类型的值，比如字符串，又称 str，不仅在其内部具有属性，就像 C 语言中的结构体一样，
Dialogue: 0,1:00:50.09,1:00:54.97,英文,,0,0,0,,Your data can also have functions built into them as well.
Dialogue: 0,1:00:50.09,1:00:54.97,中文,,0,0,0,,你的数据也可以内置函数。
Dialogue: 0,1:00:54.97,1:00:58.21,英文,,0,0,0,,So whereas in C, which is not object-oriented, you have structs.
Dialogue: 0,1:00:54.97,1:00:58.21,中文,,0,0,0,,所以在 C 语言中，它不是面向对象的，你只能使用结构体。
Dialogue: 0,1:00:58.21,1:01:02.87,英文,,0,0,0,,And structs can only store data, like a name and a number, when implementing a person.
Dialogue: 0,1:00:58.21,1:01:02.87,中文,,0,0,0,,结构体只能存储数据，比如在实现一个人时，存储姓名和数字。
Dialogue: 0,1:01:02.87,1:01:11.14,英文,,0,0,0,,In Python, you can, for instance, have not just a structure, otherwise known as a class, storing a name and a number,
Dialogue: 0,1:01:02.87,1:01:11.14,中文,,0,0,0,,例如，在 python 中，你不仅可以拥有一个结构体（也称为类）来存储姓名和数字，
Dialogue: 0,1:01:11.14,1:01:19.60,英文,,0,0,0,,You can have a function like call that person, or email that person, or actual verbs or actions associated with that piece of data.
Dialogue: 0,1:01:11.14,1:01:19.60,中文,,0,0,0,,你还可以拥有一个函数，比如调用该人，或向该人发送电子邮件，或与该数据相关的实际动词或操作。
Dialogue: 0,1:01:19.60,1:01:25.00,英文,,0,0,0,,Now, in the context of strings, it turns out that strings come with a lot of useful functionality.
Dialogue: 0,1:01:19.60,1:01:25.00,中文,,0,0,0,,现在，在字符串的上下文中，字符串带有很多有用的功能。
Dialogue: 0,1:01:25.00,1:01:34.31,英文,,0,0,0,,And in fact, at this URL here, which is in docs.python.org, which is the official documentation for Python, you'll see a whole list of methods.
Dialogue: 0,1:01:25.00,1:01:34.31,中文,,0,0,0,,事实上，在这个 URL，docs.python.org，它是 python 的官方文档，你会看到一个完整的方法列表。
Dialogue: 0,1:01:34.31,1:01:40.29,英文,,0,0,0,,That is, functions that come with strings that you can actually use to modify their values.
Dialogue: 0,1:01:34.31,1:01:40.29,中文,,0,0,0,,也就是说，字符串自带的函数，你可以实际使用它们来修改它们的值。
Dialogue: 0,1:01:40.29,1:01:42.48,英文,,0,0,0,,And what I mean by this is the following.
Dialogue: 0,1:01:40.29,1:01:42.48,中文,,0,0,0,,我的意思是这样的。
Dialogue: 0,1:01:42.48,1:01:48.64,英文,,0,0,0,,If we go through the documentation, poke around, it turns out that strings come with a function called lower.
Dialogue: 0,1:01:42.48,1:01:48.64,中文,,0,0,0,,如果我们查看文档，四处翻阅，就会发现字符串带有一个名为 lower 的函数。
Dialogue: 0,1:01:48.64,1:02:01.37,英文,,0,0,0,,And if you want to use that function, you just have to use slightly different syntax than in C. You do not do to lower, and you do not say, as I just did, lower, because this function is built into S itself.
Dialogue: 0,1:01:48.64,1:02:01.37,中文,,0,0,0,,如果你想使用该函数，你只需要使用与 C 语言略有不同的语法。\N 你不会执行 to lower，也不会像我刚才那样说 lower，因为这个函数是内置在 S 中的。
Dialogue: 0,1:02:01.37,1:02:11.55,英文,,0,0,0,,And just like in C, when you want to go inside of a variable, like a structure, and access a piece of data inside of it, like name or number,
Dialogue: 0,1:02:01.37,1:02:11.55,中文,,0,0,0,,就像在 C 语言中，当你想要访问一个变量（例如结构体）内部，并访问其中的一段数据（例如名称或数字）时，
Dialogue: 0,1:02:11.55,1:02:23.55,英文,,0,0,0,,when you also have functions built into data types, a.k.a. methods, a method is just a function that is built into a piece of data, you can do s.lower, open paren, close paren, in this case.
Dialogue: 0,1:02:11.55,1:02:23.55,中文,,0,0,0,,当你也有内置于数据类型中的函数时，也就是方法，方法就是一个内置于一段数据中的函数，在这种情况下你可以使用 s.lower()。
Dialogue: 0,1:02:23.55,1:02:35.68,英文,,0,0,0,,And I can do this down here as well, if s.lower in quote, unquote, n or no, the whole thing, I can force this whole thing to lowercase.
Dialogue: 0,1:02:23.55,1:02:35.68,中文,,0,0,0,,我也可以在下面这样做，如果 s.lower("n" 或 no)，我可以强制将整个字符串转换为小写。
Dialogue: 0,1:02:35.68,1:02:46.22,英文,,0,0,0,,So the only difference here now is in object-oriented programming, instead of constantly passing a value into a function, you just access a function that's inside of the value.
Dialogue: 0,1:02:35.68,1:02:46.22,中文,,0,0,0,,所以现在唯一的区别在于，在面向对象编程中，你不需要不断地将值传递给函数，只需访问值内部的函数即可。
Dialogue: 0,1:02:46.22,1:02:49.40,英文,,0,0,0,,It just works because of how the language itself is defined.
Dialogue: 0,1:02:46.22,1:02:49.40,中文,,0,0,0,,它之所以有效，是因为语言本身的定义方式。
Dialogue: 0,1:02:49.40,1:02:55.84,英文,,0,0,0,,And the only way you know whether these functions exist is the documentation, a class, a book, a website, or the like.
Dialogue: 0,1:02:49.40,1:02:55.84,中文,,0,0,0,,而你了解这些函数是否存在的唯一途径就是文档、类、书籍、网站或类似的东西。
Dialogue: 0,1:02:55.84,1:03:00.93,英文,,0,0,0,,Questions now on this technique?
Dialogue: 0,1:02:55.84,1:03:00.93,中文,,0,0,0,,现在对这个技术有什么问题吗？
Dialogue: 0,1:03:00.93,1:03:02.89,英文,,0,0,0,,All right, I claim this is correct.
Dialogue: 0,1:03:00.93,1:03:02.89,中文,,0,0,0,,我认为这是正确的。
Dialogue: 0,1:03:02.89,1:03:07.90,英文,,0,0,0,,Now, even though you've never programmed most of you in Python before, not super well designed.
Dialogue: 0,1:03:02.89,1:03:07.90,中文,,0,0,0,,现在，即使你们大多数人以前从未用 python 编程过，它也不是设计得很好的。
Dialogue: 0,1:03:07.90,1:03:12.38,英文,,0,0,0,,There's a subtle inefficiency now on lines 3 and 5 together.
Dialogue: 0,1:03:07.90,1:03:12.38,中文,,0,0,0,,第 3 行和第 5 行加在一起，现在有一个细微的效率低下问题。
Dialogue: 0,1:03:12.38,1:03:22.58,英文,,0,0,0,,What's dumb about how I've used lower, might you think?
Dialogue: 0,1:03:12.38,1:03:22.58,中文,,0,0,0,,你认为我使用 lower 的方式有什么愚蠢之处吗？
Dialogue: 0,1:03:22.58,1:03:29.57,英文,,0,0,0,,Yeah, if you're going to use the same function twice and ask the same question expecting the same answer, why are you calling the function itself twice?
Dialogue: 0,1:03:22.58,1:03:29.57,中文,,0,0,0,,是的，如果你要两次使用同一个函数，并提出相同的问题，期望得到相同的答案，为什么要调用两次函数本身呢？
Dialogue: 0,1:03:29.57,1:03:31.61,英文,,0,0,0,,Maybe we should just store the result in a variable.
Dialogue: 0,1:03:29.57,1:03:31.61,中文,,0,0,0,,也许我们应该把结果存储在一个变量中。
Dialogue: 0,1:03:31.61,1:03:33.57,英文,,0,0,0,,So we could do this in a couple of different ways.
Dialogue: 0,1:03:31.61,1:03:33.57,中文,,0,0,0,,所以我们可以用几种不同的方式来做到这一点。
Dialogue: 0,1:03:33.57,1:03:38.49,英文,,0,0,0,,We, for instance, could go up here and create another variable called t and set that equal to s.lower.
Dialogue: 0,1:03:33.57,1:03:38.49,中文,,0,0,0,,例如，我们可以在这里创建一个名为 t 的变量，并将其设置为 s.lower()。
Dialogue: 0,1:03:38.49,1:03:41.95,英文,,0,0,0,,And then we could just change this to be t here.
Dialogue: 0,1:03:38.49,1:03:41.95,中文,,0,0,0,,然后我们可以把这里改成 t。
Dialogue: 0,1:03:41.95,1:03:45.79,英文,,0,0,0,,But honestly, I don't think we technically need another variable altogether here.
Dialogue: 0,1:03:41.95,1:03:45.79,中文,,0,0,0,,但说实话，我认为我们在这里技术上并不需要另一个变量。
Dialogue: 0,1:03:45.79,1:03:47.43,英文,,0,0,0,,I could just do something like this.
Dialogue: 0,1:03:45.79,1:03:47.43,中文,,0,0,0,,我可以这样做。
Dialogue: 0,1:03:47.43,1:03:49.49,英文,,0,0,0,,Let's change the value of s.
Dialogue: 0,1:03:47.43,1:03:49.49,中文,,0,0,0,,让我们改变 s 的值。
Dialogue: 0,1:03:49.49,1:03:52.41,英文,,0,0,0,,to be the lowercase version thereof.
Dialogue: 0,1:03:49.49,1:03:52.41,中文,,0,0,0,,转换成小写。
Dialogue: 0,1:03:52.41,1:03:57.45,英文,,0,0,0,,And so now I can quite simply refer to s again and again like this, reusing that same value.
Dialogue: 0,1:03:52.41,1:03:57.45,中文,,0,0,0,,现在我可以很方便地反复使用 s，重复使用相同的值。
Dialogue: 0,1:03:57.45,1:04:01.73,英文,,0,0,0,,Now, to be sure, I have now just lost the user's original input.
Dialogue: 0,1:03:57.45,1:04:01.73,中文,,0,0,0,,当然，我现在已经丢失了用户最初的输入。
Dialogue: 0,1:04:01.73,1:04:05.54,英文,,0,0,0,,And if I care about that, if they typed in all caps, I have no idea anymore.
Dialogue: 0,1:04:01.73,1:04:05.54,中文,,0,0,0,,如果我关心这一点，如果他们输入了全部大写字母，我就不知道了。
Dialogue: 0,1:04:05.54,1:04:08.20,英文,,0,0,0,,So maybe I do want to use a separate variable altogether.
Dialogue: 0,1:04:05.54,1:04:08.20,中文,,0,0,0,,所以我可能确实想使用一个单独的变量。
Dialogue: 0,1:04:08.20,1:04:15.62,英文,,0,0,0,,But a takeaway here, too, is that strings in Python are technically what we'll call Immutable, that is, they cannot be changed.
Dialogue: 0,1:04:08.20,1:04:15.62,中文,,0,0,0,,但这里也要注意的是，python 中的字符串在技术上我们称之为不可变的，也就是说，它们是不能改变的。
Dialogue: 0,1:04:15.62,1:04:24.61,英文,,0,0,0,,This was not true in C. Once we gave you arrays in week 2 or memory in week 4, you could go to town on a string and change any of the characters you want.
Dialogue: 0,1:04:15.62,1:04:24.61,中文,,0,0,0,,这在 C 语言中是不存在的。在第 2 周我们给你数组，或者在第 4 周给你内存后，你可以对一个字符串进行任何操作，改变任何你想要的字符。
Dialogue: 0,1:04:24.61,1:04:27.87,英文,,0,0,0,,Uppercasing, lowercasing, changing it, shortening it, and so forth.
Dialogue: 0,1:04:24.61,1:04:27.87,中文,,0,0,0,,大写、小写、改变它、缩短它等等。
Dialogue: 0,1:04:27.87,1:04:33.80,英文,,0,0,0,,But in this case, This returns a copy of s forced to lowercase.
Dialogue: 0,1:04:27.87,1:04:33.80,中文,,0,0,0,,但在这种情况下，这将返回一个强制转换为小写的 s 的副本。
Dialogue: 0,1:04:33.80,1:04:38.92,英文,,0,0,0,,It doesn't change the original string that is the memory, the bytes in the computer's memory.
Dialogue: 0,1:04:33.80,1:04:38.92,中文,,0,0,0,,它不会改变原始字符串，即计算机内存中的字节。
Dialogue: 0,1:04:38.92,1:04:55.19,英文,,0,0,0,,When you assign it back to s, you're essentially forgetting about the old version of s. But because Python does memory management for you, there's no malloc, there's no free, Python automatically frees up the original bytes, like y, e, s, and hands them back to the operating system for you.
Dialogue: 0,1:04:38.92,1:04:55.19,中文,,0,0,0,,当你把它赋值回 s 时，你实际上是在忘记旧版本的 s。但因为 python 为你做了内存管理，\N没有 malloc，没有 free，python 会自动释放原始字节，比如 y、e、s，并将它们交还给操作系统。
Dialogue: 0,1:04:55.19,1:04:59.79,英文,,0,0,0,,All right, questions now on this technique.
Dialogue: 0,1:04:55.19,1:04:59.79,中文,,0,0,0,,好了，现在就这个技术有什么问题吗?
Dialogue: 0,1:04:59.79,1:05:02.45,英文,,0,0,0,,Questions on this?
Dialogue: 0,1:04:59.79,1:05:02.45,中文,,0,0,0,,对此有什么问题吗?
Dialogue: 0,1:05:02.45,1:05:09.77,英文,,0,0,0,,In general, I'll call out the Python documentation will start to be your friend, because in class, we'll only scratch the surface with some of these things.
Dialogue: 0,1:05:02.45,1:05:09.77,中文,,0,0,0,,总的来说，我会说 python 文档将开始成为你的朋友，因为在课堂上，我们只会触及其中一些东西的皮毛。
Dialogue: 0,1:05:09.77,1:05:18.52,英文,,0,0,0,,But in docs.python.org, for instance, there's a whole reference of all of the built-in functions that come with the language, as well as, for instance, those with the string.
Dialogue: 0,1:05:09.77,1:05:18.52,中文,,0,0,0,,例如，在 docs.python.org 中，有一个完整的参考，包含了语言自带的所有内置函数，以及例如字符串相关的函数。
Dialogue: 0,1:05:18.52,1:05:31.10,英文,,0,0,0,,All right, well, let me go ahead and, before we take a break, let's go ahead and create something a little familiar, too, based on our weeks here in C. Let me propose that we revisit those examples involving some meows.
Dialogue: 0,1:05:18.52,1:05:31.10,中文,,0,0,0,,好了，在我们休息之前，让我们继续，根据我们在 C 语言中学习的几周内容，\N创建一些我们熟悉的东西。我建议我们回顾一下那些涉及喵喵叫的例子。
Dialogue: 0,1:05:31.10,1:05:42.25,英文,,0,0,0,,So for instance, when we had our cat meow back in the first week and then second in C, we did something that was a little stupid at first, whereby we created a file, as I'll do here, this time called meow.py.
Dialogue: 0,1:05:31.10,1:05:42.25,中文,,0,0,0,,例如，当我们在第一周和第二周用 C 语言编写猫叫程序时，\N我们做了一些一开始有点愚蠢的事情，我们创建了一个文件，就像我现在这样，这次叫做 meow.py。
Dialogue: 0,1:05:42.25,1:05:50.74,英文,,0,0,0,,And if I want a cat to meow three times, I could run it once like this, a little copy-paste, and now Python of meow.py, and I'm done.
Dialogue: 0,1:05:42.25,1:05:50.74,中文,,0,0,0,,如果我想让一只猫喵喵叫三次，我可以像这样运行一次，稍微复制粘贴一下，现在运行 python meow.py，就完成了。
Dialogue: 0,1:05:50.74,1:05:56.62,英文,,0,0,0,,Now, we visited this example like two times at least now in Scratch and in C. It's correct. I'll stipulate.
Dialogue: 0,1:05:50.74,1:05:56.62,中文,,0,0,0,,现在，我们在 Scratch 和 C 语言中至少看过两次这个例子了。它是正确的，我承认。
Dialogue: 0,1:05:56.62,1:06:00.17,英文,,0,0,0,,But what's obviously poorly designed?
Dialogue: 0,1:05:56.62,1:06:00.17,中文,,0,0,0,,但它显然设计得很糟糕，对吧?
Dialogue: 0,1:06:00.17,1:06:02.07,英文,,0,0,0,,What's the fault here?
Dialogue: 0,1:06:00.17,1:06:02.07,中文,,0,0,0,,这里的问题是什么？
Dialogue: 0,1:06:02.07,1:06:04.78,英文,,0,0,0,,Yeah. It should just be a loop, right?
Dialogue: 0,1:06:02.07,1:06:04.78,中文,,0,0,0,,是的，它应该只是一个循环，对吧？
Dialogue: 0,1:06:04.78,1:06:05.98,英文,,0,0,0,,Like, why type it three times?
Dialogue: 0,1:06:04.78,1:06:05.98,中文,,0,0,0,,为什么要输入三次？
Dialogue: 0,1:06:05.98,1:06:11.59,英文,,0,0,0,,Literally copying and pasting is almost always a bad thing, except in C when you have the function prototypes that you need to borrow.
Dialogue: 0,1:06:05.98,1:06:11.59,中文,,0,0,0,,逐字复制粘贴几乎总是不除非在 C 语言中，你需要借用函数原型。
Dialogue: 0,1:06:11.59,1:06:13.37,英文,,0,0,0,,But in this case, this is just inefficient.
Dialogue: 0,1:06:11.59,1:06:13.37,中文,,0,0,0,,但在这种情况下，这只是效率低下。
Dialogue: 0,1:06:13.37,1:06:16.09,英文,,0,0,0,,So what could we do better here in Python?
Dialogue: 0,1:06:13.37,1:06:16.09,中文,,0,0,0,,那么，我们如何在 python 中做得更好呢？
Dialogue: 0,1:06:16.09,1:06:18.96,英文,,0,0,0,,Well, in Python, we could probably change this in a few different ways.
Dialogue: 0,1:06:16.09,1:06:18.96,中文,,0,0,0,,在 python 中，我们可以用几种不同的方式来改变它。
Dialogue: 0,1:06:18.96,1:06:22.10,英文,,0,0,0,,We could borrow some of the syntax we proposed in slide form,
Dialogue: 0,1:06:18.96,1:06:22.10,中文,,0,0,0,,我们可以借用幻灯片形式中提出的一些语法，
Dialogue: 0,1:06:22.10,1:06:26.24,英文,,0,0,0,,Like, give me a variable called i, set it to 0, no semicolon.
Dialogue: 0,1:06:22.10,1:06:26.24,中文,,0,0,0,,比如，给我一个叫做 i 的变量，把它设为 0，没有分号。
Dialogue: 0,1:06:26.24,1:06:31.34,英文,,0,0,0,,While i is less than 3, if I want to do this three times, I can go ahead and print out meow.
Dialogue: 0,1:06:26.24,1:06:31.34,中文,,0,0,0,,当 i < 3 时，如果我想做三次，我可以继续打印 meow。
Dialogue: 0,1:06:31.34,1:06:34.21,英文,,0,0,0,,And then I can do i plus equals 1.
Dialogue: 0,1:06:31.34,1:06:34.21,中文,,0,0,0,,然后我可以做 i+= 1。
Dialogue: 0,1:06:34.21,1:06:37.09,英文,,0,0,0,,And I think this would do the trick, Python of meow.py.
Dialogue: 0,1:06:34.21,1:06:37.09,中文,,0,0,0,,我认为这样就可以了，运行 python meow.py。
Dialogue: 0,1:06:37.09,1:06:38.83,英文,,0,0,0,,And we're back in business already.
Dialogue: 0,1:06:37.09,1:06:38.83,中文,,0,0,0,,我们又可以开始了。
Dialogue: 0,1:06:38.83,1:06:43.29,英文,,0,0,0,,Well, if I wanted to change this to a for loop, well, in Python, it would be a little tighter.
Dialogue: 0,1:06:38.83,1:06:43.29,中文,,0,0,0,,如果我想把它改成 for 循环，在 python 中会更简洁一些。
Dialogue: 0,1:06:43.29,1:06:44.75,英文,,0,0,0,,But this would not be the best approach.
Dialogue: 0,1:06:43.29,1:06:44.75,中文,,0,0,0,,但这并不是最好的方法。
Dialogue: 0,1:06:44.75,1:06:50.85,英文,,0,0,0,,So for i in 0, 1, 2, I could just do print.
Dialogue: 0,1:06:44.75,1:06:50.85,中文,,0,0,0,,所以对于 0、1、2 中的 i，我可以直接打印。
Dialogue: 0,1:06:50.85,1:06:52.58,英文,,0,0,0,,Meow, like this.
Dialogue: 0,1:06:50.85,1:06:52.58,中文,,0,0,0,,像这样，喵。
Dialogue: 0,1:06:52.58,1:06:54.42,英文,,0,0,0,,And that, too, would get the job done.
Dialogue: 0,1:06:52.58,1:06:54.42,中文,,0,0,0,,那也能完成任务。
Dialogue: 0,1:06:54.42,1:07:00.95,英文,,0,0,0,,But to our discussion earlier, this would get stupid pretty quickly if you had to keep enumerating all of these values.
Dialogue: 0,1:06:54.42,1:07:00.95,中文,,0,0,0,,但就像我们之前讨论的，如果你必须枚举所有这些值，这很快就会变得很愚蠢。
Dialogue: 0,1:07:00.95,1:07:04.18,英文,,0,0,0,,Like, what did we introduce instead?
Dialogue: 0,1:07:00.95,1:07:04.18,中文,,0,0,0,,比如，我们引入了什么来代替它？
Dialogue: 0,1:07:04.18,1:07:05.72,英文,,0,0,0,,The range function, exactly.
Dialogue: 0,1:07:04.18,1:07:05.72,中文,,0,0,0,,range 函数，没错。
Dialogue: 0,1:07:05.72,1:07:10.70,英文,,0,0,0,,So that hands me back way more efficiently just the values I want, indeed, one at a time.
Dialogue: 0,1:07:05.72,1:07:10.70,中文,,0,0,0,,它更高效地将我想要的值逐个返回。
Dialogue: 0,1:07:10.70,1:07:15.21,英文,,0,0,0,,So even this, if I run it a third or fourth time, we've got the same result.
Dialogue: 0,1:07:10.70,1:07:15.21,中文,,0,0,0,,即使这样，如果我运行第三次或第四次，结果还是一样。
Dialogue: 0,1:07:15.21,1:07:18.69,英文,,0,0,0,,But now let's transition to where we went with this back in the day.
Dialogue: 0,1:07:15.21,1:07:18.69,中文,,0,0,0,,现在，让我们回到过去，看看我们是如何处理这个问题的。
Dialogue: 0,1:07:18.69,1:07:20.47,英文,,0,0,0,,How can we start to modularize this?
Dialogue: 0,1:07:18.69,1:07:20.47,中文,,0,0,0,,我们如何开始将其模块化？
Dialogue: 0,1:07:20.47,1:07:27.41,英文,,0,0,0,,Just like it would be nice, I claimed, if MIT had given us a meow function, wouldn't it be nice if Python had given us a meow function?
Dialogue: 0,1:07:20.47,1:07:27.41,中文,,0,0,0,,就像我希望麻省理工学院给我们提供 meow 函数一样，如果 python 也能提供 meow 函数，那不是很好吗？
Dialogue: 0,1:07:27.41,1:07:29.33,英文,,0,0,0,,Maybe less compelling in Python.
Dialogue: 0,1:07:27.41,1:07:29.33,中文,,0,0,0,,在 python 中可能没那么引人注目。
Dialogue: 0,1:07:29.33,1:07:31.01,英文,,0,0,0,,But how can I build my own function?
Dialogue: 0,1:07:29.33,1:07:31.01,中文,,0,0,0,,但我怎样才能构建自己的函数呢？
Dialogue: 0,1:07:31.01,1:07:33.92,英文,,0,0,0,,Well, I did this briefly with the spell checker earlier.
Dialogue: 0,1:07:31.01,1:07:33.92,中文,,0,0,0,,我之前在拼写检查器中简单地做过这个。
Dialogue: 0,1:07:33.92,1:07:40.38,英文,,0,0,0,,But let me go ahead and propose that we could implement now our own version of this in Python as follows.
Dialogue: 0,1:07:33.92,1:07:40.38,中文,,0,0,0,,现在，让我们来提出一个建议，我们可以用 python 实现我们自己的版本，如下所示。
Dialogue: 0,1:07:40.38,1:07:44.26,英文,,0,0,0,,Let me go ahead and start fresh here and use the keyword def.
Dialogue: 0,1:07:40.38,1:07:44.26,中文,,0,0,0,,让我重新开始，使用关键字 def。
Dialogue: 0,1:07:44.26,1:07:49.35,英文,,0,0,0,,So this did not exist in C. You had the return value, the function name, the arguments.
Dialogue: 0,1:07:44.26,1:07:49.35,中文,,0,0,0,,这在 C 语言中不存在。你只有返回值、函数名和参数。
Dialogue: 0,1:07:49.35,1:07:52.27,英文,,0,0,0,,In Python, you literally say def to define a function.
Dialogue: 0,1:07:49.35,1:07:52.27,中文,,0,0,0,,在 python 中，你直接用 def 来定义函数。
Dialogue: 0,1:07:52.27,1:07:54.93,英文,,0,0,0,,You give it a name like meow.
Dialogue: 0,1:07:52.27,1:07:54.93,中文,,0,0,0,,给它起个名字，比如 meow。
Dialogue: 0,1:07:54.93,1:07:58.05,英文,,0,0,0,,And now I'm going to go ahead and, in this function, just print out meow.
Dialogue: 0,1:07:54.93,1:07:58.05,中文,,0,0,0,,现在，我要在这个函数中打印 meow。
Dialogue: 0,1:07:58.05,1:08:01.49,英文,,0,0,0,,And this lets me change it to anything else I want in the future.
Dialogue: 0,1:07:58.05,1:08:01.49,中文,,0,0,0,,这允许我在将来将其更改为任何我想要的内容。
Dialogue: 0,1:08:01.49,1:08:03.59,英文,,0,0,0,,But for now, it's an abstraction.
Dialogue: 0,1:08:01.49,1:08:03.59,中文,,0,0,0,,但就目前而言，它是一个抽象概念。
Dialogue: 0,1:08:03.59,1:08:07.91,英文,,0,0,0,,And in fact, I can move it out of sight, out of mind.
Dialogue: 0,1:08:03.59,1:08:07.91,中文,,0,0,0,,事实上，我可以把它移开，眼不见心不烦。
Dialogue: 0,1:08:07.91,1:08:13.90,英文,,0,0,0,,Just going to hit Enter a bunch of times to pretend like now it exists, but I don't care how it is implemented.
Dialogue: 0,1:08:07.91,1:08:13.90,中文,,0,0,0,,只要按很多次回车键，就好像它现在存在一样，但我不在乎它是如何实现的。
Dialogue: 0,1:08:13.90,1:08:20.66,英文,,0,0,0,,And up here, now, I can do something like this. For i in range of 3, let me go ahead and not print meow anymore.
Dialogue: 0,1:08:13.90,1:08:20.66,中文,,0,0,0,,现在，在上面，我可以这样做。对于 range(3) 中的 i，让我们继续，不再打印 meow 了。
Dialogue: 0,1:08:20.66,1:08:23.85,英文,,0,0,0,,Let me just call meow, and tightening up my code further.
Dialogue: 0,1:08:20.66,1:08:23.85,中文,,0,0,0,,我把它叫做 meow，并进一步简化我的代码。
Dialogue: 0,1:08:23.85,1:08:31.73,英文,,0,0,0,,But I think, let's see, Python of meow.py, this is, I think, going to be the first time it does not work correctly.
Dialogue: 0,1:08:23.85,1:08:31.73,中文,,0,0,0,,但是我认为，让我们看看，python 运行 meow.py，我认为这将是它第一次无法正常工作。
Dialogue: 0,1:08:31.73,1:08:36.60,英文,,0,0,0,,OK, so here we have, sadly, our first Python error.
Dialogue: 0,1:08:31.73,1:08:36.60,中文,,0,0,0,,所以我们在这里，遗憾的是，遇到了第一个 python 错误。
Dialogue: 0,1:08:36.60,1:08:37.74,英文,,0,0,0,,And let's see.
Dialogue: 0,1:08:36.60,1:08:37.74,中文,,0,0,0,,让我们来看看。
Dialogue: 0,1:08:37.74,1:08:40.35,英文,,0,0,0,,The syntax is going to be different from C, or Clang's output.
Dialogue: 0,1:08:37.74,1:08:40.35,中文,,0,0,0,,语法将与 C 或 Clang 的输出不同。
Dialogue: 0,1:08:40.35,1:08:47.68,英文,,0,0,0,,Traceback is like the term of art here. This is like a traceback of all of the lines of code that were just executed, or really functions you called.
Dialogue: 0,1:08:40.35,1:08:47.68,中文,,0,0,0,,Traceback 是这里的专业术语。这就像是对刚刚执行的所有代码行或实际调用的函数的回溯。
Dialogue: 0,1:08:47.68,1:08:49.34,英文,,0,0,0,,The file name is uninteresting.
Dialogue: 0,1:08:47.68,1:08:49.34,中文,,0,0,0,,文件名不重要。
Dialogue: 0,1:08:49.34,1:08:51.18,英文,,0,0,0,,This is like my code space specifically.
Dialogue: 0,1:08:49.34,1:08:51.18,中文,,0,0,0,,这具体来说就像我的代码空间。
Dialogue: 0,1:08:51.18,1:08:54.52,英文,,0,0,0,,But the file name is important here, meow.py.
Dialogue: 0,1:08:51.18,1:08:54.52,中文,,0,0,0,,但是文件名在这里很重要，meow.py。
Dialogue: 0,1:08:54.52,1:08:55.98,英文,,0,0,0,,Line two is the issue.
Dialogue: 0,1:08:54.52,1:08:55.98,中文,,0,0,0,,第二行是问题所在。
Dialogue: 0,1:08:55.98,1:08:58.21,英文,,0,0,0,,OK, I didn't get very far before I screwed up.
Dialogue: 0,1:08:55.98,1:08:58.21,中文,,0,0,0,,我还没走多远就搞砸了。
Dialogue: 0,1:08:58.21,1:08:59.51,英文,,0,0,0,,And then there's a name error.
Dialogue: 0,1:08:58.21,1:08:59.51,中文,,0,0,0,,然后是一个名称错误。
Dialogue: 0,1:08:59.51,1:09:05.49,英文,,0,0,0,,And you'll see in Python, there's typically these capitalized keywords that hint at what the issue is.
Dialogue: 0,1:08:59.51,1:09:05.49,中文,,0,0,0,,你会在 python 中看到，通常会有这些大写的关键字来提示问题所在。
Dialogue: 0,1:09:05.49,1:09:07.74,英文,,0,0,0,,It's something related to names of variables.
Dialogue: 0,1:09:05.49,1:09:07.74,中文,,0,0,0,,这与变量名有关。
Dialogue: 0,1:09:07.74,1:09:09.45,英文,,0,0,0,,Meow is not defined.
Dialogue: 0,1:09:07.74,1:09:09.45,中文,,0,0,0,,未定义 Meow。
Dialogue: 0,1:09:09.45,1:09:11.53,英文,,0,0,0,,All right, you're programming Python for the first time.
Dialogue: 0,1:09:09.45,1:09:11.53,中文,,0,0,0,,你第一次用 python 编程。
Dialogue: 0,1:09:11.53,1:09:12.49,英文,,0,0,0,,You've screwed up.
Dialogue: 0,1:09:11.53,1:09:12.49,中文,,0,0,0,,你搞砸了。
Dialogue: 0,1:09:12.49,1:09:14.77,英文,,0,0,0,,You're following some online tutorial.
Dialogue: 0,1:09:12.49,1:09:14.77,中文,,0,0,0,,你在跟着一些在线教程学习。
Dialogue: 0,1:09:14.77,1:09:16.33,英文,,0,0,0,,You're seeing this.
Dialogue: 0,1:09:14.77,1:09:16.33,中文,,0,0,0,,你看到了这个。
Dialogue: 0,1:09:16.33,1:09:17.77,英文,,0,0,0,,Reason through it.
Dialogue: 0,1:09:16.33,1:09:17.77,中文,,0,0,0,,推理一下。
Dialogue: 0,1:09:17.77,1:09:20.73,英文,,0,0,0,,Like, why might meow not be defined?
Dialogue: 0,1:09:17.77,1:09:20.73,中文,,0,0,0,,比如，为什么 meow 可能没有定义？
Dialogue: 0,1:09:20.73,1:09:24.83,英文,,0,0,0,,What can we infer about Python?
Dialogue: 0,1:09:20.73,1:09:24.83,中文,,0,0,0,,关于 python，我们可以推断出什么？
Dialogue: 0,1:09:24.83,1:09:29.77,英文,,0,0,0,,How to troubleshoot logically.
Dialogue: 0,1:09:24.83,1:09:29.77,中文,,0,0,0,,如何从逻辑上解决问题。
Dialogue: 0,1:09:29.77,1:09:32.51,英文,,0,0,0,,Maybe, because meow is defined after.
Dialogue: 0,1:09:29.77,1:09:32.51,中文,,0,0,0,,也许是因为 meow 是在后面定义的。
Dialogue: 0,1:09:32.51,1:09:37.33,英文,,0,0,0,,As smart as Python seems to be vis-a-vis C, they have some similar design characteristics.
Dialogue: 0,1:09:32.51,1:09:37.33,中文,,0,0,0,,虽然 python 看起来比 C 聪明，但它们有一些相似的设计特点。
Dialogue: 0,1:09:37.33,1:09:41.86,英文,,0,0,0,,So let's try that. So let me scroll all the way back down to where I moved this earlier.
Dialogue: 0,1:09:37.33,1:09:41.86,中文,,0,0,0,,我们来试试。让我一路滚动到我之前移动它的地方。
Dialogue: 0,1:09:41.86,1:09:44.72,英文,,0,0,0,,Let me get rid of it way down there.
Dialogue: 0,1:09:41.86,1:09:44.72,中文,,0,0,0,,让我把它从那里删除。
Dialogue: 0,1:09:44.72,1:09:46.64,英文,,0,0,0,,I'll copy it to my clipboard.
Dialogue: 0,1:09:44.72,1:09:46.64,中文,,0,0,0,,我把它复制到剪贴板。
Dialogue: 0,1:09:46.64,1:09:48.48,英文,,0,0,0,,And let me just kind of hack something together.
Dialogue: 0,1:09:46.64,1:09:48.48,中文,,0,0,0,,让我临时拼凑一些东西。
Dialogue: 0,1:09:48.48,1:09:51.04,英文,,0,0,0,,Let me just put it up here. And let's see if this works.
Dialogue: 0,1:09:48.48,1:09:51.04,中文,,0,0,0,,让我把它放在这里。看看这样行不行。
Dialogue: 0,1:09:51.04,1:09:54.46,英文,,0,0,0,,So now, let me clear my terminal, run Python of meow.py.
Dialogue: 0,1:09:51.04,1:09:54.46,中文,,0,0,0,,现在，让我清空终端，运行 python meow.py。
Dialogue: 0,1:09:54.46,1:09:56.12,英文,,0,0,0,,OK. We're back in business.
Dialogue: 0,1:09:54.46,1:09:56.12,中文,,0,0,0,,好了。我们回来了。
Dialogue: 0,1:09:56.12,1:10:00.59,英文,,0,0,0,,So that was actually really good intuition, good debugging technique to sort of reason through it.
Dialogue: 0,1:09:56.12,1:10:00.59,中文,,0,0,0,,所以这实际上是非常好的直觉，很好的调试技巧，可以从中理清思路。
Dialogue: 0,1:10:00.59,1:10:07.59,英文,,0,0,0,,Now, this is kind of contradicting what I claimed back in week one, which was that the main part of your program, ideally, should just be at the top of the file.
Dialogue: 0,1:10:00.59,1:10:07.59,中文,,0,0,0,,这与我在第一周所说的相矛盾，我认为程序的主要部分最好放在文件的顶部。
Dialogue: 0,1:10:07.59,1:10:08.83,英文,,0,0,0,,Don't make me look for it.
Dialogue: 0,1:10:07.59,1:10:08.83,中文,,0,0,0,,别让我来找它。
Dialogue: 0,1:10:08.83,1:10:10.85,英文,,0,0,0,,It's not a huge deal with a four-line program.
Dialogue: 0,1:10:08.83,1:10:10.85,中文,,0,0,0,,对于一个四行的程序来说，这不是什么大问题。
Dialogue: 0,1:10:10.85,1:10:18.89,英文,,0,0,0,,But if you've got 40 lines, 400 lines, You don't want the juicy part of your program to be way down here and all of these functions way up here.
Dialogue: 0,1:10:10.85,1:10:18.89,中文,,0,0,0,,但如果你的程序有 40 行、400 行，你不会希望程序的重要部分出现在这里，而所有这些函数都出现在上面。
Dialogue: 0,1:10:18.89,1:10:22.51,英文,,0,0,0,,So it would be nice maybe if we actually have a main function.
Dialogue: 0,1:10:18.89,1:10:22.51,中文,,0,0,0,,如果我们真的有一个 main 函数就好了。
Dialogue: 0,1:10:22.51,1:10:27.36,英文,,0,0,0,,And so it actually turns out to be a convention in Python to define a main function.
Dialogue: 0,1:10:22.51,1:10:27.36,中文,,0,0,0,,实际上，在 python 中定义一个 main 函数是一个惯例。
Dialogue: 0,1:10:27.36,1:10:30.96,英文,,0,0,0,,It's not a special function that's automatically called in C.
Dialogue: 0,1:10:27.36,1:10:30.96,中文,,0,0,0,,它不是 C 语言中自动调用的特殊函数。
Dialogue: 0,1:10:30.96,1:10:34.14,英文,,0,0,0,,But humans realized, you know what, that was a pretty useful feature.
Dialogue: 0,1:10:30.96,1:10:34.14,中文,,0,0,0,,但人们意识到，这是一个非常实用的功能。
Dialogue: 0,1:10:34.14,1:10:36.70,英文,,0,0,0,,Let me define a function called main.
Dialogue: 0,1:10:34.14,1:10:36.70,中文,,0,0,0,,我们来定义一个叫做 main 的函数。
Dialogue: 0,1:10:36.70,1:10:39.15,英文,,0,0,0,,Let me indent these lines underneath it.
Dialogue: 0,1:10:36.70,1:10:39.15,中文,,0,0,0,,把下面的几行代码缩进。
Dialogue: 0,1:10:39.15,1:10:43.49,英文,,0,0,0,,Let me practice what I'm preaching, which is put the main code at the top of the file.
Dialogue: 0,1:10:39.15,1:10:43.49,中文,,0,0,0,,我要践行我所宣扬的，把主要代码放在文件的顶部。
Dialogue: 0,1:10:43.49,1:10:47.75,英文,,0,0,0,,And wonderfully in Python now, you do not need prototypes.
Dialogue: 0,1:10:43.49,1:10:47.75,中文,,0,0,0,,而且在 python 中，你不需要原型了。
Dialogue: 0,1:10:47.75,1:10:54.42,英文,,0,0,0,,There's none of that hackish copying and pasting of the return type, the name, and the arguments to a function like we need it in C.
Dialogue: 0,1:10:47.75,1:10:54.42,中文,,0,0,0,,不需要像 C 语言那样，把返回类型、名称和参数复制粘贴到函数里。
Dialogue: 0,1:10:54.42,1:10:58.80,英文,,0,0,0,,This is now OK instead, except for one minor detail.
Dialogue: 0,1:10:54.42,1:10:58.80,中文,,0,0,0,,现在这样就可以了，除了一个小细节。
Dialogue: 0,1:10:58.80,1:11:01.56,英文,,0,0,0,,Let me go ahead and run Python of meow.py.
Dialogue: 0,1:10:58.80,1:11:01.56,中文,,0,0,0,,让我运行一下 meow.py。
Dialogue: 0,1:11:01.56,1:11:08.52,英文,,0,0,0,,Hopefully now I've solved this problem by having a main function, but now nothing has happened.
Dialogue: 0,1:11:01.56,1:11:08.52,中文,,0,0,0,,希望现在我已经通过使用 main 函数解决了这个问题，但是现在什么都没有发生。
Dialogue: 0,1:11:08.52,1:11:15.66,英文,,0,0,0,,All right, even if you've never programmed in Python before, what might explain this behavior?
Dialogue: 0,1:11:08.52,1:11:15.66,中文,,0,0,0,,即使你以前从未用 python 编程过，什么可以解释这种行为？
Dialogue: 0,1:11:15.66,1:11:18.35,英文,,0,0,0,,And how do I fix?
Dialogue: 0,1:11:15.66,1:11:18.35,中文,,0,0,0,,我该如何修复？
Dialogue: 0,1:11:18.35,1:11:23.77,英文,,0,0,0,,Again, when you're off in the real world learning some new language, all you have is deductive logic to debug.
Dialogue: 0,1:11:18.35,1:11:23.77,中文,,0,0,0,,同样，当你身处现实世界中学习一门新语言时，你所拥有的只是演绎逻辑来调试。
Dialogue: 0,1:11:32.23,1:11:37.13,英文,,0,0,0,,Right, so the solution, to be clear, in C was that we had to put the prototype up here. Otherwise, we'd get an error message.
Dialogue: 0,1:11:32.23,1:11:37.13,中文,,0,0,0,,是的，解决方案很明显，在 C 语言中，我们必须把原型放在这里。否则，我们会得到一个错误信息。
Dialogue: 0,1:11:37.13,1:11:39.50,英文,,0,0,0,,In this case, I'm actually not getting an error message.
Dialogue: 0,1:11:37.13,1:11:39.50,中文,,0,0,0,,在这种情况下，我实际上没有收到错误信息。
Dialogue: 0,1:11:39.50,1:11:43.12,英文,,0,0,0,,And indeed, I'll claim that you don't need the prototypes in Python.
Dialogue: 0,1:11:39.50,1:11:43.12,中文,,0,0,0,,而且，我认为你在 python 中不需要原型。
Dialogue: 0,1:11:43.12,1:11:46.96,英文,,0,0,0,,Just not necessary, because that was annoying, if nothing else.
Dialogue: 0,1:11:43.12,1:11:46.96,中文,,0,0,0,,根本不需要，因为这很烦人。
Dialogue: 0,1:11:46.96,1:11:51.41,英文,,0,0,0,,But what else might explain? Yeah, in back?
Dialogue: 0,1:11:46.96,1:11:51.41,中文,,0,0,0,,但是还有什么可以解释呢？是的，后面那位？
Dialogue: 0,1:11:51.41,1:11:53.91,英文,,0,0,0,,Yeah, maybe you have to call main itself.
Dialogue: 0,1:11:51.41,1:11:53.91,中文,,0,0,0,,是的，也许你必须调用 main 函数本身。
Dialogue: 0,1:11:53.91,1:11:59.33,英文,,0,0,0,,If main is not some special status in Python, maybe just because it exists isn't enough.
Dialogue: 0,1:11:53.91,1:11:59.33,中文,,0,0,0,,如果 main 在 python 中没有特殊地位，也许仅仅因为它存在是不够的。
Dialogue: 0,1:11:59.33,1:12:07.65,英文,,0,0,0,,And indeed, if you want to call main, the new convention is actually going to be, as the very last line of your program typically, to literally call main.
Dialogue: 0,1:11:59.33,1:12:07.65,中文,,0,0,0,,确实，如果你要调用 main 函数，现在的惯例实际上是在程序的最后一行直接调用 main。
Dialogue: 0,1:12:07.65,1:12:09.55,英文,,0,0,0,,It's a little stupid, stupid looking.
Dialogue: 0,1:12:07.65,1:12:09.55,中文,,0,0,0,,这看起来有点傻。
Dialogue: 0,1:12:09.55,1:12:13.33,英文,,0,0,0,,But they made a design decision. And this is how now we work around it.
Dialogue: 0,1:12:09.55,1:12:13.33,中文,,0,0,0,,但他们做了一个设计决定，这就是我们现在解决这个问题的方法。
Dialogue: 0,1:12:13.33,1:12:16.94,英文,,0,0,0,,Python of meow.py, now we're back in business.
Dialogue: 0,1:12:13.33,1:12:16.94,中文,,0,0,0,,运行 meow.py，现在程序又能正常工作了。
Dialogue: 0,1:12:16.94,1:12:19.72,英文,,0,0,0,,But now, logically, why does this work the way it does?
Dialogue: 0,1:12:16.94,1:12:19.72,中文,,0,0,0,,但是，从逻辑上讲，为什么这样做可行呢？
Dialogue: 0,1:12:19.72,1:12:28.03,英文,,0,0,0,,Well, in this case, top to bottom, line 1 is telling Python to define a function called main, and then define it as follows, lines 2 and 3.
Dialogue: 0,1:12:19.72,1:12:28.03,中文,,0,0,0,,在本例中，从上到下，第 1 行告诉 python 定义一个名为 main 的函数，并在第 2 行和第 3 行定义它。
Dialogue: 0,1:12:28.03,1:12:29.77,英文,,0,0,0,,But it's not calling main yet.
Dialogue: 0,1:12:28.03,1:12:29.77,中文,,0,0,0,,但它还没有调用 main 函数。
Dialogue: 0,1:12:29.77,1:12:33.34,英文,,0,0,0,,Line 6 is telling Python how to define a function called meow.
Dialogue: 0,1:12:29.77,1:12:33.34,中文,,0,0,0,,第 6 行告诉 python 如何定义一个名为 meow 的函数。
Dialogue: 0,1:12:33.34,1:12:35.80,英文,,0,0,0,,But it's not calling these lines yet.
Dialogue: 0,1:12:33.34,1:12:35.80,中文,,0,0,0,,但它还没有调用这些代码。
Dialogue: 0,1:12:35.80,1:12:38.78,英文,,0,0,0,,Now, on line 10, you're telling Python, call main.
Dialogue: 0,1:12:35.80,1:12:38.78,中文,,0,0,0,,现在，在第 10 行，你告诉 python 调用 main 函数。
Dialogue: 0,1:12:38.78,1:12:45.45,英文,,0,0,0,,And at that point, Python has been trained, if you will, to know what main is on line 1, to know what meow is on line 6.
Dialogue: 0,1:12:38.78,1:12:45.45,中文,,0,0,0,,此时，python 已经被训练过，知道第 1 行的 main 是什么，第 6 行的 meow 是什么。
Dialogue: 0,1:12:45.45,1:12:51.23,英文,,0,0,0,,And so it's now perfectly OK for main to be above meow, because you never called them yet.
Dialogue: 0,1:12:45.45,1:12:51.23,中文,,0,0,0,,所以现在把 main 放在 meow 上面完全没问题，因为你还没有调用它们。
Dialogue: 0,1:12:51.23,1:12:54.32,英文,,0,0,0,,You defined, defined, and then you called.
Dialogue: 0,1:12:51.23,1:12:54.32,中文,,0,0,0,,你定义、定义，然后调用。
Dialogue: 0,1:12:54.32,1:12:56.56,英文,,0,0,0,,And that's the logic behind this.
Dialogue: 0,1:12:54.32,1:12:56.56,中文,,0,0,0,,这就是背后的逻辑。
Dialogue: 0,1:12:56.56,1:13:01.86,英文,,0,0,0,,Any questions now on the structure of this technique here?
Dialogue: 0,1:12:56.56,1:13:01.86,中文,,0,0,0,,现在对这种技术的结构还有什么疑问吗？
Dialogue: 0,1:13:01.86,1:13:03.30,英文,,0,0,0,,Let's do one more, then.
Dialogue: 0,1:13:01.86,1:13:03.30,中文,,0,0,0,,我们再来看一个例子。
Dialogue: 0,1:13:03.30,1:13:11.11,英文,,0,0,0,,Recall that the last thing we did in Scratch and in C was to actually parameterize these same functions.
Dialogue: 0,1:13:03.30,1:13:11.11,中文,,0,0,0,,回想一下，我们在 Scratch 和 C 语言中做的最后一件事是将这些函数参数化。
Dialogue: 0,1:13:11.11,1:13:14.37,英文,,0,0,0,,So suppose that you don't want main to be responsible for the loop here.
Dialogue: 0,1:13:11.11,1:13:14.37,中文,,0,0,0,,假设你不希望 main 函数负责这里的循环。
Dialogue: 0,1:13:14.37,1:13:18.87,英文,,0,0,0,,You instead want to very simply do something like meow three times and be done with it.
Dialogue: 0,1:13:14.37,1:13:18.87,中文,,0,0,0,,你只想简单地执行三次 meow 操作，然后就结束。
Dialogue: 0,1:13:18.87,1:13:21.83,英文,,0,0,0,,Well, in Python, it's going to be similar in spiritacy.
Dialogue: 0,1:13:18.87,1:13:21.83,中文,,0,0,0,,在 python 中，思路是相似的。
Dialogue: 0,1:13:21.83,1:13:24.15,英文,,0,0,0,,But again, we don't need to keep mentioning data types.
Dialogue: 0,1:13:21.83,1:13:24.15,中文,,0,0,0,,但是，我们没必要总是提数据类型。
Dialogue: 0,1:13:24.15,1:13:31.00,英文,,0,0,0,,If you want meow to take some argument, like a number, n, you can just specify n as the name of that argument.
Dialogue: 0,1:13:24.15,1:13:31.00,中文,,0,0,0,,如果你想让 meow 接受一些参数，比如一个数字 n，你可以直接指定 n 作为参数的名字。
Dialogue: 0,1:13:31.00,1:13:33.20,英文,,0,0,0,,Or you can call it anything else, of course, that you want.
Dialogue: 0,1:13:31.00,1:13:33.20,中文,,0,0,0,,当然，你也可以把它叫做任何你想叫的名字。
Dialogue: 0,1:13:33.20,1:13:36.02,英文,,0,0,0,,You don't have to specify int or anything else.
Dialogue: 0,1:13:33.20,1:13:36.02,中文,,0,0,0,,你不必指定 int 或其他任何类型。
Dialogue: 0,1:13:36.02,1:13:49.41,英文,,0,0,0,,In your code now, inside of meow, you can do something like for i in, let's say, I definitely now can't do this, because that would be weird to start the list and end it with n. So if I can come back over here, what's the solution?
Dialogue: 0,1:13:36.02,1:13:49.41,中文,,0,0,0,,在 meow 函数里，你可以写 for i in，比方说，我现在肯定不能这么做，因为用 n 来结束列表很奇怪。所以我能不能回到这里，解决方案是什么？
Dialogue: 0,1:13:49.41,1:13:54.45,英文,,0,0,0,,How can I do something n times? Yeah, using range.
Dialogue: 0,1:13:49.41,1:13:54.45,中文,,0,0,0,,我怎样才能做 n 次某件事？ 用 range。
Dialogue: 0,1:13:54.45,1:13:59.89,英文,,0,0,0,,So range is nice because I can pass in now this variable n. And now I can meow.
Dialogue: 0,1:13:54.45,1:13:59.89,中文,,0,0,0,,range 的好处是，我现在可以传入这个变量 n。然后我就可以 meow 了。
Dialogue: 0,1:13:59.89,1:14:03.27,英文,,0,0,0,,Whoops. Now I can print out, quote unquote, meow.
Dialogue: 0,1:13:59.89,1:14:03.27,中文,,0,0,0,,哎呀。 现在我可以打印出“meow”。
Dialogue: 0,1:14:03.27,1:14:06.87,英文,,0,0,0,,So it's almost the same as in Scratch, almost the same as in C. But it's a little simpler.
Dialogue: 0,1:14:03.27,1:14:06.87,中文,,0,0,0,,这几乎和 Scratch 一样，也几乎和 C 语言一样。但它更简单一些。
Dialogue: 0,1:14:06.87,1:14:13.62,英文,,0,0,0,,And if now I run meow.py, I'll have the ability now to do this here as well.
Dialogue: 0,1:14:06.87,1:14:13.62,中文,,0,0,0,,如果我现在运行 meow.py，我就可以在这里做同样的事情了。
Dialogue: 0,1:14:13.62,1:14:16.77,英文,,0,0,0,,All right, questions on any of this?
Dialogue: 0,1:14:13.62,1:14:16.77,中文,,0,0,0,,好了，对这些内容有什么问题吗？
Dialogue: 0,1:14:16.77,1:14:19.79,英文,,0,0,0,,Right now, we're sort of like taking the stroll through week one.
Dialogue: 0,1:14:16.77,1:14:19.79,中文,,0,0,0,,现在，我们就像是在回顾第一周的内容。
Dialogue: 0,1:14:19.79,1:14:28.97,英文,,0,0,0,,We're going to momentarily escalate things to look not only at some of these basics, but also other features, like we saw with face recognition, with the speller, or the like.
Dialogue: 0,1:14:19.79,1:14:28.97,中文,,0,0,0,,我们暂时先不讲基础知识，而是先来看看其他功能，比如我们见过的面部识别、拼写检查器等等。
Dialogue: 0,1:14:28.97,1:14:34.67,英文,,0,0,0,,Because of how many of us are here, we have a huge amount of candy out in the lobby. So why don't we go ahead and take a 10-minute break.
Dialogue: 0,1:14:28.97,1:14:34.67,中文,,0,0,0,,因为我们人太多了，所以大厅里准备了很多糖果。我们休息十分钟吧。
Dialogue: 0,1:14:34.67,1:14:39.06,英文,,0,0,0,,And when we come back, we'll do even fancier, more powerful things with Python in 10.
Dialogue: 0,1:14:34.67,1:14:39.06,中文,,0,0,0,,回来后，我们将用 python 10 做更有趣、更强大的事情。
Dialogue: 0,1:14:39.06,1:14:42.10,英文,,0,0,0,,All right, so we are back.
Dialogue: 0,1:14:39.06,1:14:42.10,中文,,0,0,0,,好的，我们回来了。
Dialogue: 0,1:14:42.10,1:14:49.60,英文,,0,0,0,,Among our goals now are to introduce a few more building blocks so that we can solve more interesting problems at the end, much like those that we began with.
Dialogue: 0,1:14:42.10,1:14:49.60,中文,,0,0,0,,我们现在的目标是介绍更多构建块，以便最终解决更有趣的问题，就像我们开始时那样。
Dialogue: 0,1:14:49.60,1:14:57.51,英文,,0,0,0,,You'll recall from a few weeks ago, we played with this sort of two-dimensional Super Mario world, and we tried to print a vertical column of like three or more bricks.
Dialogue: 0,1:14:49.60,1:14:57.51,中文,,0,0,0,,你可能还记得几周前，我们玩过一个二维的超级玛丽世界，我们试图打印一个由三个或更多砖块组成的垂直列。
Dialogue: 0,1:14:57.51,1:15:04.79,英文,,0,0,0,,Well, let me propose that we use this as an opportunity to now tinker with some of Python's more Useful, more user-friendly functionality as well.
Dialogue: 0,1:14:57.51,1:15:04.79,中文,,0,0,0,,咱们借此机会来摆弄一下 python 中更实用、对用户更友好的功能。
Dialogue: 0,1:15:04.79,1:15:08.01,英文,,0,0,0,,So let me code a file called Mario.py.
Dialogue: 0,1:15:04.79,1:15:08.01,中文,,0,0,0,,我创建一个名为 mario.py 的文件。
Dialogue: 0,1:15:08.01,1:15:11.37,英文,,0,0,0,,And let's just print out the equivalent of that vertical column.
Dialogue: 0,1:15:08.01,1:15:11.37,中文,,0,0,0,,打印出等效的垂直列。
Dialogue: 0,1:15:11.37,1:15:12.69,英文,,0,0,0,,So it's of height 3.
Dialogue: 0,1:15:11.37,1:15:12.69,中文,,0,0,0,,高度为 3。
Dialogue: 0,1:15:12.69,1:15:13.59,英文,,0,0,0,,Each one is a hash.
Dialogue: 0,1:15:12.69,1:15:13.59,中文,,0,0,0,,每个都是一个井号。
Dialogue: 0,1:15:13.59,1:15:17.09,英文,,0,0,0,,So let's do for i in range of 3 initially.
Dialogue: 0,1:15:13.59,1:15:17.09,中文,,0,0,0,,先 `for i in range of (3)`。
Dialogue: 0,1:15:17.09,1:15:19.07,英文,,0,0,0,,And let's just print out a single hash.
Dialogue: 0,1:15:17.09,1:15:19.07,中文,,0,0,0,,打印出一个井号。
Dialogue: 0,1:15:19.07,1:15:27.75,英文,,0,0,0,,And I think now, Python of Mario.py, voila, we're in business, printing out just that same column there.
Dialogue: 0,1:15:19.07,1:15:27.75,中文,,0,0,0,,我认为现在，`python mario.py`，瞧，成功了，打印出相同的列。
Dialogue: 0,1:15:27.75,1:15:33.98,英文,,0,0,0,,What if, though, we want to print a column of some variable height, where the user tells us how tall they want it to be?
Dialogue: 0,1:15:27.75,1:15:33.98,中文,,0,0,0,,如果我们想打印一个高度可变的列，用户告诉我们他们想要多高，该怎么办？
Dialogue: 0,1:15:33.98,1:15:35.94,英文,,0,0,0,,Well, let me go up here, for instance.
Dialogue: 0,1:15:33.98,1:15:35.94,中文,,0,0,0,,比如到这里。
Dialogue: 0,1:15:35.94,1:15:40.90,英文,,0,0,0,,And instead, how about we'll use, let's do this.
Dialogue: 0,1:15:35.94,1:15:40.90,中文,,0,0,0,,我们这样操作。
Dialogue: 0,1:15:40.90,1:15:45.30,英文,,0,0,0,,How about from CS50 import?
Dialogue: 0,1:15:40.90,1:15:45.30,中文,,0,0,0,,`from cs50 import`。
Dialogue: 0,1:15:45.30,1:15:47.52,英文,,0,0,0,,How about the getInt function, as before?
Dialogue: 0,1:15:45.30,1:15:47.52,中文,,0,0,0,,像之前那样使用 `ge_int` 函数？
Dialogue: 0,1:15:47.52,1:15:50.66,英文,,0,0,0,,So it will deal with making sure the user gives us an integer.
Dialogue: 0,1:15:47.52,1:15:50.66,中文,,0,0,0,,这样就能确保用户输入的是整数。
Dialogue: 0,1:15:50.66,1:15:57.10,英文,,0,0,0,,And now, in the past, whenever we've wanted to get a number from a user, we've actually followed a certain paradigm.
Dialogue: 0,1:15:50.66,1:15:57.10,中文,,0,0,0,,过去，每当我们想从用户那里获取数字时，实际上都遵循着一定的范式。
Dialogue: 0,1:15:57.10,1:16:06.50,英文,,0,0,0,,In fact, if I open up here, for instance, how about Mario1.c from a while back?
Dialogue: 0,1:15:57.10,1:16:06.50,中文,,0,0,0,,实际上，如果我在这里打开，比如之前的 `mario1.c`？
Dialogue: 0,1:16:06.50,1:16:08.79,英文,,0,0,0,,You might recall that.
Dialogue: 0,1:16:06.50,1:16:08.79,中文,,0,0,0,,你可能还记得。
Dialogue: 0,1:16:08.79,1:16:11.68,英文,,0,0,0,,We had code like this.
Dialogue: 0,1:16:08.79,1:16:11.68,中文,,0,0,0,,我们有这样的代码。
Dialogue: 0,1:16:11.68,1:16:21.21,英文,,0,0,0,,And we specifically used the do while loop in C whenever we want to get something from the user, maybe again and again and again until they cooperate, at which point we finally break out of the loop.
Dialogue: 0,1:16:11.68,1:16:21.21,中文,,0,0,0,,每当我们想从用户那里获取数据时，我们都会在 C 语言中使用 `do while` 循环，一遍又一遍地重复，直到他们配合，最终跳出循环。
Dialogue: 0,1:16:21.21,1:16:24.27,英文,,0,0,0,,So it turns out Python does have while loops, does have for loops.
Dialogue: 0,1:16:21.21,1:16:24.27,中文,,0,0,0,,所以 python 确实有 `while` 循环，也有 `for` 循环。
Dialogue: 0,1:16:24.27,1:16:26.13,英文,,0,0,0,,does not have do while loops.
Dialogue: 0,1:16:24.27,1:16:26.13,中文,,0,0,0,,没有 do while 循环。
Dialogue: 0,1:16:26.13,1:16:30.17,英文,,0,0,0,,And yet, pretty much any time you've gotten user input, you've probably used this paradigm.
Dialogue: 0,1:16:26.13,1:16:30.17,中文,,0,0,0,,然而，几乎每次你获取用户输入时，你可能都在使用这种模式。
Dialogue: 0,1:16:30.17,1:16:36.70,英文,,0,0,0,,So it turns out that the Python equivalent of this is to do similar in spirit, but using only a while loop.
Dialogue: 0,1:16:30.17,1:16:36.70,中文,,0,0,0,,事实证明，python 中的等效方法是用类似的思路，但只使用 while 循环。
Dialogue: 0,1:16:36.70,1:16:53.32,英文,,0,0,0,,And a common paradigm in Python, as I alluded earlier, is to actually deliberately induce an infinite loop, while true, capital T, and then do what you want to do, like get an int from the user and prompt them for the height, for instance, in question, and then
Dialogue: 0,1:16:36.70,1:16:53.32,中文,,0,0,0,,正如我之前提到的，python 中一种常见的模式是故意制造一个无限循环，\Nwhile True，首字母 T 大写，然后做你想做的事，比如从用户那里获取一个整数，并提示他们输入高度，例如，在问题中，
Dialogue: 0,1:16:53.32,1:17:01.11,英文,,0,0,0,,If you're sure that the user has given you what you want, like n is greater than 0, which is what I want in this case because I want a positive integer.
Dialogue: 0,1:16:53.32,1:17:01.11,中文,,0,0,0,,如果你确定用户已经给出了你想要的东西，比如 n > 0，在这种情况下我想要的就是这个，因为我想要一个正整数。
Dialogue: 0,1:17:01.11,1:17:02.75,英文,,0,0,0,,Otherwise, there's nothing to print.
Dialogue: 0,1:17:01.11,1:17:02.75,中文,,0,0,0,,否则，就没什么可打印的了。
Dialogue: 0,1:17:02.75,1:17:04.85,英文,,0,0,0,,You literally just break out of the loop.
Dialogue: 0,1:17:02.75,1:17:04.85,中文,,0,0,0,,就直接跳出循环。
Dialogue: 0,1:17:04.85,1:17:13.89,英文,,0,0,0,,And so we could actually use this technique in C. It's just not really done in C. You could absolutely in C have done a while true loop with the parentheses, lowercase true.
Dialogue: 0,1:17:04.85,1:17:13.89,中文,,0,0,0,,所以我们实际上可以在 C 语言中使用这种技术，只是在 C 语言中并不常用，你完全可以在 C 语言中使用带括号的 while true 循环，true 小写。
Dialogue: 0,1:17:13.89,1:17:15.75,英文,,0,0,0,,You could break out of it and so forth.
Dialogue: 0,1:17:13.89,1:17:15.75,中文,,0,0,0,,你可以跳出循环等等。
Dialogue: 0,1:17:15.75,1:17:18.43,英文,,0,0,0,,But in Python, this is like the Python way.
Dialogue: 0,1:17:15.75,1:17:18.43,中文,,0,0,0,,但在 python 中，这就是 python 的方式。
Dialogue: 0,1:17:18.43,1:17:19.89,英文,,0,0,0,,And this is actually a term of art.
Dialogue: 0,1:17:18.43,1:17:19.89,中文,,0,0,0,,这实际上是一个专业术语。
Dialogue: 0,1:17:19.89,1:17:21.99,英文,,0,0,0,,This way in Python is Pythonic.
Dialogue: 0,1:17:19.89,1:17:21.99,中文,,0,0,0,,这种 python 的方式是 pythonic。
Dialogue: 0,1:17:21.99,1:17:25.01,英文,,0,0,0,,Like, this is the way everyone does it, quote unquote.
Dialogue: 0,1:17:21.99,1:17:25.01,中文,,0,0,0,,就像，这就是每个人都这样做的方法，原话照搬。
Dialogue: 0,1:17:25.01,1:17:34.64,英文,,0,0,0,,Doesn't mean you have to, but that's sort of the way, like, the cool Python programmers would implement an idea like this, trying to do something again and again and again until the user actually cooperates.
Dialogue: 0,1:17:25.01,1:17:34.64,中文,,0,0,0,,这并不意味着你必须这样做，但这有点像那些厉害的 python 程序员会如何实现这样的想法，一遍又一遍地尝试，直到用户真正配合。
Dialogue: 0,1:17:34.64,1:17:39.86,英文,,0,0,0,,But all we've done is take away the do while loop, but still, logically, we can implement the same idea.
Dialogue: 0,1:17:34.64,1:17:39.86,中文,,0,0,0,,但我们所做的只是去掉了 do while 循环，但在逻辑上，我们仍然可以实现同样的想法。
Dialogue: 0,1:17:39.86,1:17:47.53,英文,,0,0,0,,Now, below this, let me go ahead and just print out for i in range of n this time, because I want it to be variable and not 3.
Dialogue: 0,1:17:39.86,1:17:47.53,中文,,0,0,0,,现在，在这下面，让我继续，这次只打印出 for i in range of (n)，因为我想让它是可变的，而不是 3。
Dialogue: 0,1:17:47.53,1:17:49.95,英文,,0,0,0,,I can go ahead and print out the hash.
Dialogue: 0,1:17:47.53,1:17:49.95,中文,,0,0,0,,我可以继续打印出井号。
Dialogue: 0,1:17:49.95,1:17:56.04,英文,,0,0,0,,Let me go ahead and get rid of the C version here, open my terminal window, and I'll run again Python of Mario.py.
Dialogue: 0,1:17:49.95,1:17:56.04,中文,,0,0,0,,让我继续把 C 语言版本删除，打开我的终端窗口，我将再次运行 python mario.py。
Dialogue: 0,1:17:56.04,1:17:58.94,英文,,0,0,0,,I'll type in 3, and I get back those three hashes.
Dialogue: 0,1:17:56.04,1:17:58.94,中文,,0,0,0,,我输入 3，然后我得到三个井号。
Dialogue: 0,1:17:58.94,1:18:02.94,英文,,0,0,0,,But if I instead type in 4, I now get four hashes instead.
Dialogue: 0,1:17:58.94,1:18:02.94,中文,,0,0,0,,但如果我输入 4，我现在得到四个井号。
Dialogue: 0,1:18:02.94,1:18:13.27,英文,,0,0,0,,So the takeaway here is quite simply that this would be the way, for instance, to actually get back a value in Python that is consistent with some parameter, like greater than 0.
Dialogue: 0,1:18:02.94,1:18:13.27,中文,,0,0,0,,简单来说，重点就是，例如，如果你想在 python 中获得一个与某个参数一致的值，比如大于 0，就可以使用这种方法。
Dialogue: 0,1:18:13.27,1:18:13.85,英文,,0,0,0,,How about this?
Dialogue: 0,1:18:13.27,1:18:13.85,中文,,0,0,0,,这个怎么样？
Dialogue: 0,1:18:13.85,1:18:19.86,英文,,0,0,0,,Let's actually practice what we preached a moment ago with our meowing examples and kind of factoring all this out.
Dialogue: 0,1:18:13.85,1:18:19.86,中文,,0,0,0,,让我们用刚才“喵喵叫”的例子来实践一下我们刚才讲的内容，把这些都分解一下。
Dialogue: 0,1:18:19.86,1:18:23.30,英文,,0,0,0,,Let me go ahead and define a main function as before.
Dialogue: 0,1:18:19.86,1:18:23.30,中文,,0,0,0,,让我像之前一样定义一个 `main` 函数。
Dialogue: 0,1:18:23.30,1:18:28.85,英文,,0,0,0,,Let me go ahead and assume for the moment that a getHeight function exists, which is not a thing in Python.
Dialogue: 0,1:18:23.30,1:18:28.85,中文,,0,0,0,,让我们暂时假设存在一个 `get_height` 函数，这在 python 中是不存在的。
Dialogue: 0,1:18:28.85,1:18:30.79,英文,,0,0,0,,I'm going to invent it in just a moment.
Dialogue: 0,1:18:28.85,1:18:30.79,中文,,0,0,0,,我马上就会发明它。
Dialogue: 0,1:18:30.79,1:18:32.71,英文,,0,0,0,,And now I'm going to go ahead and do something like this.
Dialogue: 0,1:18:30.79,1:18:32.71,中文,,0,0,0,,现在我要继续做这样的事情。
Dialogue: 0,1:18:32.71,1:18:39.58,英文,,0,0,0,,For i in the range of that height, well, let's go ahead and print out those hashes.
Dialogue: 0,1:18:32.71,1:18:39.58,中文,,0,0,0,,对于该高度范围内的 `i`，让我们继续打印出这些井号。
Dialogue: 0,1:18:39.58,1:18:41.74,英文,,0,0,0,,So I'm assuming that getHeight exists.
Dialogue: 0,1:18:39.58,1:18:41.74,中文,,0,0,0,,我假设 `get_height` 存在。
Dialogue: 0,1:18:41.74,1:18:43.90,英文,,0,0,0,,Let me go ahead and implement that abstraction.
Dialogue: 0,1:18:41.74,1:18:43.90,中文,,0,0,0,,让我继续实现这个抽象。
Dialogue: 0,1:18:43.90,1:18:46.32,英文,,0,0,0,,So define a function now called getHeight.
Dialogue: 0,1:18:43.90,1:18:46.32,中文,,0,0,0,,现在定义一个名为 `get_height` 的函数。
Dialogue: 0,1:18:46.32,1:18:49.00,英文,,0,0,0,,It's not going to take any arguments in this design.
Dialogue: 0,1:18:46.32,1:18:49.00,中文,,0,0,0,,在这个设计中，它不会有任何参数。
Dialogue: 0,1:18:49.00,1:18:53.07,英文,,0,0,0,,While true, I can go ahead and do the same thing as before.
Dialogue: 0,1:18:49.00,1:18:53.07,中文,,0,0,0,,在 `while True` 循环中，我可以继续做和之前一样的事情。
Dialogue: 0,1:18:53.07,1:18:58.27,英文,,0,0,0,,Assign a variable n, the return value of getInt, prompting the user for that height.
Dialogue: 0,1:18:53.07,1:18:58.27,中文,,0,0,0,,将变量 `n` 赋值为 `ge_int` 的返回值，提示用户输入高度。
Dialogue: 0,1:18:58.27,1:19:04.20,英文,,0,0,0,,And then if n is greater than 0, I can go ahead and break
Dialogue: 0,1:18:58.27,1:19:04.20,中文,,0,0,0,,如果 n > 0，我可以继续执行 `break`。
Dialogue: 0,1:19:04.20,1:19:11.37,英文,,0,0,0,,But if I break here, I logically, just like in C, end up executing below the loop in question.
Dialogue: 0,1:19:04.20,1:19:11.37,中文,,0,0,0,,但如果我在此处 `break`，逻辑上，就像在 C 语言中一样，最终会执行目标循环下面的代码。
Dialogue: 0,1:19:11.37,1:19:12.73,英文,,0,0,0,,But there's nothing there.
Dialogue: 0,1:19:11.37,1:19:12.73,中文,,0,0,0,,但那里什么也没有。
Dialogue: 0,1:19:12.73,1:19:21.62,英文,,0,0,0,,But if I want getHeight to return the height, what should I type here on line 14 logically?
Dialogue: 0,1:19:12.73,1:19:21.62,中文,,0,0,0,,但如果我想让 `get_height` 返回高度，从逻辑上讲，我应该在第 14 行键入什么？
Dialogue: 0,1:19:21.62,1:19:24.43,英文,,0,0,0,,What do I want to return, to be clear?
Dialogue: 0,1:19:21.62,1:19:24.43,中文,,0,0,0,,需要明确的是，我想返回什么？
Dialogue: 0,1:19:24.43,1:19:34.08,英文,,0,0,0,,Yeah, so I actually want to return n. And here's another curiosity of Python vis-a-vis C. There doesn't seem to be an issue of scope anymore, right?
Dialogue: 0,1:19:24.43,1:19:34.08,中文,,0,0,0,,是的，实际上我想返回 `n`。与 C 语言相比，python 的另一个有趣之处是，它似乎不再存在作用域的问题，对吧？
Dialogue: 0,1:19:34.08,1:19:37.56,英文,,0,0,0,,In C, it was super important to not only declare your variables with the data types.
Dialogue: 0,1:19:34.08,1:19:37.56,中文,,0,0,0,,在 C 语言中，用数据类型声明变量非常重要。
Dialogue: 0,1:19:37.56,1:19:41.48,英文,,0,0,0,,You also had to be mindful of where they exist inside of those curly braces.
Dialogue: 0,1:19:37.56,1:19:41.48,中文,,0,0,0,,你还必须注意它们在大括号内的位置。
Dialogue: 0,1:19:41.48,1:19:46.17,英文,,0,0,0,,In Python, it turns out you can be a little looser with things, for better or for worse.
Dialogue: 0,1:19:41.48,1:19:46.17,中文,,0,0,0,,在 python 中，事实证明你可以更灵活一些，无论好坏。
Dialogue: 0,1:19:46.17,1:19:52.83,英文,,0,0,0,,And so on line 11, if I create a variable called n, it exists on line 11.
Dialogue: 0,1:19:46.17,1:19:52.83,中文,,0,0,0,,所以在第 11 行，如果我创建了一个名为 n 的变量，它就存在于第 11 行。
Dialogue: 0,1:19:52.83,1:19:57.24,英文,,0,0,0,,12, and even 13 outside of the while loop.
Dialogue: 0,1:19:52.83,1:19:57.24,中文,,0,0,0,,12，甚至在 while 循环外的 13 行。
Dialogue: 0,1:19:57.24,1:20:03.02,英文,,0,0,0,,So to be clear, in C with a while loop, we would have ordinarily had not the colon.
Dialogue: 0,1:19:57.24,1:20:03.02,中文,,0,0,0,,需要说明的是，在 C 语言的 while 循环中，我们通常不会有冒号。
Dialogue: 0,1:20:03.02,1:20:06.10,英文,,0,0,0,,We would have had the curly brace like here and over here.
Dialogue: 0,1:20:03.02,1:20:06.10,中文,,0,0,0,,我们会有像这样的大括号，在这里和这里。
Dialogue: 0,1:20:06.10,1:20:12.51,英文,,0,0,0,,And a week ago, I would have claimed that in C, n does not exist outside of the while loop by nature of those curly braces.
Dialogue: 0,1:20:06.10,1:20:12.51,中文,,0,0,0,,一周前，我还会说在 C 语言中，由于这些大括号的性质，n 在 while 循环外是不存在的。
Dialogue: 0,1:20:12.51,1:20:20.99,英文,,0,0,0,,Even though the curly braces are gone, Python actually allows you to use a variable any time after you have assigned it a value.
Dialogue: 0,1:20:12.51,1:20:20.99,中文,,0,0,0,,即使大括号不见了，python 实际上允许你在赋值后的任何时候使用变量。
Dialogue: 0,1:20:20.99,1:20:23.97,英文,,0,0,0,,So slightly more powerful as such.
Dialogue: 0,1:20:20.99,1:20:23.97,中文,,0,0,0,,因此，这样一来就更强大了。
Dialogue: 0,1:20:23.97,1:20:26.84,英文,,0,0,0,,However, I can tighten this up a little bit logically.
Dialogue: 0,1:20:23.97,1:20:26.84,中文,,0,0,0,,但是，我可以从逻辑上稍微简化一下。
Dialogue: 0,1:20:26.84,1:20:32.18,英文,,0,0,0,,And this is true in C. I don't really need to break out of the loop by using break.
Dialogue: 0,1:20:26.84,1:20:32.18,中文,,0,0,0,,这在 C 语言中也是如此。我并不真的需要用 break 跳出循环。
Dialogue: 0,1:20:32.18,1:20:40.04,英文,,0,0,0,,Recall that or know that I can actually, once I'm ready to go, I can just return the value I care about even inside of the loop.
Dialogue: 0,1:20:32.18,1:20:40.04,中文,,0,0,0,,回想一下，或者说要知道，一旦我准备好了，我实际上可以直接返回我关心的值，即使在循环内部。
Dialogue: 0,1:20:40.04,1:20:46.87,英文,,0,0,0,,And that will have the side effect of breaking me out of the loop and also breaking me out of and returning from the entire function.
Dialogue: 0,1:20:40.04,1:20:46.87,中文,,0,0,0,,这会产生一个副作用，就是让我跳出循环，同时也跳出整个函数并返回。
Dialogue: 0,1:20:46.87,1:20:51.67,英文,,0,0,0,,So nothing too new here in terms of C versus Python except for this issue of scope.
Dialogue: 0,1:20:46.87,1:20:51.67,中文,,0,0,0,,除了作用域这个问题之外，C 语言和 python 语言之间并没有什么新东西。
Dialogue: 0,1:20:51.67,1:20:56.35,英文,,0,0,0,,And I indeed returned n at the bottom there just to make clear that n would still exist.
Dialogue: 0,1:20:51.67,1:20:56.35,中文,,0,0,0,,我确实在底部返回了 n，只是为了说明 n 仍然存在。
Dialogue: 0,1:20:56.35,1:20:58.69,英文,,0,0,0,,So either of those are correct.
Dialogue: 0,1:20:56.35,1:20:58.69,中文,,0,0,0,,所以这两种方法都是正确的。
Dialogue: 0,1:20:58.69,1:21:05.60,英文,,0,0,0,,Now I just have a Python program that I think is going to allow me to implement this same Mario idea.
Dialogue: 0,1:20:58.69,1:21:05.60,中文,,0,0,0,,现在我有一个 python 程序，我认为它可以让我实现同样的 mario 的想法。
Dialogue: 0,1:21:05.60,1:21:07.52,英文,,0,0,0,,So let's run Python of Mario.py.
Dialogue: 0,1:21:05.60,1:21:07.52,中文,,0,0,0,,让我们运行 mario.py。
Dialogue: 0,1:21:07.52,1:21:10.22,英文,,0,0,0,,And OK, nothing happened.
Dialogue: 0,1:21:07.52,1:21:10.22,中文,,0,0,0,,什么反应都没有。
Dialogue: 0,1:21:10.22,1:21:13.50,英文,,0,0,0,,Python of Mario.py.
Dialogue: 0,1:21:10.22,1:21:13.50,中文,,0,0,0,,python of mario.py。
Dialogue: 0,1:21:13.50,1:21:15.47,英文,,0,0,0,,What did I do wrong?
Dialogue: 0,1:21:13.50,1:21:15.47,中文,,0,0,0,,我做错了什么？
Dialogue: 0,1:21:15.47,1:21:20.03,英文,,0,0,0,,Yeah, I have to call main. So at the bottom of my code, I have to call main here.
Dialogue: 0,1:21:15.47,1:21:20.03,中文,,0,0,0,,我知道了，我需要调用 main 函数。所以需要在代码的最后调用 main 函数。
Dialogue: 0,1:21:20.03,1:21:22.90,英文,,0,0,0,,And this is a stylistic detail that's been subtle.
Dialogue: 0,1:21:20.03,1:21:22.90,中文,,0,0,0,,这是一个比较微妙的代码风格问题。
Dialogue: 0,1:21:22.90,1:21:28.58,英文,,0,0,0,,Generally speaking, when you are writing in Python, there's not a CS50 style guide, per se.
Dialogue: 0,1:21:22.90,1:21:28.58,中文,,0,0,0,,一般来说，用 python 编写程序时，并没有什么 cs50 代码规范。
Dialogue: 0,1:21:28.58,1:21:33.92,英文,,0,0,0,,There's actually a Python style guide that most people adhere to.
Dialogue: 0,1:21:28.58,1:21:33.92,中文,,0,0,0,,实际上有一个大多数人都会遵守的 python 代码规范。
Dialogue: 0,1:21:33.92,1:21:37.85,英文,,0,0,0,,And in this case, double blank lines between functions is the norm.
Dialogue: 0,1:21:33.92,1:21:37.85,中文,,0,0,0,,在这种规范里，函数之间使用双空行是常态。
Dialogue: 0,1:21:37.85,1:21:41.97,英文,,0,0,0,,I'm doing that deliberately, although it might otherwise not be obvious.
Dialogue: 0,1:21:37.85,1:21:41.97,中文,,0,0,0,,我这样做是有意为之，虽然它看起来并不明显。
Dialogue: 0,1:21:41.97,1:21:45.57,英文,,0,0,0,,But now that I've called main on line 16, let's run mario.py once more.
Dialogue: 0,1:21:41.97,1:21:45.57,中文,,0,0,0,,现在我在第 16 行调用了 main 函数，让我们再运行一次 mario.py。
Dialogue: 0,1:21:45.57,1:21:47.88,英文,,0,0,0,,Aha. Now we see it.
Dialogue: 0,1:21:45.57,1:21:47.88,中文,,0,0,0,,现在可以看到了。
Dialogue: 0,1:21:47.88,1:21:51.30,英文,,0,0,0,,Type in 3, and I'm back in business printing out the values there.
Dialogue: 0,1:21:47.88,1:21:51.30,中文,,0,0,0,,输入 3，程序又可以正常打印值了。
Dialogue: 0,1:21:56.93,1:21:58.53,英文,,0,0,0,,Sure, why do I need the if condition at all?
Dialogue: 0,1:21:56.93,1:21:58.53,中文,,0,0,0,,当然，为什么我需要这个 if 条件？
Dialogue: 0,1:21:58.53,1:22:02.62,英文,,0,0,0,,Why can't I just return n here as by doing return n?
Dialogue: 0,1:21:58.53,1:22:02.62,中文,,0,0,0,,为什么我不能直接在这里返回 n，比如使用 return n？
Dialogue: 0,1:22:02.62,1:22:07.04,英文,,0,0,0,,Or if I really want to be succinct, I could technically just do this.
Dialogue: 0,1:22:02.62,1:22:07.04,中文,,0,0,0,,或者如果我真的想简化代码，技术上我可以这样做。
Dialogue: 0,1:22:07.04,1:22:13.85,英文,,0,0,0,,The only reason I added the if condition is because if the user types in negative 1, negative 2, I wanted to prompt them again and again.
Dialogue: 0,1:22:07.04,1:22:13.85,中文,,0,0,0,,我添加 if 条件的唯一原因是，如果用户输入负 1、负 2，我希望程序能反复提示他们。
Dialogue: 0,1:22:13.85,1:22:18.65,英文,,0,0,0,,That's all. But that would be totally acceptable, too, if you were OK with that result instead.
Dialogue: 0,1:22:13.85,1:22:18.65,中文,,0,0,0,,仅此而已。 但如果你接受这样的结果，那也是完全可以的。
Dialogue: 0,1:22:18.65,1:22:26.34,英文,,0,0,0,,Well, let me do one other thing here to point out why we are using getInt so frequently, this new training wheel, albeit temporarily.
Dialogue: 0,1:22:18.65,1:22:26.34,中文,,0,0,0,,让我来解释一下为什么我们频繁使用 ge_int 这个新的辅助函数，尽管它只是暂时的。
Dialogue: 0,1:22:26.34,1:22:28.72,英文,,0,0,0,,So let me go back to the way it was a moment ago.
Dialogue: 0,1:22:26.34,1:22:28.72,中文,,0,0,0,,让我回到刚才的状态。
Dialogue: 0,1:22:28.72,1:22:32.70,英文,,0,0,0,,And let me propose now to take away getInt.
Dialogue: 0,1:22:28.72,1:22:32.70,中文,,0,0,0,,现在我建议去掉 ge_int。
Dialogue: 0,1:22:32.70,1:22:40.62,英文,,0,0,0,,I claimed earlier that if you're not using getInt, you can just use the input function itself from Python.
Dialogue: 0,1:22:32.70,1:22:40.62,中文,,0,0,0,,我之前说过，如果不使用 ge_int，可以直接使用 python 中的 input 函数。
Dialogue: 0,1:22:40.62,1:22:52.02,英文,,0,0,0,,But that always returns a string or a str, and so recall that you have to pass the output of the input function to an int, either on the same line or, if you prefer, on another line instead.
Dialogue: 0,1:22:40.62,1:22:52.02,中文,,0,0,0,,但它总是返回一个字符串或 str，所以需要将 input 函数的输出传递给一个 int，可以在同一行，也可以在另一行。
Dialogue: 0,1:22:52.02,1:22:59.29,英文,,0,0,0,,But it turns out what I didn't do was show you what happens if you don't cooperate with the program.
Dialogue: 0,1:22:52.02,1:22:59.29,中文,,0,0,0,,但我没有演示如果不配合程序会发生什么。
Dialogue: 0,1:22:59.29,1:23:04.53,英文,,0,0,0,,So if I run Python of Mario.py now, Works great, even without the getInt function.
Dialogue: 0,1:22:59.29,1:23:04.53,中文,,0,0,0,,如果我现在运行 python mario.py，即使没有 ge_int 函数，也能正常工作。
Dialogue: 0,1:23:04.53,1:23:05.73,英文,,0,0,0,,And I can do it with 4.
Dialogue: 0,1:23:04.53,1:23:05.73,中文,,0,0,0,,输入 4 试试。
Dialogue: 0,1:23:05.73,1:23:06.97,英文,,0,0,0,,Still works great.
Dialogue: 0,1:23:05.73,1:23:06.97,中文,,0,0,0,,仍然可以正常工作。
Dialogue: 0,1:23:06.97,1:23:11.97,英文,,0,0,0,,But let me clear my terminal and be difficult now as the user and type in cat for the height instead.
Dialogue: 0,1:23:06.97,1:23:11.97,中文,,0,0,0,,但是，让我清空终端，故意为难一下程序，输入 cat 作为高度。
Dialogue: 0,1:23:11.97,1:23:12.75,英文,,0,0,0,,Enter.
Dialogue: 0,1:23:11.97,1:23:12.75,中文,,0,0,0,,回车。
Dialogue: 0,1:23:12.75,1:23:14.85,英文,,0,0,0,,Now we see one of those tracebacks again.
Dialogue: 0,1:23:12.75,1:23:14.85,中文,,0,0,0,,现在又看到了一个 traceback。
Dialogue: 0,1:23:14.85,1:23:15.79,英文,,0,0,0,,This one is different.
Dialogue: 0,1:23:14.85,1:23:15.79,中文,,0,0,0,,这次的 traceback 不同。
Dialogue: 0,1:23:15.79,1:23:18.80,英文,,0,0,0,,This isn't a name error, but apparently a value error.
Dialogue: 0,1:23:15.79,1:23:18.80,中文,,0,0,0,,这不是一个名称错误，而是一个值错误。
Dialogue: 0,1:23:18.80,1:23:24.50,英文,,0,0,0,,And if I kind of ignore the stuff I don't understand, I can see invalid literal for int with base 10 cat.
Dialogue: 0,1:23:18.80,1:23:24.50,中文,,0,0,0,,忽略那些看不懂的东西，可以看到“invalid literal for int with base 10 cat”。
Dialogue: 0,1:23:24.50,1:23:29.70,英文,,0,0,0,,That's a super cryptic way of saying that CAT is not a number in decimal notation.
Dialogue: 0,1:23:24.50,1:23:29.70,中文,,0,0,0,,这句话非常隐晦，意思是 CAT 不是十进制表示的数字。
Dialogue: 0,1:23:29.70,1:23:32.93,英文,,0,0,0,,And so I would seem to have to somehow handle this case.
Dialogue: 0,1:23:29.70,1:23:32.93,中文,,0,0,0,,所以需要想办法处理这种情况。
Dialogue: 0,1:23:32.93,1:23:36.93,英文,,0,0,0,,And if you want to be more curious, you'll see that this is indeed a trace back.
Dialogue: 0,1:23:32.93,1:23:36.93,中文,,0,0,0,,想了解更多信息，就会发现这确实是一个 traceback。
Dialogue: 0,1:23:36.93,1:23:40.58,英文,,0,0,0,,And C tends to do this, too, or the debugger would do this for you, too.
Dialogue: 0,1:23:36.93,1:23:40.58,中文,,0,0,0,,C 语言也经常这样做，调试器也会这样做。
Dialogue: 0,1:23:40.58,1:23:43.72,英文,,0,0,0,,You can see all of the functions that have been called to get you to this point.
Dialogue: 0,1:23:40.58,1:23:43.72,中文,,0,0,0,,可以看到所有被调用的函数，直到出现错误的地方。
Dialogue: 0,1:23:43.72,1:23:48.24,英文,,0,0,0,,So apparently, my problem is initially in line 14.
Dialogue: 0,1:23:43.72,1:23:48.24,中文,,0,0,0,,显然，问题最初出现在第 14 行。
Dialogue: 0,1:23:48.24,1:23:50.68,英文,,0,0,0,,But line 14, if I keep scrolling, is uninteresting.
Dialogue: 0,1:23:48.24,1:23:50.68,中文,,0,0,0,,第 14 行，如果我继续往下看，就没有什么意义了。
Dialogue: 0,1:23:50.68,1:23:51.56,英文,,0,0,0,,It's main.
Dialogue: 0,1:23:50.68,1:23:51.56,中文,,0,0,0,,它是 main 函数。
Dialogue: 0,1:23:51.56,1:23:56.03,英文,,0,0,0,,But line 14 leads me to execute line 2, which is indeed in main.
Dialogue: 0,1:23:51.56,1:23:56.03,中文,,0,0,0,,但是第 14 行会让我执行第 2 行，而第 2 行确实在 main 函数中。
Dialogue: 0,1:23:56.03,1:23:59.67,英文,,0,0,0,,That leads me to execute line 9, which is in get height.
Dialogue: 0,1:23:56.03,1:23:59.67,中文,,0,0,0,,这又会让我执行 get_height 函数中的第 9 行。
Dialogue: 0,1:23:59.67,1:24:01.07,英文,,0,0,0,,And so, OK, here's the issue.
Dialogue: 0,1:23:59.67,1:24:01.07,中文,,0,0,0,,问题就在这里。
Dialogue: 0,1:24:01.07,1:24:05.51,英文,,0,0,0,,So the closest line number to the error message is the one that probably reveals the most.
Dialogue: 0,1:24:01.07,1:24:05.51,中文,,0,0,0,,最接近错误信息的代码行可能最能说明问题。
Dialogue: 0,1:24:05.51,1:24:07.61,英文,,0,0,0,,Line 9 is where my issue is.
Dialogue: 0,1:24:05.51,1:24:07.61,中文,,0,0,0,,我的问题出在第 9 行。
Dialogue: 0,1:24:07.61,1:24:12.83,英文,,0,0,0,,I can't just blindly ask the user for input and then convert it to an int if they are not going to give me an int.
Dialogue: 0,1:24:07.61,1:24:12.83,中文,,0,0,0,,我不能盲目地向用户索要输入，然后如果他们不输入整数，我还要尝试将其转换为整数。
Dialogue: 0,1:24:12.83,1:24:20.32,英文,,0,0,0,,Now, how do we deal with this? Well, back in problem set 2, you might recall validating that the user typed in a number and using a for loop and the like.
Dialogue: 0,1:24:12.83,1:24:20.32,中文,,0,0,0,,那么，如何处理这个问题呢？回想一下问题集 2，你可能还记得如何使用 for 循环等方法验证用户输入的是否为数字。
Dialogue: 0,1:24:20.32,1:24:23.38,英文,,0,0,0,,Well, it turns out there's a better way to do this in Python.
Dialogue: 0,1:24:20.32,1:24:23.38,中文,,0,0,0,,其实，在 python 中有一种更好的方法。
Dialogue: 0,1:24:23.38,1:24:25.04,英文,,0,0,0,,The semantics are kind of there.
Dialogue: 0,1:24:23.38,1:24:25.04,中文,,0,0,0,,语义上是相似的。
Dialogue: 0,1:24:25.04,1:24:35.22,英文,,0,0,0,,If you want to try to convert something to a number that might not actually be a number, turns out Python and certain other languages literally have a keyword called try.
Dialogue: 0,1:24:25.04,1:24:35.22,中文,,0,0,0,,如果你想尝试将一个可能不是数字的东西转换为数字，python 和其他一些语言都有一个关键字叫做 try。
Dialogue: 0,1:24:35.22,1:24:37.82,英文,,0,0,0,,And if only this existed for the past few weeks, I know.
Dialogue: 0,1:24:35.22,1:24:37.82,中文,,0,0,0,,我知道，要是过去几周有这个就好了。
Dialogue: 0,1:24:37.82,1:24:40.80,英文,,0,0,0,,But you can try to do the following with your code.
Dialogue: 0,1:24:37.82,1:24:40.80,中文,,0,0,0,,但你可以尝试用你的代码来做这件事。
Dialogue: 0,1:24:40.80,1:24:42.12,英文,,0,0,0,,What do I want to try to do?
Dialogue: 0,1:24:40.80,1:24:42.12,中文,,0,0,0,,我想尝试做什么？
Dialogue: 0,1:24:42.12,1:24:47.04,英文,,0,0,0,,Well, I want to try to execute those few lines, except if there's an error.
Dialogue: 0,1:24:42.12,1:24:47.04,中文,,0,0,0,,我想尝试执行这几行代码，除非出现错误。
Dialogue: 0,1:24:47.04,1:24:53.47,英文,,0,0,0,,So I can say except if there is a value error, specifically the one I screwed up and created a moment ago.
Dialogue: 0,1:24:47.04,1:24:53.47,中文,,0,0,0,,所以我可以说 except 如果出现 ValueError，特别是像我刚才制造的那种错误。
Dialogue: 0,1:24:53.47,1:25:01.13,英文,,0,0,0,,And if there is a value error, I can print out an informative message to the user like not an integer or anything else.
Dialogue: 0,1:24:53.47,1:25:01.13,中文,,0,0,0,,如果出现 ValueError，我可以向用户输出一条提示信息，比如“不是整数”或其他信息。
Dialogue: 0,1:25:01.13,1:25:05.09,英文,,0,0,0,,And what's happening here now is literally this operative word try.
Dialogue: 0,1:25:01.13,1:25:05.09,中文,,0,0,0,,这里发生的事情就是字面上的 try。
Dialogue: 0,1:25:05.09,1:25:10.09,英文,,0,0,0,,The Python is going to try to get input and try to convert it to an int.
Dialogue: 0,1:25:05.09,1:25:10.09,中文,,0,0,0,,python 会尝试获取输入并尝试将其转换为整数。
Dialogue: 0,1:25:10.09,1:25:14.72,英文,,0,0,0,,And it's going to try to check if it's greater than 0 and then try to return it.
Dialogue: 0,1:25:10.09,1:25:14.72,中文,,0,0,0,,它会尝试检查它是否大于 0，然后尝试返回它。
Dialogue: 0,1:25:14.72,1:25:15.40,英文,,0,0,0,,Why?
Dialogue: 0,1:25:14.72,1:25:15.40,中文,,0,0,0,,为什么？
Dialogue: 0,1:25:15.40,1:25:18.96,英文,,0,0,0,,All of three of those lines are inside of, indented underneath the try block.
Dialogue: 0,1:25:15.40,1:25:18.96,中文,,0,0,0,,所有这三行代码都在 try 代码块内缩进。
Dialogue: 0,1:25:18.96,1:25:24.93,英文,,0,0,0,,Except if something goes wrong, specifically a value error happens, then it prints this.
Dialogue: 0,1:25:18.96,1:25:24.93,中文,,0,0,0,,除非出现问题，特别是出现值错误，否则它会打印这条消息。
Dialogue: 0,1:25:24.93,1:25:26.43,英文,,0,0,0,,But it doesn't return anything.
Dialogue: 0,1:25:24.93,1:25:26.43,中文,,0,0,0,,但它没有返回任何东西。
Dialogue: 0,1:25:26.43,1:25:35.56,英文,,0,0,0,,And because I'm in a loop, that means it's going to do it again and again and again until the human actually cooperates and gives me an actual number.
Dialogue: 0,1:25:26.43,1:25:35.56,中文,,0,0,0,,因为我在一个循环中，这意味着它会一次又一次地执行，直到用户配合并给我一个实际的数字。
Dialogue: 0,1:25:35.56,1:25:38.22,英文,,0,0,0,,And so this, too, is what the world would call Pythonic.
Dialogue: 0,1:25:35.56,1:25:38.22,中文,,0,0,0,,这就是大家所说的 pythonic。
Dialogue: 0,1:25:38.22,1:25:44.08,英文,,0,0,0,,In Python, you don't necessarily rigorously try to validate the user's input, make sure they haven't screwed up.
Dialogue: 0,1:25:38.22,1:25:44.08,中文,,0,0,0,,在 python 中，你不必严格地验证用户的输入，确保他们没有出错。
Dialogue: 0,1:25:44.08,1:25:50.31,英文,,0,0,0,,You honestly take a more lackadaisical approach and just try to do something, but catch an error if it happens.
Dialogue: 0,1:25:44.08,1:25:50.31,中文,,0,0,0,,你坦率地说采取一种更随意的做法，只是尝试做某事，但如果发生错误就捕获它。
Dialogue: 0,1:25:50.31,1:25:53.85,英文,,0,0,0,,So catch is also a term of art, even though it's not a keyword here.
Dialogue: 0,1:25:50.31,1:25:53.85,中文,,0,0,0,,所以 catch 也是一个专业术语，即使它在这里不是一个关键字。
Dialogue: 0,1:25:53.85,1:25:55.85,英文,,0,0,0,,Except if something happens, you handle it.
Dialogue: 0,1:25:53.85,1:25:55.85,中文,,0,0,0,,除非发生什么事情，否则你要处理它。
Dialogue: 0,1:25:55.85,1:25:57.55,英文,,0,0,0,,So you try, and you handle it.
Dialogue: 0,1:25:55.85,1:25:57.55,中文,,0,0,0,,所以你尝试，然后你处理它。
Dialogue: 0,1:25:57.55,1:26:04.26,英文,,0,0,0,,So you sort of best effort programming, if you will. But this is baked into the mindset of the Python programming community.
Dialogue: 0,1:25:57.55,1:26:04.26,中文,,0,0,0,,你可以说是尽力而为的编程。但这是 python 编程社区的思维模式。
Dialogue: 0,1:26:04.26,1:26:08.64,英文,,0,0,0,,So now if I do Python of Mario.py, and I cooperate, works great as before.
Dialogue: 0,1:26:04.26,1:26:08.64,中文,,0,0,0,,所以现在，如果我运行 python mario.py，并且我配合，它会像以前一样正常工作。
Dialogue: 0,1:26:08.64,1:26:09.94,英文,,0,0,0,,Try and succeed.
Dialogue: 0,1:26:08.64,1:26:09.94,中文,,0,0,0,,尝试并成功。
Dialogue: 0,1:26:09.94,1:26:11.86,英文,,0,0,0,,Three works, four works.
Dialogue: 0,1:26:09.94,1:26:11.86,中文,,0,0,0,,3可以，4也可以。
Dialogue: 0,1:26:11.86,1:26:15.60,英文,,0,0,0,,If, though, I try and fail by typing in cat,
Dialogue: 0,1:26:11.86,1:26:15.60,中文,,0,0,0,,但是，如果我输入 cat 并尝试失败，
Dialogue: 0,1:26:15.60,1:26:21.01,英文,,0,0,0,,It doesn't crash, per se. It doesn't show me an error. It shows me something more user-friendly, like not an integer.
Dialogue: 0,1:26:15.60,1:26:21.01,中文,,0,0,0,,它本身不会崩溃。它不会向我显示错误。它会向我显示一些对用户更友好的信息，比如“不是整数”。
Dialogue: 0,1:26:21.01,1:26:25.23,英文,,0,0,0,,And then I can try again with dog. Not an integer. I can try again with five.
Dialogue: 0,1:26:21.01,1:26:25.23,中文,,0,0,0,,然后我可以再试一次 dog。“不是整数”。我可以再试一次 5。
Dialogue: 0,1:26:25.23,1:26:26.41,英文,,0,0,0,,And now it works.
Dialogue: 0,1:26:25.23,1:26:26.41,中文,,0,0,0,,现在它可以工作了。
Dialogue: 0,1:26:26.41,1:26:36.18,英文,,0,0,0,,So we won't generally have you write much in the way of these try-except blocks, only because they get A little sophisticated quickly, but that is to reveal what the getInt function is doing.
Dialogue: 0,1:26:26.41,1:26:36.18,中文,,0,0,0,,所以我们一般不会让你写太多 try-except 块这样的代码，因为它们很快就会变得有点复杂，但这揭示了 ge_int 函数的作用。
Dialogue: 0,1:26:36.18,1:26:42.06,英文,,0,0,0,,This is why we give you the training wheels, so that when you want to get an int, you don't have to jump through all these annoying hoops to do so.
Dialogue: 0,1:26:36.18,1:26:42.06,中文,,0,0,0,,这就是我们给你辅助轮的原因，这样当你想要获取一个整数时，就不必费力地完成所有这些繁琐的步骤。
Dialogue: 0,1:26:42.06,1:26:46.49,英文,,0,0,0,,But that's all the library is really doing for you, is just try and accept.
Dialogue: 0,1:26:42.06,1:26:46.49,中文,,0,0,0,,但这就是函数库为你做的全部，只是尝试和接受。
Dialogue: 0,1:26:46.49,1:26:49.15,英文,,0,0,0,,You won't be left with any training wheels, ultimately.
Dialogue: 0,1:26:46.49,1:26:49.15,中文,,0,0,0,,最终你将不会有任何辅助轮。
Dialogue: 0,1:26:49.15,1:26:55.69,英文,,0,0,0,,Questions now on getting input and trying in this way?
Dialogue: 0,1:26:49.15,1:26:55.69,中文,,0,0,0,,现在对获取输入和这种尝试方式有什么问题吗？
Dialogue: 0,1:26:55.69,1:26:56.17,英文,,0,0,0,,Anything at all?
Dialogue: 0,1:26:55.69,1:26:56.17,中文,,0,0,0,,有任何问题吗？
Dialogue: 0,1:26:56.17,1:26:57.35,英文,,0,0,0,,Yeah?
Dialogue: 0,1:26:56.17,1:26:57.35,中文,,0,0,0,,有？
Dialogue: 0,1:27:03.61,1:27:06.71,英文,,0,0,0,,It said that, oh, could you put the condition outside of the try block?
Dialogue: 0,1:27:03.61,1:27:06.71,中文,,0,0,0,,它说，你能把条件放在 try 块外面吗？
Dialogue: 0,1:27:06.71,1:27:07.51,英文,,0,0,0,,Short answer, yes.
Dialogue: 0,1:27:06.71,1:27:07.51,中文,,0,0,0,,简而言之，可以。
Dialogue: 0,1:27:07.51,1:27:11.97,英文,,0,0,0,,And in fact, I struggled with this last night when tweaking this example to show the simplest version.
Dialogue: 0,1:27:07.51,1:27:11.97,中文,,0,0,0,,事实上，昨晚我在调整这个例子以展示最简单的版本时，也纠结了这个问题。
Dialogue: 0,1:27:11.97,1:27:18.94,英文,,0,0,0,,I will disclaim that really, I should only be trying, literally, to do the fragile part.
Dialogue: 0,1:27:11.97,1:27:18.94,中文,,0,0,0,,我要声明的是，实际上，我应该只尝试对脆弱的部分进行操作。
Dialogue: 0,1:27:18.94,1:27:24.66,英文,,0,0,0,,And then down here, I should be really doing what you're proposing, which is do the condition out here.
Dialogue: 0,1:27:18.94,1:27:24.66,中文,,0,0,0,,然后在这里，我应该真正做你提出的建议，也就是把条件放在外面。
Dialogue: 0,1:27:24.66,1:27:27.64,英文,,0,0,0,,The problem is, though, that logically, this gets messy quickly, right?
Dialogue: 0,1:27:24.66,1:27:27.64,中文,,0,0,0,,但问题是，从逻辑上讲，这很快就会变得混乱，对吧？
Dialogue: 0,1:27:27.64,1:27:31.61,英文,,0,0,0,,Because except if there's a value error, I want to print out not an integer,
Dialogue: 0,1:27:27.64,1:27:31.61,中文,,0,0,0,,因为除了值错误之外，我想输出的不是整数，
Dialogue: 0,1:27:31.61,1:27:36.13,英文,,0,0,0,,I can't compare n against 0, then, because n doesn't exist, because there was an error.
Dialogue: 0,1:27:31.61,1:27:36.13,中文,,0,0,0,,然后我不能将 n 与 0 进行比较，因为 n 不存在，因为发生了错误。
Dialogue: 0,1:27:36.13,1:27:39.39,英文,,0,0,0,,So it turns out, and I'll show you this. This is now the advanced version of Python.
Dialogue: 0,1:27:36.13,1:27:39.39,中文,,0,0,0,,所以事实证明，我会向你展示这一点，这就是 python 的高级版本。
Dialogue: 0,1:27:39.39,1:27:45.03,英文,,0,0,0,,There's actually an else keyword you can use in Python that does not accompany if or elif.
Dialogue: 0,1:27:39.39,1:27:45.03,中文,,0,0,0,,实际上，你可以在 python 中使用 else 关键字，它不与 if 或 elif 一起使用。
Dialogue: 0,1:27:45.03,1:27:49.23,英文,,0,0,0,,It accompanies try and accept, which I think is weirdly confusing.
Dialogue: 0,1:27:45.03,1:27:49.23,中文,,0,0,0,,它与 try 和 accept 一起使用，我认为这很令人困惑。
Dialogue: 0,1:27:49.23,1:27:53.82,英文,,0,0,0,,A different word would have been better. But if you really prefer, I could have done this instead.
Dialogue: 0,1:27:49.23,1:27:53.82,中文,,0,0,0,,换个词会更好。但如果你真的喜欢，我也可以这样做。
Dialogue: 0,1:27:53.82,1:27:57.06,英文,,0,0,0,,And this is one of these design things where reasonable people will disagree.
Dialogue: 0,1:27:53.82,1:27:57.06,中文,,0,0,0,,这是一个设计上的问题，理性的人也会有不同意见。
Dialogue: 0,1:27:57.06,1:28:01.16,英文,,0,0,0,,Generally speaking, you should only try to do the one line that might very well fail.
Dialogue: 0,1:27:57.06,1:28:01.16,中文,,0,0,0,,一般来说，你应该只尝试做那一行可能失败的代码。
Dialogue: 0,1:28:01.16,1:28:03.20,英文,,0,0,0,,But honestly, this looks kind of stupid.
Dialogue: 0,1:28:01.16,1:28:03.20,中文,,0,0,0,,但说实话，这看起来有点蠢。
Dialogue: 0,1:28:03.20,1:28:04.88,英文,,0,0,0,,It's just unnecessarily complicated.
Dialogue: 0,1:28:03.20,1:28:04.88,中文,,0,0,0,,这只是不必要的复杂。
Dialogue: 0,1:28:04.88,1:28:08.11,英文,,0,0,0,,And so my own preference was actually the original.
Dialogue: 0,1:28:04.88,1:28:08.11,中文,,0,0,0,,所以我个人实际上更喜欢原来的版本。
Dialogue: 0,1:28:08.11,1:28:12.29,英文,,0,0,0,,Which was, yeah, I'm trying a few extra lines that really aren't going to fail mathematically.
Dialogue: 0,1:28:08.11,1:28:12.29,中文,,0,0,0,,也就是，我尝试了一些额外的行，它们在数学上并不会出错。
Dialogue: 0,1:28:12.29,1:28:13.23,英文,,0,0,0,,But it's just tighter.
Dialogue: 0,1:28:12.29,1:28:13.23,中文,,0,0,0,,但这样更简洁。
Dialogue: 0,1:28:13.23,1:28:14.47,英文,,0,0,0,,It's cleaner this way.
Dialogue: 0,1:28:13.23,1:28:14.47,中文,,0,0,0,,这样更清晰。
Dialogue: 0,1:28:14.47,1:28:18.91,英文,,0,0,0,,And here's, again, the sort of arguments you'll start to make yourself as you get more comfortable with programming.
Dialogue: 0,1:28:14.47,1:28:18.91,中文,,0,0,0,,随着你对编程越来越熟悉，你会开始自己提出这样的论点。
Dialogue: 0,1:28:18.91,1:28:20.63,英文,,0,0,0,,You'll have an opinion. You'll disagree with someone.
Dialogue: 0,1:28:18.91,1:28:20.63,中文,,0,0,0,,你会有自己的观点，你会不同意别人的意见。
Dialogue: 0,1:28:20.63,1:28:25.40,英文,,0,0,0,,And so long as you can back your argument up, it's pretty reasonable, probably.
Dialogue: 0,1:28:20.63,1:28:25.40,中文,,0,0,0,,只要你能支持你的论点，它就很合理。
Dialogue: 0,1:28:25.40,1:28:31.69,英文,,0,0,0,,All right, so how about we now take away some piece of magic that's been here for a while.
Dialogue: 0,1:28:25.40,1:28:31.69,中文,,0,0,0,,好了，现在让我们来去掉一些已经存在一段时间的魔法。
Dialogue: 0,1:28:31.69,1:28:34.27,英文,,0,0,0,,Let me go ahead and delete all of this here.
Dialogue: 0,1:28:31.69,1:28:34.27,中文,,0,0,0,,让我把这里的所有东西都删掉。
Dialogue: 0,1:28:34.27,1:28:43.41,英文,,0,0,0,,And let me propose that we revisit not that vertical column and the exceptions that might result from getting input, but these horizontal question marks that we saw a while ago.
Dialogue: 0,1:28:34.27,1:28:43.41,中文,,0,0,0,,让我们重新审视一下，不是那个垂直列以及获取输入可能导致的异常，而是我们之前看到过的那些水平问号。
Dialogue: 0,1:28:43.41,1:28:46.19,英文,,0,0,0,,So I want all of those question marks on the same line.
Dialogue: 0,1:28:43.41,1:28:46.19,中文,,0,0,0,,我希望所有这些问号都在同一行。
Dialogue: 0,1:28:46.19,1:28:54.16,英文,,0,0,0,,And yet, I worry we're about to see a challenge here, because print, up until now, has been putting new lines everywhere automatically, even without those backslash n's.
Dialogue: 0,1:28:46.19,1:28:54.16,中文,,0,0,0,,然而，我担心我们即将看到一个挑战，因为到目前为止，print 函数一直在自动换行，即使没有那些反斜杠 n。
Dialogue: 0,1:28:54.16,1:28:56.54,英文,,0,0,0,,Well, let me propose that we do this.
Dialogue: 0,1:28:54.16,1:28:56.54,中文,,0,0,0,,让我建议我们这样做。
Dialogue: 0,1:28:56.54,1:29:02.51,英文,,0,0,0,,For i in the range of 4, if I want 4 question marks, let me just print 4 question marks.
Dialogue: 0,1:28:56.54,1:29:02.51,中文,,0,0,0,,对于 4 以内的 i，如果我想要 4 个问号，我只需要打印 4 个问号。
Dialogue: 0,1:29:02.51,1:29:04.79,英文,,0,0,0,,Unfortunately, I don't think this is correct yet.
Dialogue: 0,1:29:02.51,1:29:04.79,中文,,0,0,0,,不幸的是，我认为这还不正确。
Dialogue: 0,1:29:04.79,1:29:06.99,英文,,0,0,0,,Let me run Python of Mario.py.
Dialogue: 0,1:29:04.79,1:29:06.99,中文,,0,0,0,,让我运行 mario.py。
Dialogue: 0,1:29:06.99,1:29:13.76,英文,,0,0,0,,And of course, this gives me a column instead of the row of question marks that I want. So how do we do this?
Dialogue: 0,1:29:06.99,1:29:13.76,中文,,0,0,0,,当然，这给了我一个列，而不是我想要的问号行。那么我们该怎么做呢？
Dialogue: 0,1:29:13.76,1:29:22.25,英文,,0,0,0,,Well, it turns out if you read the documentation for the print function, it turns out that print, not surprisingly perhaps, takes a lot of different arguments as well.
Dialogue: 0,1:29:13.76,1:29:22.25,中文,,0,0,0,,事实证明，如果你阅读了 print 函数的文档，你会发现 print 函数可以接受很多不同的参数，这也许并不奇怪。
Dialogue: 0,1:29:22.25,1:29:30.99,英文,,0,0,0,,And in fact, if you go to the documentation for it, you'll see that it takes not just positional arguments, that is, from left to right, separated by commas.
Dialogue: 0,1:29:22.25,1:29:30.99,中文,,0,0,0,,事实上，如果你查看它的文档，你会发现它不仅接受位置参数，也就是从左到右、用逗号分隔的参数。
Dialogue: 0,1:29:30.99,1:29:37.24,英文,,0,0,0,,It turns out Python supports a fancier feature with arguments where you can pass the names of arguments to functions, too.
Dialogue: 0,1:29:30.99,1:29:37.24,中文,,0,0,0,,实际上，python 还支持一种更高级的参数特性，你也可以将参数的名称传递给函数。
Dialogue: 0,1:29:37.24,1:29:38.90,英文,,0,0,0,,So what do I mean by this?
Dialogue: 0,1:29:37.24,1:29:38.90,中文,,0,0,0,,这是什么意思呢？
Dialogue: 0,1:29:38.90,1:29:41.46,英文,,0,0,0,,If I go back to VS Code here.
Dialogue: 0,1:29:38.90,1:29:41.46,中文,,0,0,0,,回到 VS Code 看看。
Dialogue: 0,1:29:41.46,1:29:43.66,英文,,0,0,0,,And I've read the documentation.
Dialogue: 0,1:29:41.46,1:29:43.66,中文,,0,0,0,,我已经阅读过文档了。
Dialogue: 0,1:29:43.66,1:29:52.23,英文,,0,0,0,,It turns out that, yes, as before, you can pass multiple arguments to Python like this, like hello, David, Malan.
Dialogue: 0,1:29:43.66,1:29:52.23,中文,,0,0,0,,事实证明，和之前一样，你可以像这样向 python 传递多个参数，比如 hello、David、Malan。
Dialogue: 0,1:29:52.23,1:29:57.02,英文,,0,0,0,,That will just automatically concatenate all three of those positional arguments together.
Dialogue: 0,1:29:52.23,1:29:57.02,中文,,0,0,0,,这会自动将这三个位置参数连接在一起。
Dialogue: 0,1:29:57.02,1:30:01.50,英文,,0,0,0,,They're positional in the sense that they literally flow from left to right, separated by commas.
Dialogue: 0,1:29:57.02,1:30:01.50,中文,,0,0,0,,它们之所以被称为位置参数，是因为它们实际上是从左到右排列的，用逗号分隔。
Dialogue: 0,1:30:01.50,1:30:07.55,英文,,0,0,0,,But if you don't want to just pass in values like that, you want to actually print out, as I did before, a question mark.
Dialogue: 0,1:30:01.50,1:30:07.55,中文,,0,0,0,,但如果你不想仅仅像这样传递值，而是想像我之前那样打印出一个问号。
Dialogue: 0,1:30:07.55,1:30:14.56,英文,,0,0,0,,But you want to override the default behavior of print by changing the line ending, you can actually do this.
Dialogue: 0,1:30:07.55,1:30:14.56,中文,,0,0,0,,但你想通过更改行尾来覆盖 print 的默认行为，你可以这样做。
Dialogue: 0,1:30:14.56,1:30:19.12,英文,,0,0,0,,You can use the name of an argument that you know exists from the documentation.
Dialogue: 0,1:30:14.56,1:30:19.12,中文,,0,0,0,,可以使用一个你从文档中了解到的参数名称。
Dialogue: 0,1:30:19.12,1:30:22.62,英文,,0,0,0,,I set it equal to some alternative value.
Dialogue: 0,1:30:19.12,1:30:22.62,中文,,0,0,0,,我把它设置为其他值。
Dialogue: 0,1:30:22.62,1:30:30.39,英文,,0,0,0,,And in fact, even though this looks cryptic, this is how I would override the end of each line to be quote, unquote.
Dialogue: 0,1:30:22.62,1:30:30.39,中文,,0,0,0,,事实上，即使这看起来很神秘，但这就是我如何将每行的结尾覆盖为引号、取消引号的方法。
Dialogue: 0,1:30:30.39,1:30:31.67,英文,,0,0,0,,That is nothing.
Dialogue: 0,1:30:30.39,1:30:31.67,中文,,0,0,0,,也就是说，什么都没有。
Dialogue: 0,1:30:31.67,1:30:38.98,英文,,0,0,0,,Because if you read the documentation, the default value for this end argument, does someone want to guess, is?
Dialogue: 0,1:30:31.67,1:30:38.98,中文,,0,0,0,,因为如果你阅读了文档，这个 end 参数的默认值是，有人猜到了吗？
Dialogue: 0,1:30:38.98,1:30:46.70,英文,,0,0,0,,is backslash n. So if you read the documentation, you'll see that backslash n is the implied default for this end argument.
Dialogue: 0,1:30:38.98,1:30:46.70,中文,,0,0,0,,是反斜杠 n。所以如果你阅读了文档，你会发现反斜杠 n 是 end 参数的默认值。
Dialogue: 0,1:30:46.70,1:30:50.19,英文,,0,0,0,,And so if you want to change it, you just say end equals something else.
Dialogue: 0,1:30:46.70,1:30:50.19,中文,,0,0,0,,所以如果你想改变它，只需将 end 设置为其他值。
Dialogue: 0,1:30:50.19,1:30:57.65,英文,,0,0,0,,And so here, I can change it to nothing and now rerun Python of Mario.py.
Dialogue: 0,1:30:50.19,1:30:57.65,中文,,0,0,0,,所以在这里，我可以把它改成空，然后重新运行 mario.py。
Dialogue: 0,1:30:57.65,1:30:58.89,英文,,0,0,0,,And now they're all on the same line.
Dialogue: 0,1:30:57.65,1:30:58.89,中文,,0,0,0,,现在它们都在同一行了。
Dialogue: 0,1:30:58.89,1:31:04.36,英文,,0,0,0,,Now, it looks a little stupid because I made that sort of week one mistake where I still need to move the cursor to the next line.
Dialogue: 0,1:30:58.89,1:31:04.36,中文,,0,0,0,,现在看起来有点蠢，因为我犯了第一周常犯的错误，我还需要将光标移动到下一行。
Dialogue: 0,1:31:04.36,1:31:05.58,英文,,0,0,0,,That's just a different problem.
Dialogue: 0,1:31:04.36,1:31:05.58,中文,,0,0,0,,这只是另一个问题。
Dialogue: 0,1:31:05.58,1:31:07.58,英文,,0,0,0,,I'm just going to go over here and print nothing.
Dialogue: 0,1:31:05.58,1:31:07.58,中文,,0,0,0,,我只是要到这里来打印空内容。
Dialogue: 0,1:31:07.58,1:31:15.48,英文,,0,0,0,,I don't even need to print backslash n, because if print automatically gives you a backslash n, just call print with nothing, and you'll get that for free.
Dialogue: 0,1:31:07.58,1:31:15.48,中文,,0,0,0,,我甚至不需要打印反斜杠 n，因为如果 print 自动给你一个反斜杠 n，只需调用不带任何内容的 print，你就可以免费获得它。
Dialogue: 0,1:31:15.48,1:31:20.19,英文,,0,0,0,,So let me rerun Python of Mario.py, and now it looks a little prettier at the prompt.
Dialogue: 0,1:31:15.48,1:31:20.19,中文,,0,0,0,,让我重新运行 mario.py，现在它在提示符下看起来更漂亮了。
Dialogue: 0,1:31:20.19,1:31:24.35,英文,,0,0,0,,And to be super clear as to what's going on, suppose I want to make an exclamation here.
Dialogue: 0,1:31:20.19,1:31:24.35,中文,,0,0,0,,为了更清楚地说明发生了什么，假设我想在这里做一个感叹号。
Dialogue: 0,1:31:24.35,1:31:28.73,英文,,0,0,0,,I could change the backslash n default to an exclamation point just for kicks.
Dialogue: 0,1:31:24.35,1:31:28.73,中文,,0,0,0,,我可以用感叹号替换反斜杠 n 默认值。
Dialogue: 0,1:31:28.73,1:31:37.12,英文,,0,0,0,,And if I run Python of Mario.py again, now I get this exclamation with question marks and exclamation points as well.
Dialogue: 0,1:31:28.73,1:31:37.12,中文,,0,0,0,,如果我再次运行 mario.py，现在我会得到这个带有问号和感叹号的感叹号。
Dialogue: 0,1:31:37.12,1:31:40.72,英文,,0,0,0,,So that's all that's going on here. And this is what's called a named argument.
Dialogue: 0,1:31:37.12,1:31:40.72,中文,,0,0,0,,这就是这里发生的一切。这就是所谓的命名参数。
Dialogue: 0,1:31:40.72,1:31:43.87,英文,,0,0,0,,It literally has a name that you can specify when calling it in.
Dialogue: 0,1:31:40.72,1:31:43.87,中文,,0,0,0,,它确实有一个名称，你可以在调用它时指定它。
Dialogue: 0,1:31:43.87,1:31:48.34,英文,,0,0,0,,And it's different from positional in that you're literally using the name.
Dialogue: 0,1:31:43.87,1:31:48.34,中文,,0,0,0,,它与位置参数的不同之处在于，你是直接使用名称。
Dialogue: 0,1:31:48.34,1:31:49.50,英文,,0,0,0,,Let me propose something else, though.
Dialogue: 0,1:31:48.34,1:31:49.50,中文,,0,0,0,,不过，让我提出一些其他的建议。
Dialogue: 0,1:31:49.50,1:31:53.26,英文,,0,0,0,,And this is why people kind of like Python. There's just kind of cool ways to do things.
Dialogue: 0,1:31:49.50,1:31:53.26,中文,,0,0,0,,这就是人们喜欢 python 的原因。它有一些很酷的做事方式。
Dialogue: 0,1:31:53.26,1:32:00.93,英文,,0,0,0,,That's kind of a three-line, verbose way of printing out four question marks.
Dialogue: 0,1:31:53.26,1:32:00.93,中文,,0,0,0,,这是一种用三行代码打印四个问号的冗长方法。
Dialogue: 0,1:32:00.93,1:32:08.85,英文,,0,0,0,,I could certainly take the shortcut and just do this, but that's not really that interesting for anyone, especially if I want to do it a variable number of times.
Dialogue: 0,1:32:00.93,1:32:08.85,中文,,0,0,0,,我当然可以走捷径，就这样做，但这对任何人来说都不是那么有趣，特别是如果我想做很多次的话。
Dialogue: 0,1:32:08.85,1:32:10.77,英文,,0,0,0,,But Python does let you do this.
Dialogue: 0,1:32:08.85,1:32:10.77,中文,,0,0,0,,但 python 允许你这样做。
Dialogue: 0,1:32:10.77,1:32:18.22,英文,,0,0,0,,If you want to multiply a character some number of times, not only can you use plus for concatenation,
Dialogue: 0,1:32:10.77,1:32:18.22,中文,,0,0,0,,如果你想将一个字符乘以某个次数，你不仅可以使用加号进行连接，
Dialogue: 0,1:32:18.22,1:32:23.38,英文,,0,0,0,,you can use star, or an asterisk, for multiplication, if you will.
Dialogue: 0,1:32:18.22,1:32:23.38,中文,,0,0,0,,你还可以使用星号进行乘法。
Dialogue: 0,1:32:23.38,1:32:26.32,英文,,0,0,0,,That is, concatenation again and again and again.
Dialogue: 0,1:32:23.38,1:32:26.32,中文,,0,0,0,,也就是说，一次又一次地连接。
Dialogue: 0,1:32:26.32,1:32:36.41,英文,,0,0,0,,So if I just print out quote unquote question mark times 4, that's actually going to be the tightest way, the most succinct way I can print 4 question marks instead.
Dialogue: 0,1:32:26.32,1:32:36.41,中文,,0,0,0,,因此，如果我只打印出“问号”乘以 4，这实际上将是最简洁、最简洁的打印 4 个问号的方式。
Dialogue: 0,1:32:36.41,1:32:39.49,英文,,0,0,0,,And if I don't use 4, I use n, where I get n from the user.
Dialogue: 0,1:32:36.41,1:32:39.49,中文,,0,0,0,,如果我不使用 4，而是使用 n，从用户那里获取 n。
Dialogue: 0,1:32:39.49,1:32:48.06,英文,,0,0,0,,Bang, like now I've gotten rid of the for loop entirely, and I'm using the star operator to manipulate it instead.
Dialogue: 0,1:32:39.49,1:32:48.06,中文,,0,0,0,,砰，就像现在我已经完全摆脱了 for 循环，并且我正在使用星号运算符来代替它。
Dialogue: 0,1:32:48.06,1:32:59.91,英文,,0,0,0,,And to be super clear here, insofar as Python does not have malloc, or free, or memory management that you have to do, guess what Python also doesn't have?
Dialogue: 0,1:32:48.06,1:32:59.91,中文,,0,0,0,,更明确地说，由于 python 没有 malloc、free 或需要你进行内存管理，猜猜 python 也没有什么？
Dialogue: 0,1:32:59.91,1:33:03.22,英文,,0,0,0,,Anything on your minds in the past couple of weeks?
Dialogue: 0,1:32:59.91,1:33:03.22,中文,,0,0,0,,在过去几周里，你们有什么想法吗？
Dialogue: 0,1:33:03.22,1:33:05.01,英文,,0,0,0,,Doesn't have?
Dialogue: 0,1:33:03.22,1:33:05.01,中文,,0,0,0,,没有？
Dialogue: 0,1:33:05.01,1:33:06.05,英文,,0,0,0,,Pointers, yeah.
Dialogue: 0,1:33:05.01,1:33:06.05,中文,,0,0,0,,指针，是的。
Dialogue: 0,1:33:06.05,1:33:14.22,英文,,0,0,0,,So Python does not have pointers, which just means that all of that happens for you automatically underneath the hood, again, by way of code that someone else wrote.
Dialogue: 0,1:33:06.05,1:33:14.22,中文,,0,0,0,,所以 python 没有指针，这意味着所有这些操作都是在幕后自动为你完成的，同样，是通过其他人编写的代码完成的。
Dialogue: 0,1:33:14.22,1:33:16.34,英文,,0,0,0,,How about one more throwback with Mario?
Dialogue: 0,1:33:14.22,1:33:16.34,中文,,0,0,0,,再来回顾一下马里奥？
Dialogue: 0,1:33:16.34,1:33:27.85,英文,,0,0,0,,We've talked about, in week one, this sort of two-dimensional structure, where it's like, I claim, like three by three, a grid of bricks, if you will. Well, how can we do this in Python? We can do this in a couple of ways now.
Dialogue: 0,1:33:16.34,1:33:27.85,中文,,0,0,0,,我们在第一周讨论过这种二维结构，它就像一个 3×3 的砖块网格。\N那么，我们如何在 python 中做到这一点呢？我们现在可以用几种方法做到这一点。
Dialogue: 0,1:33:27.85,1:33:38.72,英文,,0,0,0,,Let me go back to my Mario.py, and let me do something like for i in range of, we'll just do 3, even though I know now I could use get int, or I could use input and int.
Dialogue: 0,1:33:27.85,1:33:38.72,中文,,0,0,0,,让我回到我的 mario.py，让我做一些类似于 for i in range of 的事情，\N我们只做 3，即使我现在知道我可以使用 get_int，或者我可以使用 input 和 int。
Dialogue: 0,1:33:38.72,1:33:42.62,英文,,0,0,0,,And if I want to do something two-dimensionally, just like in C, you can nest your for loops.
Dialogue: 0,1:33:38.72,1:33:42.62,中文,,0,0,0,,如果我想在二维上做一些事情，就像在 C 语言中一样，你可以嵌套你的 for 循环。
Dialogue: 0,1:33:42.62,1:33:46.18,英文,,0,0,0,,So maybe I could do for j in range of 3.
Dialogue: 0,1:33:42.62,1:33:46.18,中文,,0,0,0,,所以也许我可以做 for j in range of (3)。
Dialogue: 0,1:33:46.18,1:33:51.42,英文,,0,0,0,,And then in here, I could print out a hash symbol.
Dialogue: 0,1:33:46.18,1:33:51.42,中文,,0,0,0,,然后在这里，我可以打印出一个井号。
Dialogue: 0,1:33:51.42,1:33:53.69,英文,,0,0,0,,And then let's see if that gives me nine total.
Dialogue: 0,1:33:51.42,1:33:53.69,中文,,0,0,0,,然后让我们看看这是否给了我总共 9 个。
Dialogue: 0,1:33:53.69,1:33:59.03,英文,,0,0,0,,So if I've got a nested loop like this, Python of mario.py hopefully gives me a grid?
Dialogue: 0,1:33:53.69,1:33:59.03,中文,,0,0,0,,所以如果我有一个像这样的嵌套循环，python mario.py 会给我一个网格吗？
Dialogue: 0,1:33:59.03,1:33:59.53,英文,,0,0,0,,No.
Dialogue: 0,1:33:59.03,1:33:59.53,中文,,0,0,0,,没有。
Dialogue: 0,1:33:59.53,1:34:02.32,英文,,0,0,0,,It gave me a column of nine.
Dialogue: 0,1:33:59.53,1:34:02.32,中文,,0,0,0,,它给了我一个 9 的列。
Dialogue: 0,1:34:02.32,1:34:04.80,英文,,0,0,0,,Why, logically?
Dialogue: 0,1:34:02.32,1:34:04.80,中文,,0,0,0,,为什么，逻辑上？
Dialogue: 0,1:34:04.80,1:34:12.30,英文,,0,0,0,,Even though I've got my row and my columns?
Dialogue: 0,1:34:04.80,1:34:12.30,中文,,0,0,0,,即使我已经有了我的行和列？
Dialogue: 0,1:34:12.30,1:34:13.36,英文,,0,0,0,,Yeah, the line ending.
Dialogue: 0,1:34:12.30,1:34:13.36,中文,,0,0,0,,是的，行尾。
Dialogue: 0,1:34:13.36,1:34:17.58,英文,,0,0,0,,So in my row, I can't let print just keep adding new line, adding new line.
Dialogue: 0,1:34:13.36,1:34:17.58,中文,,0,0,0,,所以我的行不能让 print 不断添加新行。
Dialogue: 0,1:34:17.58,1:34:19.38,英文,,0,0,0,,So I just have to override this here.
Dialogue: 0,1:34:17.58,1:34:19.38,中文,,0,0,0,,所以我必须在这里覆盖它。
Dialogue: 0,1:34:19.38,1:34:20.72,英文,,0,0,0,,And let me not screw up like before.
Dialogue: 0,1:34:19.38,1:34:20.72,中文,,0,0,0,,这次我可不想像之前那样搞砸了。
Dialogue: 0,1:34:20.72,1:34:24.60,英文,,0,0,0,,Let me print one at the end of the whole row just to move the cursor down.
Dialogue: 0,1:34:20.72,1:34:24.60,中文,,0,0,0,,让我在整行的末尾打印一个字符，以便将光标向下移动。
Dialogue: 0,1:34:24.60,1:34:28.16,英文,,0,0,0,,And I think now, together, now we've got our 3 by 3.
Dialogue: 0,1:34:24.60,1:34:28.16,中文,,0,0,0,,我想现在我们已经有 3×3 的矩阵了。
Dialogue: 0,1:34:28.16,1:34:29.98,英文,,0,0,0,,Of course, we could tighten this up further.
Dialogue: 0,1:34:28.16,1:34:29.98,中文,,0,0,0,,当然，我们还可以进一步简化代码。
Dialogue: 0,1:34:29.98,1:34:37.21,英文,,0,0,0,,Like, if I don't like the nested loop, I probably could go in here and just print out, for instance, a brick.
Dialogue: 0,1:34:29.98,1:34:37.21,中文,,0,0,0,,例如，如果我不喜欢嵌套循环，我可以在这里直接打印，例如，一块砖。
Dialogue: 0,1:34:37.21,1:34:42.89,英文,,0,0,0,,Times 3, or I could change the 3 to a variable if I've gotten it from the user. So I can tighten this up further.
Dialogue: 0,1:34:37.21,1:34:42.89,中文,,0,0,0,,乘以 3，或者如果我从用户那里获取了它，我可以将 3 更改为一个变量。所以我可以进一步简化它。
Dialogue: 0,1:34:42.89,1:34:44.99,英文,,0,0,0,,So again, just different ways to solve the same problem.
Dialogue: 0,1:34:42.89,1:34:44.99,中文,,0,0,0,,这只是解决同一个问题的不同方法。
Dialogue: 0,1:34:44.99,1:34:55.32,英文,,0,0,0,,And again, sort of evidence of why a lot of people like Python, there's just some more pleasant ways to solve problems without getting into the weeds constantly of doing things like with,
Dialogue: 0,1:34:44.99,1:34:55.32,中文,,0,0,0,,这也证明了为什么很多人喜欢 python，因为 python 提供了一些更令人愉悦的解决问题的方法，而无需像以前那样，
Dialogue: 0,1:34:55.32,1:34:57.32,英文,,0,0,0,,For loops and while loops endlessly.
Dialogue: 0,1:34:55.32,1:34:57.32,中文,,0,0,0,,无休止地使用 for 循环和 while 循环。
Dialogue: 0,1:34:57.32,1:34:59.18,英文,,0,0,0,,All right, well, how about some other building blocks?
Dialogue: 0,1:34:57.32,1:34:59.18,中文,,0,0,0,,好了，还有一些其他的构建块。
Dialogue: 0,1:34:59.18,1:35:06.29,英文,,0,0,0,,Lists are going to be so incredibly useful in Python, just as arrays were in C. But arrays are annoying because you have to manage the memory yourself.
Dialogue: 0,1:34:59.18,1:35:06.29,中文,,0,0,0,,列表在 python 中将非常有用，就像数组在 C 语言中一样。但是数组很烦人，因为你必须自己管理内存。
Dialogue: 0,1:35:06.29,1:35:08.05,英文,,0,0,0,,You have to know in advance how big they are.
Dialogue: 0,1:35:06.29,1:35:08.05,中文,,0,0,0,,你必须事先知道它们有多大。
Dialogue: 0,1:35:08.05,1:35:11.43,英文,,0,0,0,,Or you have to use pointers and malloc or realloc to resize them.
Dialogue: 0,1:35:08.05,1:35:11.43,中文,,0,0,0,,或者你必须使用指针和 malloc 或 realloc 来调整它们的大小。
Dialogue: 0,1:35:11.43,1:35:14.53,英文,,0,0,0,,Like, oh my god, the past two weeks have been painful in that sense.
Dialogue: 0,1:35:11.43,1:35:14.53,中文,,0,0,0,,我的天，过去两周在这方面真是太痛苦了。
Dialogue: 0,1:35:14.53,1:35:17.41,英文,,0,0,0,,But Python does this all for free for you.
Dialogue: 0,1:35:14.53,1:35:17.41,中文,,0,0,0,,但 python 为你免费完成了所有这些工作。
Dialogue: 0,1:35:17.41,1:35:22.22,英文,,0,0,0,,In fact, there's a whole bunch of functions that come with Python that involve lists.
Dialogue: 0,1:35:17.41,1:35:22.22,中文,,0,0,0,,事实上，python 自带了一大堆与列表相关的函数。
Dialogue: 0,1:35:22.22,1:35:31.34,英文,,0,0,0,,And they'll allow us, ultimately, to do things again and again and again within the same data structure.
Dialogue: 0,1:35:22.22,1:35:31.34,中文,,0,0,0,,它们最终将允许我们，在同一个数据结构中一遍又一遍地做事情。
Dialogue: 0,1:35:31.34,1:35:33.60,英文,,0,0,0,,And for instance, we'll be able to get the length of a list.
Dialogue: 0,1:35:31.34,1:35:33.60,中文,,0,0,0,,例如，我们将能够获得列表的长度。
Dialogue: 0,1:35:33.60,1:35:35.96,英文,,0,0,0,,You don't have to remember it yourself in a variable.
Dialogue: 0,1:35:33.60,1:35:35.96,中文,,0,0,0,,不必把元素个数存在变量里。
Dialogue: 0,1:35:35.96,1:35:39.73,英文,,0,0,0,,You can just ask Python how many elements are in this list.
Dialogue: 0,1:35:35.96,1:35:39.73,中文,,0,0,0,,可以直接问 python 这个列表中有多少个元素。
Dialogue: 0,1:35:39.73,1:35:43.15,英文,,0,0,0,,And with this, I think we can solve some old problems, too.
Dialogue: 0,1:35:39.73,1:35:43.15,中文,,0,0,0,,有了这个，我们可以解决之前的一些问题了。
Dialogue: 0,1:35:43.15,1:35:45.49,英文,,0,0,0,,So let me go back here to VS Code.
Dialogue: 0,1:35:43.15,1:35:45.49,中文,,0,0,0,,我们回到 VS Code。
Dialogue: 0,1:35:45.49,1:35:51.07,英文,,0,0,0,,Let me close Mario and give us a new program called scores.py.
Dialogue: 0,1:35:45.49,1:35:51.07,中文,,0,0,0,,关闭 mario，新建一个名为 scores.py 的程序。
Dialogue: 0,1:35:51.07,1:35:54.87,英文,,0,0,0,,And rather than show the C and the Python now, let's just focus on Python.
Dialogue: 0,1:35:51.07,1:35:54.87,中文,,0,0,0,,我们先关注 python 版本，暂时不看 C 代码。
Dialogue: 0,1:35:54.87,1:36:03.30,英文,,0,0,0,,And in scores.c way back when, we just averaged like three test scores or something like that, 72, 73, and 33 a few weeks ago.
Dialogue: 0,1:35:54.87,1:36:03.30,中文,,0,0,0,,在之前的 scores.c 中，我们计算了三个测试分数的平均值，比如几周前的 72、73 和 33。
Dialogue: 0,1:36:03.30,1:36:09.70,英文,,0,0,0,,So if I want to create a list in this Python version of 72, 73, 33, I just use my square bracket notation.
Dialogue: 0,1:36:03.30,1:36:09.70,中文,,0,0,0,,要在 python 中创建一个包含 72、73 和 33 的列表，只需要使用方括号。
Dialogue: 0,1:36:09.70,1:36:12.80,英文,,0,0,0,,C let you use curly braces if you know the values in advance.
Dialogue: 0,1:36:09.70,1:36:12.80,中文,,0,0,0,,在 C 语言中，如果事先知道值，可以使用花括号。
Dialogue: 0,1:36:12.80,1:36:14.32,英文,,0,0,0,,But Python's just this.
Dialogue: 0,1:36:12.80,1:36:14.32,中文,,0,0,0,,但 python 只需要这样。
Dialogue: 0,1:36:14.32,1:36:19.41,英文,,0,0,0,,And now if I want to compute the average, in C, recall, I did something with a loop.
Dialogue: 0,1:36:14.32,1:36:19.41,中文,,0,0,0,,要计算平均值，回想一下在 C 语言中，我们使用循环来实现。
Dialogue: 0,1:36:19.41,1:36:21.03,英文,,0,0,0,,I added all the values together.
Dialogue: 0,1:36:19.41,1:36:21.03,中文,,0,0,0,,将所有值加在一起。
Dialogue: 0,1:36:21.03,1:36:24.77,英文,,0,0,0,,I then divided by the total number of values, just like you would in grade school.
Dialogue: 0,1:36:21.03,1:36:24.77,中文,,0,0,0,,然后除以值的总数，就像在小学时一样。
Dialogue: 0,1:36:24.77,1:36:26.17,英文,,0,0,0,,And that gave me the average.
Dialogue: 0,1:36:24.77,1:36:26.17,中文,,0,0,0,,这样就得到了平均值。
Dialogue: 0,1:36:26.17,1:36:31.82,英文,,0,0,0,,Well, Python comes with a lot of super handy functions, not just length, but others as well.
Dialogue: 0,1:36:26.17,1:36:31.82,中文,,0,0,0,,python 提供了许多超级方便的函数，不仅有 `len` 函数，还有其他函数。
Dialogue: 0,1:36:31.82,1:36:40.06,英文,,0,0,0,,And so in fact, if you want to compute the average, you can take the sum of all of those scores and divide it by the length of all of those scores.
Dialogue: 0,1:36:31.82,1:36:40.06,中文,,0,0,0,,实际上，如果想计算平均值，可以直接用所有分数的总和除以分数的总数。
Dialogue: 0,1:36:40.06,1:36:42.57,英文,,0,0,0,,So Python comes with length, comes with sum.
Dialogue: 0,1:36:40.06,1:36:42.57,中文,,0,0,0,,python 提供了 `len` 和 `sum` 函数。
Dialogue: 0,1:36:42.57,1:36:48.05,英文,,0,0,0,,You can just pass in a whole list of any size and let it deal with that problem for you.
Dialogue: 0,1:36:42.57,1:36:48.05,中文,,0,0,0,,你可以传入任意大小的列表，让它帮你处理这个问题。
Dialogue: 0,1:36:48.05,1:36:51.91,英文,,0,0,0,,So if I want to now print out this average, I can print out average colon.
Dialogue: 0,1:36:48.05,1:36:51.91,中文,,0,0,0,,如果想打印出平均值，可以打印 "average:"。
Dialogue: 0,1:36:51.91,1:36:56.04,英文,,0,0,0,,And then I'll plug in my average variable for interpolation.
Dialogue: 0,1:36:51.91,1:36:56.04,中文,,0,0,0,,然后插入平均值变量进行插值。
Dialogue: 0,1:36:56.04,1:36:59.02,英文,,0,0,0,,Let me make this an f string so that it gets formatted.
Dialogue: 0,1:36:56.04,1:36:59.02,中文,,0,0,0,,我把它变成 f 字符串，这样它就会被格式化。
Dialogue: 0,1:36:59.02,1:37:01.75,英文,,0,0,0,,And let me just run Python of scores.py.
Dialogue: 0,1:36:59.02,1:37:01.75,中文,,0,0,0,,让我用 python 运行一下 scores.py。
Dialogue: 0,1:37:01.75,1:37:03.01,英文,,0,0,0,,And there's my average.
Dialogue: 0,1:37:01.75,1:37:03.01,中文,,0,0,0,,这就是我的平均值。
Dialogue: 0,1:37:03.01,1:37:07.01,英文,,0,0,0,,It's sort of rounding weird, because we're still vulnerable to some floating point imprecision.
Dialogue: 0,1:37:03.01,1:37:07.01,中文,,0,0,0,,它的舍入有点奇怪，因为我们仍然容易受到浮点数不精确的影响。
Dialogue: 0,1:37:07.01,1:37:15.59,英文,,0,0,0,,But at least I didn't need loops, and I didn't have to write all this darn code just to do something that you know Excel and Google Spreadsheets can just do like that.
Dialogue: 0,1:37:07.01,1:37:15.59,中文,,0,0,0,,但至少我不需要循环，也不必为了做 Excel 和 Google Spreadsheets 就能做的事情而写这么多代码。
Dialogue: 0,1:37:15.59,1:37:21.96,英文,,0,0,0,,Well, Python is closer to those kinds of tools, but more powerful in that you can manipulate the data yourself.
Dialogue: 0,1:37:15.59,1:37:21.96,中文,,0,0,0,,python 更接近这类工具，但它更强大，因为你可以自己操作数据。
Dialogue: 0,1:37:21.96,1:37:27.38,英文,,0,0,0,,How about, though, if I want to get a bunch of scores manually from the user and then sum them together?
Dialogue: 0,1:37:21.96,1:37:27.38,中文,,0,0,0,,但是，如果我想从用户那里手动获取一堆分数，然后把它们加起来，该怎么办呢？
Dialogue: 0,1:37:27.38,1:37:29.90,英文,,0,0,0,,Well, let's combine a few ideas here. How about this?
Dialogue: 0,1:37:27.38,1:37:29.90,中文,,0,0,0,,我们可以结合一些想法。这样如何？
Dialogue: 0,1:37:29.90,1:37:33.34,英文,,0,0,0,,First, let me go ahead and import.
Dialogue: 0,1:37:29.90,1:37:33.34,中文,,0,0,0,,首先，我先导入。
Dialogue: 0,1:37:33.34,1:37:39.59,英文,,0,0,0,,The CS50 getInt function from the CS50 library, just so we don't have to deal with try and accept or all of that.
Dialogue: 0,1:37:33.34,1:37:39.59,中文,,0,0,0,,cs50 库中的 cs50 ge_int 函数，这样我们就不必处理 try 和 except 或所有这些东西。
Dialogue: 0,1:37:39.59,1:37:42.39,英文,,0,0,0,,And let me go ahead and give myself an empty list.
Dialogue: 0,1:37:39.59,1:37:42.39,中文,,0,0,0,,让我创建一个空列表。
Dialogue: 0,1:37:42.39,1:37:43.85,英文,,0,0,0,,And this is powerful.
Dialogue: 0,1:37:42.39,1:37:43.85,中文,,0,0,0,,这很强大。
Dialogue: 0,1:37:43.85,1:37:52.73,英文,,0,0,0,,In C, there's no point to an empty array, because if you create an empty array with square bracket notation, it's not useful for anything.
Dialogue: 0,1:37:43.85,1:37:52.73,中文,,0,0,0,,在 C 语言中，空数组毫无意义，因为如果使用方括号创建空数组，它没有任何用处。
Dialogue: 0,1:37:52.73,1:37:59.92,英文,,0,0,0,,But in Python, you can create it empty, because Python will grow and shrink the list for you automatically as you add things to it.
Dialogue: 0,1:37:52.73,1:37:59.92,中文,,0,0,0,,但在 python 中，你可以创建空列表，因为当你向列表中添加元素时，python 会自动增加或缩减列表的大小。
Dialogue: 0,1:37:59.92,1:38:03.46,英文,,0,0,0,,So if I want to get three scores from the user, I could do something like this.
Dialogue: 0,1:37:59.92,1:38:03.46,中文,,0,0,0,,所以如果我想从用户那里获取三个分数，我可以这样做。
Dialogue: 0,1:38:03.46,1:38:05.04,英文,,0,0,0,,4i in range of 3.
Dialogue: 0,1:38:03.46,1:38:05.04,中文,,0,0,0,,for i in range of (3).
Dialogue: 0,1:38:05.04,1:38:08.78,英文,,0,0,0,,And then I can grab a variable called score or anything.
Dialogue: 0,1:38:05.04,1:38:08.78,中文,,0,0,0,,然后我可以获取一个名为 score 或其他任何东西的变量。
Dialogue: 0,1:38:08.78,1:38:13.10,英文,,0,0,0,,I could call getInt, prompt the human for the score that they want to type in.
Dialogue: 0,1:38:08.78,1:38:13.10,中文,,0,0,0,,我可以调用 ge_int，提示用户输入他们想要输入的分数。
Dialogue: 0,1:38:13.10,1:38:15.21,英文,,0,0,0,,And then once they do, I can do this.
Dialogue: 0,1:38:13.10,1:38:15.21,中文,,0,0,0,,一旦他们输入了，我就可以这样做。
Dialogue: 0,1:38:15.21,1:38:18.29,英文,,0,0,0,,Thinking back to our object-oriented programming.
Dialogue: 0,1:38:15.21,1:38:18.29,中文,,0,0,0,,回想一下我们的面向对象编程。
Dialogue: 0,1:38:18.29,1:38:19.63,英文,,0,0,0,,capability now.
Dialogue: 0,1:38:18.29,1:38:19.63,中文,,0,0,0,,现在有这个能力了。
Dialogue: 0,1:38:19.63,1:38:24.79,英文,,0,0,0,,I could do scores.append, and I can append that score to it.
Dialogue: 0,1:38:19.63,1:38:24.79,中文,,0,0,0,,我可以使用 scores.append，将分数附加到列表中。
Dialogue: 0,1:38:24.79,1:38:29.12,英文,,0,0,0,,And you would only know this from having read the documentation, heard it in class in a book or whatnot.
Dialogue: 0,1:38:24.79,1:38:29.12,中文,,0,0,0,,你只能通过阅读文档、上课或书本等方式了解到这一点。
Dialogue: 0,1:38:29.12,1:38:39.77,英文,,0,0,0,,But it turns out that just like strings have functions like lower built into them, lists have functions like append built into them that just literally appends to the end of the list for you.
Dialogue: 0,1:38:29.12,1:38:39.77,中文,,0,0,0,,但事实证明，就像字符串有内置函数 lower 一样，列表也有像 append 这样的内置函数，它可以将元素附加到列表的末尾。
Dialogue: 0,1:38:39.77,1:38:42.27,英文,,0,0,0,,And Python will grow or shrink it as needed.
Dialogue: 0,1:38:39.77,1:38:42.27,中文,,0,0,0,,python 会根据需要自动增加或缩减列表的大小。
Dialogue: 0,1:38:42.27,1:38:45.11,英文,,0,0,0,,No more malloc or realloc or the like.
Dialogue: 0,1:38:42.27,1:38:45.11,中文,,0,0,0,,不再需要 malloc、realloc 或类似的东西。
Dialogue: 0,1:38:45.11,1:38:51.66,英文,,0,0,0,,So this just appends to the scores list that score, and then again, and again, and again.
Dialogue: 0,1:38:45.11,1:38:51.66,中文,,0,0,0,,所以这行代码会将分数附加到 scores 列表中，然后一次又一次地重复。
Dialogue: 0,1:38:51.66,1:38:59.78,英文,,0,0,0,,So the list starts at size 0, then grows to 1, then 2, then 3, without you having to do anything else.
Dialogue: 0,1:38:51.66,1:38:59.78,中文,,0,0,0,,列表的大小最初为 0，然后增加到 1，再到 2，再到 3，而你无需进行任何其他操作。
Dialogue: 0,1:38:59.78,1:39:01.77,英文,,0,0,0,,And so now down here.
Dialogue: 0,1:38:59.78,1:39:01.77,中文,,0,0,0,,所以现在在这里。
Dialogue: 0,1:39:01.77,1:39:07.85,英文,,0,0,0,,I can compute an average with the sum of those scores divided by the length of the total number of scores.
Dialogue: 0,1:39:01.77,1:39:07.85,中文,,0,0,0,,我可以通过分数总和除以分数总数的长度来计算平均值。
Dialogue: 0,1:39:07.85,1:39:11.85,英文,,0,0,0,,And to be clear, length is the total number of elements in the list.
Dialogue: 0,1:39:07.85,1:39:11.85,中文,,0,0,0,,需要明确的是，长度指的是列表中元素的总数。
Dialogue: 0,1:39:11.85,1:39:14.37,英文,,0,0,0,,Doesn't matter how big the values themselves are.
Dialogue: 0,1:39:11.85,1:39:14.37,中文,,0,0,0,,与值本身的大小无关。
Dialogue: 0,1:39:14.37,1:39:22.39,英文,,0,0,0,,Now I can go ahead and print out an f string with something like average, colon, average, and curly braces.
Dialogue: 0,1:39:14.37,1:39:22.39,中文,,0,0,0,,现在我可以继续使用 f 字符串打印出类似“average: ”的内容。
Dialogue: 0,1:39:22.39,1:39:28.02,英文,,0,0,0,,And if I run Python of scores.py, I'll type in, just for the sake of discussion, the three values.
Dialogue: 0,1:39:22.39,1:39:28.02,中文,,0,0,0,,为了便于讨论，我将运行 python scores.py，并输入三个值。
Dialogue: 0,1:39:28.02,1:39:29.48,英文,,0,0,0,,I still get the same answer.
Dialogue: 0,1:39:28.02,1:39:29.48,中文,,0,0,0,,我仍然得到了相同的答案。
Dialogue: 0,1:39:29.48,1:39:45.25,英文,,0,0,0,,But that would have been painful to do in C unless you committed in advance to a fixed size array, which we already decided weeks ago was annoying, or you grew it dynamically using malloc or realloc or the like.
Dialogue: 0,1:39:29.48,1:39:45.25,中文,,0,0,0,,但如果用 C 语言来实现，这将会非常痛苦，除非你预先确定了一个固定大小的数组（我们几周前就觉得这很烦人），\N或者使用 malloc 或 realloc 之类的函数来动态地增加数组的大小。
Dialogue: 0,1:39:45.25,1:39:46.43,英文,,0,0,0,,All right, what else can I do?
Dialogue: 0,1:39:45.25,1:39:46.43,中文,,0,0,0,,我还能做什么？
Dialogue: 0,1:39:46.43,1:39:50.13,英文,,0,0,0,,Well, there's some nice things you might as well know exist.
Dialogue: 0,1:39:46.43,1:39:50.13,中文,,0,0,0,,还有一些你可能也知道的好东西。
Dialogue: 0,1:39:50.13,1:39:54.45,英文,,0,0,0,,Instead of scores.append, you can do slight fanciness like this.
Dialogue: 0,1:39:50.13,1:39:54.45,中文,,0,0,0,,除了 scores.append，你还可以进行一些花哨的操作，比如这样。
Dialogue: 0,1:39:54.45,1:40:03.78,英文,,0,0,0,,Like if you want to append something to a list, you can actually do plus equals and then put that thing in a temporary list of its own.
Dialogue: 0,1:39:54.45,1:40:03.78,中文,,0,0,0,,如果你想将某个元素附加到列表中，你可以使用 += 操作符，并将该元素放在一个临时的列表中。
Dialogue: 0,1:40:03.78,1:40:09.34,英文,,0,0,0,,And just use what is essentially concatenation, but not concatenation of strings, but concatenation of lists.
Dialogue: 0,1:40:03.78,1:40:09.34,中文,,0,0,0,,本质上用的是连接，但不是字符串的连接，而是列表的连接。
Dialogue: 0,1:40:09.34,1:40:17.82,英文,,0,0,0,,So this new line 6 appends to the scores list this tiny little list I'm temporarily creating with just the current new score.
Dialogue: 0,1:40:09.34,1:40:17.82,中文,,0,0,0,,新的第 6 行将这个只包含当前新分数的临时小列表追加到 scores 列表中。
Dialogue: 0,1:40:17.82,1:40:23.85,英文,,0,0,0,,So just another piece of syntax that's worth seeing that allows you to do something like that as well.
Dialogue: 0,1:40:17.82,1:40:23.85,中文,,0,0,0,,这只是另一个值得一看的语法，它也允许你执行类似的操作。
Dialogue: 0,1:40:23.85,1:40:26.19,英文,,0,0,0,,All right, well, how about we go back to strings for a moment?
Dialogue: 0,1:40:23.85,1:40:26.19,中文,,0,0,0,,好了，我们回到字符串，怎么样？
Dialogue: 0,1:40:26.19,1:40:29.39,英文,,0,0,0,,And all these examples, as always, are on the course's website afterward.
Dialogue: 0,1:40:26.19,1:40:29.39,中文,,0,0,0,,像往常一样，所有这些示例之后都会发布在课程网站上。
Dialogue: 0,1:40:29.39,1:40:33.19,英文,,0,0,0,,Suppose we want to do something like converting characters to uppercase.
Dialogue: 0,1:40:29.39,1:40:33.19,中文,,0,0,0,,假设我们想做一些事情，比如将字符转换为大写。
Dialogue: 0,1:40:33.19,1:40:35.52,英文,,0,0,0,,Well, to be clear, I could do something like this.
Dialogue: 0,1:40:33.19,1:40:35.52,中文,,0,0,0,,好吧，需要说明的是，我可以这样做。
Dialogue: 0,1:40:35.52,1:40:38.44,英文,,0,0,0,,Let me create a program called uppercase.py.
Dialogue: 0,1:40:35.52,1:40:38.44,中文,,0,0,0,,我创建一个名为 uppercase.py 的程序。
Dialogue: 0,1:40:38.44,1:40:44.58,英文,,0,0,0,,Let me prompt the user for a before string, as by using the input function or get string, which is almost the same.
Dialogue: 0,1:40:38.44,1:40:44.58,中文,,0,0,0,,我先使用 input 函数或 get\_string 函数（两者几乎相同）提示用户输入一个字符串。
Dialogue: 0,1:40:44.58,1:40:47.64,英文,,0,0,0,,And I'll prompt the user for a string beforehand.
Dialogue: 0,1:40:44.58,1:40:47.64,中文,,0,0,0,,我会事先提示用户输入一个字符串。
Dialogue: 0,1:40:47.64,1:40:55.61,英文,,0,0,0,,Then let me go ahead and print out, how about the keyword after, and then End the new line.
Dialogue: 0,1:40:47.64,1:40:55.61,中文,,0,0,0,,我继续并打印出关键字 after，然后结束新行。
Dialogue: 0,1:40:55.61,1:41:00.15,英文,,0,0,0,,With nothing, just so that I can see before on one line and after on the next line.
Dialogue: 0,1:40:55.61,1:41:00.15,中文,,0,0,0,,什么都不做，这样我就可以在一行看到 before，在下一行看到 after。
Dialogue: 0,1:41:00.15,1:41:01.29,英文,,0,0,0,,And then let me do this.
Dialogue: 0,1:41:00.15,1:41:01.29,中文,,0,0,0,,然后我这样做。
Dialogue: 0,1:41:01.29,1:41:04.71,英文,,0,0,0,,And here's where Python gets pleasant, too, with loops.
Dialogue: 0,1:41:01.29,1:41:04.71,中文,,0,0,0,,这就是 python 的循环也令人愉快的地方。
Dialogue: 0,1:41:04.71,1:41:12.92,英文,,0,0,0,,For c in before, print c dot upper, end equals quote unquote, and then I'll print this here.
Dialogue: 0,1:41:04.71,1:41:12.92,中文,,0,0,0,,对于 before 中的每个字符 c，打印 c.upper，end 等于引号，然后我会在这里打印。
Dialogue: 0,1:41:12.92,1:41:14.04,英文,,0,0,0,,All right, that was fast.
Dialogue: 0,1:41:12.92,1:41:14.04,中文,,0,0,0,,这很快。
Dialogue: 0,1:41:14.04,1:41:16.04,英文,,0,0,0,,But let's try to infer what's going on.
Dialogue: 0,1:41:14.04,1:41:16.04,中文,,0,0,0,,但让我们试着推断发生了什么。
Dialogue: 0,1:41:16.04,1:41:19.72,英文,,0,0,0,,So line 1 just gets input from the user, stores it in a variable called before.
Dialogue: 0,1:41:16.04,1:41:19.72,中文,,0,0,0,,第一行只是从用户那里获取输入，并将其存储在名为 before 的变量中。
Dialogue: 0,1:41:19.72,1:41:25.46,英文,,0,0,0,,Line 2 literally just prints after, but doesn't move the cursor to the next line.
Dialogue: 0,1:41:19.72,1:41:25.46,中文,,0,0,0,,第二行实际上只是打印 after，但不会将光标移动到下一行。
Dialogue: 0,1:41:25.46,1:41:27.42,英文,,0,0,0,,What it then does is this.
Dialogue: 0,1:41:25.46,1:41:27.42,中文,,0,0,0,,它的作用是这样。
Dialogue: 0,1:41:27.42,1:41:30.11,英文,,0,0,0,,And in C, this was a little more annoying.
Dialogue: 0,1:41:27.42,1:41:30.11,中文,,0,0,0,,在 C 语言中，这有点烦人。
Dialogue: 0,1:41:30.11,1:41:35.19,英文,,0,0,0,,You needed a for loop with i. You needed array notation with the square brackets.
Dialogue: 0,1:41:30.11,1:41:35.19,中文,,0,0,0,,你需要一个带 i 的 for 循环。你需要用方括号表示数组。
Dialogue: 0,1:41:35.19,1:41:47.16,英文,,0,0,0,,But Python, if you say for variable in string, so for C, for character in string, Python's going to automatically assign C to the first letter that the user types in.
Dialogue: 0,1:41:35.19,1:41:47.16,中文,,0,0,0,,但在 python 中，如果你写 `for variable in string`，比如 `for C in string`，python 会自动将 C 赋值为用户输入的第一个字母。
Dialogue: 0,1:41:47.16,1:41:51.77,英文,,0,0,0,,Then on the next iteration, the second letter, the third letter, and the fourth. So you don't need any square bracket notation.
Dialogue: 0,1:41:47.16,1:41:51.77,中文,,0,0,0,,然后在下一次迭代中，是第二个字母，第三个字母，以及第四个字母。所以你不需要任何方括号。
Dialogue: 0,1:41:51.77,1:41:59.09,英文,,0,0,0,,You just use C, and Python will do it for you and just hand you back, one at a time, each of the letters that the user has typed in.
Dialogue: 0,1:41:51.77,1:41:59.09,中文,,0,0,0,,你只需要使用 C，python 会为你完成这一切，并将用户输入的每个字母一次一个地交还给你。
Dialogue: 0,1:41:59.09,1:42:04.98,英文,,0,0,0,,So if I go back over here and I run, for instance, Python of uppercase dot pi,
Dialogue: 0,1:41:59.09,1:42:04.98,中文,,0,0,0,,所以如果我回到这里运行，比如 `python uppercase.py`，
Dialogue: 0,1:42:04.98,1:42:09.85,英文,,0,0,0,,And I'll type in, how about David, in all lowercase, and hit Enter.
Dialogue: 0,1:42:04.98,1:42:09.85,中文,,0,0,0,,我会输入，比如 David，全部小写，然后按回车键。
Dialogue: 0,1:42:09.85,1:42:15.55,英文,,0,0,0,,You'll now see that it's all uppercase, instead, by iterating over it, indeed, one character at a time.
Dialogue: 0,1:42:09.85,1:42:15.55,中文,,0,0,0,,你会看到现在它变成了全部大写，确实是通过一次一个字符地迭代。
Dialogue: 0,1:42:15.55,1:42:24.26,英文,,0,0,0,,But we already know, thanks to object-oriented programming, strings themselves have the functionality built in to not just uppercase single characters, but the whole string.
Dialogue: 0,1:42:15.55,1:42:24.26,中文,,0,0,0,,但我们已经知道，由于面向对象编程，字符串本身就内置了将单个字符、甚至是整个字符串转换为大写的功能。
Dialogue: 0,1:42:24.26,1:42:28.62,英文,,0,0,0,,So honestly, this was a bit of a silly exercise. I don't need to use.
Dialogue: 0,1:42:24.26,1:42:28.62,中文,,0,0,0,,所以说实话，这有点傻。我不需要使用
Dialogue: 0,1:42:28.62,1:42:36.31,英文,,0,0,0,,a loop anymore like in C. And so some of the habits you've only just developed in recent weeks, it's time to start breaking them when they're not necessary.
Dialogue: 0,1:42:28.62,1:42:36.31,中文,,0,0,0,,像 C 语言中那样的循环了。所以你在最近几周才养成的一些习惯，在不需要的时候就该开始改掉了。
Dialogue: 0,1:42:36.31,1:42:43.78,英文,,0,0,0,,I can create a variable called after, set it equal to before dot upper, which indeed exists, just like dot lower exists.
Dialogue: 0,1:42:36.31,1:42:43.78,中文,,0,0,0,,我可以创建一个名为 `after` 的变量，将其设置为等于 `before.upper`，它确实存在，就像 `.lower` 存在一样。
Dialogue: 0,1:42:43.78,1:42:54.03,英文,,0,0,0,,And then what I can go ahead and print out is, for instance, let's get rid of this print line here and do it at the end, after. And print the value of that variable.
Dialogue: 0,1:42:43.78,1:42:54.03,中文,,0,0,0,,然后我可以继续打印出来，比如，让我们去掉这里的打印行，把它放在最后，`after`。并打印该变量的值。
Dialogue: 0,1:42:54.03,1:43:01.57,英文,,0,0,0,,So now if I rerun uppercase.py, type in David in all lowercase, I can just uppercase the whole thing all at once.
Dialogue: 0,1:42:54.03,1:43:01.57,中文,,0,0,0,,所以现在如果我重新运行 `uppercase.py`，输入小写的 david，我可以一次性将整个字符串转换为大写。
Dialogue: 0,1:43:01.57,1:43:07.57,英文,,0,0,0,,Because again, in Python, you don't have to operate on characters individually.
Dialogue: 0,1:43:01.57,1:43:07.57,中文,,0,0,0,,因为同样，在 python 中，你不必单独对字符进行操作。
Dialogue: 0,1:43:07.57,1:43:14.14,英文,,0,0,0,,Questions on any of these tricks up until now?
Dialogue: 0,1:43:07.57,1:43:14.14,中文,,0,0,0,,到目前为止，对这些技巧有什么问题吗？
Dialogue: 0,1:43:14.14,1:43:18.42,英文,,0,0,0,,All right, how about a few other techniques that we saw in C that we'll bring back now in Python?
Dialogue: 0,1:43:14.14,1:43:18.42,中文,,0,0,0,,我们来看看在 C 语言中看到的一些其他技巧，现在我们将在 python 中使用它们。
Dialogue: 0,1:43:18.42,1:43:24.69,英文,,0,0,0,,So it turns out in Python, there are other libraries you can use, too, that unlock even more functionality.
Dialogue: 0,1:43:18.42,1:43:24.69,中文,,0,0,0,,事实证明，在 python 中，你也可以使用其他库，它们可以解锁更多功能。
Dialogue: 0,1:43:24.69,1:43:39.54,英文,,0,0,0,,So in C, if you wanted command line arguments, you just change the signature for main to be void, instead of void, to be int argc, comma, String argv, open brackets for an array, or char star, eventually.
Dialogue: 0,1:43:24.69,1:43:39.54,中文,,0,0,0,,所以在 C 语言中，如果你想要命令行参数，你只需要将 `main` 的签名从 `void` 改为 `int argc, char *argv[]`，或者最终是 `char **argv`。
Dialogue: 0,1:43:39.54,1:43:43.52,英文,,0,0,0,,Well, it turns out in Python that if you want to access command line arguments, it's a little simpler.
Dialogue: 0,1:43:39.54,1:43:43.52,中文,,0,0,0,,事实证明，如果你想在 python 中访问命令行参数，会更简单一些。
Dialogue: 0,1:43:43.52,1:43:49.64,英文,,0,0,0,,But they're tucked away in a library, otherwise known as a module, called sys, the sys or system module.
Dialogue: 0,1:43:43.52,1:43:49.64,中文,,0,0,0,,但它们隐藏在一个库中，也称为模块，叫做 `sys`，即 `sys` 或系统模块。
Dialogue: 0,1:43:49.64,1:43:53.78,英文,,0,0,0,,Now, this is similar in spirit to the CS50 library in that it's got a bunch of functionality built in.
Dialogue: 0,1:43:49.64,1:43:53.78,中文,,0,0,0,,这在精神上类似于 cs50 库，因为它内置了许多功能。
Dialogue: 0,1:43:53.78,1:43:56.16,英文,,0,0,0,,But this one comes with Python itself.
Dialogue: 0,1:43:53.78,1:43:56.16,中文,,0,0,0,,但这个是 python 自带的。
Dialogue: 0,1:43:56.16,1:44:02.12,英文,,0,0,0,,So if I want to create a program like greet.py in VS Code here, let me go ahead and do this.
Dialogue: 0,1:43:56.16,1:44:02.12,中文,,0,0,0,,所以如果我想在 VS Code 中创建一个像 `greet.py` 这样的程序，让我来演示一下。
Dialogue: 0,1:44:02.12,1:44:06.05,英文,,0,0,0,,From the sys library, let's import argv.
Dialogue: 0,1:44:02.12,1:44:06.05,中文,,0,0,0,,从 `sys` 库中，导入 `argv`。
Dialogue: 0,1:44:06.05,1:44:07.79,英文,,0,0,0,,And that's just a thing that exists.
Dialogue: 0,1:44:06.05,1:44:07.79,中文,,0,0,0,,它就是一个已经存在的东西。
Dialogue: 0,1:44:07.79,1:44:10.81,英文,,0,0,0,,It's not built into main, because there is no main, per se, anymore.
Dialogue: 0,1:44:07.79,1:44:10.81,中文,,0,0,0,,它没有内置在 `main` 中，因为本质上不再有 `main` 函数了。
Dialogue: 0,1:44:10.81,1:44:12.65,英文,,0,0,0,,So it's tucked away in that library.
Dialogue: 0,1:44:10.81,1:44:12.65,中文,,0,0,0,,所以它被藏在那个库里。
Dialogue: 0,1:44:12.65,1:44:14.35,英文,,0,0,0,,And now I can do something like this.
Dialogue: 0,1:44:12.65,1:44:14.35,中文,,0,0,0,,现在我可以做这样的事情。
Dialogue: 0,1:44:14.35,1:44:17.11,英文,,0,0,0,,If the length of argv equals equals 2,
Dialogue: 0,1:44:14.35,1:44:17.11,中文,,0,0,0,,如果 `argv` 的长度等于 2，
Dialogue: 0,1:44:17.11,1:44:25.62,英文,,0,0,0,,Well, let's go ahead and print out something friendly like hello, comma, argv bracket 1, and then close quotes.
Dialogue: 0,1:44:17.11,1:44:25.62,中文,,0,0,0,,那么，让我们打印出一句友好的问候，比如 `hello,`，逗号，`argv[1]`，然后是引号。
Dialogue: 0,1:44:25.62,1:44:30.81,英文,,0,0,0,,Else, if the length of argv is not equal to 2, let's just go ahead and print out hello world.
Dialogue: 0,1:44:25.62,1:44:30.81,中文,,0,0,0,,否则，如果 `argv` 的长度不等于 2，我们就打印 `hello world`。
Dialogue: 0,1:44:30.81,1:44:35.17,英文,,0,0,0,,Now, at a glance, this might look a little cryptic, but it's identical to what we did a few weeks ago.
Dialogue: 0,1:44:30.81,1:44:35.17,中文,,0,0,0,,乍一看，这可能有点难懂，但这与我们几周前做的事情是一样的。
Dialogue: 0,1:44:35.17,1:44:41.54,英文,,0,0,0,,When I run this Python of greet.py with no arguments, it just says hello world.
Dialogue: 0,1:44:35.17,1:44:41.54,中文,,0,0,0,,当我运行这个不带参数的 `python greet.py` 时，它只会显示 `hello world`。
Dialogue: 0,1:44:41.54,1:44:50.12,英文,,0,0,0,,But if I instead add a command line argument, like my first name, and hit Enter, now the length of argv is no longer 1.
Dialogue: 0,1:44:41.54,1:44:50.12,中文,,0,0,0,,但是，如果我添加一个命令行参数，比如我的名字，然后按下回车键，现在 `argv` 的长度就不再是 1 了。
Dialogue: 0,1:44:50.12,1:44:51.97,英文,,0,0,0,,It's going to be 2.
Dialogue: 0,1:44:50.12,1:44:51.97,中文,,0,0,0,,它将是 2。
Dialogue: 0,1:44:51.97,1:44:54.83,英文,,0,0,0,,And so it prints out, hello, David, instead.
Dialogue: 0,1:44:51.97,1:44:54.83,中文,,0,0,0,,所以它会打印出 `hello, David`。
Dialogue: 0,1:44:54.83,1:45:07.94,英文,,0,0,0,,So the takeaway here is that, whereas in C, argv technically contained the name of your program, like dot slash hello or dot slash greet, and then everything the human typed, Python's a little different in that
Dialogue: 0,1:44:54.83,1:45:07.94,中文,,0,0,0,,所以这里的重点是，在 C 语言中，`argv` 从技术上包含了程序的名称，\N比如 `./hello` 或 `./greet`，以及用户输入的所有内容，而 python 有点不同，
Dialogue: 0,1:45:07.94,1:45:16.54,英文,,0,0,0,,Because we're using the interpreter in this way, technically, when you run Python of greet.py, the length of argv is only one.
Dialogue: 0,1:45:07.94,1:45:16.54,中文,,0,0,0,,因为我们是以这种方式使用解释器的，从技术上讲，当你运行 `python greet.py` 时，`argv` 的长度只有 1。
Dialogue: 0,1:45:16.54,1:45:18.22,英文,,0,0,0,,It contains only greet.py.
Dialogue: 0,1:45:16.54,1:45:18.22,中文,,0,0,0,,它只包含 greet.py。
Dialogue: 0,1:45:18.22,1:45:24.66,英文,,0,0,0,,So the name of the file, it does not unnecessarily contain Python itself, because what's the point of that being there omnipresently?
Dialogue: 0,1:45:18.22,1:45:24.66,中文,,0,0,0,,文件名中没有必要包含 python 本身，因为总写它有什么意义呢？
Dialogue: 0,1:45:24.66,1:45:28.68,英文,,0,0,0,,It does contain the number of words that the human typed after. Python itself.
Dialogue: 0,1:45:24.66,1:45:28.68,中文,,0,0,0,,它确实包含了用户在 python 后面输入的word数量。
Dialogue: 0,1:45:28.68,1:45:32.39,英文,,0,0,0,,So argv is length 1 here, argv is length 2 here.
Dialogue: 0,1:45:28.68,1:45:32.39,中文,,0,0,0,,所以这里 argv 的长度是 1，这里 argv 的长度是 2。
Dialogue: 0,1:45:32.39,1:45:37.41,英文,,0,0,0,,And that's why when it did equal 2, I saw hello, David instead of the default hello, world.
Dialogue: 0,1:45:32.39,1:45:37.41,中文,,0,0,0,,这就是为什么当它等于 2 时，我看到的是 hello, David，而不是默认的 hello, world。
Dialogue: 0,1:45:37.41,1:45:42.25,英文,,0,0,0,,So same ability to access command line arguments, add these kinds of inputs to your functions.
Dialogue: 0,1:45:37.41,1:45:42.25,中文,,0,0,0,,所以同样可以通过命令行参数，将这些输入添加到函数中。
Dialogue: 0,1:45:42.25,1:45:47.96,英文,,0,0,0,,But you have to unlock it by way of using argv instead in this way.
Dialogue: 0,1:45:42.25,1:45:47.96,中文,,0,0,0,,但你必须通过这种方式使用 argv 来解锁它。
Dialogue: 0,1:45:47.96,1:45:52.68,英文,,0,0,0,,If you want to see all of the words, you could do something like this.
Dialogue: 0,1:45:47.96,1:45:52.68,中文,,0,0,0,,如果你想看到所有的words，你可以这样做。
Dialogue: 0,1:45:52.68,1:46:08.71,英文,,0,0,0,,If we combine ideas here, for i in range of, how about length of argv, then I can do this, print argv bracket i. All right, a little cryptic, but line 3 is just a for loop iterating over the range of length of argv.
Dialogue: 0,1:45:52.68,1:46:08.71,中文,,0,0,0,,如果我们将这里的想法结合起来，对于范围内的 i，argv 的长度如何，\N然后我可以这样做，打印 argv 中括号 i。有点难懂，但第 3 行只是一个 for 循环，遍历 argv 长度的范围。
Dialogue: 0,1:46:08.71,1:46:12.83,英文,,0,0,0,,So if the human types in two words, the length of argv will be 2.
Dialogue: 0,1:46:08.71,1:46:12.83,中文,,0,0,0,,所以如果用户输入两个words，argv 的长度将是 2。
Dialogue: 0,1:46:12.83,1:46:18.29,英文,,0,0,0,,So this is just a way of saying iterate over all of the words in argv, printing them one at a time.
Dialogue: 0,1:46:12.83,1:46:18.29,中文,,0,0,0,,所以这只是一个说法，遍历 argv 中的所有words，一次打印一个。
Dialogue: 0,1:46:18.29,1:46:21.07,英文,,0,0,0,,So Python of greet.py, Enter.
Dialogue: 0,1:46:18.29,1:46:21.07,中文,,0,0,0,,所以 python greet.py，回车。
Dialogue: 0,1:46:21.07,1:46:22.89,英文,,0,0,0,,Just prints out the name of the program.
Dialogue: 0,1:46:21.07,1:46:22.89,中文,,0,0,0,,只打印出程序的名称。
Dialogue: 0,1:46:22.89,1:46:27.42,英文,,0,0,0,,Python of greet.py with David prints out greet.py and then David.
Dialogue: 0,1:46:22.89,1:46:27.42,中文,,0,0,0,,python greet.py with David 打印出 greet.py，然后是 David。
Dialogue: 0,1:46:27.42,1:46:32.82,英文,,0,0,0,,I can keep running it, though, with more words, and they'll each get printed one at a time.
Dialogue: 0,1:46:27.42,1:46:32.82,中文,,0,0,0,,我可以继续运行它，不过，使用更多的words，它们将被一个接一个地打印出来。
Dialogue: 0,1:46:32.82,1:46:38.91,英文,,0,0,0,,But what's nice, too, about Python, and this is the point of this exercise, honestly, this looks pretty cryptic.
Dialogue: 0,1:46:32.82,1:46:38.91,中文,,0,0,0,,但 python 的妙处在于，老实说，这也是本练习的意义所在，这看起来相当难懂。
Dialogue: 0,1:46:38.91,1:46:40.89,英文,,0,0,0,,This is not very pleasant to look at.
Dialogue: 0,1:46:38.91,1:46:40.89,中文,,0,0,0,,这看起来不太舒服。
Dialogue: 0,1:46:40.89,1:46:47.81,英文,,0,0,0,,If you just want to iterate over every word in a list, which argv is, watch what I can do.
Dialogue: 0,1:46:40.89,1:46:47.81,中文,,0,0,0,,如果你只是想遍历列表中的每个word，也就是 argv，看看我能做什么。
Dialogue: 0,1:46:47.81,1:46:54.64,英文,,0,0,0,,I can do for arg, or any variable name, in argv, let me just now print out that argument.
Dialogue: 0,1:46:47.81,1:46:54.64,中文,,0,0,0,,我可以对 argv 中的 arg 或任何变量名执行此操作，现在让我打印出该参数。
Dialogue: 0,1:46:54.64,1:46:59.86,英文,,0,0,0,,I could keep calling it i, but i seems weird when it's not a number. So I'm changing to arg as a word instead.
Dialogue: 0,1:46:54.64,1:46:59.86,中文,,0,0,0,,我可以继续称它为 i，但当它不是数字时，i 看起来很奇怪。所以我把它改成了 arg 这个词。
Dialogue: 0,1:46:59.86,1:47:04.20,英文,,0,0,0,,If I now do python of greet.py, it does this.
Dialogue: 0,1:46:59.86,1:47:04.20,中文,,0,0,0,,如果我现在运行 python greet.py，它会这样显示。
Dialogue: 0,1:47:04.20,1:47:06.86,英文,,0,0,0,,If I do Python of greet.py David, it does that again.
Dialogue: 0,1:47:04.20,1:47:06.86,中文,,0,0,0,,如果我运行 python greet.py David，它还是这样显示。
Dialogue: 0,1:47:06.86,1:47:08.76,英文,,0,0,0,,David Malan, it does that again.
Dialogue: 0,1:47:06.86,1:47:08.76,中文,,0,0,0,,David Malan，它还是这样显示。
Dialogue: 0,1:47:08.76,1:47:11.10,英文,,0,0,0,,So this is, again, why Python is just very appealing.
Dialogue: 0,1:47:08.76,1:47:11.10,中文,,0,0,0,,所以这就是 python 吸引人的地方。
Dialogue: 0,1:47:11.10,1:47:14.15,英文,,0,0,0,,You want to do something this many times, iterate over a list, just say it.
Dialogue: 0,1:47:11.10,1:47:14.15,中文,,0,0,0,,你想循环这么多次，遍历一个列表，就这么说。
Dialogue: 0,1:47:14.15,1:47:15.95,英文,,0,0,0,,And it reads a little more like English.
Dialogue: 0,1:47:14.15,1:47:15.95,中文,,0,0,0,,它的可读性更像英语。
Dialogue: 0,1:47:15.95,1:47:18.23,英文,,0,0,0,,And there's even other fanciness, too, if I may.
Dialogue: 0,1:47:15.95,1:47:18.23,中文,,0,0,0,,我还可以展示其他更有趣的功能。
Dialogue: 0,1:47:18.23,1:47:22.09,英文,,0,0,0,,It's a little stupid that I keep seeing the name of the program, greet.py.
Dialogue: 0,1:47:18.23,1:47:22.09,中文,,0,0,0,,我一直看到程序的名字 greet.py，这有点蠢。
Dialogue: 0,1:47:22.09,1:47:24.73,英文,,0,0,0,,So it'd be nice if I could remove that.
Dialogue: 0,1:47:22.09,1:47:24.73,中文,,0,0,0,,所以如果我能把它去掉就好了。
Dialogue: 0,1:47:24.73,1:47:29.30,英文,,0,0,0,,Python also supports what are called slices of arrays.
Dialogue: 0,1:47:24.73,1:47:29.30,中文,,0,0,0,,python 还支持数组切片。
Dialogue: 0,1:47:29.30,1:47:32.68,英文,,0,0,0,,Sorry, slices of lists, even though I get the terminology confused.
Dialogue: 0,1:47:29.30,1:47:32.68,中文,,0,0,0,,抱歉，是列表切片，我把术语搞混了。
Dialogue: 0,1:47:32.68,1:47:36.68,英文,,0,0,0,,If argv is a list. then it's going to print out everything in it.
Dialogue: 0,1:47:32.68,1:47:36.68,中文,,0,0,0,,如果 argv 是一个列表，那么它会打印出其中的所有内容。
Dialogue: 0,1:47:36.68,1:47:50.56,英文,,0,0,0,,But if I want a slice of it that starts at location 1 all the way to the end, you can use this funky syntax in between the square brackets, which we've not seen yet, that's going to start at item 1 and go all the way to the end.
Dialogue: 0,1:47:36.68,1:47:50.56,中文,,0,0,0,,但如果我想要从位置 1 开始一直到结束的切片，可以使用方括号之间的语法，我们之前没有见过，它将从第 1 个元素开始一直到结束。
Dialogue: 0,1:47:50.56,1:47:55.88,英文,,0,0,0,,And so this is a nice, clever way of slicing off, if you will, the very first element.
Dialogue: 0,1:47:50.56,1:47:55.88,中文,,0,0,0,,所以这是一个很好的方法，可以切掉第一个元素。
Dialogue: 0,1:47:55.88,1:48:02.07,英文,,0,0,0,,Because now when I run greet.py David Malan, I should only see David and Malin.
Dialogue: 0,1:47:55.88,1:48:02.07,中文,,0,0,0,,因为现在当我运行 greet.py David Malan 时，我应该只会看到 David 和 Malan。
Dialogue: 0,1:48:02.07,1:48:05.39,英文,,0,0,0,,If I only want one element, I could do 1 to 2.
Dialogue: 0,1:48:02.07,1:48:05.39,中文,,0,0,0,,如果我只想要一个元素，我可以输入 1 到 2。
Dialogue: 0,1:48:05.39,1:48:08.37,英文,,0,0,0,,If I want all of them, I could do 0 onward.
Dialogue: 0,1:48:05.39,1:48:08.37,中文,,0,0,0,,如果我想要所有元素，我可以输入 0 开始。
Dialogue: 0,1:48:08.37,1:48:17.16,英文,,0,0,0,,I could give myself just one of them in this way so you can play with the start value and the end value in this way to sort of slice and dice these lists in different ways.
Dialogue: 0,1:48:08.37,1:48:17.16,中文,,0,0,0,,我可以通过这种方式只获取其中一个元素，所以你可以用这种方式来调整起始值和结束值，以不同的方式对列表进行切片。
Dialogue: 0,1:48:17.16,1:48:27.31,英文,,0,0,0,,That would have been a pain in C just because we didn't really have the built-in support for manipulating arrays as cleanly as this.
Dialogue: 0,1:48:17.16,1:48:27.31,中文,,0,0,0,,这在 C 语言中会很麻烦，因为我们没有内置支持来像这样干净地操作数组。
Dialogue: 0,1:48:27.31,1:48:36.30,英文,,0,0,0,,All right, just so you've seen it too, though this one is less exciting to see live, if I go ahead and create a quick program here,
Dialogue: 0,1:48:27.31,1:48:36.30,中文,,0,0,0,,为了让大家也了解一下，虽然这个例子现场演示不太有趣，如果我继续创建一个简单的程序，你会发现 sys 库中还有另一个功能，
Dialogue: 0,1:48:36.30,1:48:43.30,英文,,0,0,0,,it turns out there's something else in the sys library, the ability to exit programs, either exiting with status code 1 or 0, as we've been doing any time something goes right or wrong.
Dialogue: 0,1:48:36.30,1:48:43.30,中文,,0,0,0,,可以退出程序，可以使用状态码 1 或 0 退出，就像我们一直在处理任何正确或错误的事情一样。
Dialogue: 0,1:48:43.30,1:48:55.18,英文,,0,0,0,,So for instance, let me whip up a quick program that just says, if the length of sys.argv does not equal 2, then let's yell at the user and say, you're missing a command line argument.
Dialogue: 0,1:48:43.30,1:48:55.18,中文,,0,0,0,,例如，我快速编写一个程序，如果 sys.argv 的长度不等于 2，就提示用户说“缺少命令行参数”。
Dialogue: 0,1:48:55.18,1:49:01.94,英文,,0,0,0,,Otherwise, command line argument, and let's then return sys.exit 1.
Dialogue: 0,1:48:55.18,1:49:01.94,中文,,0,0,0,,否则，就输出命令行参数，然后返回 sys.exit 1。
Dialogue: 0,1:49:01.94,1:49:09.80,英文,,0,0,0,,Else, let's go ahead and logically just say print a formatted string that says, hello, as before, sys.argv 1.
Dialogue: 0,1:49:01.94,1:49:09.80,中文,,0,0,0,,否则，就打印一个格式化的字符串，像之前一样输出“hello”和 sys.argv 1。
Dialogue: 0,1:49:09.80,1:49:13.30,英文,,0,0,0,,Now, things look different all of a sudden, but I'm doing something deliberately.
Dialogue: 0,1:49:09.80,1:49:13.30,中文,,0,0,0,,现在看起来有所不同，但我这样做是故意的。
Dialogue: 0,1:49:13.30,1:49:18.75,英文,,0,0,0,,First, let's see what this does. So on line 1, I'm importing not argv specifically.
Dialogue: 0,1:49:13.30,1:49:18.75,中文,,0,0,0,,首先，我们来看看它的作用，在第一行，我没有单独导入 argv。
Dialogue: 0,1:49:18.75,1:49:20.73,英文,,0,0,0,,I'm importing the whole sys library.
Dialogue: 0,1:49:18.75,1:49:20.73,中文,,0,0,0,,而是导入了整个 sys 库。
Dialogue: 0,1:49:20.73,1:49:22.25,英文,,0,0,0,,And we'll see why in a second.
Dialogue: 0,1:49:20.73,1:49:22.25,中文,,0,0,0,,我们马上就知道原因。
Dialogue: 0,1:49:22.25,1:49:27.39,英文,,0,0,0,,Well, it turns out that the sys library has not only the argv list.
Dialogue: 0,1:49:22.25,1:49:27.39,中文,,0,0,0,,事实证明，sys 库不仅有 argv 列表。
Dialogue: 0,1:49:27.39,1:49:31.50,英文,,0,0,0,,It also has a function called exit, which I'd like to be able to use as well.
Dialogue: 0,1:49:27.39,1:49:31.50,中文,,0,0,0,,它还有一个名为 exit 的函数，我也想使用它。
Dialogue: 0,1:49:31.50,1:49:35.78,英文,,0,0,0,,So it turns out that if you import a whole library in this way, that's fine.
Dialogue: 0,1:49:31.50,1:49:35.78,中文,,0,0,0,,事实证明，如果以这种方式导入整个库是可以的。
Dialogue: 0,1:49:35.78,1:49:40.70,英文,,0,0,0,,But you have to refer to the things inside of it by using that same library's name and a dot.
Dialogue: 0,1:49:35.78,1:49:40.70,中文,,0,0,0,,但是你必须使用相同的库名和一个点来引用它里面的东西。
Dialogue: 0,1:49:40.70,1:49:43.08,英文,,0,0,0,,It's a sort of namespace, so to speak.
Dialogue: 0,1:49:40.70,1:49:43.08,中文,,0,0,0,,可以说，这是一个命名空间。
Dialogue: 0,1:49:43.08,1:49:49.94,英文,,0,0,0,,So here, I'm just saying, if the user does not type in two words, yell at them with missing command line argument, and then exit with one.
Dialogue: 0,1:49:43.08,1:49:49.94,中文,,0,0,0,,所以在这里，我的意思是，如果用户没有输入两个词，就提示他们“缺少命令行参数”，然后用 1 退出。
Dialogue: 0,1:49:49.94,1:49:53.49,英文,,0,0,0,,Just like in C, when you do exit one, it just means something went wrong.
Dialogue: 0,1:49:49.94,1:49:53.49,中文,,0,0,0,,就像在 C 语言中，当你执行 exit 1 时，就意味着出现了错误。
Dialogue: 0,1:49:53.49,1:49:55.31,英文,,0,0,0,,Otherwise, print out hello to this.
Dialogue: 0,1:49:53.49,1:49:55.31,中文,,0,0,0,,否则，就打印“hello”和这个。
Dialogue: 0,1:49:55.31,1:49:58.31,英文,,0,0,0,,And this is starting to look cryptic, but it's just a combination of ideas.
Dialogue: 0,1:49:55.31,1:49:58.31,中文,,0,0,0,,这看起来开始变得难以理解了，但这只是一个组合。
Dialogue: 0,1:49:58.31,1:50:02.35,英文,,0,0,0,,The curly braces means interpolate this value, plug it in here.
Dialogue: 0,1:49:58.31,1:50:02.35,中文,,0,0,0,,花括号表示插入这个值，把它插在这里。
Dialogue: 0,1:50:02.35,1:50:09.21,英文,,0,0,0,,sys.argv is just the verbose way of saying, go into the sys library and get the argv variable therein.
Dialogue: 0,1:50:02.35,1:50:09.21,中文,,0,0,0,,sys.argv 只是进入 sys 库并获取其中的 argv 变量的冗长说法。
Dialogue: 0,1:50:09.21,1:50:15.60,英文,,0,0,0,,And bracket 1, of course, just like arrays in C, is just the second element at the prompt.
Dialogue: 0,1:50:09.21,1:50:15.60,中文,,0,0,0,,当然，方括号 1 就像 C 语言中的数组一样，只是提示符的第二个元素。
Dialogue: 0,1:50:15.60,1:50:21.64,英文,,0,0,0,,So when I run this version now, Python of exit.py, with no arguments, I get yelled at in this way.
Dialogue: 0,1:50:15.60,1:50:21.64,中文,,0,0,0,,所以当我运行这个版本时，使用 python 运行 exit.py，不带任何参数，就会得到这样的提示。
Dialogue: 0,1:50:21.64,1:50:29.42,英文,,0,0,0,,If, however, I type in two arguments total, the name of the file and my own name, now I get greeted with, Hello, David.
Dialogue: 0,1:50:21.64,1:50:29.42,中文,,0,0,0,,但是，如果我总共输入两个参数，文件名和我自己的名字，现在我会看到 Hello, David。
Dialogue: 0,1:50:29.42,1:50:30.56,英文,,0,0,0,,And it's the same idea before.
Dialogue: 0,1:50:29.42,1:50:30.56,中文,,0,0,0,,和之前是同样的概念。
Dialogue: 0,1:50:30.56,1:50:33.24,英文,,0,0,0,,This was a very low-level technique, but same thing here.
Dialogue: 0,1:50:30.56,1:50:33.24,中文,,0,0,0,,这是一个非常底层的技术，但这里也是一样的。
Dialogue: 0,1:50:33.24,1:50:35.18,英文,,0,0,0,,If you do echo $?
Dialogue: 0,1:50:33.24,1:50:35.18,中文,,0,0,0,,如果你输入 echo $?
Dialogue: 0,1:50:35.18,1:50:39.28,英文,,0,0,0,,Enter, you'll see the exit code of your program.
Dialogue: 0,1:50:35.18,1:50:39.28,中文,,0,0,0,,回车，你会看到程序的退出代码。
Dialogue: 0,1:50:39.28,1:50:45.12,英文,,0,0,0,,So if I do this incorrectly again, let me rerun it without my name, Enter, I get yelled at.
Dialogue: 0,1:50:39.28,1:50:45.12,中文,,0,0,0,,所以如果我再错误地执行它，让我在没有输入名字的情况下重新运行它，回车，我被骂了。
Dialogue: 0,1:50:45.12,1:50:50.61,英文,,0,0,0,,But if I do echo $?, there's the secret 1 that's returned.
Dialogue: 0,1:50:45.12,1:50:50.61,中文,,0,0,0,,但如果我输入 echo $?，就会返回那个秘密的 1。
Dialogue: 0,1:50:50.61,1:50:54.31,英文,,0,0,0,,Again, just to show you parity with C in this case.
Dialogue: 0,1:50:50.61,1:50:54.31,中文,,0,0,0,,同样，只是为了让你看到在这种情况下与 C 语言的对应关系。
Dialogue: 0,1:50:54.31,1:50:59.91,英文,,0,0,0,,Questions now on any of these techniques here?
Dialogue: 0,1:50:54.31,1:50:59.91,中文,,0,0,0,,现在对这里的任何一种技术有问题吗？
Dialogue: 0,1:50:59.91,1:51:02.77,英文,,0,0,0,,All right, how about something that's a little more powerful, too?
Dialogue: 0,1:50:59.91,1:51:02.77,中文,,0,0,0,,那再来点更强大的东西怎么样？
Dialogue: 0,1:51:02.77,1:51:07.89,英文,,0,0,0,,We spent so much time in week 0 and 1 doing searching and then eventually sorting in week 3.
Dialogue: 0,1:51:02.77,1:51:07.89,中文,,0,0,0,,我们在第 0 周和第 1 周花了大量时间进行搜索，然后在第 3 周最终进行了排序。
Dialogue: 0,1:51:07.89,1:51:10.09,英文,,0,0,0,,Well, it turns out Python can help with some of this, too.
Dialogue: 0,1:51:07.89,1:51:10.09,中文,,0,0,0,,事实证明，python 也可以帮助我们完成其中的一些工作。
Dialogue: 0,1:51:10.09,1:51:16.77,英文,,0,0,0,,Let me go ahead and create a program called names.py that's just going to be an opportunity to maybe search over a whole bunch of names.
Dialogue: 0,1:51:10.09,1:51:16.77,中文,,0,0,0,,让我继续创建一个名为 names.py 的程序，它将提供一个机会，也许可以搜索一大堆名字。
Dialogue: 0,1:51:16.77,1:51:19.09,英文,,0,0,0,,Let me go ahead and import sys.
Dialogue: 0,1:51:16.77,1:51:19.09,中文,,0,0,0,,让我继续导入 sys。
Dialogue: 0,1:51:19.09,1:51:27.12,英文,,0,0,0,,And then, just so I have access to exit, and let me go ahead and create a variable called names that's going to be a list with a whole bunch of names.
Dialogue: 0,1:51:19.09,1:51:27.12,中文,,0,0,0,,为了让我能够使用 exit，让我继续创建一个名为 names 的变量，它将是一个包含一大堆名字的列表。
Dialogue: 0,1:51:27.12,1:51:27.94,英文,,0,0,0,,How about here?
Dialogue: 0,1:51:27.12,1:51:27.94,中文,,0,0,0,,这里怎么样？
Dialogue: 0,1:51:27.94,1:51:34.77,英文,,0,0,0,,Charlie, and Fred, and George, and Ginny, and Percy, and lastly, Ron.
Dialogue: 0,1:51:27.94,1:51:34.77,中文,,0,0,0,,Charlie、Fred、George、Ginny、Percy，最后是 Ron。
Dialogue: 0,1:51:34.77,1:51:36.55,英文,,0,0,0,,So a whole bunch of names here.
Dialogue: 0,1:51:34.77,1:51:36.55,中文,,0,0,0,,这里有一大堆名字。
Dialogue: 0,1:51:36.55,1:51:43.92,英文,,0,0,0,,And it would be a little annoying to implement code that iterates over that from left to right and see searching for, One of those names. In fact, what name?
Dialogue: 0,1:51:36.55,1:51:43.92,中文,,0,0,0,,实现代码来从左到右遍历它并搜索其中一个名字会有点烦人。事实上，要搜索哪个名字呢？
Dialogue: 0,1:51:43.92,1:51:50.78,英文,,0,0,0,,Well, let's go ahead and ask the user to input the name that they want to search for so that we can tell them if the name is there or not.
Dialogue: 0,1:51:43.92,1:51:50.78,中文,,0,0,0,,让我们继续要求用户输入他们想要搜索的名字，以便我们可以告诉他们名字是否存在。
Dialogue: 0,1:51:50.78,1:51:54.75,英文,,0,0,0,,And we could do this similar to C in Python, doing something like this.
Dialogue: 0,1:51:50.78,1:51:54.75,中文,,0,0,0,,我们可以像 C 语言那样在 python 中实现类似的功能，像这样写。
Dialogue: 0,1:51:54.75,1:51:59.11,英文,,0,0,0,,So for n in names, where n is just a variable,
Dialogue: 0,1:51:54.75,1:51:59.11,中文,,0,0,0,,对于 names 中的 n，其中 n 只是一个变量，
Dialogue: 0,1:51:59.11,1:52:00.85,英文,,0,0,0,,to iterate over each name.
Dialogue: 0,1:51:59.11,1:52:00.85,中文,,0,0,0,,用来遍历每个名字。
Dialogue: 0,1:52:00.85,1:52:09.46,英文,,0,0,0,,If how about the name I'm looking for equals the current name in the list, a.k.a. n, well, let's print out something friendly like found.
Dialogue: 0,1:52:00.85,1:52:09.46,中文,,0,0,0,,如果我要找的名字等于列表中的当前名字，也就是 n，那么就打印 "found" 之类的提示信息。
Dialogue: 0,1:52:09.46,1:52:14.46,英文,,0,0,0,,And then let's do sys.exit0 to indicate that we found whoever that is.
Dialogue: 0,1:52:09.46,1:52:14.46,中文,,0,0,0,,然后使用 `sys.exit(0)` 表示我们找到了那个人。
Dialogue: 0,1:52:14.46,1:52:20.48,英文,,0,0,0,,Otherwise, if we get all the way to the bottom here outside of this loop, let's just print not found, because if we haven't exited yet.
Dialogue: 0,1:52:14.46,1:52:20.48,中文,,0,0,0,,否则，如果我们一直执行到循环外部的底部，就打印 "not found"，因为我们还没有退出。
Dialogue: 0,1:52:20.48,1:52:22.93,英文,,0,0,0,,And then let's just exit with 1.
Dialogue: 0,1:52:20.48,1:52:22.93,中文,,0,0,0,,然后使用 `exit(1)` 退出。
Dialogue: 0,1:52:22.93,1:52:26.77,英文,,0,0,0,,Just to be clear, I can continue importing all of sys.
Dialogue: 0,1:52:22.93,1:52:26.77,中文,,0,0,0,,需要说明的是，我可以继续导入 sys 的所有内容。
Dialogue: 0,1:52:26.77,1:52:30.55,英文,,0,0,0,,Or I could do from sys import exit.
Dialogue: 0,1:52:26.77,1:52:30.55,中文,,0,0,0,,或者我可以使用 `from sys import exit`。
Dialogue: 0,1:52:30.55,1:52:32.31,英文,,0,0,0,,And then I could get rid of sys.
Dialogue: 0,1:52:30.55,1:52:32.31,中文,,0,0,0,,然后我可以去掉 sys。
Dialogue: 0,1:52:32.31,1:52:33.43,英文,,0,0,0,,everywhere else.
Dialogue: 0,1:52:32.31,1:52:33.43,中文,,0,0,0,,在任何地方。
Dialogue: 0,1:52:33.43,1:52:36.81,英文,,0,0,0,,But sometimes it's helpful to know exactly where functions came from.
Dialogue: 0,1:52:33.43,1:52:36.81,中文,,0,0,0,,但有时知道函数的确切来源是很有帮助的。
Dialogue: 0,1:52:36.81,1:52:40.11,英文,,0,0,0,,So this, too, is just a matter of style in this case.
Dialogue: 0,1:52:36.81,1:52:40.11,中文,,0,0,0,,因此，在这种情况下，这也只是一个风格问题。
Dialogue: 0,1:52:40.11,1:52:44.09,英文,,0,0,0,,All right, so let's go ahead and run this. Python of names.py.
Dialogue: 0,1:52:40.11,1:52:44.09,中文,,0,0,0,,好了，让我们继续运行它。`python names.py`。
Dialogue: 0,1:52:44.09,1:52:46.93,英文,,0,0,0,,And let's look for Ron all the way at the end.
Dialogue: 0,1:52:44.09,1:52:46.93,中文,,0,0,0,,让我们在最后查找 Ron。
Dialogue: 0,1:52:46.93,1:52:48.01,英文,,0,0,0,,All right, he's found.
Dialogue: 0,1:52:46.93,1:52:48.01,中文,,0,0,0,,好的，找到了。
Dialogue: 0,1:52:48.01,1:52:52.11,英文,,0,0,0,,And let's search for someone outside of the family here, like Hermione.
Dialogue: 0,1:52:48.01,1:52:52.11,中文,,0,0,0,,让我们搜索一个家族以外的人，比如 Hermione。
Dialogue: 0,1:52:52.11,1:52:52.85,英文,,0,0,0,,Not found.
Dialogue: 0,1:52:52.11,1:52:52.85,中文,,0,0,0,,未找到。
Dialogue: 0,1:52:52.85,1:52:54.84,英文,,0,0,0,,OK, so it seems to be working in this way.
Dialogue: 0,1:52:52.85,1:52:54.84,中文,,0,0,0,,看来这样可行。
Dialogue: 0,1:52:54.84,1:52:59.07,英文,,0,0,0,,But I've essentially implemented what algorithm?
Dialogue: 0,1:52:54.84,1:52:59.07,中文,,0,0,0,,但我实际上实现了什么算法？
Dialogue: 0,1:52:59.07,1:53:01.93,英文,,0,0,0,,What algorithm would this seem to be?
Dialogue: 0,1:52:59.07,1:53:01.93,中文,,0,0,0,,这看起来像是什么算法？
Dialogue: 0,1:53:01.93,1:53:06.48,英文,,0,0,0,,Per lines 7, and 8, and 9, and 10.
Dialogue: 0,1:53:01.93,1:53:06.48,中文,,0,0,0,,根据第 7、8、9 和 10 行。
Dialogue: 0,1:53:06.48,1:53:10.50,英文,,0,0,0,,Yeah, so it's just linear search. It's a loop, even though the syntax is a little more succinct today.
Dialogue: 0,1:53:06.48,1:53:10.50,中文,,0,0,0,,是的，这就是线性搜索。这是一个循环，尽管现在的语法更简洁了。
Dialogue: 0,1:53:10.50,1:53:12.04,英文,,0,0,0,,And it's just iterating over the whole thing.
Dialogue: 0,1:53:10.50,1:53:12.04,中文,,0,0,0,,它只是在遍历整个列表。
Dialogue: 0,1:53:12.04,1:53:15.73,英文,,0,0,0,,Well, honestly, we've seen an even more terse way to do this in Python.
Dialogue: 0,1:53:12.04,1:53:15.73,中文,,0,0,0,,说真的，我们甚至见过用 python 更简洁的方法来实现。
Dialogue: 0,1:53:15.73,1:53:19.39,英文,,0,0,0,,And this, again, is what makes it a more pleasant language sometimes.
Dialogue: 0,1:53:15.73,1:53:19.39,中文,,0,0,0,,这也是 python 有时更讨人喜欢的原因。
Dialogue: 0,1:53:19.39,1:53:20.89,英文,,0,0,0,,Why don't I just do this?
Dialogue: 0,1:53:19.39,1:53:20.89,中文,,0,0,0,,我为什么不这么做呢？
Dialogue: 0,1:53:20.89,1:53:24.78,英文,,0,0,0,,Instead of iterating one at a time, why don't I just say this?
Dialogue: 0,1:53:20.89,1:53:24.78,中文,,0,0,0,,与其每次迭代一个，不如这样写？
Dialogue: 0,1:53:24.78,1:53:26.44,英文,,0,0,0,,Let me go ahead and.
Dialogue: 0,1:53:24.78,1:53:26.44,中文,,0,0,0,,让我来...
Dialogue: 0,1:53:26.44,1:53:33.38,英文,,0,0,0,,Change my condition to just be how about if the name we're looking for is in the names list, we're done.
Dialogue: 0,1:53:26.44,1:53:33.38,中文,,0,0,0,,把条件改成，如果我们要找的名字在 names 列表里，就完成了。
Dialogue: 0,1:53:33.38,1:53:34.26,英文,,0,0,0,,We found it.
Dialogue: 0,1:53:33.38,1:53:34.26,中文,,0,0,0,,我们找到了。
Dialogue: 0,1:53:34.26,1:53:40.78,英文,,0,0,0,,Use the in preposition that we've seen a couple of times now that itself asks the question, is something in something else?
Dialogue: 0,1:53:34.26,1:53:40.78,中文,,0,0,0,,使用我们已经见过几次的介词 in，它本身就提出了一个问题：某个东西是否在另一个东西里面？
Dialogue: 0,1:53:40.78,1:53:43.94,英文,,0,0,0,,And Python will take care of linear search for us.
Dialogue: 0,1:53:40.78,1:53:43.94,中文,,0,0,0,,python 会帮我们进行线性搜索。
Dialogue: 0,1:53:43.94,1:53:48.28,英文,,0,0,0,,And it's going to work exactly the same if I do mython of names.py, search for run.
Dialogue: 0,1:53:43.94,1:53:48.28,中文,,0,0,0,,如果我运行 python names.py，搜索 run，结果还是一样的。
Dialogue: 0,1:53:48.28,1:53:49.76,英文,,0,0,0,,It's still going to find him.
Dialogue: 0,1:53:48.28,1:53:49.76,中文,,0,0,0,,还是能找到他。
Dialogue: 0,1:53:49.76,1:53:52.05,英文,,0,0,0,,And it's still going to do it linearly in this case.
Dialogue: 0,1:53:49.76,1:53:52.05,中文,,0,0,0,,而且在这种情况下，它仍然是线性搜索。
Dialogue: 0,1:53:52.05,1:53:55.93,英文,,0,0,0,,But I don't have to write all of the lower level code myself.
Dialogue: 0,1:53:52.05,1:53:55.93,中文,,0,0,0,,但我自己不需要写所有底层代码。
Dialogue: 0,1:53:55.93,1:54:02.41,英文,,0,0,0,,In this case. Questions now on any of this?
Dialogue: 0,1:53:55.93,1:54:02.41,中文,,0,0,0,,在这种情况下。 现在对这些内容有什么问题吗？
Dialogue: 0,1:54:02.41,1:54:05.85,英文,,0,0,0,,The code's just getting shorter and shorter.
Dialogue: 0,1:54:02.41,1:54:05.85,中文,,0,0,0,,代码越来越短了。
Dialogue: 0,1:54:05.85,1:54:09.18,英文,,0,0,0,,What about, let's see, what else might we have here?
Dialogue: 0,1:54:05.85,1:54:09.18,中文,,0,0,0,,我们来看看，还有什么？
Dialogue: 0,1:54:09.18,1:54:10.30,英文,,0,0,0,,How about this?
Dialogue: 0,1:54:09.18,1:54:10.30,中文,,0,0,0,,这个怎么样？
Dialogue: 0,1:54:10.30,1:54:16.00,英文,,0,0,0,,It turns out, let's go ahead and implement that phone book that we started metaphorically with in the beginning of the course.
Dialogue: 0,1:54:10.30,1:54:16.00,中文,,0,0,0,,我们来实现课程开始时比喻的那个电话簿。
Dialogue: 0,1:54:16.00,1:54:18.66,英文,,0,0,0,,Let's code up a program called phonebook.py.
Dialogue: 0,1:54:16.00,1:54:18.66,中文,,0,0,0,,编写一个名为 phonebook.py 的程序。
Dialogue: 0,1:54:18.66,1:54:22.81,英文,,0,0,0,,And in this case, let's go ahead and Let's create a dictionary this time.
Dialogue: 0,1:54:18.66,1:54:22.81,中文,,0,0,0,,这次我们来创建一个字典。
Dialogue: 0,1:54:22.81,1:54:33.19,英文,,0,0,0,,Recall that a dictionary is a little something that implements something like this, like a two-column table that's got keys and values, words and definitions, names and numbers.
Dialogue: 0,1:54:22.81,1:54:33.19,中文,,0,0,0,,回想一下，字典有点像一个两列表格，包含键和值、单词和定义、姓名和号码。
Dialogue: 0,1:54:33.19,1:54:36.78,英文,,0,0,0,,And let's focus on the last of those, names and numbers in this case.
Dialogue: 0,1:54:33.19,1:54:36.78,中文,,0,0,0,,我们重点关注最后一个，也就是姓名和号码。
Dialogue: 0,1:54:36.78,1:54:47.86,英文,,0,0,0,,While I claimed earlier that Python has built-in support for dictionaries, dict objects that you can create with one line, I didn't need it for Speller because a set is sufficient when you only want one of the keys or the values, not both.
Dialogue: 0,1:54:36.78,1:54:47.86,中文,,0,0,0,,虽然我之前说过 python 内置支持字典，可以使用一行代码创建 dict 对象，\N但 Speller 不需要它，因为当你只需要一个键或值，而不是两者都需要时，集合就足够了。
Dialogue: 0,1:54:47.86,1:54:50.14,英文,,0,0,0,,But now I want some names and numbers.
Dialogue: 0,1:54:47.86,1:54:50.14,中文,,0,0,0,,但现在我需要一些姓名和号码。
Dialogue: 0,1:54:50.14,1:54:55.83,英文,,0,0,0,,So it turns out in Python, you can create an empty dictionary by saying dict open parenthesis close.
Dialogue: 0,1:54:50.14,1:54:55.83,中文,,0,0,0,,在 python 中，你可以使用 dict() 创建一个空字典。
Dialogue: 0,1:54:55.83,1:55:00.23,英文,,0,0,0,,And that just gives you, essentially, a chart that looks like this with nothing in it.
Dialogue: 0,1:54:55.83,1:55:00.23,中文,,0,0,0,,它本质上给了你一个这样的图表，里面什么都没有。
Dialogue: 0,1:55:00.23,1:55:02.11,英文,,0,0,0,,Or there's more succinct syntax.
Dialogue: 0,1:55:00.23,1:55:02.11,中文,,0,0,0,,或者还有更简洁的语法。
Dialogue: 0,1:55:02.11,1:55:07.45,英文,,0,0,0,,You can alternatively do this with two curly braces instead.
Dialogue: 0,1:55:02.11,1:55:07.45,中文,,0,0,0,,你可以使用两个花括号来代替。
Dialogue: 0,1:55:07.45,1:55:09.45,英文,,0,0,0,,And in fact, I've been using a shortcut all this time.
Dialogue: 0,1:55:07.45,1:55:09.45,中文,,0,0,0,,实际上，我一直都在使用一个快捷方式。
Dialogue: 0,1:55:09.45,1:55:17.35,英文,,0,0,0,,When I had a list earlier where my variable was called scores, and I did this,
Dialogue: 0,1:55:09.45,1:55:17.35,中文,,0,0,0,,之前我有一个列表，变量名为 scores，我这样做了，
Dialogue: 0,1:55:17.35,1:55:19.89,英文,,0,0,0,,That was actually the shorthand version of this.
Dialogue: 0,1:55:17.35,1:55:19.89,中文,,0,0,0,,这实际上是它的简写版本。
Dialogue: 0,1:55:19.89,1:55:21.84,英文,,0,0,0,,Hey, Python, give me an empty list.
Dialogue: 0,1:55:19.89,1:55:21.84,中文,,0,0,0,,python，给我一个空列表。
Dialogue: 0,1:55:21.84,1:55:24.54,英文,,0,0,0,,So there's different syntax for achieving the same goal.
Dialogue: 0,1:55:21.84,1:55:24.54,中文,,0,0,0,,所以有多种语法可以达到相同的目标。
Dialogue: 0,1:55:24.54,1:55:32.71,英文,,0,0,0,,In this case, if I want a dictionary for people, I can either do this or, more commonly, just two curly braces, like that.
Dialogue: 0,1:55:24.54,1:55:32.71,中文,,0,0,0,,在这种情况下，如果我想要一个存放人员信息的字典，我可以这样做，或者更常见的是，只使用两个花括号。
Dialogue: 0,1:55:32.71,1:55:36.33,英文,,0,0,0,,All right, well, what do I want to put in this? Well, let me actually put some things in this.
Dialogue: 0,1:55:32.71,1:55:36.33,中文,,0,0,0,,我要在里面放些什么呢？让我来实际放些东西进去。
Dialogue: 0,1:55:36.33,1:55:39.57,英文,,0,0,0,,And I'm going to just move my closed curly brace to a new line.
Dialogue: 0,1:55:36.33,1:55:39.57,中文,,0,0,0,,我要把右边的花括号移到新的一行。
Dialogue: 0,1:55:39.57,1:55:48.42,英文,,0,0,0,,If I want to implement this idea of keys and values, the way you do this in Python is key, colon, value, comma, key, colon, value.
Dialogue: 0,1:55:39.57,1:55:48.42,中文,,0,0,0,,如果我想实现键值对的思想，在 python 中你需要这样做：键、冒号、值、逗号、键、冒号、值。
Dialogue: 0,1:55:48.42,1:55:50.34,英文,,0,0,0,,So you'd implement it more in code.
Dialogue: 0,1:55:48.42,1:55:50.34,中文,,0,0,0,,你会在代码中这样实现。
Dialogue: 0,1:55:50.34,1:55:54.06,英文,,0,0,0,,So for instance, if I want Carter to be the first key in my phone book,
Dialogue: 0,1:55:50.34,1:55:54.06,中文,,0,0,0,,例如，如果我想让 Carter 成为我电话簿中的第一个键，
Dialogue: 0,1:55:54.06,1:55:58.41,英文,,0,0,0,,And I want his number to be plus 1, 617, 495, 1,000.
Dialogue: 0,1:55:54.06,1:55:58.41,中文,,0,0,0,,我希望他的号码是 + 1, 617, 495, 1,000。
Dialogue: 0,1:55:58.41,1:56:00.95,英文,,0,0,0,,I can put that as the corresponding value.
Dialogue: 0,1:55:58.41,1:56:00.95,中文,,0,0,0,,我可以把它作为对应的值。
Dialogue: 0,1:56:00.95,1:56:02.41,英文,,0,0,0,,The colon is in between.
Dialogue: 0,1:56:00.95,1:56:02.41,中文,,0,0,0,,冒号在中间。
Dialogue: 0,1:56:02.41,1:56:06.05,英文,,0,0,0,,Both are strings, or strs, so I've quoted both deliberately.
Dialogue: 0,1:56:02.41,1:56:06.05,中文,,0,0,0,,两者都是字符串，或者说是 strs，所以我特意给两者都加上了引号。
Dialogue: 0,1:56:06.05,1:56:08.35,英文,,0,0,0,,If I want to add myself, I can put a comma.
Dialogue: 0,1:56:06.05,1:56:08.35,中文,,0,0,0,,如果我想添加我自己，我可以输入一个逗号。
Dialogue: 0,1:56:08.35,1:56:11.05,英文,,0,0,0,,And then just to keep things pretty, I'm moving the cursor to the next line.
Dialogue: 0,1:56:08.35,1:56:11.05,中文,,0,0,0,,为了保持美观，我把光标移到下一行。
Dialogue: 0,1:56:11.05,1:56:12.97,英文,,0,0,0,,But that's not strictly required aesthetically.
Dialogue: 0,1:56:11.05,1:56:12.97,中文,,0,0,0,,但这并不是严格意义上的审美要求。
Dialogue: 0,1:56:12.97,1:56:19.50,英文,,0,0,0,,It's just good style. And here I might do plus 1, 949, 468, 2750.
Dialogue: 0,1:56:12.97,1:56:19.50,中文,,0,0,0,,这只是一个好的风格。在这里，我可能会输入 + 1, 949, 468, 2750。
Dialogue: 0,1:56:19.50,1:56:27.28,英文,,0,0,0,,And now I have a dictionary that essentially has two rows here, Carter and his number, and David and his number as well.
Dialogue: 0,1:56:19.50,1:56:27.28,中文,,0,0,0,,现在我有一个字典，它本质上有两行：Carter 和他的号码，以及 David 和他的号码。
Dialogue: 0,1:56:27.28,1:56:30.87,英文,,0,0,0,,And if I kept adding to this, this chart would just get longer and longer.
Dialogue: 0,1:56:27.28,1:56:30.87,中文,,0,0,0,,如果我不断地添加内容，这张表就会越来越长。
Dialogue: 0,1:56:30.87,1:56:32.83,英文,,0,0,0,,Suppose I want to search for one of our numbers.
Dialogue: 0,1:56:30.87,1:56:32.83,中文,,0,0,0,,假设我想搜索其中一个号码。
Dialogue: 0,1:56:32.83,1:56:39.75,英文,,0,0,0,,Well, let's prompt the user for the name for whose number you want to search by getting string. Or you know what? We don't need the CS50 library.
Dialogue: 0,1:56:32.83,1:56:39.75,中文,,0,0,0,,让我们提示用户输入想要搜索号码的姓名，获取字符串。或者，我们不需要 cs50 库。
Dialogue: 0,1:56:39.75,1:56:43.20,英文,,0,0,0,,Let's just use input and prompt the user for a name.
Dialogue: 0,1:56:39.75,1:56:43.20,中文,,0,0,0,,让我们直接使用 input 并提示用户输入姓名。
Dialogue: 0,1:56:43.20,1:56:53.42,英文,,0,0,0,,And now we can use this super ter syntax and just say if name in people print the formatted string number colon.
Dialogue: 0,1:56:43.20,1:56:53.42,中文,,0,0,0,,现在我们可以使用这个超级简洁的语法，只需说如果姓名在 people 中，就打印格式化的字符串：号码 + 冒号。
Dialogue: 0,1:56:53.42,1:56:57.60,英文,,0,0,0,,And here we can do this, people bracket name.
Dialogue: 0,1:56:53.42,1:56:57.60,中文,,0,0,0,,在这里，我们可以这样做，people 中括号加姓名。
Dialogue: 0,1:56:57.60,1:57:01.99,英文,,0,0,0,,OK, so this is getting kind of cool, kind of quickly, kind of confusingly.
Dialogue: 0,1:56:57.60,1:57:01.99,中文,,0,0,0,,这变得越来越有意思了，也越来越快，越来越让人困惑。
Dialogue: 0,1:57:01.99,1:57:03.15,英文,,0,0,0,,So let me run this.
Dialogue: 0,1:57:01.99,1:57:03.15,中文,,0,0,0,,我来运行一下。
Dialogue: 0,1:57:03.15,1:57:05.59,英文,,0,0,0,,Python of phonebook.py.
Dialogue: 0,1:57:03.15,1:57:05.59,中文,,0,0,0,,python phonebook.py。
Dialogue: 0,1:57:05.59,1:57:07.01,英文,,0,0,0,,Let's type in Carter.
Dialogue: 0,1:57:05.59,1:57:07.01,中文,,0,0,0,,输入Carter。
Dialogue: 0,1:57:07.01,1:57:09.05,英文,,0,0,0,,And indeed, I see his number.
Dialogue: 0,1:57:07.01,1:57:09.05,中文,,0,0,0,,可以看到他的号码。
Dialogue: 0,1:57:09.05,1:57:13.06,英文,,0,0,0,,Let's run it again with David, and I see my number here.
Dialogue: 0,1:57:09.05,1:57:13.06,中文,,0,0,0,,再运行一次，输入David，就能看到我的号码。
Dialogue: 0,1:57:13.06,1:57:14.58,英文,,0,0,0,,So what's going on?
Dialogue: 0,1:57:13.06,1:57:14.58,中文,,0,0,0,,这是怎么回事？
Dialogue: 0,1:57:14.58,1:57:19.40,英文,,0,0,0,,Well, it turns out that a dictionary is very similar in spirit to a list.
Dialogue: 0,1:57:14.58,1:57:19.40,中文,,0,0,0,,实际上，字典和列表在本质上非常相似。
Dialogue: 0,1:57:19.40,1:57:30.74,英文,,0,0,0,,It's actually very similar in spirit to an array in C. But instead of being limited to keys that are numbers, like bracket 0, bracket 1, bracket 2, you can actually use words.
Dialogue: 0,1:57:19.40,1:57:30.74,中文,,0,0,0,,它实际上与 C 语言中的数组非常相似。 但它不局限于数字键，比如方括号 0、方括号 1、方括号 2，你可以使用word作为键。
Dialogue: 0,1:57:30.74,1:57:33.29,英文,,0,0,0,,And that's all I'm doing here on line 8.
Dialogue: 0,1:57:30.74,1:57:33.29,中文,,0,0,0,,这就是我在第 8 行所做的。
Dialogue: 0,1:57:33.29,1:57:48.14,英文,,0,0,0,,If I want to check for the name Carter, which is currently in this variable called name, I can index into my people dictionary using not a number, but using literally a string, the name Carter, or David, or anything else.
Dialogue: 0,1:57:33.29,1:57:48.14,中文,,0,0,0,,如果我想查找名为 Carter 的人，它当前存储在名为 name 的变量中，\N我可以使用字符串（Carter、David 或其他任何名称）而不是数字来索引 people 字典。
Dialogue: 0,1:57:48.14,1:57:54.24,英文,,0,0,0,,To make this clearer, too, notice that I'm at the moment using this format string, which is adding some undue complexity.
Dialogue: 0,1:57:48.14,1:57:54.24,中文,,0,0,0,,为了更清楚地说明这一点，请注意，我现在正在使用这种格式字符串，这增加了一些不必要的复杂性。
Dialogue: 0,1:57:54.24,1:57:56.58,英文,,0,0,0,,But I could clarify this perhaps further as this.
Dialogue: 0,1:57:54.24,1:57:56.58,中文,,0,0,0,,但我可以进一步简化它。
Dialogue: 0,1:57:56.58,1:58:04.07,英文,,0,0,0,,I could give myself another variable called number, set it equal to the people dictionary, indexing into it using the current name.
Dialogue: 0,1:57:56.58,1:58:04.07,中文,,0,0,0,,我可以再创建一个名为 number 的变量，将其设置为等于 people 字典，并使用当前名称对其进行索引。
Dialogue: 0,1:58:04.07,1:58:10.01,英文,,0,0,0,,And now I can shorten this to make it clearer that all I'm doing is printing the value of that.
Dialogue: 0,1:58:04.07,1:58:10.01,中文,,0,0,0,,现在我可以将其缩短，更清楚地表明我所做的只是打印它的值。
Dialogue: 0,1:58:10.01,1:58:22.38,英文,,0,0,0,,And in fact, I can do this even more cryptically if I, this would be weird to do, but if I only ever want to show David's phone number and never Carter's, I can literally, quote unquote, index into the people dictionary.
Dialogue: 0,1:58:10.01,1:58:22.38,中文,,0,0,0,,事实上，如果我只想显示David的电话号码，而不想显示Carter的，我可以更隐晦地做到这一点，但这很奇怪，我可以直接对people字典进行索引。
Dialogue: 0,1:58:22.38,1:58:27.27,英文,,0,0,0,,Because now when I run this, even if I type Carter, I'm going to get back my number instead.
Dialogue: 0,1:58:22.38,1:58:27.27,中文,,0,0,0,,因为现在当我运行它时，即使我输入Carter，我也会得到我的号码。
Dialogue: 0,1:58:27.27,1:58:31.23,英文,,0,0,0,,But that's all that's happening if I undo that, because that's now a bug.
Dialogue: 0,1:58:27.27,1:58:31.23,中文,,0,0,0,,但如果我撤销它，就会发生这种情况，因为现在这是一个错误。
Dialogue: 0,1:58:31.23,1:58:33.77,英文,,0,0,0,,But I index into it using.
Dialogue: 0,1:58:31.23,1:58:33.77,中文,,0,0,0,,但我使用它进行索引。
Dialogue: 0,1:58:33.77,1:58:35.39,英文,,0,0,0,,The value of name.
Dialogue: 0,1:58:33.77,1:58:35.39,中文,,0,0,0,,name 的值。
Dialogue: 0,1:58:35.39,1:58:43.50,英文,,0,0,0,,Dictionaries are just so wonderfully convenient, because now you can associate anything with anything else, but not using numbers, but entire keywords instead.
Dialogue: 0,1:58:35.39,1:58:43.50,中文,,0,0,0,,字典非常方便，因为你现在可以用任何东西与其他东西关联，不是用数字，而是用整个关键词。
Dialogue: 0,1:58:43.50,1:58:52.62,英文,,0,0,0,,So here's how if, in Speller, we gave you not just words, but hundreds of thousands of definitions as well, you could essentially store them as this.
Dialogue: 0,1:58:43.50,1:58:52.62,中文,,0,0,0,,如果在 Speller 中，我们不仅提供words，还提供数十万个定义，你就可以像这样存储它们。
Dialogue: 0,1:58:52.62,1:59:04.57,英文,,0,0,0,,And then when the human wants to look up a definition in a proper dictionary, not just for spell checking, you could index into the dictionary using square brackets and get back the definition in English as well.
Dialogue: 0,1:58:52.62,1:59:04.57,中文,,0,0,0,,当用户想要在真正的字典中查找定义，而不仅仅是为了拼写检查时，你可以使用方括号索引到字典中，并获取英文定义。
Dialogue: 0,1:59:04.57,1:59:06.75,英文,,0,0,0,,Questions on this?
Dialogue: 0,1:59:04.57,1:59:06.75,中文,,0,0,0,,对此有疑问吗？
Dialogue: 0,1:59:06.75,1:59:07.93,英文,,0,0,0,,Yeah?
Dialogue: 0,1:59:06.75,1:59:07.93,中文,,0,0,0,,有吗？
Dialogue: 0,1:59:22.20,1:59:23.18,英文,,0,0,0,,A really good question.
Dialogue: 0,1:59:22.20,1:59:23.18,中文,,0,0,0,,问得好。
Dialogue: 0,1:59:23.18,1:59:27.30,英文,,0,0,0,,So to summarize, how is Python finding that name within that dictionary?
Dialogue: 0,1:59:23.18,1:59:27.30,中文,,0,0,0,,总结一下，python 是如何在字典中找到那个名字的？
Dialogue: 0,1:59:27.30,1:59:31.37,英文,,0,0,0,,This is where, honestly, Speller and pset5 is what Python's all about.
Dialogue: 0,1:59:27.30,1:59:31.37,中文,,0,0,0,,说实话，Speller 和 pset5 就是 python 的精髓所在。
Dialogue: 0,1:59:31.37,1:59:36.09,英文,,0,0,0,,So you have struggled, are struggling, with implementing your own spell checker and implementing your own hash table.
Dialogue: 0,1:59:31.37,1:59:36.09,中文,,0,0,0,,你曾经，或者正在，努力实现自己的拼写检查器和哈希表。
Dialogue: 0,1:59:36.09,1:59:47.66,英文,,0,0,0,,And recall that per last week, the goal of a hash table is to ideally get constant time access, not something linear, which is slow, and even better than something logarithmic, like log base 2 of n.
Dialogue: 0,1:59:36.09,1:59:47.66,中文,,0,0,0,,回想一下上周的内容，哈希表的的目标是理想情况下获得常数时间访问，而不是线性的，因为线性速度很慢，甚至比对数时间，比如 log₂n 还要好。
Dialogue: 0,1:59:47.66,1:59:56.33,英文,,0,0,0,,So Python and the really smart people who invented it, they have written the code that does its best to give you constant time searches of dictionaries.
Dialogue: 0,1:59:47.66,1:59:56.33,中文,,0,0,0,,python 和发明它的人非常聪明，他们编写的代码会尽力让你以常数时间搜索字典。
Dialogue: 0,1:59:56.33,2:00:03.60,英文,,0,0,0,,And they're not always going to succeed, just as you and your own problem set are probably going to have some collisions once in a while and start to have chains of linked lists of words.
Dialogue: 0,1:59:56.33,2:00:03.60,中文,,0,0,0,,他们并不总是会成功，就像你和你自己的问题集一样，偶尔会发生一些冲突，并开始出现words链表的链。
Dialogue: 0,2:00:03.60,2:00:09.60,英文,,0,0,0,,But this is where, again, you defer to someone else, someone smarter than you, someone with more time than you, to solve these problems for you.
Dialogue: 0,2:00:03.60,2:00:09.60,中文,,0,0,0,,但这就是你要依赖于其他人，比你聪明的人，比你有更多时间的人来为你解决这些问题的地方。
Dialogue: 0,2:00:09.60,2:00:19.33,英文,,0,0,0,,And if you read Python's documentation, you'll see that it doesn't guarantee constant time, but it's going to ideally optimize the data structure for you to get as fast as possible.
Dialogue: 0,2:00:09.60,2:00:19.33,中文,,0,0,0,,如果你阅读 python 的文档，你会发现它不保证常数时间，但它会尽可能地优化数据结构，让你尽可能快地获取数据。
Dialogue: 0,2:00:19.33,2:00:28.33,英文,,0,0,0,,And of all of the data structures, a dictionary, a hash table, is really like the Swiss army knife of computing, because it just lets you associate something with something else.
Dialogue: 0,2:00:19.33,2:00:28.33,中文,,0,0,0,,在所有的数据结构中，字典，也就是哈希表，就像计算领域的瑞士军刀，因为它可以让你把任何东西和其他东西关联起来。
Dialogue: 0,2:00:28.33,2:00:30.58,英文,,0,0,0,,And even though we keep focusing on names and numbers,
Dialogue: 0,2:00:28.33,2:00:30.58,中文,,0,0,0,,即使我们一直关注的是名字和数字，
Dialogue: 0,2:00:30.58,2:00:36.08,英文,,0,0,0,,That's a really powerful thing, because it's more powerful than lists and arrays, which are only numbers and something else.
Dialogue: 0,2:00:30.58,2:00:36.08,中文,,0,0,0,,这仍然是一个非常强大的功能，因为它比列表和数组更强大，列表和数组只能存储数字和其他东西。
Dialogue: 0,2:00:36.08,2:00:39.18,英文,,0,0,0,,Now you can have any sorts of relationships instead.
Dialogue: 0,2:00:36.08,2:00:39.18,中文,,0,0,0,,现在你可以拥有任何类型的关系。
Dialogue: 0,2:00:39.18,2:00:45.16,英文,,0,0,0,,All right, let me show a few other examples before we culminate with some more powerful techniques in Python, thanks to libraries.
Dialogue: 0,2:00:39.18,2:00:45.16,中文,,0,0,0,,在我们以库的形式介绍 python 中更强大的技术之前，让我再展示一些其他的例子。
Dialogue: 0,2:00:45.16,2:00:49.48,英文,,0,0,0,,How about this problem we encountered in week four, which was this?
Dialogue: 0,2:00:45.16,2:00:49.48,中文,,0,0,0,,还记得我们在第四周遇到的这个问题吗？
Dialogue: 0,2:00:49.48,2:00:53.24,英文,,0,0,0,,Let me code up a program called, again, compare.py here.
Dialogue: 0,2:00:49.48,2:00:53.24,中文,,0,0,0,,让我来写一个程序，还是叫做 compare.py。
Dialogue: 0,2:00:53.24,2:00:56.67,英文,,0,0,0,,But this time, compare two strings and not numbers.
Dialogue: 0,2:00:53.24,2:00:56.67,中文,,0,0,0,,但这次比较两个字符串，而不是数字。
Dialogue: 0,2:00:56.67,2:01:02.75,英文,,0,0,0,,So let me, for instance, get one string from the user called s just for the sake of discussion.
Dialogue: 0,2:00:56.67,2:01:02.75,中文,,0,0,0,,比如，我先从用户那里获取一个字符串，为了便于讨论，我们称它为 s。
Dialogue: 0,2:01:02.75,2:01:08.11,英文,,0,0,0,,Let me get another string from the user called t so that we can actually do some comparison here.
Dialogue: 0,2:01:02.75,2:01:08.11,中文,,0,0,0,,让我再从用户那里获取另一个字符串，叫做 t，这样我们就可以进行比较了。
Dialogue: 0,2:01:08.11,2:01:13.00,英文,,0,0,0,,And if s equals equals t, let's go ahead and print out that they're the same.
Dialogue: 0,2:01:08.11,2:01:13.00,中文,,0,0,0,,如果 s 等于 t，我们就打印出它们相同。
Dialogue: 0,2:01:13.00,2:01:15.54,英文,,0,0,0,,Else, let's go ahead and print out that they're different.
Dialogue: 0,2:01:13.00,2:01:15.54,中文,,0,0,0,,否则，我们就打印出它们不同。
Dialogue: 0,2:01:15.54,2:01:18.04,英文,,0,0,0,,So this is very similar to what we did in week four.
Dialogue: 0,2:01:15.54,2:01:18.04,中文,,0,0,0,,这和我们在第四周做的事情非常相似。
Dialogue: 0,2:01:18.04,2:01:23.72,英文,,0,0,0,,But in week four, recall, we did this specifically because we had encountered a problem.
Dialogue: 0,2:01:18.04,2:01:23.72,中文,,0,0,0,,但回想一下，在第四周，我们这样做是因为我们遇到了一个问题。
Dialogue: 0,2:01:23.72,2:01:32.30,英文,,0,0,0,,For instance, if I run what's going on?
Dialogue: 0,2:01:23.72,2:01:32.30,中文,,0,0,0,,例如，如果我运行这个程序会发生什么？
Dialogue: 0,2:01:41.00,2:01:43.90,英文,,0,0,0,,Oh, OK, wow, OK, long day.
Dialogue: 0,2:01:41.00,2:01:43.90,中文,,0,0,0,,好吧，今天真是漫长的一天。
Dialogue: 0,2:01:43.90,2:01:56.27,英文,,0,0,0,,All right, if I run the proper command, python of compare.py, then let's go ahead and type in something like cat in all lowercase, cats in all lowercase, and they're the same.
Dialogue: 0,2:01:43.90,2:01:56.27,中文,,0,0,0,,好了，如果我运行正确的命令 python compare.py，然后输入像 cat 这样的小写字母，同样是小写的 cats，它们就是相同的。
Dialogue: 0,2:01:56.27,2:01:59.69,英文,,0,0,0,,If, though, I do this again with dog and dog, they're the same.
Dialogue: 0,2:01:56.27,2:01:59.69,中文,,0,0,0,,如果我再用 dog 和 dog 做一次，它们也是相同的。
Dialogue: 0,2:01:59.69,2:02:01.67,英文,,0,0,0,,And of course, cat and dog, they're different.
Dialogue: 0,2:01:59.69,2:02:01.67,中文,,0,0,0,,当然，cat 和 dog 是不同的。
Dialogue: 0,2:02:01.67,2:02:10.47,英文,,0,0,0,,But does anyone recall from two weeks ago, when I typed in my name twice, both identically capitalized, what did it say?
Dialogue: 0,2:02:01.67,2:02:10.47,中文,,0,0,0,,但大家还记得两周前，当我两次输入我的名字，都是大小写一致的时候，它是怎么说的吗？
Dialogue: 0,2:02:10.47,2:02:13.36,英文,,0,0,0,,That they were, in fact, different.
Dialogue: 0,2:02:10.47,2:02:13.36,中文,,0,0,0,,它说它们实际上是不同的。
Dialogue: 0,2:02:13.36,2:02:14.08,英文,,0,0,0,,And why was that?
Dialogue: 0,2:02:13.36,2:02:14.08,中文,,0,0,0,,那是为什么呢？
Dialogue: 0,2:02:14.08,2:02:20.18,英文,,0,0,0,,Like, why were two strings in C different, even though I typed literally the same thing?
Dialogue: 0,2:02:14.08,2:02:20.18,中文,,0,0,0,,为什么在 C 语言中，即使我输入的字母完全相同，两个字符串也是不同的？
Dialogue: 0,2:02:20.18,2:02:25.92,英文,,0,0,0,,Two different places in memory. So each string might look the same aesthetically, but of course, was stored elsewhere in memory.
Dialogue: 0,2:02:20.18,2:02:25.92,中文,,0,0,0,,因为它们在内存中的位置不同。所以每个字符串从表面上看可能是一样的，但实际上存储在内存的不同位置。
Dialogue: 0,2:02:25.92,2:02:38.69,英文,,0,0,0,,And yet, Python appears to be using the equality operator, equals equals, like you and I would expect as humans, actually comparing for us char by char in each of those strings for actual equality.
Dialogue: 0,2:02:25.92,2:02:38.69,中文,,0,0,0,,然而，python 似乎在使用我们人类所期望的相等运算符，也就是等于号，它实际上是在逐个字符地比较每个字符串中的字符是否相等。
Dialogue: 0,2:02:38.69,2:02:41.61,英文,,0,0,0,,So this is a feature of Python in that it's just easier to do.
Dialogue: 0,2:02:38.69,2:02:41.61,中文,,0,0,0,,python 的特点就是让操作更简单。
Dialogue: 0,2:02:41.61,2:02:42.27,英文,,0,0,0,,And why?
Dialogue: 0,2:02:41.61,2:02:42.27,中文,,0,0,0,,为什么呢？
Dialogue: 0,2:02:42.27,2:02:46.42,英文,,0,0,0,,Well, this derives from the reality that in Python, there are no pointers anymore.
Dialogue: 0,2:02:42.27,2:02:46.42,中文,,0,0,0,,因为 python 中没有指针。
Dialogue: 0,2:02:46.42,2:02:50.38,英文,,0,0,0,,Memory Management, it's not up to you now to worry about those lower-level details.
Dialogue: 0,2:02:46.42,2:02:50.38,中文,,0,0,0,,内存管理方面，你不再需要担心那些底层的细节。
Dialogue: 0,2:02:50.38,2:02:53.02,英文,,0,0,0,,The language itself takes care of that for you.
Dialogue: 0,2:02:50.38,2:02:53.02,中文,,0,0,0,,语言本身会帮你处理好这些。
Dialogue: 0,2:02:53.02,2:03:05.31,英文,,0,0,0,,And so similarly, if I do this, and don't ask the user for two strings, but just one, and then I do something like this, how about give myself a second variable, t, set it equal to s.capitalize,
Dialogue: 0,2:02:53.02,2:03:05.31,中文,,0,0,0,,类似地，如果我这样做，不要求用户输入两个字符串，而只输入一个，然后我这样做，比如再创建一个变量 t，将它设置为 s.capitalize，
Dialogue: 0,2:03:05.31,2:03:07.02,英文,,0,0,0,,Which note is not the same as upper.
Dialogue: 0,2:03:05.31,2:03:07.02,中文,,0,0,0,,注意，这与 upper 不同。
Dialogue: 0,2:03:07.02,2:03:12.44,英文,,0,0,0,,Capitalized by design per Python's documentation will only capitalize the first letter for you.
Dialogue: 0,2:03:07.02,2:03:12.44,中文,,0,0,0,,根据 python 文档的定义，Capitalized 只会将首字母大写。
Dialogue: 0,2:03:12.44,2:03:17.20,英文,,0,0,0,,I can now print out, say, two f strings here, what the value of s is.
Dialogue: 0,2:03:12.44,2:03:17.20,中文,,0,0,0,,我现在可以打印出两个 f 字符串，比如 s 的值。
Dialogue: 0,2:03:17.20,2:03:20.75,英文,,0,0,0,,And then let me print out with another f string what the value of t is.
Dialogue: 0,2:03:17.20,2:03:20.75,中文,,0,0,0,,然后让我用另一个 f 字符串打印出 t 的值。
Dialogue: 0,2:03:20.75,2:03:29.96,英文,,0,0,0,,And recall that in C, this was a problem because if you Capitalize S and store it in T. We accidentally capitalized both S and T.
Dialogue: 0,2:03:20.75,2:03:29.96,中文,,0,0,0,,回想一下，在 C 语言中，这是一个问题，因为如果你将 S 首字母大写并存储在 T 中，我们会不小心将 S 和 T 都大写了。
Dialogue: 0,2:03:29.96,2:03:37.96,英文,,0,0,0,,But in this case, in Python, when I actually run this and type in cat in all lowercase, the original S is unchanged.
Dialogue: 0,2:03:29.96,2:03:37.96,中文,,0,0,0,,但在这种情况下，在 python 中，当我实际运行它并输入全部小写的 cat 时，原始的 S 没有改变。
Dialogue: 0,2:03:37.96,2:03:50.78,英文,,0,0,0,,Because when I use capitalize on line 3, this is indeed capitalizing S, but it's returning a copy Of the result, it cannot change s itself because, again, for that technical term, s is immutable.
Dialogue: 0,2:03:37.96,2:03:50.78,中文,,0,0,0,,因为当我在第 3 行使用 capitalize 时，它确实将 S 首字母大写了，\N但它返回的是结果的副本，它不能改变 s 本身，因为从技术术语来说，s 是不可变的。
Dialogue: 0,2:03:50.78,2:03:53.53,英文,,0,0,0,,Strings, once they exist, cannot be changed themselves.
Dialogue: 0,2:03:50.78,2:03:53.53,中文,,0,0,0,,字符串一旦存在，自身就不能被改变。
Dialogue: 0,2:03:53.53,2:03:58.97,英文,,0,0,0,,But you can return copies and modified, mutated copies of those same strings.
Dialogue: 0,2:03:53.53,2:03:58.97,中文,,0,0,0,,但你可以返回副本，以及修改过的、变异过的相同字符串的副本。
Dialogue: 0,2:03:58.97,2:04:05.11,英文,,0,0,0,,So in short, all of those headaches we encountered in week four are now solved really in the way you might expect.
Dialogue: 0,2:03:58.97,2:04:05.11,中文,,0,0,0,,简而言之，我们在第四周遇到的所有问题现在都以你可能期望的方式解决了。
Dialogue: 0,2:04:05.11,2:04:09.64,英文,,0,0,0,,And here's another one that we dwelled on in week four with the colored liquid in glasses.
Dialogue: 0,2:04:05.11,2:04:09.64,中文,,0,0,0,,这是我们在第四周用彩色液体和玻璃杯详细讨论过的另一个问题。
Dialogue: 0,2:04:09.64,2:04:12.36,英文,,0,0,0,,Let me code up a program called swap.py.
Dialogue: 0,2:04:09.64,2:04:12.36,中文,,0,0,0,,让我编写一个名为 swap.py 的程序。
Dialogue: 0,2:04:12.36,2:04:17.04,英文,,0,0,0,,And in swap.py, let me set x equal to 1, y equal to 2.
Dialogue: 0,2:04:12.36,2:04:17.04,中文,,0,0,0,,在 swap.py 中，让我设置 x = 1，y = 2。
Dialogue: 0,2:04:17.04,2:04:18.98,英文,,0,0,0,,And then let me just print out an f string here.
Dialogue: 0,2:04:17.04,2:04:18.98,中文,,0,0,0,,然后让我在这里打印一个 f 字符串。
Dialogue: 0,2:04:18.98,2:04:24.61,英文,,0,0,0,,So how about x is this, comma, y is that.
Dialogue: 0,2:04:18.98,2:04:24.61,中文,,0,0,0,,比如 x 是这个，逗号，y 是那个。
Dialogue: 0,2:04:24.61,2:04:28.05,英文,,0,0,0,,And then let me do that twice just for the sake of demonstration.
Dialogue: 0,2:04:24.61,2:04:28.05,中文,,0,0,0,,为了演示，我再做两次。
Dialogue: 0,2:04:28.05,2:04:34.33,英文,,0,0,0,,And in here, recall that we had to create a swap function, but then we had to pass it in by reference with the ampersand.
Dialogue: 0,2:04:28.05,2:04:34.33,中文,,0,0,0,,回忆一下，我们之前必须创建一个 swap 函数，然后必须使用“&”符号将其作为引用传入。
Dialogue: 0,2:04:34.33,2:04:40.95,英文,,0,0,0,,And like, oh my god, that was kind of peak complexity in C. Well, if you want to swap x and y in Python,
Dialogue: 0,2:04:34.33,2:04:40.95,中文,,0,0,0,,天哪，那大概是 C 语言中最复杂的代码了。如果你想在 python 中交换 x 和 y，
Dialogue: 0,2:04:40.95,2:04:49.22,英文,,0,0,0,,You could do x comma y equals y comma x. And now Python of swap, whoops, Python of swap.py.
Dialogue: 0,2:04:40.95,2:04:49.22,中文,,0,0,0,,你可以这样做：x , y = y , x。现在运行 python 代码 swap.py。
Dialogue: 0,2:04:49.22,2:04:50.29,英文,,0,0,0,,And there we go.
Dialogue: 0,2:04:49.22,2:04:50.29,中文,,0,0,0,,就这样。
Dialogue: 0,2:04:50.29,2:04:51.85,英文,,0,0,0,,All of that's handled for you.
Dialogue: 0,2:04:50.29,2:04:51.85,中文,,0,0,0,,这一切都为你处理好了。
Dialogue: 0,2:04:51.85,2:04:56.59,英文,,0,0,0,,It's sort of like a shell game without even a temporary variable in mind.
Dialogue: 0,2:04:51.85,2:04:56.59,中文,,0,0,0,,这就像一个连临时变量都不需要考虑的“玩壳游戏”。
Dialogue: 0,2:04:56.59,2:04:58.47,英文,,0,0,0,,So what more can we do here?
Dialogue: 0,2:04:56.59,2:04:58.47,中文,,0,0,0,,那么我们还能做些什么呢？
Dialogue: 0,2:04:58.47,2:05:03.64,英文,,0,0,0,,How about a few final building blocks, and these related now to files from that week four.
Dialogue: 0,2:04:58.47,2:05:03.64,中文,,0,0,0,,最后介绍一些构建块，这些构建块与第四周的文件有关。
Dialogue: 0,2:05:03.64,2:05:11.09,英文,,0,0,0,,Suppose that I want to save some names and numbers in like a CSV file, comma separated values, which is like a very lightweight spreadsheet.
Dialogue: 0,2:05:03.64,2:05:11.09,中文,,0,0,0,,假设我想在一个 CSV 文件（逗号分隔值，就像一个非常轻量级的电子表格）中保存一些姓名和号码。
Dialogue: 0,2:05:11.09,2:05:14.19,英文,,0,0,0,,Well, first, let me create a phone book.
Dialogue: 0,2:05:11.09,2:05:14.19,中文,,0,0,0,,首先，让我创建一个 phone book。
Dialogue: 0,2:05:14.19,2:05:19.77,英文,,0,0,0,,.csv file that just has name, comma, number as the first row there.
Dialogue: 0,2:05:14.19,2:05:19.77,中文,,0,0,0,,一个 .csv 文件，第一行是“姓名，号码”。
Dialogue: 0,2:05:19.77,2:05:26.94,英文,,0,0,0,,But after that, I'm going to go ahead now and code up a phonebook.py program that actually allows me to add things to this phonebook.
Dialogue: 0,2:05:19.77,2:05:26.94,中文,,0,0,0,,在那之后，我将继续编写一个 phonebook.py 程序，它可以让我向这个电话簿中添加内容。
Dialogue: 0,2:05:26.94,2:05:31.20,英文,,0,0,0,,So let me split my screen here so that we can see the old and the new.
Dialogue: 0,2:05:26.94,2:05:31.20,中文,,0,0,0,,让我把屏幕分成两部分，这样我们就能同时看到旧的和新的。
Dialogue: 0,2:05:31.20,2:05:40.18,英文,,0,0,0,,And down here in my code for phonebook.py, in this new and improved version, I'm going to actually import a whole other library, this one called CSV.
Dialogue: 0,2:05:31.20,2:05:40.18,中文,,0,0,0,,在我的 phonebook.py 代码中，在这个新的改进版本中，我将导入另一个库，名为 CSV。
Dialogue: 0,2:05:40.18,2:05:51.69,英文,,0,0,0,,And here, too, especially for people in data science and the like, really like being able to manipulate files and data that might very well be stored in spreadsheets or CSVs, comma, separated values, which we saw briefly in week four.
Dialogue: 0,2:05:40.18,2:05:51.69,中文,,0,0,0,,对于数据科学等领域的人来说，他们非常喜欢能够操作存储在电子表格或 CSV（逗号分隔值，我们在第四周简单介绍过）中的文件和数据。
Dialogue: 0,2:05:51.69,2:06:02.36,英文,,0,0,0,,In phonebook.py, then, it suffices to just import CSV after reading the documentation, therefore, because this is going to give me functionality in code related to CSV file.
Dialogue: 0,2:05:51.69,2:06:02.36,中文,,0,0,0,,在 phonebook.py 中，在阅读文档后，只需导入 CSV 即可，因为这将为我提供与 CSV 文件相关的代码功能。
Dialogue: 0,2:06:02.36,2:06:05.08,英文,,0,0,0,,So here's how I might open a file in Python.
Dialogue: 0,2:06:02.36,2:06:05.08,中文,,0,0,0,,以下是如何在 python 中打开文件。
Dialogue: 0,2:06:05.08,2:06:06.34,英文,,0,0,0,,I literally call open.
Dialogue: 0,2:06:05.08,2:06:06.34,中文,,0,0,0,,我直接调用 open。
Dialogue: 0,2:06:06.34,2:06:07.38,英文,,0,0,0,,It's not fopen now.
Dialogue: 0,2:06:06.34,2:06:07.38,中文,,0,0,0,,现在不是 fopen。
Dialogue: 0,2:06:07.38,2:06:08.52,英文,,0,0,0,,It's just open.
Dialogue: 0,2:06:07.38,2:06:08.52,中文,,0,0,0,,它只是打开了。
Dialogue: 0,2:06:08.52,2:06:11.26,英文,,0,0,0,,And I open this file called phonebook.csv.
Dialogue: 0,2:06:08.52,2:06:11.26,中文,,0,0,0,,我打开这个叫做 phonebook.csv 的文件。
Dialogue: 0,2:06:11.26,2:06:16.01,英文,,0,0,0,,And just as in C, I'm going to open it in append mode, not write, where it would change the whole thing.
Dialogue: 0,2:06:11.26,2:06:16.01,中文,,0,0,0,,就像在 C 语言中一样，我要在追加模式下打开它，而不是写入模式，因为写入模式会改变整个文件。
Dialogue: 0,2:06:16.01,2:06:19.19,英文,,0,0,0,,I want to append, new line at a time.
Dialogue: 0,2:06:16.01,2:06:19.19,中文,,0,0,0,,我想一次追加一行。
Dialogue: 0,2:06:19.19,2:06:22.19,英文,,0,0,0,,After this, I want to get maybe, how about, a name from the user.
Dialogue: 0,2:06:19.19,2:06:22.19,中文,,0,0,0,,在这之后，我想从用户那里获取一个名字。
Dialogue: 0,2:06:22.19,2:06:25.55,英文,,0,0,0,,So let's prompt the user for some input for their name.
Dialogue: 0,2:06:22.19,2:06:25.55,中文,,0,0,0,,让我们提示用户输入他们的名字。
Dialogue: 0,2:06:25.55,2:06:31.25,英文,,0,0,0,,And then let's prompt the user for a number, as well, using input prompting for number.
Dialogue: 0,2:06:25.55,2:06:31.25,中文,,0,0,0,,我们使用 input 提示用户输入一个号码。
Dialogue: 0,2:06:31.25,2:06:33.03,英文,,0,0,0,,All right, and now this is a little cryptic.
Dialogue: 0,2:06:31.25,2:06:33.03,中文,,0,0,0,,现在这有点难懂。
Dialogue: 0,2:06:33.03,2:06:34.95,英文,,0,0,0,,And you'd only know this from the documentation.
Dialogue: 0,2:06:33.03,2:06:34.95,中文,,0,0,0,,你只能从文档中了解这一点。
Dialogue: 0,2:06:34.95,2:06:41.95,英文,,0,0,0,,But if you want to write rows to a CSV file that you can then view in Excel or the like, you can do this.
Dialogue: 0,2:06:34.95,2:06:41.95,中文,,0,0,0,,但是如果你想把数据行写入一个 CSV 文件，然后在 Excel 或类似的软件中查看，你可以这样做。
Dialogue: 0,2:06:41.95,2:06:45.48,英文,,0,0,0,,Give me a variable called writer, but I could call it anything I want.
Dialogue: 0,2:06:41.95,2:06:45.48,中文,,0,0,0,,给我一个叫做 writer 的变量，但我可以随意命名。
Dialogue: 0,2:06:45.48,2:06:52.26,英文,,0,0,0,,Let me use a csv.writer function that comes with this CSV library passing in the file.
Dialogue: 0,2:06:45.48,2:06:52.26,中文,,0,0,0,,让我使用这个 CSV 库附带的 csv.writer 函数，并将文件传入。
Dialogue: 0,2:06:52.26,2:07:01.01,英文,,0,0,0,,This is like saying, hey, Python, treat this open file as a CSV file so that things are separated with commas and nicely formatted in rows and columns.
Dialogue: 0,2:06:52.26,2:07:01.01,中文,,0,0,0,,这就像是在告诉 python，将这个打开的文件视为 CSV 文件，这样数据就会用逗号分隔，并以行和列的形式进行格式化。
Dialogue: 0,2:07:01.01,2:07:02.31,英文,,0,0,0,,Now I'm going to do this.
Dialogue: 0,2:07:01.01,2:07:02.31,中文,,0,0,0,,现在我要这样做。
Dialogue: 0,2:07:02.31,2:07:04.53,英文,,0,0,0,,Use that writer to write a row.
Dialogue: 0,2:07:02.31,2:07:04.53,中文,,0,0,0,,使用 writer 写入一行。
Dialogue: 0,2:07:04.53,2:07:05.75,英文,,0,0,0,,Well, what do I want to write?
Dialogue: 0,2:07:04.53,2:07:05.75,中文,,0,0,0,,那么，我想写些什么呢？
Dialogue: 0,2:07:05.75,2:07:11.34,英文,,0,0,0,,I want to write a short list, namely the current name and the current number, to that file.
Dialogue: 0,2:07:05.75,2:07:11.34,中文,,0,0,0,,我想把一个简短的列表，即当前的名字和号码，写入到文件中。
Dialogue: 0,2:07:11.34,2:07:16.58,英文,,0,0,0,,But I don't want to use fprintf and %s and all of that stuff that we might have had in the past.
Dialogue: 0,2:07:11.34,2:07:16.58,中文,,0,0,0,,但我不想使用 fprintf 和 %s 以及我们过去可能使用过的所有东西。
Dialogue: 0,2:07:16.58,2:07:19.04,英文,,0,0,0,,And now I just want to close the file.
Dialogue: 0,2:07:16.58,2:07:19.04,中文,,0,0,0,,现在我只想关闭文件。
Dialogue: 0,2:07:19.04,2:07:20.60,英文,,0,0,0,,Let me reopen my terminal.
Dialogue: 0,2:07:19.04,2:07:20.60,中文,,0,0,0,,让我重新打开终端。
Dialogue: 0,2:07:20.60,2:07:23.48,英文,,0,0,0,,Let me run Python of phonebook.py.
Dialogue: 0,2:07:20.60,2:07:23.48,中文,,0,0,0,,让我运行一下这个 python 程序 phonebook.py。
Dialogue: 0,2:07:23.48,2:07:28.92,英文,,0,0,0,,And let me type in, how about David, and then plus 1, 949, 468, 2750.
Dialogue: 0,2:07:23.48,2:07:28.92,中文,,0,0,0,,然后我输入 David，加上 +1, 949, 468, 2750。
Dialogue: 0,2:07:28.92,2:07:36.07,英文,,0,0,0,,And crossing my fingers, watching the actual CSV at top left, my code has just added me to the file.
Dialogue: 0,2:07:28.92,2:07:36.07,中文,,0,0,0,,我祈祷着，看着左上角的 CSV 文件，我的代码成功地把我添加到了文件中。
Dialogue: 0,2:07:36.07,2:07:43.27,英文,,0,0,0,,And if I were to run it again, for instance, with Carter and plus 1, 617, 495, 1000, crossing my fingers again, We've updated the file.
Dialogue: 0,2:07:36.07,2:07:43.27,中文,,0,0,0,,如果我再运行一次，比如输入 Carter 和 +1, 617, 495, 1000，再次祈祷，文件更新了。
Dialogue: 0,2:07:43.27,2:07:46.37,英文,,0,0,0,,And it turns out there's code now via which I can even read that file.
Dialogue: 0,2:07:43.27,2:07:46.37,中文,,0,0,0,,事实证明，现在有代码可以让我读取这个文件了。
Dialogue: 0,2:07:46.37,2:07:49.22,英文,,0,0,0,,But I can first tighten this up just so you've seen it.
Dialogue: 0,2:07:46.37,2:07:49.22,中文,,0,0,0,,但为了让大家看清楚，我先优化一下代码。
Dialogue: 0,2:07:49.22,2:07:53.26,英文,,0,0,0,,It turns out in Python, it's so common to open files and close them.
Dialogue: 0,2:07:49.22,2:07:53.26,中文,,0,0,0,,在 python 中，打开和关闭文件是非常常见的操作。
Dialogue: 0,2:07:53.26,2:07:58.68,英文,,0,0,0,,Humans make mistakes. And they often forget to close files, which might then end up using more memory than you intend.
Dialogue: 0,2:07:53.26,2:07:58.68,中文,,0,0,0,,人非圣贤，孰能无过。人们经常忘记关闭文件，这可能会导致程序占用比预期更多的内存。
Dialogue: 0,2:07:58.68,2:08:03.49,英文,,0,0,0,,So you can alternatively do this in Python so that you don't have to worry about closing files.
Dialogue: 0,2:07:58.68,2:08:03.49,中文,,0,0,0,,你也可以在 python 中这样做，这样就不用担心关闭文件的问题了。
Dialogue: 0,2:08:03.49,2:08:06.04,英文,,0,0,0,,You can use this keyword instead.
Dialogue: 0,2:08:03.49,2:08:06.04,中文,,0,0,0,,你可以改用这个关键字。
Dialogue: 0,2:08:06.04,2:08:13.60,英文,,0,0,0,,You can say with the opening of this file as a variable called file, do all of the following underneath.
Dialogue: 0,2:08:06.04,2:08:13.60,中文,,0,0,0,,你可以用 `with` 语句打开文件，并将其赋值给变量 `file`，然后在缩进块中执行以下所有操作。
Dialogue: 0,2:08:13.60,2:08:15.44,英文,,0,0,0,,So I'm indenting most of my code.
Dialogue: 0,2:08:13.60,2:08:15.44,中文,,0,0,0,,我把大部分代码都缩进了。
Dialogue: 0,2:08:15.44,2:08:18.58,英文,,0,0,0,,I'm using this new Python-specific keyword called with.
Dialogue: 0,2:08:15.44,2:08:18.58,中文,,0,0,0,,我使用了这个 python 特有的关键字 `with`。
Dialogue: 0,2:08:18.58,2:08:23.90,英文,,0,0,0,,And this is just a matter of saying, with the following opening of the file, do those next four lines of code.
Dialogue: 0,2:08:18.58,2:08:23.90,中文,,0,0,0,,这只是说，在打开文件后，执行接下来的四行代码。
Dialogue: 0,2:08:23.90,2:08:27.66,英文,,0,0,0,,And then automatically close it for me at the end of the indentation.
Dialogue: 0,2:08:23.90,2:08:27.66,中文,,0,0,0,,然后在缩进结束时自动关闭文件。
Dialogue: 0,2:08:27.66,2:08:28.94,英文,,0,0,0,,It's a minor optimization.
Dialogue: 0,2:08:27.66,2:08:28.94,中文,,0,0,0,,这是一个小的优化。
Dialogue: 0,2:08:28.94,2:08:33.46,英文,,0,0,0,,But this, again, is sort of the Pythonic way to do things instead.
Dialogue: 0,2:08:28.94,2:08:33.46,中文,,0,0,0,,但这是一种更 pythonic 的做法。
Dialogue: 0,2:08:33.46,2:08:35.04,英文,,0,0,0,,How else might I do this, too?
Dialogue: 0,2:08:33.46,2:08:35.04,中文,,0,0,0,,我还能怎么做呢？
Dialogue: 0,2:08:35.04,2:08:40.84,英文,,0,0,0,,Well, it turns out that the code I've written here, on line 9 especially, is a little fragile, right?
Dialogue: 0,2:08:35.04,2:08:40.84,中文,,0,0,0,,实际上，我在这里写的代码，特别是第 9 行，有点脆弱，对吧？
Dialogue: 0,2:08:40.84,2:08:50.55,英文,,0,0,0,,If any human opens this spreadsheet, the CSV file in Excel, Google Spreadsheets, Apple Numbers, and maybe moves the columns around just because maybe they're futzing, they save it, and they don't realize
Dialogue: 0,2:08:40.84,2:08:50.55,中文,,0,0,0,,如果有人用 Excel、Google Sheets 或 Apple Numbers 打开这个电子表格（CSV 文件），\N并且移动了列的位置（可能只是因为他们在调整格式），
Dialogue: 0,2:08:50.55,2:08:56.55,英文,,0,0,0,,they've now changed my assumptions, I don't want to necessarily write name and number always in that order.
Dialogue: 0,2:08:50.55,2:08:56.55,中文,,0,0,0,,然后保存了文件，但他们没有意识到自己改变了我的假设，我不想总是按照姓名和号码的顺序写入数据。
Dialogue: 0,2:08:56.55,2:09:01.17,英文,,0,0,0,,Because what if someone screws up and flips those two columns by literally dragging and dropping?
Dialogue: 0,2:08:56.55,2:09:01.17,中文,,0,0,0,,因为如果有人搞砸了，真的把这两列拖放反了怎么办？
Dialogue: 0,2:09:01.17,2:09:07.07,英文,,0,0,0,,So it turns out that instead of using a list here, we can use another feature of this library as follows.
Dialogue: 0,2:09:01.17,2:09:07.07,中文,,0,0,0,,所以事实证明，在这里我们可以不使用列表，而是使用这个库的另一个功能，如下所示。
Dialogue: 0,2:09:07.07,2:09:15.80,英文,,0,0,0,,Instead of using a writer, there's something called a dictionary writer, or dictwriter, that takes the same argument as input, the file that's opened.
Dialogue: 0,2:09:07.07,2:09:15.80,中文,,0,0,0,,除了使用 writer 之外，还有一种叫做 dictionary writer，或者说 dictwriter 的东西，它接受与输入相同的参数，即打开的文件。
Dialogue: 0,2:09:15.80,2:09:25.05,英文,,0,0,0,,But now the one difference here is that you need to tell this dictionary writer that your field names are Name and number.
Dialogue: 0,2:09:15.80,2:09:25.05,中文,,0,0,0,,但现在这里唯一的区别是，你需要告诉这个 dictionary writer，你的字段名是 name 和 number。
Dialogue: 0,2:09:25.05,2:09:27.55,英文,,0,0,0,,And let me close the CSV here.
Dialogue: 0,2:09:25.05,2:09:27.55,中文,,0,0,0,,让我关闭这个 CSV 文件。
Dialogue: 0,2:09:27.55,2:09:32.31,英文,,0,0,0,,Name and number are the names of the fields, the columns, in this CSV file.
Dialogue: 0,2:09:27.55,2:09:32.31,中文,,0,0,0,,name 和 number 是这个 CSV 文件中字段（列）的名称。
Dialogue: 0,2:09:32.31,2:09:37.92,英文,,0,0,0,,And when it comes time to write a new row, the syntax here is going to be a little uglier, but it's just a dictionary.
Dialogue: 0,2:09:32.31,2:09:37.92,中文,,0,0,0,,当需要写入新行时，这里的语法会比较丑陋，但它只是一个字典。
Dialogue: 0,2:09:37.92,2:09:42.50,英文,,0,0,0,,The name I want to write to the dictionary is going to be whatever name the human typed in.
Dialogue: 0,2:09:37.92,2:09:42.50,中文,,0,0,0,,我要写入字典的 name 将是用户输入的任何名称。
Dialogue: 0,2:09:42.50,2:09:48.73,英文,,0,0,0,,The number that I want to write to the CSV file is going to be whatever the number the human typed in.
Dialogue: 0,2:09:42.50,2:09:48.73,中文,,0,0,0,,我要写入 CSV 文件的 number 将是用户输入的任何数字。
Dialogue: 0,2:09:48.73,2:10:01.03,英文,,0,0,0,,But what's different now about this code is by simply using a dictionary writer here instead of the generic writer, now the columns can be in this order, or this order, or any order.
Dialogue: 0,2:09:48.73,2:10:01.03,中文,,0,0,0,,但现在这段代码的不同之处在于，通过简单地在这里使用 dictionary writer \N而不是通用的 writer，现在列可以是这个顺序，或者那个顺序，或者任何顺序。
Dialogue: 0,2:10:01.03,2:10:07.68,英文,,0,0,0,,And the dictionary writer is going to figure out, based on the first line of text in that CSV, where to put name, where to put number.
Dialogue: 0,2:10:01.03,2:10:07.68,中文,,0,0,0,,dictionary writer 会根据 CSV 文件中第一行文本，找出 name 和 number 的位置。
Dialogue: 0,2:10:07.68,2:10:09.02,英文,,0,0,0,,So if you flip them, no big deal.
Dialogue: 0,2:10:07.68,2:10:09.02,中文,,0,0,0,,如果你把它们翻转，也没什么大不了的。
Dialogue: 0,2:10:09.02,2:10:11.22,英文,,0,0,0,,It's going to notice, oh wait, the column's changed.
Dialogue: 0,2:10:09.02,2:10:11.22,中文,,0,0,0,,它会注意到，等等，列变了。
Dialogue: 0,2:10:11.22,2:10:12.72,英文,,0,0,0,,And it's going to insert.
Dialogue: 0,2:10:11.22,2:10:12.72,中文,,0,0,0,,它就会插入。
Dialogue: 0,2:10:12.72,2:10:14.25,英文,,0,0,0,,The columns correctly.
Dialogue: 0,2:10:12.72,2:10:14.25,中文,,0,0,0,,正确的列。
Dialogue: 0,2:10:14.25,2:10:27.40,英文,,0,0,0,,So just, again, another more powerful feature that lets you focus on Lets you focus on real work as opposed to actually getting tied up in the weeds of writing code like this otherwise.
Dialogue: 0,2:10:14.25,2:10:27.40,中文,,0,0,0,,这又是一个更强大的功能，让你可以专注于让你专注于真正的工作，而不是像这样被编写代码的细枝末节所困扰。
Dialogue: 0,2:10:27.40,2:10:30.52,英文,,0,0,0,,Questions on this one as well?
Dialogue: 0,2:10:27.40,2:10:30.52,中文,,0,0,0,,对此还有疑问吗？
Dialogue: 0,2:10:30.52,2:10:37.56,英文,,0,0,0,,But what we will do now is come full circle to some of the more sophisticated examples with which we began.
Dialogue: 0,2:10:30.52,2:10:37.56,中文,,0,0,0,,但我们现在要做的是，回到我们开始时用到的一些更复杂的例子。
Dialogue: 0,2:10:37.56,2:10:44.13,英文,,0,0,0,,And I'm going to go back over to my own Mac laptop here, where I've got my own terminal window up and running.
Dialogue: 0,2:10:37.56,2:10:44.13,中文,,0,0,0,,我要回到我自己的 Mac 笔记本电脑上，这里有一个我自己的终端窗口正在运行。
Dialogue: 0,2:10:44.13,2:10:48.35,英文,,0,0,0,,And I was just going to introduce a couple of fine old libraries that really speak to just how powerful
Dialogue: 0,2:10:44.13,2:10:48.35,中文,,0,0,0,,我将介绍几个很棒的旧库，它们真正体现了以下功能的强大之处
Dialogue: 0,2:10:48.35,2:10:51.67,英文,,0,0,0,,powerful Python can be and how quickly you can get up and running.
Dialogue: 0,2:10:48.35,2:10:51.67,中文,,0,0,0,,python 的强大之处以及你可以多快上手和运行。
Dialogue: 0,2:10:51.67,2:10:58.63,英文,,0,0,0,,To be fair, can't necessarily do all of these things in the cloud, like in code spaces, because you need access to your own speakers or microphone or the like.
Dialogue: 0,2:10:51.67,2:10:58.63,中文,,0,0,0,,公平地说，不一定能在云端完成所有这些事情，比如在代码空间中，因为你需要访问你自己的扬声器、麦克风之类的设备。
Dialogue: 0,2:10:58.63,2:11:01.23,英文,,0,0,0,,So that's why I'm doing it on my own Mac here.
Dialogue: 0,2:10:58.63,2:11:01.23,中文,,0,0,0,,所以这就是为什么我要在我自己的 Mac 上做这件事。
Dialogue: 0,2:11:01.23,2:11:07.30,英文,,0,0,0,,But let me go ahead and open up a program called speech.py. And I'm not using VS Code here.
Dialogue: 0,2:11:01.23,2:11:07.30,中文,,0,0,0,,让我继续打开一个名为 speech.py 的程序。这里我没有使用 VS Code。
Dialogue: 0,2:11:07.30,2:11:10.46,英文,,0,0,0,,I'm using a program called VI that's entirely terminal window based.
Dialogue: 0,2:11:07.30,2:11:10.46,中文,,0,0,0,,我使用的是一个名为 VI 的程序，它完全基于终端窗口。
Dialogue: 0,2:11:10.46,2:11:28.22,英文,,0,0,0,,But it's going to allow me, for instance, to import the Python text-to-speech version 3 library, I'm going to give myself a variable called engine that's going to be set equal to the Python text-to-speech 3 libraries init method, which is just going to initialize this library that relates to text-to-speech.
Dialogue: 0,2:11:10.46,2:11:28.22,中文,,0,0,0,,但它将允许我，例如，导入 python 文本转语音版本 3 库，\N我将给自己一个名为 engine 的变量，它将被设置为等于 python 文本转语音 3 库的 init 方法，它将初始化这个与文本转语音相关的库。
Dialogue: 0,2:11:28.22,2:11:31.59,英文,,0,0,0,,I'm going to then use the engine's say function
Dialogue: 0,2:11:28.22,2:11:31.59,中文,,0,0,0,,然后我将使用 engine 的 say 函数
Dialogue: 0,2:11:31.59,2:11:35.43,英文,,0,0,0,,to say something like, how about hello, world.
Dialogue: 0,2:11:31.59,2:11:35.43,中文,,0,0,0,,说出类似“hello,world”的内容。
Dialogue: 0,2:11:35.43,2:11:44.54,英文,,0,0,0,,And then as my last line, I'm going to say engine.runAndWait, capitalized as such, to tell my program now to run that speech and wait until it's done.
Dialogue: 0,2:11:35.43,2:11:44.54,中文,,0,0,0,,作为最后一行，我将使用 engine.runAndWait（按原样大写）来告诉我的程序现在运行该语音并等待它完成。
Dialogue: 0,2:11:44.54,2:11:46.72,英文,,0,0,0,,All right, I'm going to save this file.
Dialogue: 0,2:11:44.54,2:11:46.72,中文,,0,0,0,,我要保存这个文件。
Dialogue: 0,2:11:46.72,2:11:49.34,英文,,0,0,0,,I'm going to run Python of speech.py.
Dialogue: 0,2:11:46.72,2:11:49.34,中文,,0,0,0,,我要运行 python speech.py。
Dialogue: 0,2:11:49.34,2:11:53.92,英文,,0,0,0,,And I'm going to cross my fingers, as always, and hello, world.
Dialogue: 0,2:11:49.34,2:11:53.92,中文,,0,0,0,,和往常一样，我将祈祷，然后，hello,world。
Dialogue: 0,2:11:53.92,2:11:59.04,英文,,0,0,0,,All right, so now I have a program that's actually synthesizing speech using a library like this.
Dialogue: 0,2:11:53.92,2:11:59.04,中文,,0,0,0,,现在我有一个程序，它实际上是使用这样的库来合成语音的。
Dialogue: 0,2:11:59.04,2:12:01.54,英文,,0,0,0,,How can I now modify this to be a little more interesting?
Dialogue: 0,2:11:59.04,2:12:01.54,中文,,0,0,0,,我怎样才能把它修改得更有趣一些呢？
Dialogue: 0,2:12:01.54,2:12:02.68,英文,,0,0,0,,Well, how about this?
Dialogue: 0,2:12:01.54,2:12:02.68,中文,,0,0,0,,这个怎么样？
Dialogue: 0,2:12:02.68,2:12:08.86,英文,,0,0,0,,Let me go ahead and prompt the user for their name, like we've done several times here using Python's built-in name function.
Dialogue: 0,2:12:02.68,2:12:08.86,中文,,0,0,0,,让我继续使用 python 内置的 name 函数提示用户输入他们的名字，就像我们在这里已经做过几次的那样。
Dialogue: 0,2:12:08.86,2:12:15.40,英文,,0,0,0,,And now let me go ahead and use a format string in conjunction with this library, interpolating the value of name there.
Dialogue: 0,2:12:08.86,2:12:15.40,中文,,0,0,0,,现在，让我继续使用格式字符串和这个库，在那里插入 name 的值。
Dialogue: 0,2:12:15.40,2:12:23.61,英文,,0,0,0,,And at least if my name is somewhat phonetically pronounceable, let's go ahead and run python of speech.py, type in my name, and?
Dialogue: 0,2:12:15.40,2:12:23.61,中文,,0,0,0,,至少如果我的名字在语音上是可以发音的，让我们继续运行 python speech.py，输入我的名字，然后呢？
Dialogue: 0,2:12:23.61,2:12:25.17,英文,,0,0,0,,Hello, David.
Dialogue: 0,2:12:23.61,2:12:25.17,中文,,0,0,0,,hello，David。
Dialogue: 0,2:12:25.17,2:12:32.22,英文,,0,0,0,,OK, it's a sort of weird choice of inflection, but we're starting to synthesize voice, not unlike Siri or Google Assistant or Alexa or the like.
Dialogue: 0,2:12:25.17,2:12:32.22,中文,,0,0,0,,这是一种奇怪的语调选择，但我们开始合成语音了，就像 Siri、Google Assistant、Alexa 之类的。
Dialogue: 0,2:12:32.22,2:12:36.30,英文,,0,0,0,,Now we can maybe do something a little more advanced, too.
Dialogue: 0,2:12:32.22,2:12:36.30,中文,,0,0,0,,现在我们可以做一些更高级的事情了。
Dialogue: 0,2:12:36.30,2:12:43.41,英文,,0,0,0,,In addition to synthesizing speech in this way, we could synthesize, for instance, an actual graphic.
Dialogue: 0,2:12:36.30,2:12:43.41,中文,,0,0,0,,除了用这种方式合成语音，我们还可以合成，比如，一个真实的图形。
Dialogue: 0,2:12:43.41,2:12:45.65,英文,,0,0,0,,Let me go ahead now and do something like this.
Dialogue: 0,2:12:43.41,2:12:45.65,中文,,0,0,0,,现在让我来演示一下。
Dialogue: 0,2:12:45.65,2:12:48.89,英文,,0,0,0,,Let me create a program called qr.py.
Dialogue: 0,2:12:45.65,2:12:48.89,中文,,0,0,0,,让我创建一个名为 qr.py 的程序。
Dialogue: 0,2:12:48.89,2:12:55.46,英文,,0,0,0,,I'm going to go ahead and import a library called OS, which gives you access to operating system-related functionality in Python.
Dialogue: 0,2:12:48.89,2:12:55.46,中文,,0,0,0,,我要导入一个名为 OS 的库，它允许你在 python 中访问与操作系统相关的功能。
Dialogue: 0,2:12:55.46,2:13:01.42,英文,,0,0,0,,I'm going to import a library I've pre-installed called qrcode, which is a two-dimensional barcode that you might have seen in the real world.
Dialogue: 0,2:12:55.46,2:13:01.42,中文,,0,0,0,,我要导入一个预先安装好的库，叫做 qrcode，它是一个二维条码，你可能在现实世界中见过。
Dialogue: 0,2:13:01.42,2:13:07.04,英文,,0,0,0,,I'm going to go ahead and create an image variable using this qrcode libraries make function.
Dialogue: 0,2:13:01.42,2:13:07.04,中文,,0,0,0,,我要使用这个 qrcode 库的 make 函数创建一个图像变量。
Dialogue: 0,2:13:07.04,2:13:10.79,英文,,0,0,0,,Which, per its documentation, takes a URL like one of CS50's own videos.
Dialogue: 0,2:13:07.04,2:13:10.79,中文,,0,0,0,,根据它的文档，它接受一个 URL，比如 cs50 自己的视频链接。
Dialogue: 0,2:13:10.79,2:13:20.18,英文,,0,0,0,,So we'll do this with YouTube slash xvfzj05.
Dialogue: 0,2:13:10.79,2:13:20.18,中文,,0,0,0,,所以我们将使用 YouTube 斜杠 xvfzj05。
Dialogue: 0,2:13:20.18,2:13:24.84,英文,,0,0,0,,PGG0, so hopefully that's the right lecture.
Dialogue: 0,2:13:20.18,2:13:24.84,中文,,0,0,0,,PGG0，希望那是正确的讲座。
Dialogue: 0,2:13:24.84,2:13:30.24,英文,,0,0,0,,And now we've got image.save, which is going to allow me to create a file called qr.ping.
Dialogue: 0,2:13:24.84,2:13:30.24,中文,,0,0,0,,现在我们有了 image.save，它将允许我创建一个名为 qr.ping 的文件。
Dialogue: 0,2:13:30.24,2:13:33.45,英文,,0,0,0,,Think back now on problem set 4 and how painful it was to save files.
Dialogue: 0,2:13:30.24,2:13:33.45,中文,,0,0,0,,回想一下问题集 4 中保存文件是多么痛苦。
Dialogue: 0,2:13:33.45,2:13:38.69,英文,,0,0,0,,We'll just use the save function now in Python and save this as a ping file, portable network graphic.
Dialogue: 0,2:13:33.45,2:13:38.69,中文,,0,0,0,,我们现在将在 python 中使用 save 函数并将其保存为 ping 文件，即便携式网络图形。
Dialogue: 0,2:13:38.69,2:13:46.53,英文,,0,0,0,,And then lastly, let's just go ahead and open with the command open qr.ping on my Mac so that hopefully this just automatically opens.
Dialogue: 0,2:13:38.69,2:13:46.53,中文,,0,0,0,,最后，让我们在我的 Mac 上使用命令 open qr.ping 打开它，这样它就会自动打开。
Dialogue: 0,2:13:46.53,2:13:51.36,英文,,0,0,0,,All right, I'm going to go ahead and just double check my syntax here so that I haven't made any mistakes.
Dialogue: 0,2:13:46.53,2:13:51.36,中文,,0,0,0,,我要检查一下我的语法，确保我没有犯任何错误。
Dialogue: 0,2:13:51.36,2:13:55.92,英文,,0,0,0,,I'm going to go ahead and run Python of qr.py, Enter.
Dialogue: 0,2:13:51.36,2:13:55.92,中文,,0,0,0,,我要运行 python qr.py，回车。
Dialogue: 0,2:13:55.92,2:13:57.20,英文,,0,0,0,,That opens up this.
Dialogue: 0,2:13:55.92,2:13:57.20,中文,,0,0,0,,这将打开这个。
Dialogue: 0,2:13:57.20,2:13:58.38,英文,,0,0,0,,Let me go ahead and zoom in.
Dialogue: 0,2:13:57.20,2:13:58.38,中文,,0,0,0,,让我把它放大。
Dialogue: 0,2:13:58.38,2:14:08.43,英文,,0,0,0,,If you've got a phone handy and you'd like to scan this code here, whether in person or online, I apologize.
Dialogue: 0,2:13:58.38,2:14:08.43,中文,,0,0,0,,如果你手边有手机，并且想扫描这个代码，无论是在现场还是在线上，我道歉。
Dialogue: 0,2:14:08.43,2:14:11.69,英文,,0,0,0,,You won't appreciate it.
Dialogue: 0,2:14:08.43,2:14:11.69,中文,,0,0,0,,你不会喜欢的。
Dialogue: 0,2:14:11.69,2:14:13.91,英文,,0,0,0,,Amazing, OK.
Dialogue: 0,2:14:11.69,2:14:13.91,中文,,0,0,0,,太棒了，好。
Dialogue: 0,2:14:13.91,2:14:21.38,英文,,0,0,0,,And lastly, let me go back into our speech example here, create a final ending here in our final moments.
Dialogue: 0,2:14:13.91,2:14:21.38,中文,,0,0,0,,最后，让我们回到语音示例，在最后时刻创建一个结尾。
Dialogue: 0,2:14:21.38,2:14:26.08,英文,,0,0,0,,And how about we just say something like, this was CS50, like this.
Dialogue: 0,2:14:21.38,2:14:26.08,中文,,0,0,0,,我们就这样说 “This was cs50”，怎么样？
Dialogue: 0,2:14:26.08,2:14:29.88,英文,,0,0,0,,Let's go ahead here, fix my capitalization just for tidiness, get rid of the name.
Dialogue: 0,2:14:26.08,2:14:29.88,中文,,0,0,0,,让我们继续，为了整洁，我修正一下大小写，去掉名字。
Dialogue: 0,2:14:29.88,2:14:35.38,英文,,0,0,0,,And now, with our final flourish and your introduction to Python equipped, here we go.
Dialogue: 0,2:14:29.88,2:14:35.38,中文,,0,0,0,,现在，随着我们最后的润色，你已经掌握了 python 的入门知识，我们开始吧。
Dialogue: 0,2:14:35.38,2:14:36.85,英文,,0,0,0,,This was CS50.
Dialogue: 0,2:14:35.38,2:14:36.85,中文,,0,0,0,,This was cs50.
Dialogue: 0,2:14:36.85,2:14:37.91,英文,,0,0,0,,All right, we'll see you next time.
Dialogue: 0,2:14:36.85,2:14:37.91,中文,,0,0,0,,好的，下次再见。
