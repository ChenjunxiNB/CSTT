[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 3
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1152
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Audio File: D:/python_code/video_tool/video_tool/result/Lecture 10 - Inheritance III Subtype Polymorphism, Comparators, Comparable.mp4
Video File: D:/python_code/video_tool/video_tool/result/Lecture 10 - Inheritance III Subtype Polymorphism, Comparators, Comparable.mp4
Video AR Mode: 4
Video AR Value: 1.600000
Video Zoom Percent: 0.500000
Scroll Position: 710
Active Line: 715
Video Position: 69540

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,13,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,90,100,0,0,1,1.33333,1.33333,2,6,6,7,1
Style: 英文,Arial,24,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,90,100,0,0,1,1.33333,1.33333,2,1,1,5,1
Style: 中文,微软雅黑,38,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,90,100,0,0,1,1.33333,1.33333,2,2,2,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.29,英文,,0,0,0,,I think it's time we get started.
Dialogue: 0,0:00:00.00,0:00:03.29,中文,,0,0,0,,我觉得是时候开始了
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
Dialogue: 0,0:00:03.29,0:00:04.99,英文,,0,0,0,,So yeah.
Dialogue: 0,0:00:03.29,0:00:04.99,中文,,0,0,0,,嗯 就这样
Dialogue: 0,0:00:04.99,0:00:09.09,英文,,0,0,0,,Welcome to math class.
Dialogue: 0,0:00:04.99,0:00:09.09,中文,,0,0,0,,欢迎来到数学课
Dialogue: 0,0:00:09.09,0:00:18.91,英文,,0,0,0,,So the second half of this course, or the part two of this course, is going to go kind of more into the theory and the math behind the programs that we write.
Dialogue: 0,0:00:09.09,0:00:18.91,中文,,0,0,0,,这门课程的第二部分 或者说这门课程的后半部分 会更多地涉及我们编写程序背后的理论和数学
Dialogue: 0,0:00:18.91,0:00:27.04,英文,,0,0,0,,So we're going to start that off by introducing a few concepts on how we measure a program's runtime.
Dialogue: 0,0:00:18.91,0:00:27.04,中文,,0,0,0,,我们将从介绍一些关于如何衡量程序运行时间的概念开始
Dialogue: 0,0:00:27.04,0:00:33.45,英文,,0,0,0,,So back in 61A, all we were trying to do was get you to write programs.
Dialogue: 0,0:00:27.04,0:00:33.45,中文,,0,0,0,,在61A时 我们只是试图让你写程序
Dialogue: 0,0:00:33.45,0:00:36.37,英文,,0,0,0,,Like, if you can write a program that works, that was all.
Dialogue: 0,0:00:33.45,0:00:36.37,中文,,0,0,0,,比如说 如果你能写出一个正常工作的程序 那就够了
Dialogue: 0,0:00:36.37,0:00:37.65,英文,,0,0,0,,We were happy with that.
Dialogue: 0,0:00:36.37,0:00:37.65,中文,,0,0,0,,我们对此感到满意
Dialogue: 0,0:00:37.65,0:00:38.97,英文,,0,0,0,,That's enough.
Dialogue: 0,0:00:37.65,0:00:38.97,中文,,0,0,0,,够了
Dialogue: 0,0:00:38.97,0:00:40.95,英文,,0,0,0,,But we are not just programmers now.
Dialogue: 0,0:00:38.97,0:00:40.95,中文,,0,0,0,,但我们现在不仅仅是程序员
Dialogue: 0,0:00:40.95,0:00:42.85,英文,,0,0,0,,We are engineers.
Dialogue: 0,0:00:40.95,0:00:42.85,中文,,0,0,0,,我们是工程师
Dialogue: 0,0:00:42.85,0:00:46.75,英文,,0,0,0,,And as engineers, we don't just want something that works.
Dialogue: 0,0:00:42.85,0:00:46.75,中文,,0,0,0,,作为工程师 我们不只是想要能够工作的东西
Dialogue: 0,0:00:46.75,0:00:50.13,英文,,0,0,0,,We want something that works efficiently.
Dialogue: 0,0:00:46.75,0:00:50.13,中文,,0,0,0,,我们想要效率高的东西
Dialogue: 0,0:00:50.13,0:00:54.88,英文,,0,0,0,,So there's going to be two main ways that we consider efficiency.
Dialogue: 0,0:00:50.13,0:00:54.88,中文,,0,0,0,,我们会考虑效率的两种主要方式
Dialogue: 0,0:00:54.88,0:00:59.32,英文,,0,0,0,,The first way is kind of like how efficient it is to write your code.
Dialogue: 0,0:00:54.88,0:00:59.32,中文,,0,0,0,,第一种方式就像写代码的效率一样
Dialogue: 0,0:00:59.32,0:01:03.26,英文,,0,0,0,,So 61A was all about writing code efficiently.
Dialogue: 0,0:00:59.32,0:01:03.26,中文,,0,0,0,,61A课程就是关于如何高效写代码的
Dialogue: 0,0:01:03.26,0:01:05.18,英文,,0,0,0,,Like, can you write your code quickly
Dialogue: 0,0:01:03.26,0:01:05.18,中文,,0,0,0,,比方说 你能快速写代码吗？
Dialogue: 0,0:01:05.18,0:01:06.82,英文,,0,0,0,,Is it easy for you to understand
Dialogue: 0,0:01:05.18,0:01:06.82,中文,,0,0,0,,你觉得理解起来容易吗？
Dialogue: 0,0:01:06.82,0:01:09.22,英文,,0,0,0,,Is it easy for you to change that in the future
Dialogue: 0,0:01:06.82,0:01:09.22,中文,,0,0,0,,将来你觉得改起来容易吗？
Dialogue: 0,0:01:09.22,0:01:11.16,英文,,0,0,0,,That's actually kind of important.
Dialogue: 0,0:01:09.22,0:01:11.16,中文,,0,0,0,,这实际上是相当重要的
Dialogue: 0,0:01:11.16,0:01:14.38,英文,,0,0,0,,It's a lot more important than you might think.
Dialogue: 0,0:01:11.16,0:01:14.38,中文,,0,0,0,,这比你想象的重要得多
Dialogue: 0,0:01:14.38,0:01:27.93,英文,,0,0,0,,As it turns out, the majority of the time that you spend writing your code isn't going to be in just writing out your first algorithm, but in debugging, or in fixing code, or in re-changing your code to fit some new
Dialogue: 0,0:01:14.38,0:01:27.93,中文,,0,0,0,,原来 你编写代码花费大部分时间的不是在编写第一个算法 而是在调试、修复代码或者修改代码以适应一些新的需求
Dialogue: 0,0:01:27.93,0:01:29.25,英文,,0,0,0,,And we're going to talk about how to do that in a little bit.
Dialogue: 0,0:01:27.93,0:01:29.25,中文,,0,0,0,,我们稍后会讨论如何做到这一点
Dialogue: 0,0:01:29.25,0:01:31.05,英文,,0,0,0,,But before we get into that, I want to give you a little bit of background on this problem.
Dialogue: 0,0:01:29.25,0:01:31.05,中文,,0,0,0,,但在我们深入讨论之前 我想给你一点关于这个问题的背景
Dialogue: 0,0:01:31.05,0:01:35.30,英文,,0,0,0,,Like, the majority of your time is going to be spent taking your code and revamping it to be something else.
Dialogue: 0,0:01:31.05,0:01:35.30,中文,,0,0,0,,就像 你花费大部分时间的是拿你的代码并将其改造成其他东西
Dialogue: 0,0:01:35.30,0:01:45.67,英文,,0,0,0,,And to do that, you need to have code that's easy to read and easy to understand.
Dialogue: 0,0:01:35.30,0:01:45.67,中文,,0,0,0,,为了做到这一点 你需要编写易于阅读和理解的代码
Dialogue: 0,0:01:45.67,0:01:47.77,英文,,0,0,0,,It's actually going to be the execution cost.
Dialogue: 0,0:01:45.67,0:01:47.77,中文,,0,0,0,,实际上 这将是执行成本
Dialogue: 0,0:01:47.77,0:01:49.55,英文,,0,0,0,,How fast is it to run
Dialogue: 0,0:01:47.77,0:01:49.55,中文,,0,0,0,,运行速度有多快？
Dialogue: 0,0:01:49.55,0:01:53.77,英文,,0,0,0,,So once we write a program, we need to figure out, is it a fast program
Dialogue: 0,0:01:49.55,0:01:53.77,中文,,0,0,0,,写完程序后 我们需要弄清楚 它是不是一个快速的程序？
Dialogue: 0,0:01:53.77,0:01:55.95,英文,,0,0,0,,Does it actually work effectively
Dialogue: 0,0:01:53.77,0:01:55.95,中文,,0,0,0,,它实际上是否有效？
Dialogue: 0,0:01:55.95,0:01:57.43,英文,,0,0,0,,How much memory does your program use
Dialogue: 0,0:01:55.95,0:01:57.43,中文,,0,0,0,,你的程序使用了多少内存？
Dialogue: 0,0:01:57.43,0:01:58.89,英文,,0,0,0,,How much time does it use
Dialogue: 0,0:01:57.43,0:01:58.89,中文,,0,0,0,,用了多少时间？
Dialogue: 0,0:01:58.89,0:02:04.71,英文,,0,0,0,,Those are going to be our two main metrics on how good a program is.
Dialogue: 0,0:01:58.89,0:02:04.71,中文,,0,0,0,,这些将是我们衡量一个程序好坏的两个主要指标
Dialogue: 0,0:02:04.71,0:02:10.47,英文,,0,0,0,,So in order to talk about this, we're going to cover this algorithm here.
Dialogue: 0,0:02:04.71,0:02:10.47,中文,,0,0,0,,因此 为了讨论这个 我们将涵盖这个算法
Dialogue: 0,0:02:10.47,0:02:13.63,英文,,0,0,0,,So we are going to be given a sorted array.
Dialogue: 0,0:02:10.47,0:02:13.63,中文,,0,0,0,,我们将获得一个已排序的数组
Dialogue: 0,0:02:13.63,0:02:17.77,英文,,0,0,0,,So this array is in order from smallest to largest.
Dialogue: 0,0:02:13.63,0:02:17.77,中文,,0,0,0,,这个数组是按从小到大的顺序排列的
Dialogue: 0,0:02:17.77,0:02:23.02,英文,,0,0,0,,And our goal is to figure out if there are any duplicate numbers.
Dialogue: 0,0:02:17.77,0:02:23.02,中文,,0,0,0,,我们的目标是找出是否有重复的数字
Dialogue: 0,0:02:23.02,0:02:27.30,英文,,0,0,0,,So in this example here, are there two duplicates
Dialogue: 0,0:02:23.02,0:02:27.30,中文,,0,0,0,,在这个例子中 有两个重复的数字吗？
Dialogue: 0,0:02:27.30,0:02:29.34,英文,,0,0,0,,Are there any duplicates
Dialogue: 0,0:02:27.30,0:02:29.34,中文,,0,0,0,,有重复的数字吗？
Dialogue: 0,0:02:29.34,0:02:30.24,英文,,0,0,0,,Yes.
Dialogue: 0,0:02:29.34,0:02:30.24,中文,,0,0,0,,有
Dialogue: 0,0:02:30.24,0:02:32.34,英文,,0,0,0,,What's a duplicate
Dialogue: 0,0:02:30.24,0:02:32.34,中文,,0,0,0,,什么是重复的数字？
Dialogue: 0,0:02:32.34,0:02:32.82,英文,,0,0,0,,Yep.
Dialogue: 0,0:02:32.34,0:02:32.82,中文,,0,0,0,,是的
Dialogue: 0,0:02:32.82,0:02:35.68,英文,,0,0,0,,We have two 4's in the middle there.
Dialogue: 0,0:02:32.82,0:02:35.68,中文,,0,0,0,,中间有两个4
Dialogue: 0,0:02:35.68,0:02:39.22,英文,,0,0,0,,right here.
Dialogue: 0,0:02:35.68,0:02:39.22,中文,,0,0,0,,就在这里
Dialogue: 0,0:02:39.22,0:02:42.46,英文,,0,0,0,,And so we should return true on this.
Dialogue: 0,0:02:39.22,0:02:42.46,中文,,0,0,0,,我们应该在这里返回true
Dialogue: 0,0:02:42.46,0:02:46.66,英文,,0,0,0,,If one of those fours was a different number, we'd return false.
Dialogue: 0,0:02:42.46,0:02:46.66,中文,,0,0,0,,如果其中一个4是另一个数字 我们将返回false
Dialogue: 0,0:02:46.66,0:02:49.86,英文,,0,0,0,,Now, how can we solve this
Dialogue: 0,0:02:46.66,0:02:49.86,中文,,0,0,0,,现在 我们该如何解决这个问题？
Dialogue: 0,0:02:49.86,0:02:57.07,英文,,0,0,0,,Does anyone have any algorithms on how they could solve this
Dialogue: 0,0:02:49.86,0:02:57.07,中文,,0,0,0,,有人有什么算法可以解决这个问题吗？
Dialogue: 0,0:02:57.07,0:02:58.89,英文,,0,0,0,,Randomly return true or false.
Dialogue: 0,0:02:57.07,0:02:58.89,中文,,0,0,0,,随机返回true或false
Dialogue: 0,0:02:58.89,0:03:00.77,英文,,0,0,0,,Is that a good algorithm
Dialogue: 0,0:02:58.89,0:03:00.77,中文,,0,0,0,,这是一个好的算法吗？
Dialogue: 0,0:03:00.77,0:03:02.03,英文,,0,0,0,,No.
Dialogue: 0,0:03:00.77,0:03:02.03,中文,,0,0,0,,不
Dialogue: 0,0:03:02.03,0:03:03.17,英文,,0,0,0,,I think that's going to have a 50% error rate.
Dialogue: 0,0:03:02.03,0:03:03.17,中文,,0,0,0,,我觉得这个可能会有50%的错误率
Dialogue: 0,0:03:03.17,0:03:10.01,英文,,0,0,0,,I want 100% success.
Dialogue: 0,0:03:03.17,0:03:10.01,中文,,0,0,0,,我想要100%的成功
Dialogue: 0,0:03:10.01,0:03:14.99,英文,,0,0,0,,Start at the first number, check against every other number, then go to the second one, check everything else.
Dialogue: 0,0:03:10.01,0:03:14.99,中文,,0,0,0,,从第一个数字开始 与每个其他数字进行检查 然后转到第二个数字 检查其他所有数字
Dialogue: 0,0:03:14.99,0:03:16.39,英文,,0,0,0,,Yeah, we could do that.
Dialogue: 0,0:03:14.99,0:03:16.39,中文,,0,0,0,,是的 我们可以这样做
Dialogue: 0,0:03:16.39,0:03:21.36,英文,,0,0,0,,We could consider every possible pair, return true if any of these two match.
Dialogue: 0,0:03:16.39,0:03:21.36,中文,,0,0,0,,我们可以考虑每一对可能的情况 如果其中任何两个匹配 则返回true
Dialogue: 0,0:03:21.36,0:03:26.12,英文,,0,0,0,,That's a bit, yeah
Dialogue: 0,0:03:21.36,0:03:26.12,中文,,0,0,0,,这有点 是吧？
Dialogue: 0,0:03:26.12,0:03:32.96,英文,,0,0,0,,Yeah, since it's ordered, another option is that we can just check every adjacent one.
Dialogue: 0,0:03:26.12,0:03:32.96,中文,,0,0,0,,是的 既然已经排序了 另一个选项就是我们可以检查每对相邻的数
Dialogue: 0,0:03:32.96,0:03:39.52,英文,,0,0,0,,Since everything is sorted, if there is a pair that matches, then they should be right next to each other, like these two 4s.
Dialogue: 0,0:03:32.96,0:03:39.52,中文,,0,0,0,,既然一切都排序了 如果有一对匹配的数 那么它们应该紧挨着 就像这两个4一样
Dialogue: 0,0:03:39.52,0:03:46.36,英文,,0,0,0,,Which one do you think is better, version 1, where you check every pair, or version 2, where we just check adjacent ones
Dialogue: 0,0:03:39.52,0:03:46.36,中文,,0,0,0,,你觉得哪个更好 版本1 你检查每一对 还是版本2 我们只检查相邻的数？
Dialogue: 0,0:03:46.36,0:03:49.46,英文,,0,0,0,,How many people say version 1
Dialogue: 0,0:03:46.36,0:03:49.46,中文,,0,0,0,,有多少人选择版本1？
Dialogue: 0,0:03:49.46,0:03:50.06,英文,,0,0,0,,Two people.
Dialogue: 0,0:03:49.46,0:03:50.06,中文,,0,0,0,,两个人
Dialogue: 0,0:03:50.06,0:03:52.74,英文,,0,0,0,,How many people say version 2
Dialogue: 0,0:03:50.06,0:03:52.74,中文,,0,0,0,,有多少人选择版本2？
Dialogue: 0,0:03:52.74,0:03:56.90,英文,,0,0,0,,Everyone else, including the two people.
Dialogue: 0,0:03:52.74,0:03:56.90,中文,,0,0,0,,其他所有人 包括这两个人
Dialogue: 0,0:03:56.90,0:03:59.82,英文,,0,0,0,,All right.
Dialogue: 0,0:03:59.82,0:04:03.26,英文,,0,0,0,,So yeah, the second one's better.
Dialogue: 0,0:03:59.82,0:04:03.26,中文,,0,0,0,,嗯 第二个更好一些
Dialogue: 0,0:04:03.26,0:04:06.78,英文,,0,0,0,,How better is it
Dialogue: 0,0:04:03.26,0:04:06.78,中文,,0,0,0,,它有多好？
Dialogue: 0,0:04:06.78,0:04:09.38,英文,,0,0,0,,That's the question for today.
Dialogue: 0,0:04:06.78,0:04:09.38,中文,,0,0,0,,这就是今天的问题
Dialogue: 0,0:04:09.38,0:04:14.03,英文,,0,0,0,,So here I have these two codes.
Dialogue: 0,0:04:09.38,0:04:14.03,中文,,0,0,0,,我这里有这两个代码
Dialogue: 0,0:04:14.03,0:04:18.65,英文,,0,0,0,,DUP 1 and DUP 2 are written over here.
Dialogue: 0,0:04:14.03,0:04:18.65,中文,,0,0,0,,dup 1 和 dup 2 写在这里
Dialogue: 0,0:04:18.65,0:04:23.67,英文,,0,0,0,,And we want to figure out a way to say DUP 1 is conclusively better than DUP 2.
Dialogue: 0,0:04:18.65,0:04:23.67,中文,,0,0,0,,我们想找到一种方式来明确地说dup 1比dup 2更好
Dialogue: 0,0:04:23.67,0:04:24.85,英文,,0,0,0,,Is this large enough
Dialogue: 0,0:04:23.67,0:04:24.85,中文,,0,0,0,,这个够大吗？
Dialogue: 0,0:04:24.85,0:04:26.25,英文,,0,0,0,,Do you want me to zoom in
Dialogue: 0,0:04:24.85,0:04:26.25,中文,,0,0,0,,你要我放大吗？
Dialogue: 0,0:04:26.25,0:04:31.42,英文,,0,0,0,,Do you remember how to zoom in and increase the font size
Dialogue: 0,0:04:26.25,0:04:31.42,中文,,0,0,0,,你还记得怎么放大并增加字体大小吗？
Dialogue: 0,0:04:31.42,0:04:33.58,英文,,0,0,0,,No, that's why I asked you.
Dialogue: 0,0:04:31.42,0:04:33.58,中文,,0,0,0,,不 所以我才问你
Dialogue: 0,0:04:33.58,0:04:36.42,英文,,0,0,0,,I think it's OK, because the code itself doesn't really matter, right
Dialogue: 0,0:04:33.58,0:04:36.42,中文,,0,0,0,,我觉得没关系 因为代码本身并不是很重要 对吧？
Dialogue: 0,0:04:36.42,0:04:37.44,英文,,0,0,0,,Yeah, not particularly.
Dialogue: 0,0:04:36.42,0:04:37.44,中文,,0,0,0,,是的 不是特别重要
Dialogue: 0,0:04:37.44,0:04:37.58,英文,,0,0,0,,OK.
Dialogue: 0,0:04:37.58,0:04:40.50,英文,,0,0,0,,All right.
Dialogue: 0,0:04:37.58,0:04:40.50,中文,,0,0,0,,好的
Dialogue: 0,0:04:40.50,0:04:42.06,英文,,0,0,0,,High Contrast, yes, High Contrast.
Dialogue: 0,0:04:40.50,0:04:42.06,中文,,0,0,0,,高对比度 是的 高对比度
Dialogue: 0,0:04:42.06,0:04:42.96,英文,,0,0,0,,What was the High Contrast
Dialogue: 0,0:04:42.06,0:04:42.96,中文,,0,0,0,,什么是高对比度？
Dialogue: 0,0:04:42.96,0:04:43.38,英文,,0,0,0,,How do you do it
Dialogue: 0,0:04:42.96,0:04:43.38,中文,,0,0,0,,你怎么做到的？
Dialogue: 0,0:04:43.38,0:04:46.80,英文,,0,0,0,,You go the IntelliJ button, and then Settings.
Dialogue: 0,0:04:43.38,0:04:46.80,中文,,0,0,0,,你点击 IntelliJ 按钮 然后选择设置
Dialogue: 0,0:04:46.80,0:04:47.62,英文,,0,0,0,,Or File, I think, is fine.
Dialogue: 0,0:04:46.80,0:04:47.62,中文,,0,0,0,,或者选择文件 我想也可以
Dialogue: 0,0:04:47.62,0:04:49.14,英文,,0,0,0,,File, Settings.
Dialogue: 0,0:04:47.62,0:04:49.14,中文,,0,0,0,,文件 设置
Dialogue: 0,0:04:49.14,0:04:49.82,英文,,0,0,0,,Settings.
Dialogue: 0,0:04:49.14,0:04:49.82,中文,,0,0,0,,设置
Dialogue: 0,0:04:49.82,0:04:51.29,英文,,0,0,0,,Yes.
Dialogue: 0,0:04:49.82,0:04:51.29,中文,,0,0,0,,是的
Dialogue: 0,0:04:51.29,0:04:53.63,英文,,0,0,0,,And then it should have Appearance.
Dialogue: 0,0:04:51.29,0:04:53.63,中文,,0,0,0,,然后应该有外观设置
Dialogue: 0,0:04:53.63,0:04:55.11,英文,,0,0,0,,High Contrast.
Dialogue: 0,0:04:53.63,0:04:55.11,中文,,0,0,0,,高对比度
Dialogue: 0,0:04:55.11,0:04:57.69,英文,,0,0,0,,Ooh.
Dialogue: 0,0:04:55.11,0:04:57.69,中文,,0,0,0,,哦
Dialogue: 0,0:04:57.69,0:04:58.51,英文,,0,0,0,,That looks way better.
Dialogue: 0,0:04:57.69,0:04:58.51,中文,,0,0,0,,这样看起来好多了
Dialogue: 0,0:04:58.51,0:04:59.35,英文,,0,0,0,,OK, we're good.
Dialogue: 0,0:04:58.51,0:04:59.35,中文,,0,0,0,,我们可以了
Dialogue: 0,0:04:59.35,0:05:00.93,英文,,0,0,0,,We're good.
Dialogue: 0,0:04:59.35,0:05:00.93,中文,,0,0,0,,我们可以了
Dialogue: 0,0:05:00.93,0:05:01.51,英文,,0,0,0,,Wait, what happens if
Dialogue: 0,0:05:00.93,0:05:01.51,中文,,0,0,0,,等等 如果发生什么？
Dialogue: 0,0:05:01.51,0:05:03.07,英文,,0,0,0,,You can also zoom if you want to make it larger.
Dialogue: 0,0:05:01.51,0:05:03.07,中文,,0,0,0,,如果你想要放大 你也可以缩放
Dialogue: 0,0:05:03.07,0:05:06.01,英文,,0,0,0,,I think it looks good.
Dialogue: 0,0:05:03.07,0:05:06.01,中文,,0,0,0,,我觉得看起来不错
Dialogue: 0,0:05:06.01,0:05:07.77,英文,,0,0,0,,Does this work
Dialogue: 0,0:05:06.01,0:05:07.77,中文,,0,0,0,,这个可以吗？
Dialogue: 0,0:05:07.77,0:05:08.57,英文,,0,0,0,,Is this slightly bigger
Dialogue: 0,0:05:07.77,0:05:08.57,中文,,0,0,0,,这个稍微大一点？
Dialogue: 0,0:05:08.57,0:05:08.99,英文,,0,0,0,,I think this light.
Dialogue: 0,0:05:08.57,0:05:08.99,中文,,0,0,0,,我觉得这个灯
Dialogue: 0,0:05:08.99,0:05:09.39,英文,,0,0,0,,I think it's good.
Dialogue: 0,0:05:08.99,0:05:09.39,中文,,0,0,0,,我觉得它不错
Dialogue: 0,0:05:09.39,0:05:10.88,英文,,0,0,0,,All right.
Dialogue: 0,0:05:10.88,0:05:13.12,英文,,0,0,0,,Let's keep going.
Dialogue: 0,0:05:10.88,0:05:13.12,中文,,0,0,0,,让我们继续
Dialogue: 0,0:05:13.12,0:05:20.79,英文,,0,0,0,,So our goal here is going to be to find some way to mathematically show that dupe 1 is better than dupe 2.
Dialogue: 0,0:05:13.12,0:05:20.79,中文,,0,0,0,,我们的目标是找到一种数学方法来证明重复1比重复2更好
Dialogue: 0,0:05:20.79,0:05:21.89,英文,,0,0,0,,It should be simple.
Dialogue: 0,0:05:20.79,0:05:21.89,中文,,0,0,0,,应该很简单
Dialogue: 0,0:05:21.89,0:05:25.65,英文,,0,0,0,,We should be able to tell at a glance what we're saying is true.
Dialogue: 0,0:05:21.89,0:05:25.65,中文,,0,0,0,,我们应该能一眼看出我们说的是真的
Dialogue: 0,0:05:25.65,0:05:27.87,英文,,0,0,0,,And it should be mathematically rigorous.
Dialogue: 0,0:05:25.65,0:05:27.87,中文,,0,0,0,,而且它应该在数学上严谨
Dialogue: 0,0:05:27.87,0:05:33.82,英文,,0,0,0,,A mathematician should be able to say, yes, this is definitely true.
Dialogue: 0,0:05:27.87,0:05:33.82,中文,,0,0,0,,一个数学家应该能够说 是的 这绝对是真的
Dialogue: 0,0:05:33.82,0:05:39.16,英文,,0,0,0,,And it should definitely show that dupe 2 is better.
Dialogue: 0,0:05:33.82,0:05:39.16,中文,,0,0,0,,而且它应该明确表明复制品2更好
Dialogue: 0,0:05:39.16,0:05:41.82,英文,,0,0,0,,So how do we do this
Dialogue: 0,0:05:39.16,0:05:41.82,中文,,0,0,0,,那么我们该怎么做呢？
Dialogue: 0,0:05:41.82,0:05:45.78,英文,,0,0,0,,Well, one approach, just time it.
Dialogue: 0,0:05:41.82,0:05:45.78,中文,,0,0,0,,嗯 一种方法就是 计时它
Dialogue: 0,0:05:45.78,0:05:46.78,英文,,0,0,0,,Let's try doing that.
Dialogue: 0,0:05:45.78,0:05:46.78,中文,,0,0,0,,让我们试试看
Dialogue: 0,0:05:46.78,0:05:49.04,英文,,0,0,0,,So we could have a physical stopwatch.
Dialogue: 0,0:05:46.78,0:05:49.04,中文,,0,0,0,,我们可以用一个实体秒表
Dialogue: 0,0:05:49.04,0:05:52.70,英文,,0,0,0,,Unix actually has some commands that let you do this.
Dialogue: 0,0:05:49.04,0:05:52.70,中文,,0,0,0,,Unix实际上有一些命令可以让你做这个
Dialogue: 0,0:05:52.70,0:05:57.51,英文,,0,0,0,,So for example, over here, I have this code.
Dialogue: 0,0:05:52.70,0:05:57.51,中文,,0,0,0,,举个例子 这里 我有这段代码
Dialogue: 0,0:05:57.51,0:06:03.07,英文,,0,0,0,,And what it does is it creates a stopwatch.
Dialogue: 0,0:05:57.51,0:06:03.07,中文,,0,0,0,,它的作用是创建一个秒表
Dialogue: 0,0:06:03.07,0:06:04.75,英文,,0,0,0,,It's kind of like starting a stopwatch.
Dialogue: 0,0:06:03.07,0:06:04.75,中文,,0,0,0,,这有点像启动一个秒表
Dialogue: 0,0:06:04.75,0:06:06.63,英文,,0,0,0,,It runs this code.
Dialogue: 0,0:06:04.75,0:06:06.63,中文,,0,0,0,,它运行这段代码
Dialogue: 0,0:06:06.63,0:06:10.27,英文,,0,0,0,,And then it checks how long that took.
Dialogue: 0,0:06:06.63,0:06:10.27,中文,,0,0,0,,然后它检查花了多长时间
Dialogue: 0,0:06:10.27,0:06:13.31,英文,,0,0,0,,So using this, we can see how long the program took.
Dialogue: 0,0:06:10.27,0:06:13.31,中文,,0,0,0,,使用这个 我们可以看到程序花了多长时间
Dialogue: 0,0:06:13.31,0:06:16.21,英文,,0,0,0,,And then after this, we just print it out.
Dialogue: 0,0:06:13.31,0:06:16.21,中文,,0,0,0,,然后 我们只需将其打印出来
Dialogue: 0,0:06:16.21,0:06:22.03,英文,,0,0,0,,I have this set inside a loop that just doubles the size of the object every single time we run this.
Dialogue: 0,0:06:16.21,0:06:22.03,中文,,0,0,0,,我将其设置在一个循环内 每次运行时都会使对象的大小翻倍
Dialogue: 0,0:06:22.03,0:06:28.16,英文,,0,0,0,,Let's see how long this takes.
Dialogue: 0,0:06:22.03,0:06:28.16,中文,,0,0,0,,让我们看看这需要多长时间
Dialogue: 0,0:06:28.16,0:06:31.32,英文,,0,0,0,,All right, so for size 1,000, it's instant.
Dialogue: 0,0:06:28.16,0:06:31.32,中文,,0,0,0,,对于大小为 1,000 它是瞬间完成的
Dialogue: 0,0:06:31.32,0:06:35.60,英文,,0,0,0,,Size 2,000, 4,000, 6,000, or 8,000, it's all about the same.
Dialogue: 0,0:06:31.32,0:06:35.60,中文,,0,0,0,,大小为 2,000、4,000、6,000 或 8,000 都差不多
Dialogue: 0,0:06:35.60,0:06:39.72,英文,,0,0,0,,But it gets really slow really quickly.
Dialogue: 0,0:06:35.60,0:06:39.72,中文,,0,0,0,,但速度会非常快地变慢
Dialogue: 0,0:06:39.72,0:06:43.24,英文,,0,0,0,,I have this set up, so I think the next one's going to take like 20 seconds.
Dialogue: 0,0:06:39.72,0:06:43.24,中文,,0,0,0,,我已经设置好了 所以我觉得下一个会花大约 20 秒
Dialogue: 0,0:06:43.24,0:06:45.24,英文,,0,0,0,,Well, let's see.
Dialogue: 0,0:06:43.24,0:06:45.24,中文,,0,0,0,,让我们看看
Dialogue: 0,0:06:45.24,0:06:50.50,英文,,0,0,0,,As you can see, as we get larger, it takes longer and longer time to go through.
Dialogue: 0,0:06:45.24,0:06:50.50,中文,,0,0,0,,正如你所看到的 随着规模的增大 遍历所需的时间也越来越长
Dialogue: 0,0:06:50.50,0:06:55.89,英文,,0,0,0,,That kind of makes sense, because when we have a larger array, we have more pairs to look at.
Dialogue: 0,0:06:50.50,0:06:55.89,中文,,0,0,0,,这有点说得通 因为当我们有一个更大的数组时 我们要比较的配对就更多
Dialogue: 0,0:06:55.89,0:06:59.71,英文,,0,0,0,,It takes longer to run.
Dialogue: 0,0:06:55.89,0:06:59.71,中文,,0,0,0,,运行时间变得更长
Dialogue: 0,0:06:59.71,0:07:04.13,英文,,0,0,0,,So based on this, these tests,
Dialogue: 0,0:06:59.71,0:07:04.13,中文,,0,0,0,,因此 基于这个 这些测试
Dialogue: 0,0:07:04.13,0:07:06.89,英文,,0,0,0,,It started off really reasonable, right
Dialogue: 0,0:07:04.13,0:07:06.89,中文,,0,0,0,,一开始确实很合理 对吧？
Dialogue: 0,0:07:06.89,0:07:08.83,英文,,0,0,0,,0.06 seconds, 6 milliseconds, that's time.
Dialogue: 0,0:07:06.89,0:07:08.83,中文,,0,0,0,,0.06秒 6毫秒 那就是时间
Dialogue: 0,0:07:08.83,0:07:10.61,英文,,0,0,0,,You've got plenty of time for that.
Dialogue: 0,0:07:08.83,0:07:10.61,中文,,0,0,0,,你有足够的时间做那件事
Dialogue: 0,0:07:10.61,0:07:17.88,英文,,0,0,0,,But 21 seconds for a 512,000-long array, that takes forever to run.
Dialogue: 0,0:07:10.61,0:07:17.88,中文,,0,0,0,,但是对于一个长度为512,000的数组来说 21秒运行起来太慢了
Dialogue: 0,0:07:17.88,0:07:20.98,英文,,0,0,0,,Let's copy this over over here so we have this.
Dialogue: 0,0:07:17.88,0:07:20.98,中文,,0,0,0,,让我们将这个复制到这里 这样我们就有了这个
Dialogue: 0,0:07:20.98,0:07:25.26,英文,,0,0,0,,And let's see what happens when we do dupe2.
Dialogue: 0,0:07:20.98,0:07:25.26,中文,,0,0,0,,让我们看看在执行dup 2时会发生什么
Dialogue: 0,0:07:25.26,0:07:32.74,英文,,0,0,0,,And if we run dupe2, ooh.
Dialogue: 0,0:07:25.26,0:07:32.74,中文,,0,0,0,,如果我们运行dup 2
Dialogue: 0,0:07:32.74,0:07:35.90,英文,,0,0,0,,So as you can see, this is way, way better.
Dialogue: 0,0:07:32.74,0:07:35.90,中文,,0,0,0,,你可以看到 这要好得多
Dialogue: 0,0:07:35.90,0:07:40.67,英文,,0,0,0,,We're already at what
Dialogue: 0,0:07:35.90,0:07:40.67,中文,,0,0,0,,我们已经到了什么地步？
Dialogue: 0,0:07:40.67,0:07:43.27,英文,,0,0,0,,524,288,000 items.
Dialogue: 0,0:07:40.67,0:07:43.27,中文,,0,0,0,,524,288,000 个项目
Dialogue: 0,0:07:43.27,0:07:49.28,英文,,0,0,0,,In fact, it's so good that the problem isn't the fact that we have a runtime that's slow.
Dialogue: 0,0:07:43.27,0:07:49.28,中文,,0,0,0,,实际上 它太好了 问题并不是我们的运行时很慢
Dialogue: 0,0:07:49.28,0:07:53.42,英文,,0,0,0,,The problem is that we run out of memory to store our list.
Dialogue: 0,0:07:49.28,0:07:53.42,中文,,0,0,0,,问题在于我们的列表存储空间不足
Dialogue: 0,0:07:53.42,0:08:00.29,英文,,0,0,0,,So this ends up breaking in terms of we ran out of memory before we run out of time to run.
Dialogue: 0,0:07:53.42,0:08:00.29,中文,,0,0,0,,在我们用完内存之前 就会出现内存不足的问题
Dialogue: 0,0:08:00.29,0:08:04.15,英文,,0,0,0,,And as you can see here, all of these were very, very short times.
Dialogue: 0,0:08:00.29,0:08:04.15,中文,,0,0,0,,正如你在这里所看到的 所有这些时间都非常短
Dialogue: 0,0:08:04.15,0:08:07.13,英文,,0,0,0,,We could get really close times.
Dialogue: 0,0:08:04.15,0:08:07.13,中文,,0,0,0,,我们可以得到非常接近的时间
Dialogue: 0,0:08:07.13,0:08:09.53,英文,,0,0,0,,This is basically as fast as we need.
Dialogue: 0,0:08:07.13,0:08:09.53,中文,,0,0,0,,这基本上就是我们所需的速度
Dialogue: 0,0:08:09.53,0:08:11.91,英文,,0,0,0,,We don't need any better.
Dialogue: 0,0:08:09.53,0:08:11.91,中文,,0,0,0,,我们不需要更好的
Dialogue: 0,0:08:11.91,0:08:13.77,英文,,0,0,0,,So we could say that.
Dialogue: 0,0:08:11.91,0:08:13.77,中文,,0,0,0,,我们可以这么说
Dialogue: 0,0:08:13.77,0:08:18.34,英文,,0,0,0,,Are there any problems with that approach
Dialogue: 0,0:08:13.77,0:08:18.34,中文,,0,0,0,,这种方法有问题吗？
Dialogue: 0,0:08:18.34,0:08:21.10,英文,,0,0,0,,Yeah
Dialogue: 0,0:08:18.34,0:08:21.10,中文,,0,0,0,,是吗？
Dialogue: 0,0:08:21.10,0:08:25.28,英文,,0,0,0,,Yeah, you don't always have a stopwatch.
Dialogue: 0,0:08:21.10,0:08:25.28,中文,,0,0,0,,是的 你不总是有一个秒表
Dialogue: 0,0:08:25.28,0:08:37.95,英文,,0,0,0,,Yeah
Dialogue: 0,0:08:25.28,0:08:37.95,中文,,0,0,0,,是吗？
Dialogue: 0,0:08:37.95,0:08:43.01,英文,,0,0,0,,Yeah, if you run out of memory and then you do a second run of this, then it is going to be much slower.
Dialogue: 0,0:08:37.95,0:08:43.01,中文,,0,0,0,,是的 如果内存用完然后再运行一次 速度会慢很多
Dialogue: 0,0:08:43.01,0:08:46.41,英文,,0,0,0,,That's kind of out of scope for this class, but that is true.
Dialogue: 0,0:08:43.01,0:08:46.41,中文,,0,0,0,,这有点超出了这个课程的范围 但确实如此
Dialogue: 0,0:08:46.41,0:08:53.39,英文,,0,0,0,,Uh, I think we can formalize this by saying that if we run this multiple times, then we're gonna get slightly different values.
Dialogue: 0,0:08:46.41,0:08:53.39,中文,,0,0,0,,我认为我们可以通过说 如果我们多次运行这个 那么我们会得到稍微不同的值来形式化这个
Dialogue: 0,0:08:53.39,0:09:01.44,英文,,0,0,0,,Like, let's say that I run dupe one a second time.
Dialogue: 0,0:08:53.39,0:09:01.44,中文,,0,0,0,,比如说我再次运行 dup 1
Dialogue: 0,0:09:01.44,0:09:04.22,英文,,0,0,0,,Here, 1.336 for the 128,000 one.
Dialogue: 0,0:09:01.44,0:09:04.22,中文,,0,0,0,,这里 128,000 个的是 1.336
Dialogue: 0,0:09:04.22,0:09:06.50,英文,,0,0,0,,This one was 1.444, right
Dialogue: 0,0:09:04.22,0:09:06.50,中文,,0,0,0,,这个是 1.444 对吧？
Dialogue: 0,0:09:06.50,0:09:09.12,英文,,0,0,0,,Those are two completely different numbers.
Dialogue: 0,0:09:06.50,0:09:09.12,中文,,0,0,0,,这两个完全不同
Dialogue: 0,0:09:09.12,0:09:11.52,英文,,0,0,0,,It's like a 6%, 7% difference.
Dialogue: 0,0:09:09.12,0:09:11.52,中文,,0,0,0,,就像是 6% 7% 的差异
Dialogue: 0,0:09:11.52,0:09:14.52,英文,,0,0,0,,And that's just because I ran it a second time slightly later.
Dialogue: 0,0:09:11.52,0:09:14.52,中文,,0,0,0,,那只是因为我稍后第二次运行它
Dialogue: 0,0:09:14.52,0:09:16.34,英文,,0,0,0,,Because my computer is running some other stuff.
Dialogue: 0,0:09:14.52,0:09:16.34,中文,,0,0,0,,因为我的电脑正在运行其他东西
Dialogue: 0,0:09:16.34,0:09:18.38,英文,,0,0,0,,Maybe it's more busy at that time.
Dialogue: 0,0:09:16.34,0:09:18.38,中文,,0,0,0,,也许那个时候它更忙
Dialogue: 0,0:09:18.38,0:09:23.70,英文,,0,0,0,,There's so many different factors that can affect the time that it's not going to be exact.
Dialogue: 0,0:09:18.38,0:09:23.70,中文,,0,0,0,,有很多不同的因素可能会影响时间 所以它不会是精确的
Dialogue: 0,0:09:23.70,0:09:26.70,英文,,0,0,0,,Any other problems here
Dialogue: 0,0:09:23.70,0:09:26.70,中文,,0,0,0,,还有其他问题吗？
Dialogue: 0,0:09:26.70,0:09:31.44,英文,,0,0,0,,Yeah
Dialogue: 0,0:09:26.70,0:09:31.44,中文,,0,0,0,,是的？
Dialogue: 0,0:09:31.44,0:09:34.26,英文,,0,0,0,,Yeah, different computers are going to run different times.
Dialogue: 0,0:09:31.44,0:09:34.26,中文,,0,0,0,,是的 不同的电脑会运行不同的时间
Dialogue: 0,0:09:34.26,0:09:39.02,英文,,0,0,0,,Like, if I run it on Perrin's computer, it's going to be how old's your computer
Dialogue: 0,0:09:34.26,0:09:39.02,中文,,0,0,0,,就像 如果我在Perrin的电脑上运行它 它会是你的电脑多大年龄了？
Dialogue: 0,0:09:39.02,0:09:41.20,英文,,0,0,0,,Not this one, but I have one that's 10 years old.
Dialogue: 0,0:09:39.02,0:09:41.20,中文,,0,0,0,,不是这台 但我有一台已经有十年历史的
Dialogue: 0,0:09:41.20,0:09:45.31,英文,,0,0,0,,All right, the 10-year-old one is going to be, like, way, way, way slower.
Dialogue: 0,0:09:41.20,0:09:45.31,中文,,0,0,0,,好吧 那台十年历史的会慢很多 像 非常 非常 非常慢
Dialogue: 0,0:09:45.31,0:09:47.45,英文,,0,0,0,,Yeah.
Dialogue: 0,0:09:45.31,0:09:47.45,中文,,0,0,0,,是的
Dialogue: 0,0:09:47.45,0:09:51.33,英文,,0,0,0,,This one's, like, two years old, I think.
Dialogue: 0,0:09:47.45,0:09:51.33,中文,,0,0,0,,这台是 像两年前的 我想
Dialogue: 0,0:09:51.33,0:09:52.85,英文,,0,0,0,,So, yeah.
Dialogue: 0,0:09:51.33,0:09:52.85,中文,,0,0,0,,是的
Dialogue: 0,0:09:52.85,0:09:55.81,英文,,0,0,0,,So if we run it on a different computer, I'm going to get a different time.
Dialogue: 0,0:09:52.85,0:09:55.81,中文,,0,0,0,,如果我们在另一台电脑上运行它 我会得到不同的时间
Dialogue: 0,0:09:55.81,0:09:59.05,英文,,0,0,0,,In fact, if I run it in a different language, I'm going to get a different time.
Dialogue: 0,0:09:55.81,0:09:59.05,中文,,0,0,0,,其实 如果我用不同的语言运行它 我会得到不同的时间
Dialogue: 0,0:09:59.05,0:10:01.78,英文,,0,0,0,,Here's the exact same code in Python.
Dialogue: 0,0:09:59.05,0:10:01.78,中文,,0,0,0,,这是用 Python 写的完全相同的代码
Dialogue: 0,0:10:01.78,0:10:10.67,英文,,0,0,0,,If I try running this one, already at 8,000, it's taking a second.
Dialogue: 0,0:10:01.78,0:10:10.67,中文,,0,0,0,,如果我尝试运行这个 已经到了 8,000 需要一秒钟
Dialogue: 0,0:10:10.67,0:10:13.97,英文,,0,0,0,,16,000, it's three seconds.
Dialogue: 0,0:10:10.67,0:10:13.97,中文,,0,0,0,,16,000 需要三秒钟
Dialogue: 0,0:10:13.97,0:10:18.01,英文,,0,0,0,,Did my code all of a sudden get, like, what is this
Dialogue: 0,0:10:13.97,0:10:18.01,中文,,0,0,0,,我的代码突然之间变得像 这是怎么回事？
Dialogue: 0,0:10:18.01,0:10:22.17,英文,,0,0,0,,16,000 divided by 0.022, that's basically a factor of 100.
Dialogue: 0,0:10:18.01,0:10:22.17,中文,,0,0,0,,16,000 除以 0.022 基本上是 100 的倍数
Dialogue: 0,0:10:22.17,0:10:27.40,英文,,0,0,0,,Did my code get 100 times worse just because I switched to Python
Dialogue: 0,0:10:22.17,0:10:27.40,中文,,0,0,0,,我的代码突然变差了 100 倍只是因为我换成了 Python 吗？
Dialogue: 0,0:10:27.40,0:10:29.92,英文,,0,0,0,,No, the algorithm stayed the same.
Dialogue: 0,0:10:27.40,0:10:29.92,中文,,0,0,0,,不 算法没变
Dialogue: 0,0:10:29.92,0:10:32.62,英文,,0,0,0,,The only difference is I switched to Python.
Dialogue: 0,0:10:29.92,0:10:32.62,中文,,0,0,0,,唯一的区别是我换成了Python
Dialogue: 0,0:10:32.62,0:10:40.73,英文,,0,0,0,,Incidentally, if I do dupe 2 on this, same thing, right
Dialogue: 0,0:10:32.62,0:10:40.73,中文,,0,0,0,,顺便说一下 如果我对这个执行dup 1,dup 2 就是一样的 对吧？
Dialogue: 0,0:10:40.73,0:10:42.01,英文,,0,0,0,,It's really fast.
Dialogue: 0,0:10:40.73,0:10:42.01,中文,,0,0,0,,速度真的很快
Dialogue: 0,0:10:42.01,0:10:46.35,英文,,0,0,0,,The slowdown's actually happening because it's trying to create the array in the first place.
Dialogue: 0,0:10:42.01,0:10:46.35,中文,,0,0,0,,减速实际上是因为它试图首先创建数组
Dialogue: 0,0:10:46.35,0:10:51.91,英文,,0,0,0,,And that takes so much time.
Dialogue: 0,0:10:46.35,0:10:51.91,中文,,0,0,0,,而那需要很多时间
Dialogue: 0,0:10:51.91,0:10:52.81,英文,,0,0,0,,Yeah.
Dialogue: 0,0:10:51.91,0:10:52.81,中文,,0,0,0,,是的
Dialogue: 0,0:10:52.81,0:11:00.30,英文,,0,0,0,,So as you can see, it's true that DUP 1 is worse than DUP 2 on both the Python and the Java versions.
Dialogue: 0,0:10:52.81,0:11:00.30,中文,,0,0,0,,正如你所看到的 dup 1在Python和Java版本上都比dup 2差
Dialogue: 0,0:11:00.30,0:11:04.62,英文,,0,0,0,,But their scale is so completely different that just using a stopwatch doesn't really help us.
Dialogue: 0,0:11:00.30,0:11:04.62,中文,,0,0,0,,但它们的规模完全不同 仅仅使用秒表并不能真正帮助我们
Dialogue: 0,0:11:04.62,0:11:07.07,英文,,0,0,0,,It doesn't say enough.
Dialogue: 0,0:11:04.62,0:11:07.07,中文,,0,0,0,,这还不够详细
Dialogue: 0,0:11:07.07,0:11:12.45,英文,,0,0,0,,Here's how this was run, I think, one time we tried this.
Dialogue: 0,0:11:07.07,0:11:12.45,中文,,0,0,0,,这是它是如何运行的 我认为我们试过一次
Dialogue: 0,0:11:12.45,0:11:16.32,英文,,0,0,0,,It was on a slower computer than the one I have, I think.
Dialogue: 0,0:11:12.45,0:11:16.32,中文,,0,0,0,,它是在一台比我现在这台电脑慢的电脑上运行的 我想
Dialogue: 0,0:11:16.32,0:11:20.54,英文,,0,0,0,,And as you can see here, dupe 1 and dupe 2 yielded completely different behaviors.
Dialogue: 0,0:11:16.32,0:11:20.54,中文,,0,0,0,,正如你在这里所看到的 dup 1 和dup 2产生了完全不同的行为
Dialogue: 0,0:11:20.54,0:11:22.34,英文,,0,0,0,,With dupe 2, it was basically constant.
Dialogue: 0,0:11:20.54,0:11:22.34,中文,,0,0,0,,使用dup 1, dup 2时 基本上是恒定的
Dialogue: 0,0:11:22.34,0:11:24.32,英文,,0,0,0,,It was really slow growing.
Dialogue: 0,0:11:22.34,0:11:24.32,中文,,0,0,0,,生长速度真的很慢
Dialogue: 0,0:11:24.32,0:11:31.11,英文,,0,0,0,,With dupe 1, it just zoomed up really quickly.
Dialogue: 0,0:11:24.32,0:11:31.11,中文,,0,0,0,,使用副本1 它就迅速地飙升了
Dialogue: 0,0:11:31.11,0:11:34.67,英文,,0,0,0,,So while this was easy to set up,
Dialogue: 0,0:11:31.11,0:11:34.67,中文,,0,0,0,,虽然设置很容易
Dialogue: 0,0:11:34.67,0:11:46.85,英文,,0,0,0,,It also ends up being so affected by how things go, like when we run this program, whether we're writing in Python, even what computer I'm running, that it's not really as useful as we'd like.
Dialogue: 0,0:11:34.67,0:11:46.85,中文,,0,0,0,,它也受到事情进展的影响 比如我们运行这个程序时 无论是用Python编写 甚至是我运行的计算机 它都不如我们想象的那么有用
Dialogue: 0,0:11:46.85,0:11:54.08,英文,,0,0,0,,It's nice to know that on my computer at this particular time, dupe 1 was better than dupe 2, or dupe 2 was better than dupe 1.
Dialogue: 0,0:11:46.85,0:11:54.08,中文,,0,0,0,,很高兴知道在我这台电脑上 特定时间里 副本1比副本2更好 或者副本2比副本1更好
Dialogue: 0,0:11:54.08,0:12:01.20,英文,,0,0,0,,But I can't say that's going to be true for every single other computer at every single other time.
Dialogue: 0,0:11:54.08,0:12:01.20,中文,,0,0,0,,但我不能说对每台其他计算机在每个其他时间都是真的
Dialogue: 0,0:12:01.20,0:12:05.40,英文,,0,0,0,,I want something that will be consistent across all cases.
Dialogue: 0,0:12:01.20,0:12:05.40,中文,,0,0,0,,我希望有一种在所有情况下都保持一致的东西
Dialogue: 0,0:12:05.40,0:12:09.94,英文,,0,0,0,,And you could play around with this and look for this.
Dialogue: 0,0:12:05.40,0:12:09.94,中文,,0,0,0,,你可以尝试一下这个 看看它是怎么样的
Dialogue: 0,0:12:09.94,0:12:24.50,英文,,0,0,0,,And one thing you would notice eventually, if you tried this out, is what happens when we take what happened here
Dialogue: 0,0:12:09.94,0:12:24.50,中文,,0,0,0,,而你会注意到的一件事是 如果你尝试过这个 就会知道当我们采取了这里发生的事情后会发生什么？
Dialogue: 0,0:12:24.50,0:12:29.35,英文,,0,0,0,,What happens if we take the
Dialogue: 0,0:12:24.50,0:12:29.35,中文,,0,0,0,,如果我们采取了这个怎么办？
Dialogue: 0,0:12:29.35,0:12:34.75,英文,,0,0,0,,Hover over it
Dialogue: 0,0:12:29.35,0:12:34.75,中文,,0,0,0,,将鼠标悬停在上面？
Dialogue: 0,0:12:34.75,0:12:40.58,英文,,0,0,0,,Wait, hover over the red real quick.
Dialogue: 0,0:12:34.75,0:12:40.58,中文,,0,0,0,,等等 快把鼠标悬停在红色上
Dialogue: 0,0:12:40.58,0:12:49.23,英文,,0,0,0,,Hang on.
Dialogue: 0,0:12:40.58,0:12:49.23,中文,,0,0,0,,等一下
Dialogue: 0,0:12:49.23,0:12:51.47,英文,,0,0,0,,Ah, this is what I forgot.
Dialogue: 0,0:12:49.23,0:12:51.47,中文,,0,0,0,,啊 这是我忘记了的东西
Dialogue: 0,0:12:51.47,0:12:51.97,英文,,0,0,0,,There.
Dialogue: 0,0:12:51.47,0:12:51.97,中文,,0,0,0,,在这里
Dialogue: 0,0:12:51.97,0:12:52.55,英文,,0,0,0,,OK.
Dialogue: 0,0:12:52.55,0:12:53.47,英文,,0,0,0,,I forgot a quote.
Dialogue: 0,0:12:52.55,0:12:53.47,中文,,0,0,0,,我忘了加引号
Dialogue: 0,0:12:53.47,0:12:55.51,英文,,0,0,0,,OK.
Dialogue: 0,0:12:55.51,0:13:15.56,英文,,0,0,0,,If you just play around with it, then eventually you end up coming to this note, that if you take the time that it spent on this size and divide it by the time you spent on the test from before, you actually get a number that's really close to 4.
Dialogue: 0,0:12:55.51,0:13:15.56,中文,,0,0,0,,如果你仅仅是随便玩玩 最终你会发现 如果你把它在这个大小上花费的时间除以之前测试花费的时间 你实际上得到的数字非常接近4
Dialogue: 0,0:13:15.56,0:13:21.31,英文,,0,0,0,,And it's always very consistently close to 4.
Dialogue: 0,0:13:15.56,0:13:21.31,中文,,0,0,0,,而且这个数字总是非常一致地接近4
Dialogue: 0,0:13:21.31,0:13:23.15,英文,,0,0,0,,Same is true if you go over to this one.
Dialogue: 0,0:13:21.31,0:13:23.15,中文,,0,0,0,,如果你转到这边 同样是真的
Dialogue: 0,0:13:23.15,0:13:40.97,英文,,0,0,0,,If I go to the Python one and I do dupe one, then doubling the size also ends up being, oops.
Dialogue: 0,0:13:23.15,0:13:40.97,中文,,0,0,0,,如果我去到Python中的一个并执行重复一次 那么将大小加倍也会导致出错
Dialogue: 0,0:13:40.97,0:13:45.35,英文,,0,0,0,,If I run this one, then it also ends up being close to four.
Dialogue: 0,0:13:40.97,0:13:45.35,中文,,0,0,0,,如果我运行这个 那么它也会接近四
Dialogue: 0,0:13:45.35,0:13:49.59,英文,,0,0,0,,And that's consistent regardless of how many times I run this, where I run this.
Dialogue: 0,0:13:45.35,0:13:49.59,中文,,0,0,0,,而且不管我运行这个多少次 我在哪里运行这个都是一致的
Dialogue: 0,0:13:49.59,0:13:53.47,英文,,0,0,0,,If I run this on Perrin's computer, it also ends up being this 4.
Dialogue: 0,0:13:49.59,0:13:53.47,中文,,0,0,0,,如果我在Perrin的计算机上运行这个 那么它也会变成这个4
Dialogue: 0,0:13:53.47,0:13:59.09,英文,,0,0,0,,Every time we double the size of the array for dupe 1, we end up quadrupling the runtime.
Dialogue: 0,0:13:53.47,0:13:59.09,中文,,0,0,0,,每当我们为重复1数组的大小加倍时 我们都会使运行时间增加四倍
Dialogue: 0,0:13:59.09,0:14:01.84,英文,,0,0,0,,And that's regardless of where we do this.
Dialogue: 0,0:13:59.09,0:14:01.84,中文,,0,0,0,,而且无论我们在哪里这样做都是如此
Dialogue: 0,0:14:01.84,0:14:11.96,英文,,0,0,0,,Meanwhile, for dupe 2, if we run dupe 2 under the same conditions, then this ends up converging to a number around 2.
Dialogue: 0,0:14:01.84,0:14:11.96,中文,,0,0,0,,与此同时 对于重复2 如果我们在相同条件下运行重复2 那么结果会收敛到一个约为2的数字
Dialogue: 0,0:14:11.96,0:14:18.25,英文,,0,0,0,,Same if I go over here and run dupe 2.
Dialogue: 0,0:14:11.96,0:14:18.25,中文,,0,0,0,,如果我走到这里运行dup 1,dup 2 结果是一样的
Dialogue: 0,0:14:18.25,0:14:23.23,英文,,0,0,0,,Yeah, this ends up getting somewhere around 2-ish.
Dialogue: 0,0:14:18.25,0:14:23.23,中文,,0,0,0,,是的 最终大约会变成2左右
Dialogue: 0,0:14:23.23,0:14:26.03,英文,,0,0,0,,So that's an interesting observation we made.
Dialogue: 0,0:14:23.23,0:14:26.03,中文,,0,0,0,,这是我们得出的一个有趣观察
Dialogue: 0,0:14:26.03,0:14:37.76,英文,,0,0,0,,Like, if you just play around, then you end up getting to this point where dupe 1 takes 4 times longer, dupe 2 takes 2 times longer if you double the side of the input.
Dialogue: 0,0:14:26.03,0:14:37.76,中文,,0,0,0,,就是 如果你随便试一下 然后最终会达到这样一个点 dup 1 花费的时间是4倍 如果你将输入的大小翻倍 dup 2花费的时间是2倍
Dialogue: 0,0:14:37.76,0:14:41.14,英文,,0,0,0,,And that's true regardless of where you run this, regardless of the language.
Dialogue: 0,0:14:37.76,0:14:41.14,中文,,0,0,0,,而且这一点无论你在哪里运行 无论用什么语言都是一样的
Dialogue: 0,0:14:41.14,0:14:44.86,英文,,0,0,0,,It's all consistent.
Dialogue: 0,0:14:41.14,0:14:44.86,中文,,0,0,0,,这一切都是一致的
Dialogue: 0,0:14:44.86,0:14:52.75,英文,,0,0,0,,So let's try and see if we can find some mathematical reason behind this.
Dialogue: 0,0:14:44.86,0:14:52.75,中文,,0,0,0,,让我们试试看是否能找到这背后的一些数学原因
Dialogue: 0,0:14:52.75,0:14:58.31,英文,,0,0,0,,So the second option on how we can compute this is by just counting how many times you do everything.
Dialogue: 0,0:14:52.75,0:14:58.31,中文,,0,0,0,,我们可以计算这个的第二个选项就是简单地数一数你做每件事情的次数
Dialogue: 0,0:14:58.31,0:15:12.16,英文,,0,0,0,,Let's count the number of times we run these operations on an array of size n. So the i equals 0 line, how many times does this happen if we run this code
Dialogue: 0,0:14:58.31,0:15:12.16,中文,,0,0,0,,让我们来数一数我们在一个大小为 N 的数组上运行这些操作的次数 所以 i 等于 0 这一行 如果我们运行这段代码 这会发生多少次？
Dialogue: 0,0:15:12.16,0:15:13.10,英文,,0,0,0,,Once.
Dialogue: 0,0:15:12.16,0:15:13.10,中文,,0,0,0,,一次
Dialogue: 0,0:15:13.10,0:15:15.94,英文,,0,0,0,,Yeah, we just run it once at this top.
Dialogue: 0,0:15:13.10,0:15:15.94,中文,,0,0,0,,是的 我们只在顶部运行它一次
Dialogue: 0,0:15:15.94,0:15:21.19,英文,,0,0,0,,How about the j equals i plus 1 line
Dialogue: 0,0:15:15.94,0:15:21.19,中文,,0,0,0,,那 j 等于 i 加 1 这一行呢？
Dialogue: 0,0:15:21.19,0:15:23.75,英文,,0,0,0,,Also once.
Dialogue: 0,0:15:21.19,0:15:23.75,中文,,0,0,0,,同样是一次
Dialogue: 0,0:15:23.75,0:15:26.21,英文,,0,0,0,,Well, not once, sorry.
Dialogue: 0,0:15:23.75,0:15:26.21,中文,,0,0,0,,不是一次 抱歉
Dialogue: 0,0:15:26.21,0:15:33.35,英文,,0,0,0,,We run it once for every single time we go through this loop, which means that we have whatever this length is.
Dialogue: 0,0:15:26.21,0:15:33.35,中文,,0,0,0,,我们每次执行此循环时都运行一次它 这意味着我们有无论长度是多少
Dialogue: 0,0:15:33.35,0:15:35.37,英文,,0,0,0,,In this case, it's 10,000.
Dialogue: 0,0:15:33.35,0:15:35.37,中文,,0,0,0,,在这种情况下 它是10,000
Dialogue: 0,0:15:35.37,0:15:42.50,英文,,0,0,0,,So we're going to go from 1 to 10,000 and call the j equals i plus 1 line exactly once each time.
Dialogue: 0,0:15:35.37,0:15:42.50,中文,,0,0,0,,我们将从1到10,000 并且每次调用j等于i加1的行时都只调用一次
Dialogue: 0,0:15:42.50,0:15:47.73,英文,,0,0,0,,How many times do we run less than
Dialogue: 0,0:15:42.50,0:15:47.73,中文,,0,0,0,,我们运行多少次少于？
Dialogue: 0,0:15:47.73,0:15:49.45,英文,,0,0,0,,Well, we have a less than over here.
Dialogue: 0,0:15:47.73,0:15:49.45,中文,,0,0,0,,好吧 我们这里有一个少于
Dialogue: 0,0:15:49.45,0:15:54.52,英文,,0,0,0,,So that happens every single iteration.
Dialogue: 0,0:15:49.45,0:15:54.52,中文,,0,0,0,,这发生在每一次迭代中
Dialogue: 0,0:15:54.52,0:15:58.94,英文,,0,0,0,,It happens every iteration of this inner loop, which goes from 1 up to 10,000.
Dialogue: 0,0:15:54.52,0:15:58.94,中文,,0,0,0,,它发生在此内部循环的每次迭代中 该循环从1到10,000
Dialogue: 0,0:15:58.94,0:16:01.16,英文,,0,0,0,,And then we have 10,000 up here.
Dialogue: 0,0:15:58.94,0:16:01.16,中文,,0,0,0,,然后我们这里有 10,000 个
Dialogue: 0,0:16:01.16,0:16:02.46,英文,,0,0,0,,This goes really tricky.
Dialogue: 0,0:16:01.16,0:16:02.46,中文,,0,0,0,,这个变得非常棘手
Dialogue: 0,0:16:02.46,0:16:03.70,英文,,0,0,0,,It takes forever to run.
Dialogue: 0,0:16:02.46,0:16:03.70,中文,,0,0,0,,运行起来要花很长时间
Dialogue: 0,0:16:03.70,0:16:07.23,英文,,0,0,0,,Eventually, you can compute that it goes from 2 to 50 million of these.
Dialogue: 0,0:16:03.70,0:16:07.23,中文,,0,0,0,,最终 你可以计算出它从 2 到 5000 万个这样的
Dialogue: 0,0:16:07.23,0:16:09.41,英文,,0,0,0,,The increments is also 0 to 50 million of these.
Dialogue: 0,0:16:07.23,0:16:09.41,中文,,0,0,0,,增量也是从 0 到 5000 万个
Dialogue: 0,0:16:09.41,0:16:11.21,英文,,0,0,0,,There's so many of these.
Dialogue: 0,0:16:09.41,0:16:11.21,中文,,0,0,0,,这些有很多
Dialogue: 0,0:16:11.21,0:16:18.04,英文,,0,0,0,,It doesn't really matter exactly how we compute this, but it's just so tedious to end up doing this math.
Dialogue: 0,0:16:11.21,0:16:18.04,中文,,0,0,0,,确切地说我们如何计算并不是很重要 但是做这种数学计算实在太繁琐了
Dialogue: 0,0:16:18.04,0:16:23.10,英文,,0,0,0,,Eventually, if you do this math, you end up with these numbers.
Dialogue: 0,0:16:18.04,0:16:23.10,中文,,0,0,0,,最终 如果你做这个数学 你会得到这些数字
Dialogue: 0,0:16:23.10,0:16:26.58,英文,,0,0,0,,So this is fairly nice.
Dialogue: 0,0:16:23.10,0:16:26.58,中文,,0,0,0,,这相当不错
Dialogue: 0,0:16:26.58,0:16:28.30,英文,,0,0,0,,This is independent of the machine that we use.
Dialogue: 0,0:16:26.58,0:16:28.30,中文,,0,0,0,,这与我们使用的机器无关
Dialogue: 0,0:16:28.30,0:16:30.94,英文,,0,0,0,,It's independent of the program language we use.
Dialogue: 0,0:16:28.30,0:16:30.94,中文,,0,0,0,,这与我们使用的程序语言无关
Dialogue: 0,0:16:30.94,0:16:34.69,英文,,0,0,0,,So it's only dependent on the input.
Dialogue: 0,0:16:30.94,0:16:34.69,中文,,0,0,0,,它只依赖于输入
Dialogue: 0,0:16:34.69,0:16:37.93,英文,,0,0,0,,The problem is that this is just a pain to compute.
Dialogue: 0,0:16:34.69,0:16:37.93,中文,,0,0,0,,问题在于这个计算起来很麻烦
Dialogue: 0,0:16:37.93,0:16:41.55,英文,,0,0,0,,And if we pick the array size, that was kind of arbitrary.
Dialogue: 0,0:16:37.93,0:16:41.55,中文,,0,0,0,,如果我们选择数组大小 那就有点随意
Dialogue: 0,0:16:41.55,0:16:43.85,英文,,0,0,0,,Why did I pick 10,000
Dialogue: 0,0:16:41.55,0:16:43.85,中文,,0,0,0,,为什么我选择了10,000？
Dialogue: 0,0:16:43.85,0:16:45.55,英文,,0,0,0,,Should I pick 10,000
Dialogue: 0,0:16:43.85,0:16:45.55,中文,,0,0,0,,我应该选择10,000吗？
Dialogue: 0,0:16:45.55,0:16:47.39,英文,,0,0,0,,I don't know.
Dialogue: 0,0:16:45.55,0:16:47.39,中文,,0,0,0,,我不知道
Dialogue: 0,0:16:47.39,0:16:48.97,英文,,0,0,0,,What if you pick 100,000
Dialogue: 0,0:16:47.39,0:16:48.97,中文,,0,0,0,,如果你选择了100,000会怎样？
Dialogue: 0,0:16:48.97,0:16:51.52,英文,,0,0,0,,It should yield the exact same results.
Dialogue: 0,0:16:48.97,0:16:51.52,中文,,0,0,0,,它应该产生完全相同的结果
Dialogue: 0,0:16:51.52,0:16:57.19,英文,,0,0,0,,And this also doesn't tell you the actual time, how much it took.
Dialogue: 0,0:16:51.52,0:16:57.19,中文,,0,0,0,,而且这也没有告诉你实际的时间 花了多少时间
Dialogue: 0,0:16:57.19,0:17:03.91,英文,,0,0,0,,So what if instead of n equals 10,000, we just computed in terms of n
Dialogue: 0,0:16:57.19,0:17:03.91,中文,,0,0,0,,那么如果不是N等于10,000 而是按照N来计算呢？
Dialogue: 0,0:17:03.91,0:17:09.59,英文,,0,0,0,,So instead of making a number, we get a function of n.
Dialogue: 0,0:17:03.91,0:17:09.59,中文,,0,0,0,,我们不是得到一个数字 而是得到了一个关于N的函数
Dialogue: 0,0:17:09.59,0:17:13.13,英文,,0,0,0,,If we do this, then we actually get fairly nice results.
Dialogue: 0,0:17:09.59,0:17:13.13,中文,,0,0,0,,如果我们这样做 实际上我们会得到相当不错的结果
Dialogue: 0,0:17:13.13,0:17:24.24,英文,,0,0,0,,Instead of taking something in terms of n, we actually see how our algorithm scales, how slow it gets as our input size gets larger.
Dialogue: 0,0:17:13.13,0:17:24.24,中文,,0,0,0,,我们不再将问题看作是关于N的 而是实际上看到了我们的算法如何扩展 随着输入规模的增大 算法变得多么慢
Dialogue: 0,0:17:24.24,0:17:27.92,英文,,0,0,0,,The problem is this ends up being even harder to compute.
Dialogue: 0,0:17:24.24,0:17:27.92,中文,,0,0,0,,问题在于这样做实际上会变得更难计算
Dialogue: 0,0:17:27.92,0:17:30.70,英文,,0,0,0,,I don't want to do all this math.
Dialogue: 0,0:17:27.92,0:17:30.70,中文,,0,0,0,,我不想做这么多数学计算
Dialogue: 0,0:17:30.70,0:17:39.20,英文,,0,0,0,,And this still doesn't tell you exactly how long things take.
Dialogue: 0,0:17:30.70,0:17:39.20,中文,,0,0,0,,而且这还是不能告诉你事情到底要花多长时间
Dialogue: 0,0:17:39.20,0:17:47.20,英文,,0,0,0,,So just as practice, let's try doing this ourselves.
Dialogue: 0,0:17:39.20,0:17:47.20,中文,,0,0,0,,作为练习 让我们试着自己做这个
Dialogue: 0,0:17:47.20,0:17:57.31,英文,,0,0,0,,For our Duke 2 version, let's try counting how many times we have less than, how many times we increment, how many times we do equals, how many times we access arrays.
Dialogue: 0,0:17:47.20,0:17:57.31,中文,,0,0,0,,对于我们的duo 2版本 让我们尝试计算我们少于多少次 增加多少次 执行等于多少次 访问数组多少次
Dialogue: 0,0:17:57.31,0:18:06.87,英文,,0,0,0,,So first off, how many times do we do a less than operation
Dialogue: 0,0:17:57.31,0:18:06.87,中文,,0,0,0,,首先 我们进行少于操作多少次？
Dialogue: 0,0:18:06.87,0:18:09.19,英文,,0,0,0,,10,000 times for n equals 10,000.
Dialogue: 0,0:18:06.87,0:18:09.19,中文,,0,0,0,,对于N等于10,000 10,000次
Dialogue: 0,0:18:09.19,0:18:11.49,英文,,0,0,0,,What about for arbitrary n
Dialogue: 0,0:18:09.19,0:18:11.49,中文,,0,0,0,,那么对于任意的N呢？
Dialogue: 0,0:18:11.49,0:18:16.10,英文,,0,0,0,,n. Why
Dialogue: 0,0:18:11.49,0:18:16.10,中文,,0,0,0,,为什么？
Dialogue: 0,0:18:16.10,0:18:17.12,英文,,0,0,0,,Yeah.
Dialogue: 0,0:18:16.10,0:18:17.12,中文,,0,0,0,,是的
Dialogue: 0,0:18:17.12,0:18:23.54,英文,,0,0,0,,You run this for loop n times, so you go through n of these iterations.
Dialogue: 0,0:18:17.12,0:18:23.54,中文,,0,0,0,,你运行这个for循环N次 所以你会执行N次这样的迭代
Dialogue: 0,0:18:23.54,0:18:28.43,英文,,0,0,0,,What about the incrementing
Dialogue: 0,0:18:23.54,0:18:28.43,中文,,0,0,0,,增量是怎么样的？
Dialogue: 0,0:18:28.43,0:18:29.13,英文,,0,0,0,,n times
Dialogue: 0,0:18:28.43,0:18:29.13,中文,,0,0,0,,N 次？
Dialogue: 0,0:18:29.13,0:18:29.45,英文,,0,0,0,,Yeah.
Dialogue: 0,0:18:29.13,0:18:29.45,中文,,0,0,0,,是的
Dialogue: 0,0:18:29.45,0:18:34.47,英文,,0,0,0,,Why
Dialogue: 0,0:18:29.45,0:18:34.47,中文,,0,0,0,,为什么？
Dialogue: 0,0:18:34.47,0:18:35.29,英文,,0,0,0,,Yeah.
Dialogue: 0,0:18:34.47,0:18:35.29,中文,,0,0,0,,是的
Dialogue: 0,0:18:35.29,0:18:40.37,英文,,0,0,0,,Because this inner part here, it happens every single time we iterate through this loop.
Dialogue: 0,0:18:35.29,0:18:40.37,中文,,0,0,0,,因为这里的内部部分 每次我们通过这个循环迭代时都会发生
Dialogue: 0,0:18:40.37,0:18:42.67,英文,,0,0,0,,When we do a for loop, we run this thing.
Dialogue: 0,0:18:40.37,0:18:42.67,中文,,0,0,0,,当我们进行 for 循环时 我们运行这个东西
Dialogue: 0,0:18:42.67,0:18:45.17,英文,,0,0,0,,Then we check if this thing is true.
Dialogue: 0,0:18:42.67,0:18:45.17,中文,,0,0,0,,然后我们检查这个东西是否为真
Dialogue: 0,0:18:45.17,0:18:46.75,英文,,0,0,0,,Then we run this thing if not.
Dialogue: 0,0:18:45.17,0:18:46.75,中文,,0,0,0,,如果不是 则运行此事
Dialogue: 0,0:18:46.75,0:18:49.56,英文,,0,0,0,,So we run this every time we run through this.
Dialogue: 0,0:18:46.75,0:18:49.56,中文,,0,0,0,,每次我们通过这个时都运行这个
Dialogue: 0,0:18:49.56,0:18:51.96,英文,,0,0,0,,What about the equals, equality check
Dialogue: 0,0:18:49.56,0:18:51.96,中文,,0,0,0,,等于 相等检查呢？
Dialogue: 0,0:18:51.96,0:18:54.64,英文,,0,0,0,,How many times do we do this
Dialogue: 0,0:18:51.96,0:18:54.64,中文,,0,0,0,,我们要做这个多少次？
Dialogue: 0,0:18:54.64,0:18:56.44,英文,,0,0,0,,n. Why
Dialogue: 0,0:18:54.64,0:18:56.44,中文,,0,0,0,,N. 为什么？
Dialogue: 0,0:18:56.44,0:18:57.80,英文,,0,0,0,,Yeah, we do it once per loop.
Dialogue: 0,0:18:56.44,0:18:57.80,中文,,0,0,0,,是的 我们每次循环都执行一次
Dialogue: 0,0:18:57.80,0:18:58.94,英文,,0,0,0,,And we have n loops.
Dialogue: 0,0:18:57.80,0:18:58.94,中文,,0,0,0,,我们有 N 个循环
Dialogue: 0,0:18:58.94,0:19:00.70,英文,,0,0,0,,So we do it n times.
Dialogue: 0,0:18:58.94,0:19:00.70,中文,,0,0,0,,我们做 N 次
Dialogue: 0,0:19:00.70,0:19:03.91,英文,,0,0,0,,And what about array axes
Dialogue: 0,0:19:00.70,0:19:03.91,中文,,0,0,0,,那么数组轴呢？
Dialogue: 0,0:19:03.91,0:19:04.15,英文,,0,0,0,,2n.
Dialogue: 0,0:19:03.91,0:19:04.15,中文,,0,0,0,,2N
Dialogue: 0,0:19:04.15,0:19:08.90,英文,,0,0,0,,Why 2n
Dialogue: 0,0:19:04.15,0:19:08.90,中文,,0,0,0,,为什么是 2N？
Dialogue: 0,0:19:08.90,0:19:11.54,英文,,0,0,0,,Yeah, because we do this twice.
Dialogue: 0,0:19:08.90,0:19:11.54,中文,,0,0,0,,是的 因为我们这样做两次
Dialogue: 0,0:19:11.54,0:19:18.93,英文,,0,0,0,,Are there any other operations that we're doing
Dialogue: 0,0:19:11.54,0:19:18.93,中文,,0,0,0,,还有其他操作吗？
Dialogue: 0,0:19:18.93,0:19:21.95,英文,,0,0,0,,My default speaker's changed.
Dialogue: 0,0:19:18.93,0:19:21.95,中文,,0,0,0,,我的默认扬声器已更改
Dialogue: 0,0:19:21.95,0:19:22.73,英文,,0,0,0,,Hello
Dialogue: 0,0:19:21.95,0:19:22.73,中文,,0,0,0,,喂？
Dialogue: 0,0:19:22.73,0:19:23.87,英文,,0,0,0,,Did this die
Dialogue: 0,0:19:22.73,0:19:23.87,中文,,0,0,0,,这个死了吗？
Dialogue: 0,0:19:23.87,0:19:25.21,英文,,0,0,0,,I think we can hear you.
Dialogue: 0,0:19:23.87,0:19:25.21,中文,,0,0,0,,我觉得我们能听到你
Dialogue: 0,0:19:25.21,0:19:26.13,英文,,0,0,0,,I'll just keep going.
Dialogue: 0,0:19:25.21,0:19:26.13,中文,,0,0,0,,我就继续了
Dialogue: 0,0:19:26.13,0:19:27.21,英文,,0,0,0,,If people complain, I'll let you know.
Dialogue: 0,0:19:26.13,0:19:27.21,中文,,0,0,0,,如果有人抱怨 我会告诉你的
Dialogue: 0,0:19:27.21,0:19:31.88,英文,,0,0,0,,All right.
Dialogue: 0,0:19:31.88,0:19:33.36,英文,,0,0,0,,There's actually a few more operations.
Dialogue: 0,0:19:31.88,0:19:33.36,中文,,0,0,0,,其实还有几个操作
Dialogue: 0,0:19:33.36,0:19:35.15,英文,,0,0,0,,We have some subtraction going on here.
Dialogue: 0,0:19:33.36,0:19:35.15,中文,,0,0,0,,这里有一些减法运算
Dialogue: 0,0:19:35.15,0:19:37.01,英文,,0,0,0,,We have some addition going on here.
Dialogue: 0,0:19:35.15,0:19:37.01,中文,,0,0,0,,这里有一些加法运算
Dialogue: 0,0:19:37.01,0:19:43.59,英文,,0,0,0,,But overall, for most of these operations, we can have these values.
Dialogue: 0,0:19:37.01,0:19:43.59,中文,,0,0,0,,但总的来说 对于大多数这些操作 我们可以有这些值
Dialogue: 0,0:19:43.59,0:19:48.01,英文,,0,0,0,,If you go through these, you can see exactly how many of these.
Dialogue: 0,0:19:43.59,0:19:48.01,中文,,0,0,0,,如果你逐个检查这些 你就可以确切地知道有多少个这样的
Dialogue: 0,0:19:48.01,0:19:56.45,英文,,0,0,0,,It actually isn't always going up to n, because sometimes when we just find inequality in the first step, then we just return true immediately.
Dialogue: 0,0:19:48.01,0:19:56.45,中文,,0,0,0,,事实上 并不总是一直到 N 因为有时当我们在第一步就发现不等式时 我们会立即返回 true
Dialogue: 0,0:19:56.45,0:20:00.65,英文,,0,0,0,,So we leave the loop early.
Dialogue: 0,0:19:56.45,0:20:00.65,中文,,0,0,0,,我们提前退出循环
Dialogue: 0,0:20:00.65,0:20:04.47,英文,,0,0,0,,Sometimes we get lucky.
Dialogue: 0,0:20:00.65,0:20:04.47,中文,,0,0,0,,有时候我们会幸运的
Dialogue: 0,0:20:04.47,0:20:10.13,英文,,0,0,0,,So now, if you did this and you just got off by a few, that's fine.
Dialogue: 0,0:20:04.47,0:20:10.13,中文,,0,0,0,,现在 如果你这样做 只是差了一点 那没关系
Dialogue: 0,0:20:10.13,0:20:14.61,英文,,0,0,0,,It doesn't really matter, these off by one errors in this case.
Dialogue: 0,0:20:10.13,0:20:14.61,中文,,0,0,0,,这并不重要 在这种情况下 这些差一的错误
Dialogue: 0,0:20:14.61,0:20:18.10,英文,,0,0,0,,In the grand scheme of things, one addition is one nanosecond worth of time.
Dialogue: 0,0:20:14.61,0:20:18.10,中文,,0,0,0,,在大局上 一个加法就是一纳秒的时间
Dialogue: 0,0:20:18.10,0:20:23.00,英文,,0,0,0,,So it doesn't really matter if you miss one or two.
Dialogue: 0,0:20:18.10,0:20:23.00,中文,,0,0,0,,如果你错过了一两个 也没关系
Dialogue: 0,0:20:23.00,0:20:27.24,英文,,0,0,0,,Any questions up to here
Dialogue: 0,0:20:23.00,0:20:27.24,中文,,0,0,0,,到这里有任何问题吗？
Dialogue: 0,0:20:27.24,0:20:31.95,英文,,0,0,0,,Yeah
Dialogue: 0,0:20:27.24,0:20:31.95,中文,,0,0,0,,是的？
Dialogue: 0,0:20:31.95,0:20:36.31,英文,,0,0,0,,Can we elaborate on why Python was slower than Java
Dialogue: 0,0:20:31.95,0:20:36.31,中文,,0,0,0,,为什么 Python 比 Java 慢得多 我们能详细说明一下吗？
Dialogue: 0,0:20:36.31,0:20:43.72,英文,,0,0,0,,This isn't particularly relevant to this course, but ultimately, Python is just a slow language.
Dialogue: 0,0:20:36.31,0:20:43.72,中文,,0,0,0,,这并不是这门课程特别相关的内容 但归根结底 Python 只是一种慢语言而已
Dialogue: 0,0:20:43.72,0:20:51.00,英文,,0,0,0,,It's designed to be easy to write code in, which means that the computer has to do more to interpret what you're trying to say.
Dialogue: 0,0:20:43.72,0:20:51.00,中文,,0,0,0,,它的设计初衷是易于编写代码 这意味着计算机必须做更多的工作来解释你想说的内容
Dialogue: 0,0:20:51.00,0:20:54.95,英文,,0,0,0,,And when that happens, it ends up being way more slower.
Dialogue: 0,0:20:51.00,0:20:54.95,中文,,0,0,0,,当这种情况发生时 它变得慢得多
Dialogue: 0,0:20:54.95,0:21:06.25,英文,,0,0,0,,Java is a compiled language, which means that what it does is it first translates all the code into something that the computer can understand better, and then it does that.
Dialogue: 0,0:20:54.95,0:21:06.25,中文,,0,0,0,,Java 是一种编译语言 这意味着它首先将所有代码翻译成计算机更易于理解的内容 然后执行
Dialogue: 0,0:21:06.25,0:21:09.37,英文,,0,0,0,,So to use an analogy, Python is like an interpretive language.
Dialogue: 0,0:21:06.25,0:21:09.37,中文,,0,0,0,,用类比来说 Python 就像一种解释性语言
Dialogue: 0,0:21:09.37,0:21:17.57,英文,,0,0,0,,It's like you're reading a book in Japanese or Chinese and then saying it in English to someone.
Dialogue: 0,0:21:09.37,0:21:17.57,中文,,0,0,0,,就像你用日语或中文读书然后对别人说英语一样
Dialogue: 0,0:21:17.57,0:21:19.70,英文,,0,0,0,,You're translating in English in real time.
Dialogue: 0,0:21:17.57,0:21:19.70,中文,,0,0,0,,你正在实时翻译英文
Dialogue: 0,0:21:19.70,0:21:26.08,英文,,0,0,0,,Whereas the compiled version is someone took that Chinese book, wrote it in English, and you're reading the English book.
Dialogue: 0,0:21:19.70,0:21:26.08,中文,,0,0,0,,而编译版本是有人拿那本中文书 用英文写了一遍 你现在读的是那本英文书
Dialogue: 0,0:21:26.08,0:21:32.10,英文,,0,0,0,,It's faster to read the English book directly than it is to be translating in time from Chinese.
Dialogue: 0,0:21:26.08,0:21:32.10,中文,,0,0,0,,直接阅读英文书比实时从中文翻译更快
Dialogue: 0,0:21:32.10,0:21:34.81,英文,,0,0,0,,Yeah.
Dialogue: 0,0:21:32.10,0:21:34.81,中文,,0,0,0,,是的
Dialogue: 0,0:21:34.81,0:21:37.11,英文,,0,0,0,,Any other questions
Dialogue: 0,0:21:34.81,0:21:37.11,中文,,0,0,0,,还有其他问题吗？
Dialogue: 0,0:21:37.11,0:21:49.19,英文,,0,0,0,,Yeah
Dialogue: 0,0:21:37.11,0:21:49.19,中文,,0,0,0,,嗯？
Dialogue: 0,0:21:49.19,0:21:54.30,英文,,0,0,0,,Yeah, Python is interpreted in C. Yeah, that is true.
Dialogue: 0,0:21:49.19,0:21:54.30,中文,,0,0,0,,是的 Python是用C解释的 是的 没错
Dialogue: 0,0:21:54.30,0:21:58.68,英文,,0,0,0,,But that basically means there's a C program that's running your Python code.
Dialogue: 0,0:21:54.30,0:21:58.68,中文,,0,0,0,,但这基本上意味着有一个运行你的Python代码的C程序
Dialogue: 0,0:21:58.68,0:22:04.41,英文,,0,0,0,,The C program has to do that translation in real time.
Dialogue: 0,0:21:58.68,0:22:04.41,中文,,0,0,0,,C程序必须实时进行翻译
Dialogue: 0,0:22:04.41,0:22:04.85,英文,,0,0,0,,Keep it moving.
Dialogue: 0,0:22:04.41,0:22:04.85,中文,,0,0,0,,继续前进
Dialogue: 0,0:22:04.85,0:22:05.85,英文,,0,0,0,,All right.
Dialogue: 0,0:22:05.85,0:22:07.33,英文,,0,0,0,,It's interesting, though.
Dialogue: 0,0:22:05.85,0:22:07.33,中文,,0,0,0,,不过很有趣
Dialogue: 0,0:22:07.33,0:22:08.77,英文,,0,0,0,,It is.
Dialogue: 0,0:22:07.33,0:22:08.77,中文,,0,0,0,,确实如此
Dialogue: 0,0:22:08.77,0:22:15.84,英文,,0,0,0,,So just looking at this, can we say quickly which one's better
Dialogue: 0,0:22:08.77,0:22:15.84,中文,,0,0,0,,光看这个 我们能快速地说哪个更好吗？
Dialogue: 0,0:22:15.84,0:22:16.68,英文,,0,0,0,,Yes
Dialogue: 0,0:22:15.84,0:22:16.68,中文,,0,0,0,,是吗？
Dialogue: 0,0:22:16.68,0:22:18.28,英文,,0,0,0,,Which one's better
Dialogue: 0,0:22:16.68,0:22:18.28,中文,,0,0,0,,哪个更好？
Dialogue: 0,0:22:18.28,0:22:19.02,英文,,0,0,0,,DUP2.
Dialogue: 0,0:22:18.28,0:22:19.02,中文,,0,0,0,,dup 2
Dialogue: 0,0:22:19.02,0:22:22.86,英文,,0,0,0,,Why
Dialogue: 0,0:22:19.02,0:22:22.86,中文,,0,0,0,,为什么？
Dialogue: 0,0:22:22.86,0:22:24.12,英文,,0,0,0,,Yeah, these are smaller numbers.
Dialogue: 0,0:22:22.86,0:22:24.12,中文,,0,0,0,,是的 这些数字更小
Dialogue: 0,0:22:24.12,0:22:30.60,英文,,0,0,0,,50 million is a lot larger than 10,000.
Dialogue: 0,0:22:24.12,0:22:30.60,中文,,0,0,0,,5000万比1万大得多
Dialogue: 0,0:22:30.60,0:22:39.33,英文,,0,0,0,,But the better answer is, if I add all of these up, then we get something that's like n squared plus 3n plus 2 over 2.
Dialogue: 0,0:22:30.60,0:22:39.33,中文,,0,0,0,,但更好的答案是 如果我把这些全部加起来 我们得到的就像N^2加3N加2再除以2
Dialogue: 0,0:22:39.33,0:22:43.69,英文,,0,0,0,,That's way bigger than n is going to be.
Dialogue: 0,0:22:39.33,0:22:43.69,中文,,0,0,0,,这比 N 将要大得多
Dialogue: 0,0:22:43.69,0:22:48.46,英文,,0,0,0,,So n is going to definitely be larger than this.
Dialogue: 0,0:22:43.69,0:22:48.46,中文,,0,0,0,,所以 N 肯定会比这个大
Dialogue: 0,0:22:48.46,0:22:51.62,英文,,0,0,0,,A better statement is I don't care about all of these.
Dialogue: 0,0:22:48.46,0:22:51.62,中文,,0,0,0,,一个更好的说法是我不关心所有这些
Dialogue: 0,0:22:51.62,0:22:57.97,英文,,0,0,0,,I care just about the fact that the n squared part grows way faster than the n part.
Dialogue: 0,0:22:51.62,0:22:57.97,中文,,0,0,0,,我只关心 N^2的增长比 N 部分快得多
Dialogue: 0,0:22:57.97,0:23:01.02,英文,,0,0,0,,n squared grows at a rate that's a parabola.
Dialogue: 0,0:22:57.97,0:23:01.02,中文,,0,0,0,,N^2的增长是一个抛物线
Dialogue: 0,0:23:01.02,0:23:09.60,英文,,0,0,0,,As you get larger, it gets steeper and steeper, whereas a line just stays the same steepness over time.
Dialogue: 0,0:23:01.02,0:23:09.60,中文,,0,0,0,,随着变量增大 它变得越来越陡峭 而直线随着时间保持相同的陡度
Dialogue: 0,0:23:09.60,0:23:16.49,英文,,0,0,0,,Now, when we cover asymptotic analysis, we only really care about the large input sizes.
Dialogue: 0,0:23:09.60,0:23:16.49,中文,,0,0,0,,现在 当我们涉及渐近分析时 我们只关心大规模的输入
Dialogue: 0,0:23:16.49,0:23:19.23,英文,,0,0,0,,For those small inputs, it ran in less than a second.
Dialogue: 0,0:23:16.49,0:23:19.23,中文,,0,0,0,,对于那些小输入 它在不到一秒的时间内运行完毕
Dialogue: 0,0:23:19.23,0:23:24.41,英文,,0,0,0,,It doesn't really matter too much to us if we're particularly efficient or inefficient.
Dialogue: 0,0:23:19.23,0:23:24.41,中文,,0,0,0,,对我们来说 是否特别高效或低效并不太重要
Dialogue: 0,0:23:24.41,0:23:35.77,英文,,0,0,0,,But if we have a lot of things, like billions of particles, billions of values, then that's when we start worrying a lot more about how slow things get.
Dialogue: 0,0:23:24.41,0:23:35.77,中文,,0,0,0,,但是如果我们有很多东西 比如数十亿个粒子 数十亿个值 那就是我们开始更担心速度变慢的时候
Dialogue: 0,0:23:35.77,0:23:46.45,英文,,0,0,0,,Generally speaking, we look for algorithms which scale better, so things that look more like lines, than things that scale poorly, things that look like parabolas.
Dialogue: 0,0:23:35.77,0:23:46.45,中文,,0,0,0,,一般来说 我们寻找更好扩展的算法 更像线条的东西 而不是扩展较差的东西 看起来像抛物线的东西
Dialogue: 0,0:23:46.45,0:23:49.71,英文,,0,0,0,,To kind of show this, let's look at an example here.
Dialogue: 0,0:23:46.45,0:23:49.71,中文,,0,0,0,,为了更好地展示这一点 让我们看一个例子
Dialogue: 0,0:23:49.71,0:23:55.52,英文,,0,0,0,,Let's imagine that we have two functions that do the same thing.
Dialogue: 0,0:23:49.71,0:23:55.52,中文,,0,0,0,,假设我们有两个执行相同任务的函数
Dialogue: 0,0:23:55.52,0:23:58.96,英文,,0,0,0,,One of them takes 2n squared time to run.
Dialogue: 0,0:23:55.52,0:23:58.96,中文,,0,0,0,,其中一个需要2N^2的时间来运行
Dialogue: 0,0:23:58.96,0:24:03.26,英文,,0,0,0,,The other one takes 500n time to run.
Dialogue: 0,0:23:58.96,0:24:03.26,中文,,0,0,0,,另一个需要 500N 的时间来运行
Dialogue: 0,0:24:03.26,0:24:12.68,英文,,0,0,0,,So if n was, let's say, 5, Zerp2, 500 times 5, that's 2,500 units of time.
Dialogue: 0,0:24:03.26,0:24:12.68,中文,,0,0,0,,如果 N 是 比方说 5 zerp2 500 乘以 5 那就是 2,500 单位的时间
Dialogue: 0,0:24:12.68,0:24:14.59,英文,,0,0,0,,2n squared, that's 2 times 5 squared.
Dialogue: 0,0:24:12.68,0:24:14.59,中文,,0,0,0,,2N^2 那就是 2 乘以 5^2
Dialogue: 0,0:24:14.59,0:24:17.79,英文,,0,0,0,,That's 50 operations.
Dialogue: 0,0:24:14.59,0:24:17.79,中文,,0,0,0,,那就是 50 次操作
Dialogue: 0,0:24:17.79,0:24:23.61,英文,,0,0,0,,So which is better, Zerp1 or Zerp2
Dialogue: 0,0:24:17.79,0:24:23.61,中文,,0,0,0,,那么哪个更好 zerp1 还是 zerp2？
Dialogue: 0,0:24:23.61,0:24:25.31,英文,,0,0,0,,How many people say Zerp1
Dialogue: 0,0:24:23.61,0:24:25.31,中文,,0,0,0,,有多少人选择 zerp1？
Dialogue: 0,0:24:25.31,0:24:29.05,英文,,0,0,0,,It took only 50 steps to do n equals 5.
Dialogue: 0,0:24:25.31,0:24:29.05,中文,,0,0,0,,只需 50 步就能完成 N 等于 5
Dialogue: 0,0:24:29.05,0:24:30.39,英文,,0,0,0,,How many people say ZURP 2
Dialogue: 0,0:24:29.05,0:24:30.39,中文,,0,0,0,,有多少人说 zerp2？
Dialogue: 0,0:24:30.39,0:24:32.81,英文,,0,0,0,,It took 2,500 steps to do.
Dialogue: 0,0:24:30.39,0:24:32.81,中文,,0,0,0,,这需要走 2,500 步才能完成
Dialogue: 0,0:24:32.81,0:24:38.58,英文,,0,0,0,,Why are you saying the 2,500 one is better than the 50 one
Dialogue: 0,0:24:32.81,0:24:38.58,中文,,0,0,0,,你为什么说 2,500 的比 50 的好？
Dialogue: 0,0:24:38.58,0:24:39.30,英文,,0,0,0,,Yeah.
Dialogue: 0,0:24:38.58,0:24:39.30,中文,,0,0,0,,是的
Dialogue: 0,0:24:39.30,0:24:42.24,英文,,0,0,0,,For these small values, ZURP 1 might be better.
Dialogue: 0,0:24:39.30,0:24:42.24,中文,,0,0,0,,对于这些小值 zerp1 可能更好一些
Dialogue: 0,0:24:42.24,0:24:49.04,英文,,0,0,0,,But as it gets bigger and bigger, it doesn't compare.
Dialogue: 0,0:24:42.24,0:24:49.04,中文,,0,0,0,,但随着值越来越大 它就没法比了
Dialogue: 0,0:24:49.04,0:24:53.27,英文,,0,0,0,,Eventually, ZURP 1 is just going to overtake ZURP 2 by far.
Dialogue: 0,0:24:49.04,0:24:53.27,中文,,0,0,0,,最终 zerp1 会远远超过 zerp2
Dialogue: 0,0:24:53.27,0:24:57.07,英文,,0,0,0,,By the time we get to n equals 1.
Dialogue: 0,0:24:53.27,0:24:57.07,中文,,0,0,0,,当我们到达N等于1的时候
Dialogue: 0,0:24:57.07,0:24:59.01,英文,,0,0,0,,250, they end up being the exact same value.
Dialogue: 0,0:24:57.07,0:24:59.01,中文,,0,0,0,,250时 它们最终变成了完全相同的值
Dialogue: 0,0:24:59.01,0:25:03.68,英文,,0,0,0,,By the time we get to n equals 1,000, that's 2 million times for ZERP1.
Dialogue: 0,0:24:59.01,0:25:03.68,中文,,0,0,0,,当我们到达N等于1,000时 这对于zerp1来说是2百万次
Dialogue: 0,0:25:03.68,0:25:05.76,英文,,0,0,0,,It's only 500,000 for ZERP2.
Dialogue: 0,0:25:03.68,0:25:05.76,中文,,0,0,0,,对于zerp2来说只有50万次
Dialogue: 0,0:25:05.76,0:25:08.12,英文,,0,0,0,,ZERP2 is four times faster at that point.
Dialogue: 0,0:25:05.76,0:25:08.12,中文,,0,0,0,,在那一点上 zerp2快了四倍
Dialogue: 0,0:25:08.12,0:25:12.95,英文,,0,0,0,,Keep going up, that discrepancy only grows.
Dialogue: 0,0:25:08.12,0:25:12.95,中文,,0,0,0,,继续增加 这种差异只会增加
Dialogue: 0,0:25:12.95,0:25:18.15,英文,,0,0,0,,We'll talk about this as the order of growth of the runtime.
Dialogue: 0,0:25:12.95,0:25:18.15,中文,,0,0,0,,我们将把这称为运行时间的增长阶
Dialogue: 0,0:25:18.15,0:25:20.77,英文,,0,0,0,,So a parabola grows at a rate of n squared.
Dialogue: 0,0:25:18.15,0:25:20.77,中文,,0,0,0,,抛物线的增长速度是N^2
Dialogue: 0,0:25:20.77,0:25:31.73,英文,,0,0,0,,A line grows at a rate of n. And that's largely the determining factor as to how long a program runs when we get to these really large numbers.
Dialogue: 0,0:25:20.77,0:25:31.73,中文,,0,0,0,,一条线的增长速度是N  这在我们处理这些非常大的数字时 基本上是决定程序运行时间的主要因素
Dialogue: 0,0:25:31.73,0:25:39.42,英文,,0,0,0,,So for n equals theta of n, for an n runtime program, basically you can do it for whatever size you need.
Dialogue: 0,0:25:31.73,0:25:39.42,中文,,0,0,0,,对于N等于N的 θ 的运行时程序 基本上你可以根据需要做任何大小的计算
Dialogue: 0,0:25:39.42,0:25:43.81,英文,,0,0,0,,10, 1,000, a million, that's like a second at a time each.
Dialogue: 0,0:25:39.42,0:25:43.81,中文,,0,0,0,,10、1,000、一百万 每次都像一秒钟
Dialogue: 0,0:25:43.81,0:25:45.49,英文,,0,0,0,,That's fine.
Dialogue: 0,0:25:43.81,0:25:45.49,中文,,0,0,0,,那很好
Dialogue: 0,0:25:45.49,0:25:48.99,英文,,0,0,0,,n log n, that's also reasonably good.
Dialogue: 0,0:25:45.49,0:25:48.99,中文,,0,0,0,,N log n 这也是相当不错的
Dialogue: 0,0:25:48.99,0:25:55.38,英文,,0,0,0,,n squared, by the time you reach this, if you want to deal with the size 100,000 thing, it takes three hours to run.
Dialogue: 0,0:25:48.99,0:25:55.38,中文,,0,0,0,,N^2 当你达到这个时候 如果你想处理大小为100,000的东西 运行需要三个小时
Dialogue: 0,0:25:55.38,0:25:59.66,英文,,0,0,0,,which is just too slow to actually be reasonable.
Dialogue: 0,0:25:55.38,0:25:59.66,中文,,0,0,0,,速度太慢了 实际上根本不合理
Dialogue: 0,0:25:59.66,0:26:05.19,英文,,0,0,0,,So if you get an n squared algorithm, an n algorithm is going to be way better.
Dialogue: 0,0:25:59.66,0:26:05.19,中文,,0,0,0,,如果你得到一个N^2的算法 一个N的算法会好得多
Dialogue: 0,0:26:05.19,0:26:18.15,英文,,0,0,0,,And if you can't even do n squared, if you need n cubed, you're going to be spending 32 years just computing 100,000 items, which will take forever.
Dialogue: 0,0:26:05.19,0:26:18.15,中文,,0,0,0,,如果你甚至不能做N^2 如果你需要N^3 你将花费32年来计算100,000个项目 这将永远持续下去
Dialogue: 0,0:26:18.15,0:26:26.39,英文,,0,0,0,,So if we did this, we can definitely see that DUP 2 was way better than DUP 1.
Dialogue: 0,0:26:18.15,0:26:26.39,中文,,0,0,0,,如果我们这样做 我们肯定会看到dup 2比dup 1好得多
Dialogue: 0,0:26:26.39,0:26:28.61,英文,,0,0,0,,Was this simple, though
Dialogue: 0,0:26:26.39,0:26:28.61,中文,,0,0,0,,这简单吗？
Dialogue: 0,0:26:28.61,0:26:31.38,英文,,0,0,0,,Is this simple to do this math
Dialogue: 0,0:26:28.61,0:26:31.38,中文,,0,0,0,,这个数学很简单吗？
Dialogue: 0,0:26:31.38,0:26:32.80,英文,,0,0,0,,No.
Dialogue: 0,0:26:31.38,0:26:32.80,中文,,0,0,0,,没有
Dialogue: 0,0:26:32.80,0:26:35.66,英文,,0,0,0,,Do you want to do this math
Dialogue: 0,0:26:32.80,0:26:35.66,中文,,0,0,0,,你想做这个数学题吗？
Dialogue: 0,0:26:35.66,0:26:36.46,英文,,0,0,0,,No.
Dialogue: 0,0:26:35.66,0:26:36.46,中文,,0,0,0,,不
Dialogue: 0,0:26:36.46,0:26:37.96,英文,,0,0,0,,I don't want to do this math either.
Dialogue: 0,0:26:36.46,0:26:37.96,中文,,0,0,0,,我也不想做这个数学题
Dialogue: 0,0:26:37.96,0:26:40.36,英文,,0,0,0,,Let's not do this math.
Dialogue: 0,0:26:37.96,0:26:40.36,中文,,0,0,0,,我们别做这个数学题了
Dialogue: 0,0:26:40.36,0:26:45.02,英文,,0,0,0,,So we're going to have to find a better way to do this.
Dialogue: 0,0:26:40.36,0:26:45.02,中文,,0,0,0,,我们得找到更好的方法来做这个
Dialogue: 0,0:26:45.02,0:26:54.95,英文,,0,0,0,,Now, we're going to do a few simplifications to try and see what constitutes the core underpinning of what's going on.
Dialogue: 0,0:26:45.02,0:26:54.95,中文,,0,0,0,,现在 我们要做一些简化来尝试看看构成正在发生的核心支撑的是什么
Dialogue: 0,0:26:54.95,0:26:58.75,英文,,0,0,0,,So in order to be simple, we need to simplify this.
Dialogue: 0,0:26:54.95,0:26:58.75,中文,,0,0,0,,为了简单起见 我们需要简化这个
Dialogue: 0,0:26:58.75,0:27:01.67,英文,,0,0,0,,But we still need to maintain our mathematical rigor.
Dialogue: 0,0:26:58.75,0:27:01.67,中文,,0,0,0,,但是我们仍然需要保持我们的数学严谨度
Dialogue: 0,0:27:01.67,0:27:04.59,英文,,0,0,0,,So we'll be looking at every single operation that we do.
Dialogue: 0,0:27:01.67,0:27:04.59,中文,,0,0,0,,我们将会审视我们所做的每一个操作
Dialogue: 0,0:27:04.59,0:27:09.55,英文,,0,0,0,,And we're going to try to simplify things one step at a time.
Dialogue: 0,0:27:04.59,0:27:09.55,中文,,0,0,0,,而我们将会尝试一步一步地简化事情
Dialogue: 0,0:27:09.55,0:27:13.41,英文,,0,0,0,,So our first step is we're just going to ignore our best case scenarios.
Dialogue: 0,0:27:09.55,0:27:13.41,中文,,0,0,0,,我们的第一步是我们将只忽略我们的最佳情况
Dialogue: 0,0:27:13.41,0:27:15.73,英文,,0,0,0,,We're only looking at our worst case.
Dialogue: 0,0:27:13.41,0:27:15.73,中文,,0,0,0,,我们只看最坏的情况
Dialogue: 0,0:27:15.73,0:27:21.94,英文,,0,0,0,,Why is this OK
Dialogue: 0,0:27:15.73,0:27:21.94,中文,,0,0,0,,为什么这样做没问题？
Dialogue: 0,0:27:21.94,0:27:26.36,英文,,0,0,0,,Yeah, the worst case is kind of like the slowest possible thing.
Dialogue: 0,0:27:21.94,0:27:26.36,中文,,0,0,0,,是的 最坏的情况有点像可能发生的最慢的事情
Dialogue: 0,0:27:26.36,0:27:32.29,英文,,0,0,0,,We kind of want to say only that's important, because if it's better, then we just get lucky.
Dialogue: 0,0:27:26.36,0:27:32.29,中文,,0,0,0,,我们有点想说只有重要的 因为如果更好 那我们就是幸运的
Dialogue: 0,0:27:32.29,0:27:33.85,英文,,0,0,0,,We're fine with that.
Dialogue: 0,0:27:32.29,0:27:33.85,中文,,0,0,0,,我们对此没问题
Dialogue: 0,0:27:33.85,0:27:35.83,英文,,0,0,0,,We will see some exceptions in this course.
Dialogue: 0,0:27:33.85,0:27:35.83,中文,,0,0,0,,在这门课程中 我们会看到一些例外情况
Dialogue: 0,0:27:35.83,0:27:41.30,英文,,0,0,0,,But in general, we do look only at this worst case runtime.
Dialogue: 0,0:27:35.83,0:27:41.30,中文,,0,0,0,,但总体上 我们只关注最坏情况的运行时间
Dialogue: 0,0:27:41.30,0:27:47.91,英文,,0,0,0,,In this case, for this duplication function, our worst case will happen when we have no duplicates at all.
Dialogue: 0,0:27:41.30,0:27:47.91,中文,,0,0,0,,在这种情况下 对于这个重复函数 我们的最坏情况将发生在根本没有重复的情况下
Dialogue: 0,0:27:47.91,0:27:52.54,英文,,0,0,0,,Those were the tests that we had running in the Java and Python.
Dialogue: 0,0:27:47.91,0:27:52.54,中文,,0,0,0,,那些是我们在Java和Python中运行的测试
Dialogue: 0,0:27:52.54,0:28:00.42,英文,,0,0,0,,They were designed to have no duplicates whatsoever at all.
Dialogue: 0,0:27:52.54,0:28:00.42,中文,,0,0,0,,它们被设计成根本没有任何重复
Dialogue: 0,0:28:00.42,0:28:03.68,英文,,0,0,0,,So this is already kind of simple.
Dialogue: 0,0:28:00.42,0:28:03.68,中文,,0,0,0,,这已经相当简单了
Dialogue: 0,0:28:03.68,0:28:07.16,英文,,0,0,0,,And let's just do a quick math check here.
Dialogue: 0,0:28:03.68,0:28:07.16,中文,,0,0,0,,我们来快速做个数学检查吧
Dialogue: 0,0:28:07.16,0:28:17.71,英文,,0,0,0,,If we were to run this algorithm, what do you think the order of growth for this function would be
Dialogue: 0,0:28:07.16,0:28:17.71,中文,,0,0,0,,如果我们运行这个算法 你认为这个函数的增长顺序会是什么样的？
Dialogue: 0,0:28:17.71,0:28:19.27,英文,,0,0,0,,I'll give, let's say, a minute.
Dialogue: 0,0:28:17.71,0:28:19.27,中文,,0,0,0,,我给大家一分钟
Dialogue: 0,0:28:19.27,0:28:26.51,英文,,0,0,0,,Feel free to talk with your neighbors.
Dialogue: 0,0:28:19.27,0:28:26.51,中文,,0,0,0,,随意和你的邻居交流
Dialogue: 0,0:28:26.51,0:28:31.00,英文,,0,0,0,,Yeah
Dialogue: 0,0:28:26.51,0:28:31.00,中文,,0,0,0,,是吗？
Dialogue: 0,0:28:31.00,0:28:32.94,英文,,0,0,0,,How's Zoom chat going
Dialogue: 0,0:28:31.00,0:28:32.94,中文,,0,0,0,,Zoom 聊得怎么样？
Dialogue: 0,0:28:32.94,0:28:35.06,英文,,0,0,0,,Not much.
Dialogue: 0,0:28:32.94,0:28:35.06,中文,,0,0,0,,没什么
Dialogue: 0,0:28:35.06,0:28:54.54,英文,,0,0,0,,OK.
Dialogue: 0,0:28:54.54,0:29:15.84,英文,,0,0,0,,Why is there a lot of yeses at 1.30
Dialogue: 0,0:28:54.54,0:29:15.84,中文,,0,0,0,,为什么1.30处有很多“是”呢？
Dialogue: 0,0:29:15.84,0:29:17.21,英文,,0,0,0,,There's another question over there.
Dialogue: 0,0:29:15.84,0:29:17.21,中文,,0,0,0,,那边还有另一个问题
Dialogue: 0,0:29:17.21,0:29:17.85,英文,,0,0,0,,All right.
Dialogue: 0,0:29:17.85,0:29:18.77,英文,,0,0,0,,Let's bring everyone back.
Dialogue: 0,0:29:17.85,0:29:18.77,中文,,0,0,0,,让我们把大家召回来
Dialogue: 0,0:29:18.77,0:29:20.51,英文,,0,0,0,,How many people say A, it's linear
Dialogue: 0,0:29:18.77,0:29:20.51,中文,,0,0,0,,有多少人说A 这是线性的？
Dialogue: 0,0:29:20.51,0:29:22.51,英文,,0,0,0,,How many people say B, it's quadratic
Dialogue: 0,0:29:20.51,0:29:22.51,中文,,0,0,0,,多少人说B 它是二次的？
Dialogue: 0,0:29:22.51,0:29:46.69,英文,,0,0,0,,How many people say C, it's cubic
Dialogue: 0,0:29:22.51,0:29:46.69,中文,,0,0,0,,多少人说C 它是三次的？
Dialogue: 0,0:29:46.69,0:29:50.10,英文,,0,0,0,,How many people say D, it's sextic
Dialogue: 0,0:29:46.69,0:29:50.10,中文,,0,0,0,,多少人说D 它是六次的？
Dialogue: 0,0:29:50.10,0:29:53.58,英文,,0,0,0,,All right, seems like the general consensus is cubic.
Dialogue: 0,0:29:50.10,0:29:53.58,中文,,0,0,0,,似乎普遍的共识是三次的
Dialogue: 0,0:29:53.58,0:29:55.58,英文,,0,0,0,,And yeah, it's cubic.
Dialogue: 0,0:29:53.58,0:29:55.58,中文,,0,0,0,,是的 它是三次的
Dialogue: 0,0:29:55.58,0:29:58.27,英文,,0,0,0,,Why is it cubic
Dialogue: 0,0:29:55.58,0:29:58.27,中文,,0,0,0,,为什么是三次的？
Dialogue: 0,0:29:58.27,0:30:00.65,英文,,0,0,0,,Well, this largest thing is an n cubed.
Dialogue: 0,0:29:58.27,0:30:00.65,中文,,0,0,0,,这个最大的东西是N的三次方
Dialogue: 0,0:30:00.65,0:30:02.95,英文,,0,0,0,,All these others are smaller.
Dialogue: 0,0:30:00.65,0:30:02.95,中文,,0,0,0,,所有其他都更小
Dialogue: 0,0:30:02.95,0:30:13.02,英文,,0,0,0,,And in fact, the reason why it's true is that as n gets larger and larger, if we just math it out,
Dialogue: 0,0:30:02.95,0:30:23.02,中文,,0,0,0,,事实上 之所以成立的原因是 随着N变得越来越大 如果我们仅仅数学计算
Dialogue: 0,0:30:13.02,0:30:23.02,英文,,0,0,0,,regardless of how long each of these independently takes, eventually this n cubed component is going to grow faster than all the others.
Dialogue: 0,0:30:23.02,0:30:27.28,英文,,0,0,0,,And n cubed is just going to grow strictly faster than n squared.
Dialogue: 0,0:30:23.02,0:30:13.02,中文,,0,0,0,,不管每个独立的部分花费多长时间 最终这个N^3项将增长得比其他所有项都要快
Dialogue: 0,0:30:23.02,0:30:27.28,中文,,0,0,0,,而N^3项只会比N^2项增长得更快
Dialogue: 0,0:30:27.28,0:30:35.76,英文,,0,0,0,,So eventually, any constant or coefficients ends up becoming less and less important as n gets large.
Dialogue: 0,0:30:27.28,0:30:35.76,中文,,0,0,0,,因此 随着N变大 任何常数或系数最终都变得越来越不重要
Dialogue: 0,0:30:35.76,0:30:40.65,英文,,0,0,0,,So this is actually true regardless of how long greater than, less than, or and takes.
Dialogue: 0,0:30:35.76,0:30:40.65,中文,,0,0,0,,这实际上是真实的 无论大于、小于还是等于需要多长时间
Dialogue: 0,0:30:40.65,0:30:45.78,英文,,0,0,0,,If you imagine that less than takes five seconds to run and greater than takes one nanosecond,
Dialogue: 0,0:30:40.65,0:30:45.78,中文,,0,0,0,,如果你想象一下小于需要五秒运行 而大于只需要一纳秒
Dialogue: 0,0:30:45.78,0:30:47.44,英文,,0,0,0,,That's still fine.
Dialogue: 0,0:30:45.78,0:30:47.44,中文,,0,0,0,,那还是没问题的
Dialogue: 0,0:30:47.44,0:30:53.78,英文,,0,0,0,,It just means that the less than takes 5 billion times a larger coefficient.
Dialogue: 0,0:30:47.44,0:30:53.78,中文,,0,0,0,,这只意味着小于号的系数需要乘以50亿倍
Dialogue: 0,0:30:53.78,0:31:02.80,英文,,0,0,0,,But if n gets to, like, 1 trillion or quadrillion or 1 Google, then those n's are going to be way larger than even, like, a few billion.
Dialogue: 0,0:30:53.78,0:31:02.80,中文,,0,0,0,,但如果N增长到1万亿、1千万亿或者1个谷歌 那么这些N的值会远远大于几十亿
Dialogue: 0,0:31:02.80,0:31:07.89,英文,,0,0,0,,The billion kind of gets rounded off.
Dialogue: 0,0:31:02.80,0:31:07.89,中文,,0,0,0,,十亿的数量级会被忽略
Dialogue: 0,0:31:07.89,0:31:14.15,英文,,0,0,0,,So we can kind of ignore all of these lower terms.
Dialogue: 0,0:31:07.89,0:31:14.15,中文,,0,0,0,,我们可以忽略所有这些较小的项
Dialogue: 0,0:31:14.15,0:31:26.38,英文,,0,0,0,,Like, if we have this 0.0000001 times n to the 2.00001, that's still eventually going to grow bigger than anything times n squared.
Dialogue: 0,0:31:14.15,0:31:26.38,中文,,0,0,0,,比如 如果我们有0.0000001乘以N的2.00001次方 这最终还是会比任何项乘以N^2要大
Dialogue: 0,0:31:26.38,0:31:34.50,英文,,0,0,0,,So for a sufficiently large n, only for a really large n, only that largest term is going to actually matter.
Dialogue: 0,0:31:26.38,0:31:34.50,中文,,0,0,0,,因此 对于足够大的N 只有那个最大的项才是真正重要的
Dialogue: 0,0:31:34.50,0:31:40.94,英文,,0,0,0,,We can just ignore all these small terms because we're only looking at these really large n values.
Dialogue: 0,0:31:34.50,0:31:40.94,中文,,0,0,0,,我们可以忽略所有这些小项 因为我们只关注那些非常大的N值
Dialogue: 0,0:31:40.94,0:31:43.90,英文,,0,0,0,,What else can we do
Dialogue: 0,0:31:40.94,0:31:43.90,中文,,0,0,0,,我们还能做什么？
Dialogue: 0,0:31:43.90,0:31:47.46,英文,,0,0,0,,If coefficients don't matter, then I can also ignore the coefficients.
Dialogue: 0,0:31:43.90,0:31:47.46,中文,,0,0,0,,如果系数不重要 那我也可以忽略系数
Dialogue: 0,0:31:47.46,0:31:50.11,英文,,0,0,0,,They're not going to affect how a shape looks.
Dialogue: 0,0:31:47.46,0:31:50.11,中文,,0,0,0,,它们不会影响形状的外观
Dialogue: 0,0:31:50.11,0:31:55.21,英文,,0,0,0,,A parabola is still a parabola if you're doing 2n squared or n squared.
Dialogue: 0,0:31:50.11,0:31:55.21,中文,,0,0,0,,如果你使用的是2N^2或N^2 抛物线仍然是抛物线
Dialogue: 0,0:31:55.21,0:32:04.29,英文,,0,0,0,,Now, these coefficients can also tend to change when you define what one operation actually is.
Dialogue: 0,0:31:55.21,0:32:04.29,中文,,0,0,0,,现在 当你定义一个操作时 这些系数也可能会发生变化
Dialogue: 0,0:32:04.29,0:32:07.99,英文,,0,0,0,,What if you did incrementing by two steps
Dialogue: 0,0:32:04.29,0:32:07.99,中文,,0,0,0,,如果你每次增加两个步骤会怎样？
Dialogue: 0,0:32:07.99,0:32:13.63,英文,,0,0,0,,You take a number, you retrieve it, you add a 1, and then you store it back into memory.
Dialogue: 0,0:32:07.99,0:32:13.63,中文,,0,0,0,,你拿一个数字 你检索它 你加1 然后你把它存回内存
Dialogue: 0,0:32:13.63,0:32:15.89,英文,,0,0,0,,Like, that's two steps in a way.
Dialogue: 0,0:32:13.63,0:32:15.89,中文,,0,0,0,,就像 从某种程度上说 这是两个步骤
Dialogue: 0,0:32:15.89,0:32:21.63,英文,,0,0,0,,So you could imagine that the increment actually counts as n squared steps instead of n squared over two steps.
Dialogue: 0,0:32:15.89,0:32:21.63,中文,,0,0,0,,你可以想象增量实际上是N^2步骤 而不是N^2的一半步骤
Dialogue: 0,0:32:21.63,0:32:35.36,英文,,0,0,0,,Because you're treating increment as two steps instead of one, you can do these kinds of weird things and show that basically any coefficient is reasonably true according to what you're doing.
Dialogue: 0,0:32:21.63,0:32:35.36,中文,,0,0,0,,因为你把增量视为两个步骤而不是一个 所以你可以做这种奇怪的事情 表明基本上任何系数都是合理的 根据你所做的事情
Dialogue: 0,0:32:35.36,0:32:39.16,英文,,0,0,0,,There are some branches of runtime analysis which do care about these coefficients.
Dialogue: 0,0:32:35.36,0:32:39.16,中文,,0,0,0,,有一些运行时分析的分支确实关心这些系数
Dialogue: 0,0:32:39.16,0:32:43.47,英文,,0,0,0,,So this is not something you can say in all cases.
Dialogue: 0,0:32:39.16,0:32:43.47,中文,,0,0,0,,这不是在所有情况下都可以说的事情
Dialogue: 0,0:32:43.47,0:32:46.73,英文,,0,0,0,,Just for this class, we can just ignore all these coefficients.
Dialogue: 0,0:32:43.47,0:32:46.73,中文,,0,0,0,,就这门课而言 我们可以忽略所有这些系数
Dialogue: 0,0:32:46.73,0:32:52.35,英文,,0,0,0,,In 61c, you'll talk about when coefficients are actually important.
Dialogue: 0,0:32:46.73,0:32:52.35,中文,,0,0,0,,在61c中 你会讨论系数实际上什么时候很重要
Dialogue: 0,0:32:52.35,0:32:56.89,英文,,0,0,0,,But you know, those tend to be a lot harder.
Dialogue: 0,0:32:52.35,0:32:56.89,中文,,0,0,0,,但你知道 那些往往更难一些
Dialogue: 0,0:32:56.89,0:33:01.76,英文,,0,0,0,,Because by doing this, we can also make this other simplification.
Dialogue: 0,0:32:56.89,0:33:01.76,中文,,0,0,0,,因为通过这样做 我们还可以做出另一种简化
Dialogue: 0,0:33:01.76,0:33:07.86,英文,,0,0,0,,Which is that if just splitting up two different operations ends up acting as if we doubled the runtime
Dialogue: 0,0:33:01.76,0:33:07.86,中文,,0,0,0,,也就是说 如果仅仅把两个不同的操作分开 结果就像我们把运行时间加倍了一样
Dialogue: 0,0:33:07.86,0:33:14.86,英文,,0,0,0,,and acts as a coefficient, we don't actually care about coefficients, then we can just say, you know what
Dialogue: 0,0:33:07.86,0:33:14.86,中文,,0,0,0,,并且起到了一个系数的作用 但实际上我们并不关心系数 那么我们可以说 你知道吗？
Dialogue: 0,0:33:14.86,0:33:17.86,英文,,0,0,0,,Every single operation we take, it's one time.
Dialogue: 0,0:33:14.86,0:33:17.86,中文,,0,0,0,,我们执行的每一个操作 都是一次
Dialogue: 0,0:33:17.86,0:33:19.24,英文,,0,0,0,,Less than, that's one time.
Dialogue: 0,0:33:17.86,0:33:19.24,中文,,0,0,0,,小于 一次
Dialogue: 0,0:33:19.24,0:33:20.32,英文,,0,0,0,,Increment, one time.
Dialogue: 0,0:33:19.24,0:33:20.32,中文,,0,0,0,,增量 一次
Dialogue: 0,0:33:20.32,0:33:21.64,英文,,0,0,0,,Equals is one time.
Dialogue: 0,0:33:20.32,0:33:21.64,中文,,0,0,0,,等于 一次
Dialogue: 0,0:33:21.64,0:33:23.70,英文,,0,0,0,,Array accesses is one time.
Dialogue: 0,0:33:21.64,0:33:23.70,中文,,0,0,0,,数组访问只计算一次
Dialogue: 0,0:33:23.70,0:33:30.71,英文,,0,0,0,,Because even if an increment takes like one nanosecond to run and an array access takes a million nanoseconds to run, those are just coefficients.
Dialogue: 0,0:33:23.70,0:33:30.71,中文,,0,0,0,,因为即使增量只需一纳秒运行 而数组访问需要一百万纳秒运行 这些只是系数
Dialogue: 0,0:33:30.71,0:33:32.77,英文,,0,0,0,,They're going to be removed anyway.
Dialogue: 0,0:33:30.71,0:33:32.77,中文,,0,0,0,,它们将被移除
Dialogue: 0,0:33:32.77,0:33:38.08,英文,,0,0,0,,So we can just count these as just one unit of time, one step.
Dialogue: 0,0:33:32.77,0:33:38.08,中文,,0,0,0,,我们可以将这些视为一个时间单位 一个步骤
Dialogue: 0,0:33:38.08,0:33:48.37,英文,,0,0,0,,This also kind of lets us pick what we consider to be primitive operations, like what we consider to be the simplest operation that exists on our system.
Dialogue: 0,0:33:38.08,0:33:48.37,中文,,0,0,0,,这也让我们可以选择我们认为是基本操作的东西 比如我们认为在我们系统中存在的最简单的操作
Dialogue: 0,0:33:48.37,0:33:53.19,英文,,0,0,0,,It does assume that our operations take constant time regardless of the input,
Dialogue: 0,0:33:48.37,0:33:53.19,中文,,0,0,0,,它假设我们的操作花费的时间是恒定的 不受输入的影响
Dialogue: 0,0:33:53.19,0:33:59.19,英文,,0,0,0,, like adding together two five-digit numbers takes the exact same time as adding together two one-million-digit numbers.
Dialogue: 0,0:33:53.19,0:33:59.19,中文,,0,0,0,,比如将两个五位数相加所花费的时间与将两个一百万位数相加所花费的时间是完全相同的
Dialogue: 0,0:33:59.19,0:34:01.31,英文,,0,0,0,,That's not always true.
Dialogue: 0,0:33:59.19,0:34:01.31,中文,,0,0,0,,这并不总是正确的
Dialogue: 0,0:34:01.31,0:34:06.88,英文,,0,0,0,,In some systems, or in some versions of this, you do take this into account.
Dialogue: 0,0:34:01.31,0:34:06.88,中文,,0,0,0,,在某些系统中 或者在某些版本中 你确实要考虑这一点
Dialogue: 0,0:34:06.88,0:34:17.27,英文,,0,0,0,,But for this class, we assume that adding two 1,000,000-digit numbers takes exactly one unit of time, the same as adding two 5-digit numbers.
Dialogue: 0,0:34:06.88,0:34:17.27,中文,,0,0,0,,但对于这个类别 我们假设添加两个100万位数的数字需要完全相同的时间 就像添加两个5位数一样
Dialogue: 0,0:34:17.27,0:34:19.79,英文,,0,0,0,,This will be known as our cost model.
Dialogue: 0,0:34:17.27,0:34:19.79,中文,,0,0,0,,这将被称为我们的成本模型
Dialogue: 0,0:34:19.79,0:34:26.04,英文,,0,0,0,,Through our cost model, we will say that everything takes constant time.
Dialogue: 0,0:34:19.79,0:34:26.04,中文,,0,0,0,,通过我们的成本模型 我们将说一切都需要恒定的时间
Dialogue: 0,0:34:26.04,0:34:32.64,英文,,0,0,0,,Now, if we do this and do everything, then we've evaluated this complicated thing all the way down to n squared.
Dialogue: 0,0:34:26.04,0:34:32.64,中文,,0,0,0,,现在 如果我们这样做并完成所有操作 那么我们已经将这个复杂的事情评估到N^2
Dialogue: 0,0:34:32.64,0:34:33.56,英文,,0,0,0,,n squared is a nice thing.
Dialogue: 0,0:34:32.64,0:34:33.56,中文,,0,0,0,,N^2是一个很好的事情
Dialogue: 0,0:34:33.56,0:34:34.68,英文,,0,0,0,,It's very simple.
Dialogue: 0,0:34:33.56,0:34:34.68,中文,,0,0,0,,这很简单
Dialogue: 0,0:34:34.68,0:34:36.04,英文,,0,0,0,,I like n squared.
Dialogue: 0,0:34:34.68,0:34:36.04,中文,,0,0,0,,我喜欢 N^2
Dialogue: 0,0:34:36.04,0:34:40.38,英文,,0,0,0,,It looks very nice.
Dialogue: 0,0:34:36.04,0:34:40.38,中文,,0,0,0,,它看起来很不错
Dialogue: 0,0:34:40.38,0:34:46.07,英文,,0,0,0,,So I think this is a really nice way to simplify this.
Dialogue: 0,0:34:40.38,0:34:46.07,中文,,0,0,0,,我认为这是简化这个的一个很好的方法
Dialogue: 0,0:34:46.07,0:34:47.57,英文,,0,0,0,,This looks simple.
Dialogue: 0,0:34:46.07,0:34:47.57,中文,,0,0,0,,这看起来很简单
Dialogue: 0,0:34:47.57,0:34:50.97,英文,,0,0,0,,Let's see if this actually works.
Dialogue: 0,0:34:47.57,0:34:50.97,中文,,0,0,0,,让我们看看这是否真的有效
Dialogue: 0,0:34:50.97,0:34:54.56,英文,,0,0,0,,Let's do this for dupe 2.
Dialogue: 0,0:34:50.97,0:34:54.56,中文,,0,0,0,,我们来对重复项 2 进行这样做
Dialogue: 0,0:34:54.56,0:35:02.94,英文,,0,0,0,,What is going to be our final result
Dialogue: 0,0:34:54.56,0:35:02.94,中文,,0,0,0,,我们的最终结果会是什么？
Dialogue: 0,0:35:02.94,0:35:03.44,英文,,0,0,0,,n
Dialogue: 0,0:35:02.94,0:35:03.44,中文,,0,0,0,,N
Dialogue: 0,0:35:03.44,0:35:07.52,英文,,0,0,0,,Why
Dialogue: 0,0:35:03.44,0:35:07.52,中文,,0,0,0,,为什么
Dialogue: 0,0:35:07.52,0:35:14.12,英文,,0,0,0,,Yeah, n is the highest power of n. And if you just do all this math, you just cut off all the worst cases.
Dialogue: 0,0:35:07.52,0:35:14.12,中文,,0,0,0,,是的 N是N的最高幂 如果你只是做了所有这些数学 你就能消除掉所有最坏的情况
Dialogue: 0,0:35:14.12,0:35:15.88,英文,,0,0,0,,You ignore the lower order terms.
Dialogue: 0,0:35:14.12,0:35:15.88,中文,,0,0,0,,你忽略了低阶项
Dialogue: 0,0:35:15.88,0:35:17.32,英文,,0,0,0,,You're ending up with a bunch of n's.
Dialogue: 0,0:35:15.88,0:35:17.32,中文,,0,0,0,,最终你会得到一堆N
Dialogue: 0,0:35:17.32,0:35:19.18,英文,,0,0,0,,You just get rid of any coefficients.
Dialogue: 0,0:35:17.32,0:35:19.18,中文,,0,0,0,,你只需去掉任何系数
Dialogue: 0,0:35:19.18,0:35:20.78,英文,,0,0,0,,And then you just add these all together.
Dialogue: 0,0:35:19.18,0:35:20.78,中文,,0,0,0,,然后你就把它们全部加在一起
Dialogue: 0,0:35:20.78,0:35:25.70,英文,,0,0,0,,You end up with n.
Dialogue: 0,0:35:20.78,0:35:25.70,中文,,0,0,0,,你最后得到的是N
Dialogue: 0,0:35:25.70,0:35:35.08,英文,,0,0,0,,So using this, we can show that this is n squared, and this one is n time.
Dialogue: 0,0:35:25.70,0:35:35.08,中文,,0,0,0,,用这个 我们可以证明这是N^2 这个是N次的
Dialogue: 0,0:35:35.08,0:35:41.31,英文,,0,0,0,,Now, this actually explains kind of why we saw that 4 earlier.
Dialogue: 0,0:35:35.08,0:35:41.31,中文,,0,0,0,,现在 这实际上解释了为什么我们之前看到了4的情况
Dialogue: 0,0:35:41.31,0:35:47.31,英文,,0,0,0,,If we have a runtime equal to n squared, then if we double the size of n,
Dialogue: 0,0:35:41.31,0:35:47.31,中文,,0,0,0,,如果我们的运行时间等于N^2 那么如果我们把N的大小加倍
Dialogue: 0,0:35:47.31,0:35:54.06,英文,,0,0,0,,then 2n squared is the same as 4 times n squared, 4 times as large as the previous value.
Dialogue: 0,0:35:47.31,0:35:54.06,中文,,0,0,0,,那么2N^2就等于4倍的N^2 是前一个值的4倍大
Dialogue: 0,0:35:54.06,0:35:58.02,英文,,0,0,0,,That means that if we double the size of an input, that'll be 4 times the longer runtime.
Dialogue: 0,0:35:54.06,0:35:58.02,中文,,0,0,0,,这意味着如果我们将输入的大小加倍 那么运行时间就会变长4倍
Dialogue: 0,0:35:58.02,0:35:59.84,英文,,0,0,0,,That's exactly what we saw earlier.
Dialogue: 0,0:35:58.02,0:35:59.84,中文,,0,0,0,,这正是我们之前看到的
Dialogue: 0,0:35:59.84,0:36:07.67,英文,,0,0,0,,When we ran this on actual code, we saw that this averaged at around 4 times slowdown every time we doubled the array.
Dialogue: 0,0:35:59.84,0:36:07.67,中文,,0,0,0,,当我们在实际代码上运行时 我们看到每次数组加倍时 平均减慢了大约4倍
Dialogue: 0,0:36:07.67,0:36:15.30,英文,,0,0,0,,So despite all these simplifications that we made, we can see that this theoretical analysis matches this experimental value.
Dialogue: 0,0:36:07.67,0:36:15.30,中文,,0,0,0,,尽管我们做了所有这些简化 我们可以看到这个理论分析与实验值相匹配
Dialogue: 0,0:36:15.30,0:36:27.57,英文,,0,0,0,,And that kind of gives us confidence that we haven't lost any information about what's going on, that all of these things are mathematically rigorous and that they make sense.
Dialogue: 0,0:36:15.30,0:36:27.57,中文,,0,0,0,,这给了我们信心 我们没有丢失任何关于正在发生的事情的信息 所有这些都是数学严谨的 并且它们是合理的
Dialogue: 0,0:36:27.57,0:36:30.85,英文,,0,0,0,,So doing this, we can just follow this process.
Dialogue: 0,0:36:27.57,0:36:30.85,中文,,0,0,0,,我们可以按照这个过程进行
Dialogue: 0,0:36:30.85,0:36:32.97,英文,,0,0,0,,We can create this table of operations.
Dialogue: 0,0:36:30.85,0:36:32.97,中文,,0,0,0,,我们可以创建这个操作表
Dialogue: 0,0:36:32.97,0:36:39.76,英文,,0,0,0,,And then we just compress this table one step at a time down to this total that's n squared.
Dialogue: 0,0:36:32.97,0:36:39.76,中文,,0,0,0,,然后我们一步一步地压缩这个表 直到得到总数是N^2
Dialogue: 0,0:36:39.76,0:36:42.60,英文,,0,0,0,,Do you want to do this
Dialogue: 0,0:36:39.76,0:36:42.60,中文,,0,0,0,,你想这样做吗？
Dialogue: 0,0:36:42.60,0:36:45.34,英文,,0,0,0,,No, why not
Dialogue: 0,0:36:42.60,0:36:45.34,中文,,0,0,0,,不行 为什么不呢？
Dialogue: 0,0:36:45.34,0:36:45.84,英文,,0,0,0,,It's tedious.
Dialogue: 0,0:36:45.34,0:36:45.84,中文,,0,0,0,,太繁琐了
Dialogue: 0,0:36:45.84,0:36:46.74,英文,,0,0,0,,It's worse than earlier.
Dialogue: 0,0:36:45.84,0:36:46.74,中文,,0,0,0,,比之前更糟糕
Dialogue: 0,0:36:46.74,0:36:51.38,英文,,0,0,0,,We had to do the exact counts earlier.
Dialogue: 0,0:36:46.74,0:36:51.38,中文,,0,0,0,,我们之前必须做精确的计数
Dialogue: 0,0:36:51.38,0:36:55.65,英文,,0,0,0,,If we can do these simplifications from the start, then we don't even need to build the table.
Dialogue: 0,0:36:51.38,0:36:55.65,中文,,0,0,0,,如果我们一开始就能做这些简化 那么我们甚至不需要建立表格
Dialogue: 0,0:36:55.65,0:37:08.10,英文,,0,0,0,,We can just start off, look at it a bit, and try and see if we can get it to n squared.
Dialogue: 0,0:36:55.65,0:37:08.10,中文,,0,0,0,,我们可以直接开始 稍微看一下 然后试试看能否将其优化到N^2
Dialogue: 0,0:37:08.10,0:37:09.35,英文,,0,0,0,,So let's do this.
Dialogue: 0,0:37:08.10,0:37:09.35,中文,,0,0,0,,让我们这样做吧
Dialogue: 0,0:37:09.35,0:37:12.35,英文,,0,0,0,,Instead of building the entire table, I'm just going to do this.
Dialogue: 0,0:37:09.35,0:37:12.35,中文,,0,0,0,,不建立整个表 我只是这样做
Dialogue: 0,0:37:12.35,0:37:16.83,英文,,0,0,0,,I'm going to treat anything that takes constant time as a single operation.
Dialogue: 0,0:37:12.35,0:37:16.83,中文,,0,0,0,,我会把任何花费常量时间的事情视为一个操作
Dialogue: 0,0:37:16.83,0:37:18.63,英文,,0,0,0,,These are constant time operations.
Dialogue: 0,0:37:16.83,0:37:18.63,中文,,0,0,0,,这些是常量时间操作
Dialogue: 0,0:37:18.63,0:37:20.45,英文,,0,0,0,,I don't care exactly what's going on.
Dialogue: 0,0:37:18.63,0:37:20.45,中文,,0,0,0,,我不关心确切的情况
Dialogue: 0,0:37:20.45,0:37:22.69,英文,,0,0,0,,I'm going to treat them as one unit of time.
Dialogue: 0,0:37:20.45,0:37:22.69,中文,,0,0,0,,我会把它们视为一个时间单元
Dialogue: 0,0:37:22.69,0:37:34.85,英文,,0,0,0,,I'm going to figure out the order of growth for that one unit of time, either by making an exact count or doing some intuition, inspection, trying to do some math.
Dialogue: 0,0:37:22.69,0:37:34.85,中文,,0,0,0,,我会找出那个时间单元的增长顺序 要么通过进行精确计数 要么通过直觉、检查 试图进行一些数学计算
Dialogue: 0,0:37:34.85,0:37:40.74,英文,,0,0,0,,This last part is only going to be possible with a bit of practice, but you should be able to do some of this.
Dialogue: 0,0:37:34.85,0:37:40.74,中文,,0,0,0,,最后一部分只有通过一些实践才能做到 但你应该能够做其中一些
Dialogue: 0,0:37:40.74,0:37:45.72,英文,,0,0,0,,And using that, we are going to get to n squared without building the entire table.
Dialogue: 0,0:37:40.74,0:37:45.72,中文,,0,0,0,,用这个 我们将能够在不构建整个表的情况下达到 N^2
Dialogue: 0,0:37:45.72,0:37:48.24,英文,,0,0,0,,Let's try doing this on DUP1.
Dialogue: 0,0:37:45.72,0:37:48.24,中文,,0,0,0,,让我们尝试在 dup1 上做这个
Dialogue: 0,0:37:48.24,0:37:51.04,英文,,0,0,0,,And this time, we'll just show everything.
Dialogue: 0,0:37:48.24,0:37:51.04,中文,,0,0,0,,这次 我们会展示所有的东西
Dialogue: 0,0:37:51.04,0:37:54.20,英文,,0,0,0,,So here's our code.
Dialogue: 0,0:37:51.04,0:37:54.20,中文,,0,0,0,,这是我们的代码
Dialogue: 0,0:37:54.20,0:37:59.13,英文,,0,0,0,,And the first step I'm going to do is I'm going to say this inner thing.
Dialogue: 0,0:37:54.20,0:37:59.13,中文,,0,0,0,,我要做的第一步是说这个内部的东西
Dialogue: 0,0:37:59.13,0:38:01.47,英文,,0,0,0,,That doesn't depend on how long n is.
Dialogue: 0,0:37:59.13,0:38:01.47,中文,,0,0,0,,这不依赖于 N 有多长
Dialogue: 0,0:38:01.47,0:38:12.09,英文,,0,0,0,,Checking where an array is, it doesn't take anything in terms of n. Equality doesn't take in terms of n. Returning doesn't do anything in terms of n. I'm just going to say that's 1.
Dialogue: 0,0:38:01.47,0:38:12.09,中文,,0,0,0,,检查数组在哪里 不涉及 N 相等不涉及 N 返回不涉及 N 我只是说那是 1
Dialogue: 0,0:38:12.09,0:38:15.05,英文,,0,0,0,,That is 1 unit of time in there.
Dialogue: 0,0:38:12.09,0:38:15.05,中文,,0,0,0,,那里是1个时间单位
Dialogue: 0,0:38:15.05,0:38:19.63,英文,,0,0,0,,Exactly 1, no more, no less.
Dialogue: 0,0:38:15.05,0:38:19.63,中文,,0,0,0,,确切地说 1个 不多也不少
Dialogue: 0,0:38:19.63,0:38:24.30,英文,,0,0,0,,So how many steps do we run this 1 unit of time
Dialogue: 0,0:38:19.63,0:38:24.30,中文,,0,0,0,,那么我们要运行这1个时间单位多少步呢？
Dialogue: 0,0:38:24.30,0:38:25.77,英文,,0,0,0,,Well
Dialogue: 0,0:38:24.30,0:38:25.77,中文,,0,0,0,,嗯？
Dialogue: 0,0:38:25.77,0:38:32.82,英文,,0,0,0,,We can draw this kind of diagram and look at every single value of i and every single value of j that runs this one unit of time.
Dialogue: 0,0:38:25.77,0:38:32.82,中文,,0,0,0,,我们可以画这种图 查看每一个i值和每一个j值在这个时间单位里的运行情况
Dialogue: 0,0:38:32.82,0:38:39.71,英文,,0,0,0,,And we can see that for i equals 0, we run from 1, 2, 3, 4, 5, up to n. For i equals 1,
Dialogue: 0,0:38:32.82,0:38:39.71,中文,,0,0,0,,我们可以看到 对于i等于0 我们从1, 2, 3, 4, 5运行到N
Dialogue: 0,0:38:39.71,0:38:46.71,英文,,0,0,0,,we go from 2, 3, 4, 5, up to n. From i equals 2, we go 3, 4, 5, up to n, and so on.
Dialogue: 0,0:38:39.71,0:38:46.71,中文,,0,0,0,,对于i等于1 我们从2, 3, 4, 5运行到N 从i等于2 我们从3, 4, 5运行到N 以此类推
Dialogue: 0,0:38:46.71,0:38:53.13,英文,,0,0,0,,We kind of get this triangle pattern that grows all the way up to n size.
Dialogue: 0,0:38:46.71,0:38:53.13,中文,,0,0,0,,我们可以看到这种三角形模式 它一直增长到N的大小
Dialogue: 0,0:38:53.13,0:38:59.98,英文,,0,0,0,,The exact total number of this is 1 plus 2 plus 3 plus 4 up to all the way m minus 1.
Dialogue: 0,0:38:53.13,0:38:59.98,中文,,0,0,0,,这的确的总数是1加2加3加4一直到m减1
Dialogue: 0,0:38:59.98,0:39:04.16,英文,,0,0,0,,Can we add this together quickly
Dialogue: 0,0:38:59.98,0:39:04.16,中文,,0,0,0,,我们能不能快速加在一起？
Dialogue: 0,0:39:04.16,0:39:07.88,英文,,0,0,0,,Well, there are some tricks on how you can add this.
Dialogue: 0,0:39:04.16,0:39:07.88,中文,,0,0,0,,有一些诀窍 你可以如何加这个
Dialogue: 0,0:39:07.88,0:39:12.33,英文,,0,0,0,,The clever way that we do this is we kind of reverse this order.
Dialogue: 0,0:39:07.88,0:39:12.33,中文,,0,0,0,,我们聪明的做法是我们有点倒过来
Dialogue: 0,0:39:12.33,0:39:13.93,英文,,0,0,0,,We add these two sequences together.
Dialogue: 0,0:39:12.33,0:39:13.93,中文,,0,0,0,,我们把这两个序列加在一起
Dialogue: 0,0:39:13.93,0:39:16.03,英文,,0,0,0,,1 plus n minus 1 is n.
Dialogue: 0,0:39:13.93,0:39:16.03,中文,,0,0,0,,1加N减1就是N
Dialogue: 0,0:39:16.03,0:39:17.35,英文,,0,0,0,,2 plus n minus 1 is n.
Dialogue: 0,0:39:16.03,0:39:17.35,中文,,0,0,0,,2加N减1就是N
Dialogue: 0,0:39:17.35,0:39:20.81,英文,,0,0,0,,3 plus n minus 3 is n, and so on and so forth.
Dialogue: 0,0:39:17.35,0:39:20.81,中文,,0,0,0,,3 加上 N 减去 3 是 N 依此类推
Dialogue: 0,0:39:20.81,0:39:25.27,英文,,0,0,0,,So we get 2c is equal to n plus n plus n this many times.
Dialogue: 0,0:39:20.81,0:39:25.27,中文,,0,0,0,,我们得到 2C  等于 N 加 N 加 N 这么多次
Dialogue: 0,0:39:25.27,0:39:27.20,英文,,0,0,0,,There's n minus 1 of these.
Dialogue: 0,0:39:25.27,0:39:27.20,中文,,0,0,0,,这些中有 N 减去 1 个
Dialogue: 0,0:39:27.20,0:39:29.64,英文,,0,0,0,,So that's n times n minus 1.
Dialogue: 0,0:39:27.20,0:39:29.64,中文,,0,0,0,,所以是 N 乘以 N 减去 1
Dialogue: 0,0:39:29.64,0:39:34.86,英文,,0,0,0,,And if we do this, c is equal to n times n minus 1 divided by 2.
Dialogue: 0,0:39:29.64,0:39:34.86,中文,,0,0,0,,如果我们这样做 C 就等于 N 乘以 N 减去 1 除以 2
Dialogue: 0,0:39:34.86,0:39:42.72,英文,,0,0,0,,So using all this math, we can say that there's n times n minus 1 over 2 units of time that this code runs.
Dialogue: 0,0:39:34.86,0:39:42.72,中文,,0,0,0,,利用所有这些数学 我们可以说这段代码运行的时间是 N 乘以 N 减去 1 除以 2 单位
Dialogue: 0,0:39:42.72,0:39:52.73,英文,,0,0,0,,And if you split this up, you get an n squared as your total runtime.
Dialogue: 0,0:39:42.72,0:39:52.73,中文,,0,0,0,,如果你把这个拆开 你得到一个 N^2作为你的总运行时间
Dialogue: 0,0:39:52.73,0:39:56.07,英文,,0,0,0,,Any questions on the math we did here
Dialogue: 0,0:39:52.73,0:39:56.07,中文,,0,0,0,,我们在这里做的数学有什么问题吗？
Dialogue: 0,0:39:56.07,0:40:01.77,英文,,0,0,0,,This is somewhat tricky math.
Dialogue: 0,0:39:56.07,0:40:01.77,中文,,0,0,0,,这个数学有点棘手
Dialogue: 0,0:40:01.77,0:40:06.41,英文,,0,0,0,,Yeah
Dialogue: 0,0:40:01.77,0:40:06.41,中文,,0,0,0,,是吗？
Dialogue: 0,0:40:06.41,0:40:07.65,英文,,0,0,0,,Yeah.
Dialogue: 0,0:40:06.41,0:40:07.65,中文,,0,0,0,,是的
Dialogue: 0,0:40:07.65,0:40:12.61,英文,,0,0,0,,So to get to n times n plus 1 over 2, what we kind of did was we kind of did this algebra.
Dialogue: 0,0:40:07.65,0:40:12.61,中文,,0,0,0,,为了得到N乘以N加1除以2 我们所做的实际上是进行了代数运算
Dialogue: 0,0:40:12.61,0:40:16.92,英文,,0,0,0,,So we started off with c as 1 plus 2 plus 3 all the way to n minus 1.
Dialogue: 0,0:40:12.61,0:40:16.92,中文,,0,0,0,,我们从C 作为1加2加3一直到N减1开始
Dialogue: 0,0:40:16.92,0:40:22.42,英文,,0,0,0,,And then I said, well, since addition is commutative, I can just flip the entire order of these items.
Dialogue: 0,0:40:16.92,0:40:22.42,中文,,0,0,0,,然后我说 由于加法是可交换的 我可以反转这些项目的整个顺序
Dialogue: 0,0:40:22.42,0:40:26.04,英文,,0,0,0,,So I get n minus 1 plus n minus 2 plus n minus 3 and so on.
Dialogue: 0,0:40:22.42,0:40:26.04,中文,,0,0,0,,我得到N减1加N减2加N减3等等
Dialogue: 0,0:40:26.04,0:40:28.67,英文,,0,0,0,,And then we just added each of these pairwise.
Dialogue: 0,0:40:26.04,0:40:28.67,中文,,0,0,0,,然后我们只是逐对地添加了这些
Dialogue: 0,0:40:28.67,0:40:31.23,英文,,0,0,0,,So 1 plus n minus 1, that became n.
Dialogue: 0,0:40:28.67,0:40:31.23,中文,,0,0,0,,所以1加N减1 那就变成了N
Dialogue: 0,0:40:31.23,0:40:35.54,英文,,0,0,0,,2 and n minus 2 add to get n. And so on and so forth.
Dialogue: 0,0:40:31.23,0:40:35.54,中文,,0,0,0,,2和N减2相加得到N 等等等等
Dialogue: 0,0:40:35.54,0:40:37.65,英文,,0,0,0,,Now, there's a total of n minus 1 of these.
Dialogue: 0,0:40:35.54,0:40:37.65,中文,,0,0,0,,现在 这些总共有N-1
Dialogue: 0,0:40:37.65,0:40:40.39,英文,,0,0,0,,So there should be n times n minus 1 here.
Dialogue: 0,0:40:37.65,0:40:40.39,中文,,0,0,0,,这里应该有N乘以N-1
Dialogue: 0,0:40:40.39,0:40:44.89,英文,,0,0,0,,And then if we divide this by 2, because this is 2c now, then we should get the value of c. Yeah
Dialogue: 0,0:40:40.39,0:40:44.89,中文,,0,0,0,,然后如果我们除以2 因为现在这是2C  那么我们应该得到C 的值 对吗？
Dialogue: 0,0:40:44.89,0:40:50.38,英文,,0,0,0,,How did you get the 2c
Dialogue: 0,0:40:44.89,0:40:50.38,中文,,0,0,0,,你是怎么得到那个 2C  的
Dialogue: 0,0:40:50.38,0:40:56.16,英文,,0,0,0,,If we add this top part and the bottom part, then we add the left side, that's c plus c equals 2c.
Dialogue: 0,0:40:50.38,0:40:56.16,中文,,0,0,0,,如果我们把这个顶部和底部加起来 然后再加上左边 那就是 C  加 C  等于 2C .
Dialogue: 0,0:40:56.16,0:40:59.12,英文,,0,0,0,,The right side, this plus this equals this.
Dialogue: 0,0:40:56.16,0:40:59.12,中文,,0,0,0,,右边 这个加上这个等于这个.
Dialogue: 0,0:40:59.12,0:41:02.55,英文,,0,0,0,,Yeah
Dialogue: 0,0:40:59.12,0:41:02.55,中文,,0,0,0,,是的
Dialogue: 0,0:41:02.55,0:41:05.42,英文,,0,0,0,,Any questions, or just stretching over there
Dialogue: 0,0:41:02.55,0:41:05.42,中文,,0,0,0,,有问题吗 还是只是在那边伸懒腰
Dialogue: 0,0:41:05.42,0:41:08.48,英文,,0,0,0,,All right.
Dialogue: 0,0:41:05.42,0:41:08.48,中文,,0,0,0,,好的
Dialogue: 0,0:41:08.48,0:41:11.38,英文,,0,0,0,,Now, another approach is you can just kind of look at it.
Dialogue: 0,0:41:08.48,0:41:11.38,中文,,0,0,0,,现在 另一种方法是你可以直接看着它.
Dialogue: 0,0:41:11.38,0:41:15.66,英文,,0,0,0,,This looks like a triangle to me, right
Dialogue: 0,0:41:11.38,0:41:15.66,中文,,0,0,0,,这看起来对我来说像个三角形 对吧？
Dialogue: 0,0:41:15.66,0:41:20.80,英文,,0,0,0,,What's the area of a triangle
Dialogue: 0,0:41:15.66,0:41:20.80,中文,,0,0,0,,三角形的面积是多少？
Dialogue: 0,0:41:20.80,0:41:23.60,英文,,0,0,0,,Yeah, 1 half length times width.
Dialogue: 0,0:41:20.80,0:41:23.60,中文,,0,0,0,,是的 1/2的长度乘以宽度
Dialogue: 0,0:41:23.60,0:41:26.30,英文,,0,0,0,,What's this length
Dialogue: 0,0:41:23.60,0:41:26.30,中文,,0,0,0,,这个长度是多少？
Dialogue: 0,0:41:26.30,0:41:29.52,英文,,0,0,0,,n, just about n. What's this width
Dialogue: 0,0:41:26.30,0:41:29.52,中文,,0,0,0,,N 大约就是N 那这个宽度呢？
Dialogue: 0,0:41:29.52,0:41:37.23,英文,,0,0,0,,Just about n. So this is n times n divided by 2, or just n times n, which is n squared.
Dialogue: 0,0:41:29.52,0:41:37.23,中文,,0,0,0,,大约是N 这是N乘以N再除以2 或者只是N乘以N 也就是N^2
Dialogue: 0,0:41:37.23,0:41:45.22,英文,,0,0,0,,So we can kind of look at it and say, through some geometry, that a right triangle is going to grow at a rate of n squared.
Dialogue: 0,0:41:37.23,0:41:45.22,中文,,0,0,0,,我们可以通过一些几何学来看 直角三角形的增长速度是N^2
Dialogue: 0,0:41:45.22,0:41:48.80,英文,,0,0,0,,And we can say, yeah, it's probably n squared.
Dialogue: 0,0:41:45.22,0:41:48.80,中文,,0,0,0,,我们可以说 是的 这可能是N^2
Dialogue: 0,0:41:48.80,0:41:52.82,英文,,0,0,0,,So yeah, you can do this more mathematically rigorously.
Dialogue: 0,0:41:48.80,0:41:52.82,中文,,0,0,0,,是的 你可以更数学严谨地做这个
Dialogue: 0,0:41:52.82,0:41:55.48,英文,,0,0,0,,You can actually show that this is true.
Dialogue: 0,0:41:52.82,0:41:55.48,中文,,0,0,0,,你实际上可以证明这是真的
Dialogue: 0,0:41:55.48,0:42:05.27,英文,,0,0,0,,But if you just kind of look at it finely enough, then you kind of see that it's an n squared runtime.
Dialogue: 0,0:41:55.48,0:42:05.27,中文,,0,0,0,,但如果你仔细看 你会发现这是N^2运行时间
Dialogue: 0,0:42:05.27,0:42:09.52,英文,,0,0,0,,Yeah, any questions here
Dialogue: 0,0:42:05.27,0:42:09.52,中文,,0,0,0,,是的 这里有任何问题吗？
Dialogue: 0,0:42:09.52,0:42:13.18,英文,,0,0,0,,Yeah, this isn't as easy to use as the just direct math approach.
Dialogue: 0,0:42:09.52,0:42:13.18,中文,,0,0,0,,是的 这不像直接数学方法那样容易使用
Dialogue: 0,0:42:13.18,0:42:14.46,英文,,0,0,0,,It doesn't work for everything.
Dialogue: 0,0:42:13.18,0:42:14.46,中文,,0,0,0,,它并不适用于所有情况
Dialogue: 0,0:42:14.46,0:42:20.12,英文,,0,0,0,,But for some things, it does work.
Dialogue: 0,0:42:14.46,0:42:20.12,中文,,0,0,0,,但是对于一些事情 它确实有效
Dialogue: 0,0:42:20.12,0:42:26.70,英文,,0,0,0,,So let's formalize this not just for this duplication function, but for everything.
Dialogue: 0,0:42:20.12,0:42:26.70,中文,,0,0,0,,让我们不仅仅针对这个复制功能形式化 而是针对一切
Dialogue: 0,0:42:26.70,0:42:31.24,英文,,0,0,0,,Given a function, we can apply these simplifications to yield this order of growth.
Dialogue: 0,0:42:26.70,0:42:31.24,中文,,0,0,0,,给定一个函数 我们可以应用这些简化来得到这个增长顺序
Dialogue: 0,0:42:31.24,0:42:37.39,英文,,0,0,0,,So if we take 3n cubed plus n squared, what's the order of growth of this
Dialogue: 0,0:42:31.24,0:42:37.39,中文,,0,0,0,,如果我们取3N的三次方加上N^2 这个增长顺序是什么？
Dialogue: 0,0:42:37.39,0:42:38.09,英文,,0,0,0,,And cubed.
Dialogue: 0,0:42:37.39,0:42:38.09,中文,,0,0,0,,还有立方
Dialogue: 0,0:42:38.09,0:42:38.67,英文,,0,0,0,,Yep.
Dialogue: 0,0:42:38.09,0:42:38.67,中文,,0,0,0,,是的
Dialogue: 0,0:42:38.67,0:42:43.55,英文,,0,0,0,,We just get rid of everything except for the most significant term.
Dialogue: 0,0:42:38.67,0:42:43.55,中文,,0,0,0,,我们只保留最显著项 其余的都去掉
Dialogue: 0,0:42:43.55,0:42:50.92,英文,,0,0,0,,Let's try to show a more formal notation to specify what we did.
Dialogue: 0,0:42:43.55,0:42:50.92,中文,,0,0,0,,让我们尝试展示一种更正式的表示来说明我们做了什么
Dialogue: 0,0:42:50.92,0:42:55.04,英文,,0,0,0,,The math might be a bit complicated, but the idea is just the same.
Dialogue: 0,0:42:50.92,0:42:55.04,中文,,0,0,0,,数学可能有点复杂 但思想是一样的
Dialogue: 0,0:42:55.04,0:43:00.59,英文,,0,0,0,,If you understand the intuition behind what we were doing earlier, that's all you really need to know.
Dialogue: 0,0:42:55.04,0:43:00.59,中文,,0,0,0,,如果你理解了我们之前做的事情背后的直觉 那就是你真正需要知道的
Dialogue: 0,0:43:00.59,0:43:04.83,英文,,0,0,0,,You don't need to know this complicated formula.
Dialogue: 0,0:43:00.59,0:43:04.83,中文,,0,0,0,,你不需要知道这个复杂的公式
Dialogue: 0,0:43:04.83,0:43:08.32,英文,,0,0,0,,But it's useful to have it available.
Dialogue: 0,0:43:04.83,0:43:08.32,中文,,0,0,0,,但有它可用是有用的
Dialogue: 0,0:43:08.32,0:43:11.57,英文,,0,0,0,,But before I do that, let's just do a few more examples.
Dialogue: 0,0:43:08.32,0:43:11.57,中文,,0,0,0,,但在我这样做之前 让我们做几个例子
Dialogue: 0,0:43:11.57,0:43:16.59,英文,,0,0,0,,n cubed plus 3 n to the fourth, what's the order of growth of that
Dialogue: 0,0:43:11.57,0:43:16.59,中文,,0,0,0,,N^3加3N^4 它的增长阶是多少？
Dialogue: 0,0:43:16.59,0:43:17.29,英文,,0,0,0,,n to the fourth.
Dialogue: 0,0:43:16.59,0:43:17.29,中文,,0,0,0,,N到4次方
Dialogue: 0,0:43:17.29,0:43:19.95,英文,,0,0,0,,Why
Dialogue: 0,0:43:17.29,0:43:19.95,中文,,0,0,0,,为什么？
Dialogue: 0,0:43:19.95,0:43:20.63,英文,,0,0,0,,It's the biggest thing.
Dialogue: 0,0:43:19.95,0:43:20.63,中文,,0,0,0,,这是最大的事情
Dialogue: 0,0:43:20.63,0:43:24.09,英文,,0,0,0,,All right, what about the next one
Dialogue: 0,0:43:20.63,0:43:24.09,中文,,0,0,0,,下一个呢？
Dialogue: 0,0:43:24.09,0:43:24.76,英文,,0,0,0,,n cubed.
Dialogue: 0,0:43:24.09,0:43:24.76,中文,,0,0,0,,N^3
Dialogue: 0,0:43:24.76,0:43:32.04,英文,,0,0,0,,Yep, n cubed is larger than 1 over n. What about this one
Dialogue: 0,0:43:24.76,0:43:32.04,中文,,0,0,0,,是的 N^3比1/N大 这个呢？
Dialogue: 0,0:43:32.04,0:43:32.80,英文,,0,0,0,,1.
Dialogue: 0,0:43:32.04,0:43:32.80,中文,,0,0,0,,1
Dialogue: 0,0:43:32.80,0:43:34.75,英文,,0,0,0,,Yep.
Dialogue: 0,0:43:32.80,0:43:34.75,中文,,0,0,0,,是的
Dialogue: 0,0:43:34.75,0:43:36.57,英文,,0,0,0,,Because the 1 over n grows smaller.
Dialogue: 0,0:43:34.75,0:43:36.57,中文,,0,0,0,,因为1除以N会变得越来越小
Dialogue: 0,0:43:36.57,0:43:38.18,英文,,0,0,0,,The 5 is a larger thing.
Dialogue: 0,0:43:36.57,0:43:38.18,中文,,0,0,0,,5是一个更大的量
Dialogue: 0,0:43:38.18,0:43:39.82,英文,,0,0,0,,And 5 is just a coefficient.
Dialogue: 0,0:43:38.18,0:43:39.82,中文,,0,0,0,,而5只是一个系数
Dialogue: 0,0:43:39.82,0:43:42.62,英文,,0,0,0,,It's just 5 times 1.
Dialogue: 0,0:43:39.82,0:43:42.62,中文,,0,0,0,,它只是5乘以1
Dialogue: 0,0:43:42.62,0:43:44.98,英文,,0,0,0,,So we just say it's 1.
Dialogue: 0,0:43:42.62,0:43:44.98,中文,,0,0,0,,我们就说它是1
Dialogue: 0,0:43:44.98,0:43:46.20,英文,,0,0,0,,We can say it's constant.
Dialogue: 0,0:43:44.98,0:43:46.20,中文,,0,0,0,,我们可以说它是常数
Dialogue: 0,0:43:46.20,0:43:49.88,英文,,0,0,0,,Generally speaking, when we say constant, we just turn it into a number 1.
Dialogue: 0,0:43:46.20,0:43:49.88,中文,,0,0,0,,一般来说 当我们说常数时 我们只是把它变成一个数字1
Dialogue: 0,0:43:49.88,0:43:50.64,英文,,0,0,0,,Yeah.
Dialogue: 0,0:43:49.88,0:43:50.64,中文,,0,0,0,,是的
Dialogue: 0,0:43:50.64,0:43:54.03,英文,,0,0,0,,What about this one, ne to the n plus n
Dialogue: 0,0:43:50.64,0:43:54.03,中文,,0,0,0,,那这个呢 N的N次方加N？
Dialogue: 0,0:43:54.03,0:43:55.93,英文,,0,0,0,,ne to the n
Dialogue: 0,0:43:54.03,0:43:55.93,中文,,0,0,0,,N的N次方？
Dialogue: 0,0:43:55.93,0:43:58.91,英文,,0,0,0,,What about this one
Dialogue: 0,0:43:55.93,0:43:58.91,中文,,0,0,0,,这个呢？
Dialogue: 0,0:43:58.91,0:44:00.49,英文,,0,0,0,,4n squared.
Dialogue: 0,0:43:58.91,0:44:00.49,中文,,0,0,0,,4N^2
Dialogue: 0,0:44:00.49,0:44:02.91,英文,,0,0,0,,Why
Dialogue: 0,0:44:00.49,0:44:02.91,中文,,0,0,0,,为什么？
Dialogue: 0,0:44:02.91,0:44:06.03,英文,,0,0,0,,Yeah, sine goes between negative 1 and 1.
Dialogue: 0,0:44:02.91,0:44:06.03,中文,,0,0,0,,是的 正弦函数的取值范围在-1到1之间
Dialogue: 0,0:44:06.03,0:44:08.05,英文,,0,0,0,,So it's going to be bounded by a constant.
Dialogue: 0,0:44:06.03,0:44:08.05,中文,,0,0,0,,它将被一个常数界定
Dialogue: 0,0:44:08.05,0:44:12.47,英文,,0,0,0,,So the n squared is the only thing that actually grows here.
Dialogue: 0,0:44:08.05,0:44:12.47,中文,,0,0,0,,所以N^2是这里唯一增长的部分
Dialogue: 0,0:44:12.47,0:44:15.86,英文,,0,0,0,,Yep.
Dialogue: 0,0:44:12.47,0:44:15.86,中文,,0,0,0,,是的
Dialogue: 0,0:44:15.86,0:44:24.06,英文,,0,0,0,,So we're going to write this theta to signify what we're doing here.
Dialogue: 0,0:44:15.86,0:44:24.06,中文,,0,0,0,,我们要写下这个 θ 来表示我们在这里做什么
Dialogue: 0,0:44:24.06,0:44:41.06,英文,,0,0,0,,So when I say nq plus 3n to the fourth is in theta of n to the fourth, what I'm saying is that the order of growth of nq plus 3n to the fourth is the same as the order of growth of n to the fourth.
Dialogue: 0,0:44:24.06,0:44:41.06,中文,,0,0,0,,当我说N的3次方加3N^4属于N^4的 θ 时 我是在说N的3次方加3N^4的增长阶数与N^4的增长阶数相同
Dialogue: 0,0:44:41.06,0:44:43.40,英文,,0,0,0,,The formal definition is here.
Dialogue: 0,0:44:41.06,0:44:43.40,中文,,0,0,0,,正式定义就在这里
Dialogue: 0,0:44:43.40,0:44:46.65,英文,,0,0,0,,It's a mess of terminology.
Dialogue: 0,0:44:43.40,0:44:46.65,中文,,0,0,0,,术语一团糟
Dialogue: 0,0:44:46.65,0:44:51.96,英文,,0,0,0,,Let's just go through this one step at a time.
Dialogue: 0,0:44:46.65,0:44:51.96,中文,,0,0,0,,我们一步一步来吧
Dialogue: 0,0:44:51.96,0:45:10.15,英文,,0,0,0,,What this is saying is that a function r is defined to be in theta of f if there exists these two constants, k1 and k2, such that this equation holds.
Dialogue: 0,0:44:51.96,0:45:10.15,中文,,0,0,0,,这是说 如果存在这两个常数 k1 和 k2 使得这个方程成立 那么函数 R 被定义为 f 的  θ  函数
Dialogue: 0,0:45:10.15,0:45:13.17,英文,,0,0,0,,So f of n is probably some simple function.
Dialogue: 0,0:45:10.15,0:45:13.17,中文,,0,0,0,,所以f(N) 可能是某个简单的函数
Dialogue: 0,0:45:13.17,0:45:17.05,英文,,0,0,0,,k1, k2, you just pick some constant factors.
Dialogue: 0,0:45:13.17,0:45:17.05,中文,,0,0,0,,k1 k2 你只需要选择一些常数因子
Dialogue: 0,0:45:17.05,0:45:29.61,英文,,0,0,0,,And if r of n is less than a constant factor times f and greater than a different constant factor times f, then we say that r grows just about the same rate as f does.
Dialogue: 0,0:45:17.05,0:45:29.61,中文,,0,0,0,,如果 R(N) 小于一个常数倍的 f 并且大于另一个常数倍的 f 那么我们说 r 的增长率与 f 几乎相同
Dialogue: 0,0:45:29.61,0:45:34.31,英文,,0,0,0,,So in other words, r and f differ only by coefficient, effectively.
Dialogue: 0,0:45:29.61,0:45:34.31,中文,,0,0,0,,换句话说 R 和 f 只有系数不同 实际上是一样的
Dialogue: 0,0:45:34.31,0:45:41.81,英文,,0,0,0,,And you only need this to be true for sufficiently large n. You can just pick some number, let's say 1 million.
Dialogue: 0,0:45:34.31,0:45:41.81,中文,,0,0,0,,只需要对足够大的N成立即可 你可以选择一个数字 比如说100万
Dialogue: 0,0:45:41.81,0:45:46.93,英文,,0,0,0,,And as long as it's greater than this for all 1 million, then it's fine.
Dialogue: 0,0:45:41.81,0:45:46.93,中文,,0,0,0,,只要对所有100万都成立 那就没问题
Dialogue: 0,0:45:46.93,0:45:52.20,英文,,0,0,0,,As an example here, 40 sine n plus 4n squared is theta of n squared.
Dialogue: 0,0:45:46.93,0:45:52.20,中文,,0,0,0,,这里以40sin(N)加4N^2为例 它是N^2的 θ 阶
Dialogue: 0,0:45:52.20,0:45:56.26,英文,,0,0,0,,Here we can say that r of n is this, f of n is n squared.
Dialogue: 0,0:45:52.20,0:45:56.26,中文,,0,0,0,,在这里 我们可以说R(N)是这样 f(N)是N^2
Dialogue: 0,0:45:56.26,0:46:03.04,英文,,0,0,0,,k1 I can say is 3, because if I pick 3 as my k1, then 3n squared is always less than this thing.
Dialogue: 0,0:45:56.26,0:46:03.04,中文,,0,0,0,,k1我可以说是3 因为如果我选择3作为我的k1 那么3N^2总是小于这个东西
Dialogue: 0,0:46:03.04,0:46:10.13,英文,,0,0,0,,k2 can be 5, because 5n squared is always going to be greater than this thing.
Dialogue: 0,0:46:03.04,0:46:10.13,中文,,0,0,0,,k2可以是5 因为5N^2总是大于这个东西
Dialogue: 0,0:46:10.13,0:46:15.11,英文,,0,0,0,,So if we had this function, we could do something similar.
Dialogue: 0,0:46:10.13,0:46:15.11,中文,,0,0,0,,如果我们有了这个函数 我们可以做类似的事情
Dialogue: 0,0:46:15.11,0:46:25.66,英文,,0,0,0,,What is our f of n for this function
Dialogue: 0,0:46:15.11,0:46:25.66,中文,,0,0,0,,这个函数的 f(N) 是多少？
Dialogue: 0,0:46:25.66,0:46:26.58,英文,,0,0,0,,n squared
Dialogue: 0,0:46:25.66,0:46:26.58,中文,,0,0,0,,N^2？
Dialogue: 0,0:46:26.58,0:46:28.74,英文,,0,0,0,,Yeah, the n squared is going to be bigger.
Dialogue: 0,0:46:26.58,0:46:28.74,中文,,0,0,0,,是的 N^2会更大
Dialogue: 0,0:46:28.74,0:46:35.78,英文,,0,0,0,,What's our k1
Dialogue: 0,0:46:28.74,0:46:35.78,中文,,0,0,0,,我们的 k1 是多少？
Dialogue: 0,0:46:35.78,0:46:37.24,英文,,0,0,0,,5
Dialogue: 0,0:46:35.78,0:46:37.24,中文,,0,0,0,,5？
Dialogue: 0,0:46:37.24,0:46:46.14,英文,,0,0,0,,Is 5n squared always going to be less than 4n squared plus 3n times ln n over 2
Dialogue: 0,0:46:37.24,0:46:46.14,中文,,0,0,0,,5N^2总是小于 4N^2加上 3N 乘以 ln(N) 除以 2 吗？
Dialogue: 0,0:46:46.14,0:46:51.46,英文,,0,0,0,,Is it  3
Dialogue: 0,0:46:46.14,0:46:51.46,中文,,0,0,0,,是吗？3？
Dialogue: 0,0:46:51.46,0:46:53.60,英文,,0,0,0,,Well, let's kind of do this math, right
Dialogue: 0,0:46:51.46,0:46:53.60,中文,,0,0,0,,嗯 我们来算一下吧 对吧？
Dialogue: 0,0:46:53.60,0:47:04.94,英文,,0,0,0,,If we do 4n squared divided by 2, that gets us 2n squared plus 3 over 2n log n. I think this 2n squared is going to grow faster than this thing.
Dialogue: 0,0:46:53.60,0:47:04.94,中文,,0,0,0,,如果我们把4N^2除以2 得到的是2N^2加上3除以2N乘以log n 我认为这个2N^2会增长得比这个东西快
Dialogue: 0,0:47:04.94,0:47:08.26,英文,,0,0,0,,So we only really need to care about the 2n squared part.
Dialogue: 0,0:47:04.94,0:47:08.26,中文,,0,0,0,,我们只需要关心2N^2的部分
Dialogue: 0,0:47:08.26,0:47:13.38,英文,,0,0,0,,But 3n squared is going to grow bigger than 2n squared.
Dialogue: 0,0:47:08.26,0:47:13.38,中文,,0,0,0,,但是3N^2会比2N^2增长得更快
Dialogue: 0,0:47:13.38,0:47:17.52,英文,,0,0,0,,Huh
Dialogue: 0,0:47:13.38,0:47:17.52,中文,,0,0,0,,啊？
Dialogue: 0,0:47:17.52,0:47:19.75,英文,,0,0,0,,Sure, we can do 1.99.
Dialogue: 0,0:47:17.52,0:47:19.75,中文,,0,0,0,,当然 我们可以用1.99
Dialogue: 0,0:47:19.75,0:47:23.45,英文,,0,0,0,,All right, yeah, we can just pick any number less than 2 for k1.
Dialogue: 0,0:47:19.75,0:47:23.45,中文,,0,0,0,,是的 我们可以选择任何小于2的数字作为k1
Dialogue: 0,0:47:23.45,0:47:27.85,英文,,0,0,0,,What are our k2
Dialogue: 0,0:47:23.45,0:47:27.85,中文,,0,0,0,,我们的k2是什么？
Dialogue: 0,0:47:27.85,0:47:28.31,英文,,0,0,0,,3
Dialogue: 0,0:47:27.85,0:47:28.31,中文,,0,0,0,,3？
Dialogue: 0,0:47:28.31,0:47:31.13,英文,,0,0,0,,Sure, we could pick 3.
Dialogue: 0,0:47:28.31,0:47:31.13,中文,,0,0,0,,当然 我们可以选择3
Dialogue: 0,0:47:31.13,0:47:39.78,英文,,0,0,0,,And if we do this math, then we can show that this is going to be between 1.99n squared and 3n squared for sufficient size.
Dialogue: 0,0:47:31.13,0:47:39.78,中文,,0,0,0,,如果我们进行这个数学运算 我们可以证明对于足够大的尺寸 这将介于1.99N^2和3N^2之间
Dialogue: 0,0:47:39.78,0:47:43.92,英文,,0,0,0,,I picked 1 and 3.
Dialogue: 0,0:47:39.78,0:47:43.92,中文,,0,0,0,,我选了1和3
Dialogue: 0,0:47:43.92,0:47:46.72,英文,,0,0,0,,This doesn't actually change what we did, all these operations.
Dialogue: 0,0:47:43.92,0:47:46.72,中文,,0,0,0,,这实际上并不改变我们所做的任何操作
Dialogue: 0,0:47:46.72,0:47:52.15,英文,,0,0,0,,The only difference is that we just use the theta symbol when we write our order of growth.
Dialogue: 0,0:47:46.72,0:47:52.15,中文,,0,0,0,,唯一的区别是当我们写我们的增长阶数时 我们只是使用了 θ 符号
Dialogue: 0,0:47:52.15,0:48:00.69,英文,,0,0,0,,So it's just a way to formalize this, show the math exactly, kind of specify what we mean, because order of growth is kind of like a wishy-washy term.
Dialogue: 0,0:47:52.15,0:48:00.69,中文,,0,0,0,,这只是一种形式化的方式 精确展示数学 有点指定我们的意思 因为增长阶数有点像一个模糊的术语
Dialogue: 0,0:48:00.69,0:48:03.28,英文,,0,0,0,,It doesn't exactly have a defined meaning.
Dialogue: 0,0:48:00.69,0:48:03.28,中文,,0,0,0,,它并没有确切的定义
Dialogue: 0,0:48:03.28,0:48:06.65,英文,,0,0,0,,Theta has a defined meaning.
Dialogue: 0,0:48:03.28,0:48:06.65,中文,,0,0,0,, θ 有一个明确定义
Dialogue: 0,0:48:06.65,0:48:10.42,英文,,0,0,0,,Now, we can use this to describe the rate of growth of a function.
Dialogue: 0,0:48:06.65,0:48:10.42,中文,,0,0,0,,现在 我们可以用这个来描述函数的增长速度
Dialogue: 0,0:48:10.42,0:48:21.81,英文,,0,0,0,,When we say the rate of growth of a piece of code, we're actually talking about the runtime as a function of n.
Dialogue: 0,0:48:10.42,0:48:32.81,英文,,0,0,0,,So if we say a function is theta of n, what we're actually saying is that the runtime of running that function is theta of n.
Dialogue: 0,0:48:10.42,0:48:21.81,中文,,0,0,0,,当我们谈论一段代码的增长率时 实际上是在讨论运行时间作为 n 的函数
Dialogue: 0,0:48:21.81,0:48:32.81,中文,,0,0,0,,因此 如果我们说一个函数是 Θ(n) 我们实际上是在说运行该函数的时间复杂度是 Θ(n)
Dialogue: 0,0:48:32.81,0:48:36.99,英文,,0,0,0,,Now, sometimes we don't just have a theta bound.
Dialogue: 0,0:48:32.81,0:48:36.99,中文,,0,0,0,,现在 有时我们不仅仅有一个 θ 限制
Dialogue: 0,0:48:36.99,0:48:43.68,英文,,0,0,0,,We can't figure out a lower bound on how fast things go, or a greater bound, or an upper bound.
Dialogue: 0,0:48:36.99,0:48:43.68,中文,,0,0,0,,我们无法找到有多快事物进行的下界 或者上界 或者一个更大的上界
Dialogue: 0,0:48:43.68,0:48:46.64,英文,,0,0,0,,Sometimes we only have half a bound.
Dialogue: 0,0:48:43.68,0:48:46.64,中文,,0,0,0,,有时候我们只有一半的界限
Dialogue: 0,0:48:46.64,0:48:49.32,英文,,0,0,0,,We know something's faster than this or something's slower than this.
Dialogue: 0,0:48:46.64,0:48:49.32,中文,,0,0,0,,我们知道有些比这更快或者有些比这更慢
Dialogue: 0,0:48:49.32,0:48:53.81,英文,,0,0,0,,And in that case, we can use big O and big omega.
Dialogue: 0,0:48:49.32,0:48:53.81,中文,,0,0,0,,在这种情况下 我们可以使用大O和大Ω
Dialogue: 0,0:48:53.81,0:49:02.56,英文,,0,0,0,,Kind of the analogy here is theta is like equality if A is equal to B, whereas O is less than or equal to and omega is greater than or equal to.
Dialogue: 0,0:48:53.81,0:49:02.56,中文,,0,0,0,,类似的比喻是 θ 就像相等 如果A等于B 而O小于或等于 Ω大于或等于
Dialogue: 0,0:49:02.56,0:49:05.46,英文,,0,0,0,,So here's our definition of theta.
Dialogue: 0,0:49:02.56,0:49:05.46,中文,,0,0,0,,这是我们对 θ 的定义
Dialogue: 0,0:49:05.46,0:49:14.61,英文,,0,0,0,,Just get rid of that other side, the left side, then we have big O. Get rid of the right side, we have big omega.
Dialogue: 0,0:49:05.46,0:49:14.61,中文,,0,0,0,,只要去掉另一边 也就是左边 那么我们就有了大O 去掉右边 我们就有了大Ω
Dialogue: 0,0:49:14.61,0:49:24.59,英文,,0,0,0,,So effectively, what we're saying for when we say something is O of n squared means that it's going to be faster than n squared, or the same speed as n squared.
Dialogue: 0,0:49:14.61,0:49:24.59,中文,,0,0,0,,实际上 当我们说某物是O(N^2)时 意味着它将比N^2快 或者与N^2的速度相同
Dialogue: 0,0:49:24.59,0:49:30.32,英文,,0,0,0,,And when we say omega n squared, that means that it's going to be n squared or slower.
Dialogue: 0,0:49:24.59,0:49:30.32,中文,,0,0,0,,当我们说 Ω N^2时 这意味着它将是 N^2或更慢
Dialogue: 0,0:49:30.32,0:49:37.36,英文,,0,0,0,,So here's examples of some functions that exist that are theta, O, and omega.
Dialogue: 0,0:49:30.32,0:49:37.36,中文,,0,0,0,,这里有一些存在的函数示例 它们是  θ 、O 和 Ω
Dialogue: 0,0:49:37.36,0:49:43.16,英文,,0,0,0,,Generally speaking, given any piece of code, you can try and figure out O bounds, omega bounds.
Dialogue: 0,0:49:37.36,0:49:43.16,中文,,0,0,0,,一般来说 对于任何一段代码 你可以尝试找出 O 界限、Ω 界限
Dialogue: 0,0:49:43.16,0:49:47.03,英文,,0,0,0,,Theta bounds tend to be difficult sometimes.
Dialogue: 0,0:49:43.16,0:49:47.03,中文,,0,0,0,, θ  界限有时候可能会很难
Dialogue: 0,0:49:47.03,0:49:49.89,英文,,0,0,0,,Generally, we don't care about the exact runtime function.
Dialogue: 0,0:49:47.03,0:49:49.89,中文,,0,0,0,,一般而言 我们不关心精确的运行时间函数
Dialogue: 0,0:49:49.89,0:49:51.97,英文,,0,0,0,,We only care about the order of growth.
Dialogue: 0,0:49:49.89,0:49:51.97,中文,,0,0,0,,我们只关心增长的阶数
Dialogue: 0,0:49:51.97,0:49:56.33,英文,,0,0,0,,And generally speaking, the easiest way to do this is you just look to constant operations.
Dialogue: 0,0:49:51.97,0:49:56.33,中文,,0,0,0,,一般来说 最简单的方法就是看常数操作
Dialogue: 0,0:49:56.33,0:49:59.17,英文,,0,0,0,,You reduce these to one unit of time.
Dialogue: 0,0:49:56.33,0:49:59.17,中文,,0,0,0,,将这些缩减为一个时间单位
Dialogue: 0,0:49:59.17,0:50:01.76,英文,,0,0,0,,You count how many times we do this.
Dialogue: 0,0:49:59.17,0:50:01.76,中文,,0,0,0,,你数数我们这样做了多少次
Dialogue: 0,0:50:01.76,0:50:05.79,英文,,0,0,0,,And we generally look only at these worst cases.
Dialogue: 0,0:50:01.76,0:50:05.79,中文,,0,0,0,,而且我们通常只关注这些最坏的情况
Dialogue: 0,0:50:05.79,0:50:07.68,英文,,0,0,0,,Now, we can use O bounds.
Dialogue: 0,0:50:05.79,0:50:07.68,中文,,0,0,0,,现在 我们可以使用 O 边界
Dialogue: 0,0:50:07.68,0:50:14.14,英文,,0,0,0,,Those tend to be used for upper bounds, like if you have a function that grows at least as slow as this.
Dialogue: 0,0:50:07.68,0:50:14.14,中文,,0,0,0,,这些通常用于上界 就像你有一个函数 至少以这个速度增长一样
Dialogue: 0,0:50:14.14,0:50:16.88,英文,,0,0,0,,We will see some examples when we talk about disjoint sets.
Dialogue: 0,0:50:14.14,0:50:16.88,中文,,0,0,0,,当我们谈论不相交集时 我们会看到一些例子
Dialogue: 0,0:50:16.88,0:50:20.70,英文,,0,0,0,,Omega, we don't use it too often, but it does show up in theoretical computer science.
Dialogue: 0,0:50:16.88,0:50:20.70,中文,,0,0,0,,Ω 我们不经常使用它 但它确实出现在理论计算机科学中
Dialogue: 0,0:50:20.70,0:50:24.16,英文,,0,0,0,,We'll show it when we get to sorting.
Dialogue: 0,0:50:20.70,0:50:24.16,中文,,0,0,0,,我们到排序时再展示
Dialogue: 0,0:50:24.16,0:50:25.62,英文,,0,0,0,,Yeah.
Dialogue: 0,0:50:24.16,0:50:25.62,中文,,0,0,0,,是的
Dialogue: 0,0:50:25.62,0:50:26.65,英文,,0,0,0,,All right.
Dialogue: 0,0:50:26.65,0:50:28.83,英文,,0,0,0,,If there are any other questions, feel free to come up.
Dialogue: 0,0:50:26.65,0:50:28.83,中文,,0,0,0,,如果有其他问题 随时提出来
Dialogue: 0,0:50:28.83,0:50:34.40,英文,,0,0,0,,Otherwise, yeah, we're done.
Dialogue: 0,0:50:28.83,0:50:34.40,中文,,0,0,0,,要不然 是的 我们完成了
Dialogue: 0,0:50:34.40,0:50:37.68,英文,,0,0,0,,Yeah, mid-term reviews on Wednesday.
Dialogue: 0,0:50:34.40,0:50:37.68,中文,,0,0,0,,是的 周三进行期中审查
Dialogue: 0,0:50:37.68,0:50:41.66,英文,,0,0,0,,Hello
Dialogue: 0,0:50:37.68,0:50:41.66,中文,,0,0,0,,喂？
Dialogue: 0,0:50:41.66,0:50:43.40,英文,,0,0,0,,Hello
Dialogue: 0,0:50:41.66,0:50:43.40,中文,,0,0,0,,你好？
Dialogue: 0,0:50:43.40,0:51:05.06,英文,,0,0,0,,So this was running.
Dialogue: 0,0:50:43.40,0:51:05.06,中文,,0,0,0,,这个在运行
Dialogue: 0,0:51:05.06,0:51:06.60,英文,,0,0,0,,Test test.
Dialogue: 0,0:51:05.06,0:51:06.60,中文,,0,0,0,,测试测试
