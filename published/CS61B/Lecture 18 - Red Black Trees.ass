[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 3
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1152
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Audio File: D:/python_code/video_tool/video_tool/result/[61B SP24] Lecture 17 - B-Trees (2-3, 2-3-4 Trees).mp4
Video File: D:/python_code/video_tool/video_tool/result/[61B SP24] Lecture 17 - B-Trees (2-3, 2-3-4 Trees).mp4
Video AR Mode: 4
Video AR Value: 1.600000
Video Zoom Percent: 0.750000
Scroll Position: 792
Active Line: 763
Video Position: 11471

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,13,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,90,100,0,0,1,1.33333,1.33333,2,6,6,7,1
Style: 英文,Arial,24,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,1,1,5,1
Style: 中文,微软雅黑,38,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,2,2,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
Dialogue: 0,0:00:02.96,0:00:04.60,英文,,0,0,0,,Plus, it'll be a good story to tell everyone.
Dialogue: 0,0:00:02.96,0:00:04.60,中文,,0,0,0,,这也会是一个好故事可以告诉大家的
Dialogue: 0,0:00:04.60,0:00:07.62,英文,,0,0,0,,OK.
Dialogue: 0,0:00:07.62,0:00:10.06,英文,,0,0,0,,All right, let's keep exploring trees.
Dialogue: 0,0:00:07.62,0:00:10.06,中文,,0,0,0,,好的 让我们继续探索树
Dialogue: 0,0:00:10.06,0:00:12.72,英文,,0,0,0,,So last time, we talked about B-trees.
Dialogue: 0,0:00:10.06,0:00:12.72,中文,,0,0,0,,上次我们讨论了 B 树
Dialogue: 0,0:00:12.72,0:00:14.61,英文,,0,0,0,,And B-trees, they're beautiful.
Dialogue: 0,0:00:12.72,0:00:14.61,中文,,0,0,0,,B 树 很美丽
Dialogue: 0,0:00:14.61,0:00:16.41,英文,,0,0,0,,They give us perfect balance.
Dialogue: 0,0:00:14.61,0:00:16.41,中文,,0,0,0,,它们给了我们完美的平衡
Dialogue: 0,0:00:16.41,0:00:17.45,英文,,0,0,0,,Remember the ideas?
Dialogue: 0,0:00:16.41,0:00:17.45,中文,,0,0,0,,还记得那些概念吗
Dialogue: 0,0:00:17.45,0:00:21.58,英文,,0,0,0,,You can overstuff a node, and then the nodes will split.
Dialogue: 0,0:00:17.45,0:00:21.58,中文,,0,0,0,,你可以过度填充一个节点 然后节点会分裂
Dialogue: 0,0:00:21.58,0:00:23.96,英文,,0,0,0,,And the property was that you get perfect balance.
Dialogue: 0,0:00:21.58,0:00:23.96,中文,,0,0,0,,而且特性就是你获得了完美的平衡
Dialogue: 0,0:00:23.96,0:00:28.76,英文,,0,0,0,,But one problem is that implementing a B-tree is kind of annoying.
Dialogue: 0,0:00:23.96,0:00:28.76,中文,,0,0,0,,但一个问题是实现B树有点烦人
Dialogue: 0,0:00:28.76,0:00:30.36,英文,,0,0,0,,Here's a bit of pseudocode.
Dialogue: 0,0:00:28.76,0:00:30.36,中文,,0,0,0,,这里有一些伪代码
Dialogue: 0,0:00:30.36,0:00:32.04,英文,,0,0,0,,It's not even totally finished.
Dialogue: 0,0:00:30.36,0:00:32.04,中文,,0,0,0,,甚至还没有完全完成
Dialogue: 0,0:00:32.04,0:00:35.10,英文,,0,0,0,,You can already see having to deal with different nodes.
Dialogue: 0,0:00:32.04,0:00:35.10,中文,,0,0,0,,你已经可以看到需要处理不同的节点
Dialogue: 0,0:00:35.10,0:00:36.24,英文,,0,0,0,,Some nodes have two items.
Dialogue: 0,0:00:35.10,0:00:36.24,中文,,0,0,0,,一些节点有两个项
Dialogue: 0,0:00:36.24,0:00:38.02,英文,,0,0,0,,Some nodes have three items.
Dialogue: 0,0:00:36.24,0:00:38.02,中文,,0,0,0,,一些节点有三个项目
Dialogue: 0,0:00:38.02,0:00:42.07,英文,,0,0,0,,Having to deal with the split operation can be kind of complicated.
Dialogue: 0,0:00:38.02,0:00:42.07,中文,,0,0,0,,处理分割操作可能有点复杂
Dialogue: 0,0:00:42.07,0:00:50.77,英文,,0,0,0,,So today, we're going to try to do something a little bit different, which is going to be inspired by the B-tree, but is hopefully easier to implement.
Dialogue: 0,0:00:42.07,0:00:50.77,中文,,0,0,0,,今天 我们要尝试做一些有点不同的事情 受 B 树的启发 但希望更容易实现
Dialogue: 0,0:00:50.77,0:00:59.90,英文,,0,0,0,,So before I tell you about the new idea for today, which is left-leaning red-black trees, I first have to introduce something seemingly totally unrelated, and then I'll bring it back later.
Dialogue: 0,0:00:50.77,0:00:59.90,中文,,0,0,0,,在我告诉你今天的新想法之前 也就是左倾红黑树 我首先要介绍一些看起来完全不相关的东西 然后稍后再回来
Dialogue: 0,0:00:59.90,0:01:04.31,英文,,0,0,0,,So I'll tell you what tree rotation is, and then I will bring it back later afterwards.
Dialogue: 0,0:00:59.90,0:01:04.31,中文,,0,0,0,,我会告诉你什么是树旋转 然后稍后再提到
Dialogue: 0,0:01:04.31,0:01:06.77,英文,,0,0,0,,By the way, tell me if the audio is weird or whatever.
Dialogue: 0,0:01:04.31,0:01:06.77,中文,,0,0,0,,顺便说一下 如果听起来有点奇怪或其他什么的 请告诉我
Dialogue: 0,0:01:06.77,0:01:08.23,英文,,0,0,0,,We'll try to work it out.
Dialogue: 0,0:01:06.77,0:01:08.23,中文,,0,0,0,,我们会试着解决它
Dialogue: 0,0:01:08.23,0:01:09.87,英文,,0,0,0,,OK.
Dialogue: 0,0:01:09.87,0:01:14.48,英文,,0,0,0,,So let's say I have a binary search tree with the numbers 1, 2, and 3.
Dialogue: 0,0:01:09.87,0:01:14.48,中文,,0,0,0,,假设我有一个二叉搜索树 其中包含数字1、2和3
Dialogue: 0,0:01:14.48,0:01:20.56,英文,,0,0,0,,And it turns out, depending on what order you add those numbers, you could get all sorts of different binary search trees.
Dialogue: 0,0:01:14.48,0:01:20.56,中文,,0,0,0,,事实证明 根据添加这些数字的顺序 你可能会得到各种不同的二叉搜索树
Dialogue: 0,0:01:20.56,0:01:23.54,英文,,0,0,0,,In fact, here are the five possible trees.
Dialogue: 0,0:01:20.56,0:01:23.54,中文,,0,0,0,,实际上 这里有五棵可能的树
Dialogue: 0,0:01:23.54,0:01:30.65,英文,,0,0,0,,One thing you'll notice is that all five of these trees, they represent the exact same tree, or the exact same values.
Dialogue: 0,0:01:23.54,0:01:30.65,中文,,0,0,0,,你会注意到其中的一件事是 所有这五棵树 它们代表的都是完全相同的树 或者说完全相同的值
Dialogue: 0,0:01:30.65,0:01:33.11,英文,,0,0,0,,It's a set with the numbers 1, 2, and 3.
Dialogue: 0,0:01:30.65,0:01:33.11,中文,,0,0,0,,它是一个包含数字1、2和3的集合
Dialogue: 0,0:01:33.11,0:01:36.07,英文,,0,0,0,,And the only difference is the structure of the tree.
Dialogue: 0,0:01:33.11,0:01:36.07,中文,,0,0,0,,唯一的区别是树的结构
Dialogue: 0,0:01:36.07,0:01:40.00,英文,,0,0,0,,But semantically, all of these represent the same tree.
Dialogue: 0,0:01:36.07,0:01:40.00,中文,,0,0,0,,但从语义上讲 所有这些都代表同一棵树
Dialogue: 0,0:01:40.00,0:01:50.07,英文,,0,0,0,,And so what we'll see is, is there any way to go from one of these trees and switch into a different version of the same tree?
Dialogue: 0,0:01:40.00,0:01:50.07,中文,,0,0,0,,我们将看到的是 有没有办法从这些树中的一棵切换到同一棵树的不同版本
Dialogue: 0,0:01:50.07,0:01:53.63,英文,,0,0,0,,That is, the same items, but arranged in a slightly different order.
Dialogue: 0,0:01:50.07,0:01:53.63,中文,,0,0,0,,也就是说 相同的项目 但以稍微不同的顺序排列
Dialogue: 0,0:01:53.63,0:01:57.79,英文,,0,0,0,,So maybe I have a tree that looks like this, and it's spindly, and I don't like it.
Dialogue: 0,0:01:53.63,0:01:57.79,中文,,0,0,0,,也许我有一棵树看起来像这样 很细长 我不喜欢它
Dialogue: 0,0:01:57.79,0:02:00.80,英文,,0,0,0,,Is there any way to somehow manipulate this tree?
Dialogue: 0,0:01:57.79,0:02:00.80,中文,,0,0,0,,有没有办法以某种方式操纵这棵树
Dialogue: 0,0:02:00.80,0:02:04.40,英文,,0,0,0,,so that I can make it look like this one, which is bushier and nicer.
Dialogue: 0,0:02:00.80,0:02:04.40,中文,,0,0,0,,以便我可以使它看起来像这棵 更丰满更好看
Dialogue: 0,0:02:04.40,0:02:14.59,英文,,0,0,0,,Because if that's possible, then maybe I could somehow use this operation to take my spindly trees, which are bad, and convert them into these bushy trees, which we like.
Dialogue: 0,0:02:04.40,0:02:14.59,中文,,0,0,0,,因为如果可能的话 那么也许我可以以某种方式使用这个操作来将我那些细长而糟糕的树转换成我们喜欢的丰满的树
Dialogue: 0,0:02:14.59,0:02:17.57,英文,,0,0,0,,Because bushy trees, they have logarithmic performance.
Dialogue: 0,0:02:14.59,0:02:17.57,中文,,0,0,0,,因为繁茂的树木 它们具有对数性能
Dialogue: 0,0:02:17.57,0:02:18.97,英文,,0,0,0,,We like them.
Dialogue: 0,0:02:17.57,0:02:18.97,中文,,0,0,0,,我们喜欢它们
Dialogue: 0,0:02:18.97,0:02:23.43,英文,,0,0,0,,So it turns out, that there's an operation called rotation that will allow us to do this.
Dialogue: 0,0:02:18.97,0:02:23.43,中文,,0,0,0,,结果是  有一个叫做旋转的操作可以让我们做到这一点
Dialogue: 0,0:02:23.43,0:02:33.62,英文,,0,0,0,,It will take any one of these trees, and given a sequence of rotations, it will allow you to convert one of these trees to any one of these other trees that you like.
Dialogue: 0,0:02:23.43,0:02:33.62,中文,,0,0,0,,它将取任意一棵树 根据一系列的旋转 让你将其中一棵树转换为你喜欢的任何其他树
Dialogue: 0,0:02:33.62,0:02:35.77,英文,,0,0,0,,And that's kind of nice.
Dialogue: 0,0:02:33.62,0:02:35.77,中文,,0,0,0,,这还挺不错的
Dialogue: 0,0:02:35.77,0:02:39.67,英文,,0,0,0,,So it can allow you to take taller trees, convert them to shorter ones, and vice versa.
Dialogue: 0,0:02:35.77,0:02:39.67,中文,,0,0,0,,它可以让你将较高的树转换为较矮的树 反之亦然
Dialogue: 0,0:02:39.67,0:02:42.67,英文,,0,0,0,,So what exactly is rotation?
Dialogue: 0,0:02:39.67,0:02:42.67,中文,,0,0,0,,那么旋转到底是什么
Dialogue: 0,0:02:42.67,0:02:44.55,英文,,0,0,0,,Here's the idea behind rotation.
Dialogue: 0,0:02:42.67,0:02:44.55,中文,,0,0,0,,旋转背后的理念是这样的
Dialogue: 0,0:02:44.55,0:02:49.52,英文,,0,0,0,,It's the operation that lets you convert between different binary search trees that all represent the same thing.
Dialogue: 0,0:02:44.55,0:02:49.52,中文,,0,0,0,,它是一种操作 让你能够在不同的二叉搜索树之间转换 这些树都表示同样的内容
Dialogue: 0,0:02:49.52,0:02:51.80,英文,,0,0,0,,It's just a set of numbers, 1, 2, 3.
Dialogue: 0,0:02:49.52,0:02:51.80,中文,,0,0,0,,它只是一组数字 1、2、3
Dialogue: 0,0:02:51.80,0:02:56.70,英文,,0,0,0,,But it can change the structure of the tree, make it taller, make it shorter.
Dialogue: 0,0:02:51.80,0:02:56.70,中文,,0,0,0,,但它可以改变树的结构 使其更高 使其更矮
Dialogue: 0,0:02:56.70,0:03:00.81,英文,,0,0,0,,So in order to rotate a tree, you need to specify two things.
Dialogue: 0,0:02:56.70,0:03:00.81,中文,,0,0,0,,为了旋转一棵树 你需要指定两件事情
Dialogue: 0,0:03:00.81,0:03:04.45,英文,,0,0,0,,You need to say, am I rotating right or left?
Dialogue: 0,0:03:00.81,0:03:04.45,中文,,0,0,0,,你需要说 我是向右旋转还是向左旋转
Dialogue: 0,0:03:04.45,0:03:06.57,英文,,0,0,0,,In this picture, I'm going left.
Dialogue: 0,0:03:04.45,0:03:06.57,中文,,0,0,0,,在这张图片里 我往左走
Dialogue: 0,0:03:06.57,0:03:09.89,英文,,0,0,0,,I also need to say which node I'm rotating on.
Dialogue: 0,0:03:06.57,0:03:09.89,中文,,0,0,0,,我还需要说明我在旋转哪个节点
Dialogue: 0,0:03:09.89,0:03:12.35,英文,,0,0,0,,So it's not enough to say I'm rotating the tree left.
Dialogue: 0,0:03:09.89,0:03:12.35,中文,,0,0,0,,仅仅说我在左旋树上并不足够
Dialogue: 0,0:03:12.35,0:03:16.83,英文,,0,0,0,,I have to say I'm rotating left on G. So you say two things.
Dialogue: 0,0:03:12.35,0:03:16.83,中文,,0,0,0,,我必须说我在 G 上左旋 所以你要说两件事情
Dialogue: 0,0:03:16.83,0:03:19.53,英文,,0,0,0,,So I say, G, go left.
Dialogue: 0,0:03:16.83,0:03:19.53,中文,,0,0,0,,我说 G 往左走
Dialogue: 0,0:03:19.53,0:03:21.75,英文,,0,0,0,,And so G's going to say, OK, I'm going left.
Dialogue: 0,0:03:19.53,0:03:21.75,中文,,0,0,0,,于是 G 会说 好的 我往左走
Dialogue: 0,0:03:21.75,0:03:25.82,英文,,0,0,0,,And G's going to start kind of tumbling over toward the left.
Dialogue: 0,0:03:21.75,0:03:25.82,中文,,0,0,0,,然后 G 会开始朝左边倾斜
Dialogue: 0,0:03:25.82,0:03:28.42,英文,,0,0,0,,And if G starts tumbling over toward the left,
Dialogue: 0,0:03:25.82,0:03:28.42,中文,,0,0,0,,如果 G 开始向左倾斜
Dialogue: 0,0:03:28.42,0:03:32.10,英文,,0,0,0,,Well, it's no longer the root, because it's starting to tumble down toward the left.
Dialogue: 0,0:03:28.42,0:03:32.10,中文,,0,0,0,,它不再是根 因为它开始向左倾斜了
Dialogue: 0,0:03:32.10,0:03:35.90,英文,,0,0,0,,So somebody else needs to swing up and become the brand new root.
Dialogue: 0,0:03:32.10,0:03:35.90,中文,,0,0,0,,别人需要上来 成为全新的根
Dialogue: 0,0:03:35.90,0:03:39.92,英文,,0,0,0,,So if I look at this picture, G's kind of going down into the left.
Dialogue: 0,0:03:35.90,0:03:39.92,中文,,0,0,0,,如果我看这张图片 G 有点向左下方倾斜
Dialogue: 0,0:03:39.92,0:03:44.24,英文,,0,0,0,,And I can think, who might be able to swing up and become the new root?
Dialogue: 0,0:03:39.92,0:03:44.24,中文,,0,0,0,,我可以想象 谁可能能够上来 成为新的根呢
Dialogue: 0,0:03:44.24,0:03:50.98,英文,,0,0,0,,Well, maybe that's P. So if G goes down and to the left, P can come up and become the new root.
Dialogue: 0,0:03:44.24,0:03:50.98,中文,,0,0,0,,也许是 P 如果 G 向左下倾斜 P 就可以上来 成为新的根
Dialogue: 0,0:03:50.98,0:03:53.78,英文,,0,0,0,,So P will come up and become the new boss.
Dialogue: 0,0:03:50.98,0:03:53.78,中文,,0,0,0,, P 将会上来 成为新的老板
Dialogue: 0,0:03:53.78,0:03:55.64,英文,,0,0,0,,Let's see what that looks like.
Dialogue: 0,0:03:53.78,0:03:55.64,中文,,0,0,0,,让我们看看它是什么样子
Dialogue: 0,0:03:55.64,0:03:58.24,英文,,0,0,0,,So G, it's swinging down and to the left.
Dialogue: 0,0:03:55.64,0:03:58.24,中文,,0,0,0,,所以 G 它向下摆动并向左摆动
Dialogue: 0,0:03:58.24,0:04:00.58,英文,,0,0,0,,P, it's now the new boss.
Dialogue: 0,0:03:58.24,0:04:00.58,中文,,0,0,0,,P 现在是新老板了
Dialogue: 0,0:04:00.58,0:04:02.00,英文,,0,0,0,,So G is now to the left.
Dialogue: 0,0:04:00.58,0:04:02.00,中文,,0,0,0,,所以 G 现在在左边
Dialogue: 0,0:04:02.00,0:04:04.20,英文,,0,0,0,,P is now the new boss.
Dialogue: 0,0:04:02.00,0:04:04.20,中文,,0,0,0,,P 现在是新老板了
Dialogue: 0,0:04:04.20,0:04:09.52,英文,,0,0,0,,But we have a problem, which is look at P. It now has one, two, three children.
Dialogue: 0,0:04:04.20,0:04:09.52,中文,,0,0,0,,但我们有一个问题 就是看看 P 现在它有一个、两个、三个子节点
Dialogue: 0,0:04:09.52,0:04:11.06,英文,,0,0,0,,That doesn't make sense.
Dialogue: 0,0:04:09.52,0:04:11.06,中文,,0,0,0,,这没道理
Dialogue: 0,0:04:11.06,0:04:11.48,英文,,0,0,0,,See?
Dialogue: 0,0:04:11.06,0:04:11.48,中文,,0,0,0,,看见了吗
Dialogue: 0,0:04:11.48,0:04:12.94,英文,,0,0,0,,K, I don't make sense.
Dialogue: 0,0:04:11.48,0:04:12.94,中文,,0,0,0,,嗯 我说的没道理
Dialogue: 0,0:04:12.94,0:04:18.01,英文,,0,0,0,,So where should we put K and the subtree so that it makes more sense?
Dialogue: 0,0:04:12.94,0:04:18.01,中文,,0,0,0,,那么我们应该把K和子树放在哪里 这样它更有意义呢
Dialogue: 0,0:04:18.01,0:04:20.51,英文,,0,0,0,,Because right now, P has three children.
Dialogue: 0,0:04:18.01,0:04:20.51,中文,,0,0,0,,因为现在 P有三个子节点
Dialogue: 0,0:04:20.51,0:04:22.19,英文,,0,0,0,,And that makes no sense.
Dialogue: 0,0:04:20.51,0:04:22.19,中文,,0,0,0,,这一点都不合理
Dialogue: 0,0:04:22.19,0:04:25.37,英文,,0,0,0,,So if I look at this, well, I notice G
Dialogue: 0,0:04:22.19,0:04:25.37,中文,,0,0,0,,如果我看一下这个 我注意到了G
Dialogue: 0,0:04:25.37,0:04:28.07,英文,,0,0,0,,If I go back here, G used to have two children.
Dialogue: 0,0:04:25.37,0:04:28.07,中文,,0,0,0,,如果我回到这里 G以前有两个子节点
Dialogue: 0,0:04:28.07,0:04:31.89,英文,,0,0,0,,But because P swung up, G only has one child now.
Dialogue: 0,0:04:28.07,0:04:31.89,中文,,0,0,0,,但因为P上升 G现在只有一个子节点
Dialogue: 0,0:04:31.89,0:04:40.44,英文,,0,0,0,,So this seems like a natural place to put K. So I will transfer K from being P subordinate into being G subordinate.
Dialogue: 0,0:04:31.89,0:04:40.44,中文,,0,0,0,,这似乎是放置K的自然位置 我将K从P的下属转为G的下属
Dialogue: 0,0:04:40.44,0:04:43.24,英文,,0,0,0,,So K, it doesn't make sense here because there are three children.
Dialogue: 0,0:04:40.44,0:04:43.24,中文,,0,0,0,,所以K 在这里是没有意义的 因为有三个子节点
Dialogue: 0,0:04:43.24,0:04:46.60,英文,,0,0,0,,And in a binary search tree, we can't have that.
Dialogue: 0,0:04:43.24,0:04:46.60,中文,,0,0,0,,而在二叉搜索树中 我们不能这样
Dialogue: 0,0:04:46.60,0:04:53.74,英文,,0,0,0,,So instead, we will transfer it from being P subordinate to G subordinate, and now everything makes sense.
Dialogue: 0,0:04:46.60,0:04:53.74,中文,,0,0,0,,我们将它从P的下属转为G的下属 现在一切都有道理了
Dialogue: 0,0:04:53.74,0:05:04.20,英文,,0,0,0,,So G, it swung down and to the left, and then P, it swung up to become the new boss, and then this case of tree had to be transferred from P to G.
Dialogue: 0,0:04:53.74,0:05:04.20,中文,,0,0,0,,所以G 它向下和向左摆动 然后P 它上升成为新的老板 然后这个树的情况必须从P转到G
Dialogue: 0,0:05:04.20,0:05:05.82,英文,,0,0,0,,That's the rotation operation.
Dialogue: 0,0:05:04.20,0:05:05.82,中文,,0,0,0,,这就是旋转操作
Dialogue: 0,0:05:05.82,0:05:07.71,英文,,0,0,0,,If it doesn't make total sense, it's OK.
Dialogue: 0,0:05:05.82,0:05:07.71,中文,,0,0,0,,如果这不是完全有意义的话 没关系
Dialogue: 0,0:05:07.71,0:05:09.91,英文,,0,0,0,,We'll practice it a bunch more.
Dialogue: 0,0:05:07.71,0:05:09.91,中文,,0,0,0,,我们会多练习一些
Dialogue: 0,0:05:09.91,0:05:10.93,英文,,0,0,0,,But that's kind of the idea.
Dialogue: 0,0:05:09.91,0:05:10.93,中文,,0,0,0,,但这就是大致的想法
Dialogue: 0,0:05:10.93,0:05:14.87,英文,,0,0,0,,So G is going left, and then P comes up and becomes the new boss.
Dialogue: 0,0:05:10.93,0:05:14.87,中文,,0,0,0,,所以 G 往左走 然后 P 出现并成为新的老板
Dialogue: 0,0:05:14.87,0:05:17.13,英文,,0,0,0,,So look, G, it kind of went to the left.
Dialogue: 0,0:05:14.87,0:05:17.13,中文,,0,0,0,,看 G 它有点往左走了
Dialogue: 0,0:05:17.13,0:05:19.31,英文,,0,0,0,,P came up, became the new boss.
Dialogue: 0,0:05:17.13,0:05:19.31,中文,,0,0,0,,P 出现 成为新的老板
Dialogue: 0,0:05:19.31,0:05:26.47,英文,,0,0,0,,And something we had to do is we had to transfer this K subtree from being P subordinate to being G subordinate.
Dialogue: 0,0:05:19.31,0:05:26.47,中文,,0,0,0,,我们要做的一件事是 我们必须把这个 K 子树从成为 P 的下属转变为成为 G 的下属
Dialogue: 0,0:05:26.47,0:05:27.58,英文,,0,0,0,,OK.
Dialogue: 0,0:05:27.58,0:05:33.71,英文,,0,0,0,,One thing I'll briefly note one more time is that when I rotated the tree, I did not change anything about the tree.
Dialogue: 0,0:05:27.58,0:05:33.71,中文,,0,0,0,,有一件事我再简单说明一下 就是当我旋转树时 我没有改变树的任何内容
Dialogue: 0,0:05:33.71,0:05:40.05,英文,,0,0,0,,It is still a set of the items A, B, C, G, P, K, L, J, R. It's the same items.
Dialogue: 0,0:05:33.71,0:05:40.05,中文,,0,0,0,,它仍然是由项目 A、B、C、G、P、K、L、J、R 组成的 是同样的项目
Dialogue: 0,0:05:40.05,0:05:43.75,英文,,0,0,0,,I just put them in a slightly different structure after the rotation.
Dialogue: 0,0:05:40.05,0:05:43.75,中文,,0,0,0,,我只是在旋转后稍微改变了它们的结构
Dialogue: 0,0:05:43.75,0:05:47.99,英文,,0,0,0,,In this particular case, the tree got taller.
Dialogue: 0,0:05:43.75,0:05:47.99,中文,,0,0,0,,在这种特殊情况下 树变得更高了
Dialogue: 0,0:05:47.99,0:05:56.32,英文,,0,0,0,,If you don't like that, here's another interpretation, which is you can think of G and P as temporarily merging.
Dialogue: 0,0:05:47.99,0:05:56.32,中文,,0,0,0,,如果你不喜欢这样 还有另一种解释 就是你可以把 G 和 P 暂时合并起来
Dialogue: 0,0:05:56.32,0:05:57.56,英文,,0,0,0,,So G is going to the left.
Dialogue: 0,0:05:56.32,0:05:57.56,中文,,0,0,0,,所以 G 会去左边
Dialogue: 0,0:05:57.56,0:05:58.80,英文,,0,0,0,,It's going toward the left.
Dialogue: 0,0:05:57.56,0:05:58.80,中文,,0,0,0,,往左边走
Dialogue: 0,0:05:58.80,0:06:01.18,英文,,0,0,0,,P is going to come up and become the new root.
Dialogue: 0,0:05:58.80,0:06:01.18,中文,,0,0,0,,P 将会出现并成为新的根
Dialogue: 0,0:06:01.18,0:06:05.72,英文,,0,0,0,,So another way you can think of it as G and P are going to temporarily merge.
Dialogue: 0,0:06:01.18,0:06:05.72,中文,,0,0,0,,你可以另外一种方式来思考 就是 G 和 P 会暂时合并
Dialogue: 0,0:06:05.72,0:06:10.37,英文,,0,0,0,,Look, they've merged into a single really big node with two items.
Dialogue: 0,0:06:05.72,0:06:10.37,中文,,0,0,0,,看 它们已经合并成一个单独的非常大的节点 有两个项目
Dialogue: 0,0:06:10.37,0:06:16.69,英文,,0,0,0,,And then, because we're rotating G to the left, we can take G, and we can shoot it down and to the left.
Dialogue: 0,0:06:10.37,0:06:16.69,中文,,0,0,0,,然后 因为我们正在将 G 向左旋转 我们可以拿起 G 然后把它向下和向左射出去
Dialogue: 0,0:06:16.69,0:06:19.87,英文,,0,0,0,,So look, G gets shot down and to the left.
Dialogue: 0,0:06:16.69,0:06:19.87,中文,,0,0,0,,所以看 G 被射向左下方
Dialogue: 0,0:06:19.87,0:06:26.20,英文,,0,0,0,,And when we shoot G down to the left, well then C and K, they hang over G, or they hang underneath G,
Dialogue: 0,0:06:19.87,0:06:26.20,中文,,0,0,0,,当我们把 G 射向左下方时 那么 C 和 K 就悬挂在 G 上方 或者它们悬挂在 G 下方
Dialogue: 0,0:06:26.20,0:06:33.20,英文,,0,0,0,,and R hangs underneath P. So if you like, this is another interpretation that means the exact same thing.
Dialogue: 0,0:06:26.20,0:06:33.20,中文,,0,0,0,,而 R 悬挂在 P 下方 如果你喜欢 这是另一种解释 意思完全相同
Dialogue: 0,0:06:33.20,0:06:40.39,英文,,0,0,0,,You take G and P, you temporarily merge them, and then you take G, you shoot it down and to the left.
Dialogue: 0,0:06:33.20,0:06:40.39,中文,,0,0,0,,你拿 G 和 P 你暂时合并它们 然后你拿 G 你把它向下射击并向左移动
Dialogue: 0,0:06:40.39,0:06:42.75,英文,,0,0,0,,OK, great.
Dialogue: 0,0:06:40.39,0:06:42.75,中文,,0,0,0,,好的 很好
Dialogue: 0,0:06:42.75,0:06:48.52,英文,,0,0,0,,So I guess brief exercise for you, just to make sure this is all starting to make sense.
Dialogue: 0,0:06:42.75,0:06:48.52,中文,,0,0,0,,我想给你做个简短的练习 只是为了确保这一切开始变得有意义
Dialogue: 0,0:06:48.52,0:06:54.40,英文,,0,0,0,,What if I want to rotate p to the right?
Dialogue: 0,0:06:48.52,0:06:54.40,中文,,0,0,0,,如果我想把 P 向右旋转呢
Dialogue: 0,0:06:54.40,0:06:55.98,英文,,0,0,0,,Again, you can use any interpretation you like.
Dialogue: 0,0:06:54.40,0:06:55.98,中文,,0,0,0,,同样 你可以使用任何你喜欢的解释
Dialogue: 0,0:06:55.98,0:07:00.98,英文,,0,0,0,,You can think of P as going to the right, and then G coming up and becoming the new boss.
Dialogue: 0,0:06:55.98,0:07:00.98,中文,,0,0,0,,你可以把 P 看作向右移动 然后 G 出现并成为新的老板
Dialogue: 0,0:07:00.98,0:07:05.98,英文,,0,0,0,,You can think of P and G as temporarily merging, and then you shoot P down into the right.
Dialogue: 0,0:07:00.98,0:07:05.98,中文,,0,0,0,,你可以把 P 和 G 看作暂时合并 然后把 P 向右射击
Dialogue: 0,0:07:05.98,0:07:10.98,英文,,0,0,0,,Try and think of, like, what would the tree look like if I rotated to the right on P?
Dialogue: 0,0:07:05.98,0:07:10.98,中文,,0,0,0,,试着想想 就像 如果我在 P 上向右旋转 树会是什么样子
Dialogue: 0,0:07:10.98,0:07:15.49,英文,,0,0,0,,Because remember, when you rotate, you have to say left or right, and you have to say which node.
Dialogue: 0,0:07:10.98,0:07:15.49,中文,,0,0,0,,因为记住 当你旋转时 你必须说左或右 还必须说哪个节点
Dialogue: 0,0:07:15.49,0:07:17.49,英文,,0,0,0,,So you can try and think about it.
Dialogue: 0,0:07:15.49,0:07:17.49,中文,,0,0,0,,你可以试着想一想
Dialogue: 0,0:07:17.49,0:07:18.57,英文,,0,0,0,,What would it look like?
Dialogue: 0,0:07:17.49,0:07:18.57,中文,,0,0,0,,它会是什么样子
Dialogue: 0,0:07:18.57,0:07:22.85,英文,,0,0,0,,Well, I have to take P and G and temporarily merge them.
Dialogue: 0,0:07:18.57,0:07:22.85,中文,,0,0,0,,我必须把 P 和 G 临时合并起来
Dialogue: 0,0:07:22.85,0:07:29.88,英文,,0,0,0,,And if I temporarily merge them, and then I should p down into the right, well, here's G and P. They're temporarily merged.
Dialogue: 0,0:07:22.85,0:07:29.88,中文,,0,0,0,,如果我暂时合并它们 然后我应该向右下 p 在这里是 G 和 P 它们被临时合并了
Dialogue: 0,0:07:29.88,0:07:33.20,英文,,0,0,0,,And then I should p down into the right.
Dialogue: 0,0:07:29.88,0:07:33.20,中文,,0,0,0,,然后我应该向右下 p
Dialogue: 0,0:07:33.20,0:07:37.28,英文,,0,0,0,,And again, that K subtree, remember how it used to belong to G?
Dialogue: 0,0:07:33.20,0:07:37.28,中文,,0,0,0,,再说一遍 那个K子树 记得它以前属于G吗
Dialogue: 0,0:07:37.28,0:07:43.08,英文,,0,0,0,,It is now transferred over to P, because GP had three children.
Dialogue: 0,0:07:37.28,0:07:43.08,中文,,0,0,0,,现在它已经转移到P了 因为GP有三个子节点
Dialogue: 0,0:07:43.08,0:07:48.73,英文,,0,0,0,,And then when I shot P down into the right, it now takes two of the children, the K subtree and the R subtree.
Dialogue: 0,0:07:43.08,0:07:48.73,中文,,0,0,0,,然后 当我将P向右移动时 它现在包含了两个子树 K子树和R子树
Dialogue: 0,0:07:48.73,0:07:52.17,英文,,0,0,0,,And then G keeps that leftmost C subtree.
Dialogue: 0,0:07:48.73,0:07:52.17,中文,,0,0,0,,然后G保留那个最左边的C子树
Dialogue: 0,0:07:52.17,0:07:59.07,英文,,0,0,0,,So in this case, it turns out that by rotating to the right, I actually went back to the original tree that I had, which is kind of cool.
Dialogue: 0,0:07:52.17,0:07:59.07,中文,,0,0,0,,在这种情况下 通过向右旋转 我实际上回到了最初的树 这有点酷
Dialogue: 0,0:07:59.07,0:08:02.01,英文,,0,0,0,,So even if this totally doesn't make sense, it's OK.
Dialogue: 0,0:07:59.07,0:08:02.01,中文,,0,0,0,,即使这完全没道理 也没关系
Dialogue: 0,0:08:02.01,0:08:03.87,英文,,0,0,0,,You can file it away for later.
Dialogue: 0,0:08:02.01,0:08:03.87,中文,,0,0,0,,你可以把它留着以后用
Dialogue: 0,0:08:03.87,0:08:14.02,英文,,0,0,0,,The important thing is just to know that if you rotate trees around, you can take a binary search tree and change its structure without changing the semantics of a tree.
Dialogue: 0,0:08:03.87,0:08:14.02,中文,,0,0,0,,重要的是要知道 如果你围绕树旋转 你可以改变二叉搜索树的结构而不改变树的语义
Dialogue: 0,0:08:14.02,0:08:15.98,英文,,0,0,0,,These are all valid binary search trees.
Dialogue: 0,0:08:14.02,0:08:15.98,中文,,0,0,0,,这些都是有效的二叉搜索树
Dialogue: 0,0:08:15.98,0:08:18.24,英文,,0,0,0,,They all have the binary search tree property.
Dialogue: 0,0:08:15.98,0:08:18.24,中文,,0,0,0,,它们都具有二叉搜索树的属性
Dialogue: 0,0:08:18.24,0:08:19.79,英文,,0,0,0,,Things to the left are less than.
Dialogue: 0,0:08:18.24,0:08:19.79,中文,,0,0,0,,左边的东西小于
Dialogue: 0,0:08:19.79,0:08:21.71,英文,,0,0,0,,Things to the right are greater than.
Dialogue: 0,0:08:19.79,0:08:21.71,中文,,0,0,0,,右边的东西大于
Dialogue: 0,0:08:21.71,0:08:24.99,英文,,0,0,0,,This is true for all the trees after rotation.
Dialogue: 0,0:08:21.71,0:08:24.99,中文,,0,0,0,,这对旋转后的所有树都成立
Dialogue: 0,0:08:24.99,0:08:29.31,英文,,0,0,0,,And this is just allowing me to change the structure of the tree.
Dialogue: 0,0:08:24.99,0:08:29.31,中文,,0,0,0,,这只是让我能够改变树的结构
Dialogue: 0,0:08:29.31,0:08:31.17,英文,,0,0,0,,OK.
Dialogue: 0,0:08:31.17,0:08:31.63,英文,,0,0,0,,Great.
Dialogue: 0,0:08:31.17,0:08:31.63,中文,,0,0,0,,太棒了
Dialogue: 0,0:08:31.63,0:08:41.06,英文,,0,0,0,,So I guess a quick little challenge for you, then, is can you figure out a sequence of rotation operations that takes this spindly tree on the right?
Dialogue: 0,0:08:31.63,0:08:41.06,中文,,0,0,0,,我猜给你个小挑战 你能不能想出一系列的旋转操作 把右边这棵细长的树调整一下
Dialogue: 0,0:08:41.06,0:08:41.90,英文,,0,0,0,,We don't like spindly.
Dialogue: 0,0:08:41.06,0:08:41.90,中文,,0,0,0,,我们不喜欢那么细长
Dialogue: 0,0:08:41.90,0:08:43.06,英文,,0,0,0,,It's tall.
Dialogue: 0,0:08:41.90,0:08:43.06,中文,,0,0,0,,它太高了
Dialogue: 0,0:08:43.06,0:08:47.58,英文,,0,0,0,,And can we rotate this tree using a sequence of rotation operations?
Dialogue: 0,0:08:43.06,0:08:47.58,中文,,0,0,0,,我们能不能用一系列的旋转操作来旋转这棵树
Dialogue: 0,0:08:47.58,0:08:50.02,英文,,0,0,0,,So tell me rotate right or rotate left.
Dialogue: 0,0:08:47.58,0:08:50.02,中文,,0,0,0,,告诉我是向右旋转还是向左旋转
Dialogue: 0,0:08:50.02,0:08:53.48,英文,,0,0,0,,Tell me what node to rotate on.
Dialogue: 0,0:08:50.02,0:08:53.48,中文,,0,0,0,,告诉我在哪个节点旋转
Dialogue: 0,0:08:53.48,0:08:57.42,英文,,0,0,0,,And can I get this bushy tree on the right as a result?
Dialogue: 0,0:08:53.48,0:08:57.42,中文,,0,0,0,,而且我能得到右边这棵茂密的树吗
Dialogue: 0,0:08:57.42,0:09:09.46,英文,,0,0,0,,So what rotation or rotations do I have to do to take the spindly tree on the right and convert it into the bushy tree on the right, which represents the exact same sequence of items, still 1, 2, 3 in a binary search tree,
Dialogue: 0,0:08:57.42,0:09:09.46,中文,,0,0,0,,那么 为了将右边的细树转换为右边的茂密树 它仍然代表相同的项目序列 仍然是二叉搜索树中的1、2、3
Dialogue: 0,0:09:09.46,0:09:17.46,英文,,0,0,0,,still has the same binary search tree property, but the height is a little bit shorter.
Dialogue: 0,0:09:09.46,0:09:17.46,中文,,0,0,0,,仍然具有相同的二叉搜索树属性 但高度稍短 我需要进行哪些旋转或旋转呢
Dialogue: 0,0:09:17.46,0:09:19.53,英文,,0,0,0,,So I can stare at this a little bit.
Dialogue: 0,0:09:17.46,0:09:19.53,中文,,0,0,0,,我可以盯着它看一会儿
Dialogue: 0,0:09:19.53,0:09:22.17,英文,,0,0,0,,And I will admit, it's not totally obvious.
Dialogue: 0,0:09:19.53,0:09:22.17,中文,,0,0,0,,我要承认 这并不是完全明显的
Dialogue: 0,0:09:22.17,0:09:24.63,英文,,0,0,0,,You might just have to do a little bit of trial and error.
Dialogue: 0,0:09:22.17,0:09:24.63,中文,,0,0,0,,你可能只需要进行一些试验和错误
Dialogue: 0,0:09:24.63,0:09:27.21,英文,,0,0,0,,So stare at this a little bit.
Dialogue: 0,0:09:24.63,0:09:27.21,中文,,0,0,0,,仔细看一下这个
Dialogue: 0,0:09:27.21,0:09:32.37,英文,,0,0,0,,Well, maybe if I take 3 and I rotate it to the right, what's that going to do?
Dialogue: 0,0:09:27.21,0:09:32.37,中文,,0,0,0,,好吧 也许如果我把3拿过来向右旋转一下 那会怎样
Dialogue: 0,0:09:32.37,0:09:38.95,英文,,0,0,0,,It's going to take 3 and 2, temporarily merge them, because 3 is going to the right, 2 is going to come up, be the new boss.
Dialogue: 0,0:09:32.37,0:09:38.95,中文,,0,0,0,,它会把3和2暂时合并 因为3要向右 2要上来 成为新的老板
Dialogue: 0,0:09:38.95,0:09:41.17,英文,,0,0,0,,So 3 and 2 will temporarily merge.
Dialogue: 0,0:09:38.95,0:09:41.17,中文,,0,0,0,,所以3和2会暂时合并
Dialogue: 0,0:09:41.17,0:09:43.91,英文,,0,0,0,,And then 3 is going to get shot down into the right.
Dialogue: 0,0:09:41.17,0:09:43.91,中文,,0,0,0,,然后3会被打下去到右边
Dialogue: 0,0:09:43.91,0:09:45.41,英文,,0,0,0,,So now I get this.
Dialogue: 0,0:09:43.91,0:09:45.41,中文,,0,0,0,,现在我明白了
Dialogue: 0,0:09:45.41,0:09:56.13,英文,,0,0,0,,And then, if I rotate left on 1, then what's going to happen is 1 and 2 are going to temporarily merge, because I'm trying to rotate 1 to the left, and 2 is going to try and come up and be the new boss.
Dialogue: 0,0:09:45.41,0:09:56.13,中文,,0,0,0,,然后 如果我在1上向左旋转 那么会发生什么就是1和2会暂时合并 因为我试图把1向左旋转 而2会尝试上来成为新的老板
Dialogue: 0,0:09:56.13,0:10:05.24,英文,,0,0,0,,So 1 and 2 are going to temporarily merge, and then 1 is going to get shot down and to the left, and I get this beautiful bushy tree as a result.
Dialogue: 0,0:09:56.13,0:10:05.24,中文,,0,0,0,,所以1和2会暂时合并 然后1会被打下去到左边 我得到这个漂亮的树
Dialogue: 0,0:10:05.24,0:10:08.10,英文,,0,0,0,,There are other answers, too, but that's the one I came up with.
Dialogue: 0,0:10:05.24,0:10:08.10,中文,,0,0,0,,还有其他答案 但那是我想出来的一个
Dialogue: 0,0:10:08.10,0:10:11.10,英文,,0,0,0,,And again, the best you can do for now is just trial and error.
Dialogue: 0,0:10:08.10,0:10:11.10,中文,,0,0,0,,而且 目前你能做的最好的就是不断尝试
Dialogue: 0,0:10:11.10,0:10:16.01,英文,,0,0,0,,We have not talked about any algorithm for doing this yet.
Dialogue: 0,0:10:11.10,0:10:16.01,中文,,0,0,0,,我们还没有讨论过任何用于执行此操作的算法
Dialogue: 0,0:10:16.01,0:10:18.22,英文,,0,0,0,,Questions, thoughts about rotation?
Dialogue: 0,0:10:16.01,0:10:18.22,中文,,0,0,0,,关于旋转有什么问题或想法吗
Dialogue: 0,0:10:18.22,0:10:21.54,英文,,0,0,0,,Again, it's OK if you're not rotation experts yet.
Dialogue: 0,0:10:18.22,0:10:21.54,中文,,0,0,0,,再次强调 如果你还不是旋转的专家 没关系
Dialogue: 0,0:10:21.54,0:10:25.80,英文,,0,0,0,,But just know that rotations are possible, and they let us change the structure of the tree.
Dialogue: 0,0:10:21.54,0:10:25.80,中文,,0,0,0,,只需知道旋转是可能的 它可以让我们改变树的结构
Dialogue: 0,0:10:25.80,0:10:30.89,英文,,0,0,0,,Question?
Dialogue: 0,0:10:25.80,0:10:30.89,中文,,0,0,0,,有问题吗
Dialogue: 0,0:10:30.89,0:10:31.73,英文,,0,0,0,,What do you want to rotate?
Dialogue: 0,0:10:30.89,0:10:31.73,中文,,0,0,0,,你想要旋转什么
Dialogue: 0,0:10:31.73,0:10:34.29,英文,,0,0,0,,You want to rotate one to the right?
Dialogue: 0,0:10:31.73,0:10:34.29,中文,,0,0,0,,你想要向右旋转一个吗
Dialogue: 0,0:10:34.29,0:10:38.05,英文,,0,0,0,,OK, well, if you rotate on this tree on the left,
Dialogue: 0,0:10:34.29,0:10:38.05,中文,,0,0,0,,如果你在这个左边的树上旋转
Dialogue: 0,0:10:38.05,0:10:44.01,英文,,0,0,0,,Well, in this case, if you rotate one to the right, the problem is there's nobody here to come up and be the new root.
Dialogue: 0,0:10:38.05,0:10:44.01,中文,,0,0,0,,在这种情况下 如果你向右旋转一个 问题就在于这里没有人可以上来成为新的根节点
Dialogue: 0,0:10:44.01,0:10:49.59,英文,,0,0,0,,So in that case, the rotation operation will be undefined because this null item can't come up and be the new root.
Dialogue: 0,0:10:44.01,0:10:49.59,中文,,0,0,0,,在这种情况下 旋转操作将是未定义的 因为这个空项不能成为新的根节点
Dialogue: 0,0:10:49.59,0:10:50.87,英文,,0,0,0,,That's a great question.
Dialogue: 0,0:10:49.59,0:10:50.87,中文,,0,0,0,,这是一个很好的问题
Dialogue: 0,0:10:50.87,0:10:52.88,英文,,0,0,0,,So some rotation operations are undefined.
Dialogue: 0,0:10:50.87,0:10:52.88,中文,,0,0,0,,一些旋转操作是未定义的
Dialogue: 0,0:10:52.88,0:10:57.22,英文,,0,0,0,,You can't do them because the null item cannot come up and be the new root.
Dialogue: 0,0:10:52.88,0:10:57.22,中文,,0,0,0,,你不能这样做 因为空项不能出现并成为新的根
Dialogue: 0,0:10:57.22,0:10:58.94,英文,,0,0,0,,Great question.
Dialogue: 0,0:10:57.22,0:10:58.94,中文,,0,0,0,,很好的问题
Dialogue: 0,0:10:58.94,0:11:00.68,英文,,0,0,0,,OK.
Dialogue: 0,0:11:00.68,0:11:04.72,英文,,0,0,0,,So here's another cartoon picture if you're still not convinced that rotations are possible.
Dialogue: 0,0:11:00.68,0:11:04.72,中文,,0,0,0,,如果你还不相信旋转是可能的 这里有另一张卡通图片
Dialogue: 0,0:11:04.72,0:11:11.44,英文,,0,0,0,,Again, all that I'm doing is I temporarily merge B and D, and then I shoot D down and to the right.
Dialogue: 0,0:11:04.72,0:11:11.44,中文,,0,0,0,,再次强调 我所做的一切只是暂时合并 B 和 D 然后我将 D 向下和向右移动
Dialogue: 0,0:11:11.44,0:11:13.10,英文,,0,0,0,,And then there are three subtrees.
Dialogue: 0,0:11:11.44,0:11:13.10,中文,,0,0,0,,然后就有三个子树了
Dialogue: 0,0:11:13.10,0:11:15.37,英文,,0,0,0,,B had two, and then D had one.
Dialogue: 0,0:11:13.10,0:11:15.37,中文,,0,0,0,,B 有两个 然后 D 有一个
Dialogue: 0,0:11:15.37,0:11:17.11,英文,,0,0,0,,So there are these three subtrees.
Dialogue: 0,0:11:15.37,0:11:17.11,中文,,0,0,0,,有这三个子树
Dialogue: 0,0:11:17.11,0:11:30.22,英文,,0,0,0,,And this middle subtree of the items between B and D, it got transferred from being a subordinate of B to being a subordinate of D. That's what the rotation process does as a result.
Dialogue: 0,0:11:17.11,0:11:30.22,中文,,0,0,0,,然后这个位于B和D之间的中间子树 它从B的下属变成了D的下属 这就是旋转过程的结果
Dialogue: 0,0:11:30.22,0:11:31.90,英文,,0,0,0,,So B and D, they merge.
Dialogue: 0,0:11:30.22,0:11:31.90,中文,,0,0,0,,所以B和D它们合并了
Dialogue: 0,0:11:31.90,0:11:33.58,英文,,0,0,0,,D gets shot down into the right.
Dialogue: 0,0:11:31.90,0:11:33.58,中文,,0,0,0,,D被移到了右边
Dialogue: 0,0:11:33.58,0:11:45.47,英文,,0,0,0,,And then this middle subtree of things between B and D, its ownership gets transferred from being a subordinate of B to being a subordinate of D.
Dialogue: 0,0:11:33.58,0:11:45.47,中文,,0,0,0,,然后位于B和D之间的这个中间子树 它的所有权从B的下属转移到了D的下属
Dialogue: 0,0:11:45.47,0:11:46.21,英文,,0,0,0,,Great.
Dialogue: 0,0:11:46.21,0:11:49.13,英文,,0,0,0,,So again, the search tree property is still true.
Dialogue: 0,0:11:46.21,0:11:49.13,中文,,0,0,0,,搜索树属性仍然成立
Dialogue: 0,0:11:49.13,0:11:52.80,英文,,0,0,0,,You can still search through this binary search tree like you always do.
Dialogue: 0,0:11:49.13,0:11:52.80,中文,,0,0,0,,你仍然可以像以前一样搜索这个二叉搜索树
Dialogue: 0,0:11:52.80,0:11:54.24,英文,,0,0,0,,Lesser things will be on the left.
Dialogue: 0,0:11:52.80,0:11:54.24,中文,,0,0,0,,较小的东西会在左边
Dialogue: 0,0:11:54.24,0:11:55.54,英文,,0,0,0,,Greater things will be on the right.
Dialogue: 0,0:11:54.24,0:11:55.54,中文,,0,0,0,,较大的东西会在右边
Dialogue: 0,0:11:55.54,0:11:57.25,英文,,0,0,0,,Nothing changes whatsoever.
Dialogue: 0,0:11:55.54,0:11:57.25,中文,,0,0,0,,一点都不变
Dialogue: 0,0:11:57.25,0:11:59.03,英文,,0,0,0,,But I can change the structure.
Dialogue: 0,0:11:57.25,0:11:59.03,中文,,0,0,0,,但是我可以改变结构
Dialogue: 0,0:11:59.03,0:12:01.03,英文,,0,0,0,,I can change the height of the tree.
Dialogue: 0,0:11:59.03,0:12:01.03,中文,,0,0,0,,我可以改变树的高度
Dialogue: 0,0:12:01.03,0:12:12.65,英文,,0,0,0,,So it turns out, although I have not proven it, but there are some links in the slides if you're curious, it turns out it is actually possible to balance a binary search tree in O of n moves.
Dialogue: 0,0:12:01.03,0:12:12.65,中文,,0,0,0,,事实证明 尽管我还没有证明 但如果你好奇 幻灯片中有一些链接 事实证明实际上可以在 O(n) 步内平衡二叉搜索树
Dialogue: 0,0:12:12.65,0:12:20.41,英文,,0,0,0,,That is, if you do O of n rotations, where n is the number of things in your binary search tree, you can take any search tree,
Dialogue: 0,0:12:12.65,0:12:20.41,中文,,0,0,0,,也就是说 如果你进行O(n)次旋转 其中n是你的二叉搜索树中的元素数量 你可以对任何搜索树进行操作
Dialogue: 0,0:12:20.41,0:12:27.46,英文,,0,0,0,,Even a super spindly one, and you can convert it into a beautiful bushy tree in just big O of n moves.
Dialogue: 0,0:12:20.41,0:12:27.46,中文,,0,0,0,,甚至是一个非常稀疏的树 你可以在O(n)的移动中将其转变为一个美丽的繁茂树
Dialogue: 0,0:12:27.46,0:12:39.07,英文,,0,0,0,,So if I have a binary search tree of a million items, I could perform one million rotations and eventually get back to a nice bushy binary search tree.
Dialogue: 0,0:12:27.46,0:12:39.07,中文,,0,0,0,,如果我有一个包含一百万项的二叉搜索树 我可以执行一百万次旋转 最终回到一个漂亮的繁茂二叉搜索树
Dialogue: 0,0:12:39.07,0:12:46.91,英文,,0,0,0,,At this point, one possible idea, I won't walk through these slides in too much detail, but there's a video if you're not totally convinced about the rotation.
Dialogue: 0,0:12:39.07,0:12:46.91,中文,,0,0,0,,在这一点上 一个可能的想法 我不会详细介绍这些幻灯片 但如果你对旋转还不太确定 有一个视频
Dialogue: 0,0:12:46.91,0:12:54.29,英文,,0,0,0,,One possible idea is you could take this tree, which is kind of spindly and lopsided, and you could perform a bunch of rotations.
Dialogue: 0,0:12:46.91,0:12:54.29,中文,,0,0,0,,一个可能的想法是 你可以采取这个有点稀疏和倾斜的树 然后执行一系列的旋转
Dialogue: 0,0:12:54.29,0:12:56.86,英文,,0,0,0,,I haven't even talked about how to come up with these rotations.
Dialogue: 0,0:12:54.29,0:12:56.86,中文,,0,0,0,,我甚至还没讲到如何想出这些旋转的方法
Dialogue: 0,0:12:56.86,0:12:58.28,英文,,0,0,0,,We'll talk about that a little bit later.
Dialogue: 0,0:12:56.86,0:12:58.28,中文,,0,0,0,,我们稍后会谈论这个
Dialogue: 0,0:12:58.28,0:13:05.48,英文,,0,0,0,,But you could start taking nodes, and you could say, I'll rotate left on you, and I'll rotate left on you, and I'll rotate left on you.
Dialogue: 0,0:12:58.28,0:13:05.48,中文,,0,0,0,,但是你可以开始取节点 然后你可以说 我会向左旋转 我会向左旋转 我会向左旋转
Dialogue: 0,0:13:05.48,0:13:07.20,英文,,0,0,0,,Again, there's a video.
Dialogue: 0,0:13:05.48,0:13:07.20,中文,,0,0,0,,再次 有一个视频
Dialogue: 0,0:13:07.20,0:13:09.20,英文,,0,0,0,,If you want to see this in more detail.
Dialogue: 0,0:13:07.20,0:13:09.20,中文,,0,0,0,,如果你想更详细地了解这个
Dialogue: 0,0:13:09.20,0:13:19.01,英文,,0,0,0,,But you could go through and come up with some fancy wizard magic sequence of rotations that takes this smiddly tree on the right and makes it look really bushy.
Dialogue: 0,0:13:09.20,0:13:19.01,中文,,0,0,0,,但是你可以通过并想出一些花哨的向导魔术旋转序列 将这个右侧的小树变得很茂密
Dialogue: 0,0:13:19.01,0:13:20.59,英文,,0,0,0,,So we could do that.
Dialogue: 0,0:13:19.01,0:13:20.59,中文,,0,0,0,,我们可以这样做
Dialogue: 0,0:13:20.59,0:13:26.93,英文,,0,0,0,,But this feels a little bit awkward, because we're letting this tree grow really spindly and gross.
Dialogue: 0,0:13:20.59,0:13:26.93,中文,,0,0,0,,但是这感觉有点尴尬 因为我们让这棵树长得很细长而且很恶心
Dialogue: 0,0:13:26.93,0:13:31.56,英文,,0,0,0,,And then we're fixing the problem with a whole bunch of operations afterwards.
Dialogue: 0,0:13:26.93,0:13:31.56,中文,,0,0,0,,然后我们用一堆操作来解决问题
Dialogue: 0,0:13:31.56,0:13:37.88,英文,,0,0,0,,So even though this is possible, it is not the greatest idea.
Dialogue: 0,0:13:31.56,0:13:37.88,中文,,0,0,0,,虽然这是可能的 但并不是最好的主意
Dialogue: 0,0:13:37.88,0:13:40.02,英文,,0,0,0,,And we'll talk a little bit more about that later.
Dialogue: 0,0:13:37.88,0:13:40.02,中文,,0,0,0,,稍后我们会详细讨论一下这个问题
Dialogue: 0,0:13:40.02,0:13:51.09,英文,,0,0,0,,But in theory, it would be possible, if you wanted to, to build your binary search tree, let it grow unbalanced and spindly, and then use a bunch of rotations to fix it later.
Dialogue: 0,0:13:40.02,0:13:51.09,中文,,0,0,0,,但从理论上讲 如果你愿意 可以构建你的二叉搜索树 让它变得不平衡而且稀疏 然后使用一堆旋转来稍后修复它
Dialogue: 0,0:13:51.09,0:13:58.79,英文,,0,0,0,,So in theory it's possible, but I don't like it because it means your tree has to get really spindly and then you have to perform all these rotations to fix it.
Dialogue: 0,0:13:51.09,0:13:58.79,中文,,0,0,0,,从理论上讲是可能的 但我不喜欢这样做 因为这意味着你的树必须变得非常稀疏 然后你必须执行所有这些旋转来修复它
Dialogue: 0,0:13:58.79,0:14:05.66,英文,,0,0,0,,So while it technically works, I'm not a huge fan compared to what we will actually be doing soon.
Dialogue: 0,0:13:58.79,0:14:05.66,中文,,0,0,0,,虽然从技术上讲是可行的 但与我们即将实际执行的内容相比 我不是很喜欢
Dialogue: 0,0:14:05.66,0:14:11.02,英文,,0,0,0,,Okay, someone asked about rotating right, sometimes rotating left and right, sometimes it's undefined.
Dialogue: 0,0:14:05.66,0:14:11.02,中文,,0,0,0,,有人问过右旋 有时左右旋转 有时未定义
Dialogue: 0,0:14:11.02,0:14:12.88,英文,,0,0,0,,Here's a slide if you want to read more about it.
Dialogue: 0,0:14:11.02,0:14:12.88,中文,,0,0,0,,如果你想了解更多 请看下面的幻灯片
Dialogue: 0,0:14:12.88,0:14:17.20,英文,,0,0,0,,But not to worry, we won't be doing any undefined rotations today.
Dialogue: 0,0:14:12.88,0:14:17.20,中文,,0,0,0,,但别担心 今天我们不会执行任何未定义的旋转
Dialogue: 0,0:14:17.20,0:14:18.27,英文,,0,0,0,,Okay.
Dialogue: 0,0:14:18.27,0:14:24.74,英文,,0,0,0,,So again, you could pay a big O of n to balance the tree occasionally.
Dialogue: 0,0:14:18.27,0:14:24.74,中文,,0,0,0,,你可以付出一个O(n)来偶尔平衡树
Dialogue: 0,0:14:24.74,0:14:26.94,英文,,0,0,0,,But that's not the greatest approach.
Dialogue: 0,0:14:24.74,0:14:26.94,中文,,0,0,0,,但这不是最好的方法
Dialogue: 0,0:14:26.94,0:14:30.51,英文,,0,0,0,,And in fact, the approach that we will be doing, I like it better.
Dialogue: 0,0:14:26.94,0:14:30.51,中文,,0,0,0,,实际上 我们将采取的方法更好
Dialogue: 0,0:14:30.51,0:14:34.21,英文,,0,0,0,,So to tell you why I like it better, I'm going to now switch gears.
Dialogue: 0,0:14:30.51,0:14:34.21,中文,,0,0,0,,为了告诉你我为什么喜欢它更多 我现在要转变一下思路
Dialogue: 0,0:14:34.21,0:14:36.18,英文,,0,0,0,,We're done with rotation.
Dialogue: 0,0:14:34.21,0:14:36.18,中文,,0,0,0,,我们完成了旋转
Dialogue: 0,0:14:36.18,0:14:38.34,英文,,0,0,0,,If you kind of got the feel of it, that's great.
Dialogue: 0,0:14:36.18,0:14:38.34,中文,,0,0,0,,如果你有点感觉到了 那太好了
Dialogue: 0,0:14:38.34,0:14:39.44,英文,,0,0,0,,If not, it's OK.
Dialogue: 0,0:14:38.34,0:14:39.44,中文,,0,0,0,,如果没有 没关系
Dialogue: 0,0:14:39.44,0:14:41.95,英文,,0,0,0,,This is kind of our appetizer for the day.
Dialogue: 0,0:14:39.44,0:14:41.95,中文,,0,0,0,,这算是我们今天的开胃菜
Dialogue: 0,0:14:41.95,0:14:48.91,英文,,0,0,0,,Now we're going to try to use the idea of rotations to build something really cool called left-leaning red black trees.
Dialogue: 0,0:14:41.95,0:14:48.91,中文,,0,0,0,,现在我们要尝试使用旋转的概念来构建一些非常酷的东西 叫做左倾红黑树
Dialogue: 0,0:14:48.91,0:14:53.68,英文,,0,0,0,,Final thoughts or questions on rotations before I abandon them forever?
Dialogue: 0,0:14:48.91,0:14:53.68,中文,,0,0,0,,在我永远抛弃它们之前 对旋转有什么最后的想法或问题
Dialogue: 0,0:14:53.68,0:14:54.97,英文,,0,0,0,,OK.
Dialogue: 0,0:14:54.97,0:14:57.37,英文,,0,0,0,,I guess we'll call back to them in a little bit.
Dialogue: 0,0:14:54.97,0:14:57.37,中文,,0,0,0,,我想我们过一会儿会再提到它们
Dialogue: 0,0:14:57.37,0:15:03.40,英文,,0,0,0,,So, so far in our story of search trees, we have seen binary search trees.
Dialogue: 0,0:14:57.37,0:15:03.40,中文,,0,0,0,,在我们搜索树的故事中 迄今为止 我们看到了二叉搜索树
Dialogue: 0,0:15:03.40,0:15:03.84,英文,,0,0,0,,They're nice.
Dialogue: 0,0:15:03.40,0:15:03.84,中文,,0,0,0,,它们很好
Dialogue: 0,0:15:03.84,0:15:04.70,英文,,0,0,0,,They're simple.
Dialogue: 0,0:15:03.84,0:15:04.70,中文,,0,0,0,,它们很简单
Dialogue: 0,0:15:04.70,0:15:06.84,英文,,0,0,0,,But the problem is they can get spindly.
Dialogue: 0,0:15:04.70,0:15:06.84,中文,,0,0,0,,但问题是它们可能变得稀疏
Dialogue: 0,0:15:06.84,0:15:14.72,英文,,0,0,0,,And we saw that in theory, when they get spindly, you can fix them by using a bunch of rotations to balance the tree again and make it bushy.
Dialogue: 0,0:15:06.84,0:15:14.72,中文,,0,0,0,,而且我们在理论上看到 当它们变得稀疏时 你可以通过使用一堆旋转来重新平衡树 使其再次变得茂密
Dialogue: 0,0:15:14.72,0:15:19.10,英文,,0,0,0,,However, we don't have any algorithm for doing so yet.
Dialogue: 0,0:15:14.72,0:15:19.10,中文,,0,0,0,,然而 我们目前还没有任何用于执行此操作的算法
Dialogue: 0,0:15:19.10,0:15:24.48,英文,,0,0,0,,The second kind of tree we saw in our story and our exploration of trees was the 2-3 tree.
Dialogue: 0,0:15:19.10,0:15:24.48,中文,,0,0,0,,在我们的故事和对树的探索中 我们看到的第二种树是2-3树
Dialogue: 0,0:15:24.48,0:15:31.39,英文,,0,0,0,,This was the B tree from last time where the limit is two, so there are maximum two items in every single node.
Dialogue: 0,0:15:24.48,0:15:31.39,中文,,0,0,0,,这是上次的 B 树 限制是两个 所以每个节点最多有两个项
Dialogue: 0,0:15:31.39,0:15:33.89,英文,,0,0,0,,And once you get to three, you have to split the node.
Dialogue: 0,0:15:31.39,0:15:33.89,中文,,0,0,0,,一旦达到三个 你就得分裂节点
Dialogue: 0,0:15:33.89,0:15:37.03,英文,,0,0,0,,And these are really cool because they are balanced by construction.
Dialogue: 0,0:15:33.89,0:15:37.03,中文,,0,0,0,,这些真的很酷 因为它们是通过构造平衡的
Dialogue: 0,0:15:37.03,0:15:39.21,英文,,0,0,0,,In other words, you don't have to do any rotation.
Dialogue: 0,0:15:37.03,0:15:39.21,中文,,0,0,0,,换句话说 你不必做任何旋转
Dialogue: 0,0:15:39.21,0:15:41.65,英文,,0,0,0,,They are guaranteed to always be bushy.
Dialogue: 0,0:15:39.21,0:15:41.65,中文,,0,0,0,,它们保证始终是丰满的
Dialogue: 0,0:15:41.65,0:15:43.12,英文,,0,0,0,,That was the rule.
Dialogue: 0,0:15:41.65,0:15:43.12,中文,,0,0,0,,这就是规则
Dialogue: 0,0:15:43.12,0:15:50.65,英文,,0,0,0,,So let's try to do something a little bit weird, which is we know that 2-3 trees are always balanced.
Dialogue: 0,0:15:43.12,0:15:50.65,中文,,0,0,0,,让我们尝试做一些有点奇怪的事情 我们知道 2-3 树始终是平衡的
Dialogue: 0,0:15:50.65,0:15:52.15,英文,,0,0,0,,That's the definition of them.
Dialogue: 0,0:15:50.65,0:15:52.15,中文,,0,0,0,,这就是它们的定义
Dialogue: 0,0:15:52.15,0:15:56.01,英文,,0,0,0,,There's no way they can grow imbalanced because of the way that we built them.
Dialogue: 0,0:15:52.15,0:15:56.01,中文,,0,0,0,,由于我们构建它们的方式 它们不可能因此变得不平衡
Dialogue: 0,0:15:56.01,0:16:07.54,英文,,0,0,0,,So what if, instead of building 2-3 trees, which are complicated to implement and a little bit confusing, can I build a binary search tree that is structurally identical to the 2-3 tree?
Dialogue: 0,0:15:56.01,0:16:07.54,中文,,0,0,0,,那如果我不构建2-3树 这些既复杂又有点让人困惑的 我能构建一个结构上与2-3树完全相同的二叉搜索树吗
Dialogue: 0,0:16:07.54,0:16:09.02,英文,,0,0,0,,So what does that even mean?
Dialogue: 0,0:16:07.54,0:16:09.02,中文,,0,0,0,,这究竟意味着什么呢
Dialogue: 0,0:16:09.02,0:16:13.96,英文,,0,0,0,,How can I build a BST that looks the same as a 2-3 tree?
Dialogue: 0,0:16:09.02,0:16:13.96,中文,,0,0,0,,我怎样才能构建一个看起来与2-3树相同的BST呢
Dialogue: 0,0:16:13.96,0:16:18.37,英文,,0,0,0,,So let's start with the easy case, or I guess let's talk about motivation really quickly.
Dialogue: 0,0:16:13.96,0:16:18.37,中文,,0,0,0,,我们先从简单的情况开始讲 或者说 我们快点谈谈动机
Dialogue: 0,0:16:18.37,0:16:31.27,英文,,0,0,0,,The reason why this would be useful is because if we can build a bunch of binary search trees that are all identical to 2-3 trees somehow, and we haven't totally defined what it means to be identical yet,
Dialogue: 0,0:16:18.37,0:16:31.27,中文,,0,0,0,,这样做有用的原因是 如果我们能构建一系列与2-3树完全相同的二叉搜索树 虽然我们还没有完全定义什么是相同
Dialogue: 0,0:16:31.27,0:16:35.63,英文,,0,0,0,,Then we'll have a really good property, which is we know 2-3 trees are balanced.
Dialogue: 0,0:16:31.27,0:16:35.63,中文,,0,0,0,,那我们会有一个非常好的性质 就是我们知道2-3树是平衡的
Dialogue: 0,0:16:35.63,0:16:42.34,英文,,0,0,0,,So if our special binary search trees, it's not just any search tree that you could come up with, it's a special subset of trees.
Dialogue: 0,0:16:35.63,0:16:42.34,中文,,0,0,0,,如果我们的特殊二叉搜索树 不仅仅是你能想到的任何搜索树 它是树的一个特殊子集
Dialogue: 0,0:16:42.34,0:16:54.58,英文,,0,0,0,,If those trees are somehow identical to a 2-3 tree, then they must also be balanced, because 2-3 trees are balanced, and we're building trees that are identical to a 2-3 tree somehow.
Dialogue: 0,0:16:42.34,0:16:54.58,中文,,0,0,0,,如果那些树与2-3树某种方式相同 那么它们也必须是平衡的 因为2-3树是平衡的 而我们正在构建的树与某种方式相同于2-3树
Dialogue: 0,0:16:54.58,0:16:56.88,英文,,0,0,0,,Haven't talked about how, but somehow.
Dialogue: 0,0:16:54.58,0:16:56.88,中文,,0,0,0,,还没有讨论怎么样 但某种方式
Dialogue: 0,0:16:56.88,0:16:59.07,英文,,0,0,0,,OK.
Dialogue: 0,0:16:59.07,0:17:00.50,英文,,0,0,0,,Let's start with the easy case.
Dialogue: 0,0:16:59.07,0:17:00.50,中文,,0,0,0,,让我们从简单的情况开始
Dialogue: 0,0:17:00.50,0:17:04.46,英文,,0,0,0,,Let's say I have a binary or a B-tree that looks like this.
Dialogue: 0,0:17:00.50,0:17:04.46,中文,,0,0,0,,假设我有一个像这样的二叉树或B树
Dialogue: 0,0:17:04.46,0:17:05.94,英文,,0,0,0,,This is a valid B-tree.
Dialogue: 0,0:17:04.46,0:17:05.94,中文,,0,0,0,,这是一个有效的B树
Dialogue: 0,0:17:05.94,0:17:08.10,英文,,0,0,0,,Every node has at most two items.
Dialogue: 0,0:17:05.94,0:17:08.10,中文,,0,0,0,,每个节点最多有两个项
Dialogue: 0,0:17:08.10,0:17:09.66,英文,,0,0,0,,The limit is two.
Dialogue: 0,0:17:08.10,0:17:09.66,中文,,0,0,0,,限制是两个
Dialogue: 0,0:17:09.66,0:17:12.15,英文,,0,0,0,,In this case, every node has exactly one item.
Dialogue: 0,0:17:09.66,0:17:12.15,中文,,0,0,0,,在这种情况下 每个节点恰好有一个项
Dialogue: 0,0:17:12.15,0:17:13.69,英文,,0,0,0,,And it's perfectly balanced.
Dialogue: 0,0:17:12.15,0:17:13.69,中文,,0,0,0,,而且它是完全平衡的
Dialogue: 0,0:17:13.69,0:17:15.65,英文,,0,0,0,,So this is a valid B-tree.
Dialogue: 0,0:17:13.69,0:17:15.65,中文,,0,0,0,,这是一个有效的B树
Dialogue: 0,0:17:15.65,0:17:18.71,英文,,0,0,0,,What is the BST corresponding to this B-tree?
Dialogue: 0,0:17:15.65,0:17:18.71,中文,,0,0,0,,对应于这个B树的BST是什么
Dialogue: 0,0:17:18.71,0:17:21.23,英文,,0,0,0,,Well, it is just the exact same tree.
Dialogue: 0,0:17:18.71,0:17:21.23,中文,,0,0,0,,它就是完全相同的树
Dialogue: 0,0:17:21.23,0:17:23.38,英文,,0,0,0,,So this is the B-tree version.
Dialogue: 0,0:17:21.23,0:17:23.38,中文,,0,0,0,,这是 B 树版本
Dialogue: 0,0:17:23.38,0:17:25.26,英文,,0,0,0,,This is the BST version.
Dialogue: 0,0:17:23.38,0:17:25.26,中文,,0,0,0,,这是二叉搜索树版本
Dialogue: 0,0:17:25.26,0:17:27.46,英文,,0,0,0,,They look exactly the same.
Dialogue: 0,0:17:25.26,0:17:27.46,中文,,0,0,0,,它们看起来完全一样
Dialogue: 0,0:17:27.46,0:17:29.04,英文,,0,0,0,,Well, that was pretty easy.
Dialogue: 0,0:17:27.46,0:17:29.04,中文,,0,0,0,,那相当容易
Dialogue: 0,0:17:29.04,0:17:30.92,英文,,0,0,0,,But what about this one?
Dialogue: 0,0:17:29.04,0:17:30.92,中文,,0,0,0,,但这个呢
Dialogue: 0,0:17:30.92,0:17:32.18,英文,,0,0,0,,This is another B-tree.
Dialogue: 0,0:17:30.92,0:17:32.18,中文,,0,0,0,,这是另一个 B 树
Dialogue: 0,0:17:32.18,0:17:32.97,英文,,0,0,0,,It's valid.
Dialogue: 0,0:17:32.18,0:17:32.97,中文,,0,0,0,,它是有效的
Dialogue: 0,0:17:32.97,0:17:34.59,英文,,0,0,0,,It's totally balanced.
Dialogue: 0,0:17:32.97,0:17:34.59,中文,,0,0,0,,它完全平衡
Dialogue: 0,0:17:34.59,0:17:36.83,英文,,0,0,0,,Every node has at most two items.
Dialogue: 0,0:17:34.59,0:17:36.83,中文,,0,0,0,,每个节点最多有两个项目
Dialogue: 0,0:17:36.83,0:17:44.21,英文,,0,0,0,,But this is kind of tough, because how can I represent this DF node with two items in a binary search tree?
Dialogue: 0,0:17:36.83,0:17:44.21,中文,,0,0,0,,但这有点困难 因为我如何在二叉搜索树中表示具有两个项目的这个 d f 节点呢
Dialogue: 0,0:17:44.21,0:17:46.70,英文,,0,0,0,,In a binary search tree, you can't have two items in a node.
Dialogue: 0,0:17:44.21,0:17:46.70,中文,,0,0,0,,在二叉搜索树中 节点中不能有两个项目
Dialogue: 0,0:17:46.70,0:17:49.42,英文,,0,0,0,,You can't have nodes having three children.
Dialogue: 0,0:17:46.70,0:17:49.42,中文,,0,0,0,,你不能有具有三个子节点的节点
Dialogue: 0,0:17:49.42,0:17:55.08,英文,,0,0,0,,So how do I represent this thing in the world of binary search trees?
Dialogue: 0,0:17:49.42,0:17:55.08,中文,,0,0,0,,那么我在二叉搜索树的世界中如何表示这个东西呢
Dialogue: 0,0:17:55.08,0:17:56.40,英文,,0,0,0,,Well,
Dialogue: 0,0:17:55.08,0:17:56.40,中文,,0,0,0,,好吧
Dialogue: 0,0:17:56.40,0:17:59.70,英文,,0,0,0,,One idea is let's create a dummy glue node.
Dialogue: 0,0:17:56.40,0:17:59.70,中文,,0,0,0,,一个想法是我们创建一个虚拟的胶水节点
Dialogue: 0,0:17:59.70,0:18:05.44,英文,,0,0,0,,So when I want to represent this D and F, I will represent it using these three nodes.
Dialogue: 0,0:17:59.70,0:18:05.44,中文,,0,0,0,,当我想要表示这个 D 和 F 时 我会使用这三个节点来表示它
Dialogue: 0,0:18:05.44,0:18:08.50,英文,,0,0,0,,I will create one dummy node whose value doesn't really matter.
Dialogue: 0,0:18:05.44,0:18:08.50,中文,,0,0,0,,我会创建一个虚拟节点 它的值并不真的重要
Dialogue: 0,0:18:08.50,0:18:09.94,英文,,0,0,0,,It's kind of like the sentinel.
Dialogue: 0,0:18:08.50,0:18:09.94,中文,,0,0,0,,这有点像哨兵
Dialogue: 0,0:18:09.94,0:18:11.74,英文,,0,0,0,,I don't care what's inside.
Dialogue: 0,0:18:09.94,0:18:11.74,中文,,0,0,0,,我不在乎里面是什么
Dialogue: 0,0:18:11.74,0:18:18.89,英文,,0,0,0,,And then this node will have pointers to two children, D and F. Those are the two items in my node with two items.
Dialogue: 0,0:18:11.74,0:18:18.89,中文,,0,0,0,,然后这个节点将有指向两个子节点 D 和 F 的指针 这两个项目是我的节点中的两个项目
Dialogue: 0,0:18:18.89,0:18:23.83,英文,,0,0,0,,And then B, E, and G, they will be descendants of D and F.
Dialogue: 0,0:18:18.89,0:18:23.83,中文,,0,0,0,,然后 B、E 和 G 它们将是 D 和 F 的后代
Dialogue: 0,0:18:23.83,0:18:24.97,英文,,0,0,0,,So I could do that.
Dialogue: 0,0:18:23.83,0:18:24.97,中文,,0,0,0,,我可以这样做
Dialogue: 0,0:18:24.97,0:18:34.54,英文,,0,0,0,,This is now this big mega node complex is the same as the df node of two items in my B-tree.
Dialogue: 0,0:18:24.97,0:18:34.54,中文,,0,0,0,,现在这个巨大的超级节点复杂体与我的 B 树中的两个项的 d f 节点是相同的
Dialogue: 0,0:18:34.54,0:18:35.62,英文,,0,0,0,,So I could do this.
Dialogue: 0,0:18:34.54,0:18:35.62,中文,,0,0,0,,我可以这样做
Dialogue: 0,0:18:35.62,0:18:38.62,英文,,0,0,0,,And in fact, this will work perfectly fine if you want to do it.
Dialogue: 0,0:18:35.62,0:18:38.62,中文,,0,0,0,,事实上 如果你想这样做 这将完美地工作
Dialogue: 0,0:18:38.62,0:18:41.32,英文,,0,0,0,,But I don't really like it.
Dialogue: 0,0:18:38.62,0:18:41.32,中文,,0,0,0,,但我并不是特别喜欢它
Dialogue: 0,0:18:41.32,0:18:44.72,英文,,0,0,0,,And one reason I don't really like it is because it's a little bit wasteful.
Dialogue: 0,0:18:41.32,0:18:44.72,中文,,0,0,0,,我不太喜欢它的一个原因是因为它有点浪费
Dialogue: 0,0:18:44.72,0:18:49.12,英文,,0,0,0,,For starters, you have to use this extra dummy node, which is serving no purpose.
Dialogue: 0,0:18:44.72,0:18:49.12,中文,,0,0,0,,首先 你必须使用这个额外的虚拟节点 它没有任何作用
Dialogue: 0,0:18:49.12,0:18:51.14,英文,,0,0,0,,So I wasted an extra node.
Dialogue: 0,0:18:49.12,0:18:51.14,中文,,0,0,0,,我浪费了一个额外的节点
Dialogue: 0,0:18:51.14,0:18:53.82,英文,,0,0,0,,And also, if you look at dnf,
Dialogue: 0,0:18:51.14,0:18:53.82,中文,,0,0,0,,而且 如果你看一下 dnf
Dialogue: 0,0:18:53.82,0:18:59.60,英文,,0,0,0,,There are hypothetically one, two, three, four links coming out of DNF.
Dialogue: 0,0:18:53.82,0:18:59.60,中文,,0,0,0,,理论上有一个、两个、三个、四个链接从 dnf 出来
Dialogue: 0,0:18:59.60,0:19:07.70,英文,,0,0,0,,But I will only use three of them because the B-tree will only have one, two, three items coming out of the DF node.
Dialogue: 0,0:18:59.60,0:19:07.70,中文,,0,0,0,,但我只会使用其中三个 因为 B 树将只有一个、两个、三个项从 d f 节点出来
Dialogue: 0,0:19:07.70,0:19:08.70,英文,,0,0,0,,So I don't really like this.
Dialogue: 0,0:19:07.70,0:19:08.70,中文,,0,0,0,,我不太喜欢这个
Dialogue: 0,0:19:08.70,0:19:09.90,英文,,0,0,0,,I'm wasting a link.
Dialogue: 0,0:19:08.70,0:19:09.90,中文,,0,0,0,,我在浪费一个链接
Dialogue: 0,0:19:09.90,0:19:11.21,英文,,0,0,0,,I'm wasting a node.
Dialogue: 0,0:19:09.90,0:19:11.21,中文,,0,0,0,,我在浪费一个节点
Dialogue: 0,0:19:11.21,0:19:16.13,英文,,0,0,0,,So even though this is conceptually simple and it works, I don't really like it.
Dialogue: 0,0:19:11.21,0:19:16.13,中文,,0,0,0,,尽管这在概念上很简单并且有效 但我并不是很喜欢它
Dialogue: 0,0:19:16.13,0:19:17.25,英文,,0,0,0,,It wastes the node.
Dialogue: 0,0:19:16.13,0:19:17.25,中文,,0,0,0,,这浪费了这个节点
Dialogue: 0,0:19:17.25,0:19:21.79,英文,,0,0,0,,It wastes this link that will never be used because DF has three descendants.
Dialogue: 0,0:19:17.25,0:19:21.79,中文,,0,0,0,,这浪费了这个链接 因为d f有三个后代 这个链接永远不会被使用
Dialogue: 0,0:19:21.79,0:19:26.23,英文,,0,0,0,,But the D node and the F node combined could potentially have four links.
Dialogue: 0,0:19:21.79,0:19:26.23,中文,,0,0,0,,但是 d 节点和 f 节点的组合可能会有四个链接
Dialogue: 0,0:19:26.23,0:19:27.73,英文,,0,0,0,,So I'm wasting a link.
Dialogue: 0,0:19:26.23,0:19:27.73,中文,,0,0,0,,我在浪费一个链接
Dialogue: 0,0:19:27.73,0:19:29.13,英文,,0,0,0,,I don't really like this.
Dialogue: 0,0:19:27.73,0:19:29.13,中文,,0,0,0,,我并不是很喜欢这个
Dialogue: 0,0:19:29.13,0:19:43.92,英文,,0,0,0,,So I'm going to do something a little bit weirder, but a little bit more efficient, which is, instead of using this dummy node to represent the D and the F in the DST, what if I use a dummy link instead?
Dialogue: 0,0:19:29.13,0:19:43.92,中文,,0,0,0,,我要做一些有点奇怪但更有效的事情 那就是 不再使用这个虚拟节点表示 d 和 f 在DST中 而是使用一个虚拟链接
Dialogue: 0,0:19:43.92,0:19:45.52,英文,,0,0,0,,So look, this is DF.
Dialogue: 0,0:19:43.92,0:19:45.52,中文,,0,0,0,,看 这就是d f
Dialogue: 0,0:19:45.52,0:19:47.00,英文,,0,0,0,,This is also DF.
Dialogue: 0,0:19:45.52,0:19:47.00,中文,,0,0,0,,这也是d f
Dialogue: 0,0:19:47.00,0:19:53.05,英文,,0,0,0,,But all I did is I took the D and the F, and I split them into two nodes, and I hung the D below the F.
Dialogue: 0,0:19:47.00,0:19:53.05,中文,,0,0,0,,但我所做的只是把 d 和 f 分成两个节点 然后把 d 挂在 f 下面
Dialogue: 0,0:19:53.05,0:20:00.05,英文,,0,0,0,,So this DF complex of two different nodes connected by this dummy link, and I call it a dummy link
Dialogue: 0,0:19:53.05,0:20:00.05,中文,,0,0,0,,这个由这个虚拟链接连接的两个不同节点组成的d f复杂结构 我称之为虚拟链接
Dialogue: 0,0:20:00.05,0:20:08.05,英文,,0,0,0,,because it did not exist in the original tree, the original B-tree, but I've added it here just to make everything line up.
Dialogue: 0,0:20:00.05,0:20:08.05,中文,,0,0,0,,因为它在原始树中并不存在 原始的B树中不存在 但我在这里添加它只是为了让一切排列整齐
Dialogue: 0,0:20:08.05,0:20:17.84,英文,,0,0,0,,So this kind of circled region of the DNDF with their dummy link is the exact same thing as the DEF node in the B-tree.
Dialogue: 0,0:20:08.05,0:20:17.84,中文,,0,0,0,,这个带有dndf及其虚拟链接的圆圈区域与B树中的def节点完全相同
Dialogue: 0,0:20:17.84,0:20:23.99,英文,,0,0,0,,And I like this a lot better, because if you look at this complex, this dummy link complex with DNDF,
Dialogue: 0,0:20:17.84,0:20:23.99,中文,,0,0,0,,我更喜欢这个 因为如果你看这个复杂结构 这个带有dndf的虚拟链接
Dialogue: 0,0:20:23.99,0:20:29.01,英文,,0,0,0,,and the fake link that I just created for the purpose of matching the B-tree, how many descendants are there?
Dialogue: 0,0:20:23.99,0:20:29.01,中文,,0,0,0,,以及我刚刚为与B树匹配而创建的虚拟链接 有多少后代呢
Dialogue: 0,0:20:29.01,0:20:35.82,英文,,0,0,0,,Well, D's got two, and F has just one, because the other one's being used to glue D and F together.
Dialogue: 0,0:20:29.01,0:20:35.82,中文,,0,0,0,,d 有两个 而  f  只有一个 因为另一个正在用于将 d 和  f  粘在一起
Dialogue: 0,0:20:35.82,0:20:36.96,英文,,0,0,0,,So now there's no wasted link.
Dialogue: 0,0:20:35.82,0:20:36.96,中文,,0,0,0,,现在没有浪费的链接了
Dialogue: 0,0:20:36.96,0:20:42.40,英文,,0,0,0,,There's exactly three descendants, just like how there are three descendants in the B-tree.
Dialogue: 0,0:20:36.96,0:20:42.40,中文,,0,0,0,,有确切的三个后代 就像 B 树中有三个后代一样
Dialogue: 0,0:20:42.40,0:20:43.78,英文,,0,0,0,,So I like this.
Dialogue: 0,0:20:42.40,0:20:43.78,中文,,0,0,0,,我喜欢这个
Dialogue: 0,0:20:43.78,0:20:46.83,英文,,0,0,0,,I'm not wasting a link, and I'm not wasting an extra node.
Dialogue: 0,0:20:43.78,0:20:46.83,中文,,0,0,0,,我不浪费链接 也不浪费额外的节点
Dialogue: 0,0:20:46.83,0:20:51.99,英文,,0,0,0,,So this is the approach we're going to use, and this is the approach that Java actually uses as well.
Dialogue: 0,0:20:46.83,0:20:51.99,中文,,0,0,0,,这就是我们要使用的方法 Java 实际上也是使用这种方法
Dialogue: 0,0:20:51.99,0:21:00.88,英文,,0,0,0,,So we are going to take this df node with two items, and we're going to split it into two separate nodes glued together with a link.
Dialogue: 0,0:20:51.99,0:21:00.88,中文,,0,0,0,,我们要拿着这个 d f 节点 其中有两个项 然后我们将其拆分为两个单独的节点 用链接粘在一起
Dialogue: 0,0:21:00.88,0:21:05.79,英文,,0,0,0,,And just for convenience, this doesn't change the structure of the tree whatsoever.
Dialogue: 0,0:21:00.88,0:21:05.79,中文,,0,0,0,,只是为了方便起见 这并不改变树的结构
Dialogue: 0,0:21:05.79,0:21:11.00,英文,,0,0,0,,But this is just to remind ourselves, like, hey, when you see this link, it's not really a link from the B-tree.
Dialogue: 0,0:21:05.79,0:21:11.00,中文,,0,0,0,,但这只是为了提醒自己 当你看到这个链接时 它实际上不是B树中的链接
Dialogue: 0,0:21:11.00,0:21:14.29,英文,,0,0,0,,We invented it just to connect the D and the F together.
Dialogue: 0,0:21:11.00,0:21:14.29,中文,,0,0,0,,我们发明它只是为了连接 d 和 f
Dialogue: 0,0:21:14.29,0:21:16.88,英文,,0,0,0,,So to remind ourselves of that fact.
Dialogue: 0,0:21:14.29,0:21:16.88,中文,,0,0,0,,要提醒自己这个事实
Dialogue: 0,0:21:16.88,0:21:19.25,英文,,0,0,0,,that this link right here is not a real link.
Dialogue: 0,0:21:16.88,0:21:19.25,中文,,0,0,0,,这里的这个链接并不是一个真正的链接
Dialogue: 0,0:21:19.25,0:21:22.67,英文,,0,0,0,,We just invented it to glue the dndf together.
Dialogue: 0,0:21:19.25,0:21:22.67,中文,,0,0,0,,我们只是发明它来粘合 d 和 f 在一起
Dialogue: 0,0:21:22.67,0:21:24.55,英文,,0,0,0,,We're going to color it red.
Dialogue: 0,0:21:22.67,0:21:24.55,中文,,0,0,0,,我们会把它涂成红色
Dialogue: 0,0:21:24.55,0:21:26.59,英文,,0,0,0,,And again, the red doesn't do anything special.
Dialogue: 0,0:21:24.55,0:21:26.59,中文,,0,0,0,,而且 这个红色链接并没有什么特别的作用
Dialogue: 0,0:21:26.59,0:21:29.63,英文,,0,0,0,,It's not like this link is somehow magical and has special properties.
Dialogue: 0,0:21:26.59,0:21:29.63,中文,,0,0,0,,就像这个链接并没有什么特别的神奇属性一样
Dialogue: 0,0:21:29.63,0:21:40.86,英文,,0,0,0,,The only difference when we color it red is just to remind ourselves that when we built this BST from this B-tree, this df link is not really from the B-tree.
Dialogue: 0,0:21:29.63,0:21:40.86,中文,,0,0,0,,唯一的区别是 当我们把它涂成红色时 只是为了提醒自己 当我们从这个B树构建这个BST时 这个链接实际上并不是来自B树
Dialogue: 0,0:21:40.86,0:21:46.50,英文,,0,0,0,,We invented it just to connect the dndf together, because they used to be part of one node.
Dialogue: 0,0:21:40.86,0:21:46.50,中文,,0,0,0,,我们发明它只是为了把这两个节点连接起来 因为它们曾经是一个节点的一部分
Dialogue: 0,0:21:46.50,0:21:54.09,英文,,0,0,0,,But I can't have a node with two items in my BST, so I had to split it into two, invent this red link to glue them together.
Dialogue: 0,0:21:46.50,0:21:54.09,中文,,0,0,0,,但是我不能在我的BST中有一个节点有两个项目 我必须把它分成两个 发明这个红色链接把它们粘在一起
Dialogue: 0,0:21:54.09,0:21:56.41,英文,,0,0,0,,OK, questions, thoughts?
Dialogue: 0,0:21:54.09,0:21:56.41,中文,,0,0,0,,问题 想法
Dialogue: 0,0:21:56.41,0:22:04.00,英文,,0,0,0,,The whole idea so far, we're taking all the two, three trees possible, and we're converting them into equivalent binary search trees.
Dialogue: 0,0:21:56.41,0:22:04.00,中文,,0,0,0,,到目前为止的整个想法是 我们正在将所有可能的两、三树转换为等价的二叉搜索树
Dialogue: 0,0:22:04.00,0:22:05.45,英文,,0,0,0,,OK.
Dialogue: 0,0:22:05.45,0:22:06.17,英文,,0,0,0,,Great.
Dialogue: 0,0:22:05.45,0:22:06.17,中文,,0,0,0,,太好了
Dialogue: 0,0:22:06.17,0:22:10.32,英文,,0,0,0,,So this is the way we're going to do things, and we're always going to hang them off to the left.
Dialogue: 0,0:22:06.17,0:22:10.32,中文,,0,0,0,,这就是我们要做事情的方式 我们总是要把它们挂在左边
Dialogue: 0,0:22:10.32,0:22:15.44,英文,,0,0,0,,You could hang them off to the right, but we're going to choose to hang them to the left just to make everything consistent.
Dialogue: 0,0:22:10.32,0:22:15.44,中文,,0,0,0,,你可以把它们挂在右边 但我们选择把它们挂在左边 只是为了让一切都保持一致
Dialogue: 0,0:22:15.44,0:22:22.13,英文,,0,0,0,,So if you have two nodes like this, you're going to hang D to the left of F, and you're going to get this complex right here.
Dialogue: 0,0:22:15.44,0:22:22.13,中文,,0,0,0,,如果你有两个像这样的节点 你会把 d 挂在 f 的左边 然后你会得到这个复杂的右边
Dialogue: 0,0:22:22.13,0:22:23.03,英文,,0,0,0,,OK.
Dialogue: 0,0:22:23.03,0:22:31.11,英文,,0,0,0,,So. If you do this, you get a special structure called a left-leaning red-black binary search tree.
Dialogue: 0,0:22:23.03,0:22:31.11,中文,,0,0,0,,如果你这样做 你会得到一种特殊的结构 叫做左倾红黑二叉搜索树
Dialogue: 0,0:22:31.11,0:22:34.67,英文,,0,0,0,,That's a lot of words, so I will just call it LLRB.
Dialogue: 0,0:22:31.11,0:22:34.67,中文,,0,0,0,,这些话太多了 所以我就叫它LLRB吧
Dialogue: 0,0:22:34.67,0:22:38.60,英文,,0,0,0,,And so it turns out the LLRB is just a regular binary search tree.
Dialogue: 0,0:22:34.67,0:22:38.60,中文,,0,0,0,,结果LLRB就是一个普通的二叉搜索树
Dialogue: 0,0:22:38.60,0:22:40.16,英文,,0,0,0,,Look, it's a tree.
Dialogue: 0,0:22:38.60,0:22:40.16,中文,,0,0,0,,看 这是一棵树
Dialogue: 0,0:22:40.16,0:22:42.32,英文,,0,0,0,,Everyone has 0, 1, or 2 children.
Dialogue: 0,0:22:40.16,0:22:42.32,中文,,0,0,0,,每个节点有0、1或2个子节点
Dialogue: 0,0:22:42.32,0:22:48.18,英文,,0,0,0,,And if I wanted to search through this tree, it would be exactly the same as searching through a regular old binary search tree.
Dialogue: 0,0:22:42.32,0:22:48.18,中文,,0,0,0,,如果我想要在这棵树中搜索 那就和在一个普通的二叉搜索树中搜索完全一样
Dialogue: 0,0:22:48.18,0:22:49.91,英文,,0,0,0,,The red doesn't do anything special.
Dialogue: 0,0:22:48.18,0:22:49.91,中文,,0,0,0,,红色并没有什么特别的作用
Dialogue: 0,0:22:49.91,0:22:54.91,英文,,0,0,0,,It's just a reminder to ourselves of those fake glue links that I created.
Dialogue: 0,0:22:49.91,0:22:54.91,中文,,0,0,0,,这只是我们创建的那些假粘合链接的一个提醒
Dialogue: 0,0:22:54.91,0:22:58.31,英文,,0,0,0,,So an LLRB is just a normal BST.
Dialogue: 0,0:22:54.91,0:22:58.31,中文,,0,0,0,,LLRB只是一个普通的BST
Dialogue: 0,0:22:58.31,0:23:09.70,英文,,0,0,0,,However, there's this super cool property, which is that every 2-3 tree has exactly one corresponding LLRB. And every LLRB has exactly one corresponding 2-3 tree.
Dialogue: 0,0:22:58.31,0:23:09.70,中文,,0,0,0,,然而 有这样一个超级酷的属性 即每个2-3树都有一个对应的LLRB
Dialogue: 0,0:23:09.70,0:23:12.66,英文,,0,0,0,,So it's like there's two different worlds.
Dialogue: 0,0:23:09.70,0:23:12.66,中文,,0,0,0,,就像有两个不同的世界
Dialogue: 0,0:23:12.66,0:23:18.42,英文,,0,0,0,,There's a world of all the possible 2-3 trees, and there's a world of all the possible LLRBs.
Dialogue: 0,0:23:12.66,0:23:18.42,中文,,0,0,0,,有一个所有可能的2-3树的世界 还有一个所有可能的LLRB的世界
Dialogue: 0,0:23:18.42,0:23:24.36,英文,,0,0,0,,And each 2-3 tree has exactly one corresponding buddy in the LLRB world.
Dialogue: 0,0:23:18.42,0:23:24.36,中文,,0,0,0,,每个2-3树在LLRB世界中都有一个对应的伙伴
Dialogue: 0,0:23:24.36,0:23:30.72,英文,,0,0,0,,And every LLRB, the left-leaning red-black tree, has a corresponding 2-3 tree, which is kind of cool.
Dialogue: 0,0:23:24.36,0:23:30.72,中文,,0,0,0,,而且每个LLRB（左倾红黑树）都有一个对应的2-3树 这有点酷
Dialogue: 0,0:23:30.72,0:23:39.49,英文,,0,0,0,,And remember, the whole reason why we like this, the whole reason why we like the correspondence, is because we know 2-3 trees are guaranteed to be balanced.
Dialogue: 0,0:23:30.72,0:23:39.49,中文,,0,0,0,,记住 我们喜欢这个的整个原因 我们喜欢这个对应关系的整个原因是因为我们知道2-3树保证是平衡的
Dialogue: 0,0:23:39.49,0:23:47.61,英文,,0,0,0,,So if we're building LLRBs, then they're also going to be balanced, because I built them from a balanced 2-3 tree.
Dialogue: 0,0:23:39.49,0:23:47.61,中文,,0,0,0,,如果我们正在构建LLRB 它们也将是平衡的 因为我是从平衡的2-3树构建它们的
Dialogue: 0,0:23:47.61,0:23:54.89,英文,,0,0,0,,And if I maintain this correspondence, then I'm going to maintain the balance in my 2-3 tree.
Dialogue: 0,0:23:47.61,0:23:54.89,中文,,0,0,0,,而且 如果我保持这个对应关系 那么我将保持我2-3树的平衡
Dialogue: 0,0:23:54.89,0:23:55.79,英文,,0,0,0,,Which is kind of cool.
Dialogue: 0,0:23:54.89,0:23:55.79,中文,,0,0,0,,这有点酷
Dialogue: 0,0:23:55.79,0:23:57.77,英文,,0,0,0,,So that's the idea.
Dialogue: 0,0:23:55.79,0:23:57.77,中文,,0,0,0,,这就是思路
Dialogue: 0,0:23:57.77,0:24:02.39,英文,,0,0,0,,An LLRB is just a normal BST, but there's this really nice one-to-one correspondence.
Dialogue: 0,0:23:57.77,0:24:02.39,中文,,0,0,0,,LLRB其实就是一个普通的BST 但它有个很棒的一一对应关系
Dialogue: 0,0:24:02.39,0:24:09.20,英文,,0,0,0,,And if I guarantee this correspondence always holds, then my LLRB will always be balanced, which is what I want.
Dialogue: 0,0:24:02.39,0:24:09.20,中文,,0,0,0,,如果我保证这种对应关系始终存在 那么我的LLRB就会始终保持平衡 这正是我想要的
Dialogue: 0,0:24:09.20,0:24:11.60,英文,,0,0,0,,I want trees that are balanced and bushy.
Dialogue: 0,0:24:09.20,0:24:11.60,中文,,0,0,0,,我想要的是既平衡又茂密的树
Dialogue: 0,0:24:11.60,0:24:13.72,英文,,0,0,0,,And again, don't be fooled by the red.
Dialogue: 0,0:24:11.60,0:24:13.72,中文,,0,0,0,,再说一遍 别被红色迷惑了
Dialogue: 0,0:24:13.72,0:24:17.60,英文,,0,0,0,,I know it's really tempting to think the red does special things, but it does not.
Dialogue: 0,0:24:13.72,0:24:17.60,中文,,0,0,0,,我知道把红色想得很特别是很诱人的 但实际上它没有特别的功能
Dialogue: 0,0:24:17.60,0:24:29.03,英文,,0,0,0,,The red is just a reminder to you and I, as humans, that when I see this red between E and J, it just means that E and J used to belong to a single node.
Dialogue: 0,0:24:17.60,0:24:29.03,中文,,0,0,0,,红色只是提醒我们 作为人类 当我看到E和J之间的这个红色 只意味着E和J原本属于同一个节点
Dialogue: 0,0:24:29.03,0:24:38.24,英文,,0,0,0,,But in an LLRB, I cannot have two items in a node, so I had to split the E and the J into two different nodes and glue them together with a red link.
Dialogue: 0,0:24:29.03,0:24:38.24,中文,,0,0,0,,但在LLRB中 一个节点不能有两个项 所以我不得不把E和J分成两个不同的节点 并用一个红链接将它们连接起来
Dialogue: 0,0:24:38.24,0:24:41.13,英文,,0,0,0,,OK, questions, thoughts?
Dialogue: 0,0:24:38.24,0:24:41.13,中文,,0,0,0,,有问题或想法吗
Dialogue: 0,0:24:41.13,0:24:44.06,英文,,0,0,0,,Happy with LLRBs, their definition?
Dialogue: 0,0:24:41.13,0:24:44.06,中文,,0,0,0,,对 LLRB 及其定义满意吗
Dialogue: 0,0:24:44.06,0:24:45.52,英文,,0,0,0,,OK.
Dialogue: 0,0:24:45.52,0:24:50.54,英文,,0,0,0,,So. Let's talk really quickly about some properties of LLRBs.
Dialogue: 0,0:24:45.52,0:24:50.54,中文,,0,0,0,,让我们快速谈一下 LLRB 的一些属性
Dialogue: 0,0:24:50.54,0:24:53.58,英文,,0,0,0,,And in the meantime, we'll hopefully get a little bit more familiar with them.
Dialogue: 0,0:24:50.54,0:24:53.58,中文,,0,0,0,,与此同时 希望我们能对它们更加熟悉一些
Dialogue: 0,0:24:53.58,0:24:57.46,英文,,0,0,0,,And then we'll close out by talking about where these things even come from.
Dialogue: 0,0:24:53.58,0:24:57.46,中文,,0,0,0,,然后我们会谈谈这些东西究竟是从哪里来的
Dialogue: 0,0:24:57.46,0:25:05.51,英文,,0,0,0,,So I guess quick challenge for you, if you have pen and paper handy or whatever, try drawing the LLRB corresponding to this 2-3 tree.
Dialogue: 0,0:24:57.46,0:25:05.51,中文,,0,0,0,,如果你手边有笔和纸 或者其他什么东西 试着画出这个2-3树对应的LLRB
Dialogue: 0,0:25:05.51,0:25:10.33,英文,,0,0,0,,And remember, the LLRB is just going to be a regular binary search tree.
Dialogue: 0,0:25:05.51,0:25:10.33,中文,,0,0,0,,记住 LLRB只是一个普通的二叉搜索树
Dialogue: 0,0:25:10.33,0:25:12.77,英文,,0,0,0,,However, some of the links will be red.
Dialogue: 0,0:25:10.33,0:25:12.77,中文,,0,0,0,,但是 有些链接会是红色的
Dialogue: 0,0:25:12.77,0:25:21.40,英文,,0,0,0,,And any time you have to take a node with two items, like A and S, and split it into two, you should use a red link to glue them together.
Dialogue: 0,0:25:12.77,0:25:21.40,中文,,0,0,0,,每当你需要把带有两个项的节点 比如A和S 分裂成两个时 你应该使用红色链接把它们粘在一起
Dialogue: 0,0:25:21.40,0:25:25.36,英文,,0,0,0,,And the links that are red should always lean to the left.
Dialogue: 0,0:25:21.40,0:25:25.36,中文,,0,0,0,,而且 红色的链接应该总是向左倾斜
Dialogue: 0,0:25:25.36,0:25:26.72,英文,,0,0,0,,So you can try and draw it.
Dialogue: 0,0:25:25.36,0:25:26.72,中文,,0,0,0,,你可以尝试画它
Dialogue: 0,0:25:26.72,0:25:27.78,英文,,0,0,0,,Well, what would I have to do?
Dialogue: 0,0:25:26.72,0:25:27.78,中文,,0,0,0,,我需要做什么呢
Dialogue: 0,0:25:27.78,0:25:30.32,英文,,0,0,0,,The U and the W would have to be split.
Dialogue: 0,0:25:27.78,0:25:30.32,中文,,0,0,0,,u 和 w 会被分开
Dialogue: 0,0:25:30.32,0:25:33.80,英文,,0,0,0,,So I'd have U. Sorry, I guess I can't annotate right now.
Dialogue: 0,0:25:30.32,0:25:33.80,中文,,0,0,0,,我会有 u 抱歉 我现在不能添加注释
Dialogue: 0,0:25:33.80,0:25:36.74,英文,,0,0,0,,But I guess the U and the W would have to be split.
Dialogue: 0,0:25:33.80,0:25:36.74,中文,,0,0,0,,但我想 u 和 w 会被分开
Dialogue: 0,0:25:36.74,0:25:39.43,英文,,0,0,0,,The U would have to hang off to the left.
Dialogue: 0,0:25:36.74,0:25:39.43,中文,,0,0,0,,u 会悬挂在左侧
Dialogue: 0,0:25:39.43,0:25:41.51,英文,,0,0,0,,And then the a and the s would have to split.
Dialogue: 0,0:25:39.43,0:25:41.51,中文,,0,0,0,,然后 a 和 s 会被分开
Dialogue: 0,0:25:41.51,0:25:43.50,英文,,0,0,0,,The a would have to hang off to the left.
Dialogue: 0,0:25:41.51,0:25:43.50,中文,,0,0,0,,a 会悬挂在左侧
Dialogue: 0,0:25:43.50,0:25:46.54,英文,,0,0,0,,The v, just a regular old node, so it stays as this.
Dialogue: 0,0:25:43.50,0:25:46.54,中文,,0,0,0,,v 只是一个普通的节点 所以保持不变
Dialogue: 0,0:25:46.54,0:25:48.87,英文,,0,0,0,,And then the x and the y would have to be split.
Dialogue: 0,0:25:46.54,0:25:48.87,中文,,0,0,0,,然后 x 和 y 就得分开
Dialogue: 0,0:25:48.87,0:25:52.11,英文,,0,0,0,,And the x would have to hang off to the left.
Dialogue: 0,0:25:48.87,0:25:52.11,中文,,0,0,0,,而 x 就得向左边悬挂
Dialogue: 0,0:25:52.11,0:25:55.27,英文,,0,0,0,,So whatever I just said in words, that's what it looks like.
Dialogue: 0,0:25:52.11,0:25:55.27,中文,,0,0,0,,我刚才说的话 就是这个样子
Dialogue: 0,0:25:55.27,0:25:57.18,英文,,0,0,0,,So maybe you got something similar.
Dialogue: 0,0:25:55.27,0:25:57.18,中文,,0,0,0,,可能你也有类似的情况
Dialogue: 0,0:25:57.18,0:26:01.16,英文,,0,0,0,,So the u and the w, they got split and glued together by a red node.
Dialogue: 0,0:25:57.18,0:26:01.16,中文,,0,0,0,,那么 u 和 w 它们被一个红色节点分开并粘合在一起
Dialogue: 0,0:26:01.16,0:26:07.72,英文,,0,0,0,,Same with the y and the x, same with the s and the a. And overall, the structure of all the other nodes is the same.
Dialogue: 0,0:26:01.16,0:26:07.72,中文,,0,0,0,,y 和 x 也一样 s 和 a 也一样 而且 所有其他节点的结构都是相同的
Dialogue: 0,0:26:07.72,0:26:11.43,英文,,0,0,0,,So this uw complex, it has three children.
Dialogue: 0,0:26:07.72,0:26:11.43,中文,,0,0,0,,所以这个 uw 复杂结构 它有三个子节点
Dialogue: 0,0:26:11.43,0:26:16.13,英文,,0,0,0,,It has the sa child, has the v child, and it has the xy child.
Dialogue: 0,0:26:11.43,0:26:16.13,中文,,0,0,0,,它有sa子节点 有v子节点 还有xy子节点
Dialogue: 0,0:26:16.13,0:26:19.24,英文,,0,0,0,,There they are.
Dialogue: 0,0:26:16.13,0:26:19.24,中文,,0,0,0,,它们在那里
Dialogue: 0,0:26:19.24,0:26:20.54,英文,,0,0,0,,Great.
Dialogue: 0,0:26:19.24,0:26:20.54,中文,,0,0,0,,很好
Dialogue: 0,0:26:20.54,0:26:22.82,英文,,0,0,0,,So how do you use an LLRB?
Dialogue: 0,0:26:20.54,0:26:22.82,中文,,0,0,0,,那么 你如何使用LLRB
Dialogue: 0,0:26:22.82,0:26:26.70,英文,,0,0,0,,Well, for example, what if I wanted to find x in the LLRB?
Dialogue: 0,0:26:22.82,0:26:26.70,中文,,0,0,0,,例如 如果我想在LLRB中找到x 怎么办
Dialogue: 0,0:26:26.70,0:26:29.98,英文,,0,0,0,,It is literally exactly the same as any other BST.
Dialogue: 0,0:26:26.70,0:26:29.98,中文,,0,0,0,,它和任何其他BST一样 字面上完全一样
Dialogue: 0,0:26:29.98,0:26:32.38,英文,,0,0,0,,Remember, the red does nothing special.
Dialogue: 0,0:26:29.98,0:26:32.38,中文,,0,0,0,,记住 红色没有任何特殊之处
Dialogue: 0,0:26:32.38,0:26:40.65,英文,,0,0,0,,So if I want to find x, I can just search in this tree as if I was searching in any other BST, which is good, because I like things that are simple.
Dialogue: 0,0:26:32.38,0:26:40.65,中文,,0,0,0,,如果我想找x 我可以像在其他任何二叉搜索树中搜索一样搜索这棵树 这很好 因为我喜欢简单的东西
Dialogue: 0,0:26:40.65,0:26:44.99,英文,,0,0,0,,So I start with w, and I'm looking for x. Well, it's greater, so I go this way.
Dialogue: 0,0:26:40.65,0:26:44.99,中文,,0,0,0,,我从w开始 我在找x 好吧 它更大 所以我就这样走
Dialogue: 0,0:26:44.99,0:26:47.67,英文,,0,0,0,,I'm looking for x. It's less than y, so I go this way.
Dialogue: 0,0:26:44.99,0:26:47.67,中文,,0,0,0,,我在找x 它比y小 所以我就这样走
Dialogue: 0,0:26:47.67,0:26:48.21,英文,,0,0,0,,I found it.
Dialogue: 0,0:26:47.67,0:26:48.21,中文,,0,0,0,,我找到了
Dialogue: 0,0:26:48.21,0:26:49.29,英文,,0,0,0,,It's x.
Dialogue: 0,0:26:48.21,0:26:49.29,中文,,0,0,0,,就是x
Dialogue: 0,0:26:49.29,0:26:55.98,英文,,0,0,0,,So searching for x or any value in the LLRB is just the same as searching in any other BST.
Dialogue: 0,0:26:49.29,0:26:55.98,中文,,0,0,0,,在LLRB中搜索x或任何值就像在其他任何二叉搜索树中搜索一样
Dialogue: 0,0:26:55.98,0:26:58.50,英文,,0,0,0,,There's literally no difference.
Dialogue: 0,0:26:55.98,0:26:58.50,中文,,0,0,0,,实际上没有任何区别
Dialogue: 0,0:26:58.50,0:27:00.95,英文,,0,0,0,,The red does not do anything special.
Dialogue: 0,0:26:58.50,0:27:00.95,中文,,0,0,0,,红色没有特别的作用
Dialogue: 0,0:27:00.95,0:27:02.71,英文,,0,0,0,,OK.
Dialogue: 0,0:27:02.71,0:27:09.09,英文,,0,0,0,,So now a harder question for you, which is, if you look at these, which ones are valid LLRBs?
Dialogue: 0,0:27:02.71,0:27:09.09,中文,,0,0,0,,现在给你一个更难的问题 就是 如果你看这些 哪些是有效的 LLRB
Dialogue: 0,0:27:09.09,0:27:15.19,英文,,0,0,0,,So in other words, if I take this LLRB, now we're trying to do the conversion, but backwards.
Dialogue: 0,0:27:09.09,0:27:15.19,中文,,0,0,0,,换句话说 如果我拿这个 LLRB 现在我们正在尝试做转换 但是反过来
Dialogue: 0,0:27:15.19,0:27:17.49,英文,,0,0,0,,So in this case, I gave you a 2-3 tree.
Dialogue: 0,0:27:15.19,0:27:17.49,中文,,0,0,0,,在这种情况下 我给你一个 2-3 树
Dialogue: 0,0:27:17.49,0:27:20.65,英文,,0,0,0,,And I said, what's the corresponding LLRB?
Dialogue: 0,0:27:17.49,0:27:20.65,中文,,0,0,0,,我说 对应的 LLRB 是什么
Dialogue: 0,0:27:20.65,0:27:22.44,英文,,0,0,0,,And hopefully, you drew this.
Dialogue: 0,0:27:20.65,0:27:22.44,中文,,0,0,0,,希望你画出了这个
Dialogue: 0,0:27:22.44,0:27:23.52,英文,,0,0,0,,Now we're going to go backwards.
Dialogue: 0,0:27:22.44,0:27:23.52,中文,,0,0,0,,现在我们要倒回去
Dialogue: 0,0:27:23.52,0:27:26.06,英文,,0,0,0,,And we're going to say, here's an LLRB.
Dialogue: 0,0:27:23.52,0:27:26.06,中文,,0,0,0,,然后我们要说 这是一个 LLRB
Dialogue: 0,0:27:26.06,0:27:27.90,英文,,0,0,0,,Can you convert it?
Dialogue: 0,0:27:26.06,0:27:27.90,中文,,0,0,0,,你能把它转换成吗
Dialogue: 0,0:27:27.90,0:27:32.06,英文,,0,0,0,,into a 2-3 tree, and then tell me if the 2-3 tree is valid.
Dialogue: 0,0:27:27.90,0:27:32.06,中文,,0,0,0,,转换成一个 2-3 树 然后告诉我这个 2-3 树是否有效
Dialogue: 0,0:27:32.06,0:27:38.12,英文,,0,0,0,,In other words, do these have a valid one-to-one correspondence with a valid 2-3 tree?
Dialogue: 0,0:27:32.06,0:27:38.12,中文,,0,0,0,,换句话说 这些是否与有效的 2-3 树有有效的一对一对应关系
Dialogue: 0,0:27:38.12,0:27:42.53,英文,,0,0,0,,So if I think about in the 2-3 tree world, each of these should have a buddy.
Dialogue: 0,0:27:38.12,0:27:42.53,中文,,0,0,0,,如果我在 2-3 树的世界里思考 每个这些应该有一个伙伴
Dialogue: 0,0:27:42.53,0:27:46.05,英文,,0,0,0,,Is the buddy of each of these trees a valid 2-3 tree?
Dialogue: 0,0:27:42.53,0:27:46.05,中文,,0,0,0,,这些树的每一个伙伴是一个有效的 2-3 树吗
Dialogue: 0,0:27:46.05,0:27:47.53,英文,,0,0,0,,You can try and play around with it.
Dialogue: 0,0:27:46.05,0:27:47.53,中文,,0,0,0,,你可以尝试玩弄一下
Dialogue: 0,0:27:47.53,0:27:52.31,英文,,0,0,0,,I will say this is kind of tricky because I'm going to try and think about, hmm, how would I do this?
Dialogue: 0,0:27:47.53,0:27:52.31,中文,,0,0,0,,我会说这有点 tricky 因为我会试着想一想 我要怎么做呢
Dialogue: 0,0:27:52.31,0:27:54.20,英文,,0,0,0,,And remember,
Dialogue: 0,0:27:52.31,0:27:54.20,中文,,0,0,0,,而且记住
Dialogue: 0,0:27:54.20,0:27:58.10,英文,,0,0,0,,Anytime you see these glue links, they correspond to a single node.
Dialogue: 0,0:27:54.20,0:27:58.10,中文,,0,0,0,,每当你看到这些 glue links 时 它们对应一个单一的节点
Dialogue: 0,0:27:58.10,0:28:05.49,英文,,0,0,0,,So for example, the AB and the BC, this is all one big node because they're all glued together.
Dialogue: 0,0:27:58.10,0:28:05.49,中文,,0,0,0,,例如 AB 和 BC 这都是一个大节点 因为它们都粘在一起了
Dialogue: 0,0:28:05.49,0:28:08.15,英文,,0,0,0,,Same here, this B and the A will be glued together.
Dialogue: 0,0:28:05.49,0:28:08.15,中文,,0,0,0,,同样 在这里 B 和 A 会被粘在一起
Dialogue: 0,0:28:08.15,0:28:13.68,英文,,0,0,0,,And same here, the G and the B will be glued together when you create the 2-3 tree.
Dialogue: 0,0:28:08.15,0:28:13.68,中文,,0,0,0,,同样 在这里 G 和 B 在创建 2-3 树时会被粘在一起
Dialogue: 0,0:28:13.68,0:28:17.08,英文,,0,0,0,,So I'm going to re-glue these nodes together.
Dialogue: 0,0:28:13.68,0:28:17.08,中文,,0,0,0,,我要重新粘合这些节点
Dialogue: 0,0:28:17.08,0:28:20.16,英文,,0,0,0,,Here I'm using red nodes to split them in the LLRB world.
Dialogue: 0,0:28:17.08,0:28:20.16,中文,,0,0,0,,在这里 我在LLRB世界中使用红色节点将它们分开
Dialogue: 0,0:28:20.16,0:28:26.39,英文,,0,0,0,,To convert back into the 2-3-3 world, I will re-glue these links together into one big node.
Dialogue: 0,0:28:20.16,0:28:26.39,中文,,0,0,0,,要转换回2-3-3世界 我将重新粘合这些链接到一个大节点中
Dialogue: 0,0:28:26.39,0:28:31.97,英文,,0,0,0,,So this A, B, C, using these glue links, they all glue back together into one big node.
Dialogue: 0,0:28:26.39,0:28:31.97,中文,,0,0,0,,这个A、B、C 使用这些粘合链接 它们都粘合在一起成为一个大节点
Dialogue: 0,0:28:31.97,0:28:35.53,英文,,0,0,0,,Same here, this A and the B, they glue back together into one node.
Dialogue: 0,0:28:31.97,0:28:35.53,中文,,0,0,0,,同样在这里 这个A和B 它们粘合成一个节点
Dialogue: 0,0:28:35.53,0:28:39.11,英文,,0,0,0,,And the G and the B, they glue back together into one node.
Dialogue: 0,0:28:35.53,0:28:39.11,中文,,0,0,0,,还有这个G和B 它们粘合成一个节点
Dialogue: 0,0:28:39.11,0:28:46.14,英文,,0,0,0,,So now that I've converted these LLRBs into B-trees, I can now ask the question, are they valid?
Dialogue: 0,0:28:39.11,0:28:46.14,中文,,0,0,0,,现在我已经将这些LLRB转换成B树 我现在可以问的问题是 它们是否有效
Dialogue: 0,0:28:46.14,0:28:48.20,英文,,0,0,0,,So I go through one by one.
Dialogue: 0,0:28:46.14,0:28:48.20,中文,,0,0,0,,我逐个检查
Dialogue: 0,0:28:48.20,0:28:52.20,英文,,0,0,0,,Well, this LLRB, if I drew it as a B-tree, looks like this.
Dialogue: 0,0:28:48.20,0:28:52.20,中文,,0,0,0,,好吧 这个LLRB 如果我把它画成B树 看起来是这样的
Dialogue: 0,0:28:52.20,0:28:52.86,英文,,0,0,0,,It's not valid.
Dialogue: 0,0:28:52.20,0:28:52.86,中文,,0,0,0,,这是无效的
Dialogue: 0,0:28:52.86,0:28:55.20,英文,,0,0,0,,It has this node, which breaks the limit.
Dialogue: 0,0:28:52.86,0:28:55.20,中文,,0,0,0,,它有这个节点 它超出了限制
Dialogue: 0,0:28:55.20,0:29:00.07,英文,,0,0,0,,We said the limit is I want to have two items per node and no more.
Dialogue: 0,0:28:55.20,0:29:00.07,中文,,0,0,0,,我们说限制是每个节点要有两个项目 不能再多了
Dialogue: 0,0:29:00.07,0:29:01.29,英文,,0,0,0,,This one has three.
Dialogue: 0,0:29:00.07,0:29:01.29,中文,,0,0,0,,这个有三个
Dialogue: 0,0:29:01.29,0:29:02.81,英文,,0,0,0,,So this is not valid.
Dialogue: 0,0:29:01.29,0:29:02.81,中文,,0,0,0,,这是无效的
Dialogue: 0,0:29:02.81,0:29:06.01,英文,,0,0,0,,If I built this tree, this node should immediately split.
Dialogue: 0,0:29:02.81,0:29:06.01,中文,,0,0,0,,如果我构建了这棵树 这个节点应该立刻分裂
Dialogue: 0,0:29:06.01,0:29:09.33,英文,,0,0,0,,So this is not a valid B-tree.
Dialogue: 0,0:29:06.01,0:29:09.33,中文,,0,0,0,,这不是一个有效的B树
Dialogue: 0,0:29:09.33,0:29:11.59,英文,,0,0,0,,OK, what about this next one?
Dialogue: 0,0:29:09.33,0:29:11.59,中文,,0,0,0,,好的 接下来呢
Dialogue: 0,0:29:11.59,0:29:14.31,英文,,0,0,0,,Well, at first, you might be tempted to say, well, this seems fine.
Dialogue: 0,0:29:11.59,0:29:14.31,中文,,0,0,0,,起初 你可能会觉得 这看起来挺好的
Dialogue: 0,0:29:14.31,0:29:15.40,英文,,0,0,0,,It's a tree.
Dialogue: 0,0:29:14.31,0:29:15.40,中文,,0,0,0,,这是一棵树
Dialogue: 0,0:29:15.40,0:29:16.66,英文,,0,0,0,,Everyone follows the limit.
Dialogue: 0,0:29:15.40,0:29:16.66,中文,,0,0,0,,每个人都遵守限制
Dialogue: 0,0:29:16.66,0:29:18.42,英文,,0,0,0,,There's only two items per node.
Dialogue: 0,0:29:16.66,0:29:18.42,中文,,0,0,0,,每个节点只有两个项目
Dialogue: 0,0:29:18.42,0:29:22.24,英文,,0,0,0,,But remember, the property of B-trees is that they have perfect balance.
Dialogue: 0,0:29:18.42,0:29:22.24,中文,,0,0,0,,但记住 B树的特性是它们具有完美的平衡
Dialogue: 0,0:29:22.24,0:29:26.24,英文,,0,0,0,,And if I look at this tree, this tree does not have perfect balance.
Dialogue: 0,0:29:22.24,0:29:26.24,中文,,0,0,0,,而且 如果我看这棵树 这棵树并没有完美的平衡
Dialogue: 0,0:29:26.24,0:29:31.14,英文,,0,0,0,,The C-leaf is at depth 2, and this X-leaf is at depth 1.
Dialogue: 0,0:29:26.24,0:29:31.14,中文,,0,0,0,,C-叶子在第2层 而这个X-叶子在第1层
Dialogue: 0,0:29:31.14,0:29:34.82,英文,,0,0,0,,So this is not a balanced B-tree, therefore it's not valid.
Dialogue: 0,0:29:31.14,0:29:34.82,中文,,0,0,0,,这不是一棵平衡的B树 因此它是无效的
Dialogue: 0,0:29:34.82,0:29:36.18,英文,,0,0,0,,And same thing with this one.
Dialogue: 0,0:29:34.82,0:29:36.18,中文,,0,0,0,,而且这个也一样
Dialogue: 0,0:29:36.18,0:29:44.68,英文,,0,0,0,,This one you might be really tempted to say, well, if I convert this B-tree into, or this LLRB into a B-tree, look, it's exactly the same.
Dialogue: 0,0:29:36.18,0:29:44.68,中文,,0,0,0,,这个你可能会很想说 如果我把这个LLRB转换成B树 看 它完全一样
Dialogue: 0,0:29:44.68,0:29:45.58,英文,,0,0,0,,What's wrong with this?
Dialogue: 0,0:29:44.68,0:29:45.58,中文,,0,0,0,,这有什么问题吗
Dialogue: 0,0:29:45.58,0:29:47.34,英文,,0,0,0,,Well, again, it's not balanced.
Dialogue: 0,0:29:45.58,0:29:47.34,中文,,0,0,0,,好吧 再说一遍 它不平衡
Dialogue: 0,0:29:47.34,0:29:50.16,英文,,0,0,0,,Some leaves are at depth 2, some leaves are at depth 1.
Dialogue: 0,0:29:47.34,0:29:50.16,中文,,0,0,0,,一些叶子在深度2 一些叶子在深度1
Dialogue: 0,0:29:50.16,0:29:51.74,英文,,0,0,0,,So this is not valid.
Dialogue: 0,0:29:50.16,0:29:51.74,中文,,0,0,0,,这是无效的
Dialogue: 0,0:29:51.74,0:29:56.74,英文,,0,0,0,,And it turns out the only valid one all along was the one on the far right.
Dialogue: 0,0:29:51.74,0:29:56.74,中文,,0,0,0,,结果发现一直有效的是最右边的那一个
Dialogue: 0,0:29:56.74,0:30:00.24,英文,,0,0,0,,This one was valid because if I merged B and G,
Dialogue: 0,0:29:56.74,0:30:00.24,中文,,0,0,0,,这个是有效的 因为如果我合并B和G
Dialogue: 0,0:30:00.24,0:30:01.65,英文,,0,0,0,,Then I get a tree like this.
Dialogue: 0,0:30:00.24,0:30:01.65,中文,,0,0,0,,那么我得到的树就像这样
Dialogue: 0,0:30:01.65,0:30:04.11,英文,,0,0,0,,And here, all the leaves are at the same depth.
Dialogue: 0,0:30:01.65,0:30:04.11,中文,,0,0,0,,而且这里 所有的叶子都在同一深度
Dialogue: 0,0:30:04.11,0:30:06.29,英文,,0,0,0,,So we have a balanced B-tree.
Dialogue: 0,0:30:04.11,0:30:06.29,中文,,0,0,0,,我们有一个平衡的B树
Dialogue: 0,0:30:06.29,0:30:09.79,英文,,0,0,0,,So this is the only one that was OK all along.
Dialogue: 0,0:30:06.29,0:30:09.79,中文,,0,0,0,,这是唯一一个一直没问题的
Dialogue: 0,0:30:09.79,0:30:12.04,英文,,0,0,0,,So again, this is kind of a tricky question.
Dialogue: 0,0:30:09.79,0:30:12.04,中文,,0,0,0,,这又是一个有点棘手的问题
Dialogue: 0,0:30:12.04,0:30:19.34,英文,,0,0,0,,But the thing that would really help, I think, is to start playing around with converting B-trees to 2-3 trees and vice versa.
Dialogue: 0,0:30:12.04,0:30:19.34,中文,,0,0,0,,但我认为真正有帮助的是开始尝试将B树转换为2-3树 反之亦然
Dialogue: 0,0:30:19.34,0:30:23.43,英文,,0,0,0,,The more you get comfortable with that, the more hopefully this makes sense.
Dialogue: 0,0:30:19.34,0:30:23.43,中文,,0,0,0,,你越熟悉这个过程 这个就会变得越容易理解
Dialogue: 0,0:30:23.43,0:30:25.18,英文,,0,0,0,,OK.
Dialogue: 0,0:30:25.18,0:30:27.30,英文,,0,0,0,,Great, so now another question for you.
Dialogue: 0,0:30:25.18,0:30:27.30,中文,,0,0,0,,太好了 那么现在另一个问题是什么
Dialogue: 0,0:30:27.30,0:30:30.32,英文,,0,0,0,,Sorry for so many questions and not a lot of time to answer them.
Dialogue: 0,0:30:27.30,0:30:30.32,中文,,0,0,0,,抱歉问题这么多 回答的时间不多
Dialogue: 0,0:30:30.32,0:30:34.15,英文,,0,0,0,,But this question has to do with how tall.
Dialogue: 0,0:30:30.32,0:30:34.15,中文,,0,0,0,,但这个问题与身高有关
Dialogue: 0,0:30:34.15,0:30:36.33,英文,,0,0,0,,So again, I want you to do another conversion.
Dialogue: 0,0:30:34.15,0:30:36.33,中文,,0,0,0,,我想让你再做一次转换
Dialogue: 0,0:30:36.33,0:30:42.22,英文,,0,0,0,,This time I'm showing you a B-tree, and I want you to convert it into an LLRB.
Dialogue: 0,0:30:36.33,0:30:42.22,中文,,0,0,0,,这次我给你看的是一棵B树 我想让你把它转换成LLRB
Dialogue: 0,0:30:42.22,0:30:43.40,英文,,0,0,0,,So this is a B tree.
Dialogue: 0,0:30:42.22,0:30:43.40,中文,,0,0,0,,这是一棵B树
Dialogue: 0,0:30:43.40,0:30:44.18,英文,,0,0,0,,It's a 2-3 tree.
Dialogue: 0,0:30:43.40,0:30:44.18,中文,,0,0,0,,它是一棵2-3树
Dialogue: 0,0:30:44.18,0:30:46.82,英文,,0,0,0,,You can tell because nodes have multiple items.
Dialogue: 0,0:30:44.18,0:30:46.82,中文,,0,0,0,,你可以看出来 因为节点有多个项
Dialogue: 0,0:30:46.82,0:30:55.11,英文,,0,0,0,,I want you to convert this into an LLRB in your head or on paper and tell me how tall is the corresponding LLRB.
Dialogue: 0,0:30:46.82,0:30:55.11,中文,,0,0,0,,在你的脑海中或纸上 我希望你将这个转换成LLRB并告诉我相应的LLRB有多高
Dialogue: 0,0:30:55.11,0:31:04.38,英文,,0,0,0,,And remember, the way you convert it is you take these nodes with two items, and you split them into a D node and an E node connected by a dummy red link.
Dialogue: 0,0:30:55.11,0:31:04.38,中文,,0,0,0,,记住 转换的方法是将这些具有两个项目的节点分割成由虚拟红链接连接的 d 节点和E节点
Dialogue: 0,0:31:04.38,0:31:09.84,英文,,0,0,0,,And same with the S and the U. They split, and then the S and the U are connected by a dummy red link.
Dialogue: 0,0:31:04.38,0:31:09.84,中文,,0,0,0,,同样适用于S和u 它们分开 然后S和u由虚拟红链接连接
Dialogue: 0,0:31:09.84,0:31:13.34,英文,,0,0,0,,Same thing here and same thing here.
Dialogue: 0,0:31:09.84,0:31:13.34,中文,,0,0,0,,这里也是同样的情况 还有这里
Dialogue: 0,0:31:13.34,0:31:23.14,英文,,0,0,0,,So it turns out, if you convert this into an LLRB, well, the tallest part of the tree, I could draw the whole tree, but unfortunately it would not fit.
Dialogue: 0,0:31:13.34,0:31:23.14,中文,,0,0,0,,结果是 如果你将这个转换成LLRB 树的最高部分 我可以画整棵树 但不幸的是它放不下
Dialogue: 0,0:31:23.14,0:31:25.53,英文,,0,0,0,,The tallest part of the tree is going to be here.
Dialogue: 0,0:31:23.14,0:31:25.53,中文,,0,0,0,,树的最高部分将在这里
Dialogue: 0,0:31:25.53,0:31:28.63,英文,,0,0,0,,The L to the P, that's one link, and it doesn't change.
Dialogue: 0,0:31:25.53,0:31:28.63,中文,,0,0,0,,从L到P 那是一个链接 它不会改变
Dialogue: 0,0:31:28.63,0:31:36.41,英文,,0,0,0,,It's just a regular old link between L and P that stays the same between the 2-3 tree and the LLRB.
Dialogue: 0,0:31:28.63,0:31:36.41,中文,,0,0,0,,这只是一个在2-3树和LLRB之间保持不变的普通旧链接
Dialogue: 0,0:31:36.41,0:31:40.21,英文,,0,0,0,,to the su node complex.
Dialogue: 0,0:31:36.41,0:31:40.21,中文,,0,0,0,,连接到su节点复杂
Dialogue: 0,0:31:40.21,0:31:41.07,英文,,0,0,0,,That's another link.
Dialogue: 0,0:31:40.21,0:31:41.07,中文,,0,0,0,,这是另一个链接
Dialogue: 0,0:31:41.07,0:31:42.95,英文,,0,0,0,,It stays the same, no change.
Dialogue: 0,0:31:41.07,0:31:42.95,中文,,0,0,0,,它保持不变 没有改变
Dialogue: 0,0:31:42.95,0:31:45.72,英文,,0,0,0,,And then this su, it needs to split into two.
Dialogue: 0,0:31:42.95,0:31:45.72,中文,,0,0,0,,然后这个su需要分成两部分
Dialogue: 0,0:31:45.72,0:31:51.50,英文,,0,0,0,,So I introduce an extra red link to connect the s and the u. And then this su connects to the qr.
Dialogue: 0,0:31:45.72,0:31:51.50,中文,,0,0,0,,我引入了一个额外的红色链接来连接s和u 然后这个su连接到qr
Dialogue: 0,0:31:51.50,0:31:54.96,英文,,0,0,0,,That's a black link, just normal old link from the 2-3 tree.
Dialogue: 0,0:31:51.50,0:31:54.96,中文,,0,0,0,,这是一个黑色链接 只是从2-3树中的普通旧链接
Dialogue: 0,0:31:54.96,0:31:57.44,英文,,0,0,0,,And then the qr has to split.
Dialogue: 0,0:31:54.96,0:31:57.44,中文,,0,0,0,,然后qr码要拆分
Dialogue: 0,0:31:57.44,0:32:00.24,英文,,0,0,0,,And then the r and the q get connected with a red link.
Dialogue: 0,0:31:57.44,0:32:00.24,中文,,0,0,0,,然后r和q用一根红线连接在一起
Dialogue: 0,0:32:00.24,0:32:05.43,英文,,0,0,0,,So in total, I have this resulting tree.
Dialogue: 0,0:32:00.24,0:32:05.43,中文,,0,0,0,,总的来说 我有了这个结果树
Dialogue: 0,0:32:05.43,0:32:14.36,英文,,0,0,0,,And again, the LLRB is larger, I just didn't have space to draw at all, so this is the tallest part of the tree, and it has height 1, 2, 3, 4, 5.
Dialogue: 0,0:32:05.43,0:32:14.36,中文,,0,0,0,,而且 LLRB更大 我根本没有空间画出来 所以这是树的最高部分 高度是1、2、3、4、5
Dialogue: 0,0:32:14.36,0:32:17.14,英文,,0,0,0,,Three of the links are black, two of them are red.
Dialogue: 0,0:32:14.36,0:32:17.14,中文,,0,0,0,,其中三条连接是黑色的 两条是红色的
Dialogue: 0,0:32:17.14,0:32:27.85,英文,,0,0,0,,And more generally, it might not seem totally obvious at first, but it turns out the LLRB will have no more than double the height of the corresponding B-tree.
Dialogue: 0,0:32:17.14,0:32:27.85,中文,,0,0,0,,而且更一般地说 起初可能不是很明显 但事实证明LLRB的高度最多是相应B树的两倍
Dialogue: 0,0:32:27.85,0:32:33.63,英文,,0,0,0,,So in this case, this B-tree, which is perfectly balanced, has height 1, 2, 3.
Dialogue: 0,0:32:27.85,0:32:33.63,中文,,0,0,0,,在这种情况下 这个B树是完全平衡的 高度是1、2、3
Dialogue: 0,0:32:33.63,0:32:38.19,英文,,0,0,0,,And in this case, the LLRB has height around 5, which is around double.
Dialogue: 0,0:32:33.63,0:32:38.19,中文,,0,0,0,,在这种情况下 LLRB的高度大约为5 大约是两倍左右
Dialogue: 0,0:32:38.19,0:32:40.64,英文,,0,0,0,,And the worst case would actually be 6.
Dialogue: 0,0:32:38.19,0:32:40.64,中文,,0,0,0,,而最坏的情况实际上是6
Dialogue: 0,0:32:40.64,0:32:44.88,英文,,0,0,0,,And it actually cannot get any worse than 6-ish.
Dialogue: 0,0:32:40.64,0:32:44.88,中文,,0,0,0,,实际上 它不能比6左右更糟
Dialogue: 0,0:32:44.88,0:32:50.98,英文,,0,0,0,,So the LLRB will be no worse than around two times the height of the 2-3 tree.
Dialogue: 0,0:32:44.88,0:32:50.98,中文,,0,0,0,,所以LLRB的高度将不会比2-3树的高度大约两倍左右
Dialogue: 0,0:32:50.98,0:32:52.66,英文,,0,0,0,,I guess plus or minus a couple.
Dialogue: 0,0:32:50.98,0:32:52.66,中文,,0,0,0,,我猜加减几个
Dialogue: 0,0:32:52.66,0:32:56.05,英文,,0,0,0,,But the idea is that it's not going to be enormously bigger.
Dialogue: 0,0:32:52.66,0:32:56.05,中文,,0,0,0,,但重点是它不会变得非常大
Dialogue: 0,0:32:56.05,0:33:00.55,英文,,0,0,0,,It's not going to be an exponential factor bigger or something ridiculous.
Dialogue: 0,0:32:56.05,0:33:00.55,中文,,0,0,0,,它不会成为指数因子更大或什么荒谬的东西
Dialogue: 0,0:33:00.55,0:33:05.28,英文,,0,0,0,,The LLRB will always be around twice the height of the 2-3 tree.
Dialogue: 0,0:33:00.55,0:33:05.28,中文,,0,0,0,,LLRB 的高度始终约为 2-3 树的两倍
Dialogue: 0,0:33:05.28,0:33:18.85,英文,,0,0,0,,And the reason for that is because if all of these nodes had two items, then it would introduce a red link, which is extra, plus the black link that was already there, for a total of approximately twice as many links.
Dialogue: 0,0:33:05.28,0:33:18.85,中文,,0,0,0,,原因是 如果所有这些节点都有两个项目 那么将引入一个红链接 这是额外的 再加上已经存在的黑链接 总共大约是两倍多的链接
Dialogue: 0,0:33:18.85,0:33:21.50,英文,,0,0,0,,And so that's kind of where the two times comes from.
Dialogue: 0,0:33:18.85,0:33:21.50,中文,,0,0,0,,这就是为什么两倍的原因
Dialogue: 0,0:33:21.50,0:33:26.02,英文,,0,0,0,,So again, not super obvious.
Dialogue: 0,0:33:21.50,0:33:26.02,中文,,0,0,0,,这有点不那么明显
Dialogue: 0,0:33:26.02,0:33:29.86,英文,,0,0,0,,If you want some practice, you can try drawing some more trees and converting between them.
Dialogue: 0,0:33:26.02,0:33:29.86,中文,,0,0,0,,如果你想练习 可以尝试画一些更多的树并在它们之间进行转换
Dialogue: 0,0:33:29.86,0:33:39.76,英文,,0,0,0,,But the rough intuition is that if all of these nodes along this path all had two items, then you'd have to add a red link to split that node with two items.
Dialogue: 0,0:33:29.86,0:33:39.76,中文,,0,0,0,,但大致的直觉是 如果沿着这条路径的所有这些节点都有两个项目 那么你必须添加一个红链接来分割具有两个项目的节点
Dialogue: 0,0:33:39.76,0:33:42.68,英文,,0,0,0,,Then you'd have to keep all the black links, because those need to stay.
Dialogue: 0,0:33:39.76,0:33:42.68,中文,,0,0,0,,然后你必须保留所有的黑链接 因为它们必须保留
Dialogue: 0,0:33:42.68,0:33:46.96,英文,,0,0,0,,So you'll have roughly twice as many
Dialogue: 0,0:33:42.68,0:33:46.96,中文,,0,0,0,,你大概会有大约两倍多
Dialogue: 0,0:33:46.96,0:33:53.72,英文,,0,0,0,,or you'll have roughly twice as many links in the LLRB, because you have to add all the red ones and keep all the black ones.
Dialogue: 0,0:33:46.96,0:33:53.72,中文,,0,0,0,,或者你会有大约两倍多的LLRB链接 因为你需要添加所有的红色链接并保留所有的黑色链接
Dialogue: 0,0:33:53.72,0:33:59.62,英文,,0,0,0,,So the LLRB height will be approximately twice as much as the height of the B-tree.
Dialogue: 0,0:33:53.72,0:33:59.62,中文,,0,0,0,,所以LLRB的高度将大约是B树高度的两倍
Dialogue: 0,0:33:59.62,0:34:01.48,英文,,0,0,0,,So why is that useful?
Dialogue: 0,0:33:59.62,0:34:01.48,中文,,0,0,0,,那么这有什么用呢
Dialogue: 0,0:34:01.48,0:34:05.74,英文,,0,0,0,,Well, because if something is twice as tall, that's a constant.
Dialogue: 0,0:34:01.48,0:34:05.74,中文,,0,0,0,,因为如果某物高度加倍 那就是一个常数
Dialogue: 0,0:34:05.74,0:34:12.86,英文,,0,0,0,,So if two 3-trees have a logarithmic height, the height of the B-tree is logarithmic in the number of items.
Dialogue: 0,0:34:05.74,0:34:12.86,中文,,0,0,0,,如果两个3树具有对数高度 则B树的高度对数与项目数成正比
Dialogue: 0,0:34:12.86,0:34:17.83,英文,,0,0,0,,And the LLRB is 2 times the log of the number of items.
Dialogue: 0,0:34:12.86,0:34:17.83,中文,,0,0,0,,而LLRB是项目数量的对数的两倍
Dialogue: 0,0:34:17.83,0:34:20.69,英文,,0,0,0,,So the B-tree, the height is log n.
Dialogue: 0,0:34:17.83,0:34:20.69,中文,,0,0,0,,所以B树 高度是log n
Dialogue: 0,0:34:20.69,0:34:23.99,英文,,0,0,0,,If the LLRB has height 2 times log n, well, that's great.
Dialogue: 0,0:34:20.69,0:34:23.99,中文,,0,0,0,,如果LLRB的高度是log n的两倍 那太好了
Dialogue: 0,0:34:23.99,0:34:24.87,英文,,0,0,0,,The 2 is a constant.
Dialogue: 0,0:34:23.99,0:34:24.87,中文,,0,0,0,,这个2是一个常数
Dialogue: 0,0:34:24.87,0:34:26.19,英文,,0,0,0,,I can forget about it.
Dialogue: 0,0:34:24.87,0:34:26.19,中文,,0,0,0,,我可以忽略它
Dialogue: 0,0:34:26.19,0:34:31.41,英文,,0,0,0,,So asymptotically, the LLRB will also have logarithmic height.
Dialogue: 0,0:34:26.19,0:34:31.41,中文,,0,0,0,,渐近地 LLRB也会有对数高度
Dialogue: 0,0:34:31.41,0:34:32.33,英文,,0,0,0,,That's great.
Dialogue: 0,0:34:31.41,0:34:32.33,中文,,0,0,0,,太好了
Dialogue: 0,0:34:32.33,0:34:40.65,英文,,0,0,0,,It means that if I build a B-tree and I convert it into an LLRB, the LLRB will also have logarithmic height.
Dialogue: 0,0:34:32.33,0:34:40.65,中文,,0,0,0,,这意味着如果我构建一个B树并将其转换为LLRB LLRB也将具有对数高度
Dialogue: 0,0:34:40.65,0:34:41.55,英文,,0,0,0,,And that's good.
Dialogue: 0,0:34:40.65,0:34:41.55,中文,,0,0,0,,这很好
Dialogue: 0,0:34:41.55,0:34:45.94,英文,,0,0,0,,We like logarithmic height because it means my tree is bushy and balanced.
Dialogue: 0,0:34:41.55,0:34:45.94,中文,,0,0,0,,我们喜欢对数高度 因为这意味着我的树又丰满又平衡
Dialogue: 0,0:34:45.94,0:34:47.72,英文,,0,0,0,,So that's the rough proof sketch.
Dialogue: 0,0:34:45.94,0:34:47.72,中文,,0,0,0,,这就是粗略的证明梗概
Dialogue: 0,0:34:47.72,0:34:54.65,英文,,0,0,0,,It basically says LLRBs have twice the height as their B-tree, the corresponding B-tree in the worst case.
Dialogue: 0,0:34:47.72,0:34:54.65,中文,,0,0,0,,基本上说 LLRB的高度是其对应B树在最坏情况下的两倍
Dialogue: 0,0:34:54.65,0:35:03.35,英文,,0,0,0,,So the LLRB should also be logarithmic height in the number of items in the tree.
Dialogue: 0,0:34:54.65,0:35:03.35,中文,,0,0,0,,LLRB在树中的项目数量上也应该是对数高度
Dialogue: 0,0:35:03.35,0:35:04.98,英文,,0,0,0,,So we're almost there.
Dialogue: 0,0:35:03.35,0:35:04.98,中文,,0,0,0,,我们差不多到达了目标
Dialogue: 0,0:35:04.98,0:35:06.72,英文,,0,0,0,,We know what an LLRB is.
Dialogue: 0,0:35:04.98,0:35:06.72,中文,,0,0,0,,我们知道LLRB是什么
Dialogue: 0,0:35:06.72,0:35:14.90,英文,,0,0,0,,We also know that because LLRBs always have a matching 2-3 tree, then LLRBs will also be balanced.
Dialogue: 0,0:35:06.72,0:35:14.90,中文,,0,0,0,,我们也知道 因为LLRB总是有一个匹配的2-3树 所以LLRB也会是平衡的
Dialogue: 0,0:35:14.90,0:35:17.52,英文,,0,0,0,,That is, they will have logarithmic height.
Dialogue: 0,0:35:14.90,0:35:17.52,中文,,0,0,0,,也就是说 它们会有对数高度
Dialogue: 0,0:35:17.52,0:35:23.08,英文,,0,0,0,,So the final question we have to solve is, where do LLRBs come from?
Dialogue: 0,0:35:17.52,0:35:23.08,中文,,0,0,0,,那么 我们现在要解决的最后一个问题是 LLRB是从哪里来的呢
Dialogue: 0,0:35:23.08,0:35:31.71,英文,,0,0,0,,Well, one thing we could do, which is kind of silly, is we could build a 2-3 tree, and then we kind of know how to convert a 2-3 tree into an LLRB.
Dialogue: 0,0:35:23.08,0:35:31.71,中文,,0,0,0,,我们可以做的一件事情 有点傻 就是我们可以构建一个2-3树 然后我们有点知道如何将2-3树转换成LLRB
Dialogue: 0,0:35:31.71,0:35:39.33,英文,,0,0,0,,But that would be kind of silly, because remember, the whole problem with 2-3 trees is that they are complicated to implement, and they're kind of slow.
Dialogue: 0,0:35:31.71,0:35:39.33,中文,,0,0,0,,但那有点傻 因为记住 2-3树的整个问题是它们难以实现 而且它们有点慢
Dialogue: 0,0:35:39.33,0:35:45.94,英文,,0,0,0,,So I don't want to have to deal with building a 2-3 tree and then converting it into an LLRB.
Dialogue: 0,0:35:39.33,0:35:45.94,中文,,0,0,0,,我不想要处理构建一个2-3树 然后将其转换成LLRB的麻烦事
Dialogue: 0,0:35:45.94,0:35:47.20,英文,,0,0,0,,That's kind of annoying.
Dialogue: 0,0:35:45.94,0:35:47.20,中文,,0,0,0,,那有点烦人
Dialogue: 0,0:35:47.20,0:35:58.10,英文,,0,0,0,,So instead, I'm going to do something a little bit clever, which is when I have an LLRB, if I want to add items, I will insert it as normal into a binary search tree.
Dialogue: 0,0:35:47.20,0:35:58.10,中文,,0,0,0,,我会做一些聪明的事情 就是当我有一个LLRB时 如果我想添加项目 我会像在普通的二叉搜索树中一样插入它
Dialogue: 0,0:35:58.10,0:36:02.37,英文,,0,0,0,,So the LLRB is just a regular old BST where some links are colored red.
Dialogue: 0,0:35:58.10,0:36:02.37,中文,,0,0,0,,LLRB只是一个普通的二叉搜索树 其中一些链接被标记为红色
Dialogue: 0,0:36:02.37,0:36:04.39,英文,,0,0,0,,I will insert as normal.
Dialogue: 0,0:36:02.37,0:36:04.39,中文,,0,0,0,,我会像平常一样插入
Dialogue: 0,0:36:04.39,0:36:09.51,英文,,0,0,0,,But if I insert a new item, I could potentially break
Dialogue: 0,0:36:04.39,0:36:09.51,中文,,0,0,0,,但是如果我插入一个新项目 我有可能破坏
Dialogue: 0,0:36:09.51,0:36:23.46,英文,,0,0,0,,I will fix the error that I created right away by using some tree rotations so that my LLRB matches the corresponding 2-3 tree had I added the item into the 2-3 tree.
Dialogue: 0,0:36:09.51,0:36:23.46,中文,,0,0,0,,我会立即通过一些树旋转来修复我创建的错误 以便我的LLRB与相应的2-3树匹配 就好像我将该项目添加到2-3树中一样
Dialogue: 0,0:36:23.46,0:36:36.21,英文,,0,0,0,,So if you go all the way back to the tree rotation we were doing from earlier, remember, the problem with the tree rotation idea was that we were letting our trees get super out of hand and spindly, and then we fixed them later with a ton of rotations.
Dialogue: 0,0:36:23.46,0:36:36.21,中文,,0,0,0,,如果你回到我们之前做的树旋转 记住 树旋转的问题在于我们让我们的树变得非常不受控制和纤细 然后我们通过大量的旋转来修复它们
Dialogue: 0,0:36:36.21,0:36:39.09,英文,,0,0,0,,Well, in this case, we're going to do maintenance as we go.
Dialogue: 0,0:36:36.21,0:36:39.09,中文,,0,0,0,,在这种情况下 我们会边进行维护边进行
Dialogue: 0,0:36:39.09,0:36:43.12,英文,,0,0,0,,We're never going to let the tree get too spindly and out of hand.
Dialogue: 0,0:36:39.09,0:36:43.12,中文,,0,0,0,,我们永远不会让树长得太细长而失控
Dialogue: 0,0:36:43.12,0:36:48.47,英文,,0,0,0,,Every single time we change the tree, every single time we add something to the tree,
Dialogue: 0,0:36:43.12,0:36:48.47,中文,,0,0,0,,每一次我们改变树 每一次我们向树中添加东西
Dialogue: 0,0:36:48.47,0:36:54.83,英文,,0,0,0,,We're going to adjust the tree and fix it so that it maintains the mapping to the corresponding 2-3 tree.
Dialogue: 0,0:36:48.47,0:36:54.83,中文,,0,0,0,,我们会调整树并修复它 以确保它保持与相应的2-3树的映射关系
Dialogue: 0,0:36:54.83,0:36:56.91,英文,,0,0,0,,So it's like doing preventive maintenance on your car.
Dialogue: 0,0:36:54.83,0:36:56.91,中文,,0,0,0,,这就像对你的车进行预防性维护一样
Dialogue: 0,0:36:56.91,0:37:07.00,英文,,0,0,0,,You're going to take your car in and get it fixed every month or whatever, as opposed to letting your car completely break down and then spend a bunch of time and money fixing it later.
Dialogue: 0,0:36:56.91,0:37:07.00,中文,,0,0,0,,你会每个月或者其他时间带着你的车去修理一下 而不是让你的车彻底故障 然后花费大量时间和金钱进行修理
Dialogue: 0,0:37:07.00,0:37:10.32,英文,,0,0,0,,We're going to try to keep it up to date on its maintenance.
Dialogue: 0,0:37:07.00,0:37:10.32,中文,,0,0,0,,我们会努力保持树的维护及时更新
Dialogue: 0,0:37:10.32,0:37:16.36,英文,,0,0,0,,So every time we add a new item, we're going to fix the tree up so it looks really good and balanced.
Dialogue: 0,0:37:10.32,0:37:16.36,中文,,0,0,0,,每次我们添加一个新项目 我们都会修复树 使其看起来非常好而且平衡
Dialogue: 0,0:37:16.36,0:37:18.36,英文,,0,0,0,,OK, so let's do it.
Dialogue: 0,0:37:16.36,0:37:18.36,中文,,0,0,0,,好的 那就开始吧
Dialogue: 0,0:37:18.36,0:37:24.14,英文,,0,0,0,,Remember, there is a one-to-one mapping, and we really care about keeping the one-to-one mapping.
Dialogue: 0,0:37:18.36,0:37:24.14,中文,,0,0,0,,记住 存在一对一的映射 我们真的很在意保持这种一对一的映射
Dialogue: 0,0:37:24.14,0:37:27.97,英文,,0,0,0,,Because if we keep the one-to-one mapping, we know we have balance.
Dialogue: 0,0:37:24.14,0:37:27.97,中文,,0,0,0,,因为如果我们保持一对一的映射 我们就知道我们是平衡的
Dialogue: 0,0:37:27.97,0:37:30.25,英文,,0,0,0,,2-3 trees are balanced.
Dialogue: 0,0:37:27.97,0:37:30.25,中文,,0,0,0,,2-3树是平衡的
Dialogue: 0,0:37:30.25,0:37:36.97,英文,,0,0,0,,If we always keep a one-to-one mapping to the 2-3 tree, we're going to be balanced as LLRBs too.
Dialogue: 0,0:37:30.25,0:37:36.97,中文,,0,0,0,,如果我们始终保持对2-3树的一对一映射 我们也会成为平衡的LLRB
Dialogue: 0,0:37:36.97,0:37:39.05,英文,,0,0,0,,So every time we add
Dialogue: 0,0:37:36.97,0:37:39.05,中文,,0,0,0,,每次我们添加
Dialogue: 0,0:37:39.05,0:37:44.76,英文,,0,0,0,,and item to the LLRB, we need to think, what would the corresponding 2-3 tree look like?
Dialogue: 0,0:37:39.05,0:37:44.76,中文,,0,0,0,,在将项目添加到LLRB时 我们需要考虑 对应的2-3树会是什么样子
Dialogue: 0,0:37:44.76,0:37:49.67,英文,,0,0,0,,And if our representation doesn't match the 2-3 tree, then we need to fix it.
Dialogue: 0,0:37:44.76,0:37:49.67,中文,,0,0,0,,如果我们的表示与2-3树不匹配 那么我们需要修复它
Dialogue: 0,0:37:49.67,0:37:51.75,英文,,0,0,0,,So we're going to fix as we go.
Dialogue: 0,0:37:49.67,0:37:51.75,中文,,0,0,0,,我们会边修复边进行
Dialogue: 0,0:37:51.75,0:37:53.23,英文,,0,0,0,,That's the key idea.
Dialogue: 0,0:37:51.75,0:37:53.23,中文,,0,0,0,,这就是关键想法
Dialogue: 0,0:37:53.23,0:37:58.99,英文,,0,0,0,,So instead of letting the tree grow ugly and then fixing it later, we're going to fix as we go.
Dialogue: 0,0:37:53.23,0:37:58.99,中文,,0,0,0,,我们不会让树长得很难看然后再后期修复 而是边修复边进行
Dialogue: 0,0:37:58.99,0:38:02.35,英文,,0,0,0,,So to do so, we have to answer four questions.
Dialogue: 0,0:37:58.99,0:38:02.35,中文,,0,0,0,,为了这样做 我们必须回答四个问题
Dialogue: 0,0:38:02.35,0:38:06.58,英文,,0,0,0,,And it turns out that's all we have to do to build an LLRB.
Dialogue: 0,0:38:02.35,0:38:06.58,中文,,0,0,0,,结果证明 这就是我们构建LLRB所需要做的全部
Dialogue: 0,0:38:06.58,0:38:14.80,英文,,0,0,0,,And to do so, remember, the idea is we're going to pretend like we're a 2-3 tree and think, if I were a 2-3 tree, what would I have to do?
Dialogue: 0,0:38:06.58,0:38:14.80,中文,,0,0,0,,为了做到这一点 请记住 我们的想法是我们要假装自己是一个2-3树 并思考 如果我是一个2-3树 我将需要做什么
Dialogue: 0,0:38:14.80,0:38:17.88,英文,,0,0,0,,And I'm going to try to think in an LLRB.
Dialogue: 0,0:38:14.80,0:38:17.88,中文,,0,0,0,,而我将尝试以LLRB的方式思考
Dialogue: 0,0:38:17.88,0:38:29.79,英文,,0,0,0,,After I add an item, how do I fix up the tree so that I continue to match the 2-3 tree that I'm trying to match and keep a one-to-one correspondence with?
Dialogue: 0,0:38:17.88,0:38:29.79,中文,,0,0,0,,在我添加一个项目后 如何修复树 以便我继续与我试图匹配的2-3树相匹配并保持一一对应关系
Dialogue: 0,0:38:29.79,0:38:44.50,英文,,0,0,0,,Let's say I have a tree with one item, S, and I add a single item, E. Well, in the 2-3 tree world, and that's the B tree down here, then this E gets added into the leaf.
Dialogue: 0,0:38:29.79,0:38:44.50,中文,,0,0,0,,假设我有一棵树 其中只有一个项目S 然后我添加了一个单独的项目E 在2-3树的世界中 这就是下面的B树 然后这个E被添加到叶子节点中
Dialogue: 0,0:38:44.50,0:38:45.96,英文,,0,0,0,,Remember the idea behind B trees?
Dialogue: 0,0:38:44.50,0:38:45.96,中文,,0,0,0,,记住B树的背后思想
Dialogue: 0,0:38:45.96,0:38:47.52,英文,,0,0,0,,You cannot add new leaves.
Dialogue: 0,0:38:45.96,0:38:47.52,中文,,0,0,0,,你不能添加新的叶子节点
Dialogue: 0,0:38:47.52,0:38:49.82,英文,,0,0,0,,You always overstuff the nodes first.
Dialogue: 0,0:38:47.52,0:38:49.82,中文,,0,0,0,,你总是先超载节点
Dialogue: 0,0:38:49.82,0:38:56.57,英文,,0,0,0,,So in this case, if I had S and I added E, I would get ES, a single node with two items.
Dialogue: 0,0:38:49.82,0:38:56.57,中文,,0,0,0,,在这种情况下 如果我有 S 并添加了 E 我会得到 ES 一个具有两个项的单节点
Dialogue: 0,0:38:56.57,0:39:00.69,英文,,0,0,0,,So the question for you is, what if we were in the LLRB world?
Dialogue: 0,0:38:56.57,0:39:00.69,中文,,0,0,0,,那么对你来说 如果我们处于 LLRB 的世界呢
Dialogue: 0,0:39:00.69,0:39:07.61,英文,,0,0,0,,So I have S, and I want to add E. When I add it, should I add it with a red link, or should I add it with a black link?
Dialogue: 0,0:39:00.69,0:39:07.61,中文,,0,0,0,,我有 S 并且我想添加 E 当我添加它时 我应该用红链接添加它 还是应该用黑链接添加它
Dialogue: 0,0:39:07.61,0:39:12.93,英文,,0,0,0,,And remember, you always want to keep the one-to-one correspondence with the B tree.
Dialogue: 0,0:39:07.61,0:39:12.93,中文,,0,0,0,,记住 你始终希望与 B 树保持一对一的对应关系
Dialogue: 0,0:39:12.93,0:39:18.97,英文,,0,0,0,,So which of these two choices keeps the one-to-one mapping with the 2-3 tree?
Dialogue: 0,0:39:12.93,0:39:18.97,中文,,0,0,0,,那么这两个选择中哪一个保持了与 2-3 树的一对一映射
Dialogue: 0,0:39:18.97,0:39:21.66,英文,,0,0,0,,OK, there's only two choices, so I can quiz you on it.
Dialogue: 0,0:39:18.97,0:39:21.66,中文,,0,0,0,,只有两个选择 所以我可以对你进行测验
Dialogue: 0,0:39:21.66,0:39:23.42,英文,,0,0,0,,Who says red?
Dialogue: 0,0:39:21.66,0:39:23.42,中文,,0,0,0,,谁说红色
Dialogue: 0,0:39:23.42,0:39:23.92,英文,,0,0,0,,Some reds.
Dialogue: 0,0:39:23.42,0:39:23.92,中文,,0,0,0,,一些红色
Dialogue: 0,0:39:23.92,0:39:25.41,英文,,0,0,0,,Who says black?
Dialogue: 0,0:39:23.92,0:39:25.41,中文,,0,0,0,,谁说黑色
Dialogue: 0,0:39:25.41,0:39:25.95,英文,,0,0,0,,No blacks.
Dialogue: 0,0:39:25.41,0:39:25.95,中文,,0,0,0,,没有黑色
Dialogue: 0,0:39:25.95,0:39:27.96,英文,,0,0,0,,OK.
Dialogue: 0,0:39:27.96,0:39:28.56,英文,,0,0,0,,I agree.
Dialogue: 0,0:39:27.96,0:39:28.56,中文,,0,0,0,,我同意
Dialogue: 0,0:39:28.56,0:39:36.43,英文,,0,0,0,,In this case, we should use a red link because the red link is the correct representation of this node with two items.
Dialogue: 0,0:39:28.56,0:39:36.43,中文,,0,0,0,,在这种情况下 我们应该使用一个红色链接 因为红色链接是对这个具有两个项目的节点的正确表示
Dialogue: 0,0:39:36.43,0:39:41.61,英文,,0,0,0,,Remember, if there's two items, we should split into two nodes and use a red link to connect.
Dialogue: 0,0:39:36.43,0:39:41.61,中文,,0,0,0,,记住 如果有两个项目 我们应该分成两个节点 并使用红色链接连接
Dialogue: 0,0:39:41.61,0:39:45.03,英文,,0,0,0,,So every time you add a new item, always use a red link.
Dialogue: 0,0:39:41.61,0:39:45.03,中文,,0,0,0,,每次添加新项时 始终使用红色链接
Dialogue: 0,0:39:45.03,0:39:50.85,英文,,0,0,0,,And that corresponds to the fact that in a 2-3 tree, you always add to an overstuffed node.
Dialogue: 0,0:39:45.03,0:39:50.85,中文,,0,0,0,,这对应于2-3树中 你始终添加到一个过度填充的节点的事实
Dialogue: 0,0:39:50.85,0:39:53.95,英文,,0,0,0,,You don't create new leaves because that's what B-trees do.
Dialogue: 0,0:39:50.85,0:39:53.95,中文,,0,0,0,,不要创建新的叶子 因为这是B树的做法
Dialogue: 0,0:39:53.95,0:39:55.70,英文,,0,0,0,,They don't create new leaves.
Dialogue: 0,0:39:53.95,0:39:55.70,中文,,0,0,0,,它们不创建新的叶子
Dialogue: 0,0:39:55.70,0:39:58.06,英文,,0,0,0,,Okay, so that was one problem.
Dialogue: 0,0:39:55.70,0:39:58.06,中文,,0,0,0,,好的 那是一个问题
Dialogue: 0,0:39:58.06,0:39:59.72,英文,,0,0,0,,Now let's go solve some more.
Dialogue: 0,0:39:58.06,0:39:59.72,中文,,0,0,0,,现在让我们去解决更多问题
Dialogue: 0,0:39:59.72,0:40:01.80,英文,,0,0,0,,Let's say I have a tree that looks like this.
Dialogue: 0,0:39:59.72,0:40:01.80,中文,,0,0,0,,假设我有一棵看起来像这样的树
Dialogue: 0,0:40:01.80,0:40:07.43,英文,,0,0,0,,It's got B, A, and E. And this is what it looks like in the 2-3 tree world.
Dialogue: 0,0:40:01.80,0:40:07.43,中文,,0,0,0,,它有B A和E 而在2-3树的世界中 它是这样的
Dialogue: 0,0:40:07.43,0:40:18.12,英文,,0,0,0,,So let's say I want to add S. So if I add S in the 2-3 tree world, I would shove the S in the same node as the E. That's what 2-3 trees do.
Dialogue: 0,0:40:07.43,0:40:18.12,中文,,0,0,0,,假设我想添加S 在2-3树的世界中 如果我添加S 我会将S塞入与E相同的节点 这就是2-3树的做法
Dialogue: 0,0:40:18.12,0:40:20.64,英文,,0,0,0,,I overstuff this node.
Dialogue: 0,0:40:18.12,0:40:20.64,中文,,0,0,0,,我给这个节点塞得太满了
Dialogue: 0,0:40:20.64,0:40:22.50,英文,,0,0,0,,Now let's think about the LLRBs.
Dialogue: 0,0:40:20.64,0:40:22.50,中文,,0,0,0,,现在让我们考虑一下LLRB
Dialogue: 0,0:40:22.50,0:40:29.75,英文,,0,0,0,,The first thing I can do, the laziest thing I can do, is I can just add the S as if this were a regular old BST.
Dialogue: 0,0:40:22.50,0:40:29.75,中文,,0,0,0,,我能做的第一件事 也是最懒的事 就是我可以像处理常规BST一样添加S
Dialogue: 0,0:40:29.75,0:40:30.47,英文,,0,0,0,,So I'm like, you know what?
Dialogue: 0,0:40:29.75,0:40:30.47,中文,,0,0,0,,我就像 你知道吗
Dialogue: 0,0:40:30.47,0:40:32.49,英文,,0,0,0,,Forget all this LLRB nonsense.
Dialogue: 0,0:40:30.47,0:40:32.49,中文,,0,0,0,,忘掉所有这些LLRB的废话
Dialogue: 0,0:40:32.49,0:40:33.41,英文,,0,0,0,,This is a BST.
Dialogue: 0,0:40:32.49,0:40:33.41,中文,,0,0,0,,这是一棵二叉搜索树
Dialogue: 0,0:40:33.41,0:40:37.76,英文,,0,0,0,,So I will just shove the S in there as if this were a normal BST.
Dialogue: 0,0:40:33.41,0:40:37.76,中文,,0,0,0,,我会把S塞进去 就好像这是一棵普通的二叉搜索树一样
Dialogue: 0,0:40:37.76,0:40:41.34,英文,,0,0,0,,And if this were a normal BST, I would shove the S down here.
Dialogue: 0,0:40:37.76,0:40:41.34,中文,,0,0,0,,如果这是一棵普通的二叉搜索树 我会把S放到这里
Dialogue: 0,0:40:41.34,0:40:46.36,英文,,0,0,0,,And this would be my resulting BST with S inserted.
Dialogue: 0,0:40:41.34,0:40:46.36,中文,,0,0,0,,这就是我的结果二叉搜索树 S被插入其中
Dialogue: 0,0:40:46.36,0:40:49.38,英文,,0,0,0,,But the problem is now we don't have the one-to-one mapping.
Dialogue: 0,0:40:46.36,0:40:49.38,中文,,0,0,0,,但问题是现在我们没有一对一的映射了
Dialogue: 0,0:40:49.38,0:40:52.64,英文,,0,0,0,,Something is wrong with this LLRB.
Dialogue: 0,0:40:49.38,0:40:52.64,中文,,0,0,0,,这个LLRB出了些问题
Dialogue: 0,0:40:52.64,0:40:58.07,英文,,0,0,0,,It no longer matches, no longer has the one-to-one correspondence with the 2-3 tree world.
Dialogue: 0,0:40:52.64,0:40:58.07,中文,,0,0,0,,它不再匹配 不再与2-3树的世界一一对应
Dialogue: 0,0:40:58.07,0:41:02.01,英文,,0,0,0,,So question for you is, what is the error, and how do we adjust?
Dialogue: 0,0:40:58.07,0:41:02.01,中文,,0,0,0,,问题是 错误在哪里 我们该怎么调整呢
Dialogue: 0,0:41:02.01,0:41:08.52,英文,,0,0,0,,What's the maintenance we have to do to fix this tree up and make it look nice again?
Dialogue: 0,0:41:02.01,0:41:08.52,中文,,0,0,0,,我们需要做什么维护来修复这棵树并使它再次看起来漂亮
Dialogue: 0,0:41:08.52,0:41:11.16,英文,,0,0,0,,First thing we have to figure out is what's wrong with this tree.
Dialogue: 0,0:41:08.52,0:41:11.16,中文,,0,0,0,,我们首先要弄清楚的是这棵树出了什么问题
Dialogue: 0,0:41:11.16,0:41:12.18,英文,,0,0,0,,I'll give you a hint.
Dialogue: 0,0:41:11.16,0:41:12.18,中文,,0,0,0,,我给你一个提示
Dialogue: 0,0:41:12.18,0:41:14.69,英文,,0,0,0,,It's in the name LLRB.
Dialogue: 0,0:41:12.18,0:41:14.69,中文,,0,0,0,,它在 LLRB 这个名字里
Dialogue: 0,0:41:14.69,0:41:15.25,英文,,0,0,0,,I'm not going to lie.
Dialogue: 0,0:41:14.69,0:41:15.25,中文,,0,0,0,,我不会撒谎的
Dialogue: 0,0:41:15.25,0:41:18.03,英文,,0,0,0,,It took me a little bit to see it when I was prepping this lecture.
Dialogue: 0,0:41:15.25,0:41:18.03,中文,,0,0,0,,当我准备这个讲座时 花了我一点时间才注意到
Dialogue: 0,0:41:18.03,0:41:23.55,英文,,0,0,0,,But think, LLRB, Left Leaning Red Black Tree.
Dialogue: 0,0:41:18.03,0:41:23.55,中文,,0,0,0,,但想想 LLRB 左倾红黑树
Dialogue: 0,0:41:23.55,0:41:25.47,英文,,0,0,0,,This is not leaning left.
Dialogue: 0,0:41:23.55,0:41:25.47,中文,,0,0,0,,这并不是向左倾斜
Dialogue: 0,0:41:25.47,0:41:26.93,英文,,0,0,0,,It is leaning right.
Dialogue: 0,0:41:25.47,0:41:26.93,中文,,0,0,0,,它是向右倾斜的
Dialogue: 0,0:41:26.93,0:41:28.31,英文,,0,0,0,,So it contradicts the name.
Dialogue: 0,0:41:26.93,0:41:28.31,中文,,0,0,0,,这和名称相矛盾
Dialogue: 0,0:41:28.31,0:41:29.72,英文,,0,0,0,,It was broken.
Dialogue: 0,0:41:28.31,0:41:29.72,中文,,0,0,0,,它已经破了
Dialogue: 0,0:41:29.72,0:41:30.90,英文,,0,0,0,,So we need to fix this.
Dialogue: 0,0:41:29.72,0:41:30.90,中文,,0,0,0,,我们需要修复这个
Dialogue: 0,0:41:30.90,0:41:32.32,英文,,0,0,0,,This is leaning to the right.
Dialogue: 0,0:41:30.90,0:41:32.32,中文,,0,0,0,,这是向右倾斜的
Dialogue: 0,0:41:32.32,0:41:37.41,英文,,0,0,0,,But we said, if you have a node ES, this needs to lean to the left.
Dialogue: 0,0:41:32.32,0:41:37.41,中文,,0,0,0,,但是我们说过 如果你有一个节点 ES 这需要向左倾斜
Dialogue: 0,0:41:37.41,0:41:40.69,英文,,0,0,0,,In particular, it needs to look like this.
Dialogue: 0,0:41:37.41,0:41:40.69,中文,,0,0,0,,特别是 它需要看起来像这样
Dialogue: 0,0:41:40.69,0:41:43.97,英文,,0,0,0,,So we have this is not the correct representation.
Dialogue: 0,0:41:40.69,0:41:43.97,中文,,0,0,0,,我们有这不是正确的表示
Dialogue: 0,0:41:43.97,0:41:55.13,英文,,0,0,0,,It needs to look like this, because this is the correct representation of the 2-3 tree after I add S. So the second question for you is, how do I fix this?
Dialogue: 0,0:41:43.97,0:41:55.13,中文,,0,0,0,,它需要看起来像这样 因为这是在我添加 S 后 2-3 树的正确表示 那么对你的第二个问题是 我该如何修复这个
Dialogue: 0,0:41:55.13,0:41:56.83,英文,,0,0,0,,If I add s, I get this.
Dialogue: 0,0:41:55.13,0:41:56.83,中文,,0,0,0,,如果我添加 s 我会得到这个
Dialogue: 0,0:41:56.83,0:41:57.65,英文,,0,0,0,,Leans to the right.
Dialogue: 0,0:41:56.83,0:41:57.65,中文,,0,0,0,,倾斜向右
Dialogue: 0,0:41:57.65,0:41:58.51,英文,,0,0,0,,That's a problem.
Dialogue: 0,0:41:57.65,0:41:58.51,中文,,0,0,0,,那就是个问题
Dialogue: 0,0:41:58.51,0:42:00.74,英文,,0,0,0,,I want it to lean to the left.
Dialogue: 0,0:41:58.51,0:42:00.74,中文,,0,0,0,,我希望它往左倾斜
Dialogue: 0,0:42:00.74,0:42:02.74,英文,,0,0,0,,And remember, what did we say about tree rotation?
Dialogue: 0,0:42:00.74,0:42:02.74,中文,,0,0,0,,还记得我们说过的关于树旋转的事吗
Dialogue: 0,0:42:02.74,0:42:06.03,英文,,0,0,0,,We take that idea from earlier, and we drag it all the way back.
Dialogue: 0,0:42:02.74,0:42:06.03,中文,,0,0,0,,我们从前面的想法开始 然后把它拖回来
Dialogue: 0,0:42:06.03,0:42:10.50,英文,,0,0,0,,Remember, tree rotations have the property that it can give me a tree
Dialogue: 0,0:42:06.03,0:42:10.50,中文,,0,0,0,,记住 树旋转有一个属性 它可以给我一个树
Dialogue: 0,0:42:10.50,0:42:17.21,英文,,0,0,0,,Or I can take a tree of a specific structure, and I can change the structure of the tree using rotations.
Dialogue: 0,0:42:10.50,0:42:17.21,中文,,0,0,0,,或者我可以拿一个具有特定结构的树 然后使用旋转改变树的结构
Dialogue: 0,0:42:17.21,0:42:26.79,英文,,0,0,0,,So here, at last, is where I'm going to leverage the power of rotations to change the structure of my tree to maintain this one-to-one correspondence.
Dialogue: 0,0:42:17.21,0:42:26.79,中文,,0,0,0,,最后 这就是我要利用旋转的力量来改变我的树的结构以维持这种一对一的对应关系的地方
Dialogue: 0,0:42:26.79,0:42:33.77,英文,,0,0,0,,So maybe you're not super comfortable with rotations yet, but try and think, what should I rotate, and to the right or to the left?
Dialogue: 0,0:42:26.79,0:42:33.77,中文,,0,0,0,,也许你对旋转还不是很熟悉 但试着想一想 我应该旋转什么 向左还是向右
Dialogue: 0,0:42:33.77,0:42:40.06,英文,,0,0,0,,So I probably want S and E to temporarily merge, and then who do I shoot down and in which direction?
Dialogue: 0,0:42:33.77,0:42:40.06,中文,,0,0,0,,我可能想让 S 和 E 暂时合并 然后我应该打哪个方向的哪个?
Dialogue: 0,0:42:40.06,0:42:45.04,英文,,0,0,0,,So if S and E both merge, who gets shot down and in which direction?
Dialogue: 0,0:42:40.06,0:42:45.04,中文,,0,0,0,,如果 S 和 E 都合并了 谁会被击中 方向又是什么?
Dialogue: 0,0:42:45.04,0:42:50.19,英文,,0,0,0,,Well, I like E getting shot down, and I like it being shot down to the left.
Dialogue: 0,0:42:45.04,0:42:50.19,中文,,0,0,0,,我喜欢 E 被击中 我喜欢它被击中到左边
Dialogue: 0,0:42:50.19,0:42:53.64,英文,,0,0,0,,So I'm going to rotate E to the left.
Dialogue: 0,0:42:50.19,0:42:53.64,中文,,0,0,0,,我要把 E 旋转到左边
Dialogue: 0,0:42:53.64,0:42:58.46,英文,,0,0,0,,And that's going to take this incorrect representation and make it look nice.
Dialogue: 0,0:42:53.64,0:42:58.46,中文,,0,0,0,,然后这会让这个不正确的表示看起来不错
Dialogue: 0,0:42:58.46,0:43:00.41,英文,,0,0,0,,OK, that's my second problem solved.
Dialogue: 0,0:42:58.46,0:43:00.41,中文,,0,0,0,,好的 我的第二个问题解决了
Dialogue: 0,0:43:00.41,0:43:16.12,英文,,0,0,0,,So if I ever have a problem where one of my links is red and pointing to the right, and I'm going to use a rotate left operation to make sure that my red link points to the left, because that's the correct representation of this 2-3 tree.
Dialogue: 0,0:43:00.41,0:43:16.12,中文,,0,0,0,,如果我遇到一个链接是红色的 指向右边的问题 我会使用左旋操作确保我的红色链接指向左边 因为这是这个 2-3 树的正确表示
Dialogue: 0,0:43:16.12,0:43:25.69,英文,,0,0,0,,OK, third puzzle, which is sometimes if I have a tree like this, B, A, E, S, and I add Z, well,
Dialogue: 0,0:43:16.12,0:43:25.69,中文,,0,0,0,,第三个谜题 有时候 如果我有这样一棵树 B A E S 然后我加上Z
Dialogue: 0,0:43:25.69,0:43:34.69,英文,,0,0,0,,technically, the first thing that will happen is I will overstuff this node, E, S, and Z. And you might say, well, wait a minute.
Dialogue: 0,0:43:25.69,0:43:34.69,中文,,0,0,0,,从技术上讲 首先会发生的事情是我会过度填充这个节点 E S 和Z 你可能会说 等一下
Dialogue: 0,0:43:34.69,0:43:36.25,英文,,0,0,0,,Isn't this going to split?
Dialogue: 0,0:43:34.69,0:43:36.25,中文,,0,0,0,,这难道不会分裂吗
Dialogue: 0,0:43:36.25,0:43:37.23,英文,,0,0,0,,And you're right.
Dialogue: 0,0:43:36.25,0:43:37.23,中文,,0,0,0,,你说得对
Dialogue: 0,0:43:37.23,0:43:43.32,英文,,0,0,0,,But in the instant before it splits, you're going to temporarily have a link or a node
Dialogue: 0,0:43:37.23,0:43:43.32,中文,,0,0,0,,但在它分裂之前的瞬间 你将会暂时有一个链接或一个节点
Dialogue: 0,0:43:43.32,0:43:44.74,英文,,0,0,0,,That has too many items.
Dialogue: 0,0:43:43.32,0:43:44.74,中文,,0,0,0,,那有太多的项目
Dialogue: 0,0:43:44.74,0:43:47.12,英文,,0,0,0,,This is like the instant before it splits.
Dialogue: 0,0:43:44.74,0:43:47.12,中文,,0,0,0,,这就像它分裂之前的瞬间
Dialogue: 0,0:43:47.12,0:43:49.24,英文,,0,0,0,,So this is just a temporary state.
Dialogue: 0,0:43:47.12,0:43:49.24,中文,,0,0,0,,这只是一个临时状态
Dialogue: 0,0:43:49.24,0:43:51.06,英文,,0,0,0,,We're going to split it really soon.
Dialogue: 0,0:43:49.24,0:43:51.06,中文,,0,0,0,,我们马上要分割它
Dialogue: 0,0:43:51.06,0:43:54.99,英文,,0,0,0,,But this is, I guess, is the temporary state.
Dialogue: 0,0:43:51.06,0:43:54.99,中文,,0,0,0,,但我猜 这只是暂时的状态
Dialogue: 0,0:43:54.99,0:43:56.26,英文,,0,0,0,,OK.
Dialogue: 0,0:43:56.26,0:44:07.15,英文,,0,0,0,,And so the rule that we're going to impose, there's a problem, which is that there are actually multiple ways to represent a node with three items, like just before it splits.
Dialogue: 0,0:43:56.26,0:44:07.15,中文,,0,0,0,,我们要强制执行的规则有一个问题 那就是实际上有多种方式来表示一个具有三个项目的节点 就在它分割之前
Dialogue: 0,0:44:07.15,0:44:09.78,英文,,0,0,0,,And so we're going to say this is the right way to do it.
Dialogue: 0,0:44:07.15,0:44:09.78,中文,,0,0,0,,我们要说这是正确的做法
Dialogue: 0,0:44:09.78,0:44:16.44,英文,,0,0,0,,The right way to represent a node with three items is to have S, E, and Z all connected with red links.
Dialogue: 0,0:44:09.78,0:44:16.44,中文,,0,0,0,,表示具有三个项目的节点的正确方式是将 S、E 和 Z 都用红色链接连接起来
Dialogue: 0,0:44:16.44,0:44:18.26,英文,,0,0,0,,It needs to look like this.
Dialogue: 0,0:44:16.44,0:44:18.26,中文,,0,0,0,,它需要看起来像这样
Dialogue: 0,0:44:18.26,0:44:23.91,英文,,0,0,0,,If it looks some other way, it could still represent three nodes, but it would not be the correct representation.
Dialogue: 0,0:44:18.26,0:44:23.91,中文,,0,0,0,,如果看起来有点不同 可能仍然代表三个节点 但这不是正确的表示方式
Dialogue: 0,0:44:23.91,0:44:25.95,英文,,0,0,0,,Remember, there's a one-to-one mapping.
Dialogue: 0,0:44:23.91,0:44:25.95,中文,,0,0,0,,记住 有一个一对一的映射
Dialogue: 0,0:44:25.95,0:44:35.50,英文,,0,0,0,,And we are saying, if you temporarily violate the rule and you have a node with three items, it needs to look like this in the LLRB world.
Dialogue: 0,0:44:25.95,0:44:35.50,中文,,0,0,0,,我们在说 如果你暂时违反规则 你有一个有三个项的节点 在 LLRB 世界中它需要看起来像这样
Dialogue: 0,0:44:35.50,0:44:36.66,英文,,0,0,0,,That's the rule.
Dialogue: 0,0:44:35.50,0:44:36.66,中文,,0,0,0,,这就是规则
Dialogue: 0,0:44:36.66,0:44:38.60,英文,,0,0,0,,So if I add z.
Dialogue: 0,0:44:36.66,0:44:38.60,中文,,0,0,0,,如果我添加 z
Dialogue: 0,0:44:38.60,0:44:41.70,英文,,0,0,0,,In the 2-3 tree world, then I will overstuff a node.
Dialogue: 0,0:44:38.60,0:44:41.70,中文,,0,0,0,,在 2-3 树的世界里 那么我会过度填充一个节点
Dialogue: 0,0:44:41.70,0:44:45.76,英文,,0,0,0,,This is going to temporarily exceed the limit just before splitting.
Dialogue: 0,0:44:41.70,0:44:45.76,中文,,0,0,0,,这将在分裂之前暂时超出限制
Dialogue: 0,0:44:45.76,0:44:54.49,英文,,0,0,0,,And in the LLRB world, when I add z, I'm also going to create a temporary node just before splitting, and it's going to look like this.
Dialogue: 0,0:44:45.76,0:44:54.49,中文,,0,0,0,,在 LLRB 世界中 当我添加 z 时 我还会在分割之前创建一个临时节点 它会看起来像这样
Dialogue: 0,0:44:54.49,0:44:57.55,英文,,0,0,0,,Or at least that's what I want it to look like.
Dialogue: 0,0:44:54.49,0:44:57.55,中文,,0,0,0,,或者至少我希望它看起来是这样的
Dialogue: 0,0:44:57.55,0:45:03.52,英文,,0,0,0,,But what if I have a tree like this, B, A, S, Z, and I add E?
Dialogue: 0,0:44:57.55,0:45:03.52,中文,,0,0,0,,但是如果我有这样一棵树 B、A、S、Z 我添加 E 会怎么样呢
Dialogue: 0,0:45:03.52,0:45:06.70,英文,,0,0,0,,Well, again, I'm going to overstuff this node.
Dialogue: 0,0:45:03.52,0:45:06.70,中文,,0,0,0,,再次 我会过度填充这个节点
Dialogue: 0,0:45:06.70,0:45:09.08,英文,,0,0,0,,So now it has E, S, and Z, and it's about to split.
Dialogue: 0,0:45:06.70,0:45:09.08,中文,,0,0,0,,现在它有了 E、S 和 Z 并且即将分割
Dialogue: 0,0:45:09.08,0:45:12.05,英文,,0,0,0,,This is like the instant before it splits.
Dialogue: 0,0:45:09.08,0:45:12.05,中文,,0,0,0,,这就像分割之前的瞬间
Dialogue: 0,0:45:12.05,0:45:21.88,英文,,0,0,0,,However, if I'm in the LLRB world and I do the lazy thing of just adding to a BST like I always do, then I will get this representation, which is wrong.
Dialogue: 0,0:45:12.05,0:45:21.88,中文,,0,0,0,,然而 如果我在 LLRB 世界中 只是像往常一样向 BST 添加 那么我会得到这个错误的表示
Dialogue: 0,0:45:21.88,0:45:25.78,英文,,0,0,0,,I don't want my temporary node with three items to look like this.
Dialogue: 0,0:45:21.88,0:45:25.78,中文,,0,0,0,,我不想让我的临时节点有三个项目时看起来像这样
Dialogue: 0,0:45:25.78,0:45:27.86,英文,,0,0,0,,I want it to look like this.
Dialogue: 0,0:45:25.78,0:45:27.86,中文,,0,0,0,,我希望它看起来像这样
Dialogue: 0,0:45:27.86,0:45:29.24,英文,,0,0,0,,Because this is the rule.
Dialogue: 0,0:45:27.86,0:45:29.24,中文,,0,0,0,,因为这是规则
Dialogue: 0,0:45:29.24,0:45:36.26,英文,,0,0,0,,We said, if you have a node that's about to split, that has three items in it, it needs to look like this.
Dialogue: 0,0:45:29.24,0:45:36.26,中文,,0,0,0,,我们说 如果你有一个即将分裂的节点 其中有三个项目 它需要看起来像这样
Dialogue: 0,0:45:36.26,0:45:40.43,英文,,0,0,0,,But when we added, it looked like this, which is wrong.
Dialogue: 0,0:45:36.26,0:45:40.43,中文,,0,0,0,,但是当我们添加时 它看起来像这样 这是错误的
Dialogue: 0,0:45:40.43,0:45:41.73,英文,,0,0,0,,So how do we fix?
Dialogue: 0,0:45:40.43,0:45:41.73,中文,,0,0,0,,那么我们如何修复呢
Dialogue: 0,0:45:41.73,0:45:51.16,英文,,0,0,0,,Again, we turn to the magic of rotation, because rotation allows us to take this tree and change the structure of it to look like this.
Dialogue: 0,0:45:41.73,0:45:51.16,中文,,0,0,0,,再次 我们求助于旋转的魔法 因为旋转允许我们改变树的结构 使其看起来像这样
Dialogue: 0,0:45:51.16,0:45:55.88,英文,,0,0,0,,So what's the rotation operation we have to do, and what does it look like?
Dialogue: 0,0:45:51.16,0:45:55.88,中文,,0,0,0,,我们需要执行的旋转操作是什么 它是什么样子的
Dialogue: 0,0:45:55.88,0:46:06.61,英文,,0,0,0,,So I look at this, and I think, well, I could temporarily merge S and Z. And if I temporarily merge S and Z, who do I shoot down and in which direction?
Dialogue: 0,0:45:55.88,0:46:06.61,中文,,0,0,0,,我看了一下 我觉得 我可以暂时合并S和Z 如果我暂时合并S和Z 我要打倒谁 以及在哪个方向
Dialogue: 0,0:46:06.61,0:46:12.48,英文,,0,0,0,,So if I temporarily merge S and Z, well, I could shoot down Z to the right.
Dialogue: 0,0:46:06.61,0:46:12.48,中文,,0,0,0,,如果我暂时合并S和Z 我可以把Z往右边打倒
Dialogue: 0,0:46:12.48,0:46:14.78,英文,,0,0,0,,And that would cause Z to show up over here.
Dialogue: 0,0:46:12.48,0:46:14.78,中文,,0,0,0,,这将导致Z在这里出现
Dialogue: 0,0:46:14.78,0:46:23.04,英文,,0,0,0,,So the operation I'm looking for is rotating right on Z. I will temporarily merge S and Z. I will shoot Z down and to the right.
Dialogue: 0,0:46:14.78,0:46:23.04,中文,,0,0,0,,我寻找的操作是在Z上右旋 我会暂时合并S和Z 我会把Z往下和右边打倒
Dialogue: 0,0:46:23.04,0:46:29.13,英文,,0,0,0,,And I will get the correct representation of this temporarily overstuffed node.
Dialogue: 0,0:46:23.04,0:46:29.13,中文,,0,0,0,,然后我就能得到这个暂时过饱和节点的正确表示
Dialogue: 0,0:46:29.13,0:46:30.97,英文,,0,0,0,,just before splitting.
Dialogue: 0,0:46:29.13,0:46:30.97,中文,,0,0,0,,就在分裂之前
Dialogue: 0,0:46:30.97,0:46:34.99,英文,,0,0,0,,And this is important because we only want to have a one-to-one representation.
Dialogue: 0,0:46:30.97,0:46:34.99,中文,,0,0,0,,这很重要 因为我们只想要一对一的表示
Dialogue: 0,0:46:34.99,0:46:41.19,英文,,0,0,0,,And the correct representation of the overstuffed node moments before splitting is this, and not this.
Dialogue: 0,0:46:34.99,0:46:41.19,中文,,0,0,0,,在拆分之前 过度填充的节点的正确表示是这样的 而不是这样的
Dialogue: 0,0:46:41.19,0:46:43.82,英文,,0,0,0,,This is wrong.
Dialogue: 0,0:46:41.19,0:46:43.82,中文,,0,0,0,,这是错误的
Dialogue: 0,0:46:43.82,0:46:45.82,英文,,0,0,0,,But the rotation will make it look great.
Dialogue: 0,0:46:43.82,0:46:45.82,中文,,0,0,0,,但旋转会使它看起来很棒
Dialogue: 0,0:46:45.82,0:46:48.22,英文,,0,0,0,,So we are maintaining the tree as we go.
Dialogue: 0,0:46:45.82,0:46:48.22,中文,,0,0,0,,因此 我们在进行的同时保持树的结构
Dialogue: 0,0:46:48.22,0:46:49.68,英文,,0,0,0,,That's the key idea.
Dialogue: 0,0:46:48.22,0:46:49.68,中文,,0,0,0,,这是关键思想
Dialogue: 0,0:46:49.68,0:46:55.15,英文,,0,0,0,,OK, final challenge, which is, let's say we have a tree like this.
Dialogue: 0,0:46:49.68,0:46:55.15,中文,,0,0,0,,最后一个挑战 也就是说 假设我们有这样一棵树
Dialogue: 0,0:46:55.15,0:46:55.89,英文,,0,0,0,,Problem?
Dialogue: 0,0:46:55.15,0:46:55.89,中文,,0,0,0,,问题
Dialogue: 0,0:46:55.89,0:46:59.03,英文,,0,0,0,,There are three items in this node, and the limit is two.
Dialogue: 0,0:46:55.89,0:46:59.03,中文,,0,0,0,,这个节点有三个项 但限制是两个
Dialogue: 0,0:46:59.03,0:47:00.37,英文,,0,0,0,,So we need to split.
Dialogue: 0,0:46:59.03,0:47:00.37,中文,,0,0,0,,我们需要拆分
Dialogue: 0,0:47:00.37,0:47:02.97,英文,,0,0,0,,In particular, the B has to get sent up.
Dialogue: 0,0:47:00.37,0:47:02.97,中文,,0,0,0,,特别是 B 必须被发送到上层
Dialogue: 0,0:47:02.97,0:47:07.10,英文,,0,0,0,,And when we rip B out of the tree, the A and the C, they split.
Dialogue: 0,0:47:02.97,0:47:07.10,中文,,0,0,0,,当我们从树中移除 B 时 A 和 C 会分开
Dialogue: 0,0:47:07.10,0:47:08.76,英文,,0,0,0,,into two separate nodes.
Dialogue: 0,0:47:07.10,0:47:08.76,中文,,0,0,0,,成为两个独立的节点
Dialogue: 0,0:47:08.76,0:47:10.20,英文,,0,0,0,,That's what a B-tree does.
Dialogue: 0,0:47:08.76,0:47:10.20,中文,,0,0,0,,这就是 B 树的作用
Dialogue: 0,0:47:10.20,0:47:19.00,英文,,0,0,0,,When your node is overstuffed, you rip out, in this case, the middle node, creating two separate nodes A and C, and the B gets promoted to the parent.
Dialogue: 0,0:47:10.20,0:47:19.00,中文,,0,0,0,,当你的节点过于拥挤时 你拆分 这种情况下 中间节点被剥离 形成两个独立的节点A和C 而B则被提升为父节点
Dialogue: 0,0:47:19.00,0:47:23.72,英文,,0,0,0,,So the question for you is, in an LLRB, how do you do this?
Dialogue: 0,0:47:19.00,0:47:23.72,中文,,0,0,0,,对你来说 一个LLRB中 如何做到这一点呢
Dialogue: 0,0:47:23.72,0:47:28.14,英文,,0,0,0,,How do you represent the splitting operation in your LLRB?
Dialogue: 0,0:47:23.72,0:47:28.14,中文,,0,0,0,,在你的LLRB中 如何表示拆分操作呢
Dialogue: 0,0:47:28.14,0:47:30.33,英文,,0,0,0,,And this one is kind of tricky.
Dialogue: 0,0:47:28.14,0:47:30.33,中文,,0,0,0,,这个有点棘手
Dialogue: 0,0:47:30.33,0:47:41.76,英文,,0,0,0,,And again, if you're not sure, the first thing that would be kind of useful is try and draw out what would the corresponding red-black tree look like for this 2-3 tree.
Dialogue: 0,0:47:30.33,0:47:41.76,中文,,0,0,0,,而且 如果你不确定 可能有点有用的第一步是尝试画出对应的红黑树 以适应这个2-3树
Dialogue: 0,0:47:41.76,0:47:42.84,英文,,0,0,0,,So you can try drawing it.
Dialogue: 0,0:47:41.76,0:47:42.84,中文,,0,0,0,,你可以尝试画一下
Dialogue: 0,0:47:42.84,0:47:46.82,英文,,0,0,0,,The B and the G should be split into two nodes connected by a red link.
Dialogue: 0,0:47:42.84,0:47:46.82,中文,,0,0,0,,B和G应该被分割成两个由红链接连接的节点
Dialogue: 0,0:47:46.82,0:47:52.90,英文,,0,0,0,,And then the A, the C, and the X should be hanging off the B and the G nodes.
Dialogue: 0,0:47:46.82,0:47:52.90,中文,,0,0,0,,然后 A、C 和 X 应该挂在 B 和 G 节点上
Dialogue: 0,0:47:52.90,0:47:54.44,英文,,0,0,0,,So it should look like this.
Dialogue: 0,0:47:52.90,0:47:54.44,中文,,0,0,0,,它应该看起来像这样
Dialogue: 0,0:47:54.44,0:47:57.98,英文,,0,0,0,,The G and the B, there they are, connected by a red link.
Dialogue: 0,0:47:54.44,0:47:57.98,中文,,0,0,0,,G 和 B 它们通过一条红色的链接连接在一起
Dialogue: 0,0:47:57.98,0:48:03.22,英文,,0,0,0,,A, C, and X, they hang off the B, G, nude.
Dialogue: 0,0:47:57.98,0:48:03.22,中文,,0,0,0,,A、C 和 X 它们挂在 B、G 节点上
Dialogue: 0,0:48:03.22,0:48:07.19,英文,,0,0,0,,So this is the tree that I had before splitting.
Dialogue: 0,0:48:03.22,0:48:07.19,中文,,0,0,0,,这就是我在分割之前的树
Dialogue: 0,0:48:07.19,0:48:10.13,英文,,0,0,0,,After I split, I need the tree to look like this.
Dialogue: 0,0:48:07.19,0:48:10.13,中文,,0,0,0,,在我分割之后 我需要树看起来像这样
Dialogue: 0,0:48:10.13,0:48:14.22,英文,,0,0,0,,So how do I go from the tree on the left to the tree on the right?
Dialogue: 0,0:48:10.13,0:48:14.22,中文,,0,0,0,,那么我怎么从左边的树变成右边的树呢
Dialogue: 0,0:48:14.22,0:48:16.61,英文,,0,0,0,,And it turns out, in this case, look at the structure.
Dialogue: 0,0:48:14.22,0:48:16.61,中文,,0,0,0,,事实证明 在这种情况下 看看结构
Dialogue: 0,0:48:16.61,0:48:17.93,英文,,0,0,0,,It's the same.
Dialogue: 0,0:48:16.61,0:48:17.93,中文,,0,0,0,,都一样
Dialogue: 0,0:48:17.93,0:48:22.69,英文,,0,0,0,,So in this case, the kind of magical thing is, I actually don't need to rotate anything.
Dialogue: 0,0:48:17.93,0:48:22.69,中文,,0,0,0,,在这种情况下 神奇的是 我实际上不需要旋转任何东西
Dialogue: 0,0:48:22.69,0:48:25.75,英文,,0,0,0,,Because look, the structure of the tree is already the same.
Dialogue: 0,0:48:22.69,0:48:25.75,中文,,0,0,0,,因为看 树的结构已经是一样的
Dialogue: 0,0:48:25.75,0:48:28.28,英文,,0,0,0,,So what's the operation that we have to do?
Dialogue: 0,0:48:25.75,0:48:28.28,中文,,0,0,0,,那么我们必须做的操作是什么
Dialogue: 0,0:48:28.28,0:48:31.08,英文,,0,0,0,,Stare at it really closely, see if you see it.
Dialogue: 0,0:48:28.28,0:48:31.08,中文,,0,0,0,,仔细地盯着它 看看你能不能看到
Dialogue: 0,0:48:31.08,0:48:35.36,英文,,0,0,0,,So I'm going to say the operation we have to do is, you ready for this?
Dialogue: 0,0:48:31.08,0:48:35.36,中文,,0,0,0,,我要说我们必须做的操作是 你准备好了吗
Dialogue: 0,0:48:35.36,0:48:36.84,英文,,0,0,0,,It's dramatic.
Dialogue: 0,0:48:35.36,0:48:36.84,中文,,0,0,0,,这很戏剧性
Dialogue: 0,0:48:36.84,0:48:38.20,英文,,0,0,0,,It's a color flip.
Dialogue: 0,0:48:36.84,0:48:38.20,中文,,0,0,0,,这是一次颜色翻转
Dialogue: 0,0:48:38.20,0:48:43.38,英文,,0,0,0,,So look at all the nodes or all the edges touching B. We're going to swap all the colors.
Dialogue: 0,0:48:38.20,0:48:43.38,中文,,0,0,0,,看看所有与 B 相连的节点或边 我们要交换所有的颜色
Dialogue: 0,0:48:43.38,0:48:47.60,英文,,0,0,0,,So look, this node or this edge coming out of B used to be black.
Dialogue: 0,0:48:43.38,0:48:47.60,中文,,0,0,0,,看 这个节点或者从 B 出去的这条边过去是黑色的
Dialogue: 0,0:48:47.60,0:48:48.74,英文,,0,0,0,,Now it's red.
Dialogue: 0,0:48:47.60,0:48:48.74,中文,,0,0,0,,现在是红色的
Dialogue: 0,0:48:48.74,0:48:50.90,英文,,0,0,0,,These nodes down here used to be red.
Dialogue: 0,0:48:48.74,0:48:50.90,中文,,0,0,0,,这些下面的节点过去是红色的
Dialogue: 0,0:48:50.90,0:48:52.14,英文,,0,0,0,,Now they're black.
Dialogue: 0,0:48:50.90,0:48:52.14,中文,,0,0,0,,现在是黑色的
Dialogue: 0,0:48:52.14,0:48:53.44,英文,,0,0,0,,That's kind of cool.
Dialogue: 0,0:48:52.14,0:48:53.44,中文,,0,0,0,,这挺酷的
Dialogue: 0,0:48:53.44,0:48:54.91,英文,,0,0,0,,So it turns out.
Dialogue: 0,0:48:53.44,0:48:54.91,中文,,0,0,0,,原来是这样
Dialogue: 0,0:48:54.91,0:49:04.77,英文,,0,0,0,,All I have to do to represent a split is to swap all the colors of the edges touching B. And this doesn't change the structure of the BST in any way whatsoever.
Dialogue: 0,0:48:54.91,0:49:04.77,中文,,0,0,0,,要表示一个分裂 我所要做的就是交换与 B 相邻的边的所有颜色 而这并不改变 BST 的结构
Dialogue: 0,0:49:04.77,0:49:06.74,英文,,0,0,0,,I did not have to do any rotations.
Dialogue: 0,0:49:04.77,0:49:06.74,中文,,0,0,0,,我不必进行任何旋转
Dialogue: 0,0:49:06.74,0:49:11.16,英文,,0,0,0,,I just had to flip the colors of the nodes touching B.
Dialogue: 0,0:49:06.74,0:49:11.16,中文,,0,0,0,,我只需翻转与 B 相邻的节点的颜色
Dialogue: 0,0:49:11.16,0:49:13.02,英文,,0,0,0,,So that's the final operation.
Dialogue: 0,0:49:11.16,0:49:13.02,中文,,0,0,0,,这就是最终的操作
Dialogue: 0,0:49:13.02,0:49:15.36,英文,,0,0,0,,When you split, you need to change the colors.
Dialogue: 0,0:49:13.02,0:49:15.36,中文,,0,0,0,,在分裂时 需要改变颜色
Dialogue: 0,0:49:15.36,0:49:17.87,英文,,0,0,0,,And you might be wondering, well, what's the point of doing this?
Dialogue: 0,0:49:15.36,0:49:17.87,中文,,0,0,0,,也许你会想 那么做有什么意义呢
Dialogue: 0,0:49:17.87,0:49:19.15,英文,,0,0,0,,Isn't the tree the same?
Dialogue: 0,0:49:17.87,0:49:19.15,中文,,0,0,0,,树不是一样的吗
Dialogue: 0,0:49:19.15,0:49:28.02,英文,,0,0,0,,But it's important to remember which nodes are red, which edges are red, and which edges are black,
Dialogue: 0,0:49:19.15,0:49:28.02,中文,,0,0,0,,但是重要的是要记住哪些节点是红色的 哪些边是红色的 哪些边是黑色的
Dialogue: 0,0:49:28.02,0:49:37.02,英文,,0,0,0,,because that's the bookkeeping we have to do to remind ourselves that the B and the G, they're part of the same node, and the A, B, and C are no longer part of the same node.
Dialogue: 0,0:49:28.02,0:49:37.02,中文,,0,0,0,,因为这是我们要做的记账工作 提醒自己 B 和 G 是同一个节点的一部分 而 A、B 和 C 不再是同一个节点的一部分了
Dialogue: 0,0:49:37.02,0:49:42.60,英文,,0,0,0,,So we need to remember this stuff for ourselves so that future rotations can work correctly.
Dialogue: 0,0:49:37.02,0:49:42.60,中文,,0,0,0,,我们需要记住这些东西 以便未来的旋转可以正确地进行
Dialogue: 0,0:49:42.60,0:49:46.63,英文,,0,0,0,,So bizarrely, we've only done four things, but we're done.
Dialogue: 0,0:49:42.60,0:49:46.63,中文,,0,0,0,,出奇的是 我们只做了四件事 但我们已经完成了
Dialogue: 0,0:49:46.63,0:49:50.33,英文,,0,0,0,,If you follow these four rules, use a red link when you insert.
Dialogue: 0,0:49:46.63,0:49:50.33,中文,,0,0,0,,如果你遵循这四条规则 在插入时使用红色链接
Dialogue: 0,0:49:50.33,0:49:55.07,英文,,0,0,0,,When you have a right-leaning node, rotate to the left to fix it.
Dialogue: 0,0:49:50.33,0:49:55.07,中文,,0,0,0,,当你有一个向右倾斜的节点时 向左旋转来修复它
Dialogue: 0,0:49:55.07,0:50:03.39,英文,,0,0,0,,If you have two consecutive left links, you should fix it by rotating to the right to get the correct representation of the overstuffed node.
Dialogue: 0,0:49:55.07,0:50:03.39,中文,,0,0,0,,如果你有两个连续的左链接 你应该通过向右旋转来修复它 以获得过度填充节点的正确表示
Dialogue: 0,0:50:03.39,0:50:08.56,英文,,0,0,0,,And if you have a node that's about to split, then color flip all the edges touching the node.
Dialogue: 0,0:50:03.39,0:50:08.56,中文,,0,0,0,,如果有一个即将分裂的节点 那么请颜色翻转与该节点相连的所有边
Dialogue: 0,0:50:08.56,0:50:14.06,英文,,0,0,0,,If you do all these things, then you will have an LLRB that always matches the 2-3 tree.
Dialogue: 0,0:50:08.56,0:50:14.06,中文,,0,0,0,,如果你完成了所有这些操作 那么你将拥有一个始终匹配2-3树的LLRB
Dialogue: 0,0:50:14.06,0:50:17.39,英文,,0,0,0,,You're maintaining the tree every time you add things to it.
Dialogue: 0,0:50:14.06,0:50:17.39,中文,,0,0,0,,每次添加东西时 你都在维护这棵树
Dialogue: 0,0:50:17.39,0:50:22.65,英文,,0,0,0,,The final thing I'll mention, as you very quietly pack up, is that
Dialogue: 0,0:50:17.39,0:50:22.65,中文,,0,0,0,,我要提到的最后一件事 就是当你悄悄地收拾起来时
Dialogue: 0,0:50:22.65,0:50:29.12,英文,,0,0,0,,Sometimes doing one of these operations will trigger an additional violation that needs fixing.
Dialogue: 0,0:50:22.65,0:50:29.12,中文,,0,0,0,,有时执行其中一项操作会触发需要修复的额外违规
Dialogue: 0,0:50:29.12,0:50:31.44,英文,,0,0,0,,So you may have to fix things multiple times.
Dialogue: 0,0:50:29.12,0:50:31.44,中文,,0,0,0,,因此 你可能需要多次修复事物
Dialogue: 0,0:50:31.44,0:50:33.77,英文,,0,0,0,,I won't talk to the example in too much detail.
Dialogue: 0,0:50:31.44,0:50:33.77,中文,,0,0,0,,我不会详细讨论示例
Dialogue: 0,0:50:33.77,0:50:35.59,英文,,0,0,0,,You can watch the video if you're curious.
Dialogue: 0,0:50:33.77,0:50:35.59,中文,,0,0,0,,如果你好奇 你可以看视频
Dialogue: 0,0:50:35.59,0:50:38.85,英文,,0,0,0,,But here's an example where I do a color flip.
Dialogue: 0,0:50:35.59,0:50:38.85,中文,,0,0,0,,但这里有一个我做颜色翻转的例子
Dialogue: 0,0:50:38.85,0:50:42.21,英文,,0,0,0,,So I add something, I do a color flip, but I have a problem.
Dialogue: 0,0:50:38.85,0:50:42.21,中文,,0,0,0,,我添加了一些东西 我做了一个颜色翻转 但我遇到了问题
Dialogue: 0,0:50:42.21,0:50:45.12,英文,,0,0,0,,This is a right-leaning red node.
Dialogue: 0,0:50:42.21,0:50:45.12,中文,,0,0,0,,这是一个向右倾斜的红色节点
Dialogue: 0,0:50:45.12,0:50:55.33,英文,,0,0,0,,So as a chain reaction, I have to perform a second maintenance fix so that instead of having a red node leading to the right, I have a red node leading to the left.
Dialogue: 0,0:50:45.12,0:50:55.33,中文,,0,0,0,,作为一个连锁反应 我必须进行第二次维护修复 这样 我就不会有一个红色节点指向右边 而是指向左边
Dialogue: 0,0:50:55.33,0:51:00.37,英文,,0,0,0,,So sometimes you're going to have cases where you have to perform multiple fixes
Dialogue: 0,0:50:55.33,0:51:00.37,中文,,0,0,0,,有时候你会遇到需要进行多次修复的情况
Dialogue: 0,0:51:00.37,0:51:05.06,英文,,0,0,0,,in order to get the tree back to a state that matches a B-tree.
Dialogue: 0,0:51:00.37,0:51:05.06,中文,,0,0,0,,为了将树恢复到与B树匹配的状态
Dialogue: 0,0:51:05.06,0:51:06.60,英文,,0,0,0,,So that happens sometimes.
Dialogue: 0,0:51:05.06,0:51:06.60,中文,,0,0,0,,有时会发生这种情况
Dialogue: 0,0:51:06.60,0:51:12.62,英文,,0,0,0,,I will not talk through the optional exercise, but that's the idea behind left-leaning red-black trees.
Dialogue: 0,0:51:06.60,0:51:12.62,中文,,0,0,0,,我不会详细讲解可选练习 但这就是左倾红黑树背后的思想
Dialogue: 0,0:51:12.62,0:51:19.51,英文,,0,0,0,,If you maintain the mathematical one-to-one correspondence with a 2-3 tree, you will get perfect balance, which is kind of cool.
Dialogue: 0,0:51:12.62,0:51:19.51,中文,,0,0,0,,如果你与2-3树保持数学上的一一对应关系 你将获得完美的平衡 这有点酷
Dialogue: 0,0:51:19.51,0:51:21.53,英文,,0,0,0,,Okay, I will see you next time.
Dialogue: 0,0:51:19.51,0:51:21.53,中文,,0,0,0,,好的 下次见
Dialogue: 0,0:51:21.53,0:51:22.83,英文,,0,0,0,,Try not to get sick like me.
Dialogue: 0,0:51:21.53,0:51:22.83,中文,,0,0,0,,尽量不要像我一样生病
Dialogue: 0,0:51:22.83,0:51:24.05,英文,,0,0,0,,Bye.
Dialogue: 0,0:51:22.83,0:51:24.05,中文,,0,0,0,,再见
