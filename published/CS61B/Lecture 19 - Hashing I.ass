[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 3
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1152
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Audio File: D:/python_code/video_tool/video_tool/result/[61B SP24] Lecture 17 - B-Trees (2-3, 2-3-4 Trees).mp4
Video File: D:/python_code/video_tool/video_tool/result/[61B SP24] Lecture 17 - B-Trees (2-3, 2-3-4 Trees).mp4
Video AR Mode: 4
Video AR Value: 1.600000
Video Zoom Percent: 0.750000
Scroll Position: 644
Active Line: 660
Video Position: 11471

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,13,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,90,100,0,0,1,1.33333,1.33333,2,6,6,7,1
Style: 英文,Arial,24,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,90,100,0,0,1,1.33333,1.33333,2,1,1,5,1
Style: 中文,微软雅黑,38,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,2,2,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
Dialogue: 0,0:00:00.48,0:00:01.89,英文,,0,0,0,,Let me record.
Dialogue: 0,0:00:00.48,0:00:01.89,中文,,0,0,0,,让我录制一下
Dialogue: 0,0:00:01.89,0:00:02.81,英文,,0,0,0,,That's probably a good idea.
Dialogue: 0,0:00:01.89,0:00:02.81,中文,,0,0,0,,这可能是个好主意
Dialogue: 0,0:00:02.81,0:00:10.37,英文,,0,0,0,,All right.
Dialogue: 0,0:00:10.37,0:00:11.17,英文,,0,0,0,,Hi.
Dialogue: 0,0:00:10.37,0:00:11.17,中文,,0,0,0,,嗨
Dialogue: 0,0:00:11.17,0:00:14.88,英文,,0,0,0,,For those of you who are joining on the recording, today we're talking about hash tables.
Dialogue: 0,0:00:11.17,0:00:14.88,中文,,0,0,0,,对于那些通过录音加入的人 今天我们要谈论哈希表
Dialogue: 0,0:00:14.88,0:00:18.62,英文,,0,0,0,,This is an entirely new data structure from what we've talked about earlier.
Dialogue: 0,0:00:14.88,0:00:18.62,中文,,0,0,0,,这是一个全新的数据结构 与我们之前讨论过的不直接相关
Dialogue: 0,0:00:18.62,0:00:22.26,英文,,0,0,0,,It's not directly connected to trees.
Dialogue: 0,0:00:18.62,0:00:22.26,中文,,0,0,0,,它与树没有直接联系
Dialogue: 0,0:00:22.26,0:00:32.23,英文,,0,0,0,,So if you've been falling behind in the course, this is a good time to restart a new unit.
Dialogue: 0,0:00:22.26,0:00:32.23,中文,,0,0,0,,如果你在课程中落后了 现在是重新开始新单元的好时机
Dialogue: 0,0:00:32.23,0:00:40.71,英文,,0,0,0,,All right, so let's start looking at kind of the motivation behind what we're doing so far.
Dialogue: 0,0:00:32.23,0:00:40.71,中文,,0,0,0,,好了 那么让我们开始看看我们迄今所做的背后的动机
Dialogue: 0,0:00:40.71,0:00:45.19,英文,,0,0,0,,So we've already seen a few implementations of set or map ADT.
Dialogue: 0,0:00:40.71,0:00:45.19,中文,,0,0,0,,我们已经看到了一些集合或映射ADT的实现
Dialogue: 0,0:00:45.19,0:00:55.01,英文,,0,0,0,,So the set is kind of this object which you can check to see if an item contains something, or you can add something.
Dialogue: 0,0:00:45.19,0:00:55.01,中文,,0,0,0,,这个集合就像是一个对象 你可以检查它是否包含某个项 或者你可以添加某些东西
Dialogue: 0,0:00:55.01,0:00:56.43,英文,,0,0,0,,So it's kind of like a mathematical set.
Dialogue: 0,0:00:55.01,0:00:56.43,中文,,0,0,0,,它有点像一个数学集合
Dialogue: 0,0:00:56.43,0:00:57.39,英文,,0,0,0,,You can add things to it.
Dialogue: 0,0:00:56.43,0:00:57.39,中文,,0,0,0,,你可以往里添加东西
Dialogue: 0,0:00:57.39,0:00:59.97,英文,,0,0,0,,You can check if something is in it.
Dialogue: 0,0:00:57.39,0:00:59.97,中文,,0,0,0,,你可以检查其中是否有东西
Dialogue: 0,0:00:59.97,0:01:03.14,英文,,0,0,0,,And those are kind of the only two options we need to worry about.
Dialogue: 0,0:00:59.97,0:01:03.14,中文,,0,0,0,,那就只有两个选项 我们需要担心的就是这两个
Dialogue: 0,0:01:03.14,0:01:06.04,英文,,0,0,0,,And then for a map, it's kind of the same thing as a Python dictionary.
Dialogue: 0,0:01:03.14,0:01:06.04,中文,,0,0,0,,然后对于地图 它和 Python 字典的操作基本一样
Dialogue: 0,0:01:06.04,0:01:07.94,英文,,0,0,0,,You add a key-value pair.
Dialogue: 0,0:01:06.04,0:01:07.94,中文,,0,0,0,,你添加一个键值对
Dialogue: 0,0:01:07.94,0:01:14.24,英文,,0,0,0,,You can check if a key is in there, and if so, what the corresponding value is.
Dialogue: 0,0:01:07.94,0:01:14.24,中文,,0,0,0,,你可以检查键是否存在 如果存在 获取相应的值
Dialogue: 0,0:01:14.24,0:01:16.41,英文,,0,0,0,,Now, we saw already a few options.
Dialogue: 0,0:01:14.24,0:01:16.41,中文,,0,0,0,,现在 我们已经看到了一些选项
Dialogue: 0,0:01:16.41,0:01:17.95,英文,,0,0,0,,We saw the array version.
Dialogue: 0,0:01:16.41,0:01:17.95,中文,,0,0,0,,我们看过数组版本
Dialogue: 0,0:01:17.95,0:01:20.07,英文,,0,0,0,,But that was really bad.
Dialogue: 0,0:01:17.95,0:01:20.07,中文,,0,0,0,,但那真的很糟糕
Dialogue: 0,0:01:20.07,0:01:23.49,英文,,0,0,0,,It took theta n time to add an item.
Dialogue: 0,0:01:20.07,0:01:23.49,中文,,0,0,0,,添加一个项目需要花费 Θ(N) 的时间
Dialogue: 0,0:01:23.49,0:01:28.87,英文,,0,0,0,,In the worst case, it took theta n time to check if something is contained in there in the worst case.
Dialogue: 0,0:01:23.49,0:01:28.87,中文,,0,0,0,,在最坏的情况下 检查某物是否包含在其中需要花费 Θ(N) 的时间
Dialogue: 0,0:01:28.87,0:01:31.17,英文,,0,0,0,,You can improve that slightly.
Dialogue: 0,0:01:28.87,0:01:31.17,中文,,0,0,0,,你可以稍微改进一下
Dialogue: 0,0:01:31.17,0:01:34.36,英文,,0,0,0,,The add time, you can get it to theta 1 amortized.
Dialogue: 0,0:01:31.17,0:01:34.36,中文,,0,0,0,,添加时间 你可以将其摊销到 Θ(1)
Dialogue: 0,0:01:34.36,0:01:36.28,英文,,0,0,0,,But containing, wait.
Dialogue: 0,0:01:34.36,0:01:36.28,中文,,0,0,0,,但是包含的话 等等
Dialogue: 0,0:01:36.28,0:01:42.94,英文,,0,0,0,,Actually, you can't get it to theta 1 amortized, because you still need to look through everything to make sure that every single item doesn't work.
Dialogue: 0,0:01:36.28,0:01:42.94,中文,,0,0,0,,实际上 你无法将其摊销到 Θ(1) 因为你仍然需要查看所有内容 以确保每个单独的项目都不起作用
Dialogue: 0,0:01:42.94,0:01:43.84,英文,,0,0,0,,Sorry.
Dialogue: 0,0:01:42.94,0:01:43.84,中文,,0,0,0,,抱歉
Dialogue: 0,0:01:43.84,0:01:44.92,英文,,0,0,0,,Yeah.
Dialogue: 0,0:01:43.84,0:01:44.92,中文,,0,0,0,,是的
Dialogue: 0,0:01:44.92,0:01:49.47,英文,,0,0,0,,With an array set, you still need theta n time to add an item.
Dialogue: 0,0:01:44.92,0:01:49.47,中文,,0,0,0,,使用数组集合 添加项目仍然需要Θ(N)的时间
Dialogue: 0,0:01:49.47,0:01:52.25,英文,,0,0,0,,Containing still needs theta n time to add.
Dialogue: 0,0:01:49.47,0:01:52.25,中文,,0,0,0,,包含仍然需要Θ(N)的时间来添加
Dialogue: 0,0:01:52.25,0:01:58.96,英文,,0,0,0,,For a binary search tree, we were able to get it down to theta log n for random trees in an expectation.
Dialogue: 0,0:01:52.25,0:01:58.96,中文,,0,0,0,,对于二叉搜索树 我们能够在期望中将其降低到Θ(log N)对于随机树
Dialogue: 0,0:01:58.96,0:02:05.99,英文,,0,0,0,,But even then, with this worst-case spindly tree, we end up with theta n run time for both the contains and add operation.
Dialogue: 0,0:01:58.96,0:02:05.99,中文,,0,0,0,,但即使是在最坏情况下的稀疏树 我们最终还是会得到包含和添加操作的Θ(N)运行时间
Dialogue: 0,0:02:05.99,0:02:19.41,英文,,0,0,0,,And we're able to find 2-3 trees in LLRBs, which are like binary search trees, but they end up guaranteeing bushiness, which allows us to get theta log n time on both of these.
Dialogue: 0,0:02:05.99,0:02:19.41,中文,,0,0,0,,而且 我们能够在LLRBs中找到2-3树 它们类似于二叉搜索树 但它们最终保证了树的丰满性 这使我们能够在这两个操作上都得到Θ(log N)的时间
Dialogue: 0,0:02:19.41,0:02:23.92,英文,,0,0,0,,Now, we ask, can we do better than this?
Dialogue: 0,0:02:19.41,0:02:23.92,中文,,0,0,0,,现在 我们问 我们能做得比这更好吗
Dialogue: 0,0:02:23.92,0:02:28.26,英文,,0,0,0,,If we manage to get theta log n, let's see if we can do better.
Dialogue: 0,0:02:23.92,0:02:28.26,中文,,0,0,0,,如果我们能够获得 Θ(log N) 让我们看看能否做得更好
Dialogue: 0,0:02:28.26,0:02:31.00,英文,,0,0,0,,And that's kind of what we'll be doing today.
Dialogue: 0,0:02:28.26,0:02:31.00,中文,,0,0,0,,而这也是今天我们将要做的事情
Dialogue: 0,0:02:31.00,0:02:35.22,英文,,0,0,0,,We'll also run into some other issues
Dialogue: 0,0:02:31.00,0:02:35.22,中文,,0,0,0,,我们也会遇到一些其他问题
Dialogue: 0,0:02:35.22,0:02:35.60,英文,,0,0,0,,Right?
Dialogue: 0,0:02:35.22,0:02:35.60,中文,,0,0,0,,对吧
Dialogue: 0,0:02:35.60,0:02:39.92,英文,,0,0,0,,This required that our things need to have comparison operations.
Dialogue: 0,0:02:35.60,0:02:39.92,中文,,0,0,0,,这要求我们的东西需要具有比较操作
Dialogue: 0,0:02:39.92,0:02:44.72,英文,,0,0,0,,So we needed to be able to tell if x was less than y. That's not true of everything.
Dialogue: 0,0:02:39.92,0:02:44.72,中文,,0,0,0,,因此 我们需要能够判断 x 是否小于 y 但并非所有情况都如此
Dialogue: 0,0:02:44.72,0:02:49.88,英文,,0,0,0,,For example, I can't tell how I'm going to compare these two things.
Dialogue: 0,0:02:44.72,0:02:49.88,中文,,0,0,0,,例如 我无法确定如何比较这两个东西
Dialogue: 0,0:02:49.88,0:02:51.39,英文,,0,0,0,,It's like comparing apples and oranges.
Dialogue: 0,0:02:49.88,0:02:51.39,中文,,0,0,0,,就像比较苹果和橙子一样
Dialogue: 0,0:02:51.39,0:02:54.85,英文,,0,0,0,,Like, you can't do it.
Dialogue: 0,0:02:51.39,0:02:54.85,中文,,0,0,0,,就像 你不能做到
Dialogue: 0,0:02:54.85,0:03:04.97,英文,,0,0,0,,So we're going to try to figure out a way to avoid the need for these objects to be comparable.
Dialogue: 0,0:02:54.85,0:03:04.97,中文,,0,0,0,,我们要试图找到一种避免需要这些对象可比较的方法
Dialogue: 0,0:03:04.97,0:03:07.91,英文,,0,0,0,,Okay.
Dialogue: 0,0:03:07.91,0:03:11.55,英文,,0,0,0,,So, in order to do that, we'll take a look at this.
Dialogue: 0,0:03:07.91,0:03:11.55,中文,,0,0,0,,为了做到这一点 我们来看看这个
Dialogue: 0,0:03:11.55,0:03:17.76,英文,,0,0,0,,And, you know, Log N was really good, but we're going to try to do better than Log N today.
Dialogue: 0,0:03:11.55,0:03:17.76,中文,,0,0,0,,而且 你知道 对数 N 真的很好 但是我们今天要比对数 N 做得更好
Dialogue: 0,0:03:17.76,0:03:21.04,英文,,0,0,0,,So let's try and figure out a way to do this.
Dialogue: 0,0:03:17.76,0:03:21.04,中文,,0,0,0,,让我们试着找出一种方法来做到这一点
Dialogue: 0,0:03:21.04,0:03:35.28,英文,,0,0,0,,So, generally speaking, when I try to derive a new, like, implementation of an object, I like to just come up with the first idea that comes to mind and see what happens, see if there's, like, any grain of usefulness to it.
Dialogue: 0,0:03:21.04,0:03:35.28,中文,,0,0,0,,一般来说 当我尝试推导一个新的对象实现时 我喜欢先想出脑海里的第一个想法 然后看看会发生什么 看看是否有任何有用的东西
Dialogue: 0,0:03:35.28,0:03:38.34,英文,,0,0,0,,Data structures tend to be similar to real-life things.
Dialogue: 0,0:03:35.28,0:03:38.34,中文,,0,0,0,,数据结构通常类似于现实中的事物
Dialogue: 0,0:03:38.34,0:03:43.61,英文,,0,0,0,,It's often useful to kind of play the role of that data structure as a human just to get an idea of how things work.
Dialogue: 0,0:03:38.34,0:03:43.61,中文,,0,0,0,,扮演数据结构的角色通常很有用 就像一个人类一样 以了解事物的运作方式
Dialogue: 0,0:03:43.61,0:03:48.61,英文,,0,0,0,,Generally speaking, if it's hard for a human to do, then it's going to be hard for a computer to do.
Dialogue: 0,0:03:43.61,0:03:48.61,中文,,0,0,0,,一般而言 如果对于一个人来说很难做到 那么对于计算机来说也会很难
Dialogue: 0,0:03:48.61,0:03:54.56,英文,,0,0,0,,If it's just tedious for a human to do, then it's probably easy for a computer to do.
Dialogue: 0,0:03:48.61,0:03:54.56,中文,,0,0,0,,如果对于人类来说只是单纯的繁琐工作 那对于计算机来说可能很容易
Dialogue: 0,0:03:54.56,0:03:58.60,英文,,0,0,0,,But if it takes a lot of time for a human to do, then it's still going to take a lot of time for a computer to do.
Dialogue: 0,0:03:54.56,0:03:58.60,中文,,0,0,0,,但如果对于人类来说需要很长时间 那么对于计算机来说仍然需要很长时间
Dialogue: 0,0:03:58.60,0:04:03.61,英文,,0,0,0,,So let's just think about a simplified set that applies integers only.
Dialogue: 0,0:03:58.60,0:04:03.61,中文,,0,0,0,,让我们考虑一个仅适用于整数的简化集合
Dialogue: 0,0:04:03.61,0:04:17.21,英文,,0,0,0,,We're only going to need these two operations, the add operation, which for now we'll assume we never try to add something that's already in the set, and the contains operation that checks if a given item is in the set.
Dialogue: 0,0:04:03.61,0:04:17.21,中文,,0,0,0,,我们只需要这两个操作 加法操作 暂时我们假设我们永远不会尝试添加已经在集合中的东西 和包含操作 用于检查给定项是否在集合中
Dialogue: 0,0:04:17.21,0:04:20.98,英文,,0,0,0,,Now, we can assume that we don't already add something that's already contained.
Dialogue: 0,0:04:17.21,0:04:20.98,中文,,0,0,0,,现在 我们可以假设我们不会重复添加已经包含的东西
Dialogue: 0,0:04:20.98,0:04:26.26,英文,,0,0,0,,The reason is you can always run the contains operation first to check if that item is in the set.
Dialogue: 0,0:04:20.98,0:04:26.26,中文,,0,0,0,,原因是你总是可以先运行包含操作 检查该项是否在集合中
Dialogue: 0,0:04:26.26,0:04:32.28,英文,,0,0,0,,And then if that contains fails, then we only add the item.
Dialogue: 0,0:04:26.26,0:04:32.28,中文,,0,0,0,,然后如果包含失败 我们才添加该项
Dialogue: 0,0:04:32.28,0:04:39.69,英文,,0,0,0,,Our goal will be to make these two particular operations as quick as possible.
Dialogue: 0,0:04:32.28,0:04:39.69,中文,,0,0,0,,我们的目标是使这两个特定操作尽快完成
Dialogue: 0,0:04:39.69,0:04:42.39,英文,,0,0,0,,So I'm going to make a human version of this set.
Dialogue: 0,0:04:39.69,0:04:42.39,中文,,0,0,0,,我将制作这个集合的人类版本
Dialogue: 0,0:04:42.39,0:04:46.17,英文,,0,0,0,,And I'm going to call it write-it-on-the-wall set.
Dialogue: 0,0:04:42.39,0:04:46.17,中文,,0,0,0,,我会称之为把它写在墙上的集合
Dialogue: 0,0:04:46.17,0:04:48.60,英文,,0,0,0,,We will have a wall.
Dialogue: 0,0:04:46.17,0:04:48.60,中文,,0,0,0,,我们会有一堵墙
Dialogue: 0,0:04:48.60,0:04:50.98,英文,,0,0,0,,And we'll have a pencil.
Dialogue: 0,0:04:48.60,0:04:50.98,中文,,0,0,0,,我们会有一支铅笔
Dialogue: 0,0:04:50.98,0:04:56.04,英文,,0,0,0,,And when you ask me to add a number, someone give me a number.
Dialogue: 0,0:04:50.98,0:04:56.04,中文,,0,0,0,,当你要求我添加一个数字时 有人给我一个数字
Dialogue: 0,0:04:56.04,0:04:58.20,英文,,0,0,0,,7.
Dialogue: 0,0:04:56.04,0:04:58.20,中文,,0,0,0,,7
Dialogue: 0,0:04:58.20,0:05:01.18,英文,,0,0,0,,That is add.
Dialogue: 0,0:04:58.20,0:05:01.18,中文,,0,0,0,,这就是添加
Dialogue: 0,0:05:01.18,0:05:04.94,英文,,0,0,0,,For contains, someone give me a number.
Dialogue: 0,0:05:01.18,0:05:04.94,中文,,0,0,0,,对于包含 有人给我一个数字
Dialogue: 0,0:05:04.94,0:05:05.67,英文,,0,0,0,,1.
Dialogue: 0,0:05:04.94,0:05:05.67,中文,,0,0,0,,1
Dialogue: 0,0:05:05.67,0:05:06.75,英文,,0,0,0,,I'm going to check.
Dialogue: 0,0:05:05.67,0:05:06.75,中文,,0,0,0,,我要检查一下
Dialogue: 0,0:05:06.75,0:05:09.27,英文,,0,0,0,,Does my wall have a 1?
Dialogue: 0,0:05:06.75,0:05:09.27,中文,,0,0,0,,我的墙上有一个吗
Dialogue: 0,0:05:09.27,0:05:11.59,英文,,0,0,0,,No.
Dialogue: 0,0:05:09.27,0:05:11.59,中文,,0,0,0,,没有
Dialogue: 0,0:05:11.59,0:05:15.80,英文,,0,0,0,,Therefore, I'll return false.
Dialogue: 0,0:05:11.59,0:05:15.80,中文,,0,0,0,,因此 我会返回false
Dialogue: 0,0:05:15.80,0:05:18.18,英文,,0,0,0,,So I'm going to ask two questions for this.
Dialogue: 0,0:05:15.80,0:05:18.18,中文,,0,0,0,,我要问两个问题
Dialogue: 0,0:05:18.18,0:05:20.04,英文,,0,0,0,,Is it fast to add?
Dialogue: 0,0:05:18.18,0:05:20.04,中文,,0,0,0,,添加快吗
Dialogue: 0,0:05:20.04,0:05:23.52,英文,,0,0,0,,Is it fast to contain?
Dialogue: 0,0:05:20.04,0:05:23.52,中文,,0,0,0,,包含快吗
Dialogue: 0,0:05:23.52,0:05:25.31,英文,,0,0,0,,So let's start off.
Dialogue: 0,0:05:23.52,0:05:25.31,中文,,0,0,0,,那么让我们开始吧
Dialogue: 0,0:05:25.31,0:05:28.33,英文,,0,0,0,,Here's a wall.
Dialogue: 0,0:05:25.31,0:05:28.33,中文,,0,0,0,,这里有一堵墙
Dialogue: 0,0:05:28.33,0:05:33.93,英文,,0,0,0,,And for those of you on Zoom, I have enabled annotations.
Dialogue: 0,0:05:28.33,0:05:33.93,中文,,0,0,0,,对于在Zoom上的你们 我已经启用了注释
Dialogue: 0,0:05:33.93,0:05:35.16,英文,,0,0,0,,Add a 5 to this wall.
Dialogue: 0,0:05:33.93,0:05:35.16,中文,,0,0,0,,在这堵墙上加上一个5
Dialogue: 0,0:05:35.16,0:05:47.02,英文,,0,0,0,,1, 5.
Dialogue: 0,0:05:35.16,0:05:47.02,中文,,0,0,0,,1 5
Dialogue: 0,0:05:47.02,0:05:55.40,英文,,0,0,0,,I did enable this, right?
Dialogue: 0,0:05:47.02,0:05:55.40,中文,,0,0,0,,我确实启用了 对吧
Dialogue: 0,0:05:55.40,0:05:57.29,英文,,0,0,0,,I did not.
Dialogue: 0,0:05:55.40,0:05:57.29,中文,,0,0,0,,我没有
Dialogue: 0,0:05:57.29,0:06:05.01,英文,,0,0,0,,I said enable annotation for others.
Dialogue: 0,0:05:57.29,0:06:05.01,中文,,0,0,0,,我说让其他人启用注释
Dialogue: 0,0:06:05.01,0:06:16.16,英文,,0,0,0,,No, it's so fun when students can do it.
Dialogue: 0,0:06:05.01,0:06:16.16,中文,,0,0,0,,不 学生们能做的时候很有趣
Dialogue: 0,0:06:16.16,0:06:18.06,英文,,0,0,0,,It's a webinar.
Dialogue: 0,0:06:16.16,0:06:18.06,中文,,0,0,0,,这是一个网络研讨会
Dialogue: 0,0:06:18.06,0:06:21.16,英文,,0,0,0,,It worked last time so well.
Dialogue: 0,0:06:18.06,0:06:21.16,中文,,0,0,0,,上次效果太好了
Dialogue: 0,0:06:21.16,0:06:24.26,英文,,0,0,0,,All right, we're going to do it ourselves.
Dialogue: 0,0:06:21.16,0:06:24.26,中文,,0,0,0,,我们自己来做
Dialogue: 0,0:06:24.26,0:06:27.88,英文,,0,0,0,,How do we add a 5 here?
Dialogue: 0,0:06:24.26,0:06:27.88,中文,,0,0,0,,我们怎么在这里加一个5
Dialogue: 0,0:06:27.88,0:06:34.01,英文,,0,0,0,,I'm going to write a 5.
Dialogue: 0,0:06:27.88,0:06:34.01,中文,,0,0,0,,我要写一个5
Dialogue: 0,0:06:34.01,0:06:46.99,英文,,0,0,0,,We have added a 5 to this wall.
Dialogue: 0,0:06:34.01,0:06:46.99,中文,,0,0,0,,我们在这堵墙上加了一个 5
Dialogue: 0,0:06:46.99,0:06:51.95,英文,,0,0,0,,All right, so we add a 5.
Dialogue: 0,0:06:46.99,0:06:51.95,中文,,0,0,0,,我们加一个 5
Dialogue: 0,0:06:51.95,0:06:57.45,英文,,0,0,0,,So, all right, let's see how long it takes to add a 5 to this wall of 100 numbers.
Dialogue: 0,0:06:51.95,0:06:57.45,中文,,0,0,0,,让我们看看在这个由 100 个数字组成的墙上加一个 5 要多久
Dialogue: 0,0:06:57.45,0:07:00.21,英文,,0,0,0,,Is it fast?
Dialogue: 0,0:06:57.45,0:07:00.21,中文,,0,0,0,,速度快吗
Dialogue: 0,0:07:00.21,0:07:01.97,英文,,0,0,0,,Well, yeah.
Dialogue: 0,0:07:00.21,0:07:01.97,中文,,0,0,0,,是的
Dialogue: 0,0:07:01.97,0:07:03.65,英文,,0,0,0,,I can write a 5 here.
Dialogue: 0,0:07:01.97,0:07:03.65,中文,,0,0,0,,我可以在这里写一个 5
Dialogue: 0,0:07:03.65,0:07:12.37,英文,,0,0,0,,It works.
Dialogue: 0,0:07:03.65,0:07:12.37,中文,,0,0,0,,它有效
Dialogue: 0,0:07:12.37,0:07:14.89,英文,,0,0,0,,Yeah, I can write a 5 quickly.
Dialogue: 0,0:07:12.37,0:07:14.89,中文,,0,0,0,,我可以快速写一个5
Dialogue: 0,0:07:14.89,0:07:20.06,英文,,0,0,0,,So adding seems to be fast, regardless of how many things I have on this wall.
Dialogue: 0,0:07:14.89,0:07:20.06,中文,,0,0,0,,添加似乎很快 无论我墙上有多少东西
Dialogue: 0,0:07:20.06,0:07:23.48,英文,,0,0,0,,Let's see how fast it is to run the contains operator.
Dialogue: 0,0:07:20.06,0:07:23.48,中文,,0,0,0,,让我们看看运行包含运算符有多快
Dialogue: 0,0:07:23.48,0:07:25.76,英文,,0,0,0,,All right.
Dialogue: 0,0:07:25.76,0:07:30.56,英文,,0,0,0,,Where is the 439?
Dialogue: 0,0:07:25.76,0:07:30.56,中文,,0,0,0,,439在哪里
Dialogue: 0,0:07:30.56,0:07:32.42,英文,,0,0,0,,All right.
Dialogue: 0,0:07:32.42,0:07:34.06,英文,,0,0,0,,Let's do it this way.
Dialogue: 0,0:07:32.42,0:07:34.06,中文,,0,0,0,,我们就这样做吧
Dialogue: 0,0:07:34.06,0:07:38.54,英文,,0,0,0,,Show of hands, does a 439 exist on this wall?
Dialogue: 0,0:07:34.06,0:07:38.54,中文,,0,0,0,,举手 这面墙上有 439 吗
Dialogue: 0,0:07:38.54,0:07:40.28,英文,,0,0,0,,Yes or no?
Dialogue: 0,0:07:38.54,0:07:40.28,中文,,0,0,0,,是还是不是
Dialogue: 0,0:07:40.28,0:07:41.73,英文,,0,0,0,,No.
Dialogue: 0,0:07:40.28,0:07:41.73,中文,,0,0,0,,不
Dialogue: 0,0:07:41.73,0:07:46.14,英文,,0,0,0,,It took, how do you, no.
Dialogue: 0,0:07:41.73,0:07:46.14,中文,,0,0,0,,花了 你怎么说 不
Dialogue: 0,0:07:46.14,0:07:50.86,英文,,0,0,0,,Yeah, you kind of look through every single number, right?
Dialogue: 0,0:07:46.14,0:07:50.86,中文,,0,0,0,,你要看每一个数字 对吧
Dialogue: 0,0:07:50.86,0:07:56.20,英文,,0,0,0,,All right, do you think we can do larger?
Dialogue: 0,0:07:50.86,0:07:56.20,中文,,0,0,0,,你觉得我们可以做得更大吗
Dialogue: 0,0:07:56.20,0:07:59.32,英文,,0,0,0,,Who wants to do larger?
Dialogue: 0,0:07:56.20,0:07:59.32,中文,,0,0,0,,谁想做更大的
Dialogue: 0,0:07:59.32,0:08:02.59,英文,,0,0,0,,Who doesn't want to do larger?
Dialogue: 0,0:07:59.32,0:08:02.59,中文,,0,0,0,,谁不想做更大的
Dialogue: 0,0:08:02.59,0:08:05.71,英文,,0,0,0,,All right, we're doing larger anyway.
Dialogue: 0,0:08:02.59,0:08:05.71,中文,,0,0,0,,无论如何我们都在做更大的
Dialogue: 0,0:08:05.71,0:08:09.59,英文,,0,0,0,,Search for 605.
Dialogue: 0,0:08:05.71,0:08:09.59,中文,,0,0,0,,搜索605
Dialogue: 0,0:08:09.59,0:08:12.35,英文,,0,0,0,,All right, raise your hand when you found it.
Dialogue: 0,0:08:09.59,0:08:12.35,中文,,0,0,0,,在你找到它时举手
Dialogue: 0,0:08:12.35,0:08:19.34,英文,,0,0,0,,All right, where is it?
Dialogue: 0,0:08:12.35,0:08:19.34,中文,,0,0,0,,它在哪里
Dialogue: 0,0:08:19.34,0:08:22.30,英文,,0,0,0,,Third row, fourth column, right here.
Dialogue: 0,0:08:19.34,0:08:22.30,中文,,0,0,0,,第三行 第四列 就在这里
Dialogue: 0,0:08:22.30,0:08:23.60,英文,,0,0,0,,Yep.
Dialogue: 0,0:08:22.30,0:08:23.60,中文,,0,0,0,,是的
Dialogue: 0,0:08:23.60,0:08:24.60,英文,,0,0,0,,All right.
Dialogue: 0,0:08:24.60,0:08:25.52,英文,,0,0,0,,You want to go even bigger?
Dialogue: 0,0:08:24.60,0:08:25.52,中文,,0,0,0,,你想再来点更大的吗
Dialogue: 0,0:08:25.52,0:08:29.30,英文,,0,0,0,,That was too fast.
Dialogue: 0,0:08:25.52,0:08:29.30,中文,,0,0,0,,那太快了
Dialogue: 0,0:08:29.30,0:08:31.16,英文,,0,0,0,,All right.
Dialogue: 0,0:08:31.16,0:08:32.00,英文,,0,0,0,,Let's go bigger.
Dialogue: 0,0:08:31.16,0:08:32.00,中文,,0,0,0,,我们再来点更大的
Dialogue: 0,0:08:32.00,0:08:35.84,英文,,0,0,0,,I'm going to give you 1,000 things this time.
Dialogue: 0,0:08:32.00,0:08:35.84,中文,,0,0,0,,这次我会给你 1,000 个东西
Dialogue: 0,0:08:35.84,0:08:36.80,英文,,0,0,0,,And you know what?
Dialogue: 0,0:08:35.84,0:08:36.80,中文,,0,0,0,,而且你知道吗
Dialogue: 0,0:08:36.80,0:08:38.08,英文,,0,0,0,,I'm going to give you two things.
Dialogue: 0,0:08:36.80,0:08:38.08,中文,,0,0,0,,我要给你两件东西
Dialogue: 0,0:08:38.08,0:08:39.85,英文,,0,0,0,,One of them is going to be on the wall.
Dialogue: 0,0:08:38.08,0:08:39.85,中文,,0,0,0,,其中一个会在墙上
Dialogue: 0,0:08:39.85,0:08:42.01,英文,,0,0,0,,One of them's not on the wall.
Dialogue: 0,0:08:39.85,0:08:42.01,中文,,0,0,0,,另一个不在墙上
Dialogue: 0,0:08:42.01,0:08:44.07,英文,,0,0,0,,Find the one that's on the wall.
Dialogue: 0,0:08:42.01,0:08:44.07,中文,,0,0,0,,找到在墙上的那一个
Dialogue: 0,0:08:44.07,0:08:46.99,英文,,0,0,0,,You ready?
Dialogue: 0,0:08:44.07,0:08:46.99,中文,,0,0,0,,你准备好了吗
Dialogue: 0,0:08:46.99,0:08:50.09,英文,,0,0,0,,So here's a 605.
Dialogue: 0,0:08:46.99,0:08:50.09,中文,,0,0,0,,这里有一个605
Dialogue: 0,0:08:50.09,0:08:51.11,英文,,0,0,0,,Are you ready?
Dialogue: 0,0:08:50.09,0:08:51.11,中文,,0,0,0,,你准备好了吗
Dialogue: 0,0:08:51.11,0:08:52.75,英文,,0,0,0,,1,000 items?
Dialogue: 0,0:08:51.11,0:08:52.75,中文,,0,0,0,,1,000个项目
Dialogue: 0,0:08:52.75,0:09:06.46,英文,,0,0,0,,Go.
Dialogue: 0,0:08:52.75,0:09:06.46,中文,,0,0,0,,Go
Dialogue: 0,0:09:06.46,0:09:07.58,英文,,0,0,0,,The second one's on the wall?
Dialogue: 0,0:09:06.46,0:09:07.58,中文,,0,0,0,,第二个在墙上
Dialogue: 0,0:09:07.58,0:09:12.85,英文,,0,0,0,,Where?
Dialogue: 0,0:09:07.58,0:09:12.85,中文,,0,0,0,,哪里
Dialogue: 0,0:09:12.85,0:09:18.45,英文,,0,0,0,,Someone says the first one's on the wall now.
Dialogue: 0,0:09:12.85,0:09:18.45,中文,,0,0,0,,有人说现在第一个在墙上
Dialogue: 0,0:09:18.45,0:09:21.22,英文,,0,0,0,,No one use Control-F.
Dialogue: 0,0:09:18.45,0:09:21.22,中文,,0,0,0,,没人用Control-F
Dialogue: 0,0:09:21.22,0:09:58.10,英文,,0,0,0,,Zoom chat, you're not allowed to use control F here.
Dialogue: 0,0:09:21.22,0:09:58.10,中文,,0,0,0,,Zoom聊天 这里不允许使用Control-F
Dialogue: 0,0:09:58.10,0:10:05.74,英文,,0,0,0,,All right, I'm going to draw a line, and you tell me where I should go to reach the number.
Dialogue: 0,0:09:58.10,0:10:05.74,中文,,0,0,0,,我要画一条线 你来告诉我该往哪儿走才能到达这个数字
Dialogue: 0,0:10:05.74,0:10:08.62,英文,,0,0,0,,Where do I go?
Dialogue: 0,0:10:05.74,0:10:08.62,中文,,0,0,0,,我该往哪儿走
Dialogue: 0,0:10:08.62,0:10:13.72,英文,,0,0,0,,Right?
Dialogue: 0,0:10:08.62,0:10:13.72,中文,,0,0,0,,往右
Dialogue: 0,0:10:13.72,0:10:17.23,英文,,0,0,0,,Tell me when to stop.
Dialogue: 0,0:10:13.72,0:10:17.23,中文,,0,0,0,,告诉我什么时候停
Dialogue: 0,0:10:17.23,0:10:30.68,英文,,0,0,0,,Also know that you're seeing a one-second delay of this, so tell me to stop a bit early.
Dialogue: 0,0:10:17.23,0:10:30.68,中文,,0,0,0,,还有 你要知道你看到的这个有一秒钟的延迟 要提前告诉我停
Dialogue: 0,0:10:30.68,0:10:38.06,英文,,0,0,0,,One more.
Dialogue: 0,0:10:30.68,0:10:38.06,中文,,0,0,0,,再来一个
Dialogue: 0,0:10:38.06,0:10:39.87,英文,,0,0,0,,Yep.
Dialogue: 0,0:10:38.06,0:10:39.87,中文,,0,0,0,,对
Dialogue: 0,0:10:39.87,0:10:41.99,英文,,0,0,0,,Right here.
Dialogue: 0,0:10:39.87,0:10:41.99,中文,,0,0,0,,就在这里
Dialogue: 0,0:10:41.99,0:10:51.79,英文,,0,0,0,,Yes.
Dialogue: 0,0:10:41.99,0:10:51.79,中文,,0,0,0,,是的
Dialogue: 0,0:10:51.79,0:10:52.71,英文,,0,0,0,,Yep.
Dialogue: 0,0:10:51.79,0:10:52.71,中文,,0,0,0,,对
Dialogue: 0,0:10:52.71,0:10:55.78,英文,,0,0,0,,It's right there, right in the middle.
Dialogue: 0,0:10:52.71,0:10:55.78,中文,,0,0,0,,就在那儿 正中间
Dialogue: 0,0:10:55.78,0:10:58.51,英文,,0,0,0,,We have that character.
Dialogue: 0,0:10:55.78,0:10:58.51,中文,,0,0,0,,我们有那个字符
Dialogue: 0,0:10:58.51,0:11:02.25,英文,,0,0,0,,For those of you who are bilingual, that is the character for white.
Dialogue: 0,0:10:58.51,0:11:02.25,中文,,0,0,0,,对于你们中文双语的人来说 那是白色的字符
Dialogue: 0,0:11:02.25,0:11:08.87,英文,,0,0,0,,We did not find the character for black on the screen.
Dialogue: 0,0:11:02.25,0:11:08.87,中文,,0,0,0,,我们在屏幕上没有找到黑色的字符
Dialogue: 0,0:11:08.87,0:11:16.33,英文,,0,0,0,,So this one took quite a bit longer to check for containment.
Dialogue: 0,0:11:08.87,0:11:16.33,中文,,0,0,0,,这个检查是否包含花了相当长的时间
Dialogue: 0,0:11:16.33,0:11:18.69,英文,,0,0,0,,So it had fast adding, right?
Dialogue: 0,0:11:16.33,0:11:18.69,中文,,0,0,0,,但它添加很快 对吧
Dialogue: 0,0:11:18.69,0:11:20.07,英文,,0,0,0,,It was very fast to add an item.
Dialogue: 0,0:11:18.69,0:11:20.07,中文,,0,0,0,,添加一个项目非常快
Dialogue: 0,0:11:20.07,0:11:23.91,英文,,0,0,0,,You can just add an item no matter how many items we have on this wall.
Dialogue: 0,0:11:20.07,0:11:23.91,中文,,0,0,0,,不管墙上有多少项目 你都可以随意添加
Dialogue: 0,0:11:23.91,0:11:28.17,英文,,0,0,0,,But it took kind of a long time to check if something is containing.
Dialogue: 0,0:11:23.91,0:11:28.17,中文,,0,0,0,,但检查是否包含某物却花了很长时间
Dialogue: 0,0:11:28.17,0:11:30.67,英文,,0,0,0,,So this is kind of bad, right?
Dialogue: 0,0:11:28.17,0:11:30.67,中文,,0,0,0,,这样有点不好 对吗
Dialogue: 0,0:11:30.67,0:11:39.98,英文,,0,0,0,,It took data and time to check, because you had to look through every single item just to find the right thing.
Dialogue: 0,0:11:30.67,0:11:39.98,中文,,0,0,0,,因为必须检查每一个项目才能找到正确的东西 检查花了时间和数据
Dialogue: 0,0:11:39.98,0:11:46.44,英文,,0,0,0,,Now, the good thing was it didn't matter what type of data it was, right?
Dialogue: 0,0:11:39.98,0:11:46.44,中文,,0,0,0,,现在 好处在于无论数据类型是什么 都没关系 对吧
Dialogue: 0,0:11:46.44,0:11:51.24,英文,,0,0,0,,This approach worked just as well for integers as it did for kanji.
Dialogue: 0,0:11:46.44,0:11:51.24,中文,,0,0,0,,这种方法对整数和汉字都同样有效
Dialogue: 0,0:11:51.24,0:11:58.21,英文,,0,0,0,,So it at least got us our thing where we didn't need to worry about comparisons.
Dialogue: 0,0:11:51.24,0:11:58.21,中文,,0,0,0,,至少让我们不需要担心比较的问题
Dialogue: 0,0:11:58.21,0:12:00.41,英文,,0,0,0,,So how can we make this faster?
Dialogue: 0,0:11:58.21,0:12:00.41,中文,,0,0,0,,那么我们怎样才能让这个更快呢
Dialogue: 0,0:12:00.41,0:12:09.52,英文,,0,0,0,,Well, one option would be to sort the data, but that would make contains faster, adds slower, since you need to rewrite everything every now and then.
Dialogue: 0,0:12:00.41,0:12:09.52,中文,,0,0,0,,一个选择是对数据进行排序 但这会使包含操作变得更快 添加操作变慢 因为你需要不时地重写所有内容
Dialogue: 0,0:12:09.52,0:12:17.78,英文,,0,0,0,,It doesn't work for Kanji, because you need to be able to compare things, and Kanji cannot be sorted.
Dialogue: 0,0:12:09.52,0:12:17.78,中文,,0,0,0,,这对汉字不起作用 因为你需要能够进行比较 而汉字不能排序
Dialogue: 0,0:12:17.78,0:12:23.17,英文,,0,0,0,,So this actually does end up leading to our tree-set approach we discussed earlier.
Dialogue: 0,0:12:17.78,0:12:23.17,中文,,0,0,0,,这实际上确实导致了我们之前讨论过的树集方法
Dialogue: 0,0:12:23.17,0:12:27.05,英文,,0,0,0,,The best we can get from that is log n runtime for both of these operations.
Dialogue: 0,0:12:23.17,0:12:27.05,中文,,0,0,0,,我们能得到的最好结果是对这两个操作都是log(N)的运行时间
Dialogue: 0,0:12:27.05,0:12:27.95,英文,,0,0,0,,That's fairly good.
Dialogue: 0,0:12:27.05,0:12:27.95,中文,,0,0,0,,这相当不错
Dialogue: 0,0:12:27.95,0:12:30.03,英文,,0,0,0,,We can do better.
Dialogue: 0,0:12:27.95,0:12:30.03,中文,,0,0,0,,我们可以做得更好
Dialogue: 0,0:12:30.03,0:12:32.63,英文,,0,0,0,,The next option is to categorize the data.
Dialogue: 0,0:12:30.03,0:12:32.63,中文,,0,0,0,,下一个选项是对数据进行分类
Dialogue: 0,0:12:32.63,0:12:34.83,英文,,0,0,0,,How do we do that?
Dialogue: 0,0:12:32.63,0:12:34.83,中文,,0,0,0,,我们怎么做呢
Dialogue: 0,0:12:34.83,0:12:38.85,英文,,0,0,0,,Let's get Boba.
Dialogue: 0,0:12:34.83,0:12:38.85,中文,,0,0,0,,我们去喝boba吧
Dialogue: 0,0:12:38.85,0:12:41.57,英文,,0,0,0,,How many people like Boba here?
Dialogue: 0,0:12:38.85,0:12:41.57,中文,,0,0,0,,这里有多少人喜欢boba
Dialogue: 0,0:12:41.57,0:12:43.98,英文,,0,0,0,,Everyone, or most people.
Dialogue: 0,0:12:41.57,0:12:43.98,中文,,0,0,0,,大家 或者说大多数人
Dialogue: 0,0:12:43.98,0:12:51.46,英文,,0,0,0,,How many people hate Boba?
Dialogue: 0,0:12:43.98,0:12:51.46,中文,,0,0,0,,有多少人讨厌boba奶茶
Dialogue: 0,0:12:51.46,0:12:57.59,英文,,0,0,0,,Apparently, Charlie is a... All right.
Dialogue: 0,0:12:51.46,0:12:57.59,中文,,0,0,0,,显然 查理是一个...
Dialogue: 0,0:12:57.59,0:13:03.35,英文,,0,0,0,,So, for those of you who like Boba, how many people have gone to TPT?
Dialogue: 0,0:12:57.59,0:13:03.35,中文,,0,0,0,,那么 对于那些喜欢boba奶茶的人来说 有多少人去过 TPT
Dialogue: 0,0:13:03.35,0:13:04.49,英文,,0,0,0,,Decent number of you.
Dialogue: 0,0:13:03.35,0:13:04.49,中文,,0,0,0,,你们当中数量还是相当可观的
Dialogue: 0,0:13:04.49,0:13:11.48,英文,,0,0,0,,Have you noticed that there's this thing that they have on the table?
Dialogue: 0,0:13:04.49,0:13:11.48,中文,,0,0,0,,你有没有注意到桌子上有这样一个东西
Dialogue: 0,0:13:11.48,0:13:17.72,英文,,0,0,0,,They have this thing on the table, right, that has this box 0 through 9.
Dialogue: 0,0:13:11.48,0:13:17.72,中文,,0,0,0,,他们桌子上有这样一个东西 对吧 上面有这个盒子 从 0 到 9
Dialogue: 0,0:13:17.72,0:13:20.88,英文,,0,0,0,,And what they do is they use your snack pass order, right?
Dialogue: 0,0:13:17.72,0:13:20.88,中文,,0,0,0,,然后他们做的就是利用你的小吃通行证订单 对吧
Dialogue: 0,0:13:20.88,0:13:23.82,英文,,0,0,0,,They assign you a number based on that snack pass order.
Dialogue: 0,0:13:20.88,0:13:23.82,中文,,0,0,0,,他们根据那个小吃通行证订单给你分配一个数字
Dialogue: 0,0:13:23.82,0:13:28.27,英文,,0,0,0,,And they put your drink in the location of the last digit of your number.
Dialogue: 0,0:13:23.82,0:13:28.27,中文,,0,0,0,,然后他们把你的饮料放在你的数字的最后一个数字对应的位置上
Dialogue: 0,0:13:28.27,0:13:35.37,英文,,0,0,0,,So if you have the number 107, then they'll put your drink in the box labeled 7.
Dialogue: 0,0:13:28.27,0:13:35.37,中文,,0,0,0,,如果你的号码是107 那么他们会把你的饮料放在标有7的盒子里
Dialogue: 0,0:13:35.37,0:13:43.64,英文,,0,0,0,,That way, instead of looking through all the boba that's on the table, you only need to look in the boba that's in that particular slot.
Dialogue: 0,0:13:35.37,0:13:43.64,中文,,0,0,0,,这样 你就不需要查看桌子上所有的boba 你只需要查看那个特定槽里的boba
Dialogue: 0,0:13:43.64,0:13:50.35,英文,,0,0,0,,And generally speaking, there's only 5 or 10 boba on the table at any one time you need to check.
Dialogue: 0,0:13:43.64,0:13:50.35,中文,,0,0,0,,一般来说 任何时候桌子上只有5或10颗boba需要检查
Dialogue: 0,0:13:50.35,0:13:52.93,英文,,0,0,0,,So you only need to really look for that one item.
Dialogue: 0,0:13:50.35,0:13:52.93,中文,,0,0,0,,你只需要真正寻找那一个项目
Dialogue: 0,0:13:52.93,0:13:55.05,英文,,0,0,0,,There's not really that slow runtime.
Dialogue: 0,0:13:52.93,0:13:55.05,中文,,0,0,0,,运行时并不是很慢
Dialogue: 0,0:13:55.05,0:13:56.89,英文,,0,0,0,,You can just find your item very quickly.
Dialogue: 0,0:13:55.05,0:13:56.89,中文,,0,0,0,,你可以很快找到你的物品
Dialogue: 0,0:13:56.89,0:14:02.70,英文,,0,0,0,,It's very fast for them to add to the slot, because they have a specific spot to put the blob in.
Dialogue: 0,0:13:56.89,0:14:02.70,中文,,0,0,0,,他们添加到插槽的速度非常快 因为他们有一个特定的位置来放置 boba
Dialogue: 0,0:14:02.70,0:14:05.84,英文,,0,0,0,,And it's very fast for you to find it, because you don't need to look through every single item.
Dialogue: 0,0:14:02.70,0:14:05.84,中文,,0,0,0,,而且你找到它的速度也很快 因为你不需要查找每一个物品
Dialogue: 0,0:14:05.84,0:14:10.84,英文,,0,0,0,,You just need to look in that one particular section.
Dialogue: 0,0:14:05.84,0:14:10.84,中文,,0,0,0,,你只需要在那个特定的区域查找
Dialogue: 0,0:14:10.84,0:14:14.02,英文,,0,0,0,,So this is actually kind of nice.
Dialogue: 0,0:14:10.84,0:14:14.02,中文,,0,0,0,,这实际上相当不错
Dialogue: 0,0:14:14.02,0:14:18.16,英文,,0,0,0,,This is a real-world thing that seems to be doing exactly what we want it.
Dialogue: 0,0:14:14.02,0:14:18.16,中文,,0,0,0,,这是一个看起来正好符合我们想要的实际情况
Dialogue: 0,0:14:18.16,0:14:21.17,英文,,0,0,0,,Let's see if we can turn this into an actual algorithm.
Dialogue: 0,0:14:18.16,0:14:21.17,中文,,0,0,0,,看看我们能否把这变成一个真正的算法
Dialogue: 0,0:14:21.17,0:14:23.27,英文,,0,0,0,,I'm going to make a Boba counter set.
Dialogue: 0,0:14:21.17,0:14:23.27,中文,,0,0,0,,我要做一个boba计数器集
Dialogue: 0,0:14:23.27,0:14:24.75,英文,,0,0,0,,I'm going to have a wall.
Dialogue: 0,0:14:23.27,0:14:24.75,中文,,0,0,0,,我要有一堵墙
Dialogue: 0,0:14:24.75,0:14:29.27,英文,,0,0,0,,I'm going to split it into 10 bins, a 0 bin, a 1 bin, all the way up to a 9 bin.
Dialogue: 0,0:14:24.75,0:14:29.27,中文,,0,0,0,,我要把它分成10个箱子 一个0箱 一个1箱 一直到一个9箱
Dialogue: 0,0:14:29.27,0:14:33.97,英文,,0,0,0,,And when I get a number, I'll put it in the corresponding spot of the last digit.
Dialogue: 0,0:14:29.27,0:14:33.97,中文,,0,0,0,,当我得到一个数字时 我会把它放在最后一位的相应位置
Dialogue: 0,0:14:33.97,0:14:37.03,英文,,0,0,0,,So 193, that goes in the 3 bin.
Dialogue: 0,0:14:33.97,0:14:37.03,中文,,0,0,0,,193 放在3箱
Dialogue: 0,0:14:37.03,0:14:39.27,英文,,0,0,0,,100, that goes in the 0 bin.
Dialogue: 0,0:14:37.03,0:14:39.27,中文,,0,0,0,,100 放在0箱
Dialogue: 0,0:14:39.27,0:14:43.43,英文,,0,0,0,,If the wall is full, or any of these walls are full, then we're just going to get a bigger wall.
Dialogue: 0,0:14:39.27,0:14:43.43,中文,,0,0,0,,如果墙是满的 或者任何这些墙都是满的 那么我们只会得到一个更大的墙
Dialogue: 0,0:14:43.43,0:14:45.77,英文,,0,0,0,,We're going to copy everything over onto a larger wall.
Dialogue: 0,0:14:43.43,0:14:45.77,中文,,0,0,0,,我们将把所有东西复制到一个更大的墙上
Dialogue: 0,0:14:45.77,0:14:51.37,英文,,0,0,0,,We saw from the array list how that works in constant time amortized, so that's fine.
Dialogue: 0,0:14:45.77,0:14:51.37,中文,,0,0,0,,从数组列表中我们看到了摊销的常数时间是如何工作的 这很好
Dialogue: 0,0:14:51.37,0:14:55.56,英文,,0,0,0,,And for contains, we're only going to be looking in the bin corresponding to that last digit.
Dialogue: 0,0:14:51.37,0:14:55.56,中文,,0,0,0,,对于contains 我们只会查找对应于最后一位数字的箱子
Dialogue: 0,0:14:55.56,0:15:02.38,英文,,0,0,0,,If we're looking for the 193, we're only looking in the 3 bin, because we know we put it in the 3 bin.
Dialogue: 0,0:14:55.56,0:15:02.38,中文,,0,0,0,,如果我们正在寻找193 我们只会在3号箱子中查找 因为我们知道我们把它放在了3号箱子里
Dialogue: 0,0:15:02.38,0:15:04.36,英文,,0,0,0,,So we're going to check two questions again.
Dialogue: 0,0:15:02.38,0:15:04.36,中文,,0,0,0,,我们将再次检查两个问题
Dialogue: 0,0:15:04.36,0:15:05.28,英文,,0,0,0,,Is it fast to add?
Dialogue: 0,0:15:04.36,0:15:05.28,中文,,0,0,0,,添加速度快吗
Dialogue: 0,0:15:05.28,0:15:06.95,英文,,0,0,0,,Is it fast to contains?
Dialogue: 0,0:15:05.28,0:15:06.95,中文,,0,0,0,,包含速度快吗
Dialogue: 0,0:15:06.95,0:15:09.15,英文,,0,0,0,,Let's go with this.
Dialogue: 0,0:15:06.95,0:15:09.15,中文,,0,0,0,,就用这个吧
Dialogue: 0,0:15:09.15,0:15:12.95,英文,,0,0,0,,Can I add 5 quickly to this wall?
Dialogue: 0,0:15:09.15,0:15:12.95,中文,,0,0,0,,我能快速地往这个墙上加5吗
Dialogue: 0,0:15:12.95,0:15:13.53,英文,,0,0,0,,Yes.
Dialogue: 0,0:15:12.95,0:15:13.53,中文,,0,0,0,,可以
Dialogue: 0,0:15:13.53,0:15:17.05,英文,,0,0,0,,How?
Dialogue: 0,0:15:13.53,0:15:17.05,中文,,0,0,0,,怎么做
Dialogue: 0,0:15:17.05,0:15:17.78,英文,,0,0,0,,Yep.
Dialogue: 0,0:15:17.05,0:15:17.78,中文,,0,0,0,,是的
Dialogue: 0,0:15:17.78,0:15:24.53,英文,,0,0,0,,I write a 5 right here.
Dialogue: 0,0:15:17.78,0:15:24.53,中文,,0,0,0,,我在这里写一个5
Dialogue: 0,0:15:24.53,0:15:28.41,英文,,0,0,0,,Ta-da.
Dialogue: 0,0:15:24.53,0:15:28.41,中文,,0,0,0,,搞定
Dialogue: 0,0:15:28.41,0:15:29.29,英文,,0,0,0,,How about contains?
Dialogue: 0,0:15:28.41,0:15:29.29,中文,,0,0,0,,包含怎么样
Dialogue: 0,0:15:29.29,0:15:32.56,英文,,0,0,0,,Is it fast to check for containment?
Dialogue: 0,0:15:29.29,0:15:32.56,中文,,0,0,0,,检查包含的速度快吗
Dialogue: 0,0:15:32.56,0:15:35.02,英文,,0,0,0,,Is there a 605 here?
Dialogue: 0,0:15:32.56,0:15:35.02,中文,,0,0,0,,这里有一个605吗
Dialogue: 0,0:15:35.02,0:15:35.98,英文,,0,0,0,,Yes.
Dialogue: 0,0:15:35.02,0:15:35.98,中文,,0,0,0,,是的
Dialogue: 0,0:15:35.98,0:15:39.34,英文,,0,0,0,,How do you know?
Dialogue: 0,0:15:35.98,0:15:39.34,中文,,0,0,0,,你怎么知道的
Dialogue: 0,0:15:39.34,0:15:41.20,英文,,0,0,0,,You just look through the fives.
Dialogue: 0,0:15:39.34,0:15:41.20,中文,,0,0,0,,你只需查找五
Dialogue: 0,0:15:41.20,0:15:47.37,英文,,0,0,0,,Was this faster than if I had just giving you a bunch of 100 numbers just randomly?
Dialogue: 0,0:15:41.20,0:15:47.37,中文,,0,0,0,,这样比我随机给你一堆100个数字快吗
Dialogue: 0,0:15:47.37,0:15:48.27,英文,,0,0,0,,Yeah.
Dialogue: 0,0:15:47.37,0:15:48.27,中文,,0,0,0,,是的
Dialogue: 0,0:15:48.27,0:15:48.51,英文,,0,0,0,,Why?
Dialogue: 0,0:15:48.27,0:15:48.51,中文,,0,0,0,,为什么
Dialogue: 0,0:15:48.51,0:15:53.98,英文,,0,0,0,,Because you only looked at this one tiny corner of the box.
Dialogue: 0,0:15:48.51,0:15:53.98,中文,,0,0,0,,因为你只看了盒子的一个小角落
Dialogue: 0,0:15:53.98,0:15:57.11,英文,,0,0,0,,It was very fast.
Dialogue: 0,0:15:53.98,0:15:57.11,中文,,0,0,0,,速度非常快
Dialogue: 0,0:15:57.11,0:16:05.99,英文,,0,0,0,,If I exceeded this to 1,000 items and I still had these 10 boxes, would it be as fast?
Dialogue: 0,0:15:57.11,0:16:05.99,中文,,0,0,0,,如果我把这个扩展到1,000个项目 我仍然有这10个盒子 速度会一样快吗
Dialogue: 0,0:16:05.99,0:16:10.71,英文,,0,0,0,,No, but it'd still be 10 times faster than it was earlier.
Dialogue: 0,0:16:05.99,0:16:10.71,中文,,0,0,0,,不会 但它仍然比之前快10倍
Dialogue: 0,0:16:10.71,0:16:14.32,英文,,0,0,0,,So that is some advantage.
Dialogue: 0,0:16:10.71,0:16:14.32,中文,,0,0,0,,那样就有一些优势
Dialogue: 0,0:16:14.32,0:16:20.92,英文,,0,0,0,,If the numbers are random, we are going to get a runtime approximately reduced by a factor of 10.
Dialogue: 0,0:16:14.32,0:16:20.92,中文,,0,0,0,,如果数字是随机的 我们将会得到大约减少了一个数量级的运行时间
Dialogue: 0,0:16:20.92,0:16:25.03,英文,,0,0,0,,The problem with that is we do end up getting more wasted space.
Dialogue: 0,0:16:20.92,0:16:25.03,中文,,0,0,0,,问题在于我们最终会得到更多的浪费空间
Dialogue: 0,0:16:25.03,0:16:32.41,英文,,0,0,0,,If you notice here, each of these bins actually contains 12 numbers instead of 10.
Dialogue: 0,0:16:25.03,0:16:32.41,中文,,0,0,0,,如果你注意这里 每个箱子实际上包含了12个数字而不是10个
Dialogue: 0,0:16:32.41,0:16:36.43,英文,,0,0,0,,It's actually the exact same wall as the one from before with 100 items.
Dialogue: 0,0:16:32.41,0:16:36.43,中文,,0,0,0,,实际上 这面墙和之前的那面完全一样 有100个项目
Dialogue: 0,0:16:36.43,0:16:38.98,英文,,0,0,0,,So we're actually having about 10% more wasted space.
Dialogue: 0,0:16:36.43,0:16:38.98,中文,,0,0,0,,我们实际上有大约10%的更多浪费空间
Dialogue: 0,0:16:38.98,0:16:45.26,英文,,0,0,0,,Do you have a question?
Dialogue: 0,0:16:38.98,0:16:45.26,中文,,0,0,0,,你有问题吗
Dialogue: 0,0:16:45.26,0:16:47.06,英文,,0,0,0,,Yeah, how are we going to do this for Kanji?
Dialogue: 0,0:16:45.26,0:16:47.06,中文,,0,0,0,,我们要如何处理这个关于汉字的问题呢
Dialogue: 0,0:16:47.06,0:16:49.31,英文,,0,0,0,,That's a good question.
Dialogue: 0,0:16:47.06,0:16:49.31,中文,,0,0,0,,这是个好问题
Dialogue: 0,0:16:49.31,0:16:54.49,英文,,0,0,0,,Like, what if we want to deal with things that aren't numbers, like kanji?
Dialogue: 0,0:16:49.31,0:16:54.49,中文,,0,0,0,,就是说 如果我们想处理不是数字的东西 比如汉字 怎么办
Dialogue: 0,0:16:54.49,0:16:55.71,英文,,0,0,0,,What else do we have to worry about?
Dialogue: 0,0:16:54.49,0:16:55.71,中文,,0,0,0,,还有什么其他需要担心的吗
Dialogue: 0,0:16:55.71,0:17:01.31,英文,,0,0,0,,What if the number of elements gets so large that even one bin has too many items to check through all?
Dialogue: 0,0:16:55.71,0:17:01.31,中文,,0,0,0,,如果元素的数量变得非常大 以至于一个箱子里有太多项需要检查 怎么办
Dialogue: 0,0:17:01.31,0:17:02.89,英文,,0,0,0,,And what happens if the numbers aren't random?
Dialogue: 0,0:17:01.31,0:17:02.89,中文,,0,0,0,,而且如果数字不是随机的呢
Dialogue: 0,0:17:02.89,0:17:07.74,英文,,0,0,0,,What happens if every single number we pick just happens to be a number that ends in 0?
Dialogue: 0,0:17:02.89,0:17:07.74,中文,,0,0,0,,如果我们挑选的每一个数字恰好都是以0结尾的数字 会发生什么
Dialogue: 0,0:17:07.74,0:17:10.76,英文,,0,0,0,,What if we're dealing with multiples of 10?
Dialogue: 0,0:17:07.74,0:17:10.76,中文,,0,0,0,,如果我们在处理10的倍数呢
Dialogue: 0,0:17:10.76,0:17:12.98,英文,,0,0,0,,Then all of a sudden, all of our numbers are in that 0 bin.
Dialogue: 0,0:17:10.76,0:17:12.98,中文,,0,0,0,,那么突然间 我们所有的数字都在那个0区间
Dialogue: 0,0:17:12.98,0:17:16.62,英文,,0,0,0,,It doesn't help us.
Dialogue: 0,0:17:12.98,0:17:16.62,中文,,0,0,0,,这对我们没有帮助
Dialogue: 0,0:17:16.62,0:17:17.79,英文,,0,0,0,,Well.
Dialogue: 0,0:17:16.62,0:17:17.79,中文,,0,0,0,,嗯
Dialogue: 0,0:17:17.79,0:17:26.22,英文,,0,0,0,,Let's try and figure out some of these solutions step by step, and we'll eventually get to our final goal.
Dialogue: 0,0:17:17.79,0:17:26.22,中文,,0,0,0,,让我们一步一步地尝试找出一些解决方案 最终达到我们的目标
Dialogue: 0,0:17:26.22,0:17:36.22,英文,,0,0,0,,So one option here is instead of assigning the same amount of wall space per section, we're going to be dynamically increasing the size of each section.
Dialogue: 0,0:17:26.22,0:17:36.22,中文,,0,0,0,,这里的一个选项是 我们不再给每个部分分配相同的墙面空间 而是会动态增加每个部分的大小
Dialogue: 0,0:17:36.22,0:17:41.00,英文,,0,0,0,,The easy solution here is that we use Linkless.
Dialogue: 0,0:17:36.22,0:17:41.00,中文,,0,0,0,,在这里的简单解决方案是我们使用Linkless
Dialogue: 0,0:17:41.00,0:17:44.26,英文,,0,0,0,,We said earlier that Linkless
Dialogue: 0,0:17:41.00,0:17:44.26,中文,,0,0,0,,我们之前说过 Linkless
Dialogue: 0,0:17:44.26,0:17:51.94,英文,,0,0,0,,don't necessarily get used too often in industrial settings, because they tend not to be as directly useful.
Dialogue: 0,0:17:44.26,0:17:51.94,中文,,0,0,0,,在工业环境中并不经常使用 因为它们往往不那么直接有用
Dialogue: 0,0:17:51.94,0:18:00.60,英文,,0,0,0,,In this particular case, it happens to be somewhat useful, because we can just dynamically increase the size of each bin as the items get added here.
Dialogue: 0,0:17:51.94,0:18:00.60,中文,,0,0,0,,在这种特殊情况下 它可能有点用处 因为我们可以动态增加每个箱的大小 随着这些项目的添加
Dialogue: 0,0:18:00.60,0:18:04.68,英文,,0,0,0,,There are other solutions, but for this class, we'll focus on the linkless approach.
Dialogue: 0,0:18:00.60,0:18:04.68,中文,,0,0,0,,还有其他解决方案 但在本课程中 我们将专注于无链接的方法
Dialogue: 0,0:18:04.68,0:18:09.81,英文,,0,0,0,,We still do have one unit of empty space wasted if there's no elements in the bin.
Dialogue: 0,0:18:04.68,0:18:09.81,中文,,0,0,0,,如果箱中没有元素 我们仍然会有一个单位的空间浪费
Dialogue: 0,0:18:09.81,0:18:17.81,英文,,0,0,0,,But overall, this uses a lot less memory than before.
Dialogue: 0,0:18:09.81,0:18:17.81,中文,,0,0,0,,但总体而言 这比以前使用的内存要少得多
Dialogue: 0,0:18:17.81,0:18:21.32,英文,,0,0,0,,Now let's think about how we might handle a large number of items.
Dialogue: 0,0:18:17.81,0:18:21.32,中文,,0,0,0,,现在让我们考虑如何处理大量的项目
Dialogue: 0,0:18:21.32,0:18:27.36,英文,,0,0,0,,So if you just kind of do the math directly, let's say that n is the total number of items in the bins.
Dialogue: 0,0:18:21.32,0:18:27.36,中文,,0,0,0,,如果你直接做数学计算的话 假设 n 是箱子中的总项目数
Dialogue: 0,0:18:27.36,0:18:30.56,英文,,0,0,0,,In this case, or in the original case, we had 100 items.
Dialogue: 0,0:18:27.36,0:18:30.56,中文,,0,0,0,,在这种情况下 或者在最初的情况下 我们有 100 个项目
Dialogue: 0,0:18:30.56,0:18:32.18,英文,,0,0,0,,And m was the total number of bins.
Dialogue: 0,0:18:30.56,0:18:32.18,中文,,0,0,0,,而 m 则是箱子的总数
Dialogue: 0,0:18:32.18,0:18:35.09,英文,,0,0,0,,With the Boba Set example, we have 10 bins.
Dialogue: 0,0:18:32.18,0:18:35.09,中文,,0,0,0,,以珍珠奶茶套餐为例 我们有 10 个箱子
Dialogue: 0,0:18:35.09,0:18:43.56,英文,,0,0,0,,If we assume that the values are evenly distributed for now, we can say that each bin has just about n divided by m items.
Dialogue: 0,0:18:35.09,0:18:43.56,中文,,0,0,0,,如果我们暂时假设值是均匀分布的 那么我们可以说每个箱子大约有 n 除以 m 个项目
Dialogue: 0,0:18:43.56,0:18:49.30,英文,,0,0,0,,So in theta notation, the contains operator is going to run in theta of n over m time.
Dialogue: 0,0:18:43.56,0:18:49.30,中文,,0,0,0,,在 theta 表示法中 包含运算符将在 theta n 除以 m 的时间内运行
Dialogue: 0,0:18:49.30,0:18:56.12,英文,,0,0,0,,Now, if m is constant, then that just reduces to theta n. We haven't changed anything.
Dialogue: 0,0:18:49.30,0:18:56.12,中文,,0,0,0,,现在 如果 m 是常数 那么这就简化为 theta n 我们什么都没改变
Dialogue: 0,0:18:56.12,0:19:04.90,英文,,0,0,0,,So we can't just deal with a constant m. We're going to need to steadily increase m as n gets large.
Dialogue: 0,0:18:56.12,0:19:04.90,中文,,0,0,0,,我们不能只处理一个常数 m 随着 n 的增长 我们需要稳步增加 m
Dialogue: 0,0:19:04.90,0:19:10.66,英文,,0,0,0,,So as long as m grows at the same pace as n does, we should be fine.
Dialogue: 0,0:19:04.90,0:19:10.66,中文,,0,0,0,,只要 m 的增长速度与 n 相同 我们应该没问题
Dialogue: 0,0:19:10.66,0:19:16.41,英文,,0,0,0,,So we're going to need a way to categorize numbers into m groups for sufficiently large m.
Dialogue: 0,0:19:10.66,0:19:16.41,中文,,0,0,0,,我们需要一种方法将数字分成 m 组 对于足够大的 m
Dialogue: 0,0:19:16.41,0:19:27.55,英文,,0,0,0,,If you give me an m, I should be able to categorize numbers according to that size, or at least some size greater than that.
Dialogue: 0,0:19:16.41,0:19:27.55,中文,,0,0,0,,如果给我一个 m 我应该能够根据那个大小 或者至少比那个更大的一些大小 对数字进行分类
Dialogue: 0,0:19:27.55,0:19:31.56,英文,,0,0,0,,So if I just said the last digit of a number, that only works for m equals 10.
Dialogue: 0,0:19:27.55,0:19:31.56,中文,,0,0,0,,如果我只说一个数字的最后一位 那只适用于 m 等于 10
Dialogue: 0,0:19:31.56,0:19:35.90,英文,,0,0,0,,It only splits things up into 10 different sets.
Dialogue: 0,0:19:31.56,0:19:35.90,中文,,0,0,0,,它只将事物分成 10 个不同的集合
Dialogue: 0,0:19:35.90,0:19:44.10,英文,,0,0,0,,If I said m equals 100, is there a simple way I can split numbers up into 100 distinct groups?
Dialogue: 0,0:19:35.90,0:19:44.10,中文,,0,0,0,,如果我说 m 等于 100 我能简单地将数字分成 100 个不同的组吗
Dialogue: 0,0:19:44.10,0:19:45.96,英文,,0,0,0,,Any ideas?
Dialogue: 0,0:19:44.10,0:19:45.96,中文,,0,0,0,,有什么想法吗
Dialogue: 0,0:19:45.96,0:19:47.38,英文,,0,0,0,,Yes?
Dialogue: 0,0:19:45.96,0:19:47.38,中文,,0,0,0,,是吗
Dialogue: 0,0:19:47.38,0:19:51.37,英文,,0,0,0,,Yeah, last two digits.
Dialogue: 0,0:19:47.38,0:19:51.37,中文,,0,0,0,,对 最后两位数字
Dialogue: 0,0:19:51.37,0:19:52.35,英文,,0,0,0,,That's a great way to do things.
Dialogue: 0,0:19:51.37,0:19:52.35,中文,,0,0,0,,这是一个很好的做事方式
Dialogue: 0,0:19:52.35,0:19:58.31,英文,,0,0,0,,Can we extend this to arbitrarily large numbers, n equals 1,000, n equals 10,000?
Dialogue: 0,0:19:52.35,0:19:58.31,中文,,0,0,0,,我们能把这个扩展到任意大的数字上吗 比如 n 等于 1,000 n 等于 10,000
Dialogue: 0,0:19:58.31,0:19:59.85,英文,,0,0,0,,Can we extend this to n equals 64?
Dialogue: 0,0:19:58.31,0:19:59.85,中文,,0,0,0,,我们能把这个扩展到 n 等于 64 吗
Dialogue: 0,0:19:59.85,0:20:04.20,英文,,0,0,0,,How?
Dialogue: 0,0:19:59.85,0:20:04.20,中文,,0,0,0,,怎么做
Dialogue: 0,0:20:04.20,0:20:07.29,英文,,0,0,0,,How can we extend this to n equals 64?
Dialogue: 0,0:20:04.20,0:20:07.29,中文,,0,0,0,,我们怎样扩展到 n 等于 64
Dialogue: 0,0:20:07.29,0:20:08.47,英文,,0,0,0,,Any suggestions?
Dialogue: 0,0:20:07.29,0:20:08.47,中文,,0,0,0,,有什么建议吗
Dialogue: 0,0:20:08.47,0:20:10.10,英文,,0,0,0,,Yeah.
Dialogue: 0,0:20:10.10,0:20:10.92,英文,,0,0,0,,Yep.
Dialogue: 0,0:20:10.10,0:20:10.92,中文,,0,0,0,,是的
Dialogue: 0,0:20:10.92,0:20:16.97,英文,,0,0,0,,Instead of just dealing with last digit, we can actually generalize this to the modular operation.
Dialogue: 0,0:20:10.92,0:20:16.97,中文,,0,0,0,,不仅仅处理最后一位数字 我们实际上可以将其推广到模运算
Dialogue: 0,0:20:16.97,0:20:20.27,英文,,0,0,0,,Now, this is a simple solution.
Dialogue: 0,0:20:16.97,0:20:20.27,中文,,0,0,0,,现在 这是一个简单的解决方案
Dialogue: 0,0:20:20.27,0:20:25.12,英文,,0,0,0,,We can apply this to any value of m. It evenly distributes randomly generated numbers.
Dialogue: 0,0:20:20.27,0:20:25.12,中文,,0,0,0,,我们可以将其应用于任何值的 m 它可以均匀分布随机生成的数字
Dialogue: 0,0:20:25.12,0:20:30.90,英文,,0,0,0,,It's actually really cool that if you have relatively prime moduli, then you end up getting statistically independent values.
Dialogue: 0,0:20:25.12,0:20:30.90,中文,,0,0,0,,实际上 如果你有相对质数的模数 那么最终得到的值将是统计独立的
Dialogue: 0,0:20:30.90,0:20:39.07,英文,,0,0,0,,So if you keep to a prime modulus, then you actually get statistical randomness.
Dialogue: 0,0:20:30.90,0:20:39.07,中文,,0,0,0,,如果你使用一个质数模 那么你实际上会得到统计上的随机性
Dialogue: 0,0:20:39.07,0:20:44.64,英文,,0,0,0,,If you multiply m by an integer, that actually splits each bin into smaller bins independently.
Dialogue: 0,0:20:39.07,0:20:44.64,中文,,0,0,0,,如果你将m乘以一个整数 那实际上会将每个箱子分成独立的小箱子
Dialogue: 0,0:20:44.64,0:20:52.14,英文,,0,0,0,,So you can actually parallelize this if you want to go into that approach, which means that you actually have benefits for both composite moduli and prime moduli.
Dialogue: 0,0:20:44.64,0:20:52.14,中文,,0,0,0,,如果你想采用这种方法 你实际上可以并行化这个过程 这意味着你实际上对复合模数和质数模数都有好处
Dialogue: 0,0:20:52.14,0:20:55.43,英文,,0,0,0,,And they're entirely different benefits.
Dialogue: 0,0:20:52.14,0:20:55.43,中文,,0,0,0,,它们是完全不同的好处
Dialogue: 0,0:20:55.43,0:20:59.61,英文,,0,0,0,,You do have other reductions that are possible, like the number of digits in a number.
Dialogue: 0,0:20:55.43,0:20:59.61,中文,,0,0,0,,你确实可以进行其他可能的简化 比如数字中的位数
Dialogue: 0,0:20:59.61,0:21:07.86,英文,,0,0,0,,But overall, the modulus tends to be the most natural and the best reduction function we have, at least for now.
Dialogue: 0,0:20:59.61,0:21:07.86,中文,,0,0,0,,但总的来说 模数往往是我们拥有的最自然、最好的约简函数 至少目前是这样
Dialogue: 0,0:21:07.86,0:21:16.19,英文,,0,0,0,,Now, to keep this constant time contains operating, we need to make sure that m is at least a constant factor off from n at all times.
Dialogue: 0,0:21:07.86,0:21:16.19,中文,,0,0,0,,现在 为了保持这个恒定时间的包含操作 我们需要确保m始终至少与n相差一个常数因子
Dialogue: 0,0:21:16.19,0:21:23.37,英文,,0,0,0,,So the general two approaches we could do is we can increase m when the largest bin exceeds k size.
Dialogue: 0,0:21:16.19,0:21:23.37,中文,,0,0,0,,我们一般有两种方法可以做 一种是当最大的箱子超过k大小时 我们可以增加m
Dialogue: 0,0:21:23.37,0:21:25.99,英文,,0,0,0,,This tends to be too slow.
Dialogue: 0,0:21:23.37,0:21:25.99,中文,,0,0,0,,这往往太慢了
Dialogue: 0,0:21:25.99,0:21:30.26,英文,,0,0,0,,You tend to add too many bins in the end.
Dialogue: 0,0:21:25.99,0:21:30.26,中文,,0,0,0,,最后你会发现你添加了太多的箱子
Dialogue: 0,0:21:30.26,0:21:32.06,英文,,0,0,0,,So we don't do that.
Dialogue: 0,0:21:30.26,0:21:32.06,中文,,0,0,0,,我们不这样做
Dialogue: 0,0:21:32.06,0:21:37.59,英文,,0,0,0,,Instead, we're going to increase m when the average bin size exceeds k.
Dialogue: 0,0:21:32.06,0:21:37.59,中文,,0,0,0,,相反 我们会在平均箱子大小超过k时增加m
Dialogue: 0,0:21:37.59,0:21:46.32,英文,,0,0,0,,So when we add enough items that n over m exceeds k. How much do we want to increase m?
Dialogue: 0,0:21:37.59,0:21:46.32,中文,,0,0,0,,当我们添加足够的项目 使n/m超过k时 我们想增加多少m呢
Dialogue: 0,0:21:46.32,0:21:48.36,英文,,0,0,0,,Well, we have two options.
Dialogue: 0,0:21:46.32,0:21:48.36,中文,,0,0,0,,我们有两个选择
Dialogue: 0,0:21:48.36,0:21:54.24,英文,,0,0,0,,We can increase m by a constant amount every single time, or we can increase m by a factor, constant factor.
Dialogue: 0,0:21:48.36,0:21:54.24,中文,,0,0,0,,每次我们可以通过一个常数增加m 或者我们可以以一个因子 一个常数因子来增加m
Dialogue: 0,0:21:54.24,0:21:56.26,英文,,0,0,0,,So we either double it or increase by 2.
Dialogue: 0,0:21:54.24,0:21:56.26,中文,,0,0,0,,我们要么把它翻倍 要么加2
Dialogue: 0,0:21:56.26,0:21:58.36,英文,,0,0,0,,Those are kind of the two main options.
Dialogue: 0,0:21:56.26,0:21:58.36,中文,,0,0,0,,这是两个主要的选择
Dialogue: 0,0:21:58.36,0:22:03.09,英文,,0,0,0,,Show of hands, how many people want to increase arithmetically, add 2 every single time?
Dialogue: 0,0:21:58.36,0:22:03.09,中文,,0,0,0,,举手的人 有多少人想要算术增加 每次加2
Dialogue: 0,0:22:03.09,0:22:05.69,英文,,0,0,0,,How many people want to do it geometrically, multiply?
Dialogue: 0,0:22:03.09,0:22:05.69,中文,,0,0,0,,有多少人想要几何增加 乘以
Dialogue: 0,0:22:05.69,0:22:08.78,英文,,0,0,0,,Why?
Dialogue: 0,0:22:05.69,0:22:08.78,中文,,0,0,0,,为什么
Dialogue: 0,0:22:08.78,0:22:11.74,英文,,0,0,0,,We're doing it less often, yeah.
Dialogue: 0,0:22:08.78,0:22:11.74,中文,,0,0,0,,我们做得不太频繁 是的
Dialogue: 0,0:22:11.74,0:22:15.14,英文,,0,0,0,,But that does mean we're going to get more empty bins.
Dialogue: 0,0:22:11.74,0:22:15.14,中文,,0,0,0,,不过这确实意味着我们会得到更多的空箱子
Dialogue: 0,0:22:15.14,0:22:18.27,英文,,0,0,0,,But as it turns out, as we saw from ArrayList, same thing.
Dialogue: 0,0:22:15.14,0:22:18.27,中文,,0,0,0,,但事实证明 就像我们从ArrayList中看到的那样 同样的事情
Dialogue: 0,0:22:18.27,0:22:22.87,英文,,0,0,0,,Beta 1 amortized runtime if we resize multiplicatively.
Dialogue: 0,0:22:18.27,0:22:22.87,中文,,0,0,0,,如果我们以乘法方式调整大小 Beta 1的摊销运行时间
Dialogue: 0,0:22:22.87,0:22:25.21,英文,,0,0,0,,Beta n runtime if we resize arithmetically.
Dialogue: 0,0:22:22.87,0:22:25.21,中文,,0,0,0,,如果我们以算术方式调整大小 Beta n的运行时间
Dialogue: 0,0:22:25.21,0:22:29.26,英文,,0,0,0,,Yes?
Dialogue: 0,0:22:25.21,0:22:29.26,中文,,0,0,0,,是的
Dialogue: 0,0:22:29.26,0:22:32.22,英文,,0,0,0,,Huh?
Dialogue: 0,0:22:32.22,0:22:34.56,英文,,0,0,0,,Why can't we do larger operations like squaring it?
Dialogue: 0,0:22:32.22,0:22:34.56,中文,,0,0,0,,为什么我们不能执行像求平方这样的更大操作呢
Dialogue: 0,0:22:34.56,0:22:39.52,英文,,0,0,0,,I'm not sure.
Dialogue: 0,0:22:34.56,0:22:39.52,中文,,0,0,0,,我不确定
Dialogue: 0,0:22:39.52,0:22:40.56,英文,,0,0,0,,Why don't we square it?
Dialogue: 0,0:22:39.52,0:22:40.56,中文,,0,0,0,,为什么不把它平方
Dialogue: 0,0:22:40.56,0:22:41.54,英文,,0,0,0,,That's a good question.
Dialogue: 0,0:22:40.56,0:22:41.54,中文,,0,0,0,,这是个好问题
Dialogue: 0,0:22:41.54,0:22:43.10,英文,,0,0,0,,We could square it.
Dialogue: 0,0:22:41.54,0:22:43.10,中文,,0,0,0,,我们可以把它平方
Dialogue: 0,0:22:43.10,0:22:51.48,英文,,0,0,0,,If we square it, we still get the same constant amortized runtime, which is no better than the original doubling size.
Dialogue: 0,0:22:43.10,0:22:51.48,中文,,0,0,0,,如果我们把它平方 我们仍然得到相同的常摊时间 这并不比原来的加倍大小好
Dialogue: 0,0:22:51.48,0:22:55.98,英文,,0,0,0,,And if you square it repeatedly, then it just means that you get a lot more empty spaces.
Dialogue: 0,0:22:51.48,0:22:55.98,中文,,0,0,0,,而且如果你反复平方它 那就意味着你会得到更多的空白空间
Dialogue: 0,0:22:55.98,0:23:02.10,英文,,0,0,0,,The memory use increases by quite a lot, while the runtime doesn't get affected.
Dialogue: 0,0:22:55.98,0:23:02.10,中文,,0,0,0,,内存使用会增加很多 而运行时间不受影响
Dialogue: 0,0:23:02.10,0:23:05.28,英文,,0,0,0,,So there's no real reason to do more than doubling.
Dialogue: 0,0:23:02.10,0:23:05.28,中文,,0,0,0,,没有真正的理由做更多的倍增
Dialogue: 0,0:23:05.28,0:23:06.81,英文,,0,0,0,,Yeah?
Dialogue: 0,0:23:05.28,0:23:06.81,中文,,0,0,0,,是吗
Dialogue: 0,0:23:06.81,0:23:10.55,英文,,0,0,0,,So if we do this, then we should have m double every time we resize.
Dialogue: 0,0:23:06.81,0:23:10.55,中文,,0,0,0,,如果我们这样做 那么每次调整大小时我们应该有m翻倍
Dialogue: 0,0:23:10.55,0:23:18.44,英文,,0,0,0,,And in fact, that also plays in nicely to our idea that when we double the modulus, then we end up splitting each bin into separate groups.
Dialogue: 0,0:23:10.55,0:23:18.44,中文,,0,0,0,,事实上 这也很好地契合了我们的想法 当我们将模数翻倍时 我们最终将每个箱子分成单独的组
Dialogue: 0,0:23:18.44,0:23:25.98,英文,,0,0,0,,So the 0 mod 10 group splits into a 0 mod 20 and a 10 mod 20 group.
Dialogue: 0,0:23:18.44,0:23:25.98,中文,,0,0,0,,0 mod 10组分裂成0 mod 20和10 mod 20组
Dialogue: 0,0:23:25.98,0:23:28.59,英文,,0,0,0,,So let's do an example quickly.
Dialogue: 0,0:23:25.98,0:23:28.59,中文,,0,0,0,,那么让我们快速举个例子
Dialogue: 0,0:23:28.59,0:23:36.87,英文,,0,0,0,,Let's say that we have this rule where n over m needs to be greater than 1.5 for us to resize.
Dialogue: 0,0:23:28.59,0:23:36.87,中文,,0,0,0,,假设我们有这样一个规则 其中n除以m需要大于1.5 我们才会调整大小
Dialogue: 0,0:23:36.87,0:23:39.17,英文,,0,0,0,,So first, I'm going to add the number 7.
Dialogue: 0,0:23:36.87,0:23:39.17,中文,,0,0,0,,首先 我要加上数字7
Dialogue: 0,0:23:39.17,0:23:42.07,英文,,0,0,0,,And I'm going to take 7 mod 4.
Dialogue: 0,0:23:39.17,0:23:42.07,中文,,0,0,0,,然后我要取7 mod 4
Dialogue: 0,0:23:42.07,0:23:44.50,英文,,0,0,0,,What's 7 mod 4?
Dialogue: 0,0:23:42.07,0:23:44.50,中文,,0,0,0,,7 mod 4是什么
Dialogue: 0,0:23:44.50,0:23:45.12,英文,,0,0,0,,3.
Dialogue: 0,0:23:44.50,0:23:45.12,中文,,0,0,0,,3
Dialogue: 0,0:23:45.12,0:23:46.80,英文,,0,0,0,,So I put it in the 3 bin.
Dialogue: 0,0:23:45.12,0:23:46.80,中文,,0,0,0,,我把它放在3号箱里
Dialogue: 0,0:23:46.80,0:23:49.62,英文,,0,0,0,,There's only one item, so I don't resize.
Dialogue: 0,0:23:46.80,0:23:49.62,中文,,0,0,0,,只有一个项目 我不调整大小
Dialogue: 0,0:23:49.62,0:23:50.22,英文,,0,0,0,,Then I'm going to add 16.
Dialogue: 0,0:23:49.62,0:23:50.22,中文,,0,0,0,,然后我要加上16
Dialogue: 0,0:23:50.22,0:23:50.54,英文,,0,0,0,,16 mod 4 is?
Dialogue: 0,0:23:50.22,0:23:50.54,中文,,0,0,0,,16 mod 4 是多少
Dialogue: 0,0:23:50.54,0:23:50.62,英文,,0,0,0,,0.
Dialogue: 0,0:23:50.54,0:23:50.62,中文,,0,0,0,,0
Dialogue: 0,0:23:50.62,0:23:53.44,英文,,0,0,0,,So I add it in the 0 bin.
Dialogue: 0,0:23:50.62,0:23:53.44,中文,,0,0,0,,那么我把它放在0号箱子里
Dialogue: 0,0:23:53.44,0:23:53.66,英文,,0,0,0,,3 mod 4?
Dialogue: 0,0:23:53.44,0:23:53.66,中文,,0,0,0,,3 mod 4
Dialogue: 0,0:23:53.66,0:23:54.78,英文,,0,0,0,,That's 3.
Dialogue: 0,0:23:53.66,0:23:54.78,中文,,0,0,0,,那是3
Dialogue: 0,0:23:54.78,0:24:06.88,英文,,0,0,0,,So I add it in the 3 bin. 11?
Dialogue: 0,0:23:54.78,0:24:06.88,中文,,0,0,0,,那么我把它放在3号箱子里 11
Dialogue: 0,0:24:06.88,0:24:09.83,英文,,0,0,0,,That puts it in the 3 bin.
Dialogue: 0,0:24:06.88,0:24:09.83,中文,,0,0,0,,那把它放在3号箱子里
Dialogue: 0,0:24:09.83,0:24:10.77,英文,,0,0,0,,And so on and so forth.
Dialogue: 0,0:24:09.83,0:24:10.77,中文,,0,0,0,,等等等等
Dialogue: 0,0:24:10.77,0:24:12.01,英文,,0,0,0,,We add 20.
Dialogue: 0,0:24:10.77,0:24:12.01,中文,,0,0,0,,我们加20
Dialogue: 0,0:24:12.01,0:24:17.81,英文,,0,0,0,,Now, the next time we add, we're going to reach 6 items, which means we're going to need to resize.
Dialogue: 0,0:24:12.01,0:24:17.81,中文,,0,0,0,,现在 下次加法时 我们将达到6个项目 这意味着我们需要调整大小
Dialogue: 0,0:24:17.81,0:24:20.67,英文,,0,0,0,,So what we do is we add 13.
Dialogue: 0,0:24:17.81,0:24:20.67,中文,,0,0,0,,我们做的是我们加13
Dialogue: 0,0:24:20.67,0:24:24.31,英文,,0,0,0,,That goes in the 1 bin, because 13 mod 4 is 1.
Dialogue: 0,0:24:20.67,0:24:24.31,中文,,0,0,0,,那进入1号箱 因为13模4是1
Dialogue: 0,0:24:24.31,0:24:25.11,英文,,0,0,0,,And we're going to resize.
Dialogue: 0,0:24:24.31,0:24:25.11,中文,,0,0,0,,然后我们将调整大小
Dialogue: 0,0:24:25.11,0:24:26.59,英文,,0,0,0,,n over m is too big.
Dialogue: 0,0:24:25.11,0:24:26.59,中文,,0,0,0,,N除以M太大了
Dialogue: 0,0:24:26.59,0:24:29.61,英文,,0,0,0,,It's time to double.
Dialogue: 0,0:24:26.59,0:24:29.61,中文,,0,0,0,,是时候加倍了
Dialogue: 0,0:24:29.61,0:24:32.95,英文,,0,0,0,,So let's draw the result of what happens after this.
Dialogue: 0,0:24:29.61,0:24:32.95,中文,,0,0,0,,那我们就画出这之后会发生什么的结果吧
Dialogue: 0,0:24:32.95,0:24:36.46,英文,,0,0,0,,Where does the 16 go?
Dialogue: 0,0:24:32.95,0:24:36.46,中文,,0,0,0,,16 应该放在哪里
Dialogue: 0,0:24:36.46,0:24:39.08,英文,,0,0,0,,0, where does the 20 go?
Dialogue: 0,0:24:36.46,0:24:39.08,中文,,0,0,0,,0 20 应该放在哪里
Dialogue: 0,0:24:39.08,0:24:41.86,英文,,0,0,0,,4, where does the 13 go?
Dialogue: 0,0:24:39.08,0:24:41.86,中文,,0,0,0,,4 13 应该放在哪里
Dialogue: 0,0:24:41.86,0:24:44.41,英文,,0,0,0,,5, the 7?
Dialogue: 0,0:24:41.86,0:24:44.41,中文,,0,0,0,,5 7 呢
Dialogue: 0,0:24:44.41,0:24:45.97,英文,,0,0,0,,7, the 3?
Dialogue: 0,0:24:44.41,0:24:45.97,中文,,0,0,0,,7 3 呢
Dialogue: 0,0:24:45.97,0:24:47.95,英文,,0,0,0,,3, and the 11?
Dialogue: 0,0:24:45.97,0:24:47.95,中文,,0,0,0,,3 还有11
Dialogue: 0,0:24:47.95,0:24:49.25,英文,,0,0,0,,3.
Dialogue: 0,0:24:47.95,0:24:49.25,中文,,0,0,0,,3
Dialogue: 0,0:24:49.25,0:24:53.45,英文,,0,0,0,,So if we do this, then this is where all the numbers end up going.
Dialogue: 0,0:24:49.25,0:24:53.45,中文,,0,0,0,,如果我们这样做 那么所有数字最终都会到这里
Dialogue: 0,0:24:53.45,0:24:59.11,英文,,0,0,0,,So after we do the resize, this is our table.
Dialogue: 0,0:24:53.45,0:24:59.11,中文,,0,0,0,,在我们调整大小之后 这就是我们的表
Dialogue: 0,0:24:59.11,0:25:02.39,英文,,0,0,0,,Now, we might call this the dynamic array of lists set.
Dialogue: 0,0:24:59.11,0:25:02.39,中文,,0,0,0,,现在 我们可能会称其为动态数组列表集合
Dialogue: 0,0:25:02.39,0:25:06.85,英文,,0,0,0,,It's not as intuitive as our original idea, but the core idea stayed the same, largely.
Dialogue: 0,0:25:02.39,0:25:06.85,中文,,0,0,0,,虽然不像我们最初的想法直观 但核心思想基本相同
Dialogue: 0,0:25:06.85,0:25:13.11,英文,,0,0,0,,If we have n items that are evenly distributed, the length of each list is going to be about n over m, which is constant on average.
Dialogue: 0,0:25:06.85,0:25:13.11,中文,,0,0,0,,如果我们有N个均匀分布的项目 每个列表的长度将约为N/M 这在平均值上是常数
Dialogue: 0,0:25:13.11,0:25:17.95,英文,,0,0,0,,It's less than k. So that means all of our operations are going to be constant on average.
Dialogue: 0,0:25:13.11,0:25:17.95,中文,,0,0,0,,小于 k 这意味着我们所有的操作平均都是常数时间
Dialogue: 0,0:25:17.95,0:25:20.65,英文,,0,0,0,,We'll have to think more carefully about the runtime a bit later.
Dialogue: 0,0:25:17.95,0:25:20.65,中文,,0,0,0,,我们稍后需要仔细考虑运行时间
Dialogue: 0,0:25:20.65,0:25:23.83,英文,,0,0,0,,But for now, this looks like a reasonable approach to do this.
Dialogue: 0,0:25:20.65,0:25:23.83,中文,,0,0,0,,但目前看来 这似乎是一个合理的方法
Dialogue: 0,0:25:23.83,0:25:36.24,英文,,0,0,0,,We managed to turn our writing on the wall set, where I'm just writing something down on a wall, and turn it into something that actually looks like it might be constant time asymptotically.
Dialogue: 0,0:25:23.83,0:25:36.24,中文,,0,0,0,,我们成功地将写在墙上的东西 我只是在墙上写下一些东西 变成了一些在渐近意义上看起来可能是常数时间的东西
Dialogue: 0,0:25:36.24,0:25:41.10,英文,,0,0,0,,Now, there was one question over there about what happens when we want to deal with Kanji.
Dialogue: 0,0:25:36.24,0:25:41.10,中文,,0,0,0,,现在 关于处理汉字的问题 那边有一个问题
Dialogue: 0,0:25:41.10,0:25:42.60,英文,,0,0,0,,Let's talk about this.
Dialogue: 0,0:25:41.10,0:25:42.60,中文,,0,0,0,,让我们谈谈这个
Dialogue: 0,0:25:42.60,0:25:51.82,英文,,0,0,0,,Let's figure out how to store strings of lowercase characters first, specifically, like, English characters.
Dialogue: 0,0:25:42.60,0:25:51.82,中文,,0,0,0,,首先 让我们弄清楚如何存储小写字符的字符串 具体来说 像英文字符一样
Dialogue: 0,0:25:51.82,0:25:56.52,英文,,0,0,0,,So suppose I want to add the word cat.
Dialogue: 0,0:25:51.82,0:25:56.52,中文,,0,0,0,,假设我想添加单词猫
Dialogue: 0,0:25:56.52,0:26:04.29,英文,,0,0,0,,So one key question I'm going to deal with is, how do I decide what the cat bucket is?
Dialogue: 0,0:25:56.52,0:26:04.29,中文,,0,0,0,,我要解决的一个关键问题是 我如何确定猫桶是什么
Dialogue: 0,0:26:04.29,0:26:08.13,英文,,0,0,0,,What's the last digit of cat?
Dialogue: 0,0:26:04.29,0:26:08.13,中文,,0,0,0,,猫的最后一位数字是多少
Dialogue: 0,0:26:08.13,0:26:15.91,英文,,0,0,0,,Well, one option is we can use the first letter of the word as the alphabetical position.
Dialogue: 0,0:26:08.13,0:26:15.91,中文,,0,0,0,,一种选择是我们可以使用单词的第一个字母作为字母位置
Dialogue: 0,0:26:15.91,0:26:19.30,英文,,0,0,0,,So A is 0, B is 1, C is 2, up to Z equals 25.
Dialogue: 0,0:26:15.91,0:26:19.30,中文,,0,0,0,,a是0 b是1 c是2 一直到Z等于25
Dialogue: 0,0:26:19.30,0:26:21.42,英文,,0,0,0,,So cat goes into bucket 2.
Dialogue: 0,0:26:19.30,0:26:21.42,中文,,0,0,0,,猫进入第2个桶
Dialogue: 0,0:26:21.42,0:26:25.02,英文,,0,0,0,,This is going to force us to start with 26 buckets.
Dialogue: 0,0:26:21.42,0:26:25.02,中文,,0,0,0,,这将迫使我们从26个桶开始
Dialogue: 0,0:26:25.02,0:26:28.44,英文,,0,0,0,,After resize, we might start looking at the first two letters.
Dialogue: 0,0:26:25.02,0:26:28.44,中文,,0,0,0,,调整大小后 我们可能会开始查看前两个字母
Dialogue: 0,0:26:28.44,0:26:35.77,英文,,0,0,0,,So AA goes to 0, AB goes to 1, CA happens to be bucket 52.
Dialogue: 0,0:26:28.44,0:26:35.77,中文,,0,0,0,,aa变成了0 ab变成了1 ca碰巧是桶52
Dialogue: 0,0:26:35.77,0:26:51.82,英文,,0,0,0,,Are there any issues with this approach that you can think of?
Dialogue: 0,0:26:35.77,0:26:51.82,中文,,0,0,0,,你能想到这种方法存在什么问题吗
Dialogue: 0,0:26:51.82,0:26:57.78,英文,,0,0,0,,So what issues do you think we might face if we have this approach?
Dialogue: 0,0:26:51.82,0:26:57.78,中文,,0,0,0,,那么你认为如果我们采用这种方法 可能会面临什么问题
Dialogue: 0,0:26:57.78,0:26:58.58,英文,,0,0,0,,Any suggestions?
Dialogue: 0,0:26:57.78,0:26:58.58,中文,,0,0,0,,有什么建议吗
Dialogue: 0,0:26:58.58,0:27:01.66,英文,,0,0,0,,Yeah?
Dialogue: 0,0:26:58.58,0:27:01.66,中文,,0,0,0,,是的
Dialogue: 0,0:27:01.66,0:27:04.00,英文,,0,0,0,,Huh?
Dialogue: 0,0:27:04.00,0:27:06.10,英文,,0,0,0,,We'll only be using a constant number of buckets.
Dialogue: 0,0:27:04.00,0:27:06.10,中文,,0,0,0,,我们只会使用固定数量的桶
Dialogue: 0,0:27:06.10,0:27:08.60,英文,,0,0,0,,Well, that's not necessarily true.
Dialogue: 0,0:27:06.10,0:27:08.60,中文,,0,0,0,,这并不一定是真的
Dialogue: 0,0:27:08.60,0:27:12.37,英文,,0,0,0,,If we add a bunch of words, then we might use a bunch of buckets.
Dialogue: 0,0:27:08.60,0:27:12.37,中文,,0,0,0,,如果我们添加了很多单词 那么我们可能会使用很多桶
Dialogue: 0,0:27:12.37,0:27:21.80,英文,,0,0,0,,I'm sure the dictionary has one word for every single pair of letters you start with, if you include things like zysics.
Dialogue: 0,0:27:12.37,0:27:21.80,中文,,0,0,0,,我敢肯定字典中对于你从任意一对字母开始的每一个单词 都会有一个对应的 如果你包括像物理这样的东西的话
Dialogue: 0,0:27:21.80,0:27:26.78,英文,,0,0,0,,Anything?
Dialogue: 0,0:27:21.80,0:27:26.78,中文,,0,0,0,,什么
Dialogue: 0,0:27:26.78,0:27:33.65,英文,,0,0,0,,Yep, this isn't a random distribution.
Dialogue: 0,0:27:26.78,0:27:33.65,中文,,0,0,0,,这不是一个随机分布
Dialogue: 0,0:27:33.65,0:27:37.60,英文,,0,0,0,,S is the most common first letter in the English language.
Dialogue: 0,0:27:33.65,0:27:37.60,中文,,0,0,0,,S是英语中最常见的首字母
Dialogue: 0,0:27:37.60,0:27:39.66,英文,,0,0,0,,E is the most common letter in general.
Dialogue: 0,0:27:37.60,0:27:39.66,中文,,0,0,0,,E是一般情况下最常见的字母
Dialogue: 0,0:27:39.66,0:27:40.90,英文,,0,0,0,,So we're going to have that issue.
Dialogue: 0,0:27:39.66,0:27:40.90,中文,,0,0,0,,我们会遇到这个问题
Dialogue: 0,0:27:40.90,0:27:45.16,英文,,0,0,0,,Yeah?
Dialogue: 0,0:27:40.90,0:27:45.16,中文,,0,0,0,,是的
Dialogue: 0,0:27:45.16,0:27:48.05,英文,,0,0,0,,Single-letter words.
Dialogue: 0,0:27:45.16,0:27:48.05,中文,,0,0,0,,单字词
Dialogue: 0,0:27:48.05,0:27:55.21,英文,,0,0,0,,Yeah, that ends up having the exact same as AA.
Dialogue: 0,0:27:48.05,0:27:55.21,中文,,0,0,0,,最终会与aa完全相同
Dialogue: 0,0:27:55.21,0:28:00.94,英文,,0,0,0,,Can't be placed after resize.
Dialogue: 0,0:27:55.21,0:28:00.94,中文,,0,0,0,,不能放在调整大小之后
Dialogue: 0,0:28:00.94,0:28:04.67,英文,,0,0,0,,Anything else?
Dialogue: 0,0:28:00.94,0:28:04.67,中文,,0,0,0,,还有别的吗
Dialogue: 0,0:28:04.67,0:28:14.39,英文,,0,0,0,,Yeah?
Dialogue: 0,0:28:04.67,0:28:14.39,中文,,0,0,0,,是吗
Dialogue: 0,0:28:14.39,0:28:15.51,英文,,0,0,0,,Yeah, this is in general.
Dialogue: 0,0:28:14.39,0:28:15.51,中文,,0,0,0,,总的来说是这样的
Dialogue: 0,0:28:15.51,0:28:26.66,英文,,0,0,0,,It extends to as resizes grow.
Dialogue: 0,0:28:15.51,0:28:26.66,中文,,0,0,0,,随着尺寸的增长 它会扩展
Dialogue: 0,0:28:26.66,0:28:34.42,英文,,0,0,0,,Yeah?
Dialogue: 0,0:28:26.66,0:28:34.42,中文,,0,0,0,,是吗
Dialogue: 0,0:28:34.42,0:28:36.08,英文,,0,0,0,,Yeah.
Dialogue: 0,0:28:34.42,0:28:36.08,中文,,0,0,0,,是的
Dialogue: 0,0:28:36.08,0:28:37.34,英文,,0,0,0,,Yeah, it's part of the random distribution.
Dialogue: 0,0:28:36.08,0:28:37.34,中文,,0,0,0,,它是随机分布的一部分
Dialogue: 0,0:28:37.34,0:28:40.10,英文,,0,0,0,,There are not many words that start with AA.
Dialogue: 0,0:28:37.34,0:28:40.10,中文,,0,0,0,,aa开头的词并不多
Dialogue: 0,0:28:40.10,0:28:41.86,英文,,0,0,0,,I guess aardvark?
Dialogue: 0,0:28:40.10,0:28:41.86,中文,,0,0,0,,我猜是土豚
Dialogue: 0,0:28:41.86,0:28:42.88,英文,,0,0,0,,That's about it, right?
Dialogue: 0,0:28:41.86,0:28:42.88,中文,,0,0,0,,就是这样吧 对吧
Dialogue: 0,0:28:42.88,0:28:44.06,英文,,0,0,0,,Yeah.
Dialogue: 0,0:28:42.88,0:28:44.06,中文,,0,0,0,,是的
Dialogue: 0,0:28:44.06,0:28:49.38,英文,,0,0,0,,So we're going to get a lot of common ones and not a very lot of uncommon ones.
Dialogue: 0,0:28:44.06,0:28:49.38,中文,,0,0,0,,我们会得到很多常见的 而不会得到很多不常见的
Dialogue: 0,0:28:49.38,0:28:51.58,英文,,0,0,0,,Here were my takes.
Dialogue: 0,0:28:49.38,0:28:51.58,中文,,0,0,0,,这是我的看法
Dialogue: 0,0:28:51.58,0:28:53.62,英文,,0,0,0,,Where do you put the short strings after the resize?
Dialogue: 0,0:28:51.58,0:28:53.62,中文,,0,0,0,,在调整大小之后 你把短字符串放在哪里
Dialogue: 0,0:28:53.62,0:28:56.04,英文,,0,0,0,,You can probably fix that.
Dialogue: 0,0:28:53.62,0:28:56.04,中文,,0,0,0,,你可能可以解决这个问题
Dialogue: 0,0:28:56.04,0:28:59.76,英文,,0,0,0,,The randomness thing is an issue I didn't actually write down here.
Dialogue: 0,0:28:56.04,0:28:59.76,中文,,0,0,0,,随机性的问题是我实际上没有在这里写下来的问题
Dialogue: 0,0:28:59.76,0:29:03.44,英文,,0,0,0,,The big issue that I personally felt
Dialogue: 0,0:28:59.76,0:29:03.44,中文,,0,0,0,,我个人感觉到的大问题
Dialogue: 0,0:29:03.44,0:29:16.48,英文,,0,0,0,,LLM, Fine-tuning, Llama,
Dialogue: 0,0:29:03.44,0:29:16.48,中文,,0,0,0,,LLM 微调 Llama
Dialogue: 0,0:29:16.48,0:29:19.92,英文,,0,0,0,,to affect what our resize numbers should be.
Dialogue: 0,0:29:16.48,0:29:19.92,中文,,0,0,0,,影响我们调整大小数字应该是什么
Dialogue: 0,0:29:19.92,0:29:26.51,英文,,0,0,0,,I want to have a resize amount that's independent of the object because I want to make this set work with any object.
Dialogue: 0,0:29:19.92,0:29:26.51,中文,,0,0,0,,我想要一个与对象无关的调整量 因为我想让这个集合适用于任何对象
Dialogue: 0,0:29:26.51,0:29:31.13,英文,,0,0,0,,I don't want every single object type to define to me how it should resize.
Dialogue: 0,0:29:26.51,0:29:31.13,中文,,0,0,0,,我不想让每种对象类型都告诉我它应该如何调整大小
Dialogue: 0,0:29:31.13,0:29:39.64,英文,,0,0,0,,Intuitively, the resizing feels like it should be a set operation, not a string operation.
Dialogue: 0,0:29:31.13,0:29:39.64,中文,,0,0,0,,直觉上 调整大小感觉应该是一种集合操作 而不是一种字符串操作
Dialogue: 0,0:29:39.64,0:29:46.30,英文,,0,0,0,,So the big problem with this previous approach was that the set itself was responsible for figuring out how to categorize strings.
Dialogue: 0,0:29:39.64,0:29:46.30,中文,,0,0,0,,这个先前方法的一个大问题是 集合本身负责弄清楚如何对字符串进行分类
Dialogue: 0,0:29:46.30,0:29:55.47,英文,,0,0,0,,When we said the strings belonged in buckets, according to this A equals 0, C equals 25, that was a categorization scheme, and we defined it as a set doing that.
Dialogue: 0,0:29:46.30,0:29:55.47,中文,,0,0,0,,当我们说字符串属于桶时 根据这个 a 等于 0 c 等于 25 的方案 那是一种分类方案 我们将其定义为集合执行的操作
Dialogue: 0,0:29:55.47,0:29:57.11,英文,,0,0,0,,That's not really the set's job.
Dialogue: 0,0:29:55.47,0:29:57.11,中文,,0,0,0,,这并不是集合的真正工作
Dialogue: 0,0:29:57.11,0:30:05.91,英文,,0,0,0,,The set's job isn't to know about every single object in existence, including the ones that you have yet to write.
Dialogue: 0,0:29:57.11,0:30:05.91,中文,,0,0,0,,集合的任务不是要了解每一个存在的对象 包括你尚未编写的对象
Dialogue: 0,0:30:05.91,0:30:15.81,英文,,0,0,0,, the sets job is just to Assign things its category, basedon what that thing tells it. So, string shouldn't be deciding when setresizes.
Dialogue: 0,0:30:05.91,0:30:15.81,中文,,0,0,0,,集合的工作只是根据事物告诉它的内容来分配事物的类别  因此 字符串不应该决定何时调整大小
Dialogue: 0,0:30:15.81,0:30:23.81,英文,,0,0,0,,But section be deciding what category of the string should gointo. So, the solution we are going to have here. ls going to be kind offunny.
Dialogue: 0,0:30:15.81,0:30:23.81,中文,,0,0,0,,但部分是决定字符串应该属于哪个类别  我们将在这里找到解决方案
Dialogue: 0,0:30:23.81,0:30:29.81,英文,,0,0,0,,We're going to set up the set to work, only on integers.
Dialogue: 0,0:30:23.81,0:30:29.81,中文,,0,0,0,,我会很有趣  我们将设置该集合仅适用于整数
Dialogue: 0,0:30:29.81,0:30:36.71,英文,,0,0,0,,Because that was the most flexible option, we were able to do any arbitrary mod, so we can pick the set to mod for any number we want.
Dialogue: 0,0:30:29.81,0:30:36.71,中文,,0,0,0,,因为那是最灵活的选择 我们能够进行任意的模数 我们可以选择集合进行任何我们想要的数字的模
Dialogue: 0,0:30:36.71,0:30:43.95,英文,,0,0,0,,And we're going to define methods in every single class in existence that will convert that object into an integer.
Dialogue: 0,0:30:36.71,0:30:43.95,中文,,0,0,0,,我们将在每个现有的类中定义方法 将该对象转换为整数
Dialogue: 0,0:30:43.95,0:30:50.15,英文,,0,0,0,,So for strings, we're going to figure out a method that converts a string into an integer and store the string in the bin corresponding to f.
Dialogue: 0,0:30:43.95,0:30:50.15,中文,,0,0,0,,对于字符串 我们要想出一种方法 将字符串转换为整数并将字符串存储在与 f 相对应的箱子中
Dialogue: 0,0:30:50.15,0:30:53.45,英文,,0,0,0,,The strings get to decide how they want to get categorized.
Dialogue: 0,0:30:50.15,0:30:53.45,中文,,0,0,0,,字符串可以决定它们想要被分类为什么样的
Dialogue: 0,0:30:53.45,0:30:55.79,英文,,0,0,0,,The set gets to decide how it's resizing.
Dialogue: 0,0:30:53.45,0:30:55.79,中文,,0,0,0,,集合决定了它的调整方式
Dialogue: 0,0:30:55.79,0:30:58.61,英文,,0,0,0,,Everyone's happy.
Dialogue: 0,0:30:55.79,0:30:58.61,中文,,0,0,0,,每个人都很开心
Dialogue: 0,0:30:58.61,0:31:00.79,英文,,0,0,0,,Now, that adds a new question.
Dialogue: 0,0:30:58.61,0:31:00.79,中文,,0,0,0,,现在 这又增加了一个新问题
Dialogue: 0,0:31:00.79,0:31:04.09,英文,,0,0,0,,How do I convert cat into a number?
Dialogue: 0,0:31:00.79,0:31:04.09,中文,,0,0,0,,如何将猫转换成一个数字呢
Dialogue: 0,0:31:04.09,0:31:06.15,英文,,0,0,0,,For now, let's assume we're dealing with lowercase letters.
Dialogue: 0,0:31:04.09,0:31:06.15,中文,,0,0,0,,暂时假设我们正在处理小写字母
Dialogue: 0,0:31:06.15,0:31:09.02,英文,,0,0,0,,Anyone have any ideas?
Dialogue: 0,0:31:06.15,0:31:09.02,中文,,0,0,0,,有人有什么想法吗
Dialogue: 0,0:31:09.02,0:31:09.88,英文,,0,0,0,,Huh?
Dialogue: 0,0:31:09.02,0:31:09.88,中文,,0,0,0,,啥
Dialogue: 0,0:31:09.88,0:31:10.82,英文,,0,0,0,,ASCII.
Dialogue: 0,0:31:09.88,0:31:10.82,中文,,0,0,0,,ASCII
Dialogue: 0,0:31:10.82,0:31:12.06,英文,,0,0,0,,Yes, we'll do that later.
Dialogue: 0,0:31:10.82,0:31:12.06,中文,,0,0,0,,是的 我们稍后会这样做
Dialogue: 0,0:31:12.06,0:31:21.50,英文,,0,0,0,,Anyone have any other ideas that I haven't read ahead?
Dialogue: 0,0:31:12.06,0:31:21.50,中文,,0,0,0,,有人有我没读过的其他想法吗
Dialogue: 0,0:31:21.50,0:31:25.04,英文,,0,0,0,,Yeah?
Dialogue: 0,0:31:25.04,0:31:38.45,英文,,0,0,0,,Yeah, we can sum up the position of each letter.
Dialogue: 0,0:31:25.04,0:31:38.45,中文,,0,0,0,,是的 我们可以总结每个字母的位置
Dialogue: 0,0:31:38.45,0:31:40.73,英文,,0,0,0,,ASCII was written.
Dialogue: 0,0:31:38.45,0:31:40.73,中文,,0,0,0,,ASCII被写下了
Dialogue: 0,0:31:40.73,0:31:48.15,英文,,0,0,0,,Any other options?
Dialogue: 0,0:31:40.73,0:31:48.15,中文,,0,0,0,,还有其他选择吗
Dialogue: 0,0:31:48.15,0:31:48.95,英文,,0,0,0,,Any other suggestions?
Dialogue: 0,0:31:48.15,0:31:48.95,中文,,0,0,0,,还有其他建议吗
Dialogue: 0,0:31:48.95,0:31:50.95,英文,,0,0,0,,Yeah?
Dialogue: 0,0:31:50.95,0:31:51.73,英文,,0,0,0,,Base 26?
Dialogue: 0,0:31:50.95,0:31:51.73,中文,,0,0,0,,26进制
Dialogue: 0,0:31:51.73,0:31:52.97,英文,,0,0,0,,Yeah.
Dialogue: 0,0:31:51.73,0:31:52.97,中文,,0,0,0,,嗯
Dialogue: 0,0:31:52.97,0:31:56.62,英文,,0,0,0,,We can use the base 26 thing that we saw earlier.
Dialogue: 0,0:31:52.97,0:31:56.62,中文,,0,0,0,,我们可以使用之前看到的26进制的东西
Dialogue: 0,0:31:56.62,0:31:58.48,英文,,0,0,0,,What else?
Dialogue: 0,0:31:56.62,0:31:58.48,中文,,0,0,0,,还有什么吗
Dialogue: 0,0:31:58.48,0:32:00.56,英文,,0,0,0,,Any answers?
Dialogue: 0,0:31:58.48,0:32:00.56,中文,,0,0,0,,有答案吗
Dialogue: 0,0:32:00.56,0:32:03.08,英文,,0,0,0,,Doesn't necessarily have to be a good option.
Dialogue: 0,0:32:00.56,0:32:03.08,中文,,0,0,0,,不一定要是一个好的选择
Dialogue: 0,0:32:03.08,0:32:05.54,英文,,0,0,0,,How do you convert CAT into a number?
Dialogue: 0,0:32:03.08,0:32:05.54,中文,,0,0,0,,如何将cat转换为数字
Dialogue: 0,0:32:05.54,0:32:11.65,英文,,0,0,0,,Yeah?
Dialogue: 0,0:32:05.54,0:32:11.65,中文,,0,0,0,,是吗
Dialogue: 0,0:32:11.65,0:32:18.81,英文,,0,0,0,,Wait, what did you say?
Dialogue: 0,0:32:11.65,0:32:18.81,中文,,0,0,0,,等等 你说什么
Dialogue: 0,0:32:18.81,0:32:20.35,英文,,0,0,0,,Yeah, ASCII slash Unicode.
Dialogue: 0,0:32:18.81,0:32:20.35,中文,,0,0,0,,是的 ASCII斜杠Unicode
Dialogue: 0,0:32:20.35,0:32:21.95,英文,,0,0,0,,That's actually reasonable.
Dialogue: 0,0:32:20.35,0:32:21.95,中文,,0,0,0,,其实这是合理的
Dialogue: 0,0:32:21.95,0:32:23.30,英文,,0,0,0,,There's actually one more.
Dialogue: 0,0:32:21.95,0:32:23.30,中文,,0,0,0,,实际上还有一个
Dialogue: 0,0:32:23.30,0:32:26.18,英文,,0,0,0,,I was pointing to you, actually.
Dialogue: 0,0:32:23.30,0:32:26.18,中文,,0,0,0,,我其实是在指向你
Dialogue: 0,0:32:26.18,0:32:30.24,英文,,0,0,0,,Yeah, number of characters.
Dialogue: 0,0:32:26.18,0:32:30.24,中文,,0,0,0,,是的 字符数
Dialogue: 0,0:32:30.24,0:32:32.76,英文,,0,0,0,,Yeah, there's a lot of options.
Dialogue: 0,0:32:30.24,0:32:32.76,中文,,0,0,0,,选项很多
Dialogue: 0,0:32:32.76,0:32:36.14,英文,,0,0,0,,Let's try and figure out which ones.
Dialogue: 0,0:32:32.76,0:32:36.14,中文,,0,0,0,,我们试着弄清楚哪些是哪些
Dialogue: 0,0:32:36.14,0:32:38.43,英文,,0,0,0,,Let's try and pick one of these.
Dialogue: 0,0:32:36.14,0:32:38.43,中文,,0,0,0,,我们试着从这些中挑选一个
Dialogue: 0,0:32:38.43,0:32:41.07,英文,,0,0,0,,Now, ideally, we want to evenly distribute strings.
Dialogue: 0,0:32:38.43,0:32:41.07,中文,,0,0,0,,现在 理想情况下 我们希望均匀分布字符串
Dialogue: 0,0:32:41.07,0:32:46.61,英文,,0,0,0,,We don't want any int to have significantly more associated strings than average.
Dialogue: 0,0:32:41.07,0:32:46.61,中文,,0,0,0,,我们不希望任何整数具有比平均值更多的关联字符串
Dialogue: 0,0:32:46.61,0:32:49.53,英文,,0,0,0,,Generally speaking, there's a lot of six five-letter words.
Dialogue: 0,0:32:46.61,0:32:49.53,中文,,0,0,0,,一般来说 有很多六个字母的单词
Dialogue: 0,0:32:49.53,0:32:52.49,英文,,0,0,0,,There are not many 37-letter words.
Dialogue: 0,0:32:49.53,0:32:52.49,中文,,0,0,0,,37个字母的单词不多
Dialogue: 0,0:32:52.49,0:32:55.39,英文,,0,0,0,,So we probably don't want to deal with just the number of characters.
Dialogue: 0,0:32:52.49,0:32:55.39,中文,,0,0,0,,我们可能不只是处理字符数
Dialogue: 0,0:32:55.39,0:32:58.65,英文,,0,0,0,,Summing up each letter is similarly not going to be as good.
Dialogue: 0,0:32:55.39,0:32:58.65,中文,,0,0,0,,将每个字母求和也不会那么好
Dialogue: 0,0:32:58.65,0:33:08.65,英文,,0,0,0,,We generally do not have words that have a sum of 5,436, because most words do not have 100 characters in them.
Dialogue: 0,0:32:58.65,0:33:08.65,中文,,0,0,0,,通常我们没有总字符数为5,436的单词 因为大多数单词不超过100个字符
Dialogue: 0,0:33:08.65,0:33:15.37,英文,,0,0,0,,So those two are not going to be particularly good at evenly distributing the strings.
Dialogue: 0,0:33:08.65,0:33:15.37,中文,,0,0,0,,这两个在均匀分布字符串方面表现不佳
Dialogue: 0,0:33:15.37,0:33:20.53,英文,,0,0,0,,But let's try treating cat as a base 26 number, see what that does.
Dialogue: 0,0:33:15.37,0:33:20.53,中文,,0,0,0,,但让我们尝试将cat视为基数为26的数字 看看会发生什么
Dialogue: 0,0:33:20.53,0:33:21.61,英文,,0,0,0,,So I'm going to do this.
Dialogue: 0,0:33:20.53,0:33:21.61,中文,,0,0,0,,我要这样做
Dialogue: 0,0:33:21.61,0:33:24.99,英文,,0,0,0,,Every single digit, I'm going to multiply them by a power of 26.
Dialogue: 0,0:33:21.61,0:33:24.99,中文,,0,0,0,,每一位数字 我都要乘以26的幂
Dialogue: 0,0:33:24.99,0:33:34.53,英文,,0,0,0,,So cat is going to be converted into c, which is 3 times 26 squared, plus 1 times 26 to the first, plus 20 times 26 to the 0, which is 2,074.
Dialogue: 0,0:33:24.99,0:33:34.53,中文,,0,0,0,,cat将被转换为c 即3乘以26的平方 再加上1乘以26的一次方 再加上20乘以26的0次方 即2,074
Dialogue: 0,0:33:34.53,0:33:39.22,英文,,0,0,0,,Now, why did I pick this particular pattern?
Dialogue: 0,0:33:34.53,0:33:39.22,中文,,0,0,0,,现在 为什么我选择了这个特定的模式呢
Dialogue: 0,0:33:39.22,0:33:48.09,英文,,0,0,0,,Well, if you look at how numbers are represented in decimal, we have the digits 0 through 9.
Dialogue: 0,0:33:39.22,0:33:48.09,中文,,0,0,0,,如果你看一下十进制中数字的表示 我们有0到9的数字
Dialogue: 0,0:33:48.09,0:33:51.45,英文,,0,0,0,,And when you want numbers larger than 9, you just use sequences of digits.
Dialogue: 0,0:33:48.09,0:33:51.45,中文,,0,0,0,,当你想要比9大的数字时 只需使用数字的序列
Dialogue: 0,0:33:51.45,0:34:00.69,英文,,0,0,0,,So 7, 0, 9, 1, that actually means 7 times 10 cubed plus 0 times 10 squared plus 9 times 10 to the first times 1 times 10 to the 0.
Dialogue: 0,0:33:51.45,0:34:00.69,中文,,0,0,0,,7、0、9、1 实际上意味着7乘以10的3次方加上0乘以10的2次方加上9乘以10的1次方再乘以1乘以10的0次方
Dialogue: 0,0:34:00.69,0:34:08.01,英文,,0,0,0,,When we write 7, 0, 9, 1, we're meaning this number on the right.
Dialogue: 0,0:34:00.69,0:34:08.01,中文,,0,0,0,,当我们写7、0、9、1时 我们指的是右边的这个数字
Dialogue: 0,0:34:08.01,0:34:12.28,英文,,0,0,0,,The system for strings is basically the same, but with letters instead of numbers.
Dialogue: 0,0:34:08.01,0:34:12.28,中文,,0,0,0,,字符串的系统基本上是相同的 但是用字母而不是数字
Dialogue: 0,0:34:12.28,0:34:17.52,英文,,0,0,0,,So in decimal, the only difference is in decimal, 0, 0, 0 is the same as 0.
Dialogue: 0,0:34:12.28,0:34:17.52,中文,,0,0,0,,在十进制中 唯一的区别在于十进制中 0、0、0与0是相同的
Dialogue: 0,0:34:17.52,0:34:20.98,英文,,0,0,0,,But with strings, AAA is different from A alone.
Dialogue: 0,0:34:17.52,0:34:20.98,中文,,0,0,0,,但是对于字符串 aaa与单独的a是不同的
Dialogue: 0,0:34:20.98,0:34:23.36,英文,,0,0,0,,So to do with this, we just don't have a 0 in our system.
Dialogue: 0,0:34:20.98,0:34:23.36,中文,,0,0,0,,处理这个问题 我们的系统中就没有0
Dialogue: 0,0:34:23.36,0:34:25.84,英文,,0,0,0,,We just say A equals 1, not 0.
Dialogue: 0,0:34:23.36,0:34:25.84,中文,,0,0,0,,我们只说a等于1 不是0
Dialogue: 0,0:34:25.84,0:34:32.83,英文,,0,0,0,,Using this, we're able to assign a unique string into every single number.
Dialogue: 0,0:34:25.84,0:34:32.83,中文,,0,0,0,,利用这个 我们能够为每个数字分配一个唯一的字符串
Dialogue: 0,0:34:32.83,0:34:38.67,英文,,0,0,0,,So to test this, what happens if we try to convert the word b into a decimal number?
Dialogue: 0,0:34:32.83,0:34:38.67,中文,,0,0,0,,那么 为了测试这个 如果我们尝试将单词b转换成十进制数会发生什么呢
Dialogue: 0,0:34:38.67,0:34:45.40,英文,,0,0,0,,Well, if we do the math, we end up getting 2 times 26 squared plus 5 times 26 plus 5 times 1.
Dialogue: 0,0:34:38.67,0:34:45.40,中文,,0,0,0,,好吧 如果我们做数学运算 最终得到的是2乘以26的平方加上5乘以26加上5乘以1
Dialogue: 0,0:34:45.40,0:35:03.77,英文,,0,0,0,,That adds up to 1,487 overall.
Dialogue: 0,0:34:45.40,0:35:03.77,中文,,0,0,0,,总共加起来是1,487
Dialogue: 0,0:35:03.77,0:35:14.25,英文,,0,0,0,,Now, the cool thing is, as long as we pick a base greater than or equal to 26, this algorithm is guaranteed to give every single lowercase English word a unique number.
Dialogue: 0,0:35:03.77,0:35:14.25,中文,,0,0,0,,现在 很酷的是 只要我们选择一个大于或等于26的基数 这个算法就能保证给每个小写英文单词分配一个唯一的数字
Dialogue: 0,0:35:14.25,0:35:17.57,英文,,0,0,0,,So no other number is going to be assigned the number 1,487.
Dialogue: 0,0:35:14.25,0:35:17.57,中文,,0,0,0,,因此 没有其他数字会被分配为1,487
Dialogue: 0,0:35:17.57,0:35:28.70,英文,,0,0,0,,Every single number is going to correspond to a unique word, and every single word is going to correspond to a unique integer.
Dialogue: 0,0:35:17.57,0:35:28.70,中文,,0,0,0,,每个数字都将对应一个唯一的单词 每个单词都将对应一个唯一的整数
Dialogue: 0,0:35:28.70,0:35:35.44,英文,,0,0,0,,So using this, we're able to convert our dynamic array of linked lists to handle strings as well.
Dialogue: 0,0:35:28.70,0:35:35.44,中文,,0,0,0,,使用这个 我们能够将我们的动态链表数组转换为处理字符串
Dialogue: 0,0:35:35.44,0:35:41.51,英文,,0,0,0,,The idea is we'll have this integerization function, which will turn any object into an integer.
Dialogue: 0,0:35:35.44,0:35:41.51,中文,,0,0,0,,想法是我们将有这个整数化函数 它将任何对象转换为整数
Dialogue: 0,0:35:41.51,0:35:46.43,英文,,0,0,0,,And then we'll use a modulo operation to get the right bin.
Dialogue: 0,0:35:41.51,0:35:46.43,中文,,0,0,0,,然后我们将使用模运算得到正确的存储位置
Dialogue: 0,0:35:46.43,0:35:51.51,英文,,0,0,0,,This is so common, we actually call this a hash function.
Dialogue: 0,0:35:46.43,0:35:51.51,中文,,0,0,0,,这是如此普遍 我们实际上称之为哈希函数
Dialogue: 0,0:35:51.51,0:35:52.17,英文,,0,0,0,,Actually, wait.
Dialogue: 0,0:35:51.51,0:35:52.17,中文,,0,0,0,,实际上 等等
Dialogue: 0,0:35:52.17,0:35:57.38,英文,,0,0,0,,Let me talk about that in a bit.
Dialogue: 0,0:35:52.17,0:35:57.38,中文,,0,0,0,,让我稍微谈一下那个
Dialogue: 0,0:35:57.38,0:36:07.04,英文,,0,0,0,,The problem with this, just using base-26, we don't always use just base-26 in all of our strings.
Dialogue: 0,0:35:57.38,0:36:07.04,中文,,0,0,0,,用这种方式 仅仅使用 26 进制存在问题 因为我们并不总是在所有字符串中都只使用 26 进制
Dialogue: 0,0:36:07.04,0:36:14.13,英文,,0,0,0,,Sometimes we use digits, or capital letters, or exclamation points.
Dialogue: 0,0:36:07.04,0:36:14.13,中文,,0,0,0,,有时我们使用数字、大写字母或感叹号
Dialogue: 0,0:36:14.13,0:36:21.65,英文,,0,0,0,,If we want a unique integer for each possible string, we need to assign an integer to every single possible character.
Dialogue: 0,0:36:14.13,0:36:21.65,中文,,0,0,0,,如果我们希望对每个可能的字符串分配一个唯一的整数 我们就需要为每个可能的字符分配一个整数
Dialogue: 0,0:36:21.65,0:36:24.76,英文,,0,0,0,,And that's going to take time.
Dialogue: 0,0:36:21.65,0:36:24.76,中文,,0,0,0,,而这将需要时间
Dialogue: 0,0:36:24.76,0:36:27.96,英文,,0,0,0,,So what integer do I correspond with exclamation point?
Dialogue: 0,0:36:24.76,0:36:27.96,中文,,0,0,0,,那么感叹号对应的整数是多少呢
Dialogue: 0,0:36:27.96,0:36:30.48,英文,,0,0,0,,Is it less than or greater than lowercase a?
Dialogue: 0,0:36:27.96,0:36:30.48,中文,,0,0,0,,它是小写字母 a 的前面还是后面
Dialogue: 0,0:36:30.48,0:36:32.64,英文,,0,0,0,,As it turns out, someone's already done that.
Dialogue: 0,0:36:30.48,0:36:32.64,中文,,0,0,0,,事实证明 有人已经做过这件事了
Dialogue: 0,0:36:32.64,0:36:35.34,英文,,0,0,0,,It's called ASCII.
Dialogue: 0,0:36:32.64,0:36:35.34,中文,,0,0,0,,它叫做ASCII
Dialogue: 0,0:36:35.34,0:36:39.30,英文,,0,0,0,,ASCII is designed to be the basic character set used by most computers.
Dialogue: 0,0:36:35.34,0:36:39.30,中文,,0,0,0,,ASCII旨在成为大多数计算机使用的基本字符集
Dialogue: 0,0:36:39.30,0:36:41.44,英文,,0,0,0,,Every single character is assigned a number between 0 and 127.
Dialogue: 0,0:36:39.30,0:36:41.44,中文,,0,0,0,,每个字符都被分配一个介于0和127之间的数字
Dialogue: 0,0:36:41.44,0:36:43.71,英文,,0,0,0,,Here is kind of this table.
Dialogue: 0,0:36:41.44,0:36:43.71,中文,,0,0,0,,这里有这种表的一种
Dialogue: 0,0:36:43.71,0:36:45.83,英文,,0,0,0,,You don't need to memorize this.
Dialogue: 0,0:36:43.71,0:36:45.83,中文,,0,0,0,,你不需要记住这个
Dialogue: 0,0:36:45.83,0:36:48.56,英文,,0,0,0,,It just exists.
Dialogue: 0,0:36:45.83,0:36:48.56,中文,,0,0,0,,它只是存在
Dialogue: 0,0:36:48.56,0:37:01.84,英文,,0,0,0,,For example, the character C, if you write it as capital D, that's actually the same thing as if you wrote the number 68, because 68 is considered the same as D, capital D, internally.
Dialogue: 0,0:36:48.56,0:37:01.84,中文,,0,0,0,,例如 字符c 如果你将它写成大写字母D 那实际上与你写数字68是一样的 因为68在内部被认为与D、大写的D是相同的
Dialogue: 0,0:37:01.84,0:37:09.31,英文,,0,0,0,,So if we wanted to do any ASCII characters, then we could use 126 as our base and turn these into numbers this way.
Dialogue: 0,0:37:01.84,0:37:09.31,中文,,0,0,0,,如果我们想要处理任何ASCII字符 那么我们可以使用126作为我们的基础 以这种方式将它们转换为数字
Dialogue: 0,0:37:09.31,0:37:10.51,英文,,0,0,0,,So B becomes this number, 1,568,675.
Dialogue: 0,0:37:09.31,0:37:10.51,中文,,0,0,0,,b变成了这个数字 1,568,675
Dialogue: 0,0:37:10.51,0:37:16.90,英文,,0,0,0,,2-PAC becomes 101 million and change.
Dialogue: 0,0:37:10.51,0:37:16.90,中文,,0,0,0,,2-PAC变成了1.01亿多一点
Dialogue: 0,0:37:16.90,0:37:21.14,英文,,0,0,0,,AGG becomes 203 million.
Dialogue: 0,0:37:16.90,0:37:21.14,中文,,0,0,0,,AGG变成了2.03亿
Dialogue: 0,0:37:21.14,0:37:27.02,英文,,0,0,0,,And we can come up with the numbers for every single individual number.
Dialogue: 0,0:37:21.14,0:37:27.02,中文,,0,0,0,,而且我们可以为每个单独的数字想出相应的数字
Dialogue: 0,0:37:27.02,0:37:33.38,英文,,0,0,0,,Below, we can come up with this simple implementation that converts any string to a number.
Dialogue: 0,0:37:27.02,0:37:33.38,中文,,0,0,0,,在下面 我们可以得到这个简单的实现 将任何字符串转换为一个数字
Dialogue: 0,0:37:33.38,0:37:36.54,英文,,0,0,0,,It's just kind of the same code as what we were dealing with earlier.
Dialogue: 0,0:37:33.38,0:37:36.54,中文,,0,0,0,,它只是和我们之前处理的代码差不多
Dialogue: 0,0:37:36.54,0:37:40.09,英文,,0,0,0,,What happens if you want to use characters beyond ASCII, though?
Dialogue: 0,0:37:36.54,0:37:40.09,中文,,0,0,0,,如果你想使用ASCII之外的字符会发生什么呢
Dialogue: 0,0:37:40.09,0:37:43.10,英文,,0,0,0,,Kanji time.
Dialogue: 0,0:37:40.09,0:37:43.10,中文,,0,0,0,,汉字时间
Dialogue: 0,0:37:43.10,0:37:49.14,英文,,0,0,0,,Well, cars in Java also apparently support character sets for other languages.
Dialogue: 0,0:37:43.10,0:37:49.14,中文,,0,0,0,,在Java中 汽车显然也支持其他语言的字符集
Dialogue: 0,0:37:49.14,0:37:52.04,英文,,0,0,0,,In fact, we have these characters.
Dialogue: 0,0:37:49.14,0:37:52.04,中文,,0,0,0,,事实上 我们有这些字符
Dialogue: 0,0:37:52.04,0:37:58.22,英文,,0,0,0,,This encoding is known as Unicode, and it's kind of an extension of ASCII into a lot larger number of items.
Dialogue: 0,0:37:52.04,0:37:58.22,中文,,0,0,0,,这种编码被称为Unicode 它可以扩展ASCII到更多的项目
Dialogue: 0,0:37:58.22,0:38:00.65,英文,,0,0,0,,The table's too big to list.
Dialogue: 0,0:37:58.22,0:38:00.65,中文,,0,0,0,,这个表太大了 无法列出
Dialogue: 0,0:38:00.65,0:38:04.60,英文,,0,0,0,,There's thousands of characters.
Dialogue: 0,0:38:00.65,0:38:04.60,中文,,0,0,0,,有成千上万个字符
Dialogue: 0,0:38:04.60,0:38:07.95,英文,,0,0,0,,But if you want to just go for up to kanji, then we need 40,959 numbers.
Dialogue: 0,0:38:04.60,0:38:07.95,中文,,0,0,0,,但是如果你只想用到汉字 那我们就需要 40,959 个数字
Dialogue: 0,0:38:07.95,0:38:22.47,英文,,0,0,0,,So for example, if you wanted to write that in a in our hash thing, then we'll turn this into a number and that gets us.
Dialogue: 0,0:38:07.95,0:38:22.47,中文,,0,0,0,,例如 如果你想将其写入我们的哈希值中 那么我们会将其转换为数字 这样就可以了
Dialogue: 0,0:38:22.47,0:38:32.75,英文,,0,0,0,,and that gets us. Uhlet's see a thousand million billion trillion quadrillion, one quintillion867 quadrillion, 571 trillion 481 billion, 3061 million 6835.50 Uh, it's abig number.
Dialogue: 0,0:38:22.47,0:38:32.75,中文,,0,0,0,,Uhlet 看到了 1000 万亿万亿万亿、1 quintillion867 万亿、571 万亿 4810 亿、3061 百万 6835.50  这是一个很大的数字
Dialogue: 0,0:38:32.75,0:38:41.75,英文,,0,0,0,,Uh, l do not want to represent that number and that'skind of too big for me to represent in my computer.
Dialogue: 0,0:38:32.75,0:38:39.75,中文,,0,0,0,,我不想表示这个数字 而且这个数字对我来说太大了 无法在我的计算机中表示
Dialogue: 0,0:38:39.75,0:38:48.75,中文,,0,0,0,,对于那些好奇的人来说 这实际上是我的日语名字  我们重新开始
Dialogue: 0,0:38:41.75,0:38:48.75,英文,,0,0,0,,For those whoare curious, that's actually my name in Japanese. Uh, that we'restarting.
Dialogue: 0,0:38:48.75,0:38:50.63,英文,,0,0,0,,Yeah, not Justin.
Dialogue: 0,0:38:48.75,0:38:50.63,中文,,0,0,0,,不是贾斯汀
Dialogue: 0,0:38:50.63,0:38:51.89,英文,,0,0,0,,It's Yokota Seiji.
Dialogue: 0,0:38:50.63,0:38:51.89,中文,,0,0,0,,是横田清二
Dialogue: 0,0:38:51.89,0:38:54.83,英文,,0,0,0,,I have a Japanese name.
Dialogue: 0,0:38:51.89,0:38:54.83,中文,,0,0,0,,我有一个日本名字
Dialogue: 0,0:38:54.83,0:38:58.60,英文,,0,0,0,,Yes.
Dialogue: 0,0:38:54.83,0:38:58.60,中文,,0,0,0,,是的
Dialogue: 0,0:38:58.60,0:39:03.81,英文,,0,0,0,,But the problem with this is I don't want to store this quintillion size number.
Dialogue: 0,0:38:58.60,0:39:03.81,中文,,0,0,0,,但是问题在于我不想存储这个大小为 quintillion 的数字
Dialogue: 0,0:39:03.81,0:39:05.85,英文,,0,0,0,,There's only finitely many numbers that exist.
Dialogue: 0,0:39:03.81,0:39:05.85,中文,,0,0,0,,存在的数字是有限的
Dialogue: 0,0:39:05.85,0:39:13.90,英文,,0,0,0,,So if you try to map this name to this particular number, we're not going to get a number that exists in Java.
Dialogue: 0,0:39:05.85,0:39:13.90,中文,,0,0,0,,如果你试图将这个名称映射到这个特定的数字 我们将得不到一个在 Java 中存在的数字
Dialogue: 0,0:39:13.90,0:39:20.20,英文,,0,0,0,,The integer value is going to grow exponentially with the number of characters, even limiting to, like, 17-character haiku.
Dialogue: 0,0:39:13.90,0:39:20.20,中文,,0,0,0,,整数值会随着字符数量呈指数级增长 即使限制在 比如 17 个字符的俳句
Dialogue: 0,0:39:20.20,0:39:24.15,英文,,0,0,0,,We're going to get a number in the quinvician tillions, 10 to the 78.
Dialogue: 0,0:39:20.20,0:39:24.15,中文,,0,0,0,,我们会得到一个 quinvician tillions 中的数字 10 的 78 次方
Dialogue: 0,0:39:24.15,0:39:25.63,英文,,0,0,0,,It's a huge number.
Dialogue: 0,0:39:24.15,0:39:25.63,中文,,0,0,0,,这是一个巨大的数字
Dialogue: 0,0:39:25.63,0:39:28.39,英文,,0,0,0,,We're not going to have to deal with it.
Dialogue: 0,0:39:25.63,0:39:28.39,中文,,0,0,0,,我们不需要去处理它
Dialogue: 0,0:39:28.39,0:39:30.21,英文,,0,0,0,,Python could theoretically do this.
Dialogue: 0,0:39:28.39,0:39:30.21,中文,,0,0,0,,Python 在理论上可以做到这一点
Dialogue: 0,0:39:30.21,0:39:32.65,英文,,0,0,0,,Python does allow you to have infinite numbers.
Dialogue: 0,0:39:30.21,0:39:32.65,中文,,0,0,0,,Python 允许你拥有无限大的数字
Dialogue: 0,0:39:32.65,0:39:37.01,英文,,0,0,0,,But on actual physical computers, you're not going to want really large numbers.
Dialogue: 0,0:39:32.65,0:39:37.01,中文,,0,0,0,,但在实际的物理计算机上 你不会想要非常大的数字
Dialogue: 0,0:39:37.01,0:39:41.93,英文,,0,0,0,,So we're going to end up doing some integer overflow operations.
Dialogue: 0,0:39:37.01,0:39:41.93,中文,,0,0,0,,我们最终会进行一些整数溢出操作
Dialogue: 0,0:39:41.93,0:39:46.29,英文,,0,0,0,,In Java, when you go beyond 2 billion, it actually goes down to negative 2 billion.
Dialogue: 0,0:39:41.93,0:39:46.29,中文,,0,0,0,,在 Java 中 当你超过 20 亿时 它实际上会变成负的 20 亿
Dialogue: 0,0:39:46.29,0:39:48.47,英文,,0,0,0,,It's called overflow.
Dialogue: 0,0:39:46.29,0:39:48.47,中文,,0,0,0,,这就是溢出
Dialogue: 0,0:39:48.47,0:39:56.99,英文,,0,0,0,,You add 2 billion plus 1, that becomes negative 2 billion.
Dialogue: 0,0:39:48.47,0:39:56.99,中文,,0,0,0,,你加2亿再加1 那就变成负2亿了
Dialogue: 0,0:39:56.99,0:39:59.37,英文,,0,0,0,,We're going to end up feeling the same way here.
Dialogue: 0,0:39:56.99,0:39:59.37,中文,,0,0,0,,我们最终会有相同的感觉
Dialogue: 0,0:39:59.37,0:40:13.90,英文,,0,0,0,,If we convert omens in base 126, that gets us base 28 billion, which if you just convert directly, it'll turn into the negative 1,867,000,000 number here.
Dialogue: 0,0:39:59.37,0:40:13.90,中文,,0,0,0,,如果我们将预兆转换成126进制 那会得到280亿进制 直接转换的话 会变成这里的负18亿6700万
Dialogue: 0,0:40:13.90,0:40:16.65,英文,,0,0,0,,So we are not going to actually get the numbers we expect.
Dialogue: 0,0:40:13.90,0:40:16.65,中文,,0,0,0,,我们实际上得不到我们期望的数字
Dialogue: 0,0:40:16.65,0:40:21.24,英文,,0,0,0,,They're going to get converted down into some smaller range.
Dialogue: 0,0:40:16.65,0:40:21.24,中文,,0,0,0,,它们会被转换成一些更小的范围内
Dialogue: 0,0:40:21.24,0:40:23.03,英文,,0,0,0,,That's actually not bad.
Dialogue: 0,0:40:21.24,0:40:23.03,中文,,0,0,0,,这其实还不错
Dialogue: 0,0:40:23.03,0:40:25.55,英文,,0,0,0,,Because of that, we end up getting this fixed range.
Dialogue: 0,0:40:23.03,0:40:25.55,中文,,0,0,0,,正因为如此 我们最终得到了这个固定范围
Dialogue: 0,0:40:25.55,0:40:34.97,英文,,0,0,0,,And as long as our numbers are large enough and random enough, we should end up getting a random distribution of numbers.
Dialogue: 0,0:40:25.55,0:40:34.97,中文,,0,0,0,,只要我们的数字足够大且足够随机 我们应该最终得到一个随机分布的数字
Dialogue: 0,0:40:34.97,0:40:38.35,英文,,0,0,0,,The official term for this number is called a hash code.
Dialogue: 0,0:40:34.97,0:40:38.35,中文,,0,0,0,,这个数字的官方术语叫做哈希码
Dialogue: 0,0:40:38.35,0:40:44.77,英文,,0,0,0,,It takes a value from a set with many or infinitely many items down to a set with finitely many items.
Dialogue: 0,0:40:38.35,0:40:44.77,中文,,0,0,0,,它从一个拥有许多或无限多项的集合中取值 降至一个只有有限多项的集合
Dialogue: 0,0:40:44.77,0:40:49.61,英文,,0,0,0,,In this case, the set of Java integers, which is only 4 billion and change numbers.
Dialogue: 0,0:40:44.77,0:40:49.61,中文,,0,0,0,,在这种情况下 是Java整数的集合 只有40多亿个数字
Dialogue: 0,0:40:49.61,0:40:52.58,英文,,0,0,0,,So our integerization function is actually called a hash code.
Dialogue: 0,0:40:49.61,0:40:52.58,中文,,0,0,0,,我们的整数化函数实际上被称为哈希码
Dialogue: 0,0:40:52.58,0:41:03.47,英文,,0,0,0,,So we take our infinite set of strings, and we convert it down to individual numbers between 1 and 4 billion.
Dialogue: 0,0:40:52.58,0:41:03.47,中文,,0,0,0,,我们将我们的无限字符串集合转换成1到40多亿之间的单个数字
Dialogue: 0,0:41:03.47,0:41:09.30,英文,,0,0,0,,Because the range of this hash code is finite, we're not going to be able to get these unique values for every single string.
Dialogue: 0,0:41:03.47,0:41:09.30,中文,,0,0,0,,由于这个哈希码的范围是有限的 我们将无法为每个字符串获取这些唯一的值
Dialogue: 0,0:41:09.30,0:41:18.17,英文,,0,0,0,,So instead of dealing with 4,959 at every single step to make everything have a unique number, I'm just going to use a smaller number, like 31.
Dialogue: 0,0:41:09.30,0:41:18.17,中文,,0,0,0,,不是在每个步骤都处理 4,959 使一切都有一个独特的数字 我只是会使用一个较小的数字 比如 31
Dialogue: 0,0:41:18.17,0:41:21.87,英文,,0,0,0,,31 happens to be just a nice number that ends up working out.
Dialogue: 0,0:41:18.17,0:41:21.87,中文,,0,0,0,,31 恰好是一个很好的数字 最终能够奏效
Dialogue: 0,0:41:21.87,0:41:25.29,英文,,0,0,0,,We can look at later at some useful properties that 31 has.
Dialogue: 0,0:41:21.87,0:41:25.29,中文,,0,0,0,,我们以后可以看一下 31 具有的一些有用的特性
Dialogue: 0,0:41:25.29,0:41:29.10,英文,,0,0,0,,But for now, we can just say that 31 is our choice.
Dialogue: 0,0:41:25.29,0:41:29.10,中文,,0,0,0,,但现在 我们只需说 31 是我们的选择
Dialogue: 0,0:41:29.10,0:41:34.45,英文,,0,0,0,,Effectively, it yields a completely random number.
Dialogue: 0,0:41:29.10,0:41:34.45,中文,,0,0,0,,实际上 它产生一个完全随机的数字
Dialogue: 0,0:41:34.45,0:41:37.61,英文,,0,0,0,,Just like this, it ends up becoming 839 million.
Dialogue: 0,0:41:34.45,0:41:37.61,中文,,0,0,0,,就像这样 最终变成了 8 亿 3 千 9 百 万
Dialogue: 0,0:41:37.61,0:41:42.03,英文,,0,0,0,,With the old one, it became this quintillion number that ends up modding to some random number between 0 and 4 billion.
Dialogue: 0,0:41:37.61,0:41:42.03,中文,,0,0,0,,对于旧的那个 它变成了这个难以置信的数字 最终取余数得到 0 到 40 亿之间的一些随机数字
Dialogue: 0,0:41:42.03,0:41:46.70,英文,,0,0,0,,So it doesn't really matter which version we try.
Dialogue: 0,0:41:42.03,0:41:46.70,中文,,0,0,0,,我们试哪个版本其实无关紧要
Dialogue: 0,0:41:46.70,0:41:57.42,英文,,0,0,0,,The unfortunate thing is, because of that, because we're using some smaller base, there are going to be infinitely many other strings that map to the exact same number.
Dialogue: 0,0:41:46.70,0:41:57.42,中文,,0,0,0,,不幸的是 因为这个原因 因为我们使用的是一些较小的基数 会有无限多其他字符串映射到相同的数字
Dialogue: 0,0:41:57.42,0:42:02.60,英文,,0,0,0,,This is my attempt to come up with a reasonably
Dialogue: 0,0:41:57.42,0:42:02.60,中文,,0,0,0,,这是我试图提出一个合理的
Dialogue: 0,0:42:02.60,0:42:17.08,英文,,0,0,0,,reasonable number that happens to match my name, plus or minus capital E, lowercase r, e, w, n. As it turns out, the hash code happens to be the exact same number.
Dialogue: 0,0:42:02.60,0:42:17.08,中文,,0,0,0,,合理的数字 碰巧与我的名字匹配 加上或减去大写 E、小写 r、e、w、n 事实证明 哈希码恰好是相同的数字
Dialogue: 0,0:42:17.08,0:42:25.14,英文,,0,0,0,,It took a while to find this, though, so it's not very common that you end up getting these collisions.
Dialogue: 0,0:42:17.08,0:42:25.14,中文,,0,0,0,,花了一些时间才找到这个 碰撞并不常见
Dialogue: 0,0:42:25.14,0:42:33.17,英文,,0,0,0,,But using this, we're able to convert any data we want into hash values.
Dialogue: 0,0:42:25.14,0:42:33.17,中文,,0,0,0,,但是使用这个 我们能够将任何我们想要的数据转换为哈希值
Dialogue: 0,0:42:33.17,0:42:38.87,英文,,0,0,0,,We convert it into hash code, which returns us a number between negative 2 billion and positive 2 billion.
Dialogue: 0,0:42:33.17,0:42:38.87,中文,,0,0,0,,我们将其转换为哈希码 这将为我们返回一个介于负20亿到正20亿之间的数字
Dialogue: 0,0:42:38.87,0:42:43.23,英文,,0,0,0,,We then use the modulo operator to convert to a bin.
Dialogue: 0,0:42:38.87,0:42:43.23,中文,,0,0,0,,然后我们使用取模运算符转换为二进制
Dialogue: 0,0:42:43.23,0:42:49.01,英文,,0,0,0,,And using that, we're able to put things in.
Dialogue: 0,0:42:43.23,0:42:49.01,中文,,0,0,0,,然后使用它 我们能够放入东西
Dialogue: 0,0:42:49.01,0:42:51.31,英文,,0,0,0,,Now, this version uses an array of lists.
Dialogue: 0,0:42:49.01,0:42:51.31,中文,,0,0,0,,现在 这个版本使用一个列表的数组
Dialogue: 0,0:42:51.31,0:42:53.17,英文,,0,0,0,,This is sometimes called separate chaining.
Dialogue: 0,0:42:51.31,0:42:53.17,中文,,0,0,0,,这有时被称为分离链接
Dialogue: 0,0:42:53.17,0:42:54.97,英文,,0,0,0,,There are some other options.
Dialogue: 0,0:42:53.17,0:42:54.97,中文,,0,0,0,,还有一些其他选项
Dialogue: 0,0:42:54.97,0:42:57.05,英文,,0,0,0,,Cuckoo hashing is actually really cool.
Dialogue: 0,0:42:54.97,0:42:57.05,中文,,0,0,0,,布谷鸟哈希实际上非常酷
Dialogue: 0,0:42:57.05,0:43:03.35,英文,,0,0,0,,I would highly recommend you take a look into those after class, but we're not going to cover them here.
Dialogue: 0,0:42:57.05,0:43:03.35,中文,,0,0,0,,我强烈建议你在课后看看这些 但我们这里不会涵盖它们
Dialogue: 0,0:43:03.35,0:43:11.14,英文,,0,0,0,,In Java, there is a caveat with the module operator that we'll look at soon.
Dialogue: 0,0:43:03.35,0:43:11.14,中文,,0,0,0,,在Java中 使用模块运算符有一个需要注意的地方 我们很快就会看到
Dialogue: 0,0:43:11.14,0:43:14.55,英文,,0,0,0,,But for now, this seems like it's going to work quite well.
Dialogue: 0,0:43:11.14,0:43:14.55,中文,,0,0,0,,但现在 这似乎会相当好地工作
Dialogue: 0,0:43:14.55,0:43:18.17,英文,,0,0,0,,Now, this actually tends to be the most popular implementation for sets and maps.
Dialogue: 0,0:43:14.55,0:43:18.17,中文,,0,0,0,,现在 这实际上倾向于是最受欢迎的集合和映射的实现
Dialogue: 0,0:43:18.17,0:43:19.77,英文,,0,0,0,,It's great performance in practice.
Dialogue: 0,0:43:18.17,0:43:19.77,中文,,0,0,0,,在实践中表现出色
Dialogue: 0,0:43:19.77,0:43:21.63,英文,,0,0,0,,It doesn't require the items to be comparable.
Dialogue: 0,0:43:19.77,0:43:21.63,中文,,0,0,0,,它不要求项目可比较
Dialogue: 0,0:43:21.63,0:43:23.96,英文,,0,0,0,,And the implementations are often kind of simple.
Dialogue: 0,0:43:21.63,0:43:23.96,中文,,0,0,0,,而且实现通常相当简单
Dialogue: 0,0:43:23.96,0:43:27.52,英文,,0,0,0,,Python definitions, they're just hash tables.
Dialogue: 0,0:43:23.96,0:43:27.52,中文,,0,0,0,,Python的定义 它们只是哈希表
Dialogue: 0,0:43:27.52,0:43:33.28,英文,,0,0,0,,In Java, we'll use things known as a hash map and a hash set.
Dialogue: 0,0:43:27.52,0:43:33.28,中文,,0,0,0,,在Java中 我们会使用一些东西 称为哈希映射和哈希集
Dialogue: 0,0:43:33.28,0:43:37.35,英文,,0,0,0,,How does a hash map know how to implement a hash code?
Dialogue: 0,0:43:33.28,0:43:37.35,中文,,0,0,0,,哈希映射如何知道如何实现哈希码呢
Dialogue: 0,0:43:37.35,0:43:43.96,英文,,0,0,0,,Well, Every single object, we can say that it implements a hash code.
Dialogue: 0,0:43:37.35,0:43:43.96,中文,,0,0,0,, 每个对象 我们可以说它实现了一个哈希码
Dialogue: 0,0:43:43.96,0:43:48.50,英文,,0,0,0,,In fact, this isn't something that you need to say.
Dialogue: 0,0:43:43.96,0:43:48.50,中文,,0,0,0,,事实上 这不是你需要说的事情
Dialogue: 0,0:43:48.50,0:44:00.41,英文,,0,0,0,,Unlike with comparables, which have to say that they need to be able to compare something, hash codes are so ubiquitous that Java requires that every single object implement a hash code method.
Dialogue: 0,0:43:48.50,0:44:00.41,中文,,0,0,0,,不像可比较的对象 它们必须声明自己需要能够比较某些东西 哈希码是如此普遍 以至于Java要求每个对象都实现一个哈希码方法
Dialogue: 0,0:44:00.41,0:44:03.81,英文,,0,0,0,,In fact, object itself operates a hash code method.
Dialogue: 0,0:44:00.41,0:44:03.81,中文,,0,0,0,,实际上 对象本身就操作一个哈希码方法
Dialogue: 0,0:44:03.81,0:44:11.09,英文,,0,0,0,,And that hash code method is just return the memory address that it's currently at.
Dialogue: 0,0:44:03.81,0:44:11.09,中文,,0,0,0,,而这个哈希码方法只是返回它当前所在的内存地址
Dialogue: 0,0:44:11.09,0:44:13.47,英文,,0,0,0,,The memory address is somewhat random.
Dialogue: 0,0:44:11.09,0:44:13.47,中文,,0,0,0,,内存地址有点随机
Dialogue: 0,0:44:13.47,0:44:17.51,英文,,0,0,0,,It's effectively random, and it changes every single time you run the program in a different spot.
Dialogue: 0,0:44:13.47,0:44:17.51,中文,,0,0,0,,它实际上是随机的 每次在不同位置运行程序时都会变化
Dialogue: 0,0:44:17.51,0:44:18.19,英文,,0,0,0,,But that's fine.
Dialogue: 0,0:44:17.51,0:44:18.19,中文,,0,0,0,,但这没关系
Dialogue: 0,0:44:18.19,0:44:24.43,英文,,0,0,0,,All it needs to be is consistent every time you run it on the same machine over and over.
Dialogue: 0,0:44:18.19,0:44:24.43,中文,,0,0,0,,它只需要在同一台机器上重复运行时保持一致
Dialogue: 0,0:44:24.43,0:44:27.67,英文,,0,0,0,,So this is Java's actual hash code function for strings.
Dialogue: 0,0:44:24.43,0:44:27.67,中文,,0,0,0,,这就是Java实际的字符串哈希码函数
Dialogue: 0,0:44:27.67,0:44:36.58,英文,,0,0,0,,It's been slightly cleaned up, but this actually ends up turning these two strings, Errorun and YokotaSeiji, into the same number, 839,611,422.
Dialogue: 0,0:44:27.67,0:44:36.58,中文,,0,0,0,,它稍微被清理过 但这实际上会将这两个字符串Errorun和YokotaSeiji转换成相同的数字839,611,422
Dialogue: 0,0:44:36.58,0:44:47.01,英文,,0,0,0,,Here's some more examples of how the Java hash code ends up running.
Dialogue: 0,0:44:36.58,0:44:47.01,中文,,0,0,0,,这里有一些Java哈希码运行的更多例子
Dialogue: 0,0:44:47.01,0:44:52.33,英文,,0,0,0,,You just put these, and you get these values.
Dialogue: 0,0:44:47.01,0:44:52.33,中文,,0,0,0,,你只需放入这些 就能得到这些值
Dialogue: 0,0:44:52.33,0:44:54.61,英文,,0,0,0,,Now, here's an interesting question.
Dialogue: 0,0:44:52.33,0:44:54.61,中文,,0,0,0,,现在 这里有一个有趣的问题
Dialogue: 0,0:44:54.61,0:45:01.68,英文,,0,0,0,,If I have this golden apple and the hash code's bucket is negative 1, where do you think I should put this?
Dialogue: 0,0:44:54.61,0:45:01.68,中文,,0,0,0,,如果我有这个金苹果 哈希码的桶是负1 你认为我应该把它放在哪里
Dialogue: 0,0:45:01.68,0:45:04.30,英文,,0,0,0,,How many people say 0?
Dialogue: 0,0:45:01.68,0:45:04.30,中文,,0,0,0,,有多少人说0
Dialogue: 0,0:45:04.30,0:45:06.42,英文,,0,0,0,,1?
Dialogue: 0,0:45:04.30,0:45:06.42,中文,,0,0,0,,1
Dialogue: 0,0:45:06.42,0:45:08.52,英文,,0,0,0,,2?
Dialogue: 0,0:45:06.42,0:45:08.52,中文,,0,0,0,,2
Dialogue: 0,0:45:08.52,0:45:09.72,英文,,0,0,0,,3?
Dialogue: 0,0:45:08.52,0:45:09.72,中文,,0,0,0,,3?
Dialogue: 0,0:45:09.72,0:45:10.68,英文,,0,0,0,,A lot of people said 3.
Dialogue: 0,0:45:09.72,0:45:10.68,中文,,0,0,0,,很多人说3
Dialogue: 0,0:45:10.68,0:45:11.56,英文,,0,0,0,,Some people said 1.
Dialogue: 0,0:45:10.68,0:45:11.56,中文,,0,0,0,,有些人说1
Dialogue: 0,0:45:11.56,0:45:15.86,英文,,0,0,0,,Why do you say 3?
Dialogue: 0,0:45:11.56,0:45:15.86,中文,,0,0,0,,你为什么说3
Dialogue: 0,0:45:15.86,0:45:17.58,英文,,0,0,0,,Anyone?
Dialogue: 0,0:45:15.86,0:45:17.58,中文,,0,0,0,,有人吗
Dialogue: 0,0:45:17.58,0:45:21.63,英文,,0,0,0,,Yeah?
Dialogue: 0,0:45:21.63,0:45:33.39,英文,,0,0,0,,Yeah, the idea is if you go backwards, negative 1, if you go from 4, 4 minus 1 becomes 3, minus 1 becomes 2, minus 1 becomes 1, minus 1 becomes 0.
Dialogue: 0,0:45:21.63,0:45:33.39,中文,,0,0,0,,对 如果你往回走 负1 如果你从4开始 4减1等于3 再减1等于2 再减1等于1 再减1等于0
Dialogue: 0,0:45:33.39,0:45:39.49,英文,,0,0,0,,So if you go minus 1 one more time, you should get back up to 3 the same way.
Dialogue: 0,0:45:33.39,0:45:39.49,中文,,0,0,0,,如果再减去1次 你应该以同样的方式回到3
Dialogue: 0,0:45:39.49,0:45:43.80,英文,,0,0,0,,So using the same idea, we're going to end up putting negative 1 into 3.
Dialogue: 0,0:45:39.49,0:45:43.80,中文,,0,0,0,,按照同样的思路 我们将把负1放入3
Dialogue: 0,0:45:43.80,0:45:47.20,英文,,0,0,0,,We want to do that, at least.
Dialogue: 0,0:45:43.80,0:45:47.20,中文,,0,0,0,,至少我们想这样做
Dialogue: 0,0:45:47.20,0:45:53.40,英文,,0,0,0,,The problem, negative 1 mod 4 in Java is negative 1.
Dialogue: 0,0:45:47.20,0:45:53.40,中文,,0,0,0,,问题是 在Java中 负1对4取模是负1
Dialogue: 0,0:45:53.40,0:45:56.57,英文,,0,0,0,,Java does not like negative modulo.
Dialogue: 0,0:45:53.40,0:45:56.57,中文,,0,0,0,,Java不喜欢负数取模
Dialogue: 0,0:45:56.57,0:45:58.95,英文,,0,0,0,,And it's going to result in index errors.
Dialogue: 0,0:45:56.57,0:45:58.95,中文,,0,0,0,,这将导致索引错误
Dialogue: 0,0:45:58.95,0:46:10.90,英文,,0,0,0,,So because of that, we need to use this math.floorMod function, which basically does the same thing as what we want regular mod to do, except it actually handles negative numbers correctly.
Dialogue: 0,0:45:58.95,0:46:10.90,中文,,0,0,0,,因此 由于这个原因 我们需要使用这个math.floorMod函数 它基本上做的和我们希望常规取模做的一样 只是它正确处理负数
Dialogue: 0,0:46:10.90,0:46:19.43,英文,,0,0,0,,So using that, we're able to reduce the hash code to a valid index using this floorMod operation.
Dialogue: 0,0:46:10.90,0:46:19.43,中文,,0,0,0,,通过这样做 我们能够使用 floorMod 操作将哈希码减小到一个有效的索引
Dialogue: 0,0:46:19.43,0:46:21.87,英文,,0,0,0,,Now, we can take a look at this performance.
Dialogue: 0,0:46:19.43,0:46:21.87,中文,,0,0,0,,现在 我们可以看一下这个性能
Dialogue: 0,0:46:21.87,0:46:25.08,英文,,0,0,0,,With no resizing, how long do you think this will take?
Dialogue: 0,0:46:21.87,0:46:25.08,中文,,0,0,0,,没有调整大小 你觉得这会花多长时间
Dialogue: 0,0:46:25.08,0:46:31.82,英文,,0,0,0,,If we just keep the number of buckets at five constant, what's the runtime of this code?
Dialogue: 0,0:46:25.08,0:46:31.82,中文,,0,0,0,,如果我们只是保持桶的数量恒定在五个 那么这段代码的运行时间是多少
Dialogue: 0,0:46:31.82,0:46:40.17,英文,,0,0,0,,Anyone?
Dialogue: 0,0:46:31.82,0:46:40.17,中文,,0,0,0,,有人吗
Dialogue: 0,0:46:40.17,0:46:46.85,英文,,0,0,0,,Any suggestions?
Dialogue: 0,0:46:40.17,0:46:46.85,中文,,0,0,0,,有什么建议吗
Dialogue: 0,0:46:46.85,0:46:48.53,英文,,0,0,0,,What's the average length of each sublist?
Dialogue: 0,0:46:46.85,0:46:48.53,中文,,0,0,0,,每个子列表的平均长度是多少
Dialogue: 0,0:46:48.53,0:46:50.86,英文,,0,0,0,,Well, n divided by m, but m is going to be constant.
Dialogue: 0,0:46:48.53,0:46:50.86,中文,,0,0,0,,好吧 N除以M 但M将保持不变
Dialogue: 0,0:46:50.86,0:46:55.10,英文,,0,0,0,,So it's going to be just n divided by 5.
Dialogue: 0,0:46:50.86,0:46:55.10,中文,,0,0,0,,它将只是N除以5
Dialogue: 0,0:46:55.10,0:46:59.81,英文,,0,0,0,,Our runtime is going to be however long our average sublist is.
Dialogue: 0,0:46:55.10,0:46:59.81,中文,,0,0,0,,我们的运行时间将取决于我们平均子列表的长度
Dialogue: 0,0:46:59.81,0:47:07.74,英文,,0,0,0,,So if we don't increase m, what ends up happening?
Dialogue: 0,0:46:59.81,0:47:07.74,中文,,0,0,0,,如果我们不增加M 最终会发生什么
Dialogue: 0,0:47:07.74,0:47:14.44,英文,,0,0,0,,Well, even if the items are split up, it's going to be n divided by m. If m equals 5, then that's just a constant factor.
Dialogue: 0,0:47:07.74,0:47:14.44,中文,,0,0,0,,即使项目被分割 也会是N除以M  如果M等于5 那只是一个常数因子
Dialogue: 0,0:47:14.44,0:47:15.92,英文,,0,0,0,,We ignore it in the theta bound.
Dialogue: 0,0:47:14.44,0:47:15.92,中文,,0,0,0,,我们在Θ边界中忽略它
Dialogue: 0,0:47:15.92,0:47:18.44,英文,,0,0,0,,So we end up with theta n runtime.
Dialogue: 0,0:47:15.92,0:47:18.44,中文,,0,0,0,,我们最终得到Θ(N)的运行时间
Dialogue: 0,0:47:18.44,0:47:22.54,英文,,0,0,0,,That's too slow.
Dialogue: 0,0:47:18.44,0:47:22.54,中文,,0,0,0,,太慢了
Dialogue: 0,0:47:22.54,0:47:31.43,英文,,0,0,0,,If we decide to increase m along with n, then as long as m equals theta n, then O of n over m is going to be O of 1.
Dialogue: 0,0:47:22.54,0:47:31.43,中文,,0,0,0,,如果我们决定随着 N 增加 M 那么只要 M 等于 Θ(N) 那么 O(N/M) 就会是 O(1)
Dialogue: 0,0:47:31.43,0:47:35.03,英文,,0,0,0,,So we can say that the list will be approximately n over n long.
Dialogue: 0,0:47:31.43,0:47:35.03,中文,,0,0,0,,我们可以说列表大约会是 N/M长
Dialogue: 0,0:47:35.03,0:47:40.01,英文,,0,0,0,,So we'll get theta n over m runtime on average.
Dialogue: 0,0:47:35.03,0:47:40.01,中文,,0,0,0,,我们平均会得到 Θ(N/M) 的运行时间
Dialogue: 0,0:47:40.01,0:47:47.90,英文,,0,0,0,,And if we double every time n gets too big, we'll ensure that the resizing also takes constant time and that these operations take O of 1 time as well.
Dialogue: 0,0:47:40.01,0:47:47.90,中文,,0,0,0,,如果每次 N 变得太大时都将其加倍 我们将确保调整大小也需要恒定时间 并且这些操作也花费 O(1) 时间
Dialogue: 0,0:47:47.90,0:47:55.02,英文,,0,0,0,,Thus, using this, worst-case runtimes can be equal to theta of 1, unless the operation causes a resize.
Dialogue: 0,0:47:47.90,0:47:55.02,中文,,0,0,0,,因此 使用这个方法 最坏情况运行时间可以等于 Θ(1) 除非操作导致调整大小
Dialogue: 0,0:47:55.02,0:48:01.10,英文,,0,0,0,,But resizes happen infrequently enough that we don't need to worry about it.
Dialogue: 0,0:47:55.02,0:48:01.10,中文,,0,0,0,,但是调整大小发生得不够频繁 我们不需要担心这个问题
Dialogue: 0,0:48:01.10,0:48:03.93,英文,,0,0,0,,And again, this assumes an even distribution of items.
Dialogue: 0,0:48:01.10,0:48:03.93,中文,,0,0,0,,再说一遍 这假设物品均匀分布
Dialogue: 0,0:48:03.93,0:48:14.55,英文,,0,0,0,,So if you have this table over here where every single item just happens to be in the same bin, it's going to be significantly worse.
Dialogue: 0,0:48:03.93,0:48:14.55,中文,,0,0,0,,如果你有这个表格 每个项目碰巧都在同一个箱子里 情况就会显著恶化
Dialogue: 0,0:48:14.55,0:48:17.45,英文,,0,0,0,,So we need to ensure that we have even distribution.
Dialogue: 0,0:48:14.55,0:48:17.45,中文,,0,0,0,,因此 我们需要确保物品均匀分布
Dialogue: 0,0:48:17.45,0:48:28.27,英文,,0,0,0,,We have some discussion later in the extra video and slides talking about how we might get even distributions by using some pseudo-randomness.
Dialogue: 0,0:48:17.45,0:48:28.27,中文,,0,0,0,,在额外的视频和幻灯片中 我们稍后会讨论如何通过使用一些伪随机性来实现均匀分布
Dialogue: 0,0:48:28.27,0:48:30.51,英文,,0,0,0,,But other than that,
Dialogue: 0,0:48:28.27,0:48:30.51,中文,,0,0,0,,除此之外
Dialogue: 0,0:48:30.51,0:48:33.39,英文,,0,0,0,,I think this works overall.
Dialogue: 0,0:48:30.51,0:48:33.39,中文,,0,0,0,,我认为总体上这是有效的
Dialogue: 0,0:48:33.39,0:48:40.19,英文,,0,0,0,,We take our data, we convert it into a hash code, we then reduce it to an index, and we store it in that particular index.
Dialogue: 0,0:48:33.39,0:48:40.19,中文,,0,0,0,,我们取得我们的数据 将其转换成哈希码 然后将其缩减到一个索引 并将其存储在该特定的索引中
Dialogue: 0,0:48:40.19,0:48:48.86,英文,,0,0,0,,If we do resizing and the items are spread out nicely, that's a lot of caveats, but those are nice guesses that we can make.
Dialogue: 0,0:48:40.19,0:48:48.86,中文,,0,0,0,,如果我们调整大小并且项目分散得很好 那就有很多注意事项 但这些都是我们可以做出的好猜测
Dialogue: 0,0:48:48.86,0:48:53.68,英文,,0,0,0,,And if we do those guesses, then we get theta 1 average runtime for both contains and add.
Dialogue: 0,0:48:48.86,0:48:53.68,中文,,0,0,0,,如果我们做出这些猜测 那么我们得到了包含和添加的平均运行时间 Θ(1)
Dialogue: 0,0:48:53.68,0:48:56.42,英文,,0,0,0,,We've successfully beaten our BST.
Dialogue: 0,0:48:53.68,0:48:56.42,中文,,0,0,0,,我们成功地击败了我们的 BST
Dialogue: 0,0:48:56.42,0:49:05.66,英文,,0,0,0,,Woo!
Dialogue: 0,0:48:56.42,0:49:05.66,中文,,0,0,0,,哇！
Dialogue: 0,0:49:05.66,0:49:11.14,英文,,0,0,0,,Now, there's a lot more here that we can talk about, but we're going to skip this for time.
Dialogue: 0,0:49:05.66,0:49:11.14,中文,,0,0,0,,现在 这里有很多内容可以讨论 但我们要为了时间跳过这部分
Dialogue: 0,0:49:11.14,0:49:16.20,英文,,0,0,0,,We'll talk Monday a bit more about how the hash code actually works.
Dialogue: 0,0:49:11.14,0:49:16.20,中文,,0,0,0,,我们将在周一再谈谈哈希码实际上是如何工作的
