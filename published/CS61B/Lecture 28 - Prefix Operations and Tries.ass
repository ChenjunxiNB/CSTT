[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 3
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Audio File: D:/python_code/video_tool/video_tool/result/Lecture 02.1 - Number Representation Intro, Bits can be anything.mp4
Video File: D:/python_code/video_tool/video_tool/result/Lecture 02.1 - Number Representation Intro, Bits can be anything.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.375000
Scroll Position: 895
Active Line: 896
Video Position: 8466

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,14,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.33333,1.33333,2,6,6,8,1
Style: 英文,Arial,24,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,2,2,6,1
Style: 中文,微软雅黑,38,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,2,2,20,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
Dialogue: 0,0:00:05.22,0:00:06.00,英文,,0,0,0,,OK, welcome back.
Dialogue: 0,0:00:05.22,0:00:06.00,中文,,0,0,0,,好的 欢迎回来
Dialogue: 0,0:00:06.00,0:00:09.40,英文,,0,0,0,,I'm going to try to get you all caught up, as promised.
Dialogue: 0,0:00:06.00,0:00:09.40,中文,,0,0,0,,我将尝试让大家赶上进度 如我所承诺的
Dialogue: 0,0:00:09.40,0:00:12.47,英文,,0,0,0,,So last time you saw topological sort.
Dialogue: 0,0:00:09.40,0:00:12.47,中文,,0,0,0,,所以上次你看到了拓扑排序
Dialogue: 0,0:00:12.47,0:00:22.62,英文,,0,0,0,,I take a graph that is directed, has arrows, and has no cycles, and I rearrange the nodes in an order such that all of the edges point from left to right.
Dialogue: 0,0:00:12.47,0:00:22.62,中文,,0,0,0,,我采用一个有向图 它有箭头 没有环 我重新排列节点的顺序 使所有的边都从左指向右
Dialogue: 0,0:00:22.62,0:00:23.48,英文,,0,0,0,,That was my goal.
Dialogue: 0,0:00:22.62,0:00:23.48,中文,,0,0,0,,这就是我的目标
Dialogue: 0,0:00:23.48,0:00:29.32,英文,,0,0,0,,And we told you that an algorithm to do this is to take the post-order traversal of this graph
Dialogue: 0,0:00:23.48,0:00:29.32,中文,,0,0,0,,我们告诉过你 实现这个目标的算法是采用这个图的后序遍历
Dialogue: 0,0:00:29.32,0:00:30.85,英文,,0,0,0,,And that spits out an order.
Dialogue: 0,0:00:29.32,0:00:30.85,中文,,0,0,0,,然后它会输出一个顺序
Dialogue: 0,0:00:30.85,0:00:35.19,英文,,0,0,0,,You take that order, you flip it around, and that gives you a topological order.
Dialogue: 0,0:00:30.85,0:00:35.19,中文,,0,0,0,,你得到这个顺序 把它翻转过来 这就会给你一个拓扑顺序
Dialogue: 0,0:00:35.19,0:00:47.48,英文,,0,0,0,,And the rough intuition, it's very rough, but it kind of works is, well, if I have an edge, say, f to g, well, if I look at this edge, which one is post-order going to visit first?
Dialogue: 0,0:00:35.19,0:00:47.48,中文,,0,0,0,,粗略的直觉 它非常粗略 但它确实有效 如果我有一条边 比如 F 到 G 那么 如果我查看这条边 后序遍历会先访问哪个？
Dialogue: 0,0:00:47.48,0:00:50.80,英文,,0,0,0,,Is post-order going to visit f first or g first?
Dialogue: 0,0:00:47.48,0:00:50.80,中文,,0,0,0,,后序遍历会先访问 F 还是 G？
Dialogue: 0,0:00:50.80,0:00:55.40,英文,,0,0,0,,Well, post-order says, I need to visit all the children before I can visit a node.
Dialogue: 0,0:00:50.80,0:00:55.40,中文,,0,0,0,,后序遍历说 我需要先访问所有子节点才能访问一个节点
Dialogue: 0,0:00:55.40,0:00:59.82,英文,,0,0,0,,So before I can ever visit f, I have to finish all of f's children.
Dialogue: 0,0:00:55.40,0:00:59.82,中文,,0,0,0,,在我访问 F 之前 我必须完成 F 的所有子节点
Dialogue: 0,0:00:59.82,0:01:06.30,英文,,0,0,0,,including G, where all the people F can reach, including G. So the post-order is going to visit G first, and then F.
Dialogue: 0,0:00:59.82,0:01:06.30,中文,,0,0,0,,包括 G F 可以到达的所有人 包括 G 所以后序遍历会先访问 G 然后是 F
Dialogue: 0,0:01:06.30,0:01:12.30,英文,,0,0,0,,So when I spit out that post-order, G's going to come before F. I'll get G, F.
Dialogue: 0,0:01:06.30,0:01:12.30,中文,,0,0,0,,当我输出这个后序遍历时 G 会出现在 F 之前 我会得到 G F
Dialogue: 0,0:01:12.30,0:01:18.30,英文,,0,0,0,,Then, if I reverse it, I'm guaranteed to get F, G, which is what I want.
Dialogue: 0,0:01:12.30,0:01:18.30,中文,,0,0,0,,然后 如果我把它反过来 我就能得到 F G 这就是我想要的
Dialogue: 0,0:01:18.30,0:01:21.74,英文,,0,0,0,,I want F to come before G. So that's the rough intuition.
Dialogue: 0,0:01:18.30,0:01:21.74,中文,,0,0,0,,我希望 F 出现在 G 之前 这就是粗略的直觉
Dialogue: 0,0:01:21.74,0:01:29.45,英文,,0,0,0,,If you repeat that on all of the edges, you get kind of a rough-proof sketch for why the topological sort can be derived from reverse,
Dialogue: 0,0:01:21.74,0:01:29.45,中文,,0,0,0,,如果你对所有的边都重复这个过程 你就会得到一个粗略的证明草图 说明为什么拓扑排序可以从反向推导出来
Dialogue: 0,0:01:29.45,0:01:30.49,英文,,0,0,0,,Post-order.
Dialogue: 0,0:01:29.45,0:01:30.49,中文,,0,0,0,,后序遍历
Dialogue: 0,0:01:30.49,0:01:31.55,英文,,0,0,0,,OK, good.
Dialogue: 0,0:01:30.49,0:01:31.55,中文,,0,0,0,,好的 很好
Dialogue: 0,0:01:31.55,0:01:32.75,英文,,0,0,0,,So it looks like that.
Dialogue: 0,0:01:31.55,0:01:32.75,中文,,0,0,0,,它看起来像那样
Dialogue: 0,0:01:32.75,0:01:37.24,英文,,0,0,0,,Take this kind of all-over-the-place graph, and you make it look nice in a straight line.
Dialogue: 0,0:01:32.75,0:01:37.24,中文,,0,0,0,,把这种到处都是的图 变成一条漂亮的直线
Dialogue: 0,0:01:37.24,0:01:38.66,英文,,0,0,0,,Everyone lines up.
Dialogue: 0,0:01:37.24,0:01:38.66,中文,,0,0,0,,每个人都排好队
Dialogue: 0,0:01:38.66,0:01:41.44,英文,,0,0,0,,OK, so that was the algorithm.
Dialogue: 0,0:01:38.66,0:01:41.44,中文,,0,0,0,,好的 那就是算法
Dialogue: 0,0:01:41.44,0:01:49.23,英文,,0,0,0,,And then the one thing I wanted to show you, but you stalled me out of time, is, well, remember the shortest paths algorithm from
Dialogue: 0,0:01:41.44,0:01:49.23,中文,,0,0,0,,然后我想向你展示的一件事 但你把我拖延了时间 是 记住最短路径算法
Dialogue: 0,0:01:49.23,0:01:50.89,英文,,0,0,0,,I don't know, three lectures ago.
Dialogue: 0,0:01:49.23,0:01:50.89,中文,,0,0,0,,我不知道 三节课之前
Dialogue: 0,0:01:50.89,0:01:52.05,英文,,0,0,0,,I'm not going to run it again.
Dialogue: 0,0:01:50.89,0:01:52.05,中文,,0,0,0,,我不会再运行它了
Dialogue: 0,0:01:52.05,0:02:00.44,英文,,0,0,0,,But remember that Dijkstra's algorithm is going to find the shortest path from A, which is my designated source, to all of the other vertices.
Dialogue: 0,0:01:52.05,0:02:00.44,中文,,0,0,0,,但请记住 我告诉过你的危险是 如果存在负边 那么 Dijkstra's 算法就会失败
Dialogue: 0,0:02:00.44,0:02:08.24,英文,,0,0,0,,So if I ran Dijkstra's algorithm, which I will not do here, you would get a graph like this, or shortest path tree like this.
Dialogue: 0,0:02:00.44,0:02:08.24,中文,,0,0,0,,如果我运行 Dijkstra's 算法 我在这里不会这样做 你会得到一个像这样的图 或者像这样的最短路径树
Dialogue: 0,0:02:08.24,0:02:09.76,英文,,0,0,0,,Those are the bold edges.
Dialogue: 0,0:02:08.24,0:02:09.76,中文,,0,0,0,,那些是粗体边
Dialogue: 0,0:02:09.76,0:02:17.63,英文,,0,0,0,,But remember, the danger that I told you about was that if there is a negative edge, then Dijkstra's algorithm can fail.
Dialogue: 0,0:02:09.76,0:02:17.63,中文,,0,0,0,,但请记住 我告诉过你的危险是 如果存在负边 那么 Dijkstra's 算法就会失败
Dialogue: 0,0:02:17.63,0:02:28.56,英文,,0,0,0,,Specifically because if you have a negative edge weight, then what's going to happen is relaxations of edges pointing at visited white vertices can succeed.
Dialogue: 0,0:02:17.63,0:02:28.56,中文,,0,0,0,,具体来说 因为如果你有一个负边权重 那么将会发生的是指向已访问的白色顶点的边的松弛可以成功
Dialogue: 0,0:02:28.56,0:02:35.77,英文,,0,0,0,,So the invariant that we must have for Dijkstra's to work is that I look at this edge, it's pointing at a visited vertex,
Dialogue: 0,0:02:28.56,0:02:35.77,中文,,0,0,0,,因此 Dijkstra's 算法必须具有的不变性是 我查看这条边 它指向一个已访问的顶点
Dialogue: 0,0:02:35.77,0:02:40.77,英文,,0,0,0,, so I should be able to tell you without even doing the math that this relaxation is guaranteed to fail.
Dialogue: 0,0:02:35.77,0:02:40.77,中文,,0,0,0,,我应该能够告诉你 即使不进行数学运算 这种松弛也保证会失败
Dialogue: 0,0:02:40.77,0:02:43.61,英文,,0,0,0,,But let's actually try and do this relaxation real quick.
Dialogue: 0,0:02:40.77,0:02:43.61,中文,,0,0,0,,但让我们实际尝试快速进行这种松弛
Dialogue: 0,0:02:43.61,0:02:48.95,英文,,0,0,0,,Because if I am considering whether or not to use this edge, so do I use it?
Dialogue: 0,0:02:43.61,0:02:48.95,中文,,0,0,0,,因为如果我正在考虑是否使用这条边 那么我是否使用它？
Dialogue: 0,0:02:48.95,0:02:49.85,英文,,0,0,0,,Do I not use it?
Dialogue: 0,0:02:48.95,0:02:49.85,中文,,0,0,0,,我是否不使用它？
Dialogue: 0,0:02:49.85,0:02:51.75,英文,,0,0,0,,Is this the best way to get to E?
Dialogue: 0,0:02:49.85,0:02:51.75,中文,,0,0,0,,这是到达 E 的最佳方式吗？
Dialogue: 0,0:02:51.75,0:02:53.37,英文,,0,0,0,,What would Dijkstra's do to relax?
Dialogue: 0,0:02:51.75,0:02:53.37,中文,,0,0,0,,Dijkstra 会做什么来松弛？
Dialogue: 0,0:02:53.37,0:02:56.49,英文,,0,0,0,,It would say, well, it costs 7 to get to C.
Dialogue: 0,0:02:53.37,0:02:56.49,中文,,0,0,0,,它会说 到达 c 需要 7 的成本
Dialogue: 0,0:02:56.49,0:03:02.80,英文,,0,0,0,,And then it costs another negative 20 to get to E. So I have a total cost E of negative 13.
Dialogue: 0,0:02:56.49,0:03:02.80,中文,,0,0,0,,然后到达 E 需要另外的 -20 的成本 所以我到达 E 的总成本为 -13
Dialogue: 0,0:03:02.80,0:03:05.76,英文,,0,0,0,,That's better than 2.
Dialogue: 0,0:03:02.80,0:03:05.76,中文,,0,0,0,,这比 2 好
Dialogue: 0,0:03:05.76,0:03:10.36,英文,,0,0,0,,So this relaxation actually succeeds, which is kind of a problem.
Dialogue: 0,0:03:05.76,0:03:10.36,中文,,0,0,0,,这种松弛实际上成功了 这有点问题
Dialogue: 0,0:03:10.36,0:03:13.37,英文,,0,0,0,,That's what we did not want Dijkstra's to do.
Dialogue: 0,0:03:10.36,0:03:13.37,中文,,0,0,0,,这就是我们不希望 Dijkstra 做的事情
Dialogue: 0,0:03:13.37,0:03:17.54,英文,,0,0,0,,And so intuitively, I feel like I didn't really give you a clear picture of why that's a problem.
Dialogue: 0,0:03:13.37,0:03:17.54,中文,,0,0,0,,直观地说 我觉得我没有真正给你一个清晰的图景 说明为什么这是一个问题
Dialogue: 0,0:03:17.54,0:03:19.14,英文,,0,0,0,,So maybe this slide will help.
Dialogue: 0,0:03:17.54,0:03:19.14,中文,,0,0,0,,也许这张幻灯片会有所帮助
Dialogue: 0,0:03:19.14,0:03:20.08,英文,,0,0,0,,So let's see.
Dialogue: 0,0:03:19.14,0:03:20.08,中文,,0,0,0,,让我们看看
Dialogue: 0,0:03:20.08,0:03:29.17,英文,,0,0,0,,If I have this edge, and I relax it, and it's pointing at a visited vertex, and I succeed, that tells me that E now has a new best distance of negative 13.
Dialogue: 0,0:03:20.08,0:03:29.17,中文,,0,0,0,,如果我有这条边 我松弛它 它指向一个已访问的顶点 并且我成功了 这告诉我 E 现在有一个新的最佳距离 -13
Dialogue: 0,0:03:29.17,0:03:32.45,英文,,0,0,0,,Before, I was very confident the best way to get to E is 2.
Dialogue: 0,0:03:29.17,0:03:32.45,中文,,0,0,0,,以前 我非常确信到达 E 的最佳方式是 2
Dialogue: 0,0:03:32.45,0:03:37.58,英文,,0,0,0,,Now, suddenly, there's a negative 13 magical negative weight edge to get to E.
Dialogue: 0,0:03:32.45,0:03:37.58,中文,,0,0,0,,现在 突然之间 出现了一个神奇的负权重边 -13 来到达 E
Dialogue: 0,0:03:37.58,0:03:50.13,英文,,0,0,0,,So your next logical step after seeing this should be, well, if I have a great way to get to E, why don't I use that same magical edge great way to get to E to get to F?
Dialogue: 0,0:03:37.58,0:03:50.13,中文,,0,0,0,,看到这一点后 你的下一步应该是 如果我有一个很好的方法到达 E 为什么我不使用相同的魔法边到达 E 的好方法来到达 F？
Dialogue: 0,0:03:50.13,0:03:53.29,英文,,0,0,0,,So in this case, the best way to get to F, it really shouldn't be 3.
Dialogue: 0,0:03:50.13,0:03:53.29,中文,,0,0,0,,在这种情况下 到达 F 的最佳方式 它真的不应该为 3
Dialogue: 0,0:03:53.29,0:03:53.85,英文,,0,0,0,,It should be what?
Dialogue: 0,0:03:53.29,0:03:53.85,中文,,0,0,0,,它应该是什么？
Dialogue: 0,0:03:53.85,0:03:56.37,英文,,0,0,0,,It should be negative 12.
Dialogue: 0,0:03:53.85,0:03:56.37,中文,,0,0,0,,它应该是 -12
Dialogue: 0,0:03:56.37,0:03:57.99,英文,,0,0,0,,Because right now, we say it's 3.
Dialogue: 0,0:03:56.37,0:03:57.99,中文,,0,0,0,,因为现在 我们说它是 3
Dialogue: 0,0:03:57.99,0:04:01.72,英文,,0,0,0,,But actually, this negative 13 plus 1 is better.
Dialogue: 0,0:03:57.99,0:04:01.72,中文,,0,0,0,,但实际上 这个 -13 加 1 更好
Dialogue: 0,0:04:01.72,0:04:02.66,英文,,0,0,0,,But here's the problem.
Dialogue: 0,0:04:01.72,0:04:02.66,中文,,0,0,0,,但问题是
Dialogue: 0,0:04:02.66,0:04:04.70,英文,,0,0,0,,This is why Dijkstra's fails.
Dialogue: 0,0:04:02.66,0:04:04.70,中文,,0,0,0,,这就是 Dijkstra 失败的原因
Dialogue: 0,0:04:04.70,0:04:12.46,英文,,0,0,0,,Even though I found this beautiful, magical, new way to get to E, I'm never going to visit E again, because it's already been marked.
Dialogue: 0,0:04:04.70,0:04:12.46,中文,,0,0,0,,即使我找到了这个美丽的、神奇的、新的到达 E 的方法 我也不会再访问 E 了 因为它已经被标记了
Dialogue: 0,0:04:12.46,0:04:21.69,英文,,0,0,0,,So Dijkstra fails to consider the next step, which is, I should really go back to E and double-check this edge again, because now I have a better way to get to F.
Dialogue: 0,0:04:12.46,0:04:21.69,中文,,0,0,0,,所以 Dijkstra 没有考虑到下一步 那就是 我真的应该回到 E 并再次检查这条边 因为现在我有一个更好的方法到达 F
Dialogue: 0,0:04:21.69,0:04:24.25,英文,,0,0,0,,So roughly speaking, that's why Dijkstra's fails.
Dialogue: 0,0:04:21.69,0:04:24.25,中文,,0,0,0,,粗略地说 这就是 Dijkstra 失败的原因
Dialogue: 0,0:04:24.25,0:04:25.86,英文,,0,0,0,,This relaxation succeeds.
Dialogue: 0,0:04:24.25,0:04:25.86,中文,,0,0,0,,这种松弛成功了
Dialogue: 0,0:04:25.86,0:04:29.62,英文,,0,0,0,,Dijkstra should have been smarter and checked this edge again, but it does not.
Dialogue: 0,0:04:25.86,0:04:29.62,中文,,0,0,0,,Dijkstra 应该更聪明一些 再次检查这条边 但它没有
Dialogue: 0,0:04:29.62,0:04:36.17,英文,,0,0,0,,And if you want to modify Dijkstra so that it checks edges and rechecks them, that's different algorithms out there
Dialogue: 0,0:04:29.62,0:04:36.17,中文,,0,0,0,,如果你想修改 Dijkstra 使其检查边并重新检查它们 那么存在其他适用于负边权重的算法
Dialogue: 0,0:04:36.17,0:04:41.17,英文,,0,0,0,,that do work on negative edge weights that we won't talk about in this class, but you can look them up if you are curious.
Dialogue: 0,0:04:36.17,0:04:41.17,中文,,0,0,0,,我们不会在本课中讨论它们 但如果你好奇 可以查阅它们
Dialogue: 0,0:04:41.17,0:04:45.73,英文,,0,0,0,,But for plain old Dijkstra's algorithm, negative edges are no good.
Dialogue: 0,0:04:41.17,0:04:45.73,中文,,0,0,0,,但是对于普通的 Dijkstra's 算法 负边是不可取的
Dialogue: 0,0:04:45.73,0:04:46.56,英文,,0,0,0,,Okay.
Dialogue: 0,0:04:45.73,0:04:46.56,中文,,0,0,0,,好的
Dialogue: 0,0:04:46.56,0:04:49.16,英文,,0,0,0,,So, oh well, this is wrong.
Dialogue: 0,0:04:46.56,0:04:49.16,中文,,0,0,0,,哦 好吧 这是错的
Dialogue: 0,0:04:49.16,0:04:50.41,英文,,0,0,0,,Dijkstra's fails.
Dialogue: 0,0:04:49.16,0:04:50.41,中文,,0,0,0,,Dijkstra 失败了
Dialogue: 0,0:04:50.41,0:04:54.53,英文,,0,0,0,,So now, the problem for you is, can we do better than Dijkstra's?
Dialogue: 0,0:04:50.41,0:04:54.53,中文,,0,0,0,,现在 你的问题是 我们能做得比 Dijkstra 更好吗？
Dialogue: 0,0:04:54.53,0:04:58.09,英文,,0,0,0,,So, yeah, Dijkstra was a pretty smart guy, but beat him, do better.
Dialogue: 0,0:04:54.53,0:04:58.09,中文,,0,0,0,,是的 Dijkstra 是一个非常聪明的人 但要打败他 做得更好
Dialogue: 0,0:04:58.09,0:05:08.16,英文,,0,0,0,,So here is the same graph with negative edge weights, and I want you to come up with a shortest paths algorithm that works even if there are negative edge weights.
Dialogue: 0,0:04:58.09,0:05:08.16,中文,,0,0,0,,这是同一个带有负边权重的图 我希望你提出一个即使存在负边权重也能工作最短路径算法
Dialogue: 0,0:05:08.16,0:05:13.90,英文,,0,0,0,,But I'll make the problem a little nicer, and I'll say, this graph is guaranteed to be a directed acyclic graph.
Dialogue: 0,0:05:08.16,0:05:13.90,中文,,0,0,0,,但我会让这个问题更简单一些 我会说 这个图保证是一个有向无环图
Dialogue: 0,0:05:13.90,0:05:16.60,英文,,0,0,0,,There are no cycles.
Dialogue: 0,0:05:13.90,0:05:16.60,中文,,0,0,0,,没有环
Dialogue: 0,0:05:16.60,0:05:21.72,英文,,0,0,0,,If there are no cycles, well, maybe I can do something smarter that doesn't work for all the graphs.
Dialogue: 0,0:05:16.60,0:05:21.72,中文,,0,0,0,,如果没有环 那么 也许我可以做一些更聪明的事情 但它不适用于所有图
Dialogue: 0,0:05:21.72,0:05:26.99,英文,,0,0,0,,So if someone tells me something special, like, hey, this graph is a super special directed acyclic graph.
Dialogue: 0,0:05:21.72,0:05:26.99,中文,,0,0,0,,如果有人告诉我一些特别的事情 比如 嘿 这个图是一个超级特殊的定向无环图
Dialogue: 0,0:05:26.99,0:05:27.95,英文,,0,0,0,,It's not just any graph.
Dialogue: 0,0:05:26.99,0:05:27.95,中文,,0,0,0,,它不仅仅是任何图
Dialogue: 0,0:05:27.95,0:05:29.57,英文,,0,0,0,,It's a graph with no cycles.
Dialogue: 0,0:05:27.95,0:05:29.57,中文,,0,0,0,,它是一个没有环的图
Dialogue: 0,0:05:29.57,0:05:35.08,英文,,0,0,0,,Maybe I could do a smarter algorithm that can consider negative edges, like that one.
Dialogue: 0,0:05:29.57,0:05:35.08,中文,,0,0,0,,也许我可以做一个更聪明的算法 可以考虑负边 就像那个
Dialogue: 0,0:05:35.08,0:05:39.08,英文,,0,0,0,,So the one thing I'll tell you is, you still have to use the relax operation.
Dialogue: 0,0:05:35.08,0:05:39.08,中文,,0,0,0,,我要告诉你的一件事是 你仍然必须使用 松弛操作
Dialogue: 0,0:05:39.08,0:05:45.18,英文,,0,0,0,,So there are other clever algorithms out there, but I want you to still use the relax operation as the building block.
Dialogue: 0,0:05:39.08,0:05:45.18,中文,,0,0,0,,还有其他聪明的算法 但我希望你仍然使用 松弛操作作为构建块
Dialogue: 0,0:05:45.18,0:05:48.27,英文,,0,0,0,,So I want you to relax all of the nodes one by one.
Dialogue: 0,0:05:45.18,0:05:48.27,中文,,0,0,0,,我希望你一个接一个地 松弛 所有节点
Dialogue: 0,0:05:48.27,0:05:52.19,英文,,0,0,0,,And so the main question left then is, what order do you relax the nodes?
Dialogue: 0,0:05:48.27,0:05:52.19,中文,,0,0,0,,剩下的主要问题是 你按照什么顺序 松弛 节点？
Dialogue: 0,0:05:52.19,0:05:56.11,英文,,0,0,0,,Dijkstra said to relax in best first, but that didn't work on negative edges.
Dialogue: 0,0:05:52.19,0:05:56.11,中文,,0,0,0,,Dijkstra 说要按照最佳优先的方式 松弛 但这在负边上不起作用
Dialogue: 0,0:05:56.11,0:06:00.61,英文,,0,0,0,,You can't do best first, like one away, two away, three away, on negative edges.
Dialogue: 0,0:05:56.11,0:06:00.61,中文,,0,0,0,,你不能像一个距离、两个距离、三个距离那样 在负边上做最佳优先
Dialogue: 0,0:06:00.61,0:06:04.00,英文,,0,0,0,,So what is the order to relax these nodes in?
Dialogue: 0,0:06:00.61,0:06:04.00,中文,,0,0,0,,那么 松弛 这些节点的顺序是什么呢？
Dialogue: 0,0:06:04.00,0:06:11.56,英文,,0,0,0,,So maybe this question is, think about, what is the only order we've been talking about for the last hour of lecture?
Dialogue: 0,0:06:04.00,0:06:11.56,中文,,0,0,0,,也许这个问题是 想想看 在过去一小时的课程中 我们一直在谈论的唯一顺序是什么？
Dialogue: 0,0:06:11.56,0:06:13.78,英文,,0,0,0,,Hour's worth of lecture, I suppose.
Dialogue: 0,0:06:11.56,0:06:13.78,中文,,0,0,0,,我想是一个小时的课程
Dialogue: 0,0:06:13.78,0:06:16.32,英文,,0,0,0,,What order do you want to relax the vertices in?
Dialogue: 0,0:06:13.78,0:06:16.32,中文,,0,0,0,,你希望按照什么顺序 松弛 顶点？
Dialogue: 0,0:06:16.32,0:06:20.37,英文,,0,0,0,,It's like only one order we've talked about in the last hour.
Dialogue: 0,0:06:16.32,0:06:20.37,中文,,0,0,0,,这就像我们在过去一小时里谈论的唯一顺序
Dialogue: 0,0:06:20.37,0:06:22.02,英文,,0,0,0,,Yeah?
Dialogue: 0,0:06:20.37,0:06:22.02,中文,,0,0,0,,是吗？
Dialogue: 0,0:06:22.02,0:06:23.76,英文,,0,0,0,,Topological order, genius.
Dialogue: 0,0:06:22.02,0:06:23.76,中文,,0,0,0,,拓扑顺序 天才
Dialogue: 0,0:06:23.76,0:06:24.86,英文,,0,0,0,,How did you come up with that?
Dialogue: 0,0:06:23.76,0:06:24.86,中文,,0,0,0,,你是怎么想出来的？
Dialogue: 0,0:06:24.86,0:06:26.73,英文,,0,0,0,,So let's try it.
Dialogue: 0,0:06:24.86,0:06:26.73,中文,,0,0,0,,让我们试试
Dialogue: 0,0:06:26.73,0:06:34.73,英文,,0,0,0,,What if, instead of visiting the vertices in best first order or any other order, what if I use that topological left to right order that I saw?
Dialogue: 0,0:06:26.73,0:06:34.73,中文,,0,0,0,,如果 不是按照最佳优先顺序或任何其他顺序访问顶点 如果我使用我看到的从左到右的拓扑顺序呢？
Dialogue: 0,0:06:34.73,0:06:42.12,英文,,0,0,0,,So instead of using a priority queue to say, this is my best known closest edge or my closest vertex, let me go visit that vertex next.
Dialogue: 0,0:06:34.73,0:06:42.12,中文,,0,0,0,,不是使用优先队列来说 这是我已知的最佳最短边或我的最短顶点 让我接下来去访问那个顶点
Dialogue: 0,0:06:42.12,0:06:43.02,英文,,0,0,0,,What if?
Dialogue: 0,0:06:42.12,0:06:43.02,中文,,0,0,0,,如果呢？
Dialogue: 0,0:06:43.02,0:06:47.37,英文,,0,0,0,,I just forced you to visit all of the vertices in topological order.
Dialogue: 0,0:06:43.02,0:06:47.37,中文,,0,0,0,,我只是强迫你按照拓扑顺序访问所有顶点
Dialogue: 0,0:06:47.37,0:06:51.41,英文,,0,0,0,,I don't let the algorithm pick, oh, I want to visit B next or D next.
Dialogue: 0,0:06:47.37,0:06:51.41,中文,,0,0,0,,我不让算法选择 哦 我想接下来访问 b 或 D
Dialogue: 0,0:06:51.41,0:07:00.64,英文,,0,0,0,,I force the algorithm, go A, D, B, C, E, F. That's the order you're going to relax in and visit the edges in and visit the nodes in.
Dialogue: 0,0:06:51.41,0:07:00.64,中文,,0,0,0,,我强迫算法 走 A、D、B、C、E、F 这就是你将要松弛边的顺序 访问边的顺序 访问节点的顺序
Dialogue: 0,0:07:00.64,0:07:01.69,英文,,0,0,0,,That's it.
Dialogue: 0,0:07:00.64,0:07:01.69,中文,,0,0,0,,就是这样
Dialogue: 0,0:07:01.69,0:07:02.81,英文,,0,0,0,,OK.
Dialogue: 0,0:07:01.69,0:07:02.81,中文,,0,0,0,,好的
Dialogue: 0,0:07:02.81,0:07:04.07,英文,,0,0,0,,So let's try running this algorithm.
Dialogue: 0,0:07:02.81,0:07:04.07,中文,,0,0,0,,让我们尝试运行这个算法
Dialogue: 0,0:07:04.07,0:07:07.91,英文,,0,0,0,,The first thing to do is to take this graph and topologically sort it.
Dialogue: 0,0:07:04.07,0:07:07.91,中文,,0,0,0,,首先要做的是对这个图进行拓扑排序
Dialogue: 0,0:07:07.91,0:07:13.65,英文,,0,0,0,,So take the nodes, drag them around on the page so that all of the edges point from left to right.
Dialogue: 0,0:07:07.91,0:07:13.65,中文,,0,0,0,,取这些节点 在页面上拖动它们 使所有边都从左指向右
Dialogue: 0,0:07:13.65,0:07:15.83,英文,,0,0,0,,I've done that for you here.
Dialogue: 0,0:07:13.65,0:07:15.83,中文,,0,0,0,,我已经在这里为你做好了
Dialogue: 0,0:07:15.83,0:07:19.95,英文,,0,0,0,,And you can use something like the depth-first paths algorithm to do so.
Dialogue: 0,0:07:15.83,0:07:19.95,中文,,0,0,0,,你可以使用像深度优先路径算法之类的东西来做到这一点
Dialogue: 0,0:07:19.95,0:07:22.14,英文,,0,0,0,,So now we're going to visit all the vertices.
Dialogue: 0,0:07:19.95,0:07:22.14,中文,,0,0,0,,现在我们要访问所有顶点
Dialogue: 0,0:07:22.14,0:07:29.22,英文,,0,0,0,,But instead of using something like Dijkstra's, where I'll keep track of, well, the best-known distance to d is 2, and the best-known distance to b is whatever.
Dialogue: 0,0:07:22.14,0:07:29.22,中文,,0,0,0,,但是 不是使用像 Dijkstra 这样的东西 我会跟踪 到 D 的最佳已知距离为 2 到 B 的最佳已知距离为任何值
Dialogue: 0,0:07:29.22,0:07:30.68,英文,,0,0,0,,So I'll visit this one first.
Dialogue: 0,0:07:29.22,0:07:30.68,中文,,0,0,0,,我将首先访问这个
Dialogue: 0,0:07:30.68,0:07:34.38,英文,,0,0,0,,I'm going to force you to visit this order, left to right.
Dialogue: 0,0:07:30.68,0:07:34.38,中文,,0,0,0,,我将强制你按照从左到右的顺序访问这个排序
Dialogue: 0,0:07:34.38,0:07:35.36,英文,,0,0,0,,So here we go.
Dialogue: 0,0:07:34.38,0:07:35.36,中文,,0,0,0,,开始吧
Dialogue: 0,0:07:35.36,0:07:39.57,英文,,0,0,0,,I'm going to do it first, and then we'll come back and see why it actually works.
Dialogue: 0,0:07:35.36,0:07:39.57,中文,,0,0,0,,我先演示一遍 然后再回来看看为什么它确实有效
Dialogue: 0,0:07:39.57,0:07:40.45,英文,,0,0,0,,So look at my fringe.
Dialogue: 0,0:07:39.57,0:07:40.45,中文,,0,0,0,,看看我的边缘列表
Dialogue: 0,0:07:40.45,0:07:42.19,英文,,0,0,0,,There's no more priorities.
Dialogue: 0,0:07:40.45,0:07:42.19,中文,,0,0,0,,没有优先级了
Dialogue: 0,0:07:42.19,0:07:44.11,英文,,0,0,0,,I'm not picking which vertex to visit.
Dialogue: 0,0:07:42.19,0:07:44.11,中文,,0,0,0,,我不再选择要访问哪个顶点
Dialogue: 0,0:07:44.11,0:07:48.01,英文,,0,0,0,,Next, the fringe says, you're going a, d, b, c, e, f.
Dialogue: 0,0:07:44.11,0:07:48.01,中文,,0,0,0,,接下来 边缘列表说 你要走 A、D、B、C、E、F
Dialogue: 0,0:07:48.01,0:07:49.64,英文,,0,0,0,,That's the order you're going to go in.
Dialogue: 0,0:07:48.01,0:07:49.64,中文,,0,0,0,,这就是你要走的顺序
Dialogue: 0,0:07:49.64,0:07:51.76,英文,,0,0,0,,No takebacks, no change in your mind.
Dialogue: 0,0:07:49.64,0:07:51.76,中文,,0,0,0,,不能反悔 不能改变主意
Dialogue: 0,0:07:51.76,0:07:55.62,英文,,0,0,0,,So I'll start at A, and I'll relax all of its outgoing edges.
Dialogue: 0,0:07:51.76,0:07:55.62,中文,,0,0,0,,我从 A 开始 然后我会松弛它所有出去的边
Dialogue: 0,0:07:55.62,0:07:57.98,英文,,0,0,0,,So I start at A. It's just got this one edge.
Dialogue: 0,0:07:55.62,0:07:57.98,中文,,0,0,0,,我从 A 开始 它只有一条边
Dialogue: 0,0:07:57.98,0:07:59.83,英文,,0,0,0,,I won't bore you with the relaxations.
Dialogue: 0,0:07:57.98,0:07:59.83,中文,,0,0,0,,我就不再赘述松弛操作了
Dialogue: 0,0:07:59.83,0:08:01.49,英文,,0,0,0,,I guess it's got this one, too.
Dialogue: 0,0:07:59.83,0:08:01.49,中文,,0,0,0,,我猜它还有这条边
Dialogue: 0,0:08:01.49,0:08:08.99,英文,,0,0,0,,So both of these edges, the relaxations succeed, and D and B have better distances now.
Dialogue: 0,0:08:01.49,0:08:08.99,中文,,0,0,0,,这两条边 松弛操作都成功了 D 和 B 现在有了更好的距离
Dialogue: 0,0:08:08.99,0:08:12.80,英文,,0,0,0,,OK, which vertex do we visit next?
Dialogue: 0,0:08:08.99,0:08:12.80,中文,,0,0,0,,好的 接下来我们访问哪个顶点？
Dialogue: 0,0:08:12.80,0:08:16.84,英文,,0,0,0,,Normally, we go to the priority queue, change the priorities, check the priorities.
Dialogue: 0,0:08:12.80,0:08:16.84,中文,,0,0,0,,通常 我们会去优先级队列 更改优先级 检查优先级
Dialogue: 0,0:08:16.84,0:08:19.82,英文,,0,0,0,,But this algorithm says left to right.
Dialogue: 0,0:08:16.84,0:08:19.82,中文,,0,0,0,,但这个算法说要从左到右
Dialogue: 0,0:08:19.82,0:08:23.00,英文,,0,0,0,,So now we'll visit D, look at all of its outgoing edges.
Dialogue: 0,0:08:19.82,0:08:23.00,中文,,0,0,0,,现在我们将访问 D 看看它所有出去的边
Dialogue: 0,0:08:23.00,0:08:23.76,英文,,0,0,0,,And I'll go quickly.
Dialogue: 0,0:08:23.00,0:08:23.76,中文,,0,0,0,,我会快速进行
Dialogue: 0,0:08:23.76,0:08:24.73,英文,,0,0,0,,So let's see.
Dialogue: 0,0:08:23.76,0:08:24.73,中文,,0,0,0,,让我们看看
Dialogue: 0,0:08:24.73,0:08:26.57,英文,,0,0,0,,To get to D, it costs 1.
Dialogue: 0,0:08:24.73,0:08:26.57,中文,,0,0,0,,到达 D 的成本是 1
Dialogue: 0,0:08:26.57,0:08:28.65,英文,,0,0,0,,Another one to get to E, 2.
Dialogue: 0,0:08:26.57,0:08:28.65,中文,,0,0,0,,再走一个到 E 2
Dialogue: 0,0:08:28.65,0:08:29.65,英文,,0,0,0,,Better than infinity.
Dialogue: 0,0:08:28.65,0:08:29.65,中文,,0,0,0,,比无穷大好
Dialogue: 0,0:08:29.65,0:08:30.75,英文,,0,0,0,,Good.
Dialogue: 0,0:08:29.65,0:08:30.75,中文,,0,0,0,,很好
Dialogue: 0,0:08:30.75,0:08:34.03,英文,,0,0,0,,This one costs 2 to get to B. That's not good.
Dialogue: 0,0:08:30.75,0:08:34.03,中文,,0,0,0,,这条边到 B 的成本是 2 那不太好
Dialogue: 0,0:08:34.03,0:08:35.83,英文,,0,0,0,,So we'll throw out this edge.
Dialogue: 0,0:08:34.03,0:08:35.83,中文,,0,0,0,,我们将丢弃这条边
Dialogue: 0,0:08:35.83,0:08:36.79,英文,,0,0,0,,Good.
Dialogue: 0,0:08:35.83,0:08:36.79,中文,,0,0,0,,很好
Dialogue: 0,0:08:36.79,0:08:38.09,英文,,0,0,0,,OK, we keep going.
Dialogue: 0,0:08:36.79,0:08:38.09,中文,,0,0,0,,好的 我们继续
Dialogue: 0,0:08:38.09,0:08:41.06,英文,,0,0,0,,Here we are at b, and we relax its outgoing edge.
Dialogue: 0,0:08:38.09,0:08:41.06,中文,,0,0,0,,我们现在在 B 我们松弛它出去的边
Dialogue: 0,0:08:41.06,0:08:43.86,英文,,0,0,0,,1 plus 6 is 7, better than infinity.
Dialogue: 0,0:08:41.06,0:08:43.86,中文,,0,0,0,,1 加 6 等于 7 比无穷大好
Dialogue: 0,0:08:43.86,0:08:46.08,英文,,0,0,0,,c, we relax its outgoing edges.
Dialogue: 0,0:08:43.86,0:08:46.08,中文,,0,0,0,,c 我们松弛它出去的边
Dialogue: 0,0:08:46.08,0:08:48.90,英文,,0,0,0,,Here's that magical negative edge we talked about.
Dialogue: 0,0:08:46.08,0:08:48.90,中文,,0,0,0,,这就是我们之前谈到的神奇的负边
Dialogue: 0,0:08:48.90,0:08:52.88,英文,,0,0,0,,7 minus 20 is negative 13, which is better than 2.
Dialogue: 0,0:08:48.90,0:08:52.88,中文,,0,0,0,,7 减 20 等于 -13 这比 2 好
Dialogue: 0,0:08:52.88,0:08:56.20,英文,,0,0,0,,And 8 is better than infinity, so we add those.
Dialogue: 0,0:08:52.88,0:08:56.20,中文,,0,0,0,,8 比无穷大好 所以我们加上这些
Dialogue: 0,0:08:56.20,0:08:59.16,英文,,0,0,0,,Here we are at e, and here's the one that Dijkstra's missed.
Dialogue: 0,0:08:56.20,0:08:59.16,中文,,0,0,0,,我们现在在 e 这是 Dijkstra's 算法错过的那个
Dialogue: 0,0:08:59.16,0:09:02.88,英文,,0,0,0,,Remember, Dijkstra's did not see the best path to f.
Dialogue: 0,0:08:59.16,0:09:02.88,中文,,0,0,0,,记住 Dijkstra's 算法没有看到到 f 的最佳路径
Dialogue: 0,0:09:02.88,0:09:06.57,英文,,0,0,0,,But this algorithm, the DAG shortest path tree algorithm, it does see.
Dialogue: 0,0:09:02.88,0:09:06.57,中文,,0,0,0,,但这个算法 DAG 最短路径树算法 它确实看到了
Dialogue: 0,0:09:06.57,0:09:09.29,英文,,0,0,0,,It says, well, to get to E is negative 13.
Dialogue: 0,0:09:06.57,0:09:09.29,中文,,0,0,0,,它说 好吧 到 E 的成本是 -13
Dialogue: 0,0:09:09.29,0:09:10.61,英文,,0,0,0,,I pay an extra 1.
Dialogue: 0,0:09:09.29,0:09:10.61,中文,,0,0,0,,我额外支付 1
Dialogue: 0,0:09:10.61,0:09:13.37,英文,,0,0,0,,So to get to F costs me negative 12.
Dialogue: 0,0:09:10.61,0:09:13.37,中文,,0,0,0,,所以到 F 的成本是 -12
Dialogue: 0,0:09:13.37,0:09:14.49,英文,,0,0,0,,That's better than 8.
Dialogue: 0,0:09:13.37,0:09:14.49,中文,,0,0,0,,这比 8 好
Dialogue: 0,0:09:14.49,0:09:15.68,英文,,0,0,0,,So I'll use that.
Dialogue: 0,0:09:14.49,0:09:15.68,中文,,0,0,0,,我将使用它
Dialogue: 0,0:09:15.68,0:09:22.90,英文,,0,0,0,,And I found the shortest path tree for this DAG by scanning in topological order.
Dialogue: 0,0:09:15.68,0:09:22.90,中文,,0,0,0,,我通过按拓扑顺序扫描找到了这个 DAG 的最短路径树
Dialogue: 0,0:09:22.90,0:09:25.54,英文,,0,0,0,,At its core, the algorithm, you already know how to run it.
Dialogue: 0,0:09:22.90,0:09:25.54,中文,,0,0,0,,在核心部分 这个算法 你已经知道如何运行它了
Dialogue: 0,0:09:25.54,0:09:28.90,英文,,0,0,0,,You just do lots and lots of relaxations in the right order.
Dialogue: 0,0:09:25.54,0:09:28.90,中文,,0,0,0,,你只需要按照正确的顺序进行大量的松弛操作
Dialogue: 0,0:09:28.90,0:09:31.32,英文,,0,0,0,,So now, let me try and convince you why it works.
Dialogue: 0,0:09:28.90,0:09:31.32,中文,,0,0,0,,现在 让我试着说服你为什么它有效
Dialogue: 0,0:09:31.32,0:09:33.88,英文,,0,0,0,,So I'm going to pause the movie.
Dialogue: 0,0:09:31.32,0:09:33.88,中文,,0,0,0,,我将暂停视频
Dialogue: 0,0:09:33.88,0:09:34.85,英文,,0,0,0,,Where should I pause it?
Dialogue: 0,0:09:33.88,0:09:34.85,中文,,0,0,0,,我应该在哪里暂停？
Dialogue: 0,0:09:34.85,0:09:35.61,英文,,0,0,0,,OK.
Dialogue: 0,0:09:34.85,0:09:35.61,中文,,0,0,0,,好的
Dialogue: 0,0:09:35.61,0:09:37.91,英文,,0,0,0,,How about I pause it here?
Dialogue: 0,0:09:35.61,0:09:37.91,中文,,0,0,0,,不如我在这里暂停？
Dialogue: 0,0:09:37.91,0:09:42.77,英文,,0,0,0,,So at this point, I have visited A, D, B, because I'm going left to right.
Dialogue: 0,0:09:37.91,0:09:42.77,中文,,0,0,0,,在这一点上 我已经访问了 A、D、B 因为我从左到右
Dialogue: 0,0:09:42.77,0:09:45.95,英文,,0,0,0,,I have not visited C, E, and F yet.
Dialogue: 0,0:09:42.77,0:09:45.95,中文,,0,0,0,,我还没有访问 C、E 和 F
Dialogue: 0,0:09:45.95,0:09:49.96,英文,,0,0,0,,That's the order that I'm going, left to right, always.
Dialogue: 0,0:09:45.95,0:09:49.96,中文,,0,0,0,,这就是我前进的顺序 总是从左到右
Dialogue: 0,0:09:49.96,0:09:56.40,英文,,0,0,0,,Remember that thing about Dijkstra's algorithm where I said if we relax a vertex to a visited,
Dialogue: 0,0:09:49.96,0:09:56.40,中文,,0,0,0,,还记得关于 Dijkstra's 算法的事情吗？我说过 如果我们将一个顶点松弛到一个已访问的顶点
Dialogue: 0,0:09:56.40,0:10:01.40,英文,,0,0,0,,or relax an edge to a visited vertex and the relaxation succeeds, we're in trouble?
Dialogue: 0,0:09:56.40,0:10:01.40,中文,,0,0,0,,或者将一条边松弛到一个已访问的顶点 并且松弛操作成功了 那我们就麻烦了？
Dialogue: 0,0:10:01.40,0:10:08.56,英文,,0,0,0,,Well, think about all of the edges coming out of B. So here I am, or I guess here I'm visiting, sorry, I'll pick a better vertex.
Dialogue: 0,0:10:01.40,0:10:08.56,中文,,0,0,0,,想想所有从 B 出去的边 所以我在这里 或者我猜我正在访问 抱歉 我会选择一个更好的顶点
Dialogue: 0,0:10:08.56,0:10:09.46,英文,,0,0,0,,No, this one's good.
Dialogue: 0,0:10:08.56,0:10:09.46,中文,,0,0,0,,不 这个很好
Dialogue: 0,0:10:09.46,0:10:14.54,英文,,0,0,0,,Okay, here I am at B, I visited B, and I'm looking at all of the outgoing edges from B.
Dialogue: 0,0:10:09.46,0:10:14.54,中文,,0,0,0,,好的 我在这里在 B 我访问了 B 我正在查看从 B 出去的所有边
Dialogue: 0,0:10:14.54,0:10:18.84,英文,,0,0,0,,Now, if any of those edges point at a white vertex, we're in trouble.
Dialogue: 0,0:10:14.54,0:10:18.84,中文,,0,0,0,,现在 如果这些边中的任何一条指向一个白色的顶点 那我们就麻烦了
Dialogue: 0,0:10:18.84,0:10:23.83,英文,,0,0,0,,So I do not want any of the edges pointing out of B to point to a white vertex.
Dialogue: 0,0:10:18.84,0:10:23.83,中文,,0,0,0,,我不想让任何从 B 指出去的边指向一个白色的顶点
Dialogue: 0,0:10:23.83,0:10:25.93,英文,,0,0,0,,If they do, we're in trouble.
Dialogue: 0,0:10:23.83,0:10:25.93,中文,,0,0,0,,如果它们这样做了 那我们就麻烦了
Dialogue: 0,0:10:25.93,0:10:28.27,英文,,0,0,0,,How do you know that we're never in trouble?
Dialogue: 0,0:10:25.93,0:10:28.27,中文,,0,0,0,,你怎么知道我们永远不会遇到麻烦？
Dialogue: 0,0:10:28.27,0:10:37.83,英文,,0,0,0,,How can you guarantee that here I am at B, I'm going to check all of its outgoing edges, and I'm terrified that one of the edges points back at a white vertex, and I'll be in trouble?
Dialogue: 0,0:10:28.27,0:10:37.83,中文,,0,0,0,,你怎么能保证我在这里在 B 我将检查它所有出去的边 我很害怕其中一条边指向一个白色的顶点 然后我就会陷入麻烦？
Dialogue: 0,0:10:37.83,0:10:42.29,英文,,0,0,0,,But why am I so confident that I will never touch a white vertex?
Dialogue: 0,0:10:37.83,0:10:42.29,中文,,0,0,0,,但我为什么如此确信我永远不会碰到一个白色的顶点？
Dialogue: 0,0:10:42.29,0:10:45.47,英文,,0,0,0,,Because what direction are these arrows pointing in?
Dialogue: 0,0:10:42.29,0:10:45.47,中文,,0,0,0,,因为这些箭头指向哪个方向？
Dialogue: 0,0:10:45.47,0:10:47.09,英文,,0,0,0,,That way, right?
Dialogue: 0,0:10:45.47,0:10:47.09,中文,,0,0,0,,那边 对吧？
Dialogue: 0,0:10:47.09,0:10:50.47,英文,,0,0,0,,Because all of my arrows point from left to right.
Dialogue: 0,0:10:47.09,0:10:50.47,中文,,0,0,0,,因为我所有的箭头都从左指向右
Dialogue: 0,0:10:50.47,0:10:54.37,英文,,0,0,0,,All of them will be pointing at non-visited green vertices.
Dialogue: 0,0:10:50.47,0:10:54.37,中文,,0,0,0,,它们都将指向未访问的绿色顶点
Dialogue: 0,0:10:54.37,0:11:00.49,英文,,0,0,0,,So I'll never run into that Dijkstra's trap where I'm looking at an edge pointing at a vertex that I visited before.
Dialogue: 0,0:10:54.37,0:11:00.49,中文,,0,0,0,,我永远不会陷入 Dijkstra's 算法的陷阱 即我看着一条边指向我之前访问过的顶点
Dialogue: 0,0:11:00.49,0:11:04.66,英文,,0,0,0,,And the reason I can guarantee that is because all of the edges point left to right.
Dialogue: 0,0:11:00.49,0:11:04.66,中文,,0,0,0,,我能保证这一点的原因是所有边都从左指向右
Dialogue: 0,0:11:04.66,0:11:07.10,英文,,0,0,0,,So that's the trick that makes this algorithm work.
Dialogue: 0,0:11:04.66,0:11:07.10,中文,,0,0,0,,这就是使这个算法起作用的技巧
Dialogue: 0,0:11:07.10,0:11:08.90,英文,,0,0,0,,So that's one way to think about it.
Dialogue: 0,0:11:07.10,0:11:08.90,中文,,0,0,0,,这是一种思考方式
Dialogue: 0,0:11:08.90,0:11:12.08,英文,,0,0,0,,The other way I came up with to think about it, if you like it better,
Dialogue: 0,0:11:08.90,0:11:12.08,中文,,0,0,0,,我想到的另一种思考方式 如果你更喜欢的话
Dialogue: 0,0:11:12.08,0:11:18.60,英文,,0,0,0,,Alternate explanation is, well, once I get to B, think about all the possible ways to get to B.
Dialogue: 0,0:11:12.08,0:11:18.60,中文,,0,0,0,,另一种解释是 好吧 一旦我到达 B 想想所有到达 B 的可能方法
Dialogue: 0,0:11:18.60,0:11:26.60,英文,,0,0,0,,Could there possibly be, so here I am at B, could there possibly be some magical other edge pointing back at B that I haven't looked at yet?
Dialogue: 0,0:11:18.60,0:11:26.60,中文,,0,0,0,,有没有可能 所以我在这里在 B 有没有可能有一些神奇的其他的边指向 B 而我还没有看过？
Dialogue: 0,0:11:26.60,0:11:29.27,英文,,0,0,0,,Like, could I have F to B?
Dialogue: 0,0:11:26.60,0:11:29.27,中文,,0,0,0,,比如 我可以从 F 到 B 吗？
Dialogue: 0,0:11:29.27,0:11:30.97,英文,,0,0,0,,No, because that's the wrong way.
Dialogue: 0,0:11:29.27,0:11:30.97,中文,,0,0,0,,不 因为那是错误的方向
Dialogue: 0,0:11:30.97,0:11:32.79,英文,,0,0,0,,All the edges point left to right.
Dialogue: 0,0:11:30.97,0:11:32.79,中文,,0,0,0,,所有的边都从左指向右
Dialogue: 0,0:11:32.79,0:11:41.32,英文,,0,0,0,,So once I get to B, all of the edges pointing at B, they must have come from the left side, which means I've checked every possible way to get to B.
Dialogue: 0,0:11:32.79,0:11:41.32,中文,,0,0,0,,一旦我到达 B 所有指向 B 的边 它们都必须来自左侧 这意味着我已经检查了到达 B 的所有可能方法
Dialogue: 0,0:11:41.32,0:11:50.32,英文,,0,0,0,,So by the time I get here, I know for sure this is the best way to get to B. I will never find a better way to get to B and successfully relax some other edge.
Dialogue: 0,0:11:41.32,0:11:50.32,中文,,0,0,0,,当我到达这里时 我确信这是到达 B 的最佳方法 我永远不会找到更好的方法到达 B 并成功地松弛其他边
Dialogue: 0,0:11:50.32,0:11:53.42,英文,,0,0,0,,Because all the ways to get to B, they have to come from this left side.
Dialogue: 0,0:11:50.32,0:11:53.42,中文,,0,0,0,,因为所有到达 B 的方法 它们都必须来自左侧
Dialogue: 0,0:11:53.42,0:11:58.94,英文,,0,0,0,,There could be like a billion nodes on the left side, but I know for sure this is the best way to get to B.
Dialogue: 0,0:11:53.42,0:11:58.94,中文,,0,0,0,,左侧可能会有十亿个节点 但我确信这是到达 B 的最佳方法
Dialogue: 0,0:11:58.94,0:12:05.67,英文,,0,0,0,,And when I'm relaxing the outgoing edges, I know those are all fine, because they're all pointing at green, unvisited vertices.
Dialogue: 0,0:11:58.94,0:12:05.67,中文,,0,0,0,,当我松弛出去的边时 我知道它们都没问题 因为它们都指向绿色的、未访问的顶点
Dialogue: 0,0:12:05.67,0:12:15.15,英文,,0,0,0,,That's something that DAGs gives us, because I can sort it in topological order, whereas a general graph that could have cycles, I would not be able to do this.
Dialogue: 0,0:12:05.67,0:12:15.15,中文,,0,0,0,,这是 DAG 给我们的好处 因为我可以按拓扑顺序对其进行排序 而对于可能存在循环的一般图 我将无法做到这一点
Dialogue: 0,0:12:15.15,0:12:17.07,英文,,0,0,0,,That's the trick that makes it work.
Dialogue: 0,0:12:15.15,0:12:17.07,中文,,0,0,0,,这就是使它起作用的技巧
Dialogue: 0,0:12:17.07,0:12:19.06,英文,,0,0,0,,Thoughts, questions, Zoom, chat?
Dialogue: 0,0:12:17.07,0:12:19.06,中文,,0,0,0,,想法、问题、Zoom、聊天？
Dialogue: 0,0:12:19.06,0:12:20.68,英文,,0,0,0,,OK.
Dialogue: 0,0:12:19.06,0:12:20.68,中文,,0,0,0,,好的
Dialogue: 0,0:12:20.68,0:12:24.96,英文,,0,0,0,,Great, so the invariant is, as I go from left to right, I relax all the edges.
Dialogue: 0,0:12:20.68,0:12:24.96,中文,,0,0,0,,很好 所以不变的是 当我从左到右移动时 我松弛所有边
Dialogue: 0,0:12:24.96,0:12:33.15,英文,,0,0,0,,And the reason why it works is because when I visit an edge, all of the information for how to get to that edge, I've already seen it because I'm scanning left to right.
Dialogue: 0,0:12:24.96,0:12:33.15,中文,,0,0,0,,它之所以有效 是因为当我访问一条边时 所有关于如何到达那条边的信息 我都已经看到了 因为我正在从左到右扫描
Dialogue: 0,0:12:33.15,0:12:36.98,英文,,0,0,0,,I'll never find a better way to get to that particular vertex.
Dialogue: 0,0:12:33.15,0:12:36.98,中文,,0,0,0,,我永远不会找到更好的方法到达那个特定的顶点
Dialogue: 0,0:12:36.98,0:12:39.00,英文,,0,0,0,,OK, so we did some algorithms.
Dialogue: 0,0:12:36.98,0:12:39.00,中文,,0,0,0,,好的 所以我们做了一些算法
Dialogue: 0,0:12:39.00,0:12:43.30,英文,,0,0,0,,We sorted a graph in topological order, provided that it's a DAG.
Dialogue: 0,0:12:39.00,0:12:43.30,中文,,0,0,0,,我们在拓扑顺序中对图进行了排序 前提是它是一个 DAG
Dialogue: 0,0:12:43.30,0:12:46.20,英文,,0,0,0,,We found the shortest path in a DAG, even with negative edges.
Dialogue: 0,0:12:43.30,0:12:46.20,中文,,0,0,0,,我们在 DAG 中找到了最短路径 即使有负边
Dialogue: 0,0:12:46.20,0:12:48.70,英文,,0,0,0,,So we beat Dijkstra at his algorithm.
Dialogue: 0,0:12:46.20,0:12:48.70,中文,,0,0,0,,我们在他的算法上击败了 Dijkstra
Dialogue: 0,0:12:48.70,0:12:54.27,英文,,0,0,0,,So now I'm going to give you one more problem, some philosophy, and then we're out of the graphs unit.
Dialogue: 0,0:12:48.70,0:12:54.27,中文,,0,0,0,,现在我要再给你一个问题 一些哲学 然后我们就结束了图论单元
Dialogue: 0,0:12:54.27,0:12:58.49,英文,,0,0,0,,The other problem I want you to solve is, how about the longest path problem?
Dialogue: 0,0:12:54.27,0:12:58.49,中文,,0,0,0,,我想让你解决的另一个问题是 最长路径问题怎么样？
Dialogue: 0,0:12:58.49,0:13:02.27,英文,,0,0,0,,So I want you to find the longest path from A to every other vertex.
Dialogue: 0,0:12:58.49,0:13:02.27,中文,,0,0,0,,我想让你找到从 A 到每个其他顶点的最长路径
Dialogue: 0,0:13:02.27,0:13:05.39,英文,,0,0,0,,What is the worst way to get from A to D?
Dialogue: 0,0:13:02.27,0:13:05.39,中文,,0,0,0,,从 A 到 D 的最糟糕方法是什么？
Dialogue: 0,0:13:05.39,0:13:12.35,英文,,0,0,0,,So it's like driving directions, but they hate the environment, and you want to drive as far as you can to get to D.
Dialogue: 0,0:13:05.39,0:13:12.35,中文,,0,0,0,,这就像驾驶方向 但他们讨厌环境 你想开车尽可能远地到达 D
Dialogue: 0,0:13:12.35,0:13:15.46,英文,,0,0,0,,OK, so what is the furthest path to d?
Dialogue: 0,0:13:12.35,0:13:15.46,中文,,0,0,0,,好的 那么到 D 的最远路径是什么？
Dialogue: 0,0:13:15.46,0:13:20.10,英文,,0,0,0,,And one restriction I will add is no cycles, because that would be cheating.
Dialogue: 0,0:13:15.46,0:13:20.10,中文,,0,0,0,,我将添加一个限制 即没有循环 因为那将是作弊
Dialogue: 0,0:13:20.10,0:13:29.25,英文,,0,0,0,,If I just go d to e to g to d to e to g, then you can just run up the number of edges used to infinity, and that's cheating.
Dialogue: 0,0:13:20.10,0:13:29.25,中文,,0,0,0,,如果我从 D 到 E 再到 G 再回到 D 再到 E 再到 G 那你就可以无限增加边的数量 这是作弊
Dialogue: 0,0:13:29.25,0:13:32.98,英文,,0,0,0,,So you must come up with paths that don't have cycles.
Dialogue: 0,0:13:29.25,0:13:32.98,中文,,0,0,0,,你必须找到没有环的路径
Dialogue: 0,0:13:32.98,0:13:35.22,英文,,0,0,0,,OK, so this one's actually pretty tough.
Dialogue: 0,0:13:32.98,0:13:35.22,中文,,0,0,0,,好吧 这题其实挺难的
Dialogue: 0,0:13:35.22,0:13:37.48,英文,,0,0,0,,You can stare at it as long as you want.
Dialogue: 0,0:13:35.22,0:13:37.48,中文,,0,0,0,,你可以盯着它看多久都行
Dialogue: 0,0:13:37.48,0:13:38.68,英文,,0,0,0,,It's pretty tough to come up with.
Dialogue: 0,0:13:37.48,0:13:38.68,中文,,0,0,0,,想出答案挺难的
Dialogue: 0,0:13:38.68,0:13:40.00,英文,,0,0,0,,That is the answer.
Dialogue: 0,0:13:38.68,0:13:40.00,中文,,0,0,0,,这就是答案
Dialogue: 0,0:13:40.00,0:13:46.11,英文,,0,0,0,,And the reason why it's tough to come up with is it turns out the best known way to solve this is exponential time.
Dialogue: 0,0:13:40.00,0:13:46.11,中文,,0,0,0,,之所以很难想出答案 是因为解决这个问题的最佳方法是指数级时间复杂度
Dialogue: 0,0:13:46.11,0:13:54.51,英文,,0,0,0,,That is, you simply try all of the edges, like all 2 to the n possible ways to include the edges or exclude the edges.
Dialogue: 0,0:13:46.11,0:13:54.51,中文,,0,0,0,,也就是说 你只需要尝试所有边 比如所有 2 的 n 次方种包含或排除边的可能性
Dialogue: 0,0:13:54.51,0:13:55.21,英文,,0,0,0,,And it's very slow.
Dialogue: 0,0:13:54.51,0:13:55.21,中文,,0,0,0,,而且速度很慢
Dialogue: 0,0:13:55.21,0:13:56.57,英文,,0,0,0,,You're just trying everything.
Dialogue: 0,0:13:55.21,0:13:56.57,中文,,0,0,0,,你只是在尝试所有可能
Dialogue: 0,0:13:56.57,0:13:57.73,英文,,0,0,0,,It's not very smart.
Dialogue: 0,0:13:56.57,0:13:57.73,中文,,0,0,0,,不是很聪明的方法
Dialogue: 0,0:13:57.73,0:14:00.89,英文,,0,0,0,,And you just see which one is the longest path straight.
Dialogue: 0,0:13:57.73,0:14:00.89,中文,,0,0,0,,然后你只要看看哪条是最长的路径
Dialogue: 0,0:14:00.89,0:14:02.49,英文,,0,0,0,,So it's very slow.
Dialogue: 0,0:14:00.89,0:14:02.49,中文,,0,0,0,,速度很慢
Dialogue: 0,0:14:02.49,0:14:10.84,英文,,0,0,0,,It's so slow to the point that if I give you a graph with around 100 vertices, it's unsolvable in the lifetime of our universe.
Dialogue: 0,0:14:02.49,0:14:10.84,中文,,0,0,0,,慢到如果我给你一个大约有 100 个顶点的图 在宇宙的生命周期内都无法解决
Dialogue: 0,0:14:10.84,0:14:16.77,英文,,0,0,0,,The sun will explode before a 100-graph vertex longest-paths problem gets solved.
Dialogue: 0,0:14:10.84,0:14:16.77,中文,,0,0,0,,太阳会在 100 个顶点的图的最长路径问题得到解决之前爆炸
Dialogue: 0,0:14:16.77,0:14:20.70,英文,,0,0,0,,So even on a tiny graph of like 100 vertices, you're never solving this problem.
Dialogue: 0,0:14:16.77,0:14:20.70,中文,,0,0,0,,即使在一个只有 100 个顶点的小图上 你也永远无法解决这个问题
Dialogue: 0,0:14:20.70,0:14:22.66,英文,,0,0,0,,That's how bad this algorithm is.
Dialogue: 0,0:14:20.70,0:14:22.66,中文,,0,0,0,,这个算法就是这么糟糕
Dialogue: 0,0:14:22.66,0:14:28.36,英文,,0,0,0,,The other interesting thing is, if you solve this problem, you'll become very rich and famous because this is a famous problem.
Dialogue: 0,0:14:22.66,0:14:28.36,中文,,0,0,0,,另一个有趣的事情是 如果你解决了这个问题 你会变得非常富有和出名 因为这是一个著名的问题
Dialogue: 0,0:14:28.36,0:14:31.67,英文,,0,0,0,,And we'll tell you why it's so famous in one of the later lectures.
Dialogue: 0,0:14:28.36,0:14:31.67,中文,,0,0,0,,我们会在后面的课程中告诉你为什么它如此出名
Dialogue: 0,0:14:31.67,0:14:34.47,英文,,0,0,0,,But yeah, lecture 39, so come back for that one.
Dialogue: 0,0:14:31.67,0:14:34.47,中文,,0,0,0,,是的 第 39 节课 所以记得回来看
Dialogue: 0,0:14:34.47,0:14:37.17,英文,,0,0,0,,But the important thing is, this is a hard problem.
Dialogue: 0,0:14:34.47,0:14:37.17,中文,,0,0,0,,但重要的是 这是一个难题
Dialogue: 0,0:14:37.17,0:14:38.47,英文,,0,0,0,,No one knows how to solve it.
Dialogue: 0,0:14:37.17,0:14:38.47,中文,,0,0,0,,没人知道如何解决它
Dialogue: 0,0:14:38.47,0:14:42.21,英文,,0,0,0,,You'll be rich and famous if you do.
Dialogue: 0,0:14:38.47,0:14:42.21,中文,,0,0,0,,如果你解决了 你就会变得富有和出名
Dialogue: 0,0:14:42.21,0:14:46.47,英文,,0,0,0,,So my challenge, okay, this is worth a million dollars if you solve it, that's what Justin says.
Dialogue: 0,0:14:42.21,0:14:46.47,中文,,0,0,0,,我的挑战 好吧 如果你解决了它 它值一百万美元 贾斯汀是这么说的
Dialogue: 0,0:14:46.47,0:14:49.05,英文,,0,0,0,,So my challenge for you is, solve this problem.
Dialogue: 0,0:14:46.47,0:14:49.05,中文,,0,0,0,,我的挑战是 解决这个问题
Dialogue: 0,0:14:49.05,0:14:55.12,英文,,0,0,0,,But I will not give you a million dollars because I want you to solve it on a directed acyclic graph.
Dialogue: 0,0:14:49.05,0:14:55.12,中文,,0,0,0,,但我不会给你一百万美元 因为我想让你在一个有向无环图上解决它
Dialogue: 0,0:14:55.12,0:14:58.86,英文,,0,0,0,,So yet again, we have a problem, we're solving it in the general case, it's hard.
Dialogue: 0,0:14:55.12,0:14:58.86,中文,,0,0,0,,所以又一次 我们遇到了一个问题 我们正在一般情况下解决它 这很难
Dialogue: 0,0:14:58.86,0:15:01.04,英文,,0,0,0,,It's a million dollars worth of hard.
Dialogue: 0,0:14:58.86,0:15:01.04,中文,,0,0,0,,它值一百万美元的难度
Dialogue: 0,0:15:01.04,0:15:09.50,英文,,0,0,0,,But if I make the problem a little bit easier and say, don't consider all graphs, just the ones without cycles, I can make the problem easier.
Dialogue: 0,0:15:01.04,0:15:09.50,中文,,0,0,0,,但是如果我把问题变得简单一点 说不要考虑所有图 只考虑那些没有环的图 我就能让问题变得简单一些
Dialogue: 0,0:15:09.50,0:15:12.34,英文,,0,0,0,,And this time, I have a trick that I'm going to show you.
Dialogue: 0,0:15:09.50,0:15:12.34,中文,,0,0,0,,这次 我有一个技巧要展示给你
Dialogue: 0,0:15:12.34,0:15:15.48,英文,,0,0,0,,And this trick will just blow this problem away.
Dialogue: 0,0:15:12.34,0:15:15.48,中文,,0,0,0,,这个技巧会让这个问题迎刃而解
Dialogue: 0,0:15:15.48,0:15:20.32,英文,,0,0,0,,So one thing you could do is you can try sitting down and starting to play with the algorithms.
Dialogue: 0,0:15:15.48,0:15:20.32,中文,,0,0,0,,你可以做的一件事是 你可以试着坐下来 开始玩弄算法
Dialogue: 0,0:15:20.32,0:15:24.30,英文,,0,0,0,,Maybe like, how do I take the relax operation and mess with it to make this work?
Dialogue: 0,0:15:20.32,0:15:24.30,中文,,0,0,0,,比如 如何修改松弛操作来让它工作？
Dialogue: 0,0:15:24.30,0:15:26.48,英文,,0,0,0,,What order do I visit the vertices in?
Dialogue: 0,0:15:24.30,0:15:26.48,中文,,0,0,0,,我应该以什么顺序访问顶点？
Dialogue: 0,0:15:26.48,0:15:29.00,英文,,0,0,0,,You can try and build something from scratch.
Dialogue: 0,0:15:26.48,0:15:29.00,中文,,0,0,0,,你可以尝试从头开始构建一些东西
Dialogue: 0,0:15:29.00,0:15:29.90,英文,,0,0,0,,But you know, I'm lazy.
Dialogue: 0,0:15:29.00,0:15:29.90,中文,,0,0,0,,但是你知道 我很懒
Dialogue: 0,0:15:29.90,0:15:31.55,英文,,0,0,0,,I don't want to build things from scratch.
Dialogue: 0,0:15:29.90,0:15:31.55,中文,,0,0,0,,我不想从头开始构建东西
Dialogue: 0,0:15:31.55,0:15:36.37,英文,,0,0,0,,I already built that shortest paths tree algorithm from scratch, and that took us forever.
Dialogue: 0,0:15:31.55,0:15:36.37,中文,,0,0,0,,我已经从头开始构建了最短路径树算法 这花了我们很长时间
Dialogue: 0,0:15:36.37,0:15:43.62,英文,,0,0,0,,So instead of trying to build something totally from scratch, what if I outsource this problem to someone else?
Dialogue: 0,0:15:36.37,0:15:43.62,中文,,0,0,0,,与其试图完全从头开始构建 不如将这个问题外包给别人？
Dialogue: 0,0:15:43.62,0:15:44.92,英文,,0,0,0,,So I don't want to solve this.
Dialogue: 0,0:15:43.62,0:15:44.92,中文,,0,0,0,,我不想要解决它
Dialogue: 0,0:15:44.92,0:15:46.44,英文,,0,0,0,,I'm going to make someone else solve it.
Dialogue: 0,0:15:44.92,0:15:46.44,中文,,0,0,0,,我要让别人来解决它
Dialogue: 0,0:15:46.44,0:15:48.38,英文,,0,0,0,,But who's the someone else?
Dialogue: 0,0:15:46.44,0:15:48.38,中文,,0,0,0,,但是谁是别人呢？
Dialogue: 0,0:15:48.38,0:15:51.36,英文,,0,0,0,,I could maybe use one of the algorithms that I've already seen.
Dialogue: 0,0:15:48.38,0:15:51.36,中文,,0,0,0,,我或许可以使用我已经见过的算法之一
Dialogue: 0,0:15:51.36,0:15:55.79,英文,,0,0,0,,But the problem is, I don't have any longest paths algorithms.
Dialogue: 0,0:15:51.36,0:15:55.79,中文,,0,0,0,,但问题是 我没有任何最长路径算法
Dialogue: 0,0:15:55.79,0:16:00.51,英文,,0,0,0,,So something I'm going to try to do then is I want someone else to solve this for me.
Dialogue: 0,0:15:55.79,0:16:00.51,中文,,0,0,0,,我要尝试做的是 我想让别人帮我解决这个问题
Dialogue: 0,0:16:00.51,0:16:05.17,英文,,0,0,0,,I don't want to do all the hard work of relaxing and visiting all the edges and vertices.
Dialogue: 0,0:16:00.51,0:16:05.17,中文,,0,0,0,,我不想做所有繁重的工作 比如松弛和访问所有边和顶点
Dialogue: 0,0:16:05.17,0:16:06.57,英文,,0,0,0,,I want to outsource this to someone else.
Dialogue: 0,0:16:05.17,0:16:06.57,中文,,0,0,0,,我想把这个外包给别人
Dialogue: 0,0:16:06.57,0:16:07.11,英文,,0,0,0,,I'm lazy.
Dialogue: 0,0:16:06.57,0:16:07.11,中文,,0,0,0,,我很懒
Dialogue: 0,0:16:07.11,0:16:08.92,英文,,0,0,0,,I don't want to solve this from scratch.
Dialogue: 0,0:16:07.11,0:16:08.92,中文,,0,0,0,,我不想从头开始解决它
Dialogue: 0,0:16:08.92,0:16:13.22,英文,,0,0,0,,But none of my other algorithms know how to find longest paths.
Dialogue: 0,0:16:08.92,0:16:13.22,中文,,0,0,0,,但是我的其他算法都不知道如何找到最长路径
Dialogue: 0,0:16:13.22,0:16:14.58,英文,,0,0,0,,So here's what I have to do.
Dialogue: 0,0:16:13.22,0:16:14.58,中文,,0,0,0,,这就是我必须做的
Dialogue: 0,0:16:14.58,0:16:18.98,英文,,0,0,0,,I have to take this problem and somehow change it
Dialogue: 0,0:16:14.58,0:16:18.98,中文,,0,0,0,,我必须接受这个问题 并以某种方式改变它
Dialogue: 0,0:16:18.98,0:16:21.75,英文,,0,0,0,,So that it does become something that I know how to solve.
Dialogue: 0,0:16:18.98,0:16:21.75,中文,,0,0,0,,这样它就变成了我知道如何解决的问题
Dialogue: 0,0:16:21.75,0:16:24.31,英文,,0,0,0,,Then I'll just make someone else do all the hard work of solving it.
Dialogue: 0,0:16:21.75,0:16:24.31,中文,,0,0,0,,然后我就会让别人去做所有解决问题的辛苦工作
Dialogue: 0,0:16:24.31,0:16:26.25,英文,,0,0,0,,Then I'll convert the solution back.
Dialogue: 0,0:16:24.31,0:16:26.25,中文,,0,0,0,,然后我会将解决方案转换回来
Dialogue: 0,0:16:26.25,0:16:28.91,英文,,0,0,0,,So maybe you kind of get a sense of where this is going.
Dialogue: 0,0:16:26.25,0:16:28.91,中文,,0,0,0,,也许你对接下来要发生的事情有了一些了解
Dialogue: 0,0:16:28.91,0:16:29.90,英文,,0,0,0,,Maybe you don't.
Dialogue: 0,0:16:28.91,0:16:29.90,中文,,0,0,0,,也许你没有
Dialogue: 0,0:16:29.90,0:16:30.62,英文,,0,0,0,,Here's my trick.
Dialogue: 0,0:16:29.90,0:16:30.62,中文,,0,0,0,,这是我的技巧
Dialogue: 0,0:16:30.62,0:16:32.38,英文,,0,0,0,,It's like a one-line algorithm.
Dialogue: 0,0:16:30.62,0:16:32.38,中文,,0,0,0,,它就像一个单行算法
Dialogue: 0,0:16:32.38,0:16:34.14,英文,,0,0,0,,I'm going to take all the edges.
Dialogue: 0,0:16:32.38,0:16:34.14,中文,,0,0,0,,我要取所有的边
Dialogue: 0,0:16:34.14,0:16:39.90,英文,,0,0,0,,I'm going to make them negative, and then I'm going to dump this problem to the shortest-path-tree DAG algorithm.
Dialogue: 0,0:16:34.14,0:16:39.90,中文,,0,0,0,,我要把它们变成负的 然后我把这个问题交给最短路径树 DAG 算法
Dialogue: 0,0:16:39.90,0:16:41.33,英文,,0,0,0,,So I'm not solving this.
Dialogue: 0,0:16:39.90,0:16:41.33,中文,,0,0,0,,我不解决这个问题
Dialogue: 0,0:16:41.33,0:16:43.29,英文,,0,0,0,,I'm going to make all the edge weights negative.
Dialogue: 0,0:16:41.33,0:16:43.29,中文,,0,0,0,,我要把所有的边权重都变成负的
Dialogue: 0,0:16:43.29,0:16:48.57,英文,,0,0,0,,I'm going to send this to the shortest-path-tree algorithm and say, you solve it and tell me the answer.
Dialogue: 0,0:16:43.29,0:16:48.57,中文,,0,0,0,,我要把它发送给最短路径树算法 并说 你来解决它并告诉我答案
Dialogue: 0,0:16:48.57,0:16:54.34,英文,,0,0,0,,And when I get the answer, I'll just flip all the signs back, and I get the longest-path-tree.
Dialogue: 0,0:16:48.57,0:16:54.34,中文,,0,0,0,,当我得到答案时 我会把所有的符号都翻转回来 然后我就能得到最长路径树
Dialogue: 0,0:16:54.34,0:16:56.28,英文,,0,0,0,,It's like a one-line algorithm.
Dialogue: 0,0:16:54.34,0:16:56.28,中文,,0,0,0,,它就像一个单行算法
Dialogue: 0,0:16:56.28,0:17:00.00,英文,,0,0,0,,So maybe some of you saw this and you said, oh, that makes a lot of sense.
Dialogue: 0,0:16:56.28,0:17:00.00,中文,,0,0,0,,也许你们中的一些人看到了这一点 你们会说 哦 这很有道理
Dialogue: 0,0:17:00.00,0:17:05.27,英文,,0,0,0,,If I flip all the weights, then a path that used to be really long,
Dialogue: 0,0:17:00.00,0:17:05.27,中文,,0,0,0,,如果我把所有的权重都翻转过来 那么一条曾经很长的路径
Dialogue: 0,0:17:05.27,0:17:11.27,英文,,0,0,0,,like 2 plus 4 is long, well, when I flip the weights, now it's negative 6, which is really short.
Dialogue: 0,0:17:05.27,0:17:11.27,中文,,0,0,0,,比如 2 加 4 很长 好吧 当我翻转权重时 现在它是-6 这真的很短
Dialogue: 0,0:17:11.27,0:17:17.27,英文,,0,0,0,,And so if I flip all the edges and I pass this to the shortest path-free algorithm, I will get the right answer.
Dialogue: 0,0:17:11.27,0:17:17.27,中文,,0,0,0,,如果我把所有的边都翻转过来 然后把它传递给最短路径树算法 我就会得到正确的答案
Dialogue: 0,0:17:17.27,0:17:20.16,英文,,0,0,0,,For some of you, you'll be like, well, yeah, of course you get the right answer.
Dialogue: 0,0:17:17.27,0:17:20.16,中文,,0,0,0,,对于你们中的一些人来说 你会觉得 嗯 当然你会得到正确的答案
Dialogue: 0,0:17:20.16,0:17:22.46,英文,,0,0,0,,For some of you, this might feel a bit shaky.
Dialogue: 0,0:17:20.16,0:17:22.46,中文,,0,0,0,,对于你们中的一些人来说 这可能感觉有点不稳定
Dialogue: 0,0:17:22.46,0:17:24.54,英文,,0,0,0,,Like, how do I even come up with this?
Dialogue: 0,0:17:22.46,0:17:24.54,中文,,0,0,0,,比如 我是怎么想到这个的？
Dialogue: 0,0:17:24.54,0:17:30.82,英文,,0,0,0,,moments where I realize that I can take all the edges, flip their weights, and give the problem to someone else to solve.
Dialogue: 0,0:17:24.54,0:17:30.82,中文,,0,0,0,,我意识到我可以把所有的边 翻转它们的权重 然后把问题交给别人去解决
Dialogue: 0,0:17:30.82,0:17:37.73,英文,,0,0,0,,So the reason why I'm showing you this, by the way, it's not because I want you to memorize the longest path tree algorithm forever,
Dialogue: 0,0:17:30.82,0:17:37.73,中文,,0,0,0,,顺便说一下 我向你展示这个的原因 并不是因为我想让你永远记住最长路径树算法
Dialogue: 0,0:17:37.73,0:17:43.73,英文,,0,0,0,,but it's mainly because this kind of thinking is something that we're trying to get into your brains.
Dialogue: 0,0:17:37.73,0:17:43.73,中文,,0,0,0,,而是主要是因为这种思维方式是我们想要灌输到你大脑中的东西
Dialogue: 0,0:17:43.73,0:17:48.51,英文,,0,0,0,,It's something that you'll see a lot in theory classes like CS70 and CS170.
Dialogue: 0,0:17:43.73,0:17:48.51,中文,,0,0,0,,这是你在像 CS70 和 CS170 这样的理论课上会经常看到的东西
Dialogue: 0,0:17:48.51,0:17:56.62,英文,,0,0,0,,Sometimes people call it mathematical maturity, but it's the idea that There's these vague ways of thinking where you can say, I'll take this graph
Dialogue: 0,0:17:48.51,0:17:56.62,中文,,0,0,0,,有时人们称之为数学成熟度 但它的想法是有一些模糊的思维方式 你可以说 我会取这个图
Dialogue: 0,0:17:56.62,0:18:02.62,英文,,0,0,0,,and I'll flip the edge weights, and I'm convinced that the shortest path tree algorithm will work and give me back the answer.
Dialogue: 0,0:17:56.62,0:18:02.62,中文,,0,0,0,,然后翻转边权重 我相信最短路径树算法会起作用并给我返回答案
Dialogue: 0,0:18:02.62,0:18:10.81,英文,,0,0,0,,That kind of thinking is the kind of philosophy we want to drive into your brains, maybe not totally in 6UMB, but in a lot of the follow-up classes.
Dialogue: 0,0:18:02.62,0:18:10.81,中文,,0,0,0,,这种思维方式是我们想要灌输到你大脑中的那种哲学 也许在 6UMB 中不是完全如此 但在很多后续课程中都是如此
Dialogue: 0,0:18:10.81,0:18:15.66,英文,,0,0,0,,So we wanted to give you a little taste of that using the longest paths algorithm.
Dialogue: 0,0:18:10.81,0:18:15.66,中文,,0,0,0,,我们想用最长路径算法让你稍微体验一下
Dialogue: 0,0:18:15.66,0:18:16.72,英文,,0,0,0,,OK.
Dialogue: 0,0:18:15.66,0:18:16.72,中文,,0,0,0,,好的
Dialogue: 0,0:18:16.72,0:18:17.34,英文,,0,0,0,,So there it is.
Dialogue: 0,0:18:16.72,0:18:17.34,中文,,0,0,0,,就是这样
Dialogue: 0,0:18:17.34,0:18:18.72,英文,,0,0,0,,That's the longest pass algorithm.
Dialogue: 0,0:18:17.34,0:18:18.72,中文,,0,0,0,,这就是最长路径算法
Dialogue: 0,0:18:18.72,0:18:21.00,英文,,0,0,0,,It's not even an algorithm as much as it is.
Dialogue: 0,0:18:18.72,0:18:21.00,中文,,0,0,0,,与其说它是一个算法 不如说它是一个
Dialogue: 0,0:18:21.00,0:18:24.02,英文,,0,0,0,,I changed the graph a little bit, feed the problem to someone else.
Dialogue: 0,0:18:21.00,0:18:24.02,中文,,0,0,0,,我稍微改变了一下图 把问题交给别人
Dialogue: 0,0:18:24.02,0:18:29.13,英文,,0,0,0,,They do all the hard work, and then I get the answer and post-process it a little bit.
Dialogue: 0,0:18:24.02,0:18:29.13,中文,,0,0,0,,他们做了所有繁重的工作 然后我得到答案并进行一点后期处理
Dialogue: 0,0:18:29.13,0:18:33.71,英文,,0,0,0,,So it turns out mathematicians have a funny word for this, as they often do.
Dialogue: 0,0:18:29.13,0:18:33.71,中文,,0,0,0,,事实证明 数学家们有一个有趣的词来形容这个过程 就像他们经常做的那样
Dialogue: 0,0:18:33.71,0:18:36.82,英文,,0,0,0,,They call this process a reduction.
Dialogue: 0,0:18:33.71,0:18:36.82,中文,,0,0,0,,他们称这个过程为规约
Dialogue: 0,0:18:36.82,0:18:38.46,英文,,0,0,0,,It's kind of a weird word, to be honest.
Dialogue: 0,0:18:36.82,0:18:38.46,中文,,0,0,0,,说实话 这是一个有点奇怪的词
Dialogue: 0,0:18:38.46,0:18:41.66,英文,,0,0,0,,I always forget the direction, like which reduces to which.
Dialogue: 0,0:18:38.46,0:18:41.66,中文,,0,0,0,,我总是忘记方向 比如哪个规约到哪个
Dialogue: 0,0:18:41.66,0:18:43.56,英文,,0,0,0,,But here's the process that we did.
Dialogue: 0,0:18:41.66,0:18:43.56,中文,,0,0,0,,但这是我们做的过程
Dialogue: 0,0:18:43.56,0:18:46.34,英文,,0,0,0,,We had this hard problem that we didn't know how to solve.
Dialogue: 0,0:18:43.56,0:18:46.34,中文,,0,0,0,,我们有一个不知道如何解决的难题
Dialogue: 0,0:18:46.34,0:18:49.92,英文,,0,0,0,,And instead of solving it from scratch, we just said, you know what?
Dialogue: 0,0:18:46.34,0:18:49.92,中文,,0,0,0,,与其从头开始解决它 我们只是说 你知道吗？
Dialogue: 0,0:18:49.92,0:18:55.14,英文,,0,0,0,,I will just take this graph, I'll modify it a little bit, and then I'll pass it to someone else.
Dialogue: 0,0:18:49.92,0:18:55.14,中文,,0,0,0,,我只需要取这个图 稍微修改一下 然后把它传递给别人
Dialogue: 0,0:18:55.14,0:18:56.14,英文,,0,0,0,,I don't want to do the hard work.
Dialogue: 0,0:18:55.14,0:18:56.14,中文,,0,0,0,,我不想做繁重的工作
Dialogue: 0,0:18:56.14,0:18:57.62,英文,,0,0,0,,You do all the hard work.
Dialogue: 0,0:18:56.14,0:18:57.62,中文,,0,0,0,,你做所有的累活
Dialogue: 0,0:18:57.62,0:19:01.25,英文,,0,0,0,,And then when the shortest path tree solves the problem, I say thank you.
Dialogue: 0,0:18:57.62,0:19:01.25,中文,,0,0,0,,然后当最短路径树解决了问题 我就说谢谢
Dialogue: 0,0:19:01.25,0:19:02.61,英文,,0,0,0,,I do some post-processing.
Dialogue: 0,0:19:01.25,0:19:02.61,中文,,0,0,0,,我做一些后处理
Dialogue: 0,0:19:02.61,0:19:10.26,英文,,0,0,0,,For example, I might have to flip the signs back again to make them their original sign, so all the negative weights become positive again.
Dialogue: 0,0:19:02.61,0:19:10.26,中文,,0,0,0,,例如 我可能需要再次翻转符号 使它们回到原来的符号 这样所有负权重都变回正值
Dialogue: 0,0:19:10.26,0:19:13.22,英文,,0,0,0,,And then I can output the answer.
Dialogue: 0,0:19:10.26,0:19:13.22,中文,,0,0,0,,然后我可以输出答案
Dialogue: 0,0:19:13.22,0:19:16.30,英文,,0,0,0,,The core, all of the hard thinking is done by someone else.
Dialogue: 0,0:19:13.22,0:19:16.30,中文,,0,0,0,,核心是 所有困难的思考都由别人完成
Dialogue: 0,0:19:16.30,0:19:22.16,英文,,0,0,0,,So instead of doing all the hard thinking myself from scratch, all I have to do is come up with these two steps in blue.
Dialogue: 0,0:19:16.30,0:19:22.16,中文,,0,0,0,,因此 与其从头开始自己做所有困难的思考 我所要做的就是想出这两个蓝色的步骤
Dialogue: 0,0:19:22.16,0:19:29.03,英文,,0,0,0,,How do I take my problem and massage it until it becomes another problem that I already know how to solve?
Dialogue: 0,0:19:22.16,0:19:29.03,中文,,0,0,0,,如何处理我的问题 并对其进行调整 直到它变成另一个我已经知道如何解决的问题？
Dialogue: 0,0:19:29.03,0:19:37.17,英文,,0,0,0,,And then once I get the solution back, how do I massage or un-massage the problem back into my original thing that I wanted to solve?
Dialogue: 0,0:19:29.03,0:19:37.17,中文,,0,0,0,,然后 一旦我得到解决方案 我如何将问题恢复或取消调整回我最初想要解决的问题？
Dialogue: 0,0:19:37.17,0:19:39.21,英文,,0,0,0,,That's the key idea behind reduction.
Dialogue: 0,0:19:37.17,0:19:39.21,中文,,0,0,0,,这就是化归背后的关键思想
Dialogue: 0,0:19:39.21,0:19:42.21,英文,,0,0,0,,And this is the kind of thing that you've almost done before in a way.
Dialogue: 0,0:19:39.21,0:19:42.21,中文,,0,0,0,,在某种程度上 你以前几乎做过这种事情
Dialogue: 0,0:19:42.21,0:19:45.85,英文,,0,0,0,,So for example, like in homework 2, you did the percolation problem.
Dialogue: 0,0:19:42.21,0:19:45.85,中文,,0,0,0,,例如 在作业2中 你做了渗透问题
Dialogue: 0,0:19:45.85,0:19:48.37,英文,,0,0,0,,Well, in that case, someone handed you a chemistry problem.
Dialogue: 0,0:19:45.85,0:19:48.37,中文,,0,0,0,,嗯 在这种情况下 有人交给你一个化学问题
Dialogue: 0,0:19:48.37,0:19:52.82,英文,,0,0,0,,They said, I want to know if I open the holes, how does it percolate?
Dialogue: 0,0:19:48.37,0:19:52.82,中文,,0,0,0,,他们说  我想知道如果我打开洞 它会如何渗透？
Dialogue: 0,0:19:52.82,0:19:54.12,英文,,0,0,0,,That's like a chemistry problem.
Dialogue: 0,0:19:52.82,0:19:54.12,中文,,0,0,0,,这就像一个化学问题
Dialogue: 0,0:19:54.12,0:19:57.48,英文,,0,0,0,,But what you did is you processed it using your code.
Dialogue: 0,0:19:54.12,0:19:57.48,中文,,0,0,0,,但是你所做的是用你的代码来处理它
Dialogue: 0,0:19:57.48,0:20:00.15,英文,,0,0,0,,You turned it into a disjoint sets problem.
Dialogue: 0,0:19:57.48,0:20:00.15,中文,,0,0,0,,你把它变成了一个不相交集合问题
Dialogue: 0,0:20:00.15,0:20:04.39,英文,,0,0,0,,And then you made the disjoint sets do all the hard work of tracking unions and connects.
Dialogue: 0,0:20:00.15,0:20:04.39,中文,,0,0,0,,然后你让不相交集合做所有跟踪联合和连接的苦差事
Dialogue: 0,0:20:04.39,0:20:05.29,英文,,0,0,0,,That wasn't your problem.
Dialogue: 0,0:20:04.39,0:20:05.29,中文,,0,0,0,,那不是你的问题
Dialogue: 0,0:20:05.29,0:20:07.51,英文,,0,0,0,,That was the disjoint sets problem.
Dialogue: 0,0:20:05.29,0:20:07.51,中文,,0,0,0,,那是 disjoint sets 的问题
Dialogue: 0,0:20:07.51,0:20:14.76,英文,,0,0,0,,And then you took the answer, and you processed it, and then you told the chemistry person, yes, it percolates, or no, it doesn't percolate.
Dialogue: 0,0:20:07.51,0:20:14.76,中文,,0,0,0,,然后你拿到了答案 你处理了它 然后你告诉化学家 是的 它渗透了 或者不 它没有渗透
Dialogue: 0,0:20:14.76,0:20:21.65,英文,,0,0,0,,So you kind of have a flavor of doing it in your projects, but in algorithms, you see this over and over and over again.
Dialogue: 0,0:20:14.76,0:20:21.65,中文,,0,0,0,,在你的项目中 你有点像在做这种事 但在算法中 你会一遍又一遍地看到它
Dialogue: 0,0:20:21.65,0:20:22.85,英文,,0,0,0,,It's so powerful.
Dialogue: 0,0:20:21.65,0:20:22.85,中文,,0,0,0,,它太强大了
Dialogue: 0,0:20:22.85,0:20:29.21,英文,,0,0,0,,It lets us solve all these hard problems by just massaging them into other hard problems that have already been solved.
Dialogue: 0,0:20:22.85,0:20:29.21,中文,,0,0,0,,它让我们可以通过将所有这些难题转化为其他已经解决的难题来解决它们
Dialogue: 0,0:20:29.21,0:20:32.50,英文,,0,0,0,,So here's the fancy term that mathematicians use.
Dialogue: 0,0:20:29.21,0:20:32.50,中文,,0,0,0,,这是数学家使用的花哨术语
Dialogue: 0,0:20:32.50,0:20:38.42,英文,,0,0,0,,If I have a problem, like this longest-path-tree algorithm, and I massage it into some other problem,
Dialogue: 0,0:20:32.50,0:20:38.42,中文,,0,0,0,,如果我有一个问题 比如这个最长路径树算法 我把它转化成另一个问题
Dialogue: 0,0:20:38.42,0:20:42.42,英文,,0,0,0,,I guess mathematicians don't say massage, although I find it a very funny word to say.
Dialogue: 0,0:20:38.42,0:20:42.42,中文,,0,0,0,,我想数学家不会说 massage（调整） 尽管我觉得这是一个很好笑的词
Dialogue: 0,0:20:42.42,0:20:47.81,英文,,0,0,0,,But they say that the longest-path-tree problem reduces to the shortest-path-tree problem.
Dialogue: 0,0:20:42.42,0:20:47.81,中文,,0,0,0,,但他们说最长路径树问题可以化归为最短路径树问题
Dialogue: 0,0:20:47.81,0:20:49.47,英文,,0,0,0,,It's kind of an awkward word.
Dialogue: 0,0:20:47.81,0:20:49.47,中文,,0,0,0,,这是一个有点尴尬的词
Dialogue: 0,0:20:49.47,0:20:53.25,英文,,0,0,0,,I always forget which direction it is, but that's the vocabulary that they use.
Dialogue: 0,0:20:49.47,0:20:53.25,中文,,0,0,0,,我总是忘记它是哪个方向的 但这是他们使用的词汇
Dialogue: 0,0:20:53.25,0:20:55.63,英文,,0,0,0,,So sometimes you'll see people say that.
Dialogue: 0,0:20:53.25,0:20:55.63,中文,,0,0,0,,有时你会看到人们这么说
Dialogue: 0,0:20:55.63,0:20:58.80,英文,,0,0,0,,This problem reduces to solving this one.
Dialogue: 0,0:20:55.63,0:20:58.80,中文,,0,0,0,,这个问题可以化归为解决这个问题
Dialogue: 0,0:20:58.80,0:21:00.36,英文,,0,0,0,,OK, great.
Dialogue: 0,0:20:58.80,0:21:00.36,中文,,0,0,0,,好的 很好
Dialogue: 0,0:21:00.36,0:21:05.26,英文,,0,0,0,,There's an analogy if it doesn't make sense, but that's the syntax that people use.
Dialogue: 0,0:21:00.36,0:21:05.26,中文,,0,0,0,,如果它没有意义 有一个类比 但这是人们使用的语法
Dialogue: 0,0:21:05.26,0:21:07.00,英文,,0,0,0,,OK, so it's called a reduction.
Dialogue: 0,0:21:05.26,0:21:07.00,中文,,0,0,0,,好的 所以它被称为化归
Dialogue: 0,0:21:07.00,0:21:08.44,英文,,0,0,0,,It's beyond the scope of our class.
Dialogue: 0,0:21:07.00,0:21:08.44,中文,,0,0,0,,它超出了我们课程的范围
Dialogue: 0,0:21:08.44,0:21:13.62,英文,,0,0,0,,I mean, it's good to know what it is, but I'm not going to test you on very detailed reductions like this one.
Dialogue: 0,0:21:08.44,0:21:13.62,中文,,0,0,0,,我的意思是 知道它是什么是好的 但我不会在像这样的非常详细的化归上考你
Dialogue: 0,0:21:13.62,0:21:15.88,英文,,0,0,0,,But we'll show you some more fun reductions later.
Dialogue: 0,0:21:13.62,0:21:15.88,中文,,0,0,0,,但稍后我们会向你展示一些更有趣的化归
Dialogue: 0,0:21:15.88,0:21:17.12,英文,,0,0,0,,You don't have to know this one.
Dialogue: 0,0:21:15.88,0:21:17.12,中文,,0,0,0,,你不需要知道这个
Dialogue: 0,0:21:17.12,0:21:19.00,英文,,0,0,0,,But you can just skim through the slides.
Dialogue: 0,0:21:17.12,0:21:19.00,中文,,0,0,0,,但你可以浏览一下幻灯片
Dialogue: 0,0:21:19.00,0:21:19.68,英文,,0,0,0,,It's kind of cool.
Dialogue: 0,0:21:19.00,0:21:19.68,中文,,0,0,0,,这有点酷
Dialogue: 0,0:21:19.68,0:21:27.35,英文,,0,0,0,,This reduction takes a computer problem and turns it into a graph problem and then turns it back into a computer problem, which I find very cool.
Dialogue: 0,0:21:19.68,0:21:27.35,中文,,0,0,0,,这种化归将一个计算机问题转化为一个图论问题 然后再转化回一个计算机问题 我觉得这很酷
Dialogue: 0,0:21:27.35,0:21:30.71,英文,,0,0,0,,OK, but the process, as you can see, is pretty similar.
Dialogue: 0,0:21:27.35,0:21:30.71,中文,,0,0,0,,好的 但是这个过程 正如你所看到的 非常相似
Dialogue: 0,0:21:30.71,0:21:32.49,英文,,0,0,0,,So that's reductions.
Dialogue: 0,0:21:30.71,0:21:32.49,中文,,0,0,0,,所以这就是化归
Dialogue: 0,0:21:32.49,0:21:38.26,英文,,0,0,0,,Anything else you want to know about reductions, like the philosophy of it,
Dialogue: 0,0:21:32.49,0:21:38.26,中文,,0,0,0,,关于化归 你还想知道些什么 比如它的哲学 这不会是你最后一次看到它
Dialogue: 0,0:21:38.26,0:21:42.26,英文,,0,0,0,, this will not be the last time you see it, but maybe it's the first time you see it, and hopefully you'll see it over and over again.
Dialogue: 0,0:21:38.26,0:21:42.26,中文,,0,0,0,,但也许是你第一次看到它 希望你会一遍又一遍地看到它
Dialogue: 0,0:21:42.26,0:21:43.85,英文,,0,0,0,,It's really cool.
Dialogue: 0,0:21:42.26,0:21:43.85,中文,,0,0,0,,这真的很酷
Dialogue: 0,0:21:43.85,0:21:47.47,英文,,0,0,0,,OK, you might even see it again if you come back for later lectures.
Dialogue: 0,0:21:43.85,0:21:47.47,中文,,0,0,0,,好的 如果你回来参加以后的讲座 你甚至可能会再次看到它
Dialogue: 0,0:21:47.47,0:21:49.11,英文,,0,0,0,,OK, there's a video.
Dialogue: 0,0:21:47.47,0:21:49.11,中文,,0,0,0,,好的 有一个视频
Dialogue: 0,0:21:49.11,0:21:53.23,英文,,0,0,0,,I actually have no clue what this video is, but maybe someday someone will watch it and tell me what it is.
Dialogue: 0,0:21:49.11,0:21:53.23,中文,,0,0,0,,我其实不知道这个视频是什么 但也许有一天会有人看它并告诉我它是什么
Dialogue: 0,0:21:53.23,0:21:54.69,英文,,0,0,0,,Josh had it at the end.
Dialogue: 0,0:21:53.23,0:21:54.69,中文,,0,0,0,,Josh 在最后放了它
Dialogue: 0,0:21:54.69,0:21:57.23,英文,,0,0,0,,I don't know what it is, but we're not watching it now.
Dialogue: 0,0:21:54.69,0:21:57.23,中文,,0,0,0,,我不知道它是什么 但我们现在不看它
Dialogue: 0,0:21:57.23,0:21:58.75,英文,,0,0,0,,But the guy has a really cool beard.
Dialogue: 0,0:21:57.23,0:21:58.75,中文,,0,0,0,,但那个家伙的胡子真的很酷
Dialogue: 0,0:21:58.75,0:22:01.23,英文,,0,0,0,,OK, ready for tries?
Dialogue: 0,0:21:58.75,0:22:01.23,中文,,0,0,0,,好的 准备好学习 trie 了吗？
Dialogue: 0,0:22:01.23,0:22:05.22,英文,,0,0,0,,The last topic in the main data structures unit.
Dialogue: 0,0:22:01.23,0:22:05.22,中文,,0,0,0,,主数据结构单元的最后一个主题
Dialogue: 0,0:22:05.22,0:22:06.98,英文,,0,0,0,,Okay, how far we've come.
Dialogue: 0,0:22:05.22,0:22:06.98,中文,,0,0,0,,好的 我们已经走了多远
Dialogue: 0,0:22:06.98,0:22:09.78,英文,,0,0,0,,So I'm going to switch gears a little bit now.
Dialogue: 0,0:22:06.98,0:22:09.78,中文,,0,0,0,,我现在要稍微转换一下思路
Dialogue: 0,0:22:09.78,0:22:14.65,英文,,0,0,0,,I'm going to start or I'm going to go back actually to our sets and our maps.
Dialogue: 0,0:22:09.78,0:22:14.65,中文,,0,0,0,,我要开始 或者说我要回到我们的集合和映射
Dialogue: 0,0:22:14.65,0:22:15.93,英文,,0,0,0,,And I'm going to reflect on what we did.
Dialogue: 0,0:22:14.65,0:22:15.93,中文,,0,0,0,,我要反思一下我们所做的
Dialogue: 0,0:22:15.93,0:22:19.01,英文,,0,0,0,,I'm going to say we did a pretty good job with sets and maps.
Dialogue: 0,0:22:15.93,0:22:19.01,中文,,0,0,0,,我要说我们在集合和映射方面做得非常好
Dialogue: 0,0:22:19.01,0:22:26.88,英文,,0,0,0,,We should be pretty proud of ourselves because we came up with all of these fancy approaches to sets and maps and they had really good runtime.
Dialogue: 0,0:22:19.01,0:22:26.88,中文,,0,0,0,,我们应该感到非常自豪 因为我们想出了所有这些花哨的方法来处理集合和映射 而且它们有非常好的运行时间
Dialogue: 0,0:22:26.88,0:22:29.76,英文,,0,0,0,,Remember our left-leaning red-black trees?
Dialogue: 0,0:22:26.88,0:22:29.76,中文,,0,0,0,,还记得我们的左倾红黑树吗？
Dialogue: 0,0:22:29.76,0:22:31.32,英文,,0,0,0,,Sorry, I don't want to dig up bad memories.
Dialogue: 0,0:22:29.76,0:22:31.32,中文,,0,0,0,,抱歉 我不想勾起不好的回忆
Dialogue: 0,0:22:31.32,0:22:33.08,英文,,0,0,0,,Remember the left-leaning red-black tree?
Dialogue: 0,0:22:31.32,0:22:33.08,中文,,0,0,0,,还记得左倾红黑树吗？
Dialogue: 0,0:22:33.08,0:22:35.18,英文,,0,0,0,,Well, that had logarithmic runtime.
Dialogue: 0,0:22:33.08,0:22:35.18,中文,,0,0,0,,嗯 那有对数运行时间
Dialogue: 0,0:22:35.18,0:22:36.36,英文,,0,0,0,,That's really good.
Dialogue: 0,0:22:35.18,0:22:36.36,中文,,0,0,0,,那真的很好
Dialogue: 0,0:22:36.36,0:22:38.57,英文,,0,0,0,,Remember our hash tables?
Dialogue: 0,0:22:36.36,0:22:38.57,中文,,0,0,0,,还记得我们的哈希表吗？
Dialogue: 0,0:22:38.57,0:22:39.15,英文,,0,0,0,,Those were great.
Dialogue: 0,0:22:38.57,0:22:39.15,中文,,0,0,0,,那些很棒
Dialogue: 0,0:22:39.15,0:22:43.43,英文,,0,0,0,,Those had theta of 1 runtime, as good as you can possibly get.
Dialogue: 0,0:22:39.15,0:22:43.43,中文,,0,0,0,,那些有 θ(1)  的运行时间 这是你能得到的最好的
Dialogue: 0,0:22:43.43,0:22:46.33,英文,,0,0,0,,As a bit of caveat, got to make sure the hash code is good.
Dialogue: 0,0:22:43.43,0:22:46.33,中文,,0,0,0,,作为一个警告 必须确保哈希码是好的
Dialogue: 0,0:22:46.33,0:22:54.12,英文,,0,0,0,,But if you do, you get theta 1 runtime, the best possible runtime, with some asterisks at the end.
Dialogue: 0,0:22:46.33,0:22:54.12,中文,,0,0,0,,但是如果你这样做 你就会得到 θ(1)  运行时间 这是最好的运行时间 最后带有一些星号
Dialogue: 0,0:22:54.12,0:22:56.10,英文,,0,0,0,,We're going to revisit sets and maps today.
Dialogue: 0,0:22:54.12,0:22:56.10,中文,,0,0,0,,我们今天将重新审视集合和映射
Dialogue: 0,0:22:56.10,0:22:57.98,英文,,0,0,0,,And it might feel kind of weird that we're doing it.
Dialogue: 0,0:22:56.10,0:22:57.98,中文,,0,0,0,,我们这样做可能会觉得有点奇怪
Dialogue: 0,0:22:57.98,0:23:02.40,英文,,0,0,0,,But I just wanted to first call out that we've actually done pretty good already.
Dialogue: 0,0:22:57.98,0:23:02.40,中文,,0,0,0,,但我只是想首先指出 我们实际上已经做得相当不错了
Dialogue: 0,0:23:02.40,0:23:03.12,英文,,0,0,0,,OK.
Dialogue: 0,0:23:02.40,0:23:03.12,中文,,0,0,0,,好的
Dialogue: 0,0:23:03.12,0:23:11.33,英文,,0,0,0,,So today, even though we've done this good, like theta 1 with a little bit of an asterisk, I'm going to suggest we can do even better.
Dialogue: 0,0:23:03.12,0:23:11.33,中文,,0,0,0,,今天 即使我们做得这么好 比如带有一点星号的 θ(1)  我还是要建议我们可以做得更好
Dialogue: 0,0:23:11.33,0:23:13.03,英文,,0,0,0,,if I give you some assumptions.
Dialogue: 0,0:23:11.33,0:23:13.03,中文,,0,0,0,,如果我给你一些假设
Dialogue: 0,0:23:13.03,0:23:18.76,英文,,0,0,0,,So for just any old object, you can probably do theta of 1 with some assumptions runtime.
Dialogue: 0,0:23:13.03,0:23:18.76,中文,,0,0,0,,对于任何旧对象 你可能可以在某些假设下做到 θ(1)  运行时间
Dialogue: 0,0:23:18.76,0:23:24.99,英文,,0,0,0,,But I'm going to say, if I can tell you something special about the keys in my set or my map,
Dialogue: 0,0:23:18.76,0:23:24.99,中文,,0,0,0,,但我要说的是 如果我能够告诉你关于我的集合或映射中的键的一些特殊信息
Dialogue: 0,0:23:24.99,0:23:29.99,英文,,0,0,0,,maybe you can do something specific to that key type that gives you even better implementations.
Dialogue: 0,0:23:24.99,0:23:29.99,中文,,0,0,0,,也许你可以对该键类型做一些特定的事情 从而获得更好的实现
Dialogue: 0,0:23:29.99,0:23:33.05,英文,,0,0,0,,And you'll see what I mean as I introduce the trie.
Dialogue: 0,0:23:29.99,0:23:33.05,中文,,0,0,0,,当我介绍 trie 时 你就会明白我的意思
Dialogue: 0,0:23:33.05,0:23:40.16,英文,,0,0,0,,So for today, what if I don't want to build a set of anything, like a set of pictures, a set of cats, a set of whatever.
Dialogue: 0,0:23:33.05,0:23:40.16,中文,,0,0,0,,今天 如果我不想构建任何东西的集合 比如图片集合、猫集合、任何东西的集合
Dialogue: 0,0:23:40.16,0:23:44.22,英文,,0,0,0,,What if I told you that your set only has characters?
Dialogue: 0,0:23:40.16,0:23:44.22,中文,,0,0,0,,如果我告诉你你的集合只有字符呢？
Dialogue: 0,0:23:44.22,0:23:47.10,英文,,0,0,0,,Like, let's say A through Z. That's your set.
Dialogue: 0,0:23:44.22,0:23:47.10,中文,,0,0,0,,比如 假设是 A 到 Z 这就是你的集合
Dialogue: 0,0:23:47.10,0:23:51.66,英文,,0,0,0,,It's A through Z. I guarantee for you nothing else will ever be in this set.
Dialogue: 0,0:23:47.10,0:23:51.66,中文,,0,0,0,,是 A 到 Z 我向你保证 这个集合里永远不会有其他东西
Dialogue: 0,0:23:51.66,0:23:54.00,英文,,0,0,0,,Well then, you can do something really silly.
Dialogue: 0,0:23:51.66,0:23:54.00,中文,,0,0,0,,好吧 那么你可以做一些非常愚蠢的事情
Dialogue: 0,0:23:54.00,0:23:57.45,英文,,0,0,0,,This code almost makes it more complicated than it has to be.
Dialogue: 0,0:23:54.00,0:23:57.45,中文,,0,0,0,,这段代码几乎把它弄得比它需要的更复杂
Dialogue: 0,0:23:57.45,0:24:07.70,英文,,0,0,0,,If I have a set with a through z as the only possible elements, well then, why not just make an array with 26 elements?
Dialogue: 0,0:23:57.45,0:24:07.70,中文,,0,0,0,,如果我有一个集合 其中 a 到 z 是唯一可能的元素 那么 为什么不直接创建一个包含 26 个元素的数组呢？
Dialogue: 0,0:24:07.70,0:24:10.46,英文,,0,0,0,,and just put falses and trues in the array.
Dialogue: 0,0:24:07.70,0:24:10.46,中文,,0,0,0,,并在数组中放入 false 和 true
Dialogue: 0,0:24:10.46,0:24:16.66,英文,,0,0,0,,And if someone asks you, is D in the array, you just go, well, A, B, C, D, and that index is false.
Dialogue: 0,0:24:10.46,0:24:16.66,中文,,0,0,0,,如果有人问你 D 是否在数组中 你就说 好吧 A、B、C、D 那个索引是 false
Dialogue: 0,0:24:16.66,0:24:17.96,英文,,0,0,0,,D is not in the set.
Dialogue: 0,0:24:16.66,0:24:17.96,中文,,0,0,0,,D 不在集合中
Dialogue: 0,0:24:17.96,0:24:22.22,英文,,0,0,0,,And if someone wants to put D in the set, you go, A, B, C, D, set it to true.
Dialogue: 0,0:24:17.96,0:24:22.22,中文,,0,0,0,,如果有人想把 D 放入集合中 你就说 A、B、C、D 把它设置为 true
Dialogue: 0,0:24:22.22,0:24:23.65,英文,,0,0,0,,So it's so simple.
Dialogue: 0,0:24:22.22,0:24:23.65,中文,,0,0,0,,它非常简单
Dialogue: 0,0:24:23.65,0:24:25.81,英文,,0,0,0,,It took me like 30 seconds to explain.
Dialogue: 0,0:24:23.65,0:24:25.81,中文,,0,0,0,,我花了大约 30 秒来解释
Dialogue: 0,0:24:25.81,0:24:28.61,英文,,0,0,0,,Sometimes people call it a data indexed array.
Dialogue: 0,0:24:25.81,0:24:28.61,中文,,0,0,0,,有时人们称它为数据索引数组
Dialogue: 0,0:24:28.61,0:24:35.99,英文,,0,0,0,,So all you have to do is you make the array, and you just put a lot of false and trues inside, and that tells you what's in the set and what's not in the set.
Dialogue: 0,0:24:28.61,0:24:35.99,中文,,0,0,0,,你所要做的就是创建数组 然后在其中放入大量的 false 和 true 这告诉你集合中有什么 集合中没有什么
Dialogue: 0,0:24:35.99,0:24:36.81,英文,,0,0,0,,It's so simple.
Dialogue: 0,0:24:35.99,0:24:36.81,中文,,0,0,0,,它非常简单
Dialogue: 0,0:24:36.81,0:24:42.10,英文,,0,0,0,,There's not a whole lecture of chaining, and hash codes, and trees that are leaning left or right.
Dialogue: 0,0:24:36.81,0:24:42.10,中文,,0,0,0,,没有关于链接、哈希码和左倾或右倾树的整堂课
Dialogue: 0,0:24:42.10,0:24:47.98,英文,,0,0,0,,All you got to do, a single array, trues and falses, depending on which characters are in your set.
Dialogue: 0,0:24:42.10,0:24:47.98,中文,,0,0,0,,你所要做的就是 一个单一的数组 true 和 false 取决于你的集合中有哪些字符
Dialogue: 0,0:24:47.98,0:24:52.26,英文,,0,0,0,,And that is going to have theta of one runtime, because you just go to the right index,
Dialogue: 0,0:24:47.98,0:24:52.26,中文,,0,0,0,,这将有 θ(1)  的运行时间 因为你只需转到正确的索引
Dialogue: 0,0:24:52.26,0:24:57.40,英文,,0,0,0,,So if someone asks you, is w in the set, you go to index 23 or whatever.
Dialogue: 0,0:24:52.26,0:24:57.40,中文,,0,0,0,,如果有人问你 w 是否在集合中 你就转到索引 23 或其他什么
Dialogue: 0,0:24:57.40,0:24:59.17,英文,,0,0,0,,And if it's there, then it's true.
Dialogue: 0,0:24:57.40,0:24:59.17,中文,,0,0,0,,如果它在那里 那么它是 true
Dialogue: 0,0:24:59.17,0:25:00.37,英文,,0,0,0,,Otherwise, it's false.
Dialogue: 0,0:24:59.17,0:25:00.37,中文,,0,0,0,,否则 它是 false
Dialogue: 0,0:25:00.37,0:25:06.55,英文,,0,0,0,,And adding things, set a value to true, also constant, with no asterisks whatsoever.
Dialogue: 0,0:25:00.37,0:25:06.55,中文,,0,0,0,,添加元素时 将值设为 true 这也是一个常量 不需要任何星号
Dialogue: 0,0:25:06.55,0:25:11.68,英文,,0,0,0,,So if someone tells you something special, like your keys are A through Z, you can do something simple.
Dialogue: 0,0:25:06.55,0:25:11.68,中文,,0,0,0,,如果有人告诉你一些特殊的东西 比如你的键是从 A 到 Z 你可以做一些简单的事情
Dialogue: 0,0:25:11.68,0:25:17.84,英文,,0,0,0,,And even if they throw a little curveball at you and they say, well, what if I have like exclamation point or numbers?
Dialogue: 0,0:25:11.68,0:25:17.84,中文,,0,0,0,,即使他们给你抛出一个难题 说 如果我像感叹号或数字一样呢？
Dialogue: 0,0:25:17.84,0:25:18.52,英文,,0,0,0,,Well, that's OK.
Dialogue: 0,0:25:17.84,0:25:18.52,中文,,0,0,0,,好吧 没关系
Dialogue: 0,0:25:18.52,0:25:24.78,英文,,0,0,0,,Remember from the hashing lecture that ASCII is a way to map all the characters to numbers.
Dialogue: 0,0:25:18.52,0:25:24.78,中文,,0,0,0,,还记得散列讲座吗 ASCII 是一种将所有字符映射到数字的方法
Dialogue: 0,0:25:24.78,0:25:29.79,英文,,0,0,0,,So you could extend that array to not just be 26 items, but be even more items.
Dialogue: 0,0:25:24.78,0:25:29.79,中文,,0,0,0,,你可以扩展数组 使其不只是 26 个元素 而是更多的元素
Dialogue: 0,0:25:29.79,0:25:36.11,英文,,0,0,0,,And you can include things like exclamation point and use ASCII to map the exclamation point to a number.
Dialogue: 0,0:25:29.79,0:25:36.11,中文,,0,0,0,,你可以包含像感叹号这样的东西 并使用 ASCII 将感叹号映射到一个数字
Dialogue: 0,0:25:36.11,0:25:38.01,英文,,0,0,0,,OK, great.
Dialogue: 0,0:25:36.11,0:25:38.01,中文,,0,0,0,,好的 很好
Dialogue: 0,0:25:38.01,0:25:41.47,英文,,0,0,0,,So that was one special case, data index to rate.
Dialogue: 0,0:25:38.01,0:25:41.47,中文,,0,0,0,,这是一个特例 数据索引到率
Dialogue: 0,0:25:41.47,0:25:43.73,英文,,0,0,0,,Now let me give you one that's a little bit harder.
Dialogue: 0,0:25:41.47,0:25:43.73,中文,,0,0,0,,现在让我给你一个有点难的
Dialogue: 0,0:25:43.73,0:25:45.82,英文,,0,0,0,,What if I told you the keys are not letters?
Dialogue: 0,0:25:43.73,0:25:45.82,中文,,0,0,0,,如果我告诉你键不是字母怎么办？
Dialogue: 0,0:25:45.82,0:25:47.48,英文,,0,0,0,,So it's not a set of letters.
Dialogue: 0,0:25:45.82,0:25:47.48,中文,,0,0,0,,它不是一组字母
Dialogue: 0,0:25:47.48,0:25:48.28,英文,,0,0,0,,A is in the set.
Dialogue: 0,0:25:47.48,0:25:48.28,中文,,0,0,0,,A 在集合中
Dialogue: 0,0:25:48.28,0:25:49.80,英文,,0,0,0,,Q is not in the set.
Dialogue: 0,0:25:48.28,0:25:49.80,中文,,0,0,0,,q 不在集合中
Dialogue: 0,0:25:49.80,0:25:52.14,英文,,0,0,0,,What if I gave you a set of strings?
Dialogue: 0,0:25:49.80,0:25:52.14,中文,,0,0,0,,如果我给你一组字符串呢？
Dialogue: 0,0:25:52.14,0:25:55.55,英文,,0,0,0,,So I tell you for short, all the items in the set are strings.
Dialogue: 0,0:25:52.14,0:25:55.55,中文,,0,0,0,,我告诉你 为了简洁起见 集合中的所有元素都是字符串
Dialogue: 0,0:25:55.55,0:25:59.67,英文,,0,0,0,,You will never see dogs or images or anything else in the set.
Dialogue: 0,0:25:55.55,0:25:59.67,中文,,0,0,0,,你永远不会在集合中看到狗、图像或任何其他东西
Dialogue: 0,0:25:59.67,0:26:01.67,英文,,0,0,0,,It is all strings.
Dialogue: 0,0:25:59.67,0:26:01.67,中文,,0,0,0,,它们都是字符串
Dialogue: 0,0:26:01.67,0:26:05.93,英文,,0,0,0,,Well, if you can do that, then there's a special data structure called a try.
Dialogue: 0,0:26:01.67,0:26:05.93,中文,,0,0,0,,好吧 如果你能做到这一点 那么有一个特殊的数据结构叫做 trie(尝试树/前缀树)
Dialogue: 0,0:26:05.93,0:26:11.30,英文,,0,0,0,,And this is one of those data structures where I think the easiest way to introduce it is to just show it to you.
Dialogue: 0,0:26:05.93,0:26:11.30,中文,,0,0,0,,我认为介绍这种数据结构最简单的方法就是直接展示给你看
Dialogue: 0,0:26:11.30,0:26:13.30,英文,,0,0,0,,So that's what I will do.
Dialogue: 0,0:26:11.30,0:26:13.30,中文,,0,0,0,,这就是我要做的
Dialogue: 0,0:26:13.30,0:26:16.86,英文,,0,0,0,,OK, so I'm going to add these strings to my set.
Dialogue: 0,0:26:13.30,0:26:16.86,中文,,0,0,0,,好的 我要把这些字符串添加到我的集合中
Dialogue: 0,0:26:16.86,0:26:21.75,英文,,0,0,0,,I want sam, sad, sap, same, a, and alls.
Dialogue: 0,0:26:16.86,0:26:21.75,中文,,0,0,0,,我想要 sam、sad、sap、same、a 和 awls
Dialogue: 0,0:26:21.75,0:26:23.63,英文,,0,0,0,,I could insert them into a search tree.
Dialogue: 0,0:26:21.75,0:26:23.63,中文,,0,0,0,,我可以将它们插入到搜索树中
Dialogue: 0,0:26:23.63,0:26:25.45,英文,,0,0,0,,I could insert them into a hash table.
Dialogue: 0,0:26:23.63,0:26:25.45,中文,,0,0,0,,我可以将它们插入到哈希表中
Dialogue: 0,0:26:25.45,0:26:26.75,英文,,0,0,0,,They would look like this.
Dialogue: 0,0:26:25.45,0:26:26.75,中文,,0,0,0,,它们看起来像这样
Dialogue: 0,0:26:26.75,0:26:30.25,英文,,0,0,0,,But I'm going to insert them into a try instead.
Dialogue: 0,0:26:26.75,0:26:30.25,中文,,0,0,0,,但我打算将它们插入到 trie 中
Dialogue: 0,0:26:30.25,0:26:33.57,英文,,0,0,0,,So I'll insert a few, and then you see if you can insert the rest.
Dialogue: 0,0:26:30.25,0:26:33.57,中文,,0,0,0,,我先插入几个 然后看看你是否可以插入剩下的
Dialogue: 0,0:26:33.57,0:26:34.89,英文,,0,0,0,,So I have inserted SAM.
Dialogue: 0,0:26:33.57,0:26:34.89,中文,,0,0,0,,我插入了 sam
Dialogue: 0,0:26:34.89,0:26:38.34,英文,,0,0,0,,And the way I did it is, well, S-A-M.
Dialogue: 0,0:26:34.89,0:26:38.34,中文,,0,0,0,,我做的方法是 s-a-m
Dialogue: 0,0:26:38.34,0:26:39.50,英文,,0,0,0,,Then I inserted SAD.
Dialogue: 0,0:26:38.34,0:26:39.50,中文,,0,0,0,,然后我插入了 sad
Dialogue: 0,0:26:39.50,0:26:41.08,英文,,0,0,0,,And here's kind of the cool part.
Dialogue: 0,0:26:39.50,0:26:41.08,中文,,0,0,0,,这有点酷
Dialogue: 0,0:26:41.08,0:26:42.86,英文,,0,0,0,,Well, SAD shares some letters.
Dialogue: 0,0:26:41.08,0:26:42.86,中文,,0,0,0,,sad 共享一些字母
Dialogue: 0,0:26:42.86,0:26:45.70,英文,,0,0,0,,So I'll just go S-A-D.
Dialogue: 0,0:26:42.86,0:26:45.70,中文,,0,0,0,,我就去 s-a-d
Dialogue: 0,0:26:45.70,0:26:48.22,英文,,0,0,0,,So now for you, how would you add SAP?
Dialogue: 0,0:26:45.70,0:26:48.22,中文,,0,0,0,,那么对你来说 你将如何添加 sap？
Dialogue: 0,0:26:48.22,0:26:51.92,英文,,0,0,0,,So try and picture, where would you add nodes?
Dialogue: 0,0:26:48.22,0:26:51.92,中文,,0,0,0,,试着想象一下 你会在哪里添加节点？
Dialogue: 0,0:26:51.92,0:26:55.89,英文,,0,0,0,,How would you add SAP if this was the kind of structure I was going for?
Dialogue: 0,0:26:51.92,0:26:55.89,中文,,0,0,0,,如果这是我要的结构 你将如何添加 sap？
Dialogue: 0,0:26:55.89,0:26:57.31,英文,,0,0,0,,So I added SAM.
Dialogue: 0,0:26:55.89,0:26:57.31,中文,,0,0,0,,我添加了 sam
Dialogue: 0,0:26:57.31,0:26:58.27,英文,,0,0,0,,I added SAT.
Dialogue: 0,0:26:57.31,0:26:58.27,中文,,0,0,0,,我添加了 sat
Dialogue: 0,0:26:58.27,0:26:59.27,英文,,0,0,0,,SAD.
Dialogue: 0,0:26:58.27,0:26:59.27,中文,,0,0,0,,sad
Dialogue: 0,0:26:59.27,0:27:01.11,英文,,0,0,0,,Please add SAP.
Dialogue: 0,0:26:59.27,0:27:01.11,中文,,0,0,0,,请添加 sap
Dialogue: 0,0:27:01.11,0:27:03.15,英文,,0,0,0,,Oh, you have a hand up.
Dialogue: 0,0:27:01.11,0:27:03.15,中文,,0,0,0,,哦 你举手了
Dialogue: 0,0:27:03.15,0:27:05.68,英文,,0,0,0,,Participation.
Dialogue: 0,0:27:03.15,0:27:05.68,中文,,0,0,0,,参与
Dialogue: 0,0:27:05.68,0:27:10.28,英文,,0,0,0,,OK, so yeah, let's just give A another child and give it the letter P. I agree.
Dialogue: 0,0:27:05.68,0:27:10.28,中文,,0,0,0,,好的 是的 让我们给 a 另一个子节点 给它字母 p 我同意
Dialogue: 0,0:27:10.28,0:27:11.74,英文,,0,0,0,,So let's put out too much.
Dialogue: 0,0:27:10.28,0:27:11.74,中文,,0,0,0,,让我们放太多
Dialogue: 0,0:27:11.74,0:27:14.20,英文,,0,0,0,,OK, so SAP, that's SAP.
Dialogue: 0,0:27:11.74,0:27:14.20,中文,,0,0,0,,好的 所以 sap 那是 sap
Dialogue: 0,0:27:14.20,0:27:15.55,英文,,0,0,0,,And I'll add a bunch more for you.
Dialogue: 0,0:27:14.20,0:27:15.55,中文,,0,0,0,,我还会为你添加更多
Dialogue: 0,0:27:15.55,0:27:17.29,英文,,0,0,0,,So how do we add same?
Dialogue: 0,0:27:15.55,0:27:17.29,中文,,0,0,0,,那么我们如何添加 same？
Dialogue: 0,0:27:17.29,0:27:20.33,英文,,0,0,0,,Well, S-A-M-E, it's like a spelling bee.
Dialogue: 0,0:27:17.29,0:27:20.33,中文,,0,0,0,,好吧 s-a-m-e 就像拼写比赛一样
Dialogue: 0,0:27:20.33,0:27:21.99,英文,,0,0,0,,How do I add A?
Dialogue: 0,0:27:20.33,0:27:21.99,中文,,0,0,0,,我如何添加 a？
Dialogue: 0,0:27:21.99,0:27:28.03,英文,,0,0,0,,A is the one that's a little bit tricky, because you might be tempted, if I want to add A, why don't I just link it there?
Dialogue: 0,0:27:21.99,0:27:28.03,中文,,0,0,0,,a 是有点棘手的 因为你可能会想 如果我想添加 a 为什么不把它链接到那里呢？
Dialogue: 0,0:27:28.03,0:27:31.60,英文,,0,0,0,,Well, that looks kind of weird to me, suddenly the layers,
Dialogue: 0,0:27:28.03,0:27:31.60,中文,,0,0,0,,好吧 这对我来说看起来有点奇怪 突然间这些层
Dialogue: 0,0:27:31.60,0:27:36.92,英文,,0,0,0,,You know, I like the layers because this is the first letter, this is the second letter, these are the possible third letters.
Dialogue: 0,0:27:31.60,0:27:36.92,中文,,0,0,0,,你知道 我喜欢这些层 因为这是第一个字母 这是第二个字母 这些是可能的第三个字母
Dialogue: 0,0:27:36.92,0:27:40.32,英文,,0,0,0,,So if I just link the root to A, that feels kind of ugly to me.
Dialogue: 0,0:27:36.92,0:27:40.32,中文,,0,0,0,,如果我只是将根链接到 a 对我来说感觉有点丑
Dialogue: 0,0:27:40.32,0:27:47.07,英文,,0,0,0,,So I'm going to create a second A, because A is the first letter of A, and A is the second letter of SAN.
Dialogue: 0,0:27:40.32,0:27:47.07,中文,,0,0,0,,我将创建一个第二个 a 因为 a 是 a 的第一个字母 a 是 san 的第二个字母
Dialogue: 0,0:27:47.07,0:27:51.20,英文,,0,0,0,,So in case you're wondering why there's two A's, it's because I want to keep the invariant that the first layer,
Dialogue: 0,0:27:47.07,0:27:51.20,中文,,0,0,0,,如果你想知道为什么有两个 a 那是因为我想保持不变
Dialogue: 0,0:27:51.20,0:27:57.20,英文,,0,0,0,, these are all the first letters, these are all the second letters, these are all the third letters, and so forth.
Dialogue: 0,0:27:51.20,0:27:57.20,中文,,0,0,0,,第一层是所有第一个字母 这些是所有第二个字母 这些是所有第三个字母 等等
Dialogue: 0,0:27:57.20,0:28:01.90,英文,,0,0,0,,So anyway, that's how I added A. And finally, I'll add alls.
Dialogue: 0,0:27:57.20,0:28:01.90,中文,,0,0,0,,总之 这就是我添加 a 的方式 最后 我将添加 awls
Dialogue: 0,0:28:01.90,0:28:05.09,英文,,0,0,0,,So alls, well, how do I do it?
Dialogue: 0,0:28:01.90,0:28:05.09,中文,,0,0,0,,那么 awls 好吧 我该怎么做？
Dialogue: 0,0:28:05.09,0:28:07.55,英文,,0,0,0,,I spell A-W-L-S.
Dialogue: 0,0:28:05.09,0:28:07.55,中文,,0,0,0,,我拼写 a-w-l-s
Dialogue: 0,0:28:07.55,0:28:09.45,英文,,0,0,0,,So I get alls.
Dialogue: 0,0:28:07.55,0:28:09.45,中文,,0,0,0,,我得到了 awls
Dialogue: 0,0:28:09.45,0:28:13.25,英文,,0,0,0,,So it's one of those data structures where I don't even know how to explain it necessarily.
Dialogue: 0,0:28:09.45,0:28:13.25,中文,,0,0,0,,这是我甚至不知道如何解释的数据结构之一
Dialogue: 0,0:28:13.25,0:28:17.52,英文,,0,0,0,,But if I just show you the pictures, I feel like it's almost good enough.
Dialogue: 0,0:28:13.25,0:28:17.52,中文,,0,0,0,,但如果我只是给你看图片 我觉得这几乎足够了
Dialogue: 0,0:28:17.52,0:28:21.12,英文,,0,0,0,,But if you have questions, I can try to visualize it in words.
Dialogue: 0,0:28:17.52,0:28:21.12,中文,,0,0,0,,但如果你有问题 我可以尝试用语言来描述它
Dialogue: 0,0:28:21.12,0:28:22.20,英文,,0,0,0,,Visualize it in words?
Dialogue: 0,0:28:21.12,0:28:22.20,中文,,0,0,0,,用语言来描述它？
Dialogue: 0,0:28:22.20,0:28:25.36,英文,,0,0,0,,I can try to tell you about it in words.
Dialogue: 0,0:28:22.20,0:28:25.36,中文,,0,0,0,,我可以尝试用语言告诉你
Dialogue: 0,0:28:25.36,0:28:27.84,英文,,0,0,0,,Or visualize it on the slide.
Dialogue: 0,0:28:25.36,0:28:27.84,中文,,0,0,0,,或者在幻灯片上可视化它
Dialogue: 0,0:28:27.84,0:28:29.39,英文,,0,0,0,,But that's basically the idea.
Dialogue: 0,0:28:27.84,0:28:29.39,中文,,0,0,0,,但这基本上就是这个想法
Dialogue: 0,0:28:29.39,0:28:34.25,英文,,0,0,0,,Every node contains a letter, and we use the nodes and connect them together to spell words.
Dialogue: 0,0:28:29.39,0:28:34.25,中文,,0,0,0,,每个节点都包含一个字母 我们使用这些节点并将它们连接在一起拼写单词
Dialogue: 0,0:28:34.25,0:28:35.67,英文,,0,0,0,,That's all we got to do.
Dialogue: 0,0:28:34.25,0:28:35.67,中文,,0,0,0,,这就是我们要做的
Dialogue: 0,0:28:35.67,0:28:41.16,英文,,0,0,0,,But there's a bit of a problem here, which is if I show you just this picture and I said, what's in the set?
Dialogue: 0,0:28:35.67,0:28:41.16,中文,,0,0,0,,但是这里有一个问题 那就是如果我给你看这张图片 我说 集合中有什么？
Dialogue: 0,0:28:41.16,0:28:46.24,英文,,0,0,0,,You might be tempted to say, well, yeah, Sam is in the set, and Sap is in the set.
Dialogue: 0,0:28:41.16,0:28:46.24,中文,,0,0,0,,你可能会想说 是的 sam 在集合中 sap 在集合中
Dialogue: 0,0:28:46.24,0:28:50.97,英文,,0,0,0,,But you might also be tempted to say Aw is in the set, A-W.
Dialogue: 0,0:28:46.24,0:28:50.97,中文,,0,0,0,,但你也可能会想说 aw 在集合中 a-w
Dialogue: 0,0:28:50.97,0:28:51.61,英文,,0,0,0,,But it wasn't.
Dialogue: 0,0:28:50.97,0:28:51.61,中文,,0,0,0,,但它不是
Dialogue: 0,0:28:51.61,0:28:52.75,英文,,0,0,0,,Remember, we had six items.
Dialogue: 0,0:28:51.61,0:28:52.75,中文,,0,0,0,,记住 我们有六个元素
Dialogue: 0,0:28:52.75,0:28:55.33,英文,,0,0,0,,We did not have Aw as an item.
Dialogue: 0,0:28:52.75,0:28:55.33,中文,,0,0,0,,我们没有 aw 作为元素
Dialogue: 0,0:28:55.33,0:28:59.52,英文,,0,0,0,,Or we had Sam, but we did not have Sa, S-A.
Dialogue: 0,0:28:55.33,0:28:59.52,中文,,0,0,0,,或者我们有 sam 但我们没有 sa s-a
Dialogue: 0,0:28:59.52,0:29:02.80,英文,,0,0,0,,So how can you tell me for sure that
Dialogue: 0,0:28:59.52,0:29:02.80,中文,,0,0,0,,那么你怎么能肯定地告诉我
Dialogue: 0,0:29:02.80,0:29:06.96,英文,,0,0,0,,SAM, SAT, SAP, SAME, A, and ALLS are in my set.
Dialogue: 0,0:29:02.80,0:29:06.96,中文,,0,0,0,,sam、sat、sap、samE、a 和 awls 在我的集合中
Dialogue: 0,0:29:06.96,0:29:11.45,英文,,0,0,0,,But for example, SA is not, or AW is not.
Dialogue: 0,0:29:06.96,0:29:11.45,中文,,0,0,0,,但例如 sa 不在 或者 aw 不在
Dialogue: 0,0:29:11.45,0:29:14.21,英文,,0,0,0,,How do you indicate what's in the set and what's not?
Dialogue: 0,0:29:11.45,0:29:14.21,中文,,0,0,0,,你如何表示集合中有什么 什么没有？
Dialogue: 0,0:29:14.21,0:29:17.45,英文,,0,0,0,,So this one I'll briefly spoil for time.
Dialogue: 0,0:29:14.21,0:29:17.45,中文,,0,0,0,,这个我会为了时间短暂地剧透
Dialogue: 0,0:29:17.45,0:29:21.51,英文,,0,0,0,,Turns out all you have to do is just mark where the strings end.
Dialogue: 0,0:29:17.45,0:29:21.51,中文,,0,0,0,,事实证明 你所要做的就是标记字符串的结尾
Dialogue: 0,0:29:21.51,0:29:27.67,英文,,0,0,0,,So when I'm spelling ALLS, A-W-L-S, I'll just mark that as blue to say that's the end of a string.
Dialogue: 0,0:29:21.51,0:29:27.67,中文,,0,0,0,,当我拼写 awls a-w-l-s 时 我只需将其标记为蓝色 表示这是字符串的结尾
Dialogue: 0,0:29:27.67,0:29:28.79,英文,,0,0,0,,You're done spelling.
Dialogue: 0,0:29:27.67,0:29:28.79,中文,,0,0,0,,你拼写完了
Dialogue: 0,0:29:28.79,0:29:29.81,英文,,0,0,0,,It's ALLS.
Dialogue: 0,0:29:28.79,0:29:29.81,中文,,0,0,0,,是 awls
Dialogue: 0,0:29:29.81,0:29:31.40,英文,,0,0,0,,That's the string in the set.
Dialogue: 0,0:29:29.81,0:29:31.40,中文,,0,0,0,,这是集合中的字符串
Dialogue: 0,0:29:31.40,0:29:34.44,英文,,0,0,0,,And same thing here, S-A-M-E.
Dialogue: 0,0:29:31.40,0:29:34.44,中文,,0,0,0,,这里也是一样 s-a-m-e
Dialogue: 0,0:29:34.44,0:29:35.46,英文,,0,0,0,,E is blue.
Dialogue: 0,0:29:34.44,0:29:35.46,中文,,0,0,0,,e 是蓝色的
Dialogue: 0,0:29:35.46,0:29:38.16,英文,,0,0,0,,To say you're done spelling, same as in the set.
Dialogue: 0,0:29:35.46,0:29:38.16,中文,,0,0,0,,表示你拼写完了 same 在集合中
Dialogue: 0,0:29:38.16,0:29:40.04,英文,,0,0,0,,And S-A-P, that's blue.
Dialogue: 0,0:29:38.16,0:29:40.04,中文,,0,0,0,,还有 s-a-p 那是蓝色的
Dialogue: 0,0:29:40.04,0:29:43.44,英文,,0,0,0,,But for example, saw, S-A, that's not blue.
Dialogue: 0,0:29:40.04,0:29:43.44,中文,,0,0,0,,但例如 saw s-a 那不是蓝色的
Dialogue: 0,0:29:43.44,0:29:45.36,英文,,0,0,0,,That means you did not finish spelling.
Dialogue: 0,0:29:43.44,0:29:45.36,中文,,0,0,0,,这意味着你没有完成拼写
Dialogue: 0,0:29:45.36,0:29:48.00,英文,,0,0,0,,That's not one of the things in the set.
Dialogue: 0,0:29:45.36,0:29:48.00,中文,,0,0,0,,那不是集合中的东西
Dialogue: 0,0:29:48.00,0:29:52.26,英文,,0,0,0,,But you could continue spelling and get other things in the set if you wanted to.
Dialogue: 0,0:29:48.00,0:29:52.26,中文,,0,0,0,,但如果你愿意 你可以继续拼写并获得集合中的其他东西
Dialogue: 0,0:29:52.26,0:29:53.53,英文,,0,0,0,,OK.
Dialogue: 0,0:29:52.26,0:29:53.53,中文,,0,0,0,,好的
Dialogue: 0,0:29:53.53,0:29:54.91,英文,,0,0,0,,So that's all I got to do.
Dialogue: 0,0:29:53.53,0:29:54.91,中文,,0,0,0,,这就是我要做的
Dialogue: 0,0:29:54.91,0:29:56.83,英文,,0,0,0,,I connect up the nodes to spell words.
Dialogue: 0,0:29:54.91,0:29:56.83,中文,,0,0,0,,我连接节点来拼写单词
Dialogue: 0,0:29:56.83,0:30:00.57,英文,,0,0,0,,I mark nodes blue when they are the end of a key.
Dialogue: 0,0:29:56.83,0:30:00.57,中文,,0,0,0,,当节点是键的结尾时 我将它们标记为蓝色
Dialogue: 0,0:30:00.57,0:30:02.45,英文,,0,0,0,,And that's basically it for tries.
Dialogue: 0,0:30:00.57,0:30:02.45,中文,,0,0,0,,基本上就是这样了
Dialogue: 0,0:30:02.45,0:30:06.65,英文,,0,0,0,,So how do you run contains in the cartoon picture?
Dialogue: 0,0:30:02.45,0:30:06.65,中文,,0,0,0,,那么你如何在卡通图片中运行 contains操作呢？
Dialogue: 0,0:30:06.65,0:30:07.94,英文,,0,0,0,,You just start spelling words.
Dialogue: 0,0:30:06.65,0:30:07.94,中文,,0,0,0,,你只需开始拼写单词
Dialogue: 0,0:30:07.94,0:30:13.08,英文,,0,0,0,,So it's, again, one of those algorithms where I could just show it to you, but I could just show you the pictures.
Dialogue: 0,0:30:07.94,0:30:13.08,中文,,0,0,0,,又是那种算法 我直接展示给你看也行 不过我也可以只给你看图
Dialogue: 0,0:30:13.08,0:30:14.22,英文,,0,0,0,,So how do I find Sam?
Dialogue: 0,0:30:13.08,0:30:14.22,中文,,0,0,0,,那我要怎么找到 sam 呢？
Dialogue: 0,0:30:14.22,0:30:17.00,英文,,0,0,0,,I started the root, and I spell S-A-M.
Dialogue: 0,0:30:14.22,0:30:17.00,中文,,0,0,0,,我从根节点开始 拼写 s-a-m
Dialogue: 0,0:30:17.00,0:30:17.90,英文,,0,0,0,,It's blue.
Dialogue: 0,0:30:17.00,0:30:17.90,中文,,0,0,0,,它是蓝色的
Dialogue: 0,0:30:17.90,0:30:19.54,英文,,0,0,0,,So that's the end of a word.
Dialogue: 0,0:30:17.90,0:30:19.54,中文,,0,0,0,,这是一个单词的结尾
Dialogue: 0,0:30:19.54,0:30:20.94,英文,,0,0,0,,We have Sam in the set.
Dialogue: 0,0:30:19.54,0:30:20.94,中文,,0,0,0,,sam 在集合中
Dialogue: 0,0:30:20.94,0:30:22.21,英文,,0,0,0,,What about saw?
Dialogue: 0,0:30:20.94,0:30:22.21,中文,,0,0,0,,那 saw 呢？
Dialogue: 0,0:30:22.21,0:30:23.13,英文,,0,0,0,,S-A?
Dialogue: 0,0:30:22.21,0:30:23.13,中文,,0,0,0,,s-a？
Dialogue: 0,0:30:23.13,0:30:24.43,英文,,0,0,0,,That note is not blue.
Dialogue: 0,0:30:23.13,0:30:24.43,中文,,0,0,0,,那个节点不是蓝色的
Dialogue: 0,0:30:24.43,0:30:26.47,英文,,0,0,0,,So we did not finish spelling a word.
Dialogue: 0,0:30:24.43,0:30:26.47,中文,,0,0,0,,我们没有拼完一个单词
Dialogue: 0,0:30:26.47,0:30:28.15,英文,,0,0,0,,That is not in the set.
Dialogue: 0,0:30:26.47,0:30:28.15,中文,,0,0,0,,它不在集合中
Dialogue: 0,0:30:28.15,0:30:29.43,英文,,0,0,0,,What about A?
Dialogue: 0,0:30:28.15,0:30:29.43,中文,,0,0,0,,那 a 呢？
Dialogue: 0,0:30:29.43,0:30:31.03,英文,,0,0,0,,A. That's in the set.
Dialogue: 0,0:30:29.43,0:30:31.03,中文,,0,0,0,,a 它在集合中
Dialogue: 0,0:30:31.03,0:30:32.37,英文,,0,0,0,,What about sack?
Dialogue: 0,0:30:31.03,0:30:32.37,中文,,0,0,0,,那 sack 呢？
Dialogue: 0,0:30:32.37,0:30:33.58,英文,,0,0,0,,S-A-Q?
Dialogue: 0,0:30:32.37,0:30:33.58,中文,,0,0,0,,s-a-q？
Dialogue: 0,0:30:33.58,0:30:34.82,英文,,0,0,0,,S-A.
Dialogue: 0,0:30:33.58,0:30:34.82,中文,,0,0,0,,s-a
Dialogue: 0,0:30:34.82,0:30:35.26,英文,,0,0,0,,Uh-oh.
Dialogue: 0,0:30:34.82,0:30:35.26,中文,,0,0,0,,呃哦
Dialogue: 0,0:30:35.26,0:30:40.76,英文,,0,0,0,,There's no Q. So I fall off the tree, and there's no sack in the set.
Dialogue: 0,0:30:35.26,0:30:40.76,中文,,0,0,0,,没有 q 我从树上掉下来了 集合里没有 sack
Dialogue: 0,0:30:40.76,0:30:41.86,英文,,0,0,0,,How do I pronounce that?
Dialogue: 0,0:30:40.76,0:30:41.86,中文,,0,0,0,,这个怎么读？
Dialogue: 0,0:30:41.86,0:30:42.52,英文,,0,0,0,,Sack-wha?
Dialogue: 0,0:30:41.86,0:30:42.52,中文,,0,0,0,,sack-wha？
Dialogue: 0,0:30:42.52,0:30:43.80,英文,,0,0,0,,I don't know.
Dialogue: 0,0:30:42.52,0:30:43.80,中文,,0,0,0,,我不知道
Dialogue: 0,0:30:43.80,0:30:45.39,英文,,0,0,0,,Sack, sequa, whatever.
Dialogue: 0,0:30:43.80,0:30:45.39,中文,,0,0,0,,sack sequa 随便吧
Dialogue: 0,0:30:45.39,0:30:48.33,英文,,0,0,0,,But that thing is not in the set.
Dialogue: 0,0:30:45.39,0:30:48.33,中文,,0,0,0,,但那玩意儿不在集合里
Dialogue: 0,0:30:48.33,0:30:48.81,英文,,0,0,0,,OK.
Dialogue: 0,0:30:48.33,0:30:48.81,中文,,0,0,0,,好的
Dialogue: 0,0:30:48.81,0:30:50.67,英文,,0,0,0,,Because I fall off the tree.
Dialogue: 0,0:30:48.81,0:30:50.67,中文,,0,0,0,,因为我从树上掉下来了
Dialogue: 0,0:30:50.67,0:30:51.25,英文,,0,0,0,,Great.
Dialogue: 0,0:30:50.67,0:30:51.25,中文,,0,0,0,,很好
Dialogue: 0,0:30:51.25,0:30:55.74,英文,,0,0,0,,Sometimes people call it hit when it's in the tree and miss it when it's not, but now you know.
Dialogue: 0,0:30:51.25,0:30:55.74,中文,,0,0,0,,有时候人们把它在树上时称为命中 不在时称为未命中 但现在你知道了
Dialogue: 0,0:30:55.74,0:30:56.72,英文,,0,0,0,,All right.
Dialogue: 0,0:30:55.74,0:30:56.72,中文,,0,0,0,,好的
Dialogue: 0,0:30:56.72,0:30:58.40,英文,,0,0,0,,So those are the ways you can miss.
Dialogue: 0,0:30:56.72,0:30:58.40,中文,,0,0,0,,这些就是你会错过的几种方式
Dialogue: 0,0:30:58.40,0:31:03.19,英文,,0,0,0,,I guess you also miss on sacks, because S-A-X, fall off the tree.
Dialogue: 0,0:30:58.40,0:31:03.19,中文,,0,0,0,,我猜你也错过了 sacks 因为 s-a-x 从树上掉下来了
Dialogue: 0,0:31:03.19,0:31:13.35,英文,,0,0,0,,OK, and by the way, just to remember from all the lectures long ago, remember, you can use a binary search tree to represent a set, or you can use it to represent a map.
Dialogue: 0,0:31:03.19,0:31:13.35,中文,,0,0,0,,好的 顺便说一下 回想一下很久以前的那些课程 记住 你可以用二叉搜索树来表示一个集合 也可以用它来表示一个映射
Dialogue: 0,0:31:13.35,0:31:20.45,英文,,0,0,0,,And to represent a map, all you have to do is associate every string with whatever value you want to associate it with.
Dialogue: 0,0:31:13.35,0:31:20.45,中文,,0,0,0,,要表示一个映射 你所要做的就是将每个字符串与你想与之关联的任何值相关联
Dialogue: 0,0:31:20.45,0:31:27.83,英文,,0,0,0,,So maybe I want to say, like, bi has number 4, for whatever reason, and c has value 6, or whatever.
Dialogue: 0,0:31:20.45,0:31:27.83,中文,,0,0,0,,比如 我想说 bi 对应数字 4 不管什么原因 c 的值是 6 等等
Dialogue: 0,0:31:27.83,0:31:32.67,英文,,0,0,0,,So all I have to do is, in the nodes, also write down the value associated with the string.
Dialogue: 0,0:31:27.83,0:31:32.67,中文,,0,0,0,,我所要做的就是在节点中写下与字符串相关联的值
Dialogue: 0,0:31:32.67,0:31:36.72,英文,,0,0,0,,So whenever I'm done spelling something, I actually don't know what this spells.
Dialogue: 0,0:31:32.67,0:31:36.72,中文,,0,0,0,,每当我拼完一个东西 我其实不知道它拼的是什么
Dialogue: 0,0:31:36.72,0:31:38.84,英文,,0,0,0,,S-H-E-L-L-S.
Dialogue: 0,0:31:36.72,0:31:38.84,中文,,0,0,0,,s-h-e-l-l-s
Dialogue: 0,0:31:38.84,0:31:43.18,英文,,0,0,0,,Shells, I finished spelling, and that has number three for whatever reason.
Dialogue: 0,0:31:38.84,0:31:43.18,中文,,0,0,0,,Shells 我拼完了 它对应数字 3 不管什么原因
Dialogue: 0,0:31:43.18,0:31:45.72,英文,,0,0,0,,Because someone wanted to map shells to three.
Dialogue: 0,0:31:43.18,0:31:45.72,中文,,0,0,0,,因为有人想把 shells 映射到 3
Dialogue: 0,0:31:45.72,0:31:46.92,英文,,0,0,0,,OK, great.
Dialogue: 0,0:31:45.72,0:31:46.92,中文,,0,0,0,,好的 很好
Dialogue: 0,0:31:46.92,0:31:47.84,英文,,0,0,0,,Oh, I see what this spells.
Dialogue: 0,0:31:46.92,0:31:47.84,中文,,0,0,0,,哦 我知道这拼的是什么了
Dialogue: 0,0:31:47.84,0:31:48.90,英文,,0,0,0,,They want me to say this.
Dialogue: 0,0:31:47.84,0:31:48.90,中文,,0,0,0,,他们想让我说这个
Dialogue: 0,0:31:48.90,0:31:50.16,英文,,0,0,0,,I'm not going to say it.
Dialogue: 0,0:31:48.90,0:31:50.16,中文,,0,0,0,,我不会说的
Dialogue: 0,0:31:50.16,0:31:51.58,英文,,0,0,0,,OK.
Dialogue: 0,0:31:50.16,0:31:51.58,中文,,0,0,0,,好的
Dialogue: 0,0:31:51.58,0:31:52.88,英文,,0,0,0,,So that's the tri.
Dialogue: 0,0:31:51.58,0:31:52.88,中文,,0,0,0,,这就是 trie
Dialogue: 0,0:31:52.88,0:31:57.04,英文,,0,0,0,,We saw another way to represent a set or a map of items.
Dialogue: 0,0:31:52.88,0:31:57.04,中文,,0,0,0,,我们看到了另一种表示项目集合或映射的方法
Dialogue: 0,0:31:57.04,0:32:04.89,英文,,0,0,0,,And these are the pictures, the cartoons, of how you represent the set using different structures.
Dialogue: 0,0:31:57.04,0:32:04.89,中文,,0,0,0,,这些是图片 卡通画 展示了如何使用不同的结构来表示集合
Dialogue: 0,0:32:04.89,0:32:06.49,英文,,0,0,0,,OK, so there we go.
Dialogue: 0,0:32:04.89,0:32:06.49,中文,,0,0,0,,好的 就这样
Dialogue: 0,0:32:06.49,0:32:09.16,英文,,0,0,0,,By the way, the word try, you might be confused what it is.
Dialogue: 0,0:32:06.49,0:32:09.16,中文,,0,0,0,,顺便说一下 trie 这个词 你可能会搞不清楚它是什么
Dialogue: 0,0:32:09.16,0:32:10.54,英文,,0,0,0,,I'm also confused.
Dialogue: 0,0:32:09.16,0:32:10.54,中文,,0,0,0,,我也很困惑
Dialogue: 0,0:32:10.54,0:32:17.08,英文,,0,0,0,,The inventor of try said, I guess he was trying to be clever, and he said, well, a try is a retrieval tree.
Dialogue: 0,0:32:10.54,0:32:17.08,中文,,0,0,0,,trie 的发明者说 我猜他想耍小聪明 他说 trie 是一种检索树
Dialogue: 0,0:32:17.08,0:32:23.67,英文,,0,0,0,,So I'll just take this try and say, well, they'll say it's a retrieval tree, so I'll call it a tree.
Dialogue: 0,0:32:17.08,0:32:23.67,中文,,0,0,0,,我就拿这个 trie 来说 好吧 他们会说它是一种检索树 所以我就叫它树
Dialogue: 0,0:32:23.67,0:32:28.07,英文,,0,0,0,,And everybody said, you are stupid, because this is already a word that we're using.
Dialogue: 0,0:32:23.67,0:32:28.07,中文,,0,0,0,,大家都说 你太蠢了 因为这已经是我们正在使用的词了
Dialogue: 0,0:32:28.07,0:32:29.49,英文,,0,0,0,,It's tree.
Dialogue: 0,0:32:28.07,0:32:29.49,中文,,0,0,0,,是树
Dialogue: 0,0:32:29.49,0:32:34.50,英文,,0,0,0,,And also, I would argue binary search trees are also Retrieval trees.
Dialogue: 0,0:32:29.49,0:32:34.50,中文,,0,0,0,,而且 我认为二叉搜索树也是 检索树
Dialogue: 0,0:32:34.50,0:32:36.80,英文,,0,0,0,,So I don't understand this name whatsoever.
Dialogue: 0,0:32:34.50,0:32:36.80,中文,,0,0,0,,我一点也不理解这个名字
Dialogue: 0,0:32:36.80,0:32:40.90,英文,,0,0,0,,Do know that if you want to honor the inventor, you would call it tree.
Dialogue: 0,0:32:36.80,0:32:40.90,中文,,0,0,0,,要知道 如果你想向发明者致敬 你应该叫它树
Dialogue: 0,0:32:40.90,0:32:43.28,英文,,0,0,0,,But then no one would know what you're talking about.
Dialogue: 0,0:32:40.90,0:32:43.28,中文,,0,0,0,,但那样就没人知道你在说什么了
Dialogue: 0,0:32:43.28,0:32:45.97,英文,,0,0,0,,And in fact, someone on Wikipedia was complaining about it.
Dialogue: 0,0:32:43.28,0:32:45.97,中文,,0,0,0,,事实上 有人在维基百科上抱怨过这件事
Dialogue: 0,0:32:45.97,0:32:49.55,英文,,0,0,0,,So everybody in real life just calls it try.
Dialogue: 0,0:32:45.97,0:32:49.55,中文,,0,0,0,,现实生活中的人都叫它 trie
Dialogue: 0,0:32:49.55,0:32:51.51,英文,,0,0,0,,But that's where it is.
Dialogue: 0,0:32:49.55,0:32:51.51,中文,,0,0,0,,但这就是它的来历
Dialogue: 0,0:32:51.51,0:32:52.95,英文,,0,0,0,,Very strange name.
Dialogue: 0,0:32:51.51,0:32:52.95,中文,,0,0,0,,非常奇怪的名字
Dialogue: 0,0:32:52.95,0:32:53.59,英文,,0,0,0,,Oh, well.
Dialogue: 0,0:32:52.95,0:32:53.59,中文,,0,0,0,,哦 好吧
Dialogue: 0,0:32:53.59,0:32:54.51,英文,,0,0,0,,But this is the lesson.
Dialogue: 0,0:32:53.59,0:32:54.51,中文,,0,0,0,,但这就是这节课的内容
Dialogue: 0,0:32:54.51,0:32:59.90,英文,,0,0,0,,If you ever want to invent a new data structure, you can give it the strangest names you can think of.
Dialogue: 0,0:32:54.51,0:32:59.90,中文,,0,0,0,,如果你想发明一种新的数据结构 你可以给它起你能想到的最奇怪的名字
Dialogue: 0,0:32:59.90,0:33:02.06,英文,,0,0,0,,And we all are stuck with them.
Dialogue: 0,0:32:59.90,0:33:02.06,中文,,0,0,0,,然后我们都得忍受它们
Dialogue: 0,0:33:02.06,0:33:03.24,英文,,0,0,0,,OK.
Dialogue: 0,0:33:02.06,0:33:03.24,中文,,0,0,0,,好的
Dialogue: 0,0:33:03.24,0:33:10.92,英文,,0,0,0,,So one important question is, I've shown you the cartoons, but how would you actually implement trying?
Dialogue: 0,0:33:03.24,0:33:10.92,中文,,0,0,0,,一个重要的问题是 我已经给你看了卡通画 但你实际上要如何实现 trie 呢？
Dialogue: 0,0:33:10.92,0:33:12.98,英文,,0,0,0,,So how would I write this in Java code?
Dialogue: 0,0:33:10.92,0:33:12.98,中文,,0,0,0,,那么我如何在 Java 代码中编写这个呢？
Dialogue: 0,0:33:12.98,0:33:14.77,英文,,0,0,0,,Sure, maybe you like the cartoon picture.
Dialogue: 0,0:33:12.98,0:33:14.77,中文,,0,0,0,,当然 也许你喜欢卡通图片
Dialogue: 0,0:33:14.77,0:33:16.35,英文,,0,0,0,,I can just spell out the words.
Dialogue: 0,0:33:14.77,0:33:16.35,中文,,0,0,0,,我可以直接把单词拼出来
Dialogue: 0,0:33:16.35,0:33:23.29,英文,,0,0,0,,But how would you actually represent this in Java with instance variables and pointers?
Dialogue: 0,0:33:16.35,0:33:23.29,中文,,0,0,0,,但是你如何在 Java 中用实例变量和指针来表示它呢？
Dialogue: 0,0:33:23.29,0:33:28.10,英文,,0,0,0,,Well, here's one possible thing you could do, which is I'm going to create nodes.
Dialogue: 0,0:33:23.29,0:33:28.10,中文,,0,0,0,,好吧 你可以这样做 我要创建节点
Dialogue: 0,0:33:28.10,0:33:29.48,英文,,0,0,0,,And what has to be in every node?
Dialogue: 0,0:33:28.10,0:33:29.48,中文,,0,0,0,,每个节点里必须有什么？
Dialogue: 0,0:33:29.48,0:33:30.12,英文,,0,0,0,,Well, let me think.
Dialogue: 0,0:33:29.48,0:33:30.12,中文,,0,0,0,,让我想想
Dialogue: 0,0:33:30.12,0:33:31.74,英文,,0,0,0,,The node has to have a character.
Dialogue: 0,0:33:30.12,0:33:31.74,中文,,0,0,0,,节点必须有一个字符
Dialogue: 0,0:33:31.74,0:33:36.98,英文,,0,0,0,,So for example, this node contains the letter A. I should write it down if the node is blue.
Dialogue: 0,0:33:31.74,0:33:36.98,中文,,0,0,0,,例如 这个节点包含字母 a 如果节点是蓝色的 我应该把它写下来
Dialogue: 0,0:33:36.98,0:33:40.16,英文,,0,0,0,,That is, is it the end of one of my strings?
Dialogue: 0,0:33:36.98,0:33:40.16,中文,,0,0,0,,也就是说 它是我其中一个字符串的结尾吗？
Dialogue: 0,0:33:40.16,0:33:41.58,英文,,0,0,0,,Or should I keep spelling?
Dialogue: 0,0:33:40.16,0:33:41.58,中文,,0,0,0,,还是我应该继续拼写？
Dialogue: 0,0:33:41.58,0:33:44.90,英文,,0,0,0,,So in this case, A is blue, because A is in the set.
Dialogue: 0,0:33:41.58,0:33:44.90,中文,,0,0,0,,在这种情况下 a 是蓝色的 因为 a 在集合中
Dialogue: 0,0:33:44.90,0:33:49.43,英文,,0,0,0,,And D is blue, because if you spelled your way to sad, that's in the set.
Dialogue: 0,0:33:44.90,0:33:49.43,中文,,0,0,0,,d 也是蓝色的 因为如果你拼出了 sad 那它就在集合里
Dialogue: 0,0:33:49.43,0:33:53.17,英文,,0,0,0,,So this is key just tells me if the node colored blue or not.
Dialogue: 0,0:33:49.43,0:33:53.17,中文,,0,0,0,,这个 key 只是告诉我节点在我的图片中是否是蓝色的
Dialogue: 0,0:33:53.17,0:33:54.65,英文,,0,0,0,,in my picture.
Dialogue: 0,0:33:53.17,0:33:54.65,中文,,0,0,0,,在我的图片中
Dialogue: 0,0:33:54.65,0:33:59.61,英文,,0,0,0,,And somewhat bizarrely, my third instance variable is a data indexed character map.
Dialogue: 0,0:33:54.65,0:33:59.61,中文,,0,0,0,,有点奇怪的是 我的第三个实例变量是一个数据索引字符映射
Dialogue: 0,0:33:59.61,0:34:02.47,英文,,0,0,0,,Remember that thing from five minutes ago?
Dialogue: 0,0:33:59.61,0:34:02.47,中文,,0,0,0,,还记得五分钟前那个东西吗？
Dialogue: 0,0:34:02.47,0:34:09.74,英文,,0,0,0,,That was the array where every single index had a true or false to tell me if it's in the set.
Dialogue: 0,0:34:02.47,0:34:09.74,中文,,0,0,0,,那就是那个数组 每个索引都有一个 true 或 false 来告诉我它是否在集合中
Dialogue: 0,0:34:09.74,0:34:12.06,英文,,0,0,0,,In this case, I'm actually going to use it as a map.
Dialogue: 0,0:34:09.74,0:34:12.06,中文,,0,0,0,,在这种情况下 我实际上要把它用作映射
Dialogue: 0,0:34:12.06,0:34:15.92,英文,,0,0,0,,So I will have one memory box for A through Z,
Dialogue: 0,0:34:12.06,0:34:15.92,中文,,0,0,0,,我会有一个内存盒 用于存放 a 到 z
Dialogue: 0,0:34:15.92,0:34:20.91,英文,,0,0,0,,And instead of just writing A through Z to say if that letter is in the set, I'm actually going to map those to links.
Dialogue: 0,0:34:15.92,0:34:20.91,中文,,0,0,0,,与其仅仅写下 a 到 z 来表示那个字母是否在集合中 我实际上要把它们映射到链接
Dialogue: 0,0:34:20.91,0:34:27.14,英文,,0,0,0,,So for example, in this A node, I have this array of, let's say, 26 different links.
Dialogue: 0,0:34:20.91,0:34:27.14,中文,,0,0,0,,例如 在这个 a 节点中 我有一个包含 26 个不同链接的数组
Dialogue: 0,0:34:27.14,0:34:35.66,英文,,0,0,0,,And the D link, which I guess is number 4, that's going to map to this node, or going to give me a pointer to this node, the M.
Dialogue: 0,0:34:27.14,0:34:35.66,中文,,0,0,0,,d 链接 我猜是第 4 个 它将映射到这个节点 或者给我一个指向这个节点的指针 m
Dialogue: 0,0:34:35.66,0:34:39.19,英文,,0,0,0,,I don't know what number in the alphabet M is.
Dialogue: 0,0:34:35.66,0:34:39.19,中文,,0,0,0,,我不知道 m 在字母表中是第几个
Dialogue: 0,0:34:39.19,0:34:39.77,英文,,0,0,0,,ABC?
Dialogue: 0,0:34:39.19,0:34:39.77,中文,,0,0,0,,abc？
Dialogue: 0,0:34:39.77,0:34:41.53,英文,,0,0,0,,I'm not going to do it.
Dialogue: 0,0:34:39.77,0:34:41.53,中文,,0,0,0,,我不会去数的
Dialogue: 0,0:34:41.53,0:34:48.53,英文,,0,0,0,,M, whatever number that is, if you go to the M index in the array and follow that pointer, you'll go to this node.
Dialogue: 0,0:34:41.53,0:34:48.53,中文,,0,0,0,,m 不管它是第几个 如果你去数组中的 m 索引并跟随那个指针 你就会到达这个节点
Dialogue: 0,0:34:48.53,0:34:53.28,英文,,0,0,0,,If you go to the P index, whatever it is, and you follow the pointer, you'll go to this node.
Dialogue: 0,0:34:48.53,0:34:53.28,中文,,0,0,0,,如果你去 p 索引 不管它是第几个 你跟随指针 你就会到达这个节点
Dialogue: 0,0:34:53.28,0:34:56.88,英文,,0,0,0,,So those are the outgoing pointers from the A.
Dialogue: 0,0:34:53.28,0:34:56.88,中文,,0,0,0,,这些是 a 的出指针
Dialogue: 0,0:34:56.88,0:34:58.68,英文,,0,0,0,,vertex, or the node.
Dialogue: 0,0:34:56.88,0:34:58.68,中文,,0,0,0,,顶点 或者说节点
Dialogue: 0,0:34:58.68,0:35:03.90,英文,,0,0,0,,And we represent it using a data indexed character map, kind of similar to that array I had from earlier.
Dialogue: 0,0:34:58.68,0:35:03.90,中文,,0,0,0,,我们用数据索引字符映射来表示它 有点像我之前用的那个数组
Dialogue: 0,0:35:03.90,0:35:11.57,英文,,0,0,0,,But instead of just putting trues and falses in the array, I will map every character to a pointer that tells me where to go for the next letter.
Dialogue: 0,0:35:03.90,0:35:11.57,中文,,0,0,0,,但我不是在数组中放 true 和 false 而是将每个字符映射到一个指针 告诉我下一个字母要去哪里
Dialogue: 0,0:35:11.57,0:35:12.65,英文,,0,0,0,,And what about Q?
Dialogue: 0,0:35:11.57,0:35:12.65,中文,,0,0,0,,那 q 呢？
Dialogue: 0,0:35:12.65,0:35:14.11,英文,,0,0,0,,Q is not in the set.
Dialogue: 0,0:35:12.65,0:35:14.11,中文,,0,0,0,,q 不在集合里
Dialogue: 0,0:35:14.11,0:35:15.31,英文,,0,0,0,,I'd fall off the tree.
Dialogue: 0,0:35:14.11,0:35:15.31,中文,,0,0,0,,我会从树上掉下来
Dialogue: 0,0:35:15.31,0:35:22.94,英文,,0,0,0,,Well, you could just put null in the Qth element to indicate that there's no node corresponding to Q.
Dialogue: 0,0:35:15.31,0:35:22.94,中文,,0,0,0,,好吧 你可以在 q 的元素中放 null 表示没有与 q 对应的节点
Dialogue: 0,0:35:22.94,0:35:23.56,英文,,0,0,0,,So that's it.
Dialogue: 0,0:35:22.94,0:35:23.56,中文,,0,0,0,,就是这样
Dialogue: 0,0:35:23.56,0:35:27.56,英文,,0,0,0,,I have a node with these three items, and that's pretty much it.
Dialogue: 0,0:35:23.56,0:35:27.56,中文,,0,0,0,,这个节点有三个条目 基本就是这样
Dialogue: 0,0:35:27.56,0:35:31.25,英文,,0,0,0,,And I just take lots of nodes, connect them all together, and I get a shrine.
Dialogue: 0,0:35:27.56,0:35:31.25,中文,,0,0,0,,我把很多节点连在一起 就得到了一个 trie
Dialogue: 0,0:35:31.25,0:35:34.61,英文,,0,0,0,,So that's one way you could possibly implement it.
Dialogue: 0,0:35:31.25,0:35:34.61,中文,,0,0,0,,这是一种可能的实现方式
Dialogue: 0,0:35:34.61,0:35:41.48,英文,,0,0,0,,But maybe you had a bad feeling about this, because remember when I said if one of the
Dialogue: 0,0:35:34.61,0:35:41.48,中文,,0,0,0,,但你可能对这个方法不太满意 因为还记得我之前说过如果某个
Dialogue: 0,0:35:41.48,0:35:44.12,英文,,0,0,0,,Keys are one of the following characters doesn't exist.
Dialogue: 0,0:35:41.48,0:35:44.12,中文,,0,0,0,,Key 是以下字符之一 但它不存在
Dialogue: 0,0:35:44.12,0:35:47.56,英文,,0,0,0,,You can just put null to indicate that it doesn't exist.
Dialogue: 0,0:35:44.12,0:35:47.56,中文,,0,0,0,,你可以用 null 来表示它不存在
Dialogue: 0,0:35:47.56,0:35:50.84,英文,,0,0,0,,Well, it turns out a lot of following characters don't exist.
Dialogue: 0,0:35:47.56,0:35:50.84,中文,,0,0,0,,结果发现很多后续字符都不存在
Dialogue: 0,0:35:50.84,0:35:53.18,英文,,0,0,0,,For example, SAQ didn't exist.
Dialogue: 0,0:35:50.84,0:35:53.18,中文,,0,0,0,,例如 saq 不存在
Dialogue: 0,0:35:53.18,0:35:55.36,英文,,0,0,0,,SAX didn't exist.
Dialogue: 0,0:35:53.18,0:35:55.36,中文,,0,0,0,,sax 不存在
Dialogue: 0,0:35:55.36,0:35:58.06,英文,,0,0,0,,SAS, S-A-Z, doesn't exist.
Dialogue: 0,0:35:55.36,0:35:58.06,中文,,0,0,0,,sas saz 也不存在
Dialogue: 0,0:35:58.06,0:36:02.27,英文,,0,0,0,,So maybe a more honest picture is it looks something like this.
Dialogue: 0,0:35:58.06,0:36:02.27,中文,,0,0,0,,更真实的画面可能是这样的
Dialogue: 0,0:36:02.27,0:36:05.74,英文,,0,0,0,,Or maybe in cartoon format, it looks like this.
Dialogue: 0,0:36:02.27,0:36:05.74,中文,,0,0,0,,或者用卡通形式表示 它看起来像这样
Dialogue: 0,0:36:05.74,0:36:14.34,英文,,0,0,0,,In our nice cartoon, I just showed you that A has one child, which is W. But when I store it in memory, I'm going to have that big array of links.
Dialogue: 0,0:36:05.74,0:36:14.34,中文,,0,0,0,,在我们的卡通图中 我展示了 a 有一个子节点 即 w 但当我在内存中存储它时 我将拥有一个很大的链接数组
Dialogue: 0,0:36:14.34,0:36:19.79,英文,,0,0,0,,And it will say, A, the first link, does A have a child with node A?
Dialogue: 0,0:36:14.34,0:36:19.79,中文,,0,0,0,,它会说 a 第一个链接 a 是否有一个子节点是 a？
Dialogue: 0,0:36:19.79,0:36:20.01,英文,,0,0,0,,No.
Dialogue: 0,0:36:19.79,0:36:20.01,中文,,0,0,0,,没有
Dialogue: 0,0:36:20.01,0:36:20.83,英文,,0,0,0,,So it's null.
Dialogue: 0,0:36:20.01,0:36:20.83,中文,,0,0,0,,它是 null
Dialogue: 0,0:36:20.83,0:36:21.79,英文,,0,0,0,,How about B?
Dialogue: 0,0:36:20.83,0:36:21.79,中文,,0,0,0,,那 b 呢？
Dialogue: 0,0:36:21.79,0:36:22.27,英文,,0,0,0,,Null.
Dialogue: 0,0:36:21.79,0:36:22.27,中文,,0,0,0,,Null
Dialogue: 0,0:36:22.27,0:36:23.15,英文,,0,0,0,,C?
Dialogue: 0,0:36:22.27,0:36:23.15,中文,,0,0,0,,c？
Dialogue: 0,0:36:23.15,0:36:23.69,英文,,0,0,0,,Null.
Dialogue: 0,0:36:23.15,0:36:23.69,中文,,0,0,0,,Null
Dialogue: 0,0:36:23.69,0:36:24.73,英文,,0,0,0,,How about D?
Dialogue: 0,0:36:23.69,0:36:24.73,中文,,0,0,0,,那 d 呢？
Dialogue: 0,0:36:24.73,0:36:25.35,英文,,0,0,0,,Null.
Dialogue: 0,0:36:24.73,0:36:25.35,中文,,0,0,0,,Null
Dialogue: 0,0:36:25.35,0:36:27.95,英文,,0,0,0,,And so I will actually have tons and tons of nulls.
Dialogue: 0,0:36:25.35,0:36:27.95,中文,,0,0,0,,实际上我会有很多很多的 null
Dialogue: 0,0:36:27.95,0:36:33.82,英文,,0,0,0,,And the Wth element will be the only one that actually points to a real node.
Dialogue: 0,0:36:27.95,0:36:33.82,中文,,0,0,0,,而只有第 w 个元素才会指向一个真正的节点
Dialogue: 0,0:36:33.82,0:36:42.98,英文,,0,0,0,,Because that's the only node following A. And all of my other nodes, it could be 25 if I'm using letters, it could be 128 if I'm using ASCII.
Dialogue: 0,0:36:33.82,0:36:42.98,中文,,0,0,0,,因为那是 a 后面唯一的节点 而我所有其他的节点 如果我使用字母 可能是 25 个 如果我使用 ASCII 可能是 128 个
Dialogue: 0,0:36:42.98,0:36:45.60,英文,,0,0,0,,But the key is, all of them are null.
Dialogue: 0,0:36:42.98,0:36:45.60,中文,,0,0,0,,但关键是 它们都是 null
Dialogue: 0,0:36:45.60,0:36:49.34,英文,,0,0,0,,So this data index character map, it's kind of a waste of memory.
Dialogue: 0,0:36:45.60,0:36:49.34,中文,,0,0,0,,这个数据索引字符映射 在某种程度上是在浪费内存
Dialogue: 0,0:36:49.34,0:36:53.56,英文,,0,0,0,,Because in general, I'm not going to have every single letter in use all the time.
Dialogue: 0,0:36:49.34,0:36:53.56,中文,,0,0,0,,因为一般来说 我不会一直使用每个字母
Dialogue: 0,0:36:53.56,0:37:00.52,英文,,0,0,0,,So my array, which contains all of the places I should go for the next letters, will mostly be nulls.
Dialogue: 0,0:36:53.56,0:37:00.52,中文,,0,0,0,,我的数组 包含了所有我应该去寻找下一个字母的地方 大部分都是 null
Dialogue: 0,0:37:00.52,0:37:02.78,英文,,0,0,0,,So that's a little annoying.
Dialogue: 0,0:37:00.52,0:37:02.78,中文,,0,0,0,,这有点烦人
Dialogue: 0,0:37:02.78,0:37:04.78,英文,,0,0,0,,And again, here's a more honest picture of it.
Dialogue: 0,0:37:02.78,0:37:04.78,中文,,0,0,0,,再说一次 这里有一个更真实的图
Dialogue: 0,0:37:04.78,0:37:13.53,英文,,0,0,0,,So for example, let's say here at W, W only has one following letter, which is L, which means that this gigantic array being stored in the W node, it says,
Dialogue: 0,0:37:04.78,0:37:13.53,中文,,0,0,0,,例如 假设在 w 这里 w 只有一个后续字母 即 l 这意味着存储在 w 节点中的这个巨大数组说
Dialogue: 0,0:37:13.53,0:37:20.53,英文,,0,0,0,,if you want the eighth child, if you want to find letter A, no, there's no following A. What about B?
Dialogue: 0,0:37:13.53,0:37:20.53,中文,,0,0,0,,如果你想要第八个子节点 如果你想找到字母 a 不 没有后续的 a 那 b 呢？
Dialogue: 0,0:37:20.53,0:37:22.83,英文,,0,0,0,,No, there's no following B. What about L?
Dialogue: 0,0:37:20.53,0:37:22.83,中文,,0,0,0,,不 没有后续的 b 那 l 呢？
Dialogue: 0,0:37:22.83,0:37:25.11,英文,,0,0,0,,Oh, yeah, there's a following L. Go to this pointer.
Dialogue: 0,0:37:22.83,0:37:25.11,中文,,0,0,0,,哦 是的 有一个后续的 l 去这个指针
Dialogue: 0,0:37:25.11,0:37:26.31,英文,,0,0,0,,You'll find the L node.
Dialogue: 0,0:37:25.11,0:37:26.31,中文,,0,0,0,,你会找到 l 节点
Dialogue: 0,0:37:26.31,0:37:28.73,英文,,0,0,0,,But everyone else is null.
Dialogue: 0,0:37:26.31,0:37:28.73,中文,,0,0,0,,但其他都是 null
Dialogue: 0,0:37:28.73,0:37:31.05,英文,,0,0,0,,So everyone's got tons of links coming out.
Dialogue: 0,0:37:28.73,0:37:31.05,中文,,0,0,0,,每个节点都有很多链接出来
Dialogue: 0,0:37:31.05,0:37:34.62,英文,,0,0,0,,So this approach would be kind of memory hungry.
Dialogue: 0,0:37:31.05,0:37:34.62,中文,,0,0,0,,这种方法有点占用内存
Dialogue: 0,0:37:34.62,0:37:36.06,英文,,0,0,0,,But it would work though.
Dialogue: 0,0:37:34.62,0:37:36.06,中文,,0,0,0,,但它会起作用
Dialogue: 0,0:37:36.06,0:37:42.93,英文,,0,0,0,,So while it works, it's a little bit wasteful of memory because of all of these no links.
Dialogue: 0,0:37:36.06,0:37:42.93,中文,,0,0,0,,虽然它有效 但由于所有这些空链接 它有点浪费内存
Dialogue: 0,0:37:42.93,0:37:44.22,英文,,0,0,0,,Okay.
Dialogue: 0,0:37:42.93,0:37:44.22,中文,,0,0,0,,好的
Dialogue: 0,0:37:44.22,0:37:48.75,英文,,0,0,0,,So this one, honestly, is a little bit weird, I will admit.
Dialogue: 0,0:37:44.22,0:37:48.75,中文,,0,0,0,,这个 老实说 有点奇怪 我承认
Dialogue: 0,0:37:48.75,0:37:51.21,英文,,0,0,0,,But it turns out, and it's OK if you don't see it.
Dialogue: 0,0:37:48.75,0:37:51.21,中文,,0,0,0,,但事实证明 如果你没有看到它也没关系
Dialogue: 0,0:37:51.21,0:37:53.49,英文,,0,0,0,,The tries work perfectly fine if you don't do this.
Dialogue: 0,0:37:51.21,0:37:53.49,中文,,0,0,0,,trie 即使不这样做也能完美地工作
Dialogue: 0,0:37:53.49,0:37:59.23,英文,,0,0,0,,But one tiny improvement we can make is, it turns out, I don't actually have to store the letters.
Dialogue: 0,0:37:53.49,0:37:59.23,中文,,0,0,0,,但我们可以做一个小小的改进 事实证明 我实际上不必存储字母
Dialogue: 0,0:37:59.23,0:38:00.37,英文,,0,0,0,,And this one's kind of silly.
Dialogue: 0,0:37:59.23,0:38:00.37,中文,,0,0,0,,这个有点傻
Dialogue: 0,0:38:00.37,0:38:04.85,英文,,0,0,0,,Because think about if I was at, let's say, I was at the S node.
Dialogue: 0,0:38:00.37,0:38:04.85,中文,,0,0,0,,因为想想看 如果我在 比如说 我在 s 节点
Dialogue: 0,0:38:04.85,0:38:07.21,英文,,0,0,0,,And I followed, I went to index 1.
Dialogue: 0,0:38:04.85,0:38:07.21,中文,,0,0,0,,然后我跟着 我去了索引 1
Dialogue: 0,0:38:07.21,0:38:10.66,英文,,0,0,0,,And I followed the link in index 1.
Dialogue: 0,0:38:07.21,0:38:10.66,中文,,0,0,0,,我跟着索引 1 中的链接
Dialogue: 0,0:38:10.66,0:38:19.80,英文,,0,0,0,,Well, I know that 1, in my 1 through 26 silly example, I know that if I follow the first index and I go to that node, I will get the node corresponding to A.
Dialogue: 0,0:38:10.66,0:38:19.80,中文,,0,0,0,,我知道在我 1 到 26 的例子中 我知道如果我跟着第一个索引 我去了那个节点 我将得到对应于 a 的节点
Dialogue: 0,0:38:19.80,0:38:25.80,英文,,0,0,0,,So there's kind of no point labeling this as A, because the only way to get to a node right here
Dialogue: 0,0:38:19.80,0:38:25.80,中文,,0,0,0,,把这个标记为 a 没什么意义 因为到达这里的唯一方法是沿着已经表示字母 a 的链接
Dialogue: 0,0:38:25.80,0:38:30.80,英文,,0,0,0,,is to follow a link that already meant the letter A.
Dialogue: 0,0:38:25.80,0:38:30.80,中文,,0,0,0,,你进入了数组 找到了第八个链接 然后你去了字母 a 在这里放字母 a 没什么意义
Dialogue: 0,0:38:30.80,0:38:34.71,英文,,0,0,0,,So it's one of those things that I had to stare at it a couple times to really wrap my head around.
Dialogue: 0,0:38:30.80,0:38:34.71,中文,,0,0,0,,我不得不盯着它看几次才能真正理解它
Dialogue: 0,0:38:34.71,0:38:43.05,英文,,0,0,0,,But it turns out you don't really have to label these because the links already tell you, if I follow the link here, you must have followed the link corresponding to the letter A.
Dialogue: 0,0:38:34.71,0:38:43.05,中文,,0,0,0,,但事实证明 你真的不必标记这些 因为链接已经告诉你了 如果我跟着这里的链接 你一定跟着了对应于字母 a 的链接
Dialogue: 0,0:38:43.05,0:38:50.05,英文,,0,0,0,,You went into the array, you found the eighth link, and you went to letter A. There's no point putting the letter A here.
Dialogue: 0,0:38:43.05,0:38:50.05,中文,,0,0,0,,你进入了数组 找到了第八个链接 然后你去了字母 a 在这里放字母 a 没什么意义
Dialogue: 0,0:38:50.05,0:38:51.44,英文,,0,0,0,,But it's a minor improvement.
Dialogue: 0,0:38:50.05,0:38:51.44,中文,,0,0,0,,但这是一个小的改进
Dialogue: 0,0:38:51.44,0:38:54.78,英文,,0,0,0,,If you like it better like this, I'm OK with that, too.
Dialogue: 0,0:38:51.44,0:38:54.78,中文,,0,0,0,,如果你更喜欢这样 我也没问题
Dialogue: 0,0:38:54.78,0:38:56.58,英文,,0,0,0,,Just got some redundant data.
Dialogue: 0,0:38:54.78,0:38:56.58,中文,,0,0,0,,只是有一些冗余数据
Dialogue: 0,0:38:56.58,0:38:57.84,英文,,0,0,0,,OK.
Dialogue: 0,0:38:56.58,0:38:57.84,中文,,0,0,0,,好的
Dialogue: 0,0:38:57.84,0:39:01.12,英文,,0,0,0,,But our problem was the memory inefficiency.
Dialogue: 0,0:38:57.84,0:39:01.12,中文,,0,0,0,,但我们的问题是内存效率低下
Dialogue: 0,0:39:01.12,0:39:03.38,英文,,0,0,0,,But I guess let's briefly talk about runtime.
Dialogue: 0,0:39:01.12,0:39:03.38,中文,,0,0,0,,但我想我们还是简单地谈谈运行时间吧
Dialogue: 0,0:39:03.38,0:39:07.46,英文,,0,0,0,,This is one of those trick questions that's a little bit evil, but I'll ask it anyway, I guess.
Dialogue: 0,0:39:03.38,0:39:07.46,中文,,0,0,0,,这是一个有点邪恶的陷阱问题 但我想我还是会问吧
Dialogue: 0,0:39:07.46,0:39:11.09,英文,,0,0,0,,So let's say I have a try with six keys.
Dialogue: 0,0:39:07.46,0:39:11.09,中文,,0,0,0,,假设我有一个有六个键的 trie
Dialogue: 0,0:39:11.09,0:39:14.69,英文,,0,0,0,,That is, I have added six strings to my try.
Dialogue: 0,0:39:11.09,0:39:14.69,中文,,0,0,0,,也就是说 我已经向我的 trie 中添加了六个字符串
Dialogue: 0,0:39:14.69,0:39:17.37,英文,,0,0,0,,And they're like, Sam, sad, whatever.
Dialogue: 0,0:39:14.69,0:39:17.37,中文,,0,0,0,,它们像是 sam sad 等等
Dialogue: 0,0:39:17.37,0:39:22.67,英文,,0,0,0,,So my question is, in terms of the number of keys, like this could have six keys.
Dialogue: 0,0:39:17.37,0:39:22.67,中文,,0,0,0,,我的问题是 就键的数量而言 它可以有六个键
Dialogue: 0,0:39:22.67,0:39:25.93,英文,,0,0,0,,It could have a billion keys, however many keys.
Dialogue: 0,0:39:22.67,0:39:25.93,中文,,0,0,0,,它可以有十亿个键 任意数量的键
Dialogue: 0,0:39:25.93,0:39:28.24,英文,,0,0,0,,How long does it take to add something to the trie?
Dialogue: 0,0:39:25.93,0:39:28.24,中文,,0,0,0,,向 trie 中添加东西需要多长时间？
Dialogue: 0,0:39:28.24,0:39:30.68,英文,,0,0,0,,And how long does it take to find something in the trie?
Dialogue: 0,0:39:28.24,0:39:30.68,中文,,0,0,0,,在 trie 中找到东西需要多长时间？
Dialogue: 0,0:39:30.68,0:39:35.83,英文,,0,0,0,,And the key thing here is, remember, n is not the number of nodes in the trie.
Dialogue: 0,0:39:30.68,0:39:35.83,中文,,0,0,0,,这里的关键是 记住 n 不是 trie 中节点的数量
Dialogue: 0,0:39:35.83,0:39:41.57,英文,,0,0,0,,It is the number of items I have placed into the trie as strings.
Dialogue: 0,0:39:35.83,0:39:41.57,中文,,0,0,0,,它是我作为字符串放入 trie 的条目数量
Dialogue: 0,0:39:41.57,0:39:48.26,英文,,0,0,0,,It's one of those questions that's almost kind of evil, because you're so tempted to say something about an or what if the tree grows big.
Dialogue: 0,0:39:41.57,0:39:48.26,中文,,0,0,0,,这是一个几乎有点邪恶的问题 因为你很想说一些关于 n 的话 或者如果树变大了会怎么样
Dialogue: 0,0:39:48.26,0:39:53.10,英文,,0,0,0,,But maybe to phrase it one way, how would I try to find a word like potato?
Dialogue: 0,0:39:48.26,0:39:53.10,中文,,0,0,0,,但也许换一种说法 我将如何尝试找到像 potato 这样的单词？
Dialogue: 0,0:39:53.10,0:39:57.40,英文,,0,0,0,,And remember, this could be if the tree has five items or five billion items.
Dialogue: 0,0:39:53.10,0:39:57.40,中文,,0,0,0,,记住 这可能是树中有五个条目或五十亿个条目
Dialogue: 0,0:39:57.40,0:39:58.39,英文,,0,0,0,,How would I find potato?
Dialogue: 0,0:39:57.40,0:39:58.39,中文,,0,0,0,,我怎样才能找到 potato？
Dialogue: 0,0:39:58.39,0:39:59.45,英文,,0,0,0,,I would start here.
Dialogue: 0,0:39:58.39,0:39:59.45,中文,,0,0,0,,我会从这里开始
Dialogue: 0,0:39:59.45,0:40:05.97,英文,,0,0,0,,I'd follow a link to P. I'd follow a link to O. T-A-T-O, potato.
Dialogue: 0,0:39:59.45,0:40:05.97,中文,,0,0,0,,我将沿着一个链接到 p 我将沿着一个链接到 o t-a-t-o potato
Dialogue: 0,0:40:05.97,0:40:12.54,英文,,0,0,0,,So all I have to do is spell the word potato, follow a link for every letter, and I'm done.
Dialogue: 0,0:40:05.97,0:40:12.54,中文,,0,0,0,,我所要做的就是拼出 potato 这个词 为每个字母沿着一个链接 我就完成了
Dialogue: 0,0:40:12.54,0:40:18.24,英文,,0,0,0,,Is that faster or slower if I have 10 things in my try or a bajillion things in my try?
Dialogue: 0,0:40:12.54,0:40:18.24,中文,,0,0,0,,如果我的 trie 中有 10 个东西或者有无数个东西 这会更快还是更慢？
Dialogue: 0,0:40:18.24,0:40:19.34,英文,,0,0,0,,Not really.
Dialogue: 0,0:40:18.24,0:40:19.34,中文,,0,0,0,,没什么区别
Dialogue: 0,0:40:19.34,0:40:22.70,英文,,0,0,0,,So strangely enough, the runtime is constant.
Dialogue: 0,0:40:19.34,0:40:22.70,中文,,0,0,0,,奇怪的是 运行时间是恒定的
Dialogue: 0,0:40:22.70,0:40:29.72,英文,,0,0,0,,Whether I have 10 items or 10 million items, if I want to find a word like potato, I just have to spell that word.
Dialogue: 0,0:40:22.70,0:40:29.72,中文,,0,0,0,,无论我有 10 个条目还是 1000 万个条目 如果我想找到像 potato 这样的单词 我只需要拼出那个单词
Dialogue: 0,0:40:29.72,0:40:33.50,英文,,0,0,0,,It doesn't matter if there are 10 other words in the set or a million other words.
Dialogue: 0,0:40:29.72,0:40:33.50,中文,,0,0,0,,集合中是否有 10 个其他单词或 100 万个其他单词并不重要
Dialogue: 0,0:40:33.50,0:40:38.25,英文,,0,0,0,,I always just spell the word that's given to me following one link per letter, and I'm done.
Dialogue: 0,0:40:33.50,0:40:38.25,中文,,0,0,0,,我总是拼出给我的单词 每个字母沿着一个链接 我就完成了
Dialogue: 0,0:40:38.25,0:40:39.63,英文,,0,0,0,,That's all I got to do.
Dialogue: 0,0:40:38.25,0:40:39.63,中文,,0,0,0,,这就是我所要做的
Dialogue: 0,0:40:39.63,0:40:45.01,英文,,0,0,0,,Now, technically, you might argue that it's actually scaling with L. So if I try to find potato,
Dialogue: 0,0:40:39.63,0:40:45.01,中文,,0,0,0,,理论上 你可能会认为它实际上是按照单词长度L来缩放的
Dialogue: 0,0:40:45.01,0:40:52.01,英文,,0,0,0,, it's going to be faster than if I try to find a really long word like anti-disestablishmentarianism.
Dialogue: 0,0:40:45.01,0:40:52.01,中文,,0,0,0,,如果我尝试查找"potato"这个单词 会比查找一个非常长的单词像"anti-disestablishmentarianism"更快
Dialogue: 0,0:40:52.01,0:40:52.96,英文,,0,0,0,,Maybe I said it right.
Dialogue: 0,0:40:52.01,0:40:52.96,中文,,0,0,0,,也许我说对了
Dialogue: 0,0:40:52.96,0:40:53.94,英文,,0,0,0,,Maybe I didn't.
Dialogue: 0,0:40:52.96,0:40:53.94,中文,,0,0,0,,也许我没有
Dialogue: 0,0:40:53.94,0:40:57.28,英文,,0,0,0,,But I'm sure finding and spelling that word would take longer.
Dialogue: 0,0:40:53.94,0:40:57.28,中文,,0,0,0,,但我确信找到并拼出那个词会花更长的时间
Dialogue: 0,0:40:57.28,0:41:02.78,英文,,0,0,0,,So if you wanted to, you could say it scales with the length of the key and define an extra variable for that.
Dialogue: 0,0:40:57.28,0:41:02.78,中文,,0,0,0,,如果你愿意 你可以说它随着键的长度而扩展 并为此定义一个额外的变量
Dialogue: 0,0:41:02.78,0:41:06.48,英文,,0,0,0,,But we did not do this for binary search trees or hash maps.
Dialogue: 0,0:41:02.78,0:41:06.48,中文,,0,0,0,,但我们没有对二叉搜索树或哈希映射这样做
Dialogue: 0,0:41:06.48,0:41:09.81,英文,,0,0,0,,So I feel like it's unfair if we add it here.
Dialogue: 0,0:41:06.48,0:41:09.81,中文,,0,0,0,,我觉得如果我们在这里添加它是不公平的
Dialogue: 0,0:41:09.81,0:41:13.27,英文,,0,0,0,,Remember, like in LLRBs, I never told you about the length of a string.
Dialogue: 0,0:41:09.81,0:41:13.27,中文,,0,0,0,,记住 就像在 LLRB 中一样 我从来没有告诉过你字符串的长度
Dialogue: 0,0:41:13.27,0:41:15.25,英文,,0,0,0,,So I feel like it's unfair to add it here.
Dialogue: 0,0:41:13.27,0:41:15.25,中文,,0,0,0,,我觉得如果我们在这里添加它是不公平的
Dialogue: 0,0:41:15.25,0:41:17.51,英文,,0,0,0,,So I will just call it constant time.
Dialogue: 0,0:41:15.25,0:41:17.51,中文,,0,0,0,,我只会称它为常数时间
Dialogue: 0,0:41:17.51,0:41:20.24,英文,,0,0,0,,Though if you wanted to, I feel like this answer is OK, too.
Dialogue: 0,0:41:17.51,0:41:20.24,中文,,0,0,0,,不过如果你愿意 我觉得这个答案也可以
Dialogue: 0,0:41:20.24,0:41:24.40,英文,,0,0,0,,But the key thing is, it does not depend on the number of keys in my try.
Dialogue: 0,0:41:20.24,0:41:24.40,中文,,0,0,0,,但关键是 它不依赖于我的 trie 中的键的数量
Dialogue: 0,0:41:24.40,0:41:26.70,英文,,0,0,0,,I always spell the word and follow the links.
Dialogue: 0,0:41:24.40,0:41:26.70,中文,,0,0,0,,我总是拼出单词并沿着链接走
Dialogue: 0,0:41:26.70,0:41:28.64,英文,,0,0,0,,And that's all I have to do.
Dialogue: 0,0:41:26.70,0:41:28.64,中文,,0,0,0,,这就是我所要做的
Dialogue: 0,0:41:28.64,0:41:29.95,英文,,0,0,0,,OK.
Dialogue: 0,0:41:28.64,0:41:29.95,中文,,0,0,0,,好的
Dialogue: 0,0:41:29.95,0:41:31.37,英文,,0,0,0,,So let's try performance.
Dialogue: 0,0:41:29.95,0:41:31.37,中文,,0,0,0,,让我们试试性能
Dialogue: 0,0:41:31.37,0:41:33.51,英文,,0,0,0,,So where are we?
Dialogue: 0,0:41:31.37,0:41:33.51,中文,,0,0,0,,我们现在在哪里？
Dialogue: 0,0:41:33.51,0:41:39.01,英文,,0,0,0,,Well, just to zoom out a bit, we found what the try is in cartoon format.
Dialogue: 0,0:41:33.51,0:41:39.01,中文,,0,0,0,,嗯 简单回顾一下 我们找到了 trie 在卡通形式中的样子
Dialogue: 0,0:41:39.01,0:41:42.31,英文,,0,0,0,,We implemented it with instance variables in Java.
Dialogue: 0,0:41:39.01,0:41:42.31,中文,,0,0,0,,我们用 Java 中的实例变量实现了它
Dialogue: 0,0:41:42.31,0:41:44.95,英文,,0,0,0,,We talked about the memory efficiency, which is pretty bad.
Dialogue: 0,0:41:42.31,0:41:44.95,中文,,0,0,0,,我们讨论了内存效率 它非常糟糕
Dialogue: 0,0:41:44.95,0:41:46.55,英文,,0,0,0,,I have all those extra links.
Dialogue: 0,0:41:44.95,0:41:46.55,中文,,0,0,0,,我有很多额外的链接
Dialogue: 0,0:41:46.55,0:41:49.27,英文,,0,0,0,,And I talked about the runtime, which is really good.
Dialogue: 0,0:41:46.55,0:41:49.27,中文,,0,0,0,,我讨论了运行时间 它真的很好
Dialogue: 0,0:41:49.27,0:41:52.59,英文,,0,0,0,,It's theta of 1 with no asterisks whatsoever.
Dialogue: 0,0:41:49.27,0:41:52.59,中文,,0,0,0,,它是 θ(1)  没有任何星号
Dialogue: 0,0:41:52.59,0:41:57.42,英文,,0,0,0,,If I want to find something, I spell the word, follow the links, and I'm done.
Dialogue: 0,0:41:52.59,0:41:57.42,中文,,0,0,0,,如果我想找到什么东西 我拼出单词 沿着链接走 我就完成了
Dialogue: 0,0:41:57.42,0:41:59.70,英文,,0,0,0,,OK, so I could call it quits here.
Dialogue: 0,0:41:57.42,0:41:59.70,中文,,0,0,0,,好的 所以我可以在这里结束
Dialogue: 0,0:41:59.70,0:42:04.32,英文,,0,0,0,,But one more thing I'll mention is I don't really like that memory inefficiency.
Dialogue: 0,0:41:59.70,0:42:04.32,中文,,0,0,0,,但我还要提的一件事是我真的不喜欢内存效率低下
Dialogue: 0,0:42:04.32,0:42:05.74,英文,,0,0,0,,I want to go back to that.
Dialogue: 0,0:42:04.32,0:42:05.74,中文,,0,0,0,,我想回到这个问题
Dialogue: 0,0:42:05.74,0:42:06.86,英文,,0,0,0,,Remember this?
Dialogue: 0,0:42:05.74,0:42:06.86,中文,,0,0,0,,还记得这个吗？
Dialogue: 0,0:42:06.86,0:42:15.96,英文,,0,0,0,,Remember all these wasteful links where my data-indexed character map just had null, null, null, null, and then a couple of non-null pointers?
Dialogue: 0,0:42:06.86,0:42:15.96,中文,,0,0,0,,还记得所有这些浪费的链接吗？我的数据索引字符映射中只有 null、null、null、null 然后是几个非空指针
Dialogue: 0,0:42:15.96,0:42:17.18,英文,,0,0,0,,I don't really like that.
Dialogue: 0,0:42:15.96,0:42:17.18,中文,,0,0,0,,我不太喜欢这样
Dialogue: 0,0:42:17.18,0:42:19.30,英文,,0,0,0,,So I'm going to fix it.
Dialogue: 0,0:42:17.18,0:42:19.30,中文,,0,0,0,,我要修复它
Dialogue: 0,0:42:19.30,0:42:24.71,英文,,0,0,0,,And this is the kind of section where there's just a lot of different parts of the class mixing together.
Dialogue: 0,0:42:19.30,0:42:24.71,中文,,0,0,0,,在这一部分 类的许多不同部分会混合在一起
Dialogue: 0,0:42:24.71,0:42:31.28,英文,,0,0,0,,And so to me, this is kind of your litmus test for, do you really understand layers of abstraction?
Dialogue: 0,0:42:24.71,0:42:31.28,中文,,0,0,0,,对我来说 这是你的试金石 你能真正理解抽象层吗？
Dialogue: 0,0:42:31.28,0:42:37.08,英文,,0,0,0,,Because if you do understand layers of abstraction, this part of the lecture, you'll be OK with it.
Dialogue: 0,0:42:31.28,0:42:37.08,中文,,0,0,0,,因为如果你理解抽象层 这部分的课程 你就会没问题
Dialogue: 0,0:42:37.08,0:42:46.69,英文,,0,0,0,,If you don't understand layers of abstraction, your brain is going to collapse on itself trying to understand 10 different parts of the class at the same time.
Dialogue: 0,0:42:37.08,0:42:46.69,中文,,0,0,0,,如果你不理解抽象层 你的大脑会因为试图同时理解类的 10 个不同部分而崩溃
Dialogue: 0,0:42:46.69,0:42:51.49,英文,,0,0,0,,So if you truly understand layers of abstraction, this is the place where I hope you realize it.
Dialogue: 0,0:42:46.69,0:42:51.49,中文,,0,0,0,,如果你真的理解抽象层 我希望你能在这里意识到这一点
Dialogue: 0,0:42:51.49,0:42:54.15,英文,,0,0,0,,OK, so let's go back to our problem.
Dialogue: 0,0:42:51.49,0:42:54.15,中文,,0,0,0,,好的 让我们回到我们的问题
Dialogue: 0,0:42:54.15,0:43:00.94,英文,,0,0,0,,Our problem was that in every single node, I'm keeping track of all of these links, even though only a few of them are being used.
Dialogue: 0,0:42:54.15,0:43:00.94,中文,,0,0,0,,我们的问题是 在每个节点中 我都在跟踪所有这些链接 即使只使用了其中的一部分
Dialogue: 0,0:43:00.94,0:43:08.61,英文,,0,0,0,,So for example, this array of links, if this is the node A, and the only letter that I can spell following A is D,
Dialogue: 0,0:43:00.94,0:43:08.61,中文,,0,0,0,,例如 这个链接数组 如果这是节点 a 并且我只能在 a 后面拼写字母 d
Dialogue: 0,0:43:08.61,0:43:15.61,英文,,0,0,0,,well, then the only link that I need is the D link in the array, and all of the other
Dialogue: 0,0:43:08.61,0:43:15.61,中文,,0,0,0,,那么我需要的唯一链接就是数组中的 d 链接 而所有其他的
Dialogue: 0,0:43:15.61,0:43:20.05,英文,,0,0,0,,Links corresponding to other letters that are not D, they all say null.
Dialogue: 0,0:43:15.61,0:43:20.05,中文,,0,0,0,,对应于非 d 字母的链接 它们都显示为 null
Dialogue: 0,0:43:20.05,0:43:23.21,英文,,0,0,0,,So I have all these nulls, and I don't like it.
Dialogue: 0,0:43:20.05,0:43:23.21,中文,,0,0,0,,我有所有这些 null 我不喜欢它
Dialogue: 0,0:43:23.21,0:43:25.55,英文,,0,0,0,,But let's think about what was the point of this array.
Dialogue: 0,0:43:23.21,0:43:25.55,中文,,0,0,0,,但是让我们想想这个数组的意义是什么
Dialogue: 0,0:43:25.55,0:43:32.54,英文,,0,0,0,,If I zoom out, the point of this array, well, all I had to do with this array is map letters to links.
Dialogue: 0,0:43:25.55,0:43:32.54,中文,,0,0,0,,如果我缩小 这个数组的意义 我只是用这个数组将字母映射到链接
Dialogue: 0,0:43:32.54,0:43:38.21,英文,,0,0,0,,All I had to do in this gigantic array with all nulls, that implementation that I chose,
Dialogue: 0,0:43:32.54,0:43:38.21,中文,,0,0,0,,我用这个巨大的数组和所有 null 做的 我选择的那种实现方式
Dialogue: 0,0:43:38.21,0:43:43.29,英文,,0,0,0,,All that it was for, its purpose, was just to say, if you want to go spell D, go here.
Dialogue: 0,0:43:38.21,0:43:43.29,中文,,0,0,0,,它的目的只是说 如果你想拼写 d 去这里
Dialogue: 0,0:43:43.29,0:43:45.73,英文,,0,0,0,,And if you want to go spell Q, go over here.
Dialogue: 0,0:43:43.29,0:43:45.73,中文,,0,0,0,,如果你想拼写 q 去那里
Dialogue: 0,0:43:45.73,0:43:49.25,英文,,0,0,0,,And if you want to spell L, don't spell it because it's not in the set.
Dialogue: 0,0:43:45.73,0:43:49.25,中文,,0,0,0,,如果你想拼写 l 就不要拼写它 因为它不在集合中
Dialogue: 0,0:43:49.25,0:43:58.70,英文,,0,0,0,,So this links instance variable, although I choose data index character map, it turns out that was not the only map I could have chosen.
Dialogue: 0,0:43:49.25,0:43:58.70,中文,,0,0,0,,这个 links 实例变量 虽然我选择了数据索引字符映射 但事实证明这不是我唯一可以选择的地图
Dialogue: 0,0:43:58.70,0:44:05.13,英文,,0,0,0,,In fact, I could have chosen any of these other types of maps that we've already spent all that time building.
Dialogue: 0,0:43:58.70,0:44:05.13,中文,,0,0,0,,事实上 我本可以选择我们之前花了很多时间构建的任何其他类型的地图
Dialogue: 0,0:44:05.13,0:44:11.65,英文,,0,0,0,,Because all I need is a data structure that will tell me, if you want to go find the node D, go over here.
Dialogue: 0,0:44:05.13,0:44:11.65,中文,,0,0,0,,因为我需要的是一个数据结构 它会告诉我 如果你想找到节点 d 去这里
Dialogue: 0,0:44:11.65,0:44:15.67,英文,,0,0,0,,And if you want to find the node L, there is no node L. It's not in the map.
Dialogue: 0,0:44:11.65,0:44:15.67,中文,,0,0,0,,如果你想找到节点 l 没有节点 l 它不在地图上
Dialogue: 0,0:44:15.67,0:44:17.03,英文,,0,0,0,,That's all I need.
Dialogue: 0,0:44:15.67,0:44:17.03,中文,,0,0,0,,这就是我所需要的
Dialogue: 0,0:44:17.03,0:44:26.12,英文,,0,0,0,,So what if I take this array implementation and I swap it out for one of those smarter implementations that we saw from earlier?
Dialogue: 0,0:44:17.03,0:44:26.12,中文,,0,0,0,,那么 如果我采用这个数组实现 并将其替换为我们之前看到的那些更智能的实现之一呢？
Dialogue: 0,0:44:26.12,0:44:27.12,英文,,0,0,0,,Let's do that.
Dialogue: 0,0:44:26.12,0:44:27.12,中文,,0,0,0,,让我们这样做吧
Dialogue: 0,0:44:27.12,0:44:29.54,英文,,0,0,0,,I'm going to take that array implementation.
Dialogue: 0,0:44:27.12,0:44:29.54,中文,,0,0,0,,我将采用该数组实现
Dialogue: 0,0:44:29.54,0:44:30.48,英文,,0,0,0,,I'm going to delete it.
Dialogue: 0,0:44:29.54,0:44:30.48,中文,,0,0,0,,我要删除它
Dialogue: 0,0:44:30.48,0:44:34.65,英文,,0,0,0,,And I'm going to replace it with, strangely enough, a hash map.
Dialogue: 0,0:44:30.48,0:44:34.65,中文,,0,0,0,,我要用 奇怪的是 一个哈希映射 来替换它
Dialogue: 0,0:44:34.65,0:44:35.61,英文,,0,0,0,,Interesting.
Dialogue: 0,0:44:34.65,0:44:35.61,中文,,0,0,0,,有趣
Dialogue: 0,0:44:35.61,0:44:36.91,英文,,0,0,0,,And what does this HashMap do?
Dialogue: 0,0:44:35.61,0:44:36.91,中文,,0,0,0,,这个哈希映射有什么作用？
Dialogue: 0,0:44:36.91,0:44:40.67,英文,,0,0,0,,It tells me you're here at the root, which means you haven't spelled anything yet.
Dialogue: 0,0:44:36.91,0:44:40.67,中文,,0,0,0,,它告诉我你在这里的根 这意味着你还没有拼写任何东西
Dialogue: 0,0:44:40.67,0:44:43.43,英文,,0,0,0,,If you would like to spell A, go to this link.
Dialogue: 0,0:44:40.67,0:44:43.43,中文,,0,0,0,,如果你想拼写 a 去这个链接
Dialogue: 0,0:44:43.43,0:44:45.91,英文,,0,0,0,,If you want to spell C, go to this link.
Dialogue: 0,0:44:43.43,0:44:45.91,中文,,0,0,0,,如果你想拼写 c 去这个链接
Dialogue: 0,0:44:45.91,0:44:48.61,英文,,0,0,0,,All I need is a mapping of letters to links.
Dialogue: 0,0:44:45.91,0:44:48.61,中文,,0,0,0,,我需要的只是字母到链接的映射
Dialogue: 0,0:44:48.61,0:44:52.83,英文,,0,0,0,,I can do it with a HashMap or any other structure that I like.
Dialogue: 0,0:44:48.61,0:44:52.83,中文,,0,0,0,,我可以用哈希映射 或任何其他我喜欢的结构来做到这一点
Dialogue: 0,0:44:52.83,0:44:56.29,英文,,0,0,0,,And so here it says, if you want to go to A, follow this link.
Dialogue: 0,0:44:52.83,0:44:56.29,中文,,0,0,0,,这里说 如果你想去 a 请点击这个链接
Dialogue: 0,0:44:56.29,0:44:59.41,英文,,0,0,0,,If you want to go to D from A, follow this link.
Dialogue: 0,0:44:56.29,0:44:59.41,中文,,0,0,0,,如果你想从 a 去 d 请点击这个链接
Dialogue: 0,0:44:59.41,0:45:02.75,英文,,0,0,0,,If you want to go to C from the root, follow this link.
Dialogue: 0,0:44:59.41,0:45:02.75,中文,,0,0,0,,如果你想从根去 c 请点击这个链接
Dialogue: 0,0:45:02.75,0:45:08.47,英文,,0,0,0,,So this is one of those slides where if you truly are good with abstraction.
Dialogue: 0,0:45:02.75,0:45:08.47,中文,,0,0,0,,这是其中一张幻灯片 如果你真的擅长抽象
Dialogue: 0,0:45:08.47,0:45:10.35,英文,,0,0,0,,then you'll be like, no problem.
Dialogue: 0,0:45:08.47,0:45:10.35,中文,,0,0,0,,那么你会觉得 没问题
Dialogue: 0,0:45:10.35,0:45:15.70,英文,,0,0,0,,Because this thing that's happening in here, the HashMaps, the buckets, the resizing, it's not my problem.
Dialogue: 0,0:45:10.35,0:45:15.70,中文,,0,0,0,,因为这里发生的事情 哈希映射、bucket桶、大小调整 这不是我的问题
Dialogue: 0,0:45:15.70,0:45:17.32,英文,,0,0,0,,I've abstracted it away.
Dialogue: 0,0:45:15.70,0:45:17.32,中文,,0,0,0,,我已经把它抽象掉了
Dialogue: 0,0:45:17.32,0:45:25.12,英文,,0,0,0,,I know that whoever has gone through all that pain and suffering to build a HashMap, maybe you from lab, whoever, has built the HashMap.
Dialogue: 0,0:45:17.32,0:45:25.12,中文,,0,0,0,,我知道 任何经历过构建哈希映射 的痛苦和折磨的人 也许是你来自实验室 无论是谁 都构建了哈希映射
Dialogue: 0,0:45:25.12,0:45:29.40,英文,,0,0,0,,They are dealing with all the hard balancing of buckets and whatever.
Dialogue: 0,0:45:25.12,0:45:29.40,中文,,0,0,0,,他们正在处理所有关于桶的平衡和诸如此类的难题
Dialogue: 0,0:45:29.40,0:45:30.70,英文,,0,0,0,,It's not my problem.
Dialogue: 0,0:45:29.40,0:45:30.70,中文,,0,0,0,,这不是我的问题
Dialogue: 0,0:45:30.70,0:45:34.84,英文,,0,0,0,,All I know is that the HashMap gives me a way of mapping D to links.
Dialogue: 0,0:45:30.70,0:45:34.84,中文,,0,0,0,,我所知道的是 哈希映射 给我提供了一种将 d 映射到链接的方法
Dialogue: 0,0:45:34.84,0:45:38.42,英文,,0,0,0,,So what's going on in this gray box is simply not my concern.
Dialogue: 0,0:45:34.84,0:45:38.42,中文,,0,0,0,,在这个灰色框中发生的事情根本不是我关心的
Dialogue: 0,0:45:38.42,0:45:40.78,英文,,0,0,0,,All I need is a mapping to say, if you want D, go here.
Dialogue: 0,0:45:38.42,0:45:40.78,中文,,0,0,0,,我需要的只是一个映射 说 如果你想要 d 去这里
Dialogue: 0,0:45:40.78,0:45:42.56,英文,,0,0,0,,If you want L, go nowhere.
Dialogue: 0,0:45:40.78,0:45:42.56,中文,,0,0,0,,如果你想要 l 哪儿也别去
Dialogue: 0,0:45:42.56,0:45:43.72,英文,,0,0,0,,It's null.
Dialogue: 0,0:45:42.56,0:45:43.72,中文,,0,0,0,,它是 null
Dialogue: 0,0:45:43.72,0:45:47.50,英文,,0,0,0,,So if that's OK with you, then this slide looks great.
Dialogue: 0,0:45:43.72,0:45:47.50,中文,,0,0,0,,如果你觉得没问题 那么这张幻灯片看起来很棒
Dialogue: 0,0:45:47.50,0:45:49.84,英文,,0,0,0,,And here's how I don't want you to think about this slide.
Dialogue: 0,0:45:47.50,0:45:49.84,中文,,0,0,0,,我不希望你这样看待这张幻灯片
Dialogue: 0,0:45:49.84,0:45:53.55,英文,,0,0,0,,If you try to fit everything in your brain at once, you're thinking about the try.
Dialogue: 0,0:45:49.84,0:45:53.55,中文,,0,0,0,,如果你试图把所有东西都塞进你的大脑里 你就在思考尝试
Dialogue: 0,0:45:53.55,0:45:54.65,英文,,0,0,0,,How do I spell?
Dialogue: 0,0:45:53.55,0:45:54.65,中文,,0,0,0,,我怎么拼写？
Dialogue: 0,0:45:54.65,0:45:56.15,英文,,0,0,0,,Where do I find the next letter D?
Dialogue: 0,0:45:54.65,0:45:56.15,中文,,0,0,0,,我在哪里可以找到下一个字母 d？
Dialogue: 0,0:45:56.15,0:45:58.11,英文,,0,0,0,,How do I find the next letter after D?
Dialogue: 0,0:45:56.15,0:45:58.11,中文,,0,0,0,,我如何找到 d 之后的下一个字母？
Dialogue: 0,0:45:58.11,0:46:02.69,英文,,0,0,0,,And you're also thinking about the buckets, like why is A in bucket 1, why is C in bucket 2?
Dialogue: 0,0:45:58.11,0:46:02.69,中文,,0,0,0,,你也在思考桶 比如为什么 a 在桶 1 中 为什么 c 在桶 2 中？
Dialogue: 0,0:46:02.69,0:46:05.84,英文,,0,0,0,,And you're also thinking about, why is there a link here, and there's another link here?
Dialogue: 0,0:46:02.69,0:46:05.84,中文,,0,0,0,,你也在思考 为什么这里有一个链接 这里还有另一个链接？
Dialogue: 0,0:46:05.84,0:46:07.78,英文,,0,0,0,,There's so many links inside links.
Dialogue: 0,0:46:05.84,0:46:07.78,中文,,0,0,0,,链接里面有这么多链接
Dialogue: 0,0:46:07.78,0:46:10.82,英文,,0,0,0,,If you do that, you're thinking about too much.
Dialogue: 0,0:46:07.78,0:46:10.82,中文,,0,0,0,,如果你这样做 你想得太多了
Dialogue: 0,0:46:10.82,0:46:19.49,英文,,0,0,0,,You're not using layers of abstraction to your advantage, and your brain's going to melt from all the complexity that you're trying to fit inside at one time.
Dialogue: 0,0:46:10.82,0:46:19.49,中文,,0,0,0,,你没有利用抽象层来发挥优势 你的大脑会因为你试图一次性塞进所有复杂的东西而崩溃
Dialogue: 0,0:46:19.49,0:46:26.12,英文,,0,0,0,,So the reason why I really like this part of the lecture is it really stresses your ability to trust the abstraction.
Dialogue: 0,0:46:19.49,0:46:26.12,中文,,0,0,0,,我真的很喜欢这部分课程的原因是 它真的强调了你信任抽象的能力
Dialogue: 0,0:46:26.12,0:46:27.18,英文,,0,0,0,,Don't worry about hash maps.
Dialogue: 0,0:46:26.12,0:46:27.18,中文,,0,0,0,,别担心哈希映射
Dialogue: 0,0:46:27.18,0:46:28.43,英文,,0,0,0,,We know how to do them.
Dialogue: 0,0:46:27.18,0:46:28.43,中文,,0,0,0,,我们知道如何做
Dialogue: 0,0:46:28.43,0:46:31.63,英文,,0,0,0,,Trust that they work and use them as a map.
Dialogue: 0,0:46:28.43,0:46:31.63,中文,,0,0,0,,相信它们的作用 并将它们用作地图
Dialogue: 0,0:46:31.63,0:46:32.94,英文,,0,0,0,,Great.
Dialogue: 0,0:46:31.63,0:46:32.94,中文,,0,0,0,,太棒了
Dialogue: 0,0:46:32.94,0:46:34.58,英文,,0,0,0,,What if you used a binary search tree?
Dialogue: 0,0:46:32.94,0:46:34.58,中文,,0,0,0,,如果你使用二叉搜索树呢？
Dialogue: 0,0:46:34.58,0:46:41.89,英文,,0,0,0,,Well, again, if you trust layers of abstraction, you have no problem, because you know a binary search tree is just some way to implement a map.
Dialogue: 0,0:46:34.58,0:46:41.89,中文,,0,0,0,,好吧 同样 如果你相信抽象层 你就没有问题 因为你知道二叉搜索树只是一种实现映射的方法
Dialogue: 0,0:46:41.89,0:46:45.03,英文,,0,0,0,,Somebody else has gone through all the pain of building this thing.
Dialogue: 0,0:46:41.89,0:46:45.03,中文,,0,0,0,,其他人已经经历了构建这个东西的所有痛苦
Dialogue: 0,0:46:45.03,0:46:46.33,英文,,0,0,0,,It's not our problem.
Dialogue: 0,0:46:45.03,0:46:46.33,中文,,0,0,0,,这不是我们的问题
Dialogue: 0,0:46:46.33,0:46:50.02,英文,,0,0,0,,And inside this binary search tree, it says, if you want to find A, go here.
Dialogue: 0,0:46:46.33,0:46:50.02,中文,,0,0,0,,在这个二叉搜索树中 它说 如果你想找到 a 去这里
Dialogue: 0,0:46:50.02,0:46:52.36,英文,,0,0,0,,If you want to find C, go over here.
Dialogue: 0,0:46:50.02,0:46:52.36,中文,,0,0,0,,如果你想找到 c 去那里
Dialogue: 0,0:46:52.36,0:46:54.68,英文,,0,0,0,,And if you want to find any other letter, it's not on the map.
Dialogue: 0,0:46:52.36,0:46:54.68,中文,,0,0,0,,如果你想找到任何其他字母 它不在地图上
Dialogue: 0,0:46:54.68,0:46:55.44,英文,,0,0,0,,Sorry.
Dialogue: 0,0:46:54.68,0:46:55.44,中文,,0,0,0,,抱歉
Dialogue: 0,0:46:55.44,0:46:59.01,英文,,0,0,0,,And so if you trust the abstraction, then this is OK.
Dialogue: 0,0:46:55.44,0:46:59.01,中文,,0,0,0,,如果你信任抽象 那么这就可以了
Dialogue: 0,0:46:59.01,0:47:05.87,英文,,0,0,0,,If you don't trust the abstraction, then you're going to suffer, because you're going to be thinking about, wait, I have this tree structure, and I have another tree structure inside.
Dialogue: 0,0:46:59.01,0:47:05.87,中文,,0,0,0,,如果你不信任抽象 那么你就会遭殃 因为你就会想 等等 我有这个树形结构 里面还有另一个树形结构
Dialogue: 0,0:47:05.87,0:47:08.39,英文,,0,0,0,,I have trees inside trees inside trees.
Dialogue: 0,0:47:05.87,0:47:08.39,中文,,0,0,0,,我在树里面有树 在树里面还有树
Dialogue: 0,0:47:08.39,0:47:09.19,英文,,0,0,0,,That's too much.
Dialogue: 0,0:47:08.39,0:47:09.19,中文,,0,0,0,,太多了
Dialogue: 0,0:47:09.19,0:47:10.84,英文,,0,0,0,,Don't think about all that at once.
Dialogue: 0,0:47:09.19,0:47:10.84,中文,,0,0,0,,不要一次性考虑所有这些
Dialogue: 0,0:47:10.84,0:47:12.12,英文,,0,0,0,,Just relax.
Dialogue: 0,0:47:10.84,0:47:12.12,中文,,0,0,0,,松弛点
Dialogue: 0,0:47:12.12,0:47:15.68,英文,,0,0,0,,Let the abstraction do its job and say, it doesn't matter what's in links.
Dialogue: 0,0:47:12.12,0:47:15.68,中文,,0,0,0,,让抽象发挥它的作用 说 链接里面有什么并不重要
Dialogue: 0,0:47:15.68,0:47:17.02,英文,,0,0,0,,It could be a binary search tree.
Dialogue: 0,0:47:15.68,0:47:17.02,中文,,0,0,0,,它可以是一个二叉搜索树
Dialogue: 0,0:47:17.02,0:47:18.06,英文,,0,0,0,,It could be a hash table.
Dialogue: 0,0:47:17.02,0:47:18.06,中文,,0,0,0,,它可以是一个哈希表
Dialogue: 0,0:47:18.06,0:47:20.26,英文,,0,0,0,,It could be the data indexed character map.
Dialogue: 0,0:47:18.06,0:47:20.26,中文,,0,0,0,,它可以是数据索引字符映射
Dialogue: 0,0:47:20.26,0:47:21.16,英文,,0,0,0,,I don't care.
Dialogue: 0,0:47:20.26,0:47:21.16,中文,,0,0,0,,我不在乎
Dialogue: 0,0:47:21.16,0:47:26.05,英文,,0,0,0,,It's just a way to tell me letters corresponding to links.
Dialogue: 0,0:47:21.16,0:47:26.05,中文,,0,0,0,,它只是一种告诉我字母对应于链接的方法
Dialogue: 0,0:47:26.05,0:47:27.39,英文,,0,0,0,,It's all I got to do.
Dialogue: 0,0:47:26.05,0:47:27.39,中文,,0,0,0,,这就是我要做的全部
Dialogue: 0,0:47:27.39,0:47:30.17,英文,,0,0,0,,So I find it a very beautiful slide if you understand it.
Dialogue: 0,0:47:27.39,0:47:30.17,中文,,0,0,0,,如果你理解它 我发现它是一张非常漂亮的幻灯片
Dialogue: 0,0:47:30.17,0:47:38.27,英文,,0,0,0,,And if you don't, well, I encourage you to see the beauty in this slide and understand why it's OK to not worry about the thing inside the links.
Dialogue: 0,0:47:30.17,0:47:38.27,中文,,0,0,0,,如果你不理解 好吧 我鼓励你看看这张幻灯片的美妙之处 并理解为什么不用担心链接里面的东西是可以的
Dialogue: 0,0:47:38.27,0:47:39.46,英文,,0,0,0,,OK.
Dialogue: 0,0:47:38.27,0:47:39.46,中文,,0,0,0,,好的
Dialogue: 0,0:47:39.46,0:47:41.38,英文,,0,0,0,,Look, it's my favorite picture yet again.
Dialogue: 0,0:47:39.46,0:47:41.38,中文,,0,0,0,,看 这又是我最喜欢的图片了
Dialogue: 0,0:47:41.38,0:47:42.86,英文,,0,0,0,,And so it doesn't matter what's here.
Dialogue: 0,0:47:41.38,0:47:42.86,中文,,0,0,0,,这里是什么并不重要
Dialogue: 0,0:47:42.86,0:47:45.38,英文,,0,0,0,,It could be a binary search tree.
Dialogue: 0,0:47:42.86,0:47:45.38,中文,,0,0,0,,它可以是一个二叉搜索树
Dialogue: 0,0:47:45.38,0:47:46.58,英文,,0,0,0,,It doesn't matter what's back here.
Dialogue: 0,0:47:45.38,0:47:46.58,中文,,0,0,0,,后面是什么并不重要
Dialogue: 0,0:47:46.58,0:47:47.72,英文,,0,0,0,,It could be a binary search tree.
Dialogue: 0,0:47:46.58,0:47:47.72,中文,,0,0,0,,它可以是一个二叉搜索树
Dialogue: 0,0:47:47.72,0:47:49.58,英文,,0,0,0,,It could be a data index character map.
Dialogue: 0,0:47:47.72,0:47:49.58,中文,,0,0,0,,它可以是一个数据索引字符映射
Dialogue: 0,0:47:49.58,0:47:50.92,英文,,0,0,0,,All I want to see is the puppet show.
Dialogue: 0,0:47:49.58,0:47:50.92,中文,,0,0,0,,我只想看木偶戏
Dialogue: 0,0:47:50.92,0:47:52.70,英文,,0,0,0,,I don't want to climb out of the cave.
Dialogue: 0,0:47:50.92,0:47:52.70,中文,,0,0,0,,我不想爬出山洞
Dialogue: 0,0:47:52.70,0:47:55.97,英文,,0,0,0,,Just show me the puppet show to map the letters to the nodes.
Dialogue: 0,0:47:52.70,0:47:55.97,中文,,0,0,0,,只要给我看木偶戏 把字母映射到节点上
Dialogue: 0,0:47:55.97,0:47:57.63,英文,,0,0,0,,And that's all I care about.
Dialogue: 0,0:47:55.97,0:47:57.63,中文,,0,0,0,,这就是我所关心的
Dialogue: 0,0:47:57.63,0:48:03.09,英文,,0,0,0,,So there's a bit of a trade-off that I'll briefly mention, which is that the data index character map, it was instant.
Dialogue: 0,0:47:57.63,0:48:03.09,中文,,0,0,0,,我要简单提一下一个权衡 那就是数据索引字符映射 它是即时的
Dialogue: 0,0:48:03.09,0:48:06.85,英文,,0,0,0,,You just go into the array, you find the link, but it wastes a lot of memory.
Dialogue: 0,0:48:03.09,0:48:06.85,中文,,0,0,0,,你只需进入数组 找到链接 但它会浪费很多内存
Dialogue: 0,0:48:06.85,0:48:12.74,英文,,0,0,0,,These two approaches, they're going to be a little bit slower, because maybe your binary search tree has multiple layers,
Dialogue: 0,0:48:06.85,0:48:12.74,中文,,0,0,0,,这两种方法会慢一点 因为你的二叉搜索树可能有几层
Dialogue: 0,0:48:12.74,0:48:19.74,英文,,0,0,0,,or maybe your hash table has chaining, like maybe there's two items in a bucket, and you have to scan through the bucket.
Dialogue: 0,0:48:12.74,0:48:19.74,中文,,0,0,0,,或者你的哈希表可能有链接 比如一个桶中有两个项目 你必须扫描整个桶
Dialogue: 0,0:48:19.74,0:48:24.87,英文,,0,0,0,,So you lose a little bit of time in exchange for less memory usage.
Dialogue: 0,0:48:19.74,0:48:24.87,中文,,0,0,0,,你损失了一点时间 以换取更少的内存使用
Dialogue: 0,0:48:24.87,0:48:27.31,英文,,0,0,0,,So there's a bit of an exchange.
Dialogue: 0,0:48:24.87,0:48:27.31,中文,,0,0,0,,有一点交换
Dialogue: 0,0:48:27.31,0:48:38.95,英文,,0,0,0,,But what I will say is that in general, all of these choices would be pretty good because, well, the difference between theta of 1 and logarithmic time is basically not noticeable.
Dialogue: 0,0:48:27.31,0:48:38.95,中文,,0,0,0,,但我要说的是 一般来说 所有这些选择都非常好 因为 好吧 θ(1) 和对数时间之间的差异基本上是不可察觉的
Dialogue: 0,0:48:38.95,0:48:44.99,英文,,0,0,0,,And in fact, it doesn't really matter in our analysis because we're assuming the alphabet size is constant anyway.
Dialogue: 0,0:48:38.95,0:48:44.99,中文,,0,0,0,,事实上 这在我们的分析中并不重要 因为我们假设字母表的大小是恒定的
Dialogue: 0,0:48:44.99,0:48:51.65,英文,,0,0,0,,So in other words, the most number of items that will ever go in one of these binary search trees is, let's say, 26.
Dialogue: 0,0:48:44.99,0:48:51.65,中文,,0,0,0,,换句话说 这些二叉搜索树中最多可以容纳的项目数是 比如说 26 个
Dialogue: 0,0:48:51.65,0:48:55.22,英文,,0,0,0,,The worst that could be in this search tree is all the letters are being used.
Dialogue: 0,0:48:51.65,0:48:55.22,中文,,0,0,0,,这个搜索树中最糟糕的情况是所有字母都被使用了
Dialogue: 0,0:48:55.22,0:48:56.94,英文,,0,0,0,,There's going to be 26 links.
Dialogue: 0,0:48:55.22,0:48:56.94,中文,,0,0,0,,将会有 26 个链接
Dialogue: 0,0:48:56.94,0:48:58.88,英文,,0,0,0,,But this is not going to blow up to infinity.
Dialogue: 0,0:48:56.94,0:48:58.88,中文,,0,0,0,,但这不会无限膨胀
Dialogue: 0,0:48:58.88,0:49:03.38,英文,,0,0,0,,Even if I have a billion items in my try, this will still just be a BSD of size 26.
Dialogue: 0,0:48:58.88,0:49:03.38,中文,,0,0,0,,即使我的 trie 里面有十亿个元素 它的大小也只会是 26 的 BST
Dialogue: 0,0:49:03.38,0:49:04.64,英文,,0,0,0,,It's bounded.
Dialogue: 0,0:49:03.38,0:49:04.64,中文,,0,0,0,,它是受限的
Dialogue: 0,0:49:04.64,0:49:06.30,英文,,0,0,0,,It's constant size.
Dialogue: 0,0:49:04.64,0:49:06.30,中文,,0,0,0,,它的大小是恒定的
Dialogue: 0,0:49:06.30,0:49:11.30,英文,,0,0,0,,OK, so all of this is to say, it's OK if you don't remember the exact runtimes of all of these.
Dialogue: 0,0:49:06.30,0:49:11.30,中文,,0,0,0,,所以说 你不必记住所有这些的确切运行时间
Dialogue: 0,0:49:11.30,0:49:15.29,英文,,0,0,0,,The important thing is just the abstraction of not worrying about the map.
Dialogue: 0,0:49:11.30,0:49:15.29,中文,,0,0,0,,重要的是抽象的概念 不要担心映射的细节
Dialogue: 0,0:49:15.29,0:49:16.71,英文,,0,0,0,,Let someone else do it.
Dialogue: 0,0:49:15.29,0:49:16.71,中文,,0,0,0,,让别人去做吧
Dialogue: 0,0:49:16.71,0:49:18.59,英文,,0,0,0,,And some of them are more memory hungry.
Dialogue: 0,0:49:16.71,0:49:18.59,中文,,0,0,0,,其中一些更占用内存
Dialogue: 0,0:49:18.59,0:49:21.85,英文,,0,0,0,,Some of them are less memory hungry, but maybe a bit slower.
Dialogue: 0,0:49:18.59,0:49:21.85,中文,,0,0,0,,有些则占用更少的内存 但可能速度稍慢
Dialogue: 0,0:49:21.85,0:49:25.56,英文,,0,0,0,,But I think all of them would be pretty good choices.
Dialogue: 0,0:49:21.85,0:49:25.56,中文,,0,0,0,,但我认为所有这些都是不错的选择
Dialogue: 0,0:49:25.56,0:49:26.79,英文,,0,0,0,,OK.
Dialogue: 0,0:49:25.56,0:49:26.79,中文,,0,0,0,,好的
Dialogue: 0,0:49:26.79,0:49:28.47,英文,,0,0,0,,So that's try performance.
Dialogue: 0,0:49:26.79,0:49:28.47,中文,,0,0,0,,这就是 trie 的性能
Dialogue: 0,0:49:28.47,0:49:30.13,英文,,0,0,0,,Holy crap, I have one more minute left.
Dialogue: 0,0:49:28.47,0:49:30.13,中文,,0,0,0,,天哪 我还剩一分钟
Dialogue: 0,0:49:30.13,0:49:31.25,英文,,0,0,0,,OK.
Dialogue: 0,0:49:30.13,0:49:31.25,中文,,0,0,0,,好的
Dialogue: 0,0:49:31.25,0:49:41.58,英文,,0,0,0,,The last thing I'll tell you, and then maybe I'll waste five minutes finishing this up next time, is to be honest with you, if I look at this diagram, you might feel like, you know what?
Dialogue: 0,0:49:31.25,0:49:41.58,中文,,0,0,0,,我最后要告诉你的是 也许我下次会花五分钟时间来完成这个 说实话 如果我看看这个图表 你可能会觉得 你知道吗？
Dialogue: 0,0:49:41.58,0:49:45.40,英文,,0,0,0,,You just wasted all my time with tries, and I don't feel like I achieved a lot.
Dialogue: 0,0:49:41.58,0:49:45.40,中文,,0,0,0,,你只是浪费了我所有的时间来学习 trie 而我感觉并没有学到很多东西
Dialogue: 0,0:49:45.40,0:49:51.40,英文,,0,0,0,,Because I went from theta of 1 with this little note to theta of 1 without the note.
Dialogue: 0,0:49:45.40,0:49:51.40,中文,,0,0,0,,因为我从这个小节点的 θ(1)  变成了没有节点的 θ(1)
Dialogue: 0,0:49:51.40,0:49:53.90,英文,,0,0,0,,So I just got rid of this tiny note.
Dialogue: 0,0:49:51.40,0:49:53.90,中文,,0,0,0,,我只是去掉了这个小小的节点
Dialogue: 0,0:49:53.90,0:49:56.60,英文,,0,0,0,,And you're like, well, OK.
Dialogue: 0,0:49:53.90,0:49:56.60,中文,,0,0,0,,你可能会想 好吧
Dialogue: 0,0:49:56.60,0:49:59.47,英文,,0,0,0,,That's OK, but is that really so impressive?
Dialogue: 0,0:49:56.60,0:49:59.47,中文,,0,0,0,,那还可以 但这真的那么令人印象深刻吗？
Dialogue: 0,0:49:59.47,0:50:02.19,英文,,0,0,0,,I mean, I also have Log N, which was really good, too.
Dialogue: 0,0:49:59.47,0:50:02.19,中文,,0,0,0,,我的意思是 我还有 log N 这也非常好
Dialogue: 0,0:50:02.19,0:50:07.06,英文,,0,0,0,,And in real life, am I ever going to notice the difference between Log N and 1?
Dialogue: 0,0:50:02.19,0:50:07.06,中文,,0,0,0,,而在现实生活中 我会注意到 log N 和 1 之间的区别吗？
Dialogue: 0,0:50:07.06,0:50:09.02,英文,,0,0,0,,The answer is probably not.
Dialogue: 0,0:50:07.06,0:50:09.02,中文,,0,0,0,,答案可能是否定的
Dialogue: 0,0:50:09.02,0:50:13.32,英文,,0,0,0,,All of these would be great choices, because these are all very, very good runtimes.
Dialogue: 0,0:50:09.02,0:50:13.32,中文,,0,0,0,,所有这些都是很好的选择 因为这些都是非常好的运行时间
Dialogue: 0,0:50:13.32,0:50:15.97,英文,,0,0,0,,So why did I bother showing you tries?
Dialogue: 0,0:50:13.32,0:50:15.97,中文,,0,0,0,,那我为什么要费心给你看 trie 呢？
Dialogue: 0,0:50:15.97,0:50:19.91,英文,,0,0,0,,Well, that's because tris can support, it's not really because of the runtime.
Dialogue: 0,0:50:15.97,0:50:19.91,中文,,0,0,0,,嗯 这是因为 trie 可以支持 这并不是真正因为运行时间
Dialogue: 0,0:50:19.91,0:50:24.29,英文,,0,0,0,,I think the improvement is cool, but it's not like theta of n to theta of 1.
Dialogue: 0,0:50:19.91,0:50:24.29,中文,,0,0,0,,我认为改进很酷 但这不像 θ(n) 到 θ(1)  那样
Dialogue: 0,0:50:24.29,0:50:25.81,英文,,0,0,0,,It's nothing magical like that.
Dialogue: 0,0:50:24.29,0:50:25.81,中文,,0,0,0,,它没有那么神奇
Dialogue: 0,0:50:25.81,0:50:29.88,英文,,0,0,0,,I just went from 1 with a little bit of extra nodes to just 1.
Dialogue: 0,0:50:25.81,0:50:29.88,中文,,0,0,0,,我只是从带有额外节点的 1 变成了只有 1
Dialogue: 0,0:50:29.88,0:50:38.22,英文,,0,0,0,,But the reason why I wanted to show you tris, the reason why I find it so cool, is because there are some operations that for tris,
Dialogue: 0,0:50:29.88,0:50:38.22,中文,,0,0,0,,但我想向你展示 trie 的原因 我发现它如此酷的原因 是因为有些操作对于 trie 来说
Dialogue: 0,0:50:38.22,0:50:44.35,英文,,0,0,0,,are so good at doing them, but other data structures like binary search trees are just terrible at doing them.
Dialogue: 0,0:50:38.22,0:50:44.35,中文,,0,0,0,,非常擅长做这些操作 而其他数据结构 比如二叉搜索树 做这些操作却很糟糕
Dialogue: 0,0:50:44.35,0:50:47.93,英文,,0,0,0,,So in like 30 seconds, I'll show you an example.
Dialogue: 0,0:50:44.35,0:50:47.93,中文,,0,0,0,,在大约 30 秒内 我将向你展示一个例子
Dialogue: 0,0:50:47.93,0:50:51.18,英文,,0,0,0,,Let's say I want to find the longest prefix.
Dialogue: 0,0:50:47.93,0:50:51.18,中文,,0,0,0,,假设我想找到最长的前缀
Dialogue: 0,0:50:51.18,0:50:53.86,英文,,0,0,0,,So tell me, what is the word in the set?
Dialogue: 0,0:50:51.18,0:50:53.86,中文,,0,0,0,,告诉我 集合中的单词是什么？
Dialogue: 0,0:50:53.86,0:50:55.32,英文,,0,0,0,,I have a big set of words.
Dialogue: 0,0:50:53.86,0:50:55.32,中文,,0,0,0,,我有一个很大的单词集
Dialogue: 0,0:50:55.32,0:50:59.02,英文,,0,0,0,,What is the word that starts with the most letters of sample?
Dialogue: 0,0:50:55.32,0:50:59.02,中文,,0,0,0,,哪个单词以 sample 的最多字母开头？
Dialogue: 0,0:50:59.02,0:51:03.99,英文,,0,0,0,,So for example, some prefixes you might consider are sample, maybe SAMP.
Dialogue: 0,0:50:59.02,0:51:03.99,中文,,0,0,0,,例如 你可能会考虑的一些前缀是 sample 也许是 samp
Dialogue: 0,0:51:03.99,0:51:05.23,英文,,0,0,0,,Is SAMP in my set?
Dialogue: 0,0:51:03.99,0:51:05.23,中文,,0,0,0,,samp 在我的集合中吗？
Dialogue: 0,0:51:05.23,0:51:06.19,英文,,0,0,0,,What about SAM?
Dialogue: 0,0:51:05.23,0:51:06.19,中文,,0,0,0,,sam 呢？
Dialogue: 0,0:51:06.19,0:51:07.37,英文,,0,0,0,,What about SAW?
Dialogue: 0,0:51:06.19,0:51:07.37,中文,,0,0,0,,saw 呢？
Dialogue: 0,0:51:07.37,0:51:10.29,英文,,0,0,0,,So what are the prefixes of sample, and who's longest?
Dialogue: 0,0:51:07.37,0:51:10.29,中文,,0,0,0,,那么 sample 的前缀是什么 谁最长？
Dialogue: 0,0:51:10.29,0:51:12.23,英文,,0,0,0,,Well, try doing that in a hash map.
Dialogue: 0,0:51:10.29,0:51:12.23,中文,,0,0,0,,好吧 试试在哈希映射中做这个
Dialogue: 0,0:51:12.23,0:51:13.62,英文,,0,0,0,,You're going to have a sad time.
Dialogue: 0,0:51:12.23,0:51:13.62,中文,,0,0,0,,你会很郁闷的
Dialogue: 0,0:51:13.62,0:51:15.74,英文,,0,0,0,,Try doing that in a binary search tree.
Dialogue: 0,0:51:13.62,0:51:15.74,中文,,0,0,0,,试试在二叉搜索树中做这个
Dialogue: 0,0:51:15.74,0:51:17.14,英文,,0,0,0,,You're going to have a sad time.
Dialogue: 0,0:51:15.74,0:51:17.14,中文,,0,0,0,,你会很郁闷的
Dialogue: 0,0:51:17.14,0:51:19.76,英文,,0,0,0,,But try doing it in a try.
Dialogue: 0,0:51:17.14,0:51:19.76,中文,,0,0,0,,但在 trie 中试试
Dialogue: 0,0:51:19.76,0:51:22.32,英文,,0,0,0,,And you'll find that tries have really good performance.
Dialogue: 0,0:51:19.76,0:51:22.32,中文,,0,0,0,,你会发现 trie 的性能非常好
Dialogue: 0,0:51:22.32,0:51:28.14,英文,,0,0,0,,OK, I guess I'll pick this up next time to think about tries and how their performance on these operations are good.
Dialogue: 0,0:51:22.32,0:51:28.14,中文,,0,0,0,,好吧 我想我下次会继续学习 trie 以及它们在这些操作上的性能如何
Dialogue: 0,0:51:28.14,0:51:29.80,英文,,0,0,0,,Oh, and have a good spring break.
Dialogue: 0,0:51:28.14,0:51:29.80,中文,,0,0,0,,哦 祝你春假愉快
Dialogue: 0,0:51:29.80,0:51:33.13,英文,,0,0,0,,Go vacation and enjoy whatever.
Dialogue: 0,0:51:29.80,0:51:33.13,中文,,0,0,0,,去度假吧 享受一切
Dialogue: 0,0:51:33.13,0:51:35.69,英文,,0,0,0,,And we will see you afterwards.
Dialogue: 0,0:51:33.13,0:51:35.69,中文,,0,0,0,,我们之后再见
Dialogue: 0,0:51:35.69,0:51:37.87,英文,,0,0,0,,And cross our fingers for midterm grades.
Dialogue: 0,0:51:35.69,0:51:37.87,中文,,0,0,0,,为期中考试成绩祈祷
Dialogue: 0,0:51:37.87,0:51:38.79,英文,,0,0,0,,All right, see you next time.
Dialogue: 0,0:51:37.87,0:51:38.79,中文,,0,0,0,,好的 下次见
