[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 3
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1152
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Audio File: D:/python_code/video_tool/video_tool/result/Lecture 5 - Lists 3 DLLists and Arrays.mp4
Video File: D:/python_code/video_tool/video_tool/result/Lecture 5 - Lists 3 DLLists and Arrays.mp4
Video AR Mode: 4
Video AR Value: 1.600000
Video Zoom Percent: 0.500000
Scroll Position: 1337
Active Line: 683
Video Position: 57565

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,13,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,90,100,0,0,1,1.33333,1.33333,2,6,6,7,1
Style: 英文,Arial,24,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,90,100,0,0,1,1.33333,1.33333,2,1,1,5,1
Style: 中文,微软雅黑,38,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,90,100,0,0,1,1.33333,1.33333,2,2,2,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
Dialogue: 0,0:00:01.67,0:00:06.28,英文,,0,0,0,,OK, now you can hide everything.
Dialogue: 0,0:00:01.67,0:00:06.28,中文,,0,0,0,,现在你可以隐藏所有东西
Dialogue: 0,0:00:06.28,0:00:08.58,英文,,0,0,0,,I won't be able to do cat.
Dialogue: 0,0:00:06.28,0:00:08.58,中文,,0,0,0,,我将无法做 cat
Dialogue: 0,0:00:08.58,0:00:10.74,英文,,0,0,0,,That's OK.
Dialogue: 0,0:00:08.58,0:00:10.74,中文,,0,0,0,,没问题
Dialogue: 0,0:00:10.74,0:00:11.48,英文,,0,0,0,,We're winging it.
Dialogue: 0,0:00:10.74,0:00:11.48,中文,,0,0,0,,我们就这么搞定了
Dialogue: 0,0:00:11.48,0:00:13.33,英文,,0,0,0,,OK.
Dialogue: 0,0:00:13.33,0:00:23.28,英文,,0,0,0,,OK, so by popular demand, I'm going to finish the destroyed sets part of the lecture, and then we will talk about Asymptotics and more.
Dialogue: 0,0:00:13.33,0:00:23.28,中文,,0,0,0,,应大家的要求 我将完成讲座中关于已毁坏集合的部分 然后我们将讨论渐近分析等内容
Dialogue: 0,0:00:23.28,0:00:30.15,英文,,0,0,0,,So to quickly recap what happened last time, we told you about the DisjointSets data structure,
Dialogue: 0,0:00:23.28,0:00:30.15,中文,,0,0,0,,让我们快速回顾一下上次发生的事情 我们向你介绍了不相交集合数据结构
Dialogue: 0,0:00:30.15,0:00:37.63,英文,,0,0,0,,and we said the DisjointSets data structure, the users want to be able to connect items, and they also want to be able to check if items are connected.
Dialogue: 0,0:00:30.15,0:00:37.63,中文,,0,0,0,,并且我们说不相交集合数据结构的用户希望能够连接项目 他们也希望能够检查项目是否连接
Dialogue: 0,0:00:37.63,0:00:42.61,英文,,0,0,0,,Those are the two operations that the user cares about, and they do not care how we implement it.
Dialogue: 0,0:00:37.63,0:00:42.61,中文,,0,0,0,,这是用户关心的两个操作 他们不关心我们如何实现它
Dialogue: 0,0:00:42.61,0:00:55.41,英文,,0,0,0,,So then we talked about how we, as the monks behind the scenes, how do we implement the DisjointSets data structure so that the user sees the connect and isConnected operations working as intended.
Dialogue: 0,0:00:42.61,0:00:55.41,中文,,0,0,0,,然后我们谈到了我们作为幕后僧侣如何实现不相交集合数据结构 以便用户看到连接和isConnected操作正常工作
Dialogue: 0,0:00:55.41,0:00:58.51,英文,,0,0,0,,So the first thing we tried was, let's have a list of sets.
Dialogue: 0,0:00:55.41,0:00:58.51,中文,,0,0,0,,我们尝试的第一件事是 让我们有一个集合列表
Dialogue: 0,0:00:58.51,0:01:01.39,英文,,0,0,0,,And we analyzed the runtime and found out that's pretty slow.
Dialogue: 0,0:00:58.51,0:01:01.39,中文,,0,0,0,,我们分析了运行时发现这样很慢
Dialogue: 0,0:01:01.39,0:01:08.11,英文,,0,0,0,,So we could keep track of a list of sets and keep track of which set each item is in, but that's very slow.
Dialogue: 0,0:01:01.39,0:01:08.11,中文,,0,0,0,,我们可以跟踪一个集合列表 并跟踪每个项目属于哪个集合 但这样非常慢
Dialogue: 0,0:01:08.11,0:01:10.43,英文,,0,0,0,,Then we talked about another approach called quick find.
Dialogue: 0,0:01:08.11,0:01:10.43,中文,,0,0,0,,然后我们谈到了另一种方法 叫做快速查找
Dialogue: 0,0:01:10.43,0:01:12.88,英文,,0,0,0,,In this approach, we had this array.
Dialogue: 0,0:01:10.43,0:01:12.88,中文,,0,0,0,,在这个方法中 我们有这个数组
Dialogue: 0,0:01:12.88,0:01:18.34,英文,,0,0,0,,And in the array, the i-th element of the array told me which team element i is on.
Dialogue: 0,0:01:12.88,0:01:18.34,中文,,0,0,0,,而在数组中 数组的第i个元素告诉我第i个元素在哪个团队
Dialogue: 0,0:01:18.34,0:01:19.34,英文,,0,0,0,,So if I want to know,
Dialogue: 0,0:01:18.34,0:01:19.34,中文,,0,0,0,,如果我想知道
Dialogue: 0,0:01:19.34,0:01:21.38,英文,,0,0,0,,Element 5, which team are you on?
Dialogue: 0,0:01:19.34,0:01:21.38,中文,,0,0,0,,第5个元素 你在哪个团队
Dialogue: 0,0:01:21.38,0:01:24.20,英文,,0,0,0,,I look up element 5 in the array, and it says 9.
Dialogue: 0,0:01:21.38,0:01:24.20,中文,,0,0,0,,我查找数组中的第5个元素 它说是9
Dialogue: 0,0:01:24.20,0:01:28.32,英文,,0,0,0,,And I say, OK, element 5, you must be in team number 9.
Dialogue: 0,0:01:24.20,0:01:28.32,中文,,0,0,0,,于是我说 第5个元素 你一定在第9个团队
Dialogue: 0,0:01:28.32,0:01:30.84,英文,,0,0,0,,So to check if two things are connected, that's constant time.
Dialogue: 0,0:01:28.32,0:01:30.84,中文,,0,0,0,,要检查两个事物是否连接 这是常数时间
Dialogue: 0,0:01:30.84,0:01:31.72,英文,,0,0,0,,We talked about that.
Dialogue: 0,0:01:30.84,0:01:31.72,中文,,0,0,0,,我们谈过这个了
Dialogue: 0,0:01:31.72,0:01:35.58,英文,,0,0,0,,You look for the two numbers, check if they're the same.
Dialogue: 0,0:01:31.72,0:01:35.58,中文,,0,0,0,,你找到那两个数字 检查它们是否相同
Dialogue: 0,0:01:35.58,0:01:37.08,英文,,0,0,0,,And then to connect things.
Dialogue: 0,0:01:35.58,0:01:37.08,中文,,0,0,0,,然后连接这些事情
Dialogue: 0,0:01:37.08,0:01:43.85,英文,,0,0,0,,Well, that's kind of slow because now you have to go through and you have to change all the team numbers for potentially a bunch of elements.
Dialogue: 0,0:01:37.08,0:01:43.85,中文,,0,0,0,,这有点慢 因为现在你必须遍历并且可能为一堆元素更改所有团队编号
Dialogue: 0,0:01:43.85,0:01:44.85,英文,,0,0,0,,So that's slow.
Dialogue: 0,0:01:43.85,0:01:44.85,中文,,0,0,0,,所以很慢
Dialogue: 0,0:01:44.85,0:01:47.13,英文,,0,0,0,,That's why we called that the quick find approach.
Dialogue: 0,0:01:44.85,0:01:47.13,中文,,0,0,0,,这就是为什么我们称之为快速查找方法的原因
Dialogue: 0,0:01:47.13,0:01:51.34,英文,,0,0,0,,But it was another way to implement the same two operations.
Dialogue: 0,0:01:47.13,0:01:51.34,中文,,0,0,0,,但这是实现相同两个操作的另一种方式
Dialogue: 0,0:01:51.34,0:01:52.64,英文,,0,0,0,,Then we talked about QuickUnion.
Dialogue: 0,0:01:51.34,0:01:52.64,中文,,0,0,0,,然后我们谈论了QuickUnion
Dialogue: 0,0:01:52.64,0:01:55.94,英文,,0,0,0,,This was another way to implement the same two operations.
Dialogue: 0,0:01:52.64,0:01:55.94,中文,,0,0,0,,这是实现相同两个操作的另一种方式
Dialogue: 0,0:01:55.94,0:02:05.31,英文,,0,0,0,,And in the QuickUnion approach, this was the key idea that I think we kind of missed out because the audio cut out, and we're having so much fun with technology.
Dialogue: 0,0:01:55.94,0:02:05.31,中文,,0,0,0,,而在QuickUnion方法中 我认为这是一个关键的想法 我们可能错过了 因为音频中断 而我们在科技方面玩得太高兴了
Dialogue: 0,0:02:05.31,0:02:10.16,英文,,0,0,0,,But the key idea behind the QuickUnion
Dialogue: 0,0:02:05.31,0:02:10.16,中文,,0,0,0,,但QuickUnion背后的关键思想
Dialogue: 0,0:02:10.16,0:02:22.23,英文,,0,0,0,,approach to disjoint sets is that instead of writing here the team number, instead of saying, two, you belong to some team number, you're going to say, element two, you belong to element one.
Dialogue: 0,0:02:10.16,0:02:22.23,中文,,0,0,0,,是不是写在这里团队编号 而是说 2 你属于某个团队编号 你会说 元素2 你属于元素1
Dialogue: 0,0:02:22.23,0:02:26.69,英文,,0,0,0,,So every item has a parent or another item that it belongs to.
Dialogue: 0,0:02:22.23,0:02:26.69,中文,,0,0,0,,每个项目都有一个父项或另一个它属于的项目
Dialogue: 0,0:02:26.69,0:02:32.54,英文,,0,0,0,,And in doing so, we create these kind of hierarchical teams where we say, two, you belong to item one.
Dialogue: 0,0:02:26.69,0:02:32.54,中文,,0,0,0,,通过这样做 我们创建了这种层次的团队 我们说 2 你属于项目1
Dialogue: 0,0:02:32.54,0:02:34.42,英文,,0,0,0,,How do I know who item 1 belongs to?
Dialogue: 0,0:02:32.54,0:02:34.42,中文,,0,0,0,,我怎么知道 item 1 属于谁
Dialogue: 0,0:02:34.42,0:02:36.66,英文,,0,0,0,,I look up item 1 in the parents array.
Dialogue: 0,0:02:34.42,0:02:36.66,中文,,0,0,0,,我在父级数组中查找 item 1
Dialogue: 0,0:02:36.66,0:02:37.68,英文,,0,0,0,,It says 0.
Dialogue: 0,0:02:36.66,0:02:37.68,中文,,0,0,0,,它显示为 0
Dialogue: 0,0:02:37.68,0:02:40.64,英文,,0,0,0,,That tells me 1, your parent must be 0.
Dialogue: 0,0:02:37.68,0:02:40.64,中文,,0,0,0,,这告诉我 你的父级必须是 0
Dialogue: 0,0:02:40.64,0:02:42.10,英文,,0,0,0,,And 0, who's your parent?
Dialogue: 0,0:02:40.64,0:02:42.10,中文,,0,0,0,,那么 0 你的父级是谁
Dialogue: 0,0:02:42.10,0:02:43.33,英文,,0,0,0,,Well, it's negative 1.
Dialogue: 0,0:02:42.10,0:02:43.33,中文,,0,0,0,,嗯 是负 1
Dialogue: 0,0:02:43.33,0:02:45.27,英文,,0,0,0,,That indicates that 0 has no parent.
Dialogue: 0,0:02:43.33,0:02:45.27,中文,,0,0,0,,这表明 0 没有父级
Dialogue: 0,0:02:45.27,0:02:48.49,英文,,0,0,0,,It is the boss of this group.
Dialogue: 0,0:02:45.27,0:02:48.49,中文,,0,0,0,,这是这个团队的老板
Dialogue: 0,0:02:48.49,0:02:55.27,英文,,0,0,0,,Okay, then we analyze the runtime of this one, and we realize that the runtime of this one, it turns out to be kind of slow again.
Dialogue: 0,0:02:48.49,0:02:55.27,中文,,0,0,0,,那么我们分析一下这个的运行时间 我们意识到这个的运行时间 结果又变得有点慢
Dialogue: 0,0:02:55.27,0:03:06.44,英文,,0,0,0,,In particular, if my trees look gross like this, then the time it takes to connect two operations or to connect two things is slow, and the time it takes to check if two things are connected is also slow.
Dialogue: 0,0:02:55.27,0:03:06.44,中文,,0,0,0,,特别是 如果我的树看起来像这样不好看 那么连接两个操作或连接两个东西的时间就会很慢 检查两个东西是否连接的时间也会很慢
Dialogue: 0,0:03:06.44,0:03:07.84,英文,,0,0,0,,It's linear time.
Dialogue: 0,0:03:06.44,0:03:07.84,中文,,0,0,0,,这是线性时间
Dialogue: 0,0:03:07.84,0:03:09.52,英文,,0,0,0,,We talked about this last time.
Dialogue: 0,0:03:07.84,0:03:09.52,中文,,0,0,0,,我们上次谈到过这个
Dialogue: 0,0:03:09.52,0:03:11.18,英文,,0,0,0,,So today,
Dialogue: 0,0:03:09.52,0:03:11.18,中文,,0,0,0,,今天
Dialogue: 0,0:03:11.18,0:03:22.53,英文,,0,0,0,,And I guess for the rest of, I don't know, the 15 minutes, we have to solve this problem, which is we don't want trees to grow tall and ugly like this, because that's going to cause connect and isConnected to be slow.
Dialogue: 0,0:03:11.18,0:03:22.53,中文,,0,0,0,,我猜接下来的 我不知道 15分钟 我们要解决的问题是我们不希望树长得又高又难看 因为那会导致连接和 isConnected 变慢
Dialogue: 0,0:03:22.53,0:03:26.16,英文,,0,0,0,,Remember, if you want to connect things, I have to go find who the boss is.
Dialogue: 0,0:03:22.53,0:03:26.16,中文,,0,0,0,,记住 如果你想连接事物 我就得去找到老大是谁
Dialogue: 0,0:03:26.16,0:03:32.72,英文,,0,0,0,,And if my tree is long and spindly like this, I have to climb all the way up the tall tree to find who the boss is.
Dialogue: 0,0:03:26.16,0:03:32.72,中文,,0,0,0,,而且如果我的树又长又细 就像这样 我就得一直爬到高高的树上去找老大是谁
Dialogue: 0,0:03:32.72,0:03:34.23,英文,,0,0,0,,And same thing for isConnected.
Dialogue: 0,0:03:32.72,0:03:34.23,中文,,0,0,0,,对于 isConnected 也是一样
Dialogue: 0,0:03:34.23,0:03:38.25,英文,,0,0,0,,If I want to see if two things are connected, I have to check if they have the same boss.
Dialogue: 0,0:03:34.23,0:03:38.25,中文,,0,0,0,,如果我想知道两样东西是否连接 我就得检查它们是否有相同的老大
Dialogue: 0,0:03:38.25,0:03:44.30,英文,,0,0,0,,And doing that requires starting at the bottom and climbing all the way up the tree, which could potentially be slow.
Dialogue: 0,0:03:38.25,0:03:44.30,中文,,0,0,0,,而要做到这一点 就需要从底部开始一直爬到树顶 这可能会慢
Dialogue: 0,0:03:44.30,0:03:46.12,英文,,0,0,0,,So how do we solve it?
Dialogue: 0,0:03:44.30,0:03:46.12,中文,,0,0,0,,那我们怎么解决呢
Dialogue: 0,0:03:46.12,0:03:50.38,英文,,0,0,0,,Well, that's where weighted quick union comes from, or comes in.
Dialogue: 0,0:03:46.12,0:03:50.38,中文,,0,0,0,,这就是加权快速联合的用处所在
Dialogue: 0,0:03:50.38,0:03:52.16,英文,,0,0,0,,So these are our approaches so far.
Dialogue: 0,0:03:50.38,0:03:52.16,中文,,0,0,0,,到目前为止 这些是我们的方法
Dialogue: 0,0:03:52.16,0:03:53.71,英文,,0,0,0,,Then we talked about weighted quick union.
Dialogue: 0,0:03:52.16,0:03:53.71,中文,,0,0,0,,然后我们讨论了加权快速并查集
Dialogue: 0,0:03:53.71,0:03:55.21,英文,,0,0,0,,This is a fourth
Dialogue: 0,0:03:53.71,0:03:55.21,中文,,0,0,0,,这是第四种
Dialogue: 0,0:03:55.21,0:03:57.71,英文,,0,0,0,,Different approach to implementing DisjointSets.
Dialogue: 0,0:03:55.21,0:03:57.71,中文,,0,0,0,,实现不相交集的不同方法
Dialogue: 0,0:03:57.71,0:04:02.51,英文,,0,0,0,,So it's still the same DisjointSets API that the users want to see.
Dialogue: 0,0:03:57.71,0:04:02.51,中文,,0,0,0,,它仍然是用户想要看到的相同的不相交集 API
Dialogue: 0,0:04:02.51,0:04:04.21,英文,,0,0,0,,They just want to be able to connect things.
Dialogue: 0,0:04:02.51,0:04:04.21,中文,,0,0,0,,他们只想能够连接事物
Dialogue: 0,0:04:04.21,0:04:07.51,英文,,0,0,0,,They don't care how we do it, but we want to make it fast for them.
Dialogue: 0,0:04:04.21,0:04:07.51,中文,,0,0,0,,他们不在乎我们如何做 但我们希望为他们提供快速的解决方案
Dialogue: 0,0:04:07.51,0:04:12.81,英文,,0,0,0,,So the fourth way that we decided to implement QuickUnion, or the DisjointSets data structure,
Dialogue: 0,0:04:07.51,0:04:12.81,中文,,0,0,0,,我们决定实现QuickUnion或不相交集合数据结构的第四种方式是
Dialogue: 0,0:04:12.81,0:04:18.81,英文,,0,0,0,,was we took our QuickUnion, where we had this tree-like approach where everyone has a parent,
Dialogue: 0,0:04:12.81,0:04:18.81,中文,,0,0,0,,我们采用了我们的QuickUnion 其中我们采用了这种树状的方法 每个人都有一个父节点 我们真的停下来思考
Dialogue: 0,0:04:18.81,0:04:25.47,英文,,0,0,0,,and we really stopped and said, if I have two separate teams, look, there's a team with 0, 1, 2, 4.
Dialogue: 0,0:04:18.81,0:04:25.47,中文,,0,0,0,,我们真的停下来思考 如果我有2个独立的团队 看 有一个团队是0、1、2、4
Dialogue: 0,0:04:25.47,0:04:27.41,英文,,0,0,0,,And there's another team with three and five.
Dialogue: 0,0:04:25.47,0:04:27.41,中文,,0,0,0,,还有另一个团队是3和5
Dialogue: 0,0:04:27.41,0:04:32.31,英文,,0,0,0,,And I want to combine them and connect them into one big happy team.
Dialogue: 0,0:04:27.41,0:04:32.31,中文,,0,0,0,,我想把它们合并起来 连接成一个大家庭
Dialogue: 0,0:04:32.31,0:04:34.05,英文,,0,0,0,,Well, what is the best way to do it?
Dialogue: 0,0:04:32.31,0:04:34.05,中文,,0,0,0,,好吧 怎么做才是最好的呢
Dialogue: 0,0:04:34.05,0:04:37.24,英文,,0,0,0,,And we decided there are two approaches I could take.
Dialogue: 0,0:04:34.05,0:04:37.24,中文,,0,0,0,,我们决定有两种方法可以采取
Dialogue: 0,0:04:37.24,0:04:39.90,英文,,0,0,0,,Right now, the problem is that there are two bosses.
Dialogue: 0,0:04:37.24,0:04:39.90,中文,,0,0,0,,现在的问题是有两个老板
Dialogue: 0,0:04:39.90,0:04:44.82,英文,,0,0,0,,And if I want to connect this thing into one big group, there can only be one true boss.
Dialogue: 0,0:04:39.90,0:04:44.82,中文,,0,0,0,,如果我想把这个东西连接成一个大团队 就只能有一个真正的老板
Dialogue: 0,0:04:44.82,0:04:47.87,英文,,0,0,0,,So zero and three, you cannot both be bosses.
Dialogue: 0,0:04:44.82,0:04:47.87,中文,,0,0,0,,所以0和3 你们不能同时当老板
Dialogue: 0,0:04:47.87,0:04:49.09,英文,,0,0,0,,So who should be the true boss?
Dialogue: 0,0:04:47.87,0:04:49.09,中文,,0,0,0,,那么谁应该是真正的老板呢
Dialogue: 0,0:04:49.09,0:04:53.25,英文,,0,0,0,,And we said, we can make zero the boss and hang three under zero.
Dialogue: 0,0:04:49.09,0:04:53.25,中文,,0,0,0,,我们说 我们可以让0当老板 把3挂在0下面
Dialogue: 0,0:04:53.25,0:04:57.31,英文,,0,0,0,,Or we could make 3 the ultimate boss and hang 0 under 3.
Dialogue: 0,0:04:53.25,0:04:57.31,中文,,0,0,0,,或者我们可以让3成为最终的老板 把0挂在3下面
Dialogue: 0,0:04:57.31,0:05:00.96,英文,,0,0,0,,We decided that making 0 the big boss is better.
Dialogue: 0,0:04:57.31,0:05:00.96,中文,,0,0,0,,我们决定让0成为大老板更好
Dialogue: 0,0:05:00.96,0:05:10.76,英文,,0,0,0,,And by doing so, we learned the trick, which is that any time you need to combine two teams like this, you should always take the smaller team.
Dialogue: 0,0:05:00.96,0:05:10.76,中文,,0,0,0,,通过这样做 我们学会了一个窍门 那就是每当你需要像这样合并2个团队时 你应该始终选择较小的团队
Dialogue: 0,0:05:10.76,0:05:13.00,英文,,0,0,0,,And here, the smaller team is the one with fewer items.
Dialogue: 0,0:05:10.76,0:05:13.00,中文,,0,0,0,,在这里 较小的团队是拥有较少项目的那个
Dialogue: 0,0:05:13.00,0:05:15.21,英文,,0,0,0,,It's the one with 3 as the boss.
Dialogue: 0,0:05:13.00,0:05:15.21,中文,,0,0,0,,这是老板是3的那个
Dialogue: 0,0:05:15.21,0:05:18.79,英文,,0,0,0,,And you should hang the smaller team underneath the bigger team.
Dialogue: 0,0:05:15.21,0:05:18.79,中文,,0,0,0,,而且你应该把小团队挂在大团队下面
Dialogue: 0,0:05:18.79,0:05:20.97,英文,,0,0,0,,Here, this would be hanging 3.
Dialogue: 0,0:05:18.79,0:05:20.97,中文,,0,0,0,,这里 这个应该挂3
Dialogue: 0,0:05:20.97,0:05:22.07,英文,,0,0,0,,Underneath zero.
Dialogue: 0,0:05:20.97,0:05:22.07,中文,,0,0,0,,在0下面
Dialogue: 0,0:05:22.07,0:05:29.18,英文,,0,0,0,,So with that one improvement, it turns out that those really long ugly trees from before are now impossible.
Dialogue: 0,0:05:22.07,0:05:29.18,中文,,0,0,0,,通过这一个改进 结果是以前那些又长又难看的树现在是不可能的了
Dialogue: 0,0:05:29.18,0:05:33.08,英文,,0,0,0,,And although we didn't really prove it, it turns out that's going to be true.
Dialogue: 0,0:05:29.18,0:05:33.08,中文,,0,0,0,,虽然我们没有真正证明它 但事实证明那是正确的
Dialogue: 0,0:05:33.08,0:05:36.24,英文,,0,0,0,,So we showed you this last time.
Dialogue: 0,0:05:33.08,0:05:36.24,中文,,0,0,0,,上次我们给你看了这个
Dialogue: 0,0:05:36.24,0:05:37.28,英文,,0,0,0,,OK.
Dialogue: 0,0:05:37.28,0:05:40.04,英文,,0,0,0,,So the only changes that we had to do, it's still the parent array.
Dialogue: 0,0:05:37.28,0:05:40.04,中文,,0,0,0,,我们唯一需要做的更改 仍然是父数组
Dialogue: 0,0:05:40.04,0:05:42.90,英文,,0,0,0,,We're still having every item have its boss.
Dialogue: 0,0:05:40.04,0:05:42.90,中文,,0,0,0,,我们仍然使每个项目都有它的老板
Dialogue: 0,0:05:42.90,0:05:52.69,英文,,0,0,0,,The only difference from before is that now, if you want to connect up two groups, you should always hang the group with fewer items underneath the group with more items.
Dialogue: 0,0:05:42.90,0:05:52.69,中文,,0,0,0,,与以前唯一的区别是 现在 如果你想连接2个组 你应该始终将项目较少的组挂在项目较多的组下面
Dialogue: 0,0:05:52.69,0:05:53.63,英文,,0,0,0,,That's the rule.
Dialogue: 0,0:05:52.69,0:05:53.63,中文,,0,0,0,,那就是规则
Dialogue: 0,0:05:53.63,0:06:01.37,英文,,0,0,0,,That's what changes QuickUnion to WeightedQuickUnion, because you're checking the weight of the two groups before you combine them.
Dialogue: 0,0:05:53.63,0:06:01.37,中文,,0,0,0,,这就是将 QuickUnion 更改为 WeightedQuickUnion 的原因 因为你在合并它们之前会检查2个组的权重
Dialogue: 0,0:06:01.37,0:06:10.18,英文,,0,0,0,,Okay, we talked about a really quick implementation thing, which is that how do you keep track of the weight, or how do you keep track of how many items are in every team?
Dialogue: 0,0:06:01.37,0:06:10.18,中文,,0,0,0,,我们谈论了一个非常快速的实现方法 那就是如何跟踪权重 或者如何跟踪每个团队中有多少项
Dialogue: 0,0:06:10.18,0:06:16.49,英文,,0,0,0,,Well, when you get to the root, instead of saying zero, negative one, you belong to nobody, you can say zero.
Dialogue: 0,0:06:10.18,0:06:16.49,中文,,0,0,0,,当你到达根部时 不要说0、负一 你不属于任何人 你可以说0
Dialogue: 0,0:06:16.49,0:06:18.56,英文,,0,0,0,,Your corresponding number is negative 2.
Dialogue: 0,0:06:16.49,0:06:18.56,中文,,0,0,0,,你对应的数字是负2
Dialogue: 0,0:06:18.56,0:06:20.12,英文,,0,0,0,,The negative means you're the root.
Dialogue: 0,0:06:18.56,0:06:20.12,中文,,0,0,0,,负号意味着你是根部
Dialogue: 0,0:06:20.12,0:06:21.00,英文,,0,0,0,,You have no boss.
Dialogue: 0,0:06:20.12,0:06:21.00,中文,,0,0,0,,你没有老板
Dialogue: 0,0:06:21.00,0:06:22.06,英文,,0,0,0,,You are the boss.
Dialogue: 0,0:06:21.00,0:06:22.06,中文,,0,0,0,,你就是老板
Dialogue: 0,0:06:22.06,0:06:25.42,英文,,0,0,0,,And the 2 means that there are two people in your team.
Dialogue: 0,0:06:22.06,0:06:25.42,中文,,0,0,0,,而且2表示你的团队有2个人
Dialogue: 0,0:06:25.42,0:06:27.90,英文,,0,0,0,,OK, all kind of review from last time.
Dialogue: 0,0:06:25.42,0:06:27.90,中文,,0,0,0,,这是上次的所有回顾
Dialogue: 0,0:06:27.90,0:06:30.10,英文,,0,0,0,,So this is kind of where I ran out of time.
Dialogue: 0,0:06:27.90,0:06:30.10,中文,,0,0,0,,这差不多是我没时间了
Dialogue: 0,0:06:30.10,0:06:35.45,英文,,0,0,0,,And the thing I wanted to show you is that it turns out that if I use this weighted quick union trick,
Dialogue: 0,0:06:30.10,0:06:35.45,中文,,0,0,0,,我想要给你看的是 原来如果我使用这个加权快速联合的技巧
Dialogue: 0,0:06:35.45,0:06:42.45,英文,,0,0,0,, that is, I always connect the smaller tree underneath the bigger tree, it turns out I will never get that big, ugly, tall tree
Dialogue: 0,0:06:35.45,0:06:42.45,中文,,0,0,0,,也就是说 我总是把小树连接到大树下面 结果我永远不会得到那种又大又丑又高的树
Dialogue: 0,0:06:42.45,0:06:46.45,英文,,0,0,0,,And the thing I wanted to show you is that it turns tall tree that I saw that made my life so miserable.
Dialogue: 0,0:06:42.45,0:06:46.45,中文,,0,0,0,,就像我看到的那个让我的生活如此痛苦的树
Dialogue: 0,0:06:46.45,0:06:49.75,英文,,0,0,0,,And I didn't really prove it, but I would encourage you to go home.
Dialogue: 0,0:06:46.45,0:06:49.75,中文,,0,0,0,,虽然我没有真正证明它 但我鼓励你回家试试
Dialogue: 0,0:06:49.75,0:06:50.81,英文,,0,0,0,,You can play with it.
Dialogue: 0,0:06:49.75,0:06:50.81,中文,,0,0,0,,你可以玩一下
Dialogue: 0,0:06:50.81,0:06:53.13,英文,,0,0,0,,You can try building trees that are long and ugly.
Dialogue: 0,0:06:50.81,0:06:53.13,中文,,0,0,0,,你可以尝试构建又长又丑的树
Dialogue: 0,0:06:53.13,0:06:58.80,英文,,0,0,0,,And it turns out weighted quick union, the extra rule, will forbid you from making trees like that.
Dialogue: 0,0:06:53.13,0:06:58.80,中文,,0,0,0,,结果发现 加权快速联合 这个额外的规则 会阻止你制造出那样的树
Dialogue: 0,0:06:58.80,0:07:06.02,英文,,0,0,0,,So the proof sketch that we had was this is a group with 0 as the only element.
Dialogue: 0,0:06:58.80,0:07:06.02,中文,,0,0,0,,我们的证明大纲是 这是一个只有 0 作为唯一元素的群
Dialogue: 0,0:07:06.02,0:07:07.54,英文,,0,0,0,,It's a team with one item.
Dialogue: 0,0:07:06.02,0:07:07.54,中文,,0,0,0,,这是一个只有一个项目的团队
Dialogue: 0,0:07:07.54,0:07:10.25,英文,,0,0,0,,And its height, we'll call it 0.
Dialogue: 0,0:07:07.54,0:07:10.25,中文,,0,0,0,,而它的高度 我们称之为 0
Dialogue: 0,0:07:10.25,0:07:12.46,英文,,0,0,0,,It's not a very tall tree.
Dialogue: 0,0:07:10.25,0:07:12.46,中文,,0,0,0,,这不是一个很高的树
Dialogue: 0,0:07:12.46,0:07:14.95,英文,,0,0,0,,Then if I have a second item, it might look like this.
Dialogue: 0,0:07:12.46,0:07:14.95,中文,,0,0,0,,然后如果我有第2个项目 它可能会看起来像这样
Dialogue: 0,0:07:14.95,0:07:17.11,英文,,0,0,0,,And you're like, uh-oh, starting to get tall.
Dialogue: 0,0:07:14.95,0:07:17.11,中文,,0,0,0,,你就会想 哎呀 开始变高了
Dialogue: 0,0:07:17.11,0:07:21.74,英文,,0,0,0,,But it turns out, if I have a third item, let's say I have another item 2,
Dialogue: 0,0:07:17.11,0:07:21.74,中文,,0,0,0,,但事实证明 如果我有第3个项目 比如我有另一个项目 2
Dialogue: 0,0:07:21.74,0:07:31.74,英文,,0,0,0,,if I take another item with number 2 and I try to connect it into this group,
Dialogue: 0,0:07:21.74,0:07:26.74,中文,,0,0,0,,如果我将另一个编号为 2 的项目尝试连接到这个组中
Dialogue: 0,0:07:26.74,0:07:31.74,中文,,0,0,0,,结果我永远也不会得到高大丑陋的 0、1、2 结构
Dialogue: 0,0:07:31.74,0:07:31.74,英文,,0,0,0,, it turns out I will never, ever get the tall, ugly 0, 1, 2 structure.
Dialogue: 0,0:07:31.74,0:07:33.44,英文,,0,0,0,,This will not grow taller.
Dialogue: 0,0:07:31.74,0:07:33.44,中文,,0,0,0,,它不会变得更高
Dialogue: 0,0:07:33.44,0:07:38.63,英文,,0,0,0,,Turns out, if I have another item two, and I connected it, the two would be hung under the zero.
Dialogue: 0,0:07:33.44,0:07:38.63,中文,,0,0,0,,原来 如果我有另一个项目2 然后连接它 这2个会挂在0下面
Dialogue: 0,0:07:38.63,0:07:41.13,英文,,0,0,0,,It would never be hung underneath the one.
Dialogue: 0,0:07:38.63,0:07:41.13,中文,,0,0,0,,它永远不会挂在一下面
Dialogue: 0,0:07:41.13,0:07:42.97,英文,,0,0,0,,It's okay if that doesn't totally make sense.
Dialogue: 0,0:07:41.13,0:07:42.97,中文,,0,0,0,,如果这不完全说得通也没关系
Dialogue: 0,0:07:42.97,0:07:48.64,英文,,0,0,0,,Go home, play with it, and you will see that the only way to get a tree that's taller, that is, with more layers to it,
Dialogue: 0,0:07:42.97,0:07:48.64,中文,,0,0,0,,回家 玩一下 你就会发现让树更高的唯一方法 也就是说 更有层次的树
Dialogue: 0,0:07:48.64,0:07:54.64,英文,,0,0,0,,is actually to make another copy, now they're the same weight, and combine these two.
Dialogue: 0,0:07:48.64,0:07:54.64,中文,,0,0,0,,实际上是制作另一份副本 现在它们的重量相同 然后将这两者结合在一起
Dialogue: 0,0:07:54.64,0:08:01.72,英文,,0,0,0,,And when you combine these two, you take, there's two bosses, one of the bosses hangs underneath the other, now your tree is taller.
Dialogue: 0,0:07:54.64,0:08:01.72,中文,,0,0,0,,当你结合这两者时 你会拿走两个老板 其中一个老板悬挂在另一个老板下面 现在你的树更高了
Dialogue: 0,0:08:01.72,0:08:04.92,英文,,0,0,0,,And again, you're like, well, what if I start hanging more things underneath the 3?
Dialogue: 0,0:08:01.72,0:08:04.92,中文,,0,0,0,,而且 你会想 如果我开始在3下面挂更多的东西会怎么样
Dialogue: 0,0:08:04.92,0:08:06.86,英文,,0,0,0,,Or what if I hang more things underneath the 1?
Dialogue: 0,0:08:04.92,0:08:06.86,中文,,0,0,0,,或者如果我在1下面挂更多的东西会怎么样
Dialogue: 0,0:08:06.86,0:08:07.88,英文,,0,0,0,,You can try it.
Dialogue: 0,0:08:06.86,0:08:07.88,中文,,0,0,0,,你可以试试
Dialogue: 0,0:08:07.88,0:08:11.22,英文,,0,0,0,,But it turns out you will never make this tree taller.
Dialogue: 0,0:08:07.88,0:08:11.22,中文,,0,0,0,,但事实证明 你永远也无法让这棵树长得更高
Dialogue: 0,0:08:11.22,0:08:19.05,英文,,0,0,0,,You'll never give it more layers unless you do this, which is you make another copy of the same tree structure.
Dialogue: 0,0:08:11.22,0:08:19.05,中文,,0,0,0,,除非你这样做 也就是说 你再复制一份相同的树结构
Dialogue: 0,0:08:19.05,0:08:21.93,英文,,0,0,0,,Right, of three layers, or height two.
Dialogue: 0,0:08:19.05,0:08:21.93,中文,,0,0,0,,对 3层 或者高度为2
Dialogue: 0,0:08:21.93,0:08:23.67,英文,,0,0,0,,And you union this with this.
Dialogue: 0,0:08:21.93,0:08:23.67,中文,,0,0,0,,然后你把这个与这个合并起来
Dialogue: 0,0:08:23.67,0:08:26.93,英文,,0,0,0,,And if you union these two, there are two bosses, zero and four.
Dialogue: 0,0:08:23.67,0:08:26.93,中文,,0,0,0,,如果你把这两个合并 就有两个老板 0和4
Dialogue: 0,0:08:26.93,0:08:28.53,英文,,0,0,0,,They can't both be the boss.
Dialogue: 0,0:08:26.93,0:08:28.53,中文,,0,0,0,,他们不能同时是老板
Dialogue: 0,0:08:28.53,0:08:32.19,英文,,0,0,0,,So we're going to hang the four underneath the zero like that.
Dialogue: 0,0:08:28.53,0:08:32.19,中文,,0,0,0,,我们要像这样把4挂在0下面
Dialogue: 0,0:08:32.19,0:08:34.23,英文,,0,0,0,,And now our tree is taller.
Dialogue: 0,0:08:32.19,0:08:34.23,中文,,0,0,0,,现在我们的树更高了
Dialogue: 0,0:08:34.23,0:08:35.31,英文,,0,0,0,,There's an extra layer.
Dialogue: 0,0:08:34.23,0:08:35.31,中文,,0,0,0,,有一个额外的层
Dialogue: 0,0:08:35.31,0:08:37.03,英文,,0,0,0,,So my height has grown to three.
Dialogue: 0,0:08:35.31,0:08:37.03,中文,,0,0,0,,我的高度增长到了3
Dialogue: 0,0:08:37.03,0:08:38.67,英文,,0,0,0,,And again, how do I get?
Dialogue: 0,0:08:37.03,0:08:38.67,中文,,0,0,0,,再次 我怎么得到
Dialogue: 0,0:08:38.67,0:08:41.78,英文,,0,0,0,,The tree with height 4, how do I get an extra layer?
Dialogue: 0,0:08:38.67,0:08:41.78,中文,,0,0,0,,高度为4的树 我如何得到一个额外的层
Dialogue: 0,0:08:41.78,0:08:47.64,英文,,0,0,0,,You might be tempted to say, well, all I have to do is start hanging things underneath the 7 or hang some things underneath the 5.
Dialogue: 0,0:08:41.78,0:08:47.64,中文,,0,0,0,,你可能会想说 好吧 我只需要开始在7下面挂东西 或者在5下面挂一些东西
Dialogue: 0,0:08:47.64,0:08:52.18,英文,,0,0,0,,But it turns out the weighted quick union rule will forbid you from doing that.
Dialogue: 0,0:08:47.64,0:08:52.18,中文,,0,0,0,,结果是 加权快速联合规则会阻止你这样做
Dialogue: 0,0:08:52.18,0:08:56.77,英文,,0,0,0,,The weighted quick union rule will force you to keep this tree nice and short.
Dialogue: 0,0:08:52.18,0:08:56.77,中文,,0,0,0,,加权快速联合规则将强制你保持这个树短小精悍
Dialogue: 0,0:08:56.77,0:09:05.83,英文,,0,0,0,,And the only way to get this tree even taller and to give it more layers is to actually create another copy of the tree and hang it underneath 0.
Dialogue: 0,0:08:56.77,0:09:05.83,中文,,0,0,0,,而使这棵树更高、更有层次的唯一方法是实际上创建另一个树的副本 并将其悬挂在0下面
Dialogue: 0,0:09:05.83,0:09:07.20,英文,,0,0,0,,So again, kind of a sketch.
Dialogue: 0,0:09:05.83,0:09:07.20,中文,,0,0,0,,有点草图
Dialogue: 0,0:09:07.20,0:09:10.16,英文,,0,0,0,,It's OK if it didn't totally make sense.
Dialogue: 0,0:09:07.20,0:09:10.16,中文,,0,0,0,,如果它并没有完全讲清楚 没关系
Dialogue: 0,0:09:10.16,0:09:15.16,英文,,0,0,0,,The important thing is, if you play with this tree, it's really hard to make the tree tall.
Dialogue: 0,0:09:10.16,0:09:15.16,中文,,0,0,0,,重要的是 如果你玩弄这棵树 很难让树变得高大
Dialogue: 0,0:09:15.16,0:09:20.14,英文,,0,0,0,,And it's really hard to replicate that ugly O of n behavior that we saw last time.
Dialogue: 0,0:09:15.16,0:09:20.14,中文,,0,0,0,,而且要复制我们上次看到的那种糟糕的O(n)行为也很困难
Dialogue: 0,0:09:20.14,0:09:23.79,英文,,0,0,0,,So what is the runtime of this new thing that I'm showing you?
Dialogue: 0,0:09:20.14,0:09:23.79,中文,,0,0,0,,这个新东西的运行时间是多久
Dialogue: 0,0:09:23.79,0:09:25.39,英文,,0,0,0,,There's a couple ways to get to it.
Dialogue: 0,0:09:23.79,0:09:25.39,中文,,0,0,0,,有几种方法可以到达它
Dialogue: 0,0:09:25.39,0:09:27.69,英文,,0,0,0,,One way to get to it is, I like drawing tables.
Dialogue: 0,0:09:25.39,0:09:27.69,中文,,0,0,0,,到达它的一种方法是 我喜欢画表格
Dialogue: 0,0:09:27.69,0:09:32.37,英文,,0,0,0,,So here I have a table which says, this is the number of items in my weighted quick union.
Dialogue: 0,0:09:27.69,0:09:32.37,中文,,0,0,0,,我这里有一个表格 上面写着 这是我的加权快速联合中的项目数量
Dialogue: 0,0:09:32.37,0:09:36.67,英文,,0,0,0,,And this was the height of the associated tree structure.
Dialogue: 0,0:09:32.37,0:09:36.67,中文,,0,0,0,,以及相关树结构的高度
Dialogue: 0,0:09:36.67,0:09:40.66,英文,,0,0,0,,So I said, if there's one item, well, the height is 0.
Dialogue: 0,0:09:36.67,0:09:40.66,中文,,0,0,0,,我说 如果有一个项目 那么高度就是0
Dialogue: 0,0:09:40.66,0:09:41.62,英文,,0,0,0,,This thing has no height at all.
Dialogue: 0,0:09:40.66,0:09:41.62,中文,,0,0,0,,这个东西根本就没有高度
Dialogue: 0,0:09:41.62,0:09:43.30,英文,,0,0,0,,It's a very short tree.
Dialogue: 0,0:09:41.62,0:09:43.30,中文,,0,0,0,,这棵树很矮
Dialogue: 0,0:09:43.30,0:09:45.98,英文,,0,0,0,,Then to get to height one, I needed two items.
Dialogue: 0,0:09:43.30,0:09:45.98,中文,,0,0,0,,要达到一米高 我需要两个物品
Dialogue: 0,0:09:45.98,0:09:50.24,英文,,0,0,0,,How many items did it take to get to height two to add an extra layer?
Dialogue: 0,0:09:45.98,0:09:50.24,中文,,0,0,0,,那么增加一层需要多少个物品呢
Dialogue: 0,0:09:50.24,0:09:55.63,英文,,0,0,0,,Well, then I had to create another copy, union those two, now I have four items in total.
Dialogue: 0,0:09:50.24,0:09:55.63,中文,,0,0,0,,我得再复制一份 合并这两份 现在总共有四个物品
Dialogue: 0,0:09:55.63,0:09:59.19,英文,,0,0,0,,How many items does it take to make this tree taller by one more step?
Dialogue: 0,0:09:55.63,0:09:59.19,中文,,0,0,0,,要让这棵树再高一步需要多少物品
Dialogue: 0,0:09:59.19,0:10:05.93,英文,,0,0,0,,I have to create another copy with four items, and then union those, and that gives me total size eight.
Dialogue: 0,0:09:59.19,0:10:05.93,中文,,0,0,0,,我得再复制一份有四个物品的副本 然后合并 这样总大小就是八个
Dialogue: 0,0:10:05.93,0:10:10.46,英文,,0,0,0,,And then how many items does it take to create another tree that's one taller?
Dialogue: 0,0:10:05.93,0:10:10.46,中文,,0,0,0,,那么要再造一棵比现在高一层的树需要多少物品
Dialogue: 0,0:10:10.46,0:10:16.00,英文,,0,0,0,,I need to make another copy union it, and then I get a tree of extra height.
Dialogue: 0,0:10:10.46,0:10:16.00,中文,,0,0,0,,我需要再制作一份副本 然后将其联合起来 然后我得到了一棵更高的树
Dialogue: 0,0:10:16.00,0:10:17.38,英文,,0,0,0,,Now I have 16 items.
Dialogue: 0,0:10:16.00,0:10:17.38,中文,,0,0,0,,现在我有16个项目
Dialogue: 0,0:10:17.38,0:10:20.77,英文,,0,0,0,,To make this one level taller, I would need 32 items.
Dialogue: 0,0:10:17.38,0:10:20.77,中文,,0,0,0,,为了使这个更高一级 我需要32个项目
Dialogue: 0,0:10:20.77,0:10:24.49,英文,,0,0,0,,To make it another level taller, I would need 64 items.
Dialogue: 0,0:10:20.77,0:10:24.49,中文,,0,0,0,,为了使它再高一级 我需要64个项目
Dialogue: 0,0:10:24.49,0:10:27.57,英文,,0,0,0,,So I can write this table out and see if I spot a pattern.
Dialogue: 0,0:10:24.49,0:10:27.57,中文,,0,0,0,,我可以写出这个表格 看看我能否发现模式
Dialogue: 0,0:10:27.57,0:10:35.63,英文,,0,0,0,,If I think back to all my favorite math functions, it turns out this one is log base 2 of n. So log of 1 is 0.
Dialogue: 0,0:10:27.57,0:10:35.63,中文,,0,0,0,,如果我回想起我所有喜欢的数学函数 结果发现这个是以n为底数的对数 所以log 1=0
Dialogue: 0,0:10:35.63,0:10:36.73,英文,,0,0,0,,Log of 2 is 1.
Dialogue: 0,0:10:35.63,0:10:36.73,中文,,0,0,0,,log 2=1
Dialogue: 0,0:10:36.73,0:10:37.75,英文,,0,0,0,,Log of 4 is 2.
Dialogue: 0,0:10:36.73,0:10:37.75,中文,,0,0,0,,4的对数是2
Dialogue: 0,0:10:37.75,0:10:38.89,英文,,0,0,0,,Log of 8 is 3.
Dialogue: 0,0:10:37.75,0:10:38.89,中文,,0,0,0,,8的对数是3
Dialogue: 0,0:10:38.89,0:10:40.04,英文,,0,0,0,,Log of 16 is 4.
Dialogue: 0,0:10:38.89,0:10:40.04,中文,,0,0,0,,16的对数是4
Dialogue: 0,0:10:40.04,0:10:40.98,英文,,0,0,0,,Don't believe me?
Dialogue: 0,0:10:40.04,0:10:40.98,中文,,0,0,0,,不信的话
Dialogue: 0,0:10:40.98,0:10:42.12,英文,,0,0,0,,Go home and check it out.
Dialogue: 0,0:10:40.98,0:10:42.12,中文,,0,0,0,,回家去查查吧
Dialogue: 0,0:10:42.12,0:10:44.88,英文,,0,0,0,,This is logarithmic behavior.
Dialogue: 0,0:10:42.12,0:10:44.88,中文,,0,0,0,,这是对数行为
Dialogue: 0,0:10:44.88,0:10:50.55,英文,,0,0,0,,Another way to see it, and we'll talk more about this in the binary search trees lecture,
Dialogue: 0,0:10:44.88,0:10:50.55,中文,,0,0,0,,另一种看法是 在二叉搜索树讲座中我们将更多地讨论这一点
Dialogue: 0,0:10:50.55,0:10:55.55,英文,,0,0,0,,which is where I thought I was going to be doing this talk, but I guess not, is, well,
Dialogue: 0,0:10:50.55,0:10:55.55,中文,,0,0,0,,这也是我本以为我会在这次演讲中做的 但我猜不是 是这样的
Dialogue: 0,0:10:55.55,0:11:01.55,英文,,0,0,0,,you might also notice that every time the number of items doubles, the runtime, or the height of the tree, increases by one.
Dialogue: 0,0:10:55.55,0:11:01.55,中文,,0,0,0,,你可能也会注意到 每当项目数量翻倍时 运行时间或树的高度就会增加一个
Dialogue: 0,0:11:01.55,0:11:04.83,英文,,0,0,0,,So if I double from 8 to 16, the height increases by 1.
Dialogue: 0,0:11:01.55,0:11:04.83,中文,,0,0,0,,如果我从8加倍到16 高度增加1
Dialogue: 0,0:11:04.83,0:11:08.52,英文,,0,0,0,,If I double from 16 to 32, the height increases by 1.
Dialogue: 0,0:11:04.83,0:11:08.52,中文,,0,0,0,,如果我从16加倍到32 高度增加1
Dialogue: 0,0:11:08.52,0:11:14.68,英文,,0,0,0,,And we know the runtime and the height are somehow correlated, because really tall trees are slow, short trees are fast.
Dialogue: 0,0:11:08.52,0:11:14.68,中文,,0,0,0,,而且我们知道运行时间和高度在某种程度上是相关的 因为真正高的树很慢 矮树很快
Dialogue: 0,0:11:14.68,0:11:17.62,英文,,0,0,0,,So every time I double the size of the tree,
Dialogue: 0,0:11:14.68,0:11:17.62,中文,,0,0,0,,每次我把树的大小加倍
Dialogue: 0,0:11:17.62,0:11:21.93,英文,,0,0,0,,disjoint sets object, the runtime gets slower by one unit.
Dialogue: 0,0:11:17.62,0:11:21.93,中文,,0,0,0,,不相交集合对象 运行时间就会慢一个单位
Dialogue: 0,0:11:21.93,0:11:22.61,英文,,0,0,0,,What's the unit?
Dialogue: 0,0:11:21.93,0:11:22.61,中文,,0,0,0,,单位是什么
Dialogue: 0,0:11:22.61,0:11:24.27,英文,,0,0,0,,Doesn't really matter in asymptotics.
Dialogue: 0,0:11:22.61,0:11:24.27,中文,,0,0,0,,在渐进性中这并不重要
Dialogue: 0,0:11:24.27,0:11:25.77,英文,,0,0,0,,We don't care about the exact runtime.
Dialogue: 0,0:11:24.27,0:11:25.77,中文,,0,0,0,,我们不关心确切的运行时间
Dialogue: 0,0:11:25.77,0:11:27.19,英文,,0,0,0,,We care about the growth.
Dialogue: 0,0:11:25.77,0:11:27.19,中文,,0,0,0,,我们关心增长
Dialogue: 0,0:11:27.19,0:11:32.65,英文,,0,0,0,,So every time you double the size of the disjoint sets object, the runtime goes up by one.
Dialogue: 0,0:11:27.19,0:11:32.65,中文,,0,0,0,,每当你把不相交集合对象的大小加倍时 运行时间就会增加一次
Dialogue: 0,0:11:32.65,0:11:36.02,英文,,0,0,0,,That's also a sign that you're in log n behavior.
Dialogue: 0,0:11:32.65,0:11:36.02,中文,,0,0,0,,这也是你处于对数行为的迹象
Dialogue: 0,0:11:36.02,0:11:44.26,英文,,0,0,0,,So if you ever see functions that do this, you double the size and the runtime slows by one, you know you've got log n. And that's what's happening here.
Dialogue: 0,0:11:36.02,0:11:44.26,中文,,0,0,0,,如果你看到函数这样做 你把大小加倍 运行时间减少一倍 你知道你得到了对数 n  这就是这里发生的事情
Dialogue: 0,0:11:44.26,0:11:54.31,英文,,0,0,0,,So all of this sketch is to show you that by using weighted quick union, my runtime is actually now theta log n. Look at that.
Dialogue: 0,0:11:44.26,0:11:54.31,中文,,0,0,0,,所有这些草图都是为了向你展示 通过使用加权快速联合 我的运行时间现在实际上是 Θ(log n)  看看这个
Dialogue: 0,0:11:54.31,0:12:04.41,英文,,0,0,0,,Theta or big O, and we'll talk about the difference probably next week, or maybe today, of log n. And the reason why that's true is because the connect operation, how do you connect things?
Dialogue: 0,0:11:54.31,0:12:04.41,中文,,0,0,0,,Θ 或Ο 我们可能会在下周或今天讨论差异 对数 n 的原因是因为连接操作 如何连接东西
Dialogue: 0,0:12:04.41,0:12:08.42,英文,,0,0,0,,You need to climb the tree and find the roots, and then tie the roots together.
Dialogue: 0,0:12:04.41,0:12:08.42,中文,,0,0,0,,你需要爬树找到根部 然后把根部系在一起
Dialogue: 0,0:12:08.42,0:12:09.88,英文,,0,0,0,,How do you do isConnected?
Dialogue: 0,0:12:08.42,0:12:09.88,中文,,0,0,0,,你怎么做 isConnected
Dialogue: 0,0:12:09.88,0:12:13.12,英文,,0,0,0,,You climb the tree, and you find out if the roots are the same.
Dialogue: 0,0:12:09.88,0:12:13.12,中文,,0,0,0,,你爬上树 然后查找根部是否相同
Dialogue: 0,0:12:13.12,0:12:15.98,英文,,0,0,0,,So both operations require climbing the tree.
Dialogue: 0,0:12:13.12,0:12:15.98,中文,,0,0,0,,这两个操作都需要爬树
Dialogue: 0,0:12:15.98,0:12:24.59,英文,,0,0,0,,And we know that the tree height is log n. That also means the runtime, the time it takes to climb the tree, grows with the function log n.
Dialogue: 0,0:12:15.98,0:12:24.59,中文,,0,0,0,,而且我们知道树的高度是log n 这也意味着爬树所需的时间随着log n的函数增长
Dialogue: 0,0:12:24.59,0:12:28.57,英文,,0,0,0,,Where n is the number of items in the weighted quick union object.
Dialogue: 0,0:12:24.59,0:12:28.57,中文,,0,0,0,,其中 n 是加权快速联合对象中的项数
Dialogue: 0,0:12:28.57,0:12:30.28,英文,,0,0,0,,OK, that's wonderful.
Dialogue: 0,0:12:28.57,0:12:30.28,中文,,0,0,0,,那太棒了
Dialogue: 0,0:12:30.28,0:12:35.24,英文,,0,0,0,,I went from all these slow implementations to a new fancy implementation that's faster.
Dialogue: 0,0:12:30.28,0:12:35.24,中文,,0,0,0,,我从所有这些慢实现转移到了一个新的花哨实现 速度更快
Dialogue: 0,0:12:35.24,0:12:37.97,英文,,0,0,0,,Questions, thoughts?
Dialogue: 0,0:12:35.24,0:12:37.97,中文,,0,0,0,,有问题 有想法吗
Dialogue: 0,0:12:37.97,0:12:39.73,英文,,0,0,0,,I'm killing so much of Justin's time.
Dialogue: 0,0:12:37.97,0:12:39.73,中文,,0,0,0,,我正在浪费贾斯汀大量的时间
Dialogue: 0,0:12:39.73,0:12:42.76,英文,,0,0,0,,OK, so.
Dialogue: 0,0:12:39.73,0:12:42.76,中文,,0,0,0,,那么
Dialogue: 0,0:12:42.76,0:12:43.62,英文,,0,0,0,,Oh, you'll take some of mine back?
Dialogue: 0,0:12:42.76,0:12:43.62,中文,,0,0,0,,哦 你会拿回一些我的时间吗
Dialogue: 0,0:12:43.62,0:12:44.20,英文,,0,0,0,,OK, thanks.
Dialogue: 0,0:12:43.62,0:12:44.20,中文,,0,0,0,,谢谢
Dialogue: 0,0:12:44.20,0:12:57.07,英文,,0,0,0,,So one quick note I will mention is you might be tempted to say, all of this makes sense, but why did you always link the tree with fewer items below the tree with more items?
Dialogue: 0,0:12:44.20,0:12:57.07,中文,,0,0,0,,我要提一点注意的是 你可能会觉得 所有这些都有道理 但为什么你总是将具有更少项目的树链接到具有更多项目的树下面呢
Dialogue: 0,0:12:57.07,0:13:04.29,英文,,0,0,0,,That is, when I wanted to compare these two trees, why did I compare that this one had two items and this one had four?
Dialogue: 0,0:12:57.07,0:13:04.29,中文,,0,0,0,,也就是说 当我想比较这两棵树的时候 为什么我比较了这一棵有2个项目 而那一棵有4个呢
Dialogue: 0,0:13:04.29,0:13:06.53,英文,,0,0,0,,Why didn't I compare the heights?
Dialogue: 0,0:13:04.29,0:13:06.53,中文,,0,0,0,,为什么我没有比较它们的高度
Dialogue: 0,0:13:06.53,0:13:09.38,英文,,0,0,0,,Why didn't I say this one is short, this one is tall?
Dialogue: 0,0:13:06.53,0:13:09.38,中文,,0,0,0,,为什么我没有说这一棵矮 那一棵高呢
Dialogue: 0,0:13:09.38,0:13:11.68,英文,,0,0,0,,Why did I compare the number of items?
Dialogue: 0,0:13:09.38,0:13:11.68,中文,,0,0,0,,为什么我比较的是项目的数量
Dialogue: 0,0:13:11.68,0:13:14.74,英文,,0,0,0,,And it turns out, if you want to compare the height, you can.
Dialogue: 0,0:13:11.68,0:13:14.74,中文,,0,0,0,,结果发现 如果你想比较高度 你是可以的
Dialogue: 0,0:13:14.74,0:13:16.27,英文,,0,0,0,,You could say, you know what?
Dialogue: 0,0:13:14.74,0:13:16.27,中文,,0,0,0,,你可以说 你知道吗
Dialogue: 0,0:13:16.27,0:13:19.94,英文,,0,0,0,,This one's got two items, or this one's got a height of two.
Dialogue: 0,0:13:16.27,0:13:19.94,中文,,0,0,0,,这一棵有2个项目 或者这一棵的高度是2
Dialogue: 0,0:13:19.94,0:13:21.08,英文,,0,0,0,,I guess maybe 1.
Dialogue: 0,0:13:19.94,0:13:21.08,中文,,0,0,0,,我猜可能是1
Dialogue: 0,0:13:21.08,0:13:22.84,英文,,0,0,0,,This one's got a height of 2.
Dialogue: 0,0:13:21.08,0:13:22.84,中文,,0,0,0,,这个树的高度是2
Dialogue: 0,0:13:22.84,0:13:24.26,英文,,0,0,0,,So this one's the taller tree.
Dialogue: 0,0:13:22.84,0:13:24.26,中文,,0,0,0,,这个是更高的树
Dialogue: 0,0:13:24.26,0:13:26.64,英文,,0,0,0,,So I'll hang the shorter one underneath the taller one.
Dialogue: 0,0:13:24.26,0:13:26.64,中文,,0,0,0,,我会把矮的树挂在更高的树下面
Dialogue: 0,0:13:26.64,0:13:28.39,英文,,0,0,0,,If you want to do that, you can.
Dialogue: 0,0:13:26.64,0:13:28.39,中文,,0,0,0,,如果你想这样做 你可以
Dialogue: 0,0:13:28.39,0:13:31.49,英文,,0,0,0,,You end up getting the same asymptotic behavior.
Dialogue: 0,0:13:28.39,0:13:31.49,中文,,0,0,0,,最终会得到相同的渐近行为
Dialogue: 0,0:13:31.49,0:13:32.81,英文,,0,0,0,,You can do the analysis.
Dialogue: 0,0:13:31.49,0:13:32.81,中文,,0,0,0,,你可以进行分析
Dialogue: 0,0:13:32.81,0:13:36.85,英文,,0,0,0,,It's still log n. But it turns out to just be a little bit harder to code.
Dialogue: 0,0:13:32.81,0:13:36.85,中文,,0,0,0,,还是log n 但事实证明编码稍微难一点
Dialogue: 0,0:13:36.85,0:13:38.81,英文,,0,0,0,,So it turns out we will just use weight.
Dialogue: 0,0:13:36.85,0:13:38.81,中文,,0,0,0,,结果是我们只需使用权重
Dialogue: 0,0:13:38.81,0:13:41.03,英文,,0,0,0,,That is the number of items.
Dialogue: 0,0:13:38.81,0:13:41.03,中文,,0,0,0,,那就是每个对象或每个团队的项目数量
Dialogue: 0,0:13:41.03,0:13:44.24,英文,,0,0,0,,in each object or in each team, and it works totally fine.
Dialogue: 0,0:13:41.03,0:13:44.24,中文,,0,0,0,,在这里完全没问题
Dialogue: 0,0:13:44.24,0:13:46.74,英文,,0,0,0,,You get the same logarithmic behavior.
Dialogue: 0,0:13:44.24,0:13:46.74,中文,,0,0,0,,你得到相同的对数行为
Dialogue: 0,0:13:46.74,0:13:56.67,英文,,0,0,0,,Maybe in some cases one is slightly faster than the other, but in terms of order of growth, in terms of how much slower this gets as n blows up, it's basically the same.
Dialogue: 0,0:13:46.74,0:13:56.67,中文,,0,0,0,,也许在某些情况下 一个比另一个稍微快一点 但就增长的顺序而言 随着n的增长 它变慢的程度基本相同
Dialogue: 0,0:13:56.67,0:13:58.51,英文,,0,0,0,,So you could use HeightedQuickUnion.
Dialogue: 0,0:13:56.67,0:13:58.51,中文,,0,0,0,,你可以使用HeightedQuickUnion
Dialogue: 0,0:13:58.51,0:14:00.57,英文,,0,0,0,,You could invent your own HeightedQuickUnion.
Dialogue: 0,0:13:58.51,0:14:00.57,中文,,0,0,0,,你可以发明自己的HeightedQuickUnion
Dialogue: 0,0:14:00.57,0:14:01.89,英文,,0,0,0,,And it would work fine, too.
Dialogue: 0,0:14:00.57,0:14:01.89,中文,,0,0,0,,而且它也会工作得很好
Dialogue: 0,0:14:01.89,0:14:08.39,英文,,0,0,0,,But we chose to use weight just because it makes things a little bit easier to write in code, which is nice.
Dialogue: 0,0:14:01.89,0:14:08.39,中文,,0,0,0,,但我们选择使用权重只是因为这样在编写代码时会稍微容易一些 这很好
Dialogue: 0,0:14:08.39,0:14:09.21,英文,,0,0,0,,OK.
Dialogue: 0,0:14:09.21,0:14:12.61,英文,,0,0,0,,So that's there in case you're wondering why we didn't do HeightedQuickUnion.
Dialogue: 0,0:14:09.21,0:14:12.61,中文,,0,0,0,,这就是为什么我们没有使用HeightedQuickUnion的原因
Dialogue: 0,0:14:12.61,0:14:19.91,英文,,0,0,0,,That's why when we compare two teams, we compare the number of items in the team and not the height of their trees.
Dialogue: 0,0:14:12.61,0:14:19.91,中文,,0,0,0,,这就是为什么当我们比较两支队伍时 我们比较的是队伍中的项目数量而不是它们树的高度
Dialogue: 0,0:14:19.91,0:14:21.22,英文,,0,0,0,,OK.
Dialogue: 0,0:14:21.22,0:14:23.34,英文,,0,0,0,,Here's another slide showing you weight instead of heights.
Dialogue: 0,0:14:21.22,0:14:23.34,中文,,0,0,0,,这是另一张幻灯片 显示的是重量而不是高度
Dialogue: 0,0:14:23.34,0:14:24.10,英文,,0,0,0,,They're the same.
Dialogue: 0,0:14:23.34,0:14:24.10,中文,,0,0,0,,它们是相同的
Dialogue: 0,0:14:24.10,0:14:25.10,英文,,0,0,0,,You could do heighted.
Dialogue: 0,0:14:24.10,0:14:25.10,中文,,0,0,0,,你可以使用高度
Dialogue: 0,0:14:25.10,0:14:26.82,英文,,0,0,0,,You would get log n performance.
Dialogue: 0,0:14:25.10,0:14:26.82,中文,,0,0,0,,你将得到对数性能
Dialogue: 0,0:14:26.82,0:14:29.89,英文,,0,0,0,,But we used weight just because the code is simpler.
Dialogue: 0,0:14:26.82,0:14:29.89,中文,,0,0,0,,但我们使用重量只是因为代码更简单
Dialogue: 0,0:14:29.89,0:14:33.63,英文,,0,0,0,,OK, here comes your final shiny topic that you need for Lab 5.
Dialogue: 0,0:14:29.89,0:14:33.63,中文,,0,0,0,,下面是你需要的实验五的最终闪亮主题
Dialogue: 0,0:14:33.63,0:14:37.01,英文,,0,0,0,,And then we're all done.
Dialogue: 0,0:14:33.63,0:14:37.01,中文,,0,0,0,,然后我们就全部完成了
Dialogue: 0,0:14:37.01,0:14:44.16,英文,,0,0,0,,I will not run through all the math here, but basically this example shows you
Dialogue: 0,0:14:37.01,0:14:44.01,中文,,0,0,0,,我不会在这里详细介绍所有的数学内容 但基本上这个例子向你展示了
Dialogue: 0,0:14:44.01,0:14:51.16,中文,,0,0,0,,通过拥有一个良好的不相交集合实现 通过从这个难看的慢集合列表切换到这个漂亮的快速 quick union 方法
Dialogue: 0,0:14:44.16,0:14:52.16,英文,,0,0,0,,that by having a good disjoint sets implementation, by switching from this ugly slow list of sets to this beautiful fast way to quick union, your runtime,
Dialogue: 0,0:14:51.16,0:14:59.16,中文,,0,0,0,,如果我插入一些数字 你的运行时间从执行某些操作需要 30 年缩短到了 6 秒
Dialogue: 0,0:14:52.16,0:14:59.16,英文,,0,0,0,,if I plugged in some numbers, it went from 30 years to perform some set of operations to six seconds.
Dialogue: 0,0:14:59.16,0:15:02.89,英文,,0,0,0,,So it makes a really big difference by using a good implementation.
Dialogue: 0,0:14:59.16,0:15:02.89,中文,,0,0,0,,使用一个好的实现真的很重要
Dialogue: 0,0:15:02.89,0:15:07.35,英文,,0,0,0,,You've actually unlocked problems that otherwise would be unsolvable.
Dialogue: 0,0:15:02.89,0:15:07.35,中文,,0,0,0,,你实际上解锁了一些本来无法解决的问题
Dialogue: 0,0:15:07.35,0:15:15.55,英文,,0,0,0,,If we were stuck with lists of sets, we would not be able to solve this problem with these numbers of operations because it would take 30 years.
Dialogue: 0,0:15:07.35,0:15:15.55,中文,,0,0,0,,如果我们被困在集合列表中 我们将无法使用这些操作数量解决这个问题 因为这将花费30年
Dialogue: 0,0:15:15.55,0:15:19.26,英文,,0,0,0,,But if I use my really fast WayToQuickUnion, it takes only six seconds.
Dialogue: 0,0:15:15.55,0:15:19.26,中文,,0,0,0,,但如果我使用我的非常快速的WayToQuickUnion 只需要六秒
Dialogue: 0,0:15:19.26,0:15:24.44,英文,,0,0,0,,Turns out, for basically all practical purposes, WayToQuickUnion is good enough.
Dialogue: 0,0:15:19.26,0:15:24.44,中文,,0,0,0,,事实证明 对于基本上所有实际目的 WayToQuickUnion已经足够好了
Dialogue: 0,0:15:24.44,0:15:27.32,英文,,0,0,0,,You will not notice any sort of slowdown.
Dialogue: 0,0:15:24.44,0:15:27.32,中文,,0,0,0,,你不会注意到任何减速
Dialogue: 0,0:15:27.32,0:15:30.10,英文,,0,0,0,,This can solve gigantic problems very quickly.
Dialogue: 0,0:15:27.32,0:15:30.10,中文,,0,0,0,,这能非常快速地解决巨大的问题
Dialogue: 0,0:15:30.10,0:15:34.07,英文,,0,0,0,,But there's a question kind of in the back of your mind, like, but can we do better?
Dialogue: 0,0:15:30.10,0:15:34.07,中文,,0,0,0,,但是你心里总有一个问题 就是 我们能做得更好吗
Dialogue: 0,0:15:34.07,0:15:35.37,英文,,0,0,0,,Like, login was good.
Dialogue: 0,0:15:34.07,0:15:35.37,中文,,0,0,0,,比如 登录很好
Dialogue: 0,0:15:35.37,0:15:37.97,英文,,0,0,0,,But what if we could do even better?
Dialogue: 0,0:15:35.37,0:15:37.97,中文,,0,0,0,,但如果我们能做得更好呢
Dialogue: 0,0:15:37.97,0:15:40.39,英文,,0,0,0,,So now we're going to dive a little bit into CS theory.
Dialogue: 0,0:15:37.97,0:15:40.39,中文,,0,0,0,,现在我们要深入一点计算机科学理论
Dialogue: 0,0:15:40.39,0:15:45.25,英文,,0,0,0,,We're kind of getting into the point where, for all practical purposes, this is good enough.
Dialogue: 0,0:15:40.39,0:15:45.25,中文,,0,0,0,,我们已经到了实际上这已经足够好的地步了
Dialogue: 0,0:15:45.25,0:15:48.94,英文,,0,0,0,,But we want to find the truly best way to quick union.
Dialogue: 0,0:15:45.25,0:15:48.94,中文,,0,0,0,,但我们想找到真正最好的快速联合方式
Dialogue: 0,0:15:48.94,0:16:00.46,英文,,0,0,0,,So we want to, like, go to the monk on the top of the mountain and ask, what is truly the best disjoint sets implementation, even if this one is basically good enough for all intents and purposes?
Dialogue: 0,0:15:48.94,0:16:00.46,中文,,0,0,0,,我们想去山顶找和尚问一问 到底什么才是真正最好的不相交集实现 即使这个基本上已经足够满足所有目的了
Dialogue: 0,0:16:00.46,0:16:05.71,英文,,0,0,0,,So let's go seeking the true greatest disjoint sets implementation ever.
Dialogue: 0,0:16:00.46,0:16:05.71,中文,,0,0,0,,让我们去寻找真正最伟大的不相交集实现
Dialogue: 0,0:16:05.71,0:16:06.87,英文,,0,0,0,,OK.
Dialogue: 0,0:16:06.87,0:16:21.00,英文,,0,0,0,,So the key idea to go from good enough for all practical purposes to the theoretical greatest of all time way to quick union object is, let's say I want to check if 15 and 10 are connected.
Dialogue: 0,0:16:06.87,0:16:21.00,中文,,0,0,0,,从基本满足所有实际目的到理论上最伟大的快速联合对象的关键思想是 假设我想检查15和10是否连接
Dialogue: 0,0:16:21.00,0:16:23.45,英文,,0,0,0,,How do I check if 15 and 10 are connected?
Dialogue: 0,0:16:21.00,0:16:23.45,中文,,0,0,0,,我怎么检查15和10是否连接
Dialogue: 0,0:16:23.45,0:16:24.97,英文,,0,0,0,,I go to 15.
Dialogue: 0,0:16:23.45,0:16:24.97,中文,,0,0,0,,我去15那儿
Dialogue: 0,0:16:24.97,0:16:26.17,英文,,0,0,0,,I climb the tree.
Dialogue: 0,0:16:24.97,0:16:26.17,中文,,0,0,0,,我爬树
Dialogue: 0,0:16:26.17,0:16:28.31,英文,,0,0,0,,And I say, 15, whose team are you part of?
Dialogue: 0,0:16:26.17,0:16:28.31,中文,,0,0,0,,我说 15 你是哪个团队的一部分
Dialogue: 0,0:16:28.31,0:16:29.01,英文,,0,0,0,,I climb.
Dialogue: 0,0:16:28.31,0:16:29.01,中文,,0,0,0,,我爬
Dialogue: 0,0:16:29.01,0:16:29.71,英文,,0,0,0,,I climb.
Dialogue: 0,0:16:29.01,0:16:29.71,中文,,0,0,0,,我爬
Dialogue: 0,0:16:29.71,0:16:30.49,英文,,0,0,0,,I climb.
Dialogue: 0,0:16:29.71,0:16:30.49,中文,,0,0,0,,我爬
Dialogue: 0,0:16:30.49,0:16:31.55,英文,,0,0,0,,I climb.
Dialogue: 0,0:16:30.49,0:16:31.55,中文,,0,0,0,,我爬
Dialogue: 0,0:16:31.55,0:16:34.64,英文,,0,0,0,,Ah, your boss is 0.
Dialogue: 0,0:16:31.55,0:16:34.64,中文,,0,0,0,,你的老板是0
Dialogue: 0,0:16:34.64,0:16:39.30,英文,,0,0,0,,And remember, the way to do this is to look in my parents array to see who everyone's parent is.
Dialogue: 0,0:16:34.64,0:16:39.30,中文,,0,0,0,,记住 做这件事情的方法是查看我的父母数组 看看每个人的父母是谁
Dialogue: 0,0:16:39.30,0:16:42.68,英文,,0,0,0,,How do I know who is the boss of 10?
Dialogue: 0,0:16:39.30,0:16:42.68,中文,,0,0,0,,我怎么知道10的老板是谁
Dialogue: 0,0:16:42.68,0:16:44.20,英文,,0,0,0,,I go in the parents array 10.
Dialogue: 0,0:16:42.68,0:16:44.20,中文,,0,0,0,,我进入父数组10
Dialogue: 0,0:16:44.20,0:16:45.66,英文,,0,0,0,,Your parent is 3.
Dialogue: 0,0:16:44.20,0:16:45.66,中文,,0,0,0,,你的父亲是3
Dialogue: 0,0:16:45.66,0:16:46.08,英文,,0,0,0,,3.
Dialogue: 0,0:16:45.66,0:16:46.08,中文,,0,0,0,,3
Dialogue: 0,0:16:46.08,0:16:47.49,英文,,0,0,0,,Your parent is 0.
Dialogue: 0,0:16:46.08,0:16:47.49,中文,,0,0,0,,你的父亲是0
Dialogue: 0,0:16:47.49,0:16:47.69,英文,,0,0,0,,0.
Dialogue: 0,0:16:47.49,0:16:47.69,中文,,0,0,0,,0
Dialogue: 0,0:16:47.69,0:16:48.69,英文,,0,0,0,,You're the boss.
Dialogue: 0,0:16:47.69,0:16:48.69,中文,,0,0,0,,你是老板
Dialogue: 0,0:16:48.69,0:16:56.01,英文,,0,0,0,,So I climb the tree, and I find out that both of these 15 and 10 items, they have 0 as the boss.
Dialogue: 0,0:16:48.69,0:16:56.01,中文,,0,0,0,,我爬上树 发现这两个15和10的项目都将0作为老板
Dialogue: 0,0:16:56.01,0:17:00.73,英文,,0,0,0,,Since both of them have 0 as the boss, well, that tells me they're part of the same team.
Dialogue: 0,0:16:56.01,0:17:00.73,中文,,0,0,0,,因为他们两个都将0作为老板 这告诉我他们是同一个团队的一部分
Dialogue: 0,0:17:00.73,0:17:04.33,英文,,0,0,0,,So I know that isConnectedReturns true.
Dialogue: 0,0:17:00.73,0:17:04.33,中文,,0,0,0,,我知道isConnectedReturns为true
Dialogue: 0,0:17:04.33,0:17:07.92,英文,,0,0,0,,But as I did this, didn't I kind of learn something?
Dialogue: 0,0:17:04.33,0:17:07.92,中文,,0,0,0,,但是当我这样做时 我难道不是学到了什么吗
Dialogue: 0,0:17:07.92,0:17:09.96,英文,,0,0,0,,Which is, well, it's true.
Dialogue: 0,0:17:07.92,0:17:09.96,中文,,0,0,0,,也就是说 这是真的
Dialogue: 0,0:17:09.96,0:17:12.30,英文,,0,0,0,,I learned that 15 belongs to team 0.
Dialogue: 0,0:17:09.96,0:17:12.30,中文,,0,0,0,,我学到了15属于0团队
Dialogue: 0,0:17:12.30,0:17:13.82,英文,,0,0,0,,I also learned that 10 belongs to team 0.
Dialogue: 0,0:17:12.30,0:17:13.82,中文,,0,0,0,,我还学到了10属于0团队
Dialogue: 0,0:17:13.82,0:17:19.28,英文,,0,0,0,,But Didn't I learn a little bit extra that I could maybe write down and use?
Dialogue: 0,0:17:13.82,0:17:19.28,中文,,0,0,0,,我不是学到了一点额外的东西可以写下来并使用吗
Dialogue: 0,0:17:19.28,0:17:22.25,英文,,0,0,0,,Because I learned that, yes, 15 belongs to 0.
Dialogue: 0,0:17:19.28,0:17:22.25,中文,,0,0,0,,因为我学到了 是的 15属于0
Dialogue: 0,0:17:22.25,0:17:31.00,英文,,0,0,0,,But then when I went to 11, didn't I also notice, hey, 11, you must also belong to team 0, because I saw you on the way climbing to 0.
Dialogue: 0,0:17:22.25,0:17:31.00,中文,,0,0,0,,但是当我到11的时候 我不也注意到了 嘿 11 你也必须属于0队 因为我看到你在爬到0的路上
Dialogue: 0,0:17:31.00,0:17:35.10,英文,,0,0,0,,And 5, you must also belong to 0, because I saw you on the way climbing.
Dialogue: 0,0:17:31.00,0:17:35.10,中文,,0,0,0,,而且5 你也必须属于0 因为我在爬的路上看到了你
Dialogue: 0,0:17:35.10,0:17:37.48,英文,,0,0,0,,And same with 1, and same with 3.
Dialogue: 0,0:17:35.10,0:17:37.48,中文,,0,0,0,,1也是如此 3也是如此
Dialogue: 0,0:17:37.48,0:17:51.40,英文,,0,0,0,,So the clever idea that's going to take us to the next dimension of really fast disjoint sets implementations is, as you climb the tree, you should really keep track of all the things that you see along the way.
Dialogue: 0,0:17:37.48,0:17:51.40,中文,,0,0,0,,因此 下一个将我们带入真正快速不相交集实现的巧妙想法是 当你爬树时 你应该真正地跟踪你沿途看到的所有东西
Dialogue: 0,0:17:51.40,0:17:57.99,英文,,0,0,0,,So as I go, I notice that 11, 5, and 1 are all part of team 0, and so is 3.
Dialogue: 0,0:17:51.40,0:17:57.99,中文,,0,0,0,,当我进行操作时 我注意到11、5和1都属于团队0 3也是
Dialogue: 0,0:17:57.99,0:18:04.59,英文,,0,0,0,,So instead of having this tree structure, as I run this isConnected operation, I can actually flatten the tree.
Dialogue: 0,0:17:57.99,0:18:04.59,中文,,0,0,0,,与其拥有这样的树形结构 当我运行 isConnected 操作时 我实际上可以将树展平
Dialogue: 0,0:18:04.59,0:18:10.30,英文,,0,0,0,,That is, instead of having 11 tied to some other object, I could just tie 11 directly to 0.
Dialogue: 0,0:18:04.59,0:18:10.30,中文,,0,0,0,,也就是说 与其将11与其他对象关联起来 我可以直接将11关联到0
Dialogue: 0,0:18:10.30,0:18:15.72,英文,,0,0,0,,Because in the process of checking 15 and 10, I learned that 11 belongs to team 0.
Dialogue: 0,0:18:10.30,0:18:15.72,中文,,0,0,0,,因为在检查15和10的过程中 我了解到11属于0团队
Dialogue: 0,0:18:15.72,0:18:17.57,英文,,0,0,0,,I learned that 5 belongs to team 0.
Dialogue: 0,0:18:15.72,0:18:17.57,中文,,0,0,0,,我了解到5属于0团队
Dialogue: 0,0:18:17.57,0:18:18.55,英文,,0,0,0,,Same with 1.
Dialogue: 0,0:18:17.57,0:18:18.55,中文,,0,0,0,,1也是如此
Dialogue: 0,0:18:18.55,0:18:19.61,英文,,0,0,0,,Same with 3.
Dialogue: 0,0:18:18.55,0:18:19.61,中文,,0,0,0,,3也是如此
Dialogue: 0,0:18:19.61,0:18:24.55,英文,,0,0,0,,So any item that I encounter along the way, I will tie it to the root.
Dialogue: 0,0:18:19.61,0:18:24.55,中文,,0,0,0,,在我沿途遇到的任何项目 我都会将其与根节点关联起来
Dialogue: 0,0:18:24.55,0:18:30.39,英文,,0,0,0,,And if I do that, and I shuffle the nodes around a bit to make it look nicer, I get this flatter tree.
Dialogue: 0,0:18:24.55,0:18:30.39,中文,,0,0,0,,如果我这样做 并稍微移动节点使其看起来更整齐 我就得到了这个更平坦的树
Dialogue: 0,0:18:30.39,0:18:31.17,英文,,0,0,0,,That's kind of cool.
Dialogue: 0,0:18:30.39,0:18:31.17,中文,,0,0,0,,这有点酷
Dialogue: 0,0:18:31.17,0:18:38.74,英文,,0,0,0,,It means every time you climb the tree, you're actually flattening the tree as well, because you're seeing items along the way to the root.
Dialogue: 0,0:18:31.17,0:18:38.74,中文,,0,0,0,,这意味着每次你爬树时 你实际上也在展平树 因为你会看到通往根节点的沿途项目
Dialogue: 0,0:18:38.74,0:18:43.22,英文,,0,0,0,,And instead of leaving them as is, you are tying them directly to the root.
Dialogue: 0,0:18:38.74,0:18:43.22,中文,,0,0,0,,而不是保持它们原样 你直接将它们与根节点关联
Dialogue: 0,0:18:43.22,0:18:45.76,英文,,0,0,0,,So 11's parent used to be 5.
Dialogue: 0,0:18:43.22,0:18:45.76,中文,,0,0,0,,所以11的父节点过去是5
Dialogue: 0,0:18:45.76,0:18:49.48,英文,,0,0,0,,And to find the root of 11, you had to climb, climb, climb.
Dialogue: 0,0:18:45.76,0:18:49.48,中文,,0,0,0,,要找到11的根 你必须一直爬 爬 爬
Dialogue: 0,0:18:49.48,0:18:51.08,英文,,0,0,0,,But since you already did the climbing,
Dialogue: 0,0:18:49.48,0:18:51.08,中文,,0,0,0,,但既然你已经爬过了,
Dialogue: 0,0:18:51.08,0:18:52.95,英文,,0,0,0,,There's no point doing it again later.
Dialogue: 0,0:18:51.08,0:18:52.95,中文,,0,0,0,,以后再爬一次就没意义了
Dialogue: 0,0:18:52.95,0:18:56.15,英文,,0,0,0,,So I'm going to tie 11 directly to 0, because I learned.
Dialogue: 0,0:18:52.95,0:18:56.15,中文,,0,0,0,,我直接把11绑定到0上 因为我学到了
Dialogue: 0,0:18:56.15,0:18:57.37,英文,,0,0,0,,It's part of team 0.
Dialogue: 0,0:18:56.15,0:18:57.37,中文,,0,0,0,,这是团队0的一部分
Dialogue: 0,0:18:57.37,0:18:59.83,英文,,0,0,0,,There's no point doing the climbing a second time.
Dialogue: 0,0:18:57.37,0:18:59.83,中文,,0,0,0,,再次爬树没有意义
Dialogue: 0,0:18:59.83,0:19:03.57,英文,,0,0,0,,So I will just tie it to 0 and get this flatter tree.
Dialogue: 0,0:18:59.83,0:19:03.57,中文,,0,0,0,,我只需将其绑定到0上 得到这个更扁平的树
Dialogue: 0,0:19:03.57,0:19:08.65,英文,,0,0,0,,So if I do this every time I climb the tree, I get this idea called path compression.
Dialogue: 0,0:19:03.57,0:19:08.65,中文,,0,0,0,,每次爬树时我这样做 就得到了这个被称为路径压缩的想法
Dialogue: 0,0:19:08.65,0:19:17.48,英文,,0,0,0,,Every time you climb the tree, anything that you see along the way to the root, you should tie it directly to the root to save yourself some time later.
Dialogue: 0,0:19:08.65,0:19:17.48,中文,,0,0,0,,每次你爬树的时候 沿着路上看到的任何东西都应该直接系到根上 以后省些时间
Dialogue: 0,0:19:17.48,0:19:18.34,英文,,0,0,0,,Kind of cool.
Dialogue: 0,0:19:17.48,0:19:18.34,中文,,0,0,0,,挺酷的
Dialogue: 0,0:19:18.34,0:19:20.69,英文,,0,0,0,,So don't know if I'll have time for this.
Dialogue: 0,0:19:18.34,0:19:20.69,中文,,0,0,0,,不知道我是否会有时间做这个
Dialogue: 0,0:19:20.69,0:19:23.28,英文,,0,0,0,,I should be a little bit nice to you, give you some time left.
Dialogue: 0,0:19:20.69,0:19:23.28,中文,,0,0,0,,我应该对你好一点 给你留点时间
Dialogue: 0,0:19:23.28,0:19:27.64,英文,,0,0,0,,So if I want to check if 14 and 13 are connected, what would I do?
Dialogue: 0,0:19:23.28,0:19:27.64,中文,,0,0,0,,如果我想检查14和13是否连接 我该怎么做
Dialogue: 0,0:19:27.64,0:19:29.68,英文,,0,0,0,,Well, I'd have to check 14.
Dialogue: 0,0:19:27.64,0:19:29.68,中文,,0,0,0,,我得检查14
Dialogue: 0,0:19:29.68,0:19:30.74,英文,,0,0,0,,Who's the boss?
Dialogue: 0,0:19:29.68,0:19:30.74,中文,,0,0,0,,谁是老板
Dialogue: 0,0:19:30.74,0:19:33.61,英文,,0,0,0,,Well, 14's parent is 8, 2, 0.
Dialogue: 0,0:19:30.74,0:19:33.61,中文,,0,0,0,,14的父级是8、2、0
Dialogue: 0,0:19:33.61,0:19:35.31,英文,,0,0,0,,But along the way, I learned something.
Dialogue: 0,0:19:33.61,0:19:35.31,中文,,0,0,0,,但在这过程中 我学到了一些东西
Dialogue: 0,0:19:35.31,0:19:39.09,英文,,0,0,0,,I learned that 8 is part of team 0 and 2 is part of team 0.
Dialogue: 0,0:19:35.31,0:19:39.09,中文,,0,0,0,,我学到了8是0团队的一部分 2是0团队的一部分
Dialogue: 0,0:19:39.09,0:19:43.86,英文,,0,0,0,,So I should hook those up directly to 0 instead of leaving them in this tall tree form.
Dialogue: 0,0:19:39.09,0:19:43.86,中文,,0,0,0,,我应该直接将它们连接到0 而不是让它们保留在这个高高的树形结构中
Dialogue: 0,0:19:43.86,0:19:46.06,英文,,0,0,0,,And then 13, who's your boss?
Dialogue: 0,0:19:43.86,0:19:46.06,中文,,0,0,0,,然后13 谁是你的老板
Dialogue: 0,0:19:46.06,0:19:47.68,英文,,0,0,0,,13, climb, climb, climb.
Dialogue: 0,0:19:46.06,0:19:47.68,中文,,0,0,0,,13 爬 爬 爬
Dialogue: 0,0:19:47.68,0:19:54.50,英文,,0,0,0,,And as I climb, everything I see along the way, I should tie directly to 0, because that's what I learned from doing the climbing.
Dialogue: 0,0:19:47.68,0:19:54.50,中文,,0,0,0,,当我爬的时候 沿途看到的一切 我都应该直接与0联系 因为这是我从攀爬中学到的
Dialogue: 0,0:19:54.50,0:19:57.26,英文,,0,0,0,,So 14 and 13, are they connected?
Dialogue: 0,0:19:54.50,0:19:57.26,中文,,0,0,0,,所以14和13 它们连接在一起吗
Dialogue: 0,0:19:57.26,0:19:58.04,英文,,0,0,0,,Yes, they are.
Dialogue: 0,0:19:57.26,0:19:58.04,中文,,0,0,0,,是的 它们是的
Dialogue: 0,0:19:58.04,0:19:59.46,英文,,0,0,0,,The climbing told me that.
Dialogue: 0,0:19:58.04,0:19:59.46,中文,,0,0,0,,爬山告诉了我这个
Dialogue: 0,0:19:59.46,0:20:06.24,英文,,0,0,0,,But as I climbed, I also tied all of these items directly to 0, which is kind of cool.
Dialogue: 0,0:19:59.46,0:20:06.24,中文,,0,0,0,,但是当我爬的时候 我也把所有这些物品直接绑定到了0上 这有点酷
Dialogue: 0,0:20:06.24,0:20:09.99,英文,,0,0,0,,This way, if I have to climb later, I don't have to redo the climbing.
Dialogue: 0,0:20:06.24,0:20:09.99,中文,,0,0,0,,这样 如果以后我需要再次爬山 我就不必重新爬了
Dialogue: 0,0:20:09.99,0:20:14.10,英文,,0,0,0,,I already learned they belong to 0, so might as well write that out.
Dialogue: 0,0:20:09.99,0:20:14.10,中文,,0,0,0,,我已经学会它们属于0了 所以干脆写出来吧
Dialogue: 0,0:20:14.10,0:20:14.98,英文,,0,0,0,,That's kind of cool.
Dialogue: 0,0:20:14.10,0:20:14.98,中文,,0,0,0,,这挺酷的
Dialogue: 0,0:20:14.98,0:20:19.69,英文,,0,0,0,,It turns out the more you use the data structure, the faster it gets.
Dialogue: 0,0:20:14.98,0:20:19.69,中文,,0,0,0,,原来 你使用数据结构越多 它就变得越快
Dialogue: 0,0:20:19.69,0:20:21.05,英文,,0,0,0,,That's kind of mind blowing.
Dialogue: 0,0:20:19.69,0:20:21.05,中文,,0,0,0,,有点令人惊讶
Dialogue: 0,0:20:21.05,0:20:28.64,英文,,0,0,0,,So this is a data structure where the more you use it, the more you climb the tree and call isConnected and callConnected,
Dialogue: 0,0:20:21.05,0:20:28.64,中文,,0,0,0,,这是一种数据结构 你使用它的次数越多 你就越爬高树 调用 isConnected 和 callConnected
Dialogue: 0,0:20:28.64,0:20:32.64,英文,,0,0,0,,the more you climb and use this data structure, the faster it gets
Dialogue: 0,0:20:28.64,0:20:32.64,中文,,0,0,0,,你爬得越多 使用这种数据结构的速度就越快
Dialogue: 0,0:20:32.64,0:20:37.64,英文,,0,0,0,,because you keep remembering all this stuff about who the boss is.
Dialogue: 0,0:20:32.64,0:20:37.64,中文,,0,0,0,,因为树保持扁平化 因为你不断记住关于老板是谁的所有信息
Dialogue: 0,0:20:37.64,0:20:39.86,英文,,0,0,0,,And you keep tying things directly to the root.
Dialogue: 0,0:20:37.64,0:20:39.86,中文,,0,0,0,,而且你一直把事情直接绑定到根上
Dialogue: 0,0:20:39.86,0:20:47.69,英文,,0,0,0,,And if you use this data structure enough, eventually your tree will completely flatten out, which is kind of cool.
Dialogue: 0,0:20:39.86,0:20:47.69,中文,,0,0,0,,如果你足够多地使用这个数据结构 最终你的树会完全扁平化 这挺酷的
Dialogue: 0,0:20:47.69,0:20:53.53,英文,,0,0,0,,So it turns out, with this path compression idea, even trees like this are just impossible.
Dialogue: 0,0:20:47.69,0:20:53.53,中文,,0,0,0,,原来 有了这个路径压缩的想法 即使是这样的树也变得很容易
Dialogue: 0,0:20:53.53,0:20:58.24,英文,,0,0,0,,If I were to build this tree using path compression, it would not be possible.
Dialogue: 0,0:20:53.53,0:20:58.24,中文,,0,0,0,,如果我要用路径压缩构建这棵树 那是不可能的
Dialogue: 0,0:20:58.24,0:21:00.48,英文,,0,0,0,,Some of the path would have been compressed.
Dialogue: 0,0:20:58.24,0:21:00.48,中文,,0,0,0,,一些路径可能已经被压缩了
Dialogue: 0,0:21:00.48,0:21:02.52,英文,,0,0,0,,Some of these would have been tied to 0 earlier.
Dialogue: 0,0:21:00.48,0:21:02.52,中文,,0,0,0,,其中一些可能早些时候已经与0绑定了
Dialogue: 0,0:21:02.52,0:21:03.22,英文,,0,0,0,,That didn't make sense.
Dialogue: 0,0:21:02.52,0:21:03.22,中文,,0,0,0,,那没什么道理
Dialogue: 0,0:21:03.22,0:21:04.04,英文,,0,0,0,,It's okay.
Dialogue: 0,0:21:03.22,0:21:04.04,中文,,0,0,0,,没关系
Dialogue: 0,0:21:04.04,0:21:04.64,英文,,0,0,0,,Go home.
Dialogue: 0,0:21:04.04,0:21:04.64,中文,,0,0,0,,回家吧
Dialogue: 0,0:21:04.64,0:21:05.48,英文,,0,0,0,,Play with it.
Dialogue: 0,0:21:04.64,0:21:05.48,中文,,0,0,0,,拿着它玩
Dialogue: 0,0:21:05.48,0:21:12.47,英文,,0,0,0,,But the idea is that with path compression, my trees are now going to be really, really, really flat.
Dialogue: 0,0:21:05.48,0:21:12.47,中文,,0,0,0,,但是问题是 通过路径压缩 我的树现在会变得非常非常非常扁平
Dialogue: 0,0:21:12.47,0:21:15.45,英文,,0,0,0,,How flat is really, really, really flat?
Dialogue: 0,0:21:12.47,0:21:15.45,中文,,0,0,0,,真的 真的 真的很平的
Dialogue: 0,0:21:15.45,0:21:17.47,英文,,0,0,0,,Well, we're not going to do the math analysis here.
Dialogue: 0,0:21:15.45,0:21:17.47,中文,,0,0,0,,好吧 我们这里不会进行数学分析
Dialogue: 0,0:21:17.47,0:21:19.43,英文,,0,0,0,,There's a cool paper if you want to check it out.
Dialogue: 0,0:21:17.47,0:21:19.43,中文,,0,0,0,,有一篇很酷的论文 如果你想看的话
Dialogue: 0,0:21:19.43,0:21:27.74,英文,,0,0,0,,But this tree is so flat that in order to take this disjoint sets implementation and create a tree of height 5,
Dialogue: 0,0:21:19.43,0:21:27.74,中文,,0,0,0,,但这棵树是如此扁平 以至于为了采用这种不相交集实现并创建一个高度为5的树
Dialogue: 0,0:21:27.74,0:21:29.56,英文,,0,0,0,,And here, this is height 3.
Dialogue: 0,0:21:27.74,0:21:29.56,中文,,0,0,0,,而这里 这是高度3
Dialogue: 0,0:21:29.56,0:21:31.66,英文,,0,0,0,,If I want a tree of height 2, sorry.
Dialogue: 0,0:21:29.56,0:21:31.66,中文,,0,0,0,,如果我想要一个高度为2的树 抱歉
Dialogue: 0,0:21:31.66,0:21:41.28,英文,,0,0,0,,If I want a tree of height 5, which is not terribly tall, the number of items you need to create a tree of height 5 is this monstrosity.
Dialogue: 0,0:21:31.66,0:21:41.28,中文,,0,0,0,,如果我想要一个高度为5的树 这并不是太高 你需要创建一个高度为5的树的物品数量是这个庞然大物
Dialogue: 0,0:21:41.28,0:21:43.90,英文,,0,0,0,,2 to the 2 to the 2 to the 2 to the 2.
Dialogue: 0,0:21:41.28,0:21:43.90,中文,,0,0,0,,2 到 2 到 2 到 2 到 2
Dialogue: 0,0:21:43.90,0:21:44.86,英文,,0,0,0,,65,000 times.
Dialogue: 0,0:21:43.90,0:21:44.86,中文,,0,0,0,,65,000 次
Dialogue: 0,0:21:44.86,0:21:49.46,英文,,0,0,0,,This number is so big, I think our brains would collapse into a black hole if we thought about it.
Dialogue: 0,0:21:44.86,0:21:49.46,中文,,0,0,0,,这个数字太大了 我觉得如果我们想一想它 我们的大脑会坍塌成黑洞
Dialogue: 0,0:21:49.46,0:21:52.22,英文,,0,0,0,,There's no way we're ever going to get to this number.
Dialogue: 0,0:21:49.46,0:21:52.22,中文,,0,0,0,,我们绝对不可能达到这个数字
Dialogue: 0,0:21:52.22,0:21:54.41,英文,,0,0,0,,So this is beautiful.
Dialogue: 0,0:21:52.22,0:21:54.41,中文,,0,0,0,,这是美好的
Dialogue: 0,0:21:54.41,0:21:57.99,英文,,0,0,0,,This is the state-of-the-art disjoint sets implementation.
Dialogue: 0,0:21:54.41,0:21:57.99,中文,,0,0,0,,这是最先进的不相交集实现
Dialogue: 0,0:21:57.99,0:21:59.37,英文,,0,0,0,,It's what you'll build in lab.
Dialogue: 0,0:21:57.99,0:21:59.37,中文,,0,0,0,,这就是你将在实验室中构建的内容
Dialogue: 0,0:21:59.37,0:22:04.15,英文,,0,0,0,,So what we added at the very end was this path compression idea.
Dialogue: 0,0:21:59.37,0:22:04.15,中文,,0,0,0,,我们在最后添加的是这个路径压缩的想法
Dialogue: 0,0:22:04.15,0:22:10.79,英文,,0,0,0,,And what happened was every time you climb the tree, you should maybe remember the term memoize from CS61A, not
Dialogue: 0,0:22:04.15,0:22:10.79,中文,,0,0,0,,结果就是每次你爬树的时候 你可能会记得来自CS61A的记忆化这个术语
Dialogue: 0,0:22:10.79,0:22:11.57,英文,,0,0,0,,It's OK.
Dialogue: 0,0:22:10.79,0:22:11.57,中文,,0,0,0,,没关系
Dialogue: 0,0:22:11.57,0:22:19.32,英文,,0,0,0,,But the idea is every time you climb the tree, you're going to take all the items that you see and set their parent directly to the root.
Dialogue: 0,0:22:11.57,0:22:19.32,中文,,0,0,0,,但是想法是每次你爬树的时候 你要把你看到的所有项都设置它们的直接父节点为根节点
Dialogue: 0,0:22:19.32,0:22:22.64,英文,,0,0,0,,That is, you flatten the tree every time you climb it.
Dialogue: 0,0:22:19.32,0:22:22.64,中文,,0,0,0,,也就是说 你每次爬树都会把树压扁
Dialogue: 0,0:22:22.64,0:22:30.54,英文,,0,0,0,,And by flattening the tree every time you climb it, you end up getting the asymptotic behavior of the inverse Ackermann function, which we won't even talk about.
Dialogue: 0,0:22:22.64,0:22:30.54,中文,,0,0,0,,通过每次爬树都压扁树 最终你会得到反阿克曼函数的渐进行为 我们甚至都不会讨论
Dialogue: 0,0:22:30.54,0:22:37.69,英文,,0,0,0,,But this function is so slow-growing that for any size, distance, data structure
Dialogue: 0,0:22:30.54,0:22:37.69,中文,,0,0,0,,但是这个函数增长非常缓慢 以至于对于任何大小、距离、数据结构
Dialogue: 0,0:22:37.69,0:22:45.69,英文,,0,0,0,,that you can think of up to this horrific number, the height of the tree, the runtime will always be less than 5, which is good enough for all intents and purposes.
Dialogue: 0,0:22:37.69,0:22:45.69,中文,,0,0,0,,你能想到的直到这个可怕的数字 树的高度 运行时间都将始终小于5 这对于所有目的来说都是足够好的
Dialogue: 0,0:22:45.69,0:22:46.79,英文,,0,0,0,,This is state of the art.
Dialogue: 0,0:22:45.69,0:22:46.79,中文,,0,0,0,,这是最先进的技术
Dialogue: 0,0:22:46.79,0:22:47.51,英文,,0,0,0,,It's beautiful.
Dialogue: 0,0:22:46.79,0:22:47.51,中文,,0,0,0,,真漂亮
Dialogue: 0,0:22:47.51,0:22:48.25,英文,,0,0,0,,We're done.
Dialogue: 0,0:22:47.51,0:22:48.25,中文,,0,0,0,,我们完成了
Dialogue: 0,0:22:48.25,0:22:49.74,英文,,0,0,0,,Questions?
Dialogue: 0,0:22:48.25,0:22:49.74,中文,,0,0,0,,有问题吗
Dialogue: 0,0:22:49.74,0:22:51.18,英文,,0,0,0,,Question.
Dialogue: 0,0:22:49.74,0:22:51.18,中文,,0,0,0,,问题
Dialogue: 0,0:22:51.18,0:23:03.54,英文,,0,0,0,,So in the example that you gave, that the larger number of items get to a height of 5.
Dialogue: 0,0:22:51.18,0:23:03.54,中文,,0,0,0,,在你给出的例子中 更多的项目达到高度为5
Dialogue: 0,0:23:03.54,0:23:09.28,英文,,0,0,0,,The question was, how many times do I have to call isConnected to get to a height of five?
Dialogue: 0,0:23:03.54,0:23:09.28,中文,,0,0,0,,问题是 我必须调用多少次isConnected才能达到高度5
Dialogue: 0,0:23:09.28,0:23:10.36,英文,,0,0,0,,That's a good question.
Dialogue: 0,0:23:09.28,0:23:10.36,中文,,0,0,0,,这是个很好的问题
Dialogue: 0,0:23:10.36,0:23:14.96,英文,,0,0,0,,I think the idea is, do you want to answer this?
Dialogue: 0,0:23:10.36,0:23:14.96,中文,,0,0,0,,我觉得重点是 你想回答这个问题吗
Dialogue: 0,0:23:14.96,0:23:16.34,英文,,0,0,0,,I don't understand inverse acronyms.
Dialogue: 0,0:23:14.96,0:23:16.34,中文,,0,0,0,,我不理解反向首字母缩略词
Dialogue: 0,0:23:16.34,0:23:17.76,英文,,0,0,0,,OK, here, I'll switch it to Justin.
Dialogue: 0,0:23:16.34,0:23:17.76,中文,,0,0,0,,我会把它换成Justin
Dialogue: 0,0:23:17.76,0:23:20.65,英文,,0,0,0,,He can answer the question, and then switch it to the asymptotic structure.
Dialogue: 0,0:23:17.76,0:23:20.65,中文,,0,0,0,,他可以回答这个问题 然后把它换成渐近结构
Dialogue: 0,0:23:20.65,0:23:22.23,英文,,0,0,0,,Yeah.
Dialogue: 0,0:23:20.65,0:23:22.23,中文,,0,0,0,,是的
Dialogue: 0,0:23:22.23,0:23:24.47,英文,,0,0,0,,No, the mic.
Dialogue: 0,0:23:22.23,0:23:24.47,中文,,0,0,0,,不 麦克风
Dialogue: 0,0:23:24.47,0:23:27.71,英文,,0,0,0,,The mic's about to die.
Dialogue: 0,0:23:24.47,0:23:27.71,中文,,0,0,0,,麦克风快没电了
Dialogue: 0,0:23:27.71,0:23:28.88,英文,,0,0,0,,You get batteries.
Dialogue: 0,0:23:27.71,0:23:28.88,中文,,0,0,0,,你去拿电池
Dialogue: 0,0:23:28.88,0:23:29.72,英文,,0,0,0,,That means I get to solve?
Dialogue: 0,0:23:28.88,0:23:29.72,中文,,0,0,0,,这意味着我可以解决了
Dialogue: 0,0:23:29.72,0:23:30.50,英文,,0,0,0,,Wait.
Dialogue: 0,0:23:29.72,0:23:30.50,中文,,0,0,0,,等等
Dialogue: 0,0:23:30.50,0:23:31.18,英文,,0,0,0,,You get batteries.
Dialogue: 0,0:23:30.50,0:23:31.18,中文,,0,0,0,,你去拿电池
Dialogue: 0,0:23:31.18,0:23:31.70,英文,,0,0,0,,I'll head in.
Dialogue: 0,0:23:31.18,0:23:31.70,中文,,0,0,0,,我就先进去了
Dialogue: 0,0:23:31.70,0:23:31.90,英文,,0,0,0,,OK.
Dialogue: 0,0:23:31.90,0:23:32.72,英文,,0,0,0,,You answer the question.
Dialogue: 0,0:23:31.90,0:23:32.72,中文,,0,0,0,,回答问题
Dialogue: 0,0:23:32.72,0:23:33.78,英文,,0,0,0,,I'll get batteries.
Dialogue: 0,0:23:32.72,0:23:33.78,中文,,0,0,0,,我去弄电池
Dialogue: 0,0:23:33.78,0:23:34.02,英文,,0,0,0,,OK.
Dialogue: 0,0:23:34.02,0:23:34.46,英文,,0,0,0,,Teamwork.
Dialogue: 0,0:23:34.02,0:23:34.46,中文,,0,0,0,,团队合作
Dialogue: 0,0:23:34.46,0:23:52.20,英文,,0,0,0,,So the inverse Ackermann runtime.
Dialogue: 0,0:23:34.46,0:23:52.20,中文,,0,0,0,,所以反阿克曼运行时间
Dialogue: 0,0:23:52.20,0:23:59.24,英文,,0,0,0,,However, each time you run one of these calls, you end up reducing the runtime of the next one overall.
Dialogue: 0,0:23:52.20,0:23:59.24,中文,,0,0,0,,但是 每次运行这些调用之一时 总体上都会减少下一个的运行时间
Dialogue: 0,0:23:59.24,0:24:02.71,英文,,0,0,0,,It's also important to note that this inverse Ackermann is actually on average.
Dialogue: 0,0:23:59.24,0:24:02.71,中文,,0,0,0,,还要注意 这个反阿克曼实际上是平均值
Dialogue: 0,0:24:02.71,0:24:15.69,英文,,0,0,0,,So theoretically, with this, you can get a worst-time runtime of log n. But on average, you'll get, at most, inverse Ackermann mn over a sequence of isConnected calls and find calls.
Dialogue: 0,0:24:02.71,0:24:15.69,中文,,0,0,0,,理论上 使用这个 你可以得到log n的最坏运行时间 但是平均而言 在一系列的isConnected调用和find调用中 你最多会得到inverse Ackermann mn
Dialogue: 0,0:24:15.69,0:24:17.95,英文,,0,0,0,,Yeah.
Dialogue: 0,0:24:15.69,0:24:17.95,中文,,0,0,0,,是的
Dialogue: 0,0:24:17.95,0:24:24.69,英文,,0,0,0,,Yeah, and when we say this is slow-growing, this is really, really slow-growing.
Dialogue: 0,0:24:17.95,0:24:24.69,中文,,0,0,0,,是的 当我们说这是缓慢增长的时候 这真的是非常非常缓慢的增长
Dialogue: 0,0:24:24.69,0:24:28.55,英文,,0,0,0,,Inverse Ackermann of 3 is, I think, 61.
Dialogue: 0,0:24:24.69,0:24:28.55,中文,,0,0,0,,3的逆Ackermann数是 我想是61
Dialogue: 0,0:24:28.55,0:24:33.11,英文,,0,0,0,,Inverse Ackermann of 4 is more than a Google Plex Plex.
Dialogue: 0,0:24:28.55,0:24:33.11,中文,,0,0,0,,4的逆Ackermann数超过了一个Google Plex Plex
Dialogue: 0,0:24:33.11,0:24:38.33,英文,,0,0,0,,And then inverse Ackermann of 5 is a Google Plex, Plex, Plex, Plex, Plex, Plex, Plex,
Dialogue: 0,0:24:33.11,0:24:38.33,中文,,0,0,0,,然后5的逆Ackermann数是一个Google Plex Plex Plex Plex Plex Plex Plex
Dialogue: 0,0:24:38.33,0:24:44.33,英文,,0,0,0,,repeated a Google Plex, Plex, Plex, Plex, Plex, Plex, repeated a Google Plex, Plex, Plex, Plex, Plex, Plex times.
Dialogue: 0,0:24:38.33,0:24:44.33,中文,,0,0,0,,重复一个Google Plex Plex Plex Plex Plex Plex 重复一个Google Plex Plex Plex Plex Plex次数
Dialogue: 0,0:24:44.33,0:24:48.97,英文,,0,0,0,,The number of times you do that is on the order of a Google Plex Plex times.
Dialogue: 0,0:24:44.33,0:24:48.97,中文,,0,0,0,,你这样做的次数大约是一个Google Plex Plex次
Dialogue: 0,0:24:48.97,0:24:52.55,英文,,0,0,0,,So it is extremely massive.
Dialogue: 0,0:24:48.97,0:24:52.55,中文,,0,0,0,,它是非常大的
Dialogue: 0,0:24:52.55,0:24:55.37,英文,,0,0,0,,All right.
Dialogue: 0,0:24:55.37,0:24:59.02,英文,,0,0,0,,Anyway, great.
Dialogue: 0,0:24:55.37,0:24:59.02,中文,,0,0,0,,总之 很棒
Dialogue: 0,0:24:59.02,0:25:00.98,英文,,0,0,0,,I guess that's it for lecture 14?
Dialogue: 0,0:24:59.02,0:25:00.98,中文,,0,0,0,,我猜这就是第14讲的内容
Dialogue: 0,0:25:00.98,0:25:02.74,英文,,0,0,0,,Yes, sir.
Dialogue: 0,0:25:00.98,0:25:02.74,中文,,0,0,0,,是的 先生
Dialogue: 0,0:25:02.74,0:25:04.86,英文,,0,0,0,,All right.
Dialogue: 0,0:25:04.86,0:25:06.74,英文,,0,0,0,,Let me switch over to lecture 15.
Dialogue: 0,0:25:04.86,0:25:06.74,中文,,0,0,0,,让我转到第15讲
Dialogue: 0,0:25:06.74,0:25:08.30,英文,,0,0,0,,We've used up 25 minutes.
Dialogue: 0,0:25:06.74,0:25:08.30,中文,,0,0,0,,我们已经用了25分钟
Dialogue: 0,0:25:08.30,0:25:12.56,英文,,0,0,0,,You said this is 15.
Dialogue: 0,0:25:08.30,0:25:12.56,中文,,0,0,0,,你说这是15分钟
Dialogue: 0,0:25:12.56,0:25:13.86,英文,,0,0,0,,All right.
Dialogue: 0,0:25:13.86,0:25:19.17,英文,,0,0,0,,So fortunately, this lecture does have a bit of way to split it up.
Dialogue: 0,0:25:13.86,0:25:19.17,中文,,0,0,0,,幸运的是 这个讲座确实有一些分割的方式
Dialogue: 0,0:25:19.17,0:25:28.03,英文,,0,0,0,,Kind of the way that this lecture will go is that we'll go over a few examples of how you might compute some asymptotics, some various runtimes.
Dialogue: 0,0:25:19.17,0:25:28.03,中文,,0,0,0,,这个讲座的大致方式是我们会举几个例子来说明你可能如何计算一些渐近性能 一些不同的运行时间
Dialogue: 0,0:25:28.03,0:25:33.96,英文,,0,0,0,,So before I get that, here's kind of like some basic definitions of these theta classes.
Dialogue: 0,0:25:28.03,0:25:33.96,中文,,0,0,0,,在我开始之前 这里有一些关于这些θ类的基本定义
Dialogue: 0,0:25:33.96,0:25:35.20,英文,,0,0,0,,They aren't formal definitions.
Dialogue: 0,0:25:33.96,0:25:35.20,中文,,0,0,0,,它们不是正式的定义
Dialogue: 0,0:25:35.20,0:25:38.74,英文,,0,0,0,,They're kind of just senses of what happened.
Dialogue: 0,0:25:35.20,0:25:38.74,中文,,0,0,0,,它们只是发生了什么的感觉
Dialogue: 0,0:25:38.74,0:25:43.92,英文,,0,0,0,,So theta 1, if you increase the size of your input, it doesn't affect your runtime.
Dialogue: 0,0:25:38.74,0:25:43.92,中文,,0,0,0,,所以Θ(1) 如果增加输入的大小 不会影响运行时间
Dialogue: 0,0:25:43.92,0:25:48.85,英文,,0,0,0,,Theta 1 just means that no matter how big your input gets, it's the same size.
Dialogue: 0,0:25:43.92,0:25:48.85,中文,,0,0,0,,Θ(1)只是意味着无论输入有多大 它的大小都是相同的
Dialogue: 0,0:25:48.85,0:25:55.05,英文,,0,0,0,,Theta log n, every time you double the value of n, you generally add 1 to the runtime.
Dialogue: 0,0:25:48.85,0:25:55.05,中文,,0,0,0,,Θ(log n) 每当将n的值加倍时 通常会将运行时间增加1
Dialogue: 0,0:25:55.05,0:25:58.63,英文,,0,0,0,,If you add 1 to n, then it really doesn't affect the runtime too much.
Dialogue: 0,0:25:55.05,0:25:58.63,中文,,0,0,0,,如果将n加1 那么实际上不会对运行时间产生太大影响
Dialogue: 0,0:25:58.63,0:26:01.37,英文,,0,0,0,,Now, I say here that this is base-independent.
Dialogue: 0,0:25:58.63,0:26:01.37,中文,,0,0,0,,现在 我在这里说这是基础独立的
Dialogue: 0,0:26:01.37,0:26:09.15,英文,,0,0,0,,That actually is because, regardless of what base you use, whether it's a base-2 logarithm, or a base-10 logarithm, or a base-e logarithm,
Dialogue: 0,0:26:01.37,0:26:09.15,中文,,0,0,0,,这实际上是因为 无论你使用什么基数 无论是基数-2对数 还是基数-10对数 还是基数-e对数
Dialogue: 0,0:26:09.15,0:26:11.36,英文,,0,0,0,,They're all differing by constant factor.
Dialogue: 0,0:26:09.15,0:26:11.36,中文,,0,0,0,,它们都以一个常数因子相差
Dialogue: 0,0:26:11.36,0:26:20.20,英文,,0,0,0,,If you know your log rules, log base 2 of n is the same as log n divided by log 2, and log 2 is just a constant.
Dialogue: 0,0:26:11.36,0:26:20.20,中文,,0,0,0,,如果你知道对数规则 log以2为底的n等同于log n除以log 2 而log 2只是一个常数
Dialogue: 0,0:26:20.20,0:26:25.40,英文,,0,0,0,,So regardless of what base you have, it's basically the same logarithm class.
Dialogue: 0,0:26:20.20,0:26:25.40,中文,,0,0,0,,不管你有什么底数 基本上都是相同的对数类别
Dialogue: 0,0:26:25.40,0:26:28.18,英文,,0,0,0,,We just kind of treat it as the same class as a result.
Dialogue: 0,0:26:25.40,0:26:28.18,中文,,0,0,0,,我们只是把它当作相同的类别来处理
Dialogue: 0,0:26:28.18,0:26:30.24,英文,,0,0,0,,We don't say the base.
Dialogue: 0,0:26:28.18,0:26:30.24,中文,,0,0,0,,我们不说底数
Dialogue: 0,0:26:30.24,0:26:33.08,英文,,0,0,0,,Theta n, if you double the size of n, you double the runtime.
Dialogue: 0,0:26:30.24,0:26:33.08,中文,,0,0,0,,Θ(n) 如果你将n的大小翻倍 你就会将运行时间翻倍
Dialogue: 0,0:26:33.08,0:26:36.34,英文,,0,0,0,,You add 1 to n, you add 1 to the runtime.
Dialogue: 0,0:26:33.08,0:26:36.34,中文,,0,0,0,,你将n加1 你就会将运行时间加1
Dialogue: 0,0:26:36.34,0:26:40.28,英文,,0,0,0,,Theta of n squared means if you double n, then you quadruple the runtime.
Dialogue: 0,0:26:36.34,0:26:40.28,中文,,0,0,0,,Θ的n平方意味着如果你把n翻倍 那么运行时间会变为4倍
Dialogue: 0,0:26:40.28,0:26:44.32,英文,,0,0,0,,If you add 1 to n, then you're adding about n to the runtime.
Dialogue: 0,0:26:40.28,0:26:44.32,中文,,0,0,0,,如果你给n加1 那么你就要在运行时间上加上n左右
Dialogue: 0,0:26:44.32,0:26:51.00,英文,,0,0,0,,If you have theta 2 to the n, then that indicates that doubling n will square the runtime, whereas adding 1 will approximately double the runtime.
Dialogue: 0,0:26:44.32,0:26:51.00,中文,,0,0,0,,如果你有Θ 2^n次方 那就表示翻倍n会使运行时间变为平方 而加1将近翻倍运行时间
Dialogue: 0,0:26:51.00,0:26:53.30,英文,,0,0,0,,This is actually dependent on the base.
Dialogue: 0,0:26:51.00,0:26:53.30,中文,,0,0,0,,这实际上取决于底数
Dialogue: 0,0:26:53.30,0:27:03.59,英文,,0,0,0,,Theta 2 to the n is a different complexity class than theta 3 to the n, which is a different class than theta 1.618 to the n, which is a different class from every other base.
Dialogue: 0,0:26:53.30,0:27:03.59,中文,,0,0,0,,Θ(2^n)与Θ(3^n)不同 Θ(1.618^n)也是不同的复杂度类 与其他任何底数都不同
Dialogue: 0,0:27:03.59,0:27:07.97,英文,,0,0,0,,Any questions before we move?
Dialogue: 0,0:27:03.59,0:27:07.97,中文,,0,0,0,,在我们继续之前有任何问题吗
Dialogue: 0,0:27:07.97,0:27:10.71,英文,,0,0,0,,on.
Dialogue: 0,0:27:10.71,0:27:12.45,英文,,0,0,0,,All right.
Dialogue: 0,0:27:12.45,0:27:16.84,英文,,0,0,0,,So let's kind of take a closer look at this example that we had.
Dialogue: 0,0:27:12.45,0:27:16.84,中文,,0,0,0,,那我们来仔细看看这个例子
Dialogue: 0,0:27:16.84,0:27:18.44,英文,,0,0,0,,I think this was Wednesday, was it?
Dialogue: 0,0:27:16.84,0:27:18.44,中文,,0,0,0,,我觉得这是星期三 对吗
Dialogue: 0,0:27:18.44,0:27:22.52,英文,,0,0,0,,I think it was Wednesday.
Dialogue: 0,0:27:18.44,0:27:22.52,中文,,0,0,0,,我觉得是星期三
Dialogue: 0,0:27:22.52,0:27:24.08,英文,,0,0,0,,You don't have notions of dates anymore.
Dialogue: 0,0:27:22.52,0:27:24.08,中文,,0,0,0,,你不再有日期的概念了
Dialogue: 0,0:27:24.08,0:27:25.50,英文,,0,0,0,,All right, let's say it's Wednesday.
Dialogue: 0,0:27:24.08,0:27:25.50,中文,,0,0,0,,我们假设是星期三
Dialogue: 0,0:27:25.50,0:27:30.62,英文,,0,0,0,,Anyway, so we tried computing exactly how much runtime this takes.
Dialogue: 0,0:27:25.50,0:27:30.62,中文,,0,0,0,,总之 我们尝试计算一下这需要多长时间运行
Dialogue: 0,0:27:30.62,0:27:34.21,英文,,0,0,0,,And the way we kind of did this was we first simplified this out.
Dialogue: 0,0:27:30.62,0:27:34.21,中文,,0,0,0,,我们做这件事的方式是 首先我们简化了这个
Dialogue: 0,0:27:34.21,0:27:41.73,英文,,0,0,0,,We kind of removed this internal thing here with a number 1, because that's doing just some constant amount of work.
Dialogue: 0,0:27:34.21,0:27:41.73,中文,,0,0,0,,我们把这里的一个内部东西去掉了 用一个数字1 因为那只是在做一些固定数量的工作
Dialogue: 0,0:27:41.73,0:27:45.51,英文,,0,0,0,,And then we kind of added up how many times we did this.
Dialogue: 0,0:27:41.73,0:27:45.51,中文,,0,0,0,,然后我们统计了我们做这件事的次数
Dialogue: 0,0:27:45.51,0:27:51.31,英文,,0,0,0,,For each of these i values, In each of these j values, some of these correspond to one unit of work.
Dialogue: 0,0:27:45.51,0:27:51.31,中文,,0,0,0,,对于每个i值  在这些j值中的每一个 一些对应于一单位的工作
Dialogue: 0,0:27:51.31,0:28:02.18,英文,,0,0,0,,And if we draw these out in this table, then we get this triangle whose width is n and whose height is n.
Dialogue: 0,0:27:51.31,0:28:02.18,中文,,0,0,0,,如果我们在这个表中画出它们 我们就会得到一个三角形 它的宽度是n 高度是n
Dialogue: 0,0:28:02.18,0:28:11.18,英文,,0,0,0,,And if you remember your area rules, width times height divided by 2, so that's the area of this triangle.
Dialogue: 0,0:28:02.18,0:28:11.18,中文,,0,0,0,,如果你记得你的面积规则 宽乘以高除以2 所以这就是这个三角形的面积
Dialogue: 0,0:28:11.18,0:28:16.14,英文,,0,0,0,,So the area is total n squared.
Dialogue: 0,0:28:11.18,0:28:16.14,中文,,0,0,0,,面积是总的n平方
Dialogue: 0,0:28:16.14,0:28:21.29,英文,,0,0,0,,So let me give you a slightly different problem here.
Dialogue: 0,0:28:16.14,0:28:21.29,中文,,0,0,0,,那么让我给你提供一个稍微不同的问题
Dialogue: 0,0:28:21.29,0:28:24.07,英文,,0,0,0,,What would be the runtime for this problem?
Dialogue: 0,0:28:21.29,0:28:24.07,中文,,0,0,0,,对于这个问题 运行时间会是多少
Dialogue: 0,0:28:24.07,0:28:33.94,英文,,0,0,0,,So now, instead of going through this loop where it's going from 1, 2, 3, 4 for i, we now double the size of i at every stage.
Dialogue: 0,0:28:24.07,0:28:33.94,中文,,0,0,0,,现在 我们不再像之前那样遍历循环 其中 i 从 1、2、3、4 递增 而是每个阶段将 i 的大小加倍
Dialogue: 0,0:28:33.94,0:28:44.52,英文,,0,0,0,,And the j values, we're going to increment by 1 up to i. So how much runtime does this program have?
Dialogue: 0,0:28:33.94,0:28:44.52,中文,,0,0,0,,而 j 的值 我们将递增 1 直到 i 那么这个程序的运行时间是多少
Dialogue: 0,0:28:44.52,0:28:46.02,英文,,0,0,0,,Normally, I'd give like five minutes.
Dialogue: 0,0:28:44.52,0:28:46.02,中文,,0,0,0,,通常 我会给五分钟
Dialogue: 0,0:28:46.02,0:28:49.10,英文,,0,0,0,,Let's give, oh, I'm already in Zoom here too.
Dialogue: 0,0:28:46.02,0:28:49.10,中文,,0,0,0,,我们再给 哦 我已经在 Zoom 里了
Dialogue: 0,0:28:49.10,0:28:50.92,英文,,0,0,0,,I should not be on Zoom here.
Dialogue: 0,0:28:49.10,0:28:50.92,中文,,0,0,0,,我不应该在这里用 Zoom
Dialogue: 0,0:28:50.92,0:29:07.68,英文,,0,0,0,,Let's give until 1.40 for this.
Dialogue: 0,0:28:50.92,0:29:07.68,中文,,0,0,0,,我们给到1.40
Dialogue: 0,0:29:07.68,0:29:15.10,英文,,0,0,0,,I can monitor.
Dialogue: 0,0:29:07.68,0:29:15.10,中文,,0,0,0,,我可以监控
Dialogue: 0,0:29:15.10,0:30:25.44,英文,,0,0,0,,All right.
Dialogue: 0,0:30:25.44,0:30:32.07,英文,,0,0,0,,All right, so it seems like it was about half people said n, half of the people said nlogin.
Dialogue: 0,0:30:25.44,0:30:32.07,中文,,0,0,0,,看起来大约一半的人说了N 一半的人说了N log N
Dialogue: 0,0:30:32.07,0:30:35.52,英文,,0,0,0,,Does anyone want to explain their answer?
Dialogue: 0,0:30:32.07,0:30:35.52,中文,,0,0,0,,有人想解释一下他们的答案吗
Dialogue: 0,0:30:35.52,0:30:45.09,英文,,0,0,0,,Yeah.
Dialogue: 0,0:30:35.52,0:30:45.09,中文,,0,0,0,,是的
Dialogue: 0,0:30:45.09,0:30:52.79,英文,,0,0,0,,All right, so one way we can think about it is that we're doing n computations inside the inner loop, and we have log n total iterations.
Dialogue: 0,0:30:45.09,0:30:52.79,中文,,0,0,0,,我们可以这样想 我们在内部循环中进行了N次计算 总共有log N次迭代
Dialogue: 0,0:30:52.79,0:31:00.76,英文,,0,0,0,,That would lead to n log n. I will say that it isn't necessarily that, because we're not doing n things in the middle.
Dialogue: 0,0:30:52.79,0:31:00.76,中文,,0,0,0,,那会导致 N log N 我会说 这不一定是这样的 因为我们在中间并不是做 N 个事情
Dialogue: 0,0:31:00.76,0:31:04.44,英文,,0,0,0,,If you look carefully, we're actually doing i things inside.
Dialogue: 0,0:31:00.76,0:31:04.44,中文,,0,0,0,,如果你仔细看 其实我们在里面做的是 i 个事情
Dialogue: 0,0:31:04.44,0:31:11.86,英文,,0,0,0,,And i is not always going to be equal to n. i is at most n, but it's going to be less than n for most of these iterations.
Dialogue: 0,0:31:04.44,0:31:11.86,中文,,0,0,0,,而且 i 不总是等于 N i 最多是 N 但在大多数迭代中它会小于 N
Dialogue: 0,0:31:11.86,0:31:17.31,英文,,0,0,0,,So it might not necessarily be n log n. I will say that it does provide an upper bound.
Dialogue: 0,0:31:11.86,0:31:17.31,中文,,0,0,0,,这可能并不一定是 N log N 我会说它提供了一个上界
Dialogue: 0,0:31:17.31,0:31:27.05,英文,,0,0,0,,So we can say that it is O of n log n, not necessarily theta n log n. Did anyone say n?
Dialogue: 0,0:31:17.31,0:31:27.05,中文,,0,0,0,,我们可以说这是 O(N log N) 不一定是 Θ(N log N) 有人说 N 了吗
Dialogue: 0,0:31:27.05,0:31:30.02,英文,,0,0,0,,Why?
Dialogue: 0,0:31:27.05,0:31:30.02,中文,,0,0,0,,为什么
Dialogue: 0,0:31:30.02,0:31:37.33,英文,,0,0,0,,Anyone want to share why this?
Dialogue: 0,0:31:30.02,0:31:37.33,中文,,0,0,0,,有人想分享为什么吗
Dialogue: 0,0:31:37.33,0:31:46.65,英文,,0,0,0,,Yeah.
Dialogue: 0,0:31:46.65,0:31:47.45,英文,,0,0,0,,Yeah.
Dialogue: 0,0:31:46.65,0:31:47.45,中文,,0,0,0,,嗯
Dialogue: 0,0:31:47.45,0:31:50.65,英文,,0,0,0,,So this is actually kind of how we do it.
Dialogue: 0,0:31:47.45,0:31:50.65,中文,,0,0,0,,这实际上是我们执行的方式
Dialogue: 0,0:31:50.65,0:31:53.95,英文,,0,0,0,,So let's take a look at how this works, right?
Dialogue: 0,0:31:50.65,0:31:53.95,中文,,0,0,0,,让我们看看这是如何工作的 对吧
Dialogue: 0,0:31:53.95,0:31:58.40,英文,,0,0,0,,So when we say this is one unit of work, we're just simplifying this out.
Dialogue: 0,0:31:53.95,0:31:58.40,中文,,0,0,0,,当我们说这是一个工作单元时 我们只是将其简化了一下
Dialogue: 0,0:31:58.40,0:32:05.00,英文,,0,0,0,,And as it turns out, we can even simplify this further and say that this is i units of work for this inner loop.
Dialogue: 0,0:31:58.40,0:32:05.00,中文,,0,0,0,,事实证明 我们甚至可以进一步简化 说这是内部循环的 i 个工作单元
Dialogue: 0,0:32:05.00,0:32:15.15,英文,,0,0,0,,And as we mentioned earlier, i isn't going to always be n. If it was always n, then it would be n log n. But you did say that it's going to be 1, 2, 4, 8, 16.
Dialogue: 0,0:32:05.00,0:32:15.15,中文,,0,0,0,,正如我们之前提到的 i并不总是等于N 如果它总是N的话 那么它将是N log N 但是你说它会是1、2、4、8、16
Dialogue: 0,0:32:15.15,0:32:16.99,英文,,0,0,0,,So let's see how this runs.
Dialogue: 0,0:32:15.15,0:32:16.99,中文,,0,0,0,,让我们看看这是如何运行的
Dialogue: 0,0:32:16.99,0:32:23.70,英文,,0,0,0,,When n is equal to 1, we're going to go through this one unit of work.
Dialogue: 0,0:32:16.99,0:32:23.70,中文,,0,0,0,,当 N = 1 时 我们将执行一单位的工作
Dialogue: 0,0:32:23.70,0:32:29.24,英文,,0,0,0,,When i is equal to 2, then we'll go through two units of work for the second iteration.
Dialogue: 0,0:32:23.70,0:32:29.24,中文,,0,0,0,,当 i = 2 时 然后我们将进行第二次迭代的两个工作单元
Dialogue: 0,0:32:29.24,0:32:38.17,英文,,0,0,0,,For n equals 3, it doesn't actually do anything different, because the difference between n equals 2 and n equals 3, the inner loop doesn't actually run multiple times.
Dialogue: 0,0:32:29.24,0:32:38.17,中文,,0,0,0,,对于 N = 3 实际上并没有做任何不同的事情 因为 N = 2 和 N = 3 之间的区别 内部循环实际上并不运行多次
Dialogue: 0,0:32:38.17,0:32:42.71,英文,,0,0,0,,So we need to get to i equals 4 before we actually hit the next block.
Dialogue: 0,0:32:38.17,0:32:42.71,中文,,0,0,0,,我们需要在实际到达下一个块之前 得到 i = 4
Dialogue: 0,0:32:42.71,0:32:47.75,英文,,0,0,0,,Here we get 4 units of work at the i equals 4 step.
Dialogue: 0,0:32:42.71,0:32:47.75,中文,,0,0,0,,在这里 在 i = 4 的步骤中 我们得到了 4 个工作单位
Dialogue: 0,0:32:47.75,0:32:56.22,英文,,0,0,0,,We don't do anything else for 5, 6, or 7, because n is small enough that it doesn't affect anything.
Dialogue: 0,0:32:47.75,0:32:56.22,中文,,0,0,0,,对于 5、6 或 7 我们不做任何其他事情 因为 N 很小 这不会影响任何事情
Dialogue: 0,0:32:56.22,0:33:03.96,英文,,0,0,0,,Once we hit 8, we run the i equals 8 loop, which does 8 units of work, and so on and so forth.
Dialogue: 0,0:32:56.22,0:33:03.96,中文,,0,0,0,,一旦我们达到8 我们运行 i =8的循环 这将执行8个单位的工作 依此类推
Dialogue: 0,0:33:03.96,0:33:12.01,英文,,0,0,0,,So if we run this, then we have 1 plus 2 plus 4 up to n, where n is a power of 2.
Dialogue: 0,0:33:03.96,0:33:12.01,中文,,0,0,0,,如果我们运行这个 那么我们有1加2加4一直到N 其中N是2的幂
Dialogue: 0,0:33:12.01,0:33:22.83,英文,,0,0,0,,So if we tried to graph this, then we're going to get this kind of diagram, which, I don't know, it doesn't look particularly like something.
Dialogue: 0,0:33:12.01,0:33:22.83,中文,,0,0,0,,如果我们试图绘制这个图 我们将得到这种类型的图表 我不知道 它看起来不特别像什么
Dialogue: 0,0:33:22.83,0:33:26.14,英文,,0,0,0,,It doesn't look fairly nice.
Dialogue: 0,0:33:22.83,0:33:26.14,中文,,0,0,0,,看起来不太好看
Dialogue: 0,0:33:26.14,0:33:31.12,英文,,0,0,0,,I'm not entirely sure what's going on here, so let's kind of take a look.
Dialogue: 0,0:33:26.14,0:33:31.12,中文,,0,0,0,,我不太确定这里发生了什么 所以让我们仔细看一下
Dialogue: 0,0:33:31.12,0:33:41.32,英文,,0,0,0,,If we kept going up to these large numbers, then we'll see that it largely increases by these amounts.
Dialogue: 0,0:33:31.12,0:33:41.32,中文,,0,0,0,,如果我们一直增加到这些大数字 那么我们将看到它大致以这些数量增加
Dialogue: 0,0:33:41.32,0:33:42.86,英文,,0,0,0,,So 4, you get 7.
Dialogue: 0,0:33:41.32,0:33:42.86,中文,,0,0,0,,所以4 你得到7
Dialogue: 0,0:33:42.86,0:33:43.74,英文,,0,0,0,,7, you get 7.
Dialogue: 0,0:33:42.86,0:33:43.74,中文,,0,0,0,,7 得到7
Dialogue: 0,0:33:43.74,0:33:44.92,英文,,0,0,0,,8, you get 15.
Dialogue: 0,0:33:43.74,0:33:44.92,中文,,0,0,0,,8 得到15
Dialogue: 0,0:33:44.92,0:33:45.22,英文,,0,0,0,,27, 31.
Dialogue: 0,0:33:44.92,0:33:45.22,中文,,0,0,0,,27 31
Dialogue: 0,0:33:45.22,0:33:47.91,英文,,0,0,0,,715, you get around 1,023.
Dialogue: 0,0:33:45.22,0:33:47.91,中文,,0,0,0,,715 你得到大约1,023
Dialogue: 0,0:33:47.91,0:34:00.47,英文,,0,0,0,,And if you're trying to look around, play around with some functions, eventually you realize that it always ends up staying between 0.5n and 2 times n.
Dialogue: 0,0:33:47.91,0:34:00.47,中文,,0,0,0,,而且如果你试着四处看看 玩弄一些函数 最终你会意识到它总是停留在0.5N和2N之间
Dialogue: 0,0:34:00.47,0:34:02.09,英文,,0,0,0,,like here's the value of 0.5n, 357.
Dialogue: 0,0:34:00.47,0:34:02.09,中文,,0,0,0,,就像这里的值是0.5N 357
Dialogue: 0,0:34:02.09,0:34:05.11,英文,,0,0,0,,Here's the value of 2n, 1,430.
Dialogue: 0,0:34:02.09,0:34:05.11,中文,,0,0,0,,这里的值是2N 1,430
Dialogue: 0,0:34:05.11,0:34:08.57,英文,,0,0,0,,You always end up staying between these.
Dialogue: 0,0:34:05.11,0:34:08.57,中文,,0,0,0,,你总是最终停留在这些之间
Dialogue: 0,0:34:08.57,0:34:15.30,英文,,0,0,0,,So if this pattern holds true for every single other value of n, then that means that we do have a theta bound.
Dialogue: 0,0:34:08.57,0:34:15.30,中文,,0,0,0,,如果对于每个其他值的 N 这种模式都成立 那么这意味着我们确实有一个Θ(N)的界限
Dialogue: 0,0:34:15.30,0:34:30.01,英文,,0,0,0,,We have a theta of n bound, because we're bounding between 0.5 times n and 2 times n.
Dialogue: 0,0:34:15.30,0:34:30.01,中文,,0,0,0,,我们有一个Θ(N)的界限 因为我们在0.5倍 N 和 2 倍 N 之间界定
Dialogue: 0,0:34:30.01,0:34:32.89,英文,,0,0,0,,This would be nice if this was always true.
Dialogue: 0,0:34:30.01,0:34:32.89,中文,,0,0,0,,如果这总是成立就太好了
Dialogue: 0,0:34:32.89,0:34:39.96,英文,,0,0,0,,But I don't exactly... Are you convinced that it's always going to stay within this area?
Dialogue: 0,0:34:32.89,0:34:39.96,中文,,0,0,0,,但我不太确定... 你确信它会始终保持在这个范围内吗
Dialogue: 0,0:34:39.96,0:34:44.18,英文,,0,0,0,,Why not?
Dialogue: 0,0:34:39.96,0:34:44.18,中文,,0,0,0,,为什么不
Dialogue: 0,0:34:44.18,0:34:45.36,英文,,0,0,0,,Well, I don't know.
Dialogue: 0,0:34:44.18,0:34:45.36,中文,,0,0,0,,我不知道
Dialogue: 0,0:34:45.36,0:34:48.06,英文,,0,0,0,,What if this function just keeps going in a weird pattern?
Dialogue: 0,0:34:45.36,0:34:48.06,中文,,0,0,0,,如果这个函数一直以奇怪的模式继续下去会怎么样
Dialogue: 0,0:34:48.06,0:34:49.74,英文,,0,0,0,,I don't know.
Dialogue: 0,0:34:48.06,0:34:49.74,中文,,0,0,0,,我不知道
Dialogue: 0,0:34:49.74,0:34:54.51,英文,,0,0,0,,I'm looking at this, looks kind of like it's staying within, but I'm not sure.
Dialogue: 0,0:34:49.74,0:34:54.51,中文,,0,0,0,,我正在看这个 看起来有点像它在内部保持 但我不确定
Dialogue: 0,0:34:54.51,0:34:57.63,英文,,0,0,0,,If it goes really large, then eventually it might go off.
Dialogue: 0,0:34:54.51,0:34:57.63,中文,,0,0,0,,如果它变得非常大 最终可能会偏离
Dialogue: 0,0:34:57.63,0:35:00.99,英文,,0,0,0,,So let's actually prove this exactly.
Dialogue: 0,0:34:57.63,0:35:00.99,中文,,0,0,0,,让我们确切地证明这一点
Dialogue: 0,0:35:00.99,0:35:06.07,英文,,0,0,0,,So here's the list of boxes from 1, 2, 3, 4, 8, 16.
Dialogue: 0,0:35:00.99,0:35:06.07,中文,,0,0,0,,这是从1、2、3、4、8、16的盒子列表
Dialogue: 0,0:35:06.07,0:35:12.00,英文,,0,0,0,,And I'm just going to move around these boxes a bit to see if I can make the math a bit easier.
Dialogue: 0,0:35:06.07,0:35:12.00,中文,,0,0,0,,我只是稍微移动一下这些盒子 看看能否让数学变得更容易一些
Dialogue: 0,0:35:12.00,0:35:15.92,英文,,0,0,0,,So I'm going to move this one box down to here so that it kind of fills this spot.
Dialogue: 0,0:35:12.00,0:35:15.92,中文,,0,0,0,,我要把这个盒子移下来填补这个位置
Dialogue: 0,0:35:15.92,0:35:18.77,英文,,0,0,0,,I'm going to move this two box down here so that it fills this.
Dialogue: 0,0:35:15.92,0:35:18.77,中文,,0,0,0,,我打算把这两个盒子移到这里 以填满它
Dialogue: 0,0:35:18.77,0:35:21.41,英文,,0,0,0,,And I'm going to actually move this over like this.
Dialogue: 0,0:35:18.77,0:35:21.41,中文,,0,0,0,,我实际上要这样移动它
Dialogue: 0,0:35:21.41,0:35:30.77,英文,,0,0,0,,And one thing we'll notice is that at each of these steps, this total box size is less than the size of this bottom box.
Dialogue: 0,0:35:21.41,0:35:30.77,中文,,0,0,0,,我们会注意到 在每个这样的步骤中 总盒子的大小都小于底部盒子的大小
Dialogue: 0,0:35:30.77,0:35:33.51,英文,,0,0,0,,So 1 plus 2 plus 4, it's less than the 8.
Dialogue: 0,0:35:30.77,0:35:33.51,中文,,0,0,0,,所以1加2加4 小于8
Dialogue: 0,0:35:33.51,0:35:37.27,英文,,0,0,0,,1 plus 2 plus 4 plus 8, it's less than the 16.
Dialogue: 0,0:35:33.51,0:35:37.27,中文,,0,0,0,,1加2加4加8 小于16
Dialogue: 0,0:35:37.27,0:35:40.18,英文,,0,0,0,,In fact, it's always exactly one less.
Dialogue: 0,0:35:37.27,0:35:40.18,中文,,0,0,0,,事实上 它总是恰好少一个
Dialogue: 0,0:35:40.18,0:35:49.31,英文,,0,0,0,,So if we do 1 plus 2 plus 4 up to plus n, then that actually means that our sum is going to be 2n minus 1.
Dialogue: 0,0:35:40.18,0:35:49.31,中文,,0,0,0,,如果我们把1加2加4一直加到N 那实际上意味着我们的总和将会是2N-1
Dialogue: 0,0:35:49.31,0:36:03.38,英文,,0,0,0,,2n minus 1, if we actually do the m theta bound, that's definitely theta of n. So we can say definitively that this sum, 1 plus 2 plus 4 plus 8 up to plus n, is equal to theta of n.
Dialogue: 0,0:35:49.31,0:36:03.38,中文,,0,0,0,,2N减1 如果我们实际上进行m Θ绑定 那肯定是Θ(N) 我们可以明确地说 这个总和 1加2加4加8一直到N 等于Θ(N)
Dialogue: 0,0:36:03.38,0:36:06.42,英文,,0,0,0,,Now, this is just kind of a version of this equation.
Dialogue: 0,0:36:03.38,0:36:06.42,中文,,0,0,0,,现在 这只是这个方程的一种版本
Dialogue: 0,0:36:06.42,0:36:14.28,英文,,0,0,0,,If you do 1 plus 2 plus 4 plus 2 to the k up to 2 to the k, then that's theta of 2 to the k. So 2 times 2 to the k minus 1.
Dialogue: 0,0:36:06.42,0:36:14.28,中文,,0,0,0,,如果你做1加2加4加2的k次方一直到2的k次方 那么就是θ（2的k次方） 所以2乘以2的k次方减1
Dialogue: 0,0:36:14.28,0:36:20.63,英文,,0,0,0,,We're just kind of replacing 2 to the k with n here.
Dialogue: 0,0:36:14.28,0:36:20.63,中文,,0,0,0,,我们只是在这里用N替换2的k次方
Dialogue: 0,0:36:20.63,0:36:24.57,英文,,0,0,0,,So does anyone have any questions on how we got this?
Dialogue: 0,0:36:20.63,0:36:24.57,中文,,0,0,0,,有人对我们是如何得出这个结论有任何问题吗
Dialogue: 0,0:36:24.57,0:36:27.07,英文,,0,0,0,,I know this is kind of fast.
Dialogue: 0,0:36:24.57,0:36:27.07,中文,,0,0,0,,我知道这有点快
Dialogue: 0,0:36:27.07,0:36:34.74,英文,,0,0,0,,All right.
Dialogue: 0,0:36:34.74,0:36:38.64,英文,,0,0,0,,So everyone say this with me.
Dialogue: 0,0:36:34.74,0:36:38.64,中文,,0,0,0,,那么大家跟我一起说
Dialogue: 0,0:36:38.64,0:36:42.82,英文,,0,0,0,,There is no magic shortcut for asymptotic analysis.
Dialogue: 0,0:36:38.64,0:36:42.82,中文,,0,0,0,,渐近分析没有魔法捷径
Dialogue: 0,0:36:42.82,0:36:46.73,英文,,0,0,0,,No.
Dialogue: 0,0:36:42.82,0:36:46.73,中文,,0,0,0,,不
Dialogue: 0,0:36:46.73,0:36:53.15,英文,,0,0,0,,There is no magic shortcut.
Dialogue: 0,0:36:46.73,0:36:53.15,中文,,0,0,0,,没有魔法捷径
Dialogue: 0,0:36:53.15,0:36:59.69,英文,,0,0,0,,Every semester, we get some students who are asking, is there a general idea of when things are theta of n or theta of n log n?
Dialogue: 0,0:36:53.15,0:36:59.69,中文,,0,0,0,,每个学期 我们都会有一些学生问 什么时候可以知道事情是θ(N)还是θ(N log N)
Dialogue: 0,0:36:59.69,0:37:01.89,英文,,0,0,0,,There is no magic shortcut.
Dialogue: 0,0:36:59.69,0:37:01.89,中文,,0,0,0,,没有魔法捷径
Dialogue: 0,0:37:01.89,0:37:11.79,英文,,0,0,0,,We don't have an easy way of saying whether a function is theta n or theta n log n, except through the direct mathematical analysis.
Dialogue: 0,0:37:01.89,0:37:11.79,中文,,0,0,0,,我们没有简单的方法来判断一个函数是Θ(N)还是Θ(N log N) 除非通过直接的数学分析
Dialogue: 0,0:37:11.79,0:37:13.63,英文,,0,0,0,,It often requires a lot of careful thought.
Dialogue: 0,0:37:11.79,0:37:13.63,中文,,0,0,0,,这通常需要大量仔细的思考
Dialogue: 0,0:37:13.63,0:37:18.57,英文,,0,0,0,,It's actually provable that it's impossible to find the runtime of every single function.
Dialogue: 0,0:37:13.63,0:37:18.57,中文,,0,0,0,,事实上可以证明 找到每个单一函数的运行时间是不可能的
Dialogue: 0,0:37:18.57,0:37:20.09,英文,,0,0,0,,Not even that it's hard.
Dialogue: 0,0:37:18.57,0:37:20.09,中文,,0,0,0,,甚至不是很困难
Dialogue: 0,0:37:20.09,0:37:21.51,英文,,0,0,0,,It's literally impossible.
Dialogue: 0,0:37:20.09,0:37:21.51,中文,,0,0,0,,这是绝对不可能的
Dialogue: 0,0:37:21.51,0:37:24.11,英文,,0,0,0,,There is no program that can do this.
Dialogue: 0,0:37:21.51,0:37:24.11,中文,,0,0,0,,没有一个程序能做到这一点
Dialogue: 0,0:37:24.11,0:37:25.95,英文,,0,0,0,,There's no humans that can do this.
Dialogue: 0,0:37:24.11,0:37:25.95,中文,,0,0,0,,也没有人类可以做到这一点
Dialogue: 0,0:37:25.95,0:37:35.51,英文,,0,0,0,,There are functions whose runtime is independent of ZFC, like the mathematical basis entirely.
Dialogue: 0,0:37:25.95,0:37:35.51,中文,,0,0,0,,有一些功能的运行时间与ZFC无关 就像数学基础完全一样
Dialogue: 0,0:37:35.51,0:37:39.47,英文,,0,0,0,,CS70 and 170 actually covers this in a lot more detail.
Dialogue: 0,0:37:35.51,0:37:39.47,中文,,0,0,0,,CS70和170实际上在这方面有更多的细节
Dialogue: 0,0:37:39.47,0:37:46.62,英文,,0,0,0,,This isn't considered a math class, but we will expect you to know these four equations.
Dialogue: 0,0:37:39.47,0:37:46.62,中文,,0,0,0,,这不被视为数学课 但我们将期望你了解这四个方程式
Dialogue: 0,0:37:46.62,0:37:54.84,英文,,0,0,0,,Namely, if you add up the sequence of natural numbers, 1, 2, 3, 4, 5, 6, 7, up to n, then you get about n squared.
Dialogue: 0,0:37:46.62,0:37:54.84,中文,,0,0,0,,即 如果你将自然数序列相加 1 2 3 4 5 6 7 一直加到N 那么你会得到大约N的平方
Dialogue: 0,0:37:54.84,0:38:01.88,英文,,0,0,0,,As a generalization of that, if you do 1 squared plus 2 squared plus 3 squared plus 4 squared, that adds up to 1 n cubed.
Dialogue: 0,0:37:54.84,0:38:01.88,中文,,0,0,0,,作为那个的一般化 如果你做1的平方加2的平方加3的平方加4的平方 那就是N立方
Dialogue: 0,0:38:01.88,0:38:10.20,英文,,0,0,0,,If you do 1 to the 3 plus 2 to the 3 plus 3 to the 3 all the way up to n to the 3, that adds up to n to the 4th.
Dialogue: 0,0:38:01.88,0:38:10.20,中文,,0,0,0,,如果你做1到3加2到3加3到3一直到N到3 那就是N到4
Dialogue: 0,0:38:10.20,0:38:11.74,英文,,0,0,0,,Similar to that.
Dialogue: 0,0:38:10.20,0:38:11.74,中文,,0,0,0,,与此类似
Dialogue: 0,0:38:11.74,0:38:21.92,英文,,0,0,0,,And then the other one is the exponentiation rules, which is if you do 1, 2, 4, 8, 16, doubling every time, then it's approximately the theta of the last term.
Dialogue: 0,0:38:11.74,0:38:21.92,中文,,0,0,0,,然后另一个是指数规则 就是如果你做1、2、4、8、16 每次都翻倍 那么它大约是最后一项的θ值
Dialogue: 0,0:38:21.92,0:38:23.97,英文,,0,0,0,,And the same is true regardless of what the base is.
Dialogue: 0,0:38:21.92,0:38:23.97,中文,,0,0,0,,而且不管底数是什么 都是一样的
Dialogue: 0,0:38:23.97,0:38:30.56,英文,,0,0,0,,So if it's not doubling, if you're tripling, then it's still the same last term.
Dialogue: 0,0:38:23.97,0:38:30.56,中文,,0,0,0,,如果不是翻倍 如果是三倍 那最后一项仍然是一样的
Dialogue: 0,0:38:30.56,0:38:32.68,英文,,0,0,0,,So we also write it in this format.
Dialogue: 0,0:38:30.56,0:38:32.68,中文,,0,0,0,,我们也是用这个格式来写的
Dialogue: 0,0:38:32.68,0:38:37.14,英文,,0,0,0,,We just write n equals k to the q, because we want to use n as our last term.
Dialogue: 0,0:38:32.68,0:38:37.14,中文,,0,0,0,,我们只是写 N 等于 k 的 q 次方 因为我们想用 N 作为我们的最后一项
Dialogue: 0,0:38:37.14,0:38:46.97,英文,,0,0,0,,In our code here, we had n be this largest possible value of i. So it made sense for this last term to be bounded by n.
Dialogue: 0,0:38:37.14,0:38:46.97,中文,,0,0,0,,在我们的代码中 这里我们让 N 成为 i 的可能的最大值 所以让这个最后一项受 N 的限制是有道理的
Dialogue: 0,0:38:46.97,0:38:55.97,英文,,0,0,0,,That's why we didn't write 2 to the q, where q is equal to log n. That just ends up canceling out, so we just wrote n here.
Dialogue: 0,0:38:46.97,0:38:55.97,中文,,0,0,0,,这就是为什么我们没写成 2 的 q 次方 其中 q = log N 那只会相互抵消 我们在这里写的是 N
Dialogue: 0,0:38:55.97,0:39:05.64,英文,,0,0,0,,Now, in order to actually determine the runtime of a function, we kind of need to play around with it, you know, divide into pieces.
Dialogue: 0,0:38:55.97,0:39:05.64,中文,,0,0,0,,现在 为了真正确定函数的运行时间 我们需要对它进行一些操作 你知道 分成几块
Dialogue: 0,0:39:05.64,0:39:07.18,英文,,0,0,0,,There's generally some strategies.
Dialogue: 0,0:39:05.64,0:39:07.18,中文,,0,0,0,,通常有一些策略
Dialogue: 0,0:39:07.18,0:39:08.56,英文,,0,0,0,,We can find some exact sums.
Dialogue: 0,0:39:07.18,0:39:08.56,中文,,0,0,0,,我们可以找到一些确切的总和
Dialogue: 0,0:39:08.56,0:39:09.98,英文,,0,0,0,,We can write out examples.
Dialogue: 0,0:39:08.56,0:39:09.98,中文,,0,0,0,,我们可以写出例子
Dialogue: 0,0:39:09.98,0:39:11.80,英文,,0,0,0,,We can draw these pictures.
Dialogue: 0,0:39:09.98,0:39:11.80,中文,,0,0,0,,我们可以画这些图片
Dialogue: 0,0:39:11.80,0:39:16.17,英文,,0,0,0,,We had these pictures where I showed you, like, the area.
Dialogue: 0,0:39:11.80,0:39:16.17,中文,,0,0,0,,我们有这些图片 我给你展示过 比如面积
Dialogue: 0,0:39:16.17,0:39:19.62,英文,,0,0,0,,Here's an example from an actual research paper.
Dialogue: 0,0:39:16.17,0:39:19.62,中文,,0,0,0,,这里有一份来自真实研究论文的例子
Dialogue: 0,0:39:19.62,0:39:23.67,英文,,0,0,0,,where what they did was they interpreted the runtime as the volume of this shape.
Dialogue: 0,0:39:19.62,0:39:23.67,中文,,0,0,0,,他们做的是将运行时解释为这种形状的体积
Dialogue: 0,0:39:23.67,0:39:34.83,英文,,0,0,0,,And if you do that, then you end up finding that it's equal to n times n, because that's the cross-sectional area of this, and then times m, because that's how wide this thing is.
Dialogue: 0,0:39:23.67,0:39:34.83,中文,,0,0,0,,如果你这样做 你会发现它等于 N 乘以 N 因为这是它的横截面积 然后再乘以 m 因为这是它的宽度
Dialogue: 0,0:39:34.83,0:39:38.18,英文,,0,0,0,,Now, I did say there's no magic shortcut.
Dialogue: 0,0:39:34.83,0:39:38.18,中文,,0,0,0,,现在 我确实说过没有什么魔法捷径
Dialogue: 0,0:39:38.18,0:39:46.35,英文,,0,0,0,,There is this well usually here, and here is actually kind of this magic shortcut.
Dialogue: 0,0:39:38.18,0:39:46.35,中文,,0,0,0,,通常这里有这个井 这里实际上有一种魔法捷径
Dialogue: 0,0:39:46.35,0:39:58.72,英文,,0,0,0,,So if you have some function f of n, and f of n is continuous and strictly increasing, then you end up getting this area diagram.
Dialogue: 0,0:39:46.35,0:39:58.72,中文,,0,0,0,,如果你有一个关于 N 的函数 f 而且 f 关于 N 是连续且严格增加的 那么你最终会得到这个面积图
Dialogue: 0,0:39:58.72,0:40:05.08,英文,,0,0,0,,Now, for anyone who's taken math 1B, what does that look like?
Dialogue: 0,0:39:58.72,0:40:05.08,中文,,0,0,0,,现在 对于任何上过数学 1B 的人 这看起来像什么
Dialogue: 0,0:40:05.08,0:40:06.32,英文,,0,0,0,,An integral?
Dialogue: 0,0:40:05.08,0:40:06.32,中文,,0,0,0,,一个积分
Dialogue: 0,0:40:06.32,0:40:08.09,英文,,0,0,0,,Yeah.
Dialogue: 0,0:40:06.32,0:40:08.09,中文,,0,0,0,,对的
Dialogue: 0,0:40:08.09,0:40:11.19,英文,,0,0,0,,In fact, it's actually a Riemann sum, not an integral specifically.
Dialogue: 0,0:40:08.09,0:40:11.19,中文,,0,0,0,,实际上 这实际上是一个黎曼和 而不是特定的积分
Dialogue: 0,0:40:11.19,0:40:13.53,英文,,0,0,0,,But an integral is a good approximation for a Riemann sum.
Dialogue: 0,0:40:11.19,0:40:13.53,中文,,0,0,0,,但积分是黎曼和的一个很好的近似
Dialogue: 0,0:40:13.53,0:40:18.05,英文,,0,0,0,,In 1B, you use a Riemann sum to approximate an integral.
Dialogue: 0,0:40:13.53,0:40:18.05,中文,,0,0,0,,在1B中 你使用黎曼和来近似一个积分
Dialogue: 0,0:40:18.05,0:40:23.00,英文,,0,0,0,,In 61B, we use an integral to approximate a Riemann sum.
Dialogue: 0,0:40:18.05,0:40:23.00,中文,,0,0,0,,在61B中 我们使用积分来近似一个黎曼和
Dialogue: 0,0:40:23.00,0:40:28.43,英文,,0,0,0,,So if you know your calculus, that is your shortcut.
Dialogue: 0,0:40:23.00,0:40:28.43,中文,,0,0,0,,如果你懂微积分 那 就是你的捷径
Dialogue: 0,0:40:28.43,0:40:33.48,英文,,0,0,0,,And in fact, this explains why we have these equations in the first place.
Dialogue: 0,0:40:28.43,0:40:33.48,中文,,0,0,0,,实际上 这解释了我们为什么首先有这些方程式
Dialogue: 0,0:40:33.48,0:40:39.12,英文,,0,0,0,,The integral of x to the n, where n is some constant, is x to the n plus 1.
Dialogue: 0,0:40:33.48,0:40:39.12,中文,,0,0,0,,对 x 的 N 次方积分 其中 N 是一些常数 结果是 x 的 N 次方加 1
Dialogue: 0,0:40:39.12,0:40:51.93,英文,,0,0,0,,The integral of e to the x is e to the x. Yes?
Dialogue: 0,0:40:39.12,0:40:51.93,中文,,0,0,0,,e 的 x 次方的积分就是 e 的 x 次方 对吧
Dialogue: 0,0:40:51.93,0:40:57.46,英文,,0,0,0,,Yes, in a way, f of x is just any generic function.
Dialogue: 0,0:40:51.93,0:40:57.46,中文,,0,0,0,,是的 在某种程度上 f(x) 只是任何通用函数
Dialogue: 0,0:40:57.46,0:41:01.74,英文,,0,0,0,,Asymptotic analysis is not directly related to the runtimes of functions.
Dialogue: 0,0:40:57.46,0:41:01.74,中文,,0,0,0,,渐近分析与函数的运行时间没有直接关系
Dialogue: 0,0:41:01.74,0:41:11.34,英文,,0,0,0,,We're just using the runtimes as a way to express a function of how long something is running.
Dialogue: 0,0:41:01.74,0:41:11.34,中文,,0,0,0,,我们只是用运行时间来表达某物运行多久的一种方式
Dialogue: 0,0:41:11.34,0:41:16.05,英文,,0,0,0,,Yeah, so theta bound is specifically a theta bound on the runtime of a function.
Dialogue: 0,0:41:11.34,0:41:16.05,中文,,0,0,0,,是的 所以 Θ 边界具体来说是对函数运行时间的 Θ 边界
Dialogue: 0,0:41:16.05,0:41:19.36,英文,,0,0,0,,And the runtime of a function is a mathematical function.
Dialogue: 0,0:41:16.05,0:41:19.36,中文,,0,0,0,,而函数的运行时间是一个数学函数
Dialogue: 0,0:41:19.36,0:41:27.74,英文,,0,0,0,,We send in an input, and we get out a time, right?
Dialogue: 0,0:41:19.36,0:41:27.74,中文,,0,0,0,,我们输入一个输入 然后得到一个时间 对吧
Dialogue: 0,0:41:27.74,0:41:39.29,英文,,0,0,0,,F, if we wanted to use this equation to evaluate the runtime of a function, then F might be, for example, one component of the runtime.
Dialogue: 0,0:41:27.74,0:41:39.29,中文,,0,0,0,,如果我们想要使用这个方程来评估函数的运行时间 那么F可能是运行时间的一个组成部分
Dialogue: 0,0:41:39.29,0:41:48.10,英文,,0,0,0,,So in the examples that we showed earlier, we split up the runtime into the inner loop of I equals 0, I equals 1, I equals 2, and so on.
Dialogue: 0,0:41:39.29,0:41:48.10,中文,,0,0,0,,在我们之前展示的例子中 我们将运行时间分解为内部循环 比如I=0 I=1 I=2 依此类推
Dialogue: 0,0:41:48.10,0:41:51.47,英文,,0,0,0,,And for each of those, we determined the runtime.
Dialogue: 0,0:41:48.10,0:41:51.47,中文,,0,0,0,,对于每一个例子 我们确定了运行时间
Dialogue: 0,0:41:51.47,0:41:56.29,英文,,0,0,0,,And then for each of those, once we added them all up, we get the total runtime of our function.
Dialogue: 0,0:41:51.47,0:41:56.29,中文,,0,0,0,,然后对于每一个例子 一旦我们把它们全部加起来 我们就得到了函数的总运行时间
Dialogue: 0,0:41:56.29,0:41:58.81,英文,,0,0,0,,So f can be any sequence.
Dialogue: 0,0:41:56.29,0:41:58.81,中文,,0,0,0,,所以f 可以是任何序列
Dialogue: 0,0:41:58.81,0:42:04.77,英文,,0,0,0,,In order for this rule to apply, you need specifically for f to be increasing and continuous.
Dialogue: 0,0:41:58.81,0:42:04.77,中文,,0,0,0,,为了使这个规则适用 你需要确切地让f增加并连续
Dialogue: 0,0:42:04.77,0:42:13.98,英文,,0,0,0,,But those two are fairly, most functions that you find in this computation do end up fulfilling those properties.
Dialogue: 0,0:42:04.77,0:42:13.98,中文,,0,0,0,,不过这两个相当 你在这个计算中找到的大多数功能最终都会满足这些属性
Dialogue: 0,0:42:13.98,0:42:16.04,英文,,0,0,0,,So you get this fairly common.
Dialogue: 0,0:42:13.98,0:42:16.04,中文,,0,0,0,,你得到这个相当普遍
Dialogue: 0,0:42:16.04,0:42:21.27,英文,,0,0,0,,It's just we don't expect you to know 1B stuff, so you don't need to calculate integrals here.
Dialogue: 0,0:42:16.04,0:42:21.27,中文,,0,0,0,,只是我们不指望你知道十亿的东西 你在这里不需要计算积分
Dialogue: 0,0:42:21.27,0:42:26.55,英文,,0,0,0,,Yeah, you do not need to do integrals in this class.
Dialogue: 0,0:42:21.27,0:42:26.55,中文,,0,0,0,,是的 你不需要在这个课程中做积分
Dialogue: 0,0:42:26.55,0:42:32.67,英文,,0,0,0,,So yeah, but even with this shortcut, it tends to be somewhat limited in scope.
Dialogue: 0,0:42:26.55,0:42:32.67,中文,,0,0,0,,即使有这个快捷方式 它在范围上也往往有些有限
Dialogue: 0,0:42:32.67,0:42:37.09,英文,,0,0,0,,You don't have these functions for every single operation.
Dialogue: 0,0:42:32.67,0:42:37.09,中文,,0,0,0,,并非每个单一的操作都有这些功能
Dialogue: 0,0:42:37.09,0:42:41.58,英文,,0,0,0,,And even then, you need this particular summation for this to work.
Dialogue: 0,0:42:37.09,0:42:41.58,中文,,0,0,0,,而且即便如此 你需要这个特定的求和才能使其正常工作
Dialogue: 0,0:42:41.58,0:42:43.38,英文,,0,0,0,,So it tends to be limited.
Dialogue: 0,0:42:41.58,0:42:43.38,中文,,0,0,0,,它往往会有限制
Dialogue: 0,0:42:43.38,0:42:52.81,英文,,0,0,0,,In fact, if we wanted to go to that disjoint set thing and compute y is the state of inverse Ackermann of n, I think that was solved in 2001 or something.
Dialogue: 0,0:42:43.38,0:42:52.81,中文,,0,0,0,,实际上 如果我们想要进入那个不相交集的东西并计算y是N的反Ackermann状态 我认为那是在2001年左右解决的
Dialogue: 0,0:42:52.81,0:42:58.71,英文,,0,0,0,,Like, it was like 30, 40 years after the original algorithm was discovered.
Dialogue: 0,0:42:52.81,0:42:58.71,中文,,0,0,0,,就像 是在原始算法被发现后30、40年左右的时间
Dialogue: 0,0:42:58.71,0:43:01.72,英文,,0,0,0,,So this tends to be really, really hard.
Dialogue: 0,0:42:58.71,0:43:01.72,中文,,0,0,0,,这往往会非常非常困难
Dialogue: 0,0:43:01.72,0:43:07.86,英文,,0,0,0,,Like, modern research fields are based around asymptotic analysis.
Dialogue: 0,0:43:01.72,0:43:07.86,中文,,0,0,0,,就像 现代研究领域都是基于渐近分析的
Dialogue: 0,0:43:07.86,0:43:08.78,英文,,0,0,0,,All right.
Dialogue: 0,0:43:08.78,0:43:11.85,英文,,0,0,0,,Any questions up to here?
Dialogue: 0,0:43:08.78,0:43:11.85,中文,,0,0,0,,到这里有任何问题吗
Dialogue: 0,0:43:11.85,0:43:15.99,英文,,0,0,0,,I think I have time to go through this amortized analysis part.
Dialogue: 0,0:43:11.85,0:43:15.99,中文,,0,0,0,,我觉得我有时间看一下这个摊销分析部分
Dialogue: 0,0:43:15.99,0:43:19.69,英文,,0,0,0,,We'll cover the rest tomorrow, I guess, or Friday.
Dialogue: 0,0:43:15.99,0:43:19.69,中文,,0,0,0,,明天我们会讲完剩下的 我猜 或者是周五
Dialogue: 0,0:43:19.69,0:43:24.96,英文,,0,0,0,,So I'm going to play around with this function that we saw earlier.
Dialogue: 0,0:43:19.69,0:43:24.96,中文,,0,0,0,,我要玩弄一下我们之前看到的这个函数
Dialogue: 0,0:43:24.96,0:43:28.62,英文,,0,0,0,,This is theta of n runtime.
Dialogue: 0,0:43:24.96,0:43:28.62,中文,,0,0,0,,这是Θ(N)的运行时间
Dialogue: 0,0:43:28.62,0:43:39.65,英文,,0,0,0,,And we said this is theta of n because it's 1 plus 2 plus 4 plus 8 up to plus n, and that equals theta of n. So I'm going to play around with this, and let's see what happens.
Dialogue: 0,0:43:28.62,0:43:39.65,中文,,0,0,0,,我们说这是Θ(N) 因为是1加2加4加8一直加到n 这等于Θ(N) 所以我要在这里加上Θ(N)的工作 看看会发生什么
Dialogue: 0,0:43:39.65,0:43:41.99,英文,,0,0,0,,I'm going to add theta of n work here.
Dialogue: 0,0:43:39.65,0:43:41.99,中文,,0,0,0,,我要在这里加上Θ(N)的工作
Dialogue: 0,0:43:41.99,0:43:50.86,英文,,0,0,0,,The total runtime, it's still theta of n. I haven't changed the theta bound just by adding this for loop that does n units of work.
Dialogue: 0,0:43:41.99,0:43:50.86,中文,,0,0,0,,总运行时间仍然是Θ(N) 通过添加这个做n单位工作的for循环 我没有改变Θ的上界 让我们看看会发生什么
Dialogue: 0,0:43:50.86,0:43:51.96,英文,,0,0,0,,All right.
Dialogue: 0,0:43:51.96,0:43:56.06,英文,,0,0,0,,Now, I'm going to combine these four loops.
Dialogue: 0,0:43:51.96,0:43:56.06,中文,,0,0,0,,现在 我要将这四个循环合并起来
Dialogue: 0,0:43:56.06,0:44:01.72,英文,,0,0,0,,This isn't going to change the asymptotic runtime because I haven't really changed what gets done.
Dialogue: 0,0:43:56.06,0:44:01.72,中文,,0,0,0,,这不会改变渐近运行时间 因为我没有真正改变所做的事情
Dialogue: 0,0:44:01.72,0:44:06.20,英文,,0,0,0,,The total amount of work is still the same.
Dialogue: 0,0:44:01.72,0:44:06.20,中文,,0,0,0,,总的工作量仍然是一样的
Dialogue: 0,0:44:06.20,0:44:10.38,英文,,0,0,0,,I'm going to actually put these into separate functions
Dialogue: 0,0:44:06.20,0:44:10.38,中文,,0,0,0,,我要将这些实际上放入单独的函数中
Dialogue: 0,0:44:10.38,0:44:13.70,英文,,0,0,0,,Function calls, they actually just take a constant amount of time.
Dialogue: 0,0:44:10.38,0:44:13.70,中文,,0,0,0,,函数调用 它们实际上只需要常量时间
Dialogue: 0,0:44:13.70,0:44:16.90,英文,,0,0,0,,I can treat this also as one unit of work.
Dialogue: 0,0:44:13.70,0:44:16.90,中文,,0,0,0,,我也可以将这看作是一项工作的单元
Dialogue: 0,0:44:16.90,0:44:21.17,英文,,0,0,0,,So this hasn't changed any of these runtimes.
Dialogue: 0,0:44:16.90,0:44:21.17,中文,,0,0,0,,这并没有改变任何这些运行时
Dialogue: 0,0:44:21.17,0:44:25.01,英文,,0,0,0,,This is still theta of n, total runtime.
Dialogue: 0,0:44:21.17,0:44:25.01,中文,,0,0,0,,这仍然是Θ(N)的总运行时间
Dialogue: 0,0:44:25.01,0:44:25.61,英文,,0,0,0,,And you know what?
Dialogue: 0,0:44:25.01,0:44:25.61,中文,,0,0,0,,而且你知道吗
Dialogue: 0,0:44:25.61,0:44:32.41,英文,,0,0,0,,I'm going to rename some words all over the place.
Dialogue: 0,0:44:25.61,0:44:32.41,中文,,0,0,0,,我要在各个地方重新命名一些词
Dialogue: 0,0:44:32.41,0:44:42.29,英文,,0,0,0,,Does this look like anything we've seen before?
Dialogue: 0,0:44:32.41,0:44:42.29,中文,,0,0,0,,这看起来像我们以前见过的东西吗
Dialogue: 0,0:44:42.29,0:44:46.56,英文,,0,0,0,,What does this look like?
Dialogue: 0,0:44:42.29,0:44:46.56,中文,,0,0,0,,这是什么样子
Dialogue: 0,0:44:46.56,0:44:49.06,英文,,0,0,0,,Yeah, you're a realist.
Dialogue: 0,0:44:46.56,0:44:49.06,中文,,0,0,0,,是的 你是一个现实主义者
Dialogue: 0,0:44:49.06,0:44:57.83,英文,,0,0,0,,Remember when we said that increasing the size multiplicatively ends up yielding approximately constant time?
Dialogue: 0,0:44:49.06,0:44:57.83,中文,,0,0,0,,记得我们说过 将大小乘以得到大致恒定的时间吗
Dialogue: 0,0:44:57.83,0:44:59.27,英文,,0,0,0,,Well, this is kind of why.
Dialogue: 0,0:44:57.83,0:44:59.27,中文,,0,0,0,,这就是为什么的原因
Dialogue: 0,0:44:59.27,0:45:11.68,英文,,0,0,0,,If you add n items to an array list, then according to this analysis, this code, if you run it for n units of time, that's the same as this original print party thing, which we just said was theta n time.
Dialogue: 0,0:44:59.27,0:45:11.68,中文,,0,0,0,,如果你向数组列表添加n个项目 那么根据这个分析 如果你用n个单位的时间运行这段代码 那就等同于我们刚才说的这个原始的打印派对 也就是Θ(n)时间
Dialogue: 0,0:45:11.68,0:45:15.34,英文,,0,0,0,,So adding n items takes theta of n time.
Dialogue: 0,0:45:11.68,0:45:15.34,中文,,0,0,0,,因此 添加n个项目需要Θ(n)的时间
Dialogue: 0,0:45:15.34,0:45:22.50,英文,,0,0,0,,If we divide those two out, that means that adding one thing takes, on average, one unit of time.
Dialogue: 0,0:45:15.34,0:45:22.50,中文,,0,0,0,,如果我们将这两者相除 那意味着添加一件事 平均需要一个单位的时间
Dialogue: 0,0:45:22.50,0:45:24.92,英文,,0,0,0,,This is known as amortized runtime.
Dialogue: 0,0:45:22.50,0:45:24.92,中文,,0,0,0,,这被称为摊销运行时间
Dialogue: 0,0:45:24.92,0:45:36.37,英文,,0,0,0,,After you do n add last, the runtime of this version, where you multiply things, is theta of n. Now, you can do some similar analysis with this one, where you add a factor.
Dialogue: 0,0:45:24.92,0:45:36.37,中文,,0,0,0,,在执行了n次add last之后 这个版本的运行时间 其中你乘以一些东西 是Θ(N) 现在 你可以对这个版本进行一些类似的分析 其中你添加一个因子
Dialogue: 0,0:45:36.37,0:45:39.76,英文,,0,0,0,,And you'll find that this actually ends up being a runtime of theta of n squared.
Dialogue: 0,0:45:36.37,0:45:39.76,中文,,0,0,0,,你会发现 实际上这最终会变成一个Θ of n平方的运行时间
Dialogue: 0,0:45:39.76,0:45:51.33,英文,,0,0,0,,After n add last, you get theta of n squared runtime, which means that after each add last, for every add last, you get, on average, n runtime.
Dialogue: 0,0:45:39.76,0:45:51.33,中文,,0,0,0,,在每次添加最后一个元素后 你会得到Θ of n平方的运行时间 这意味着每次添加最后一个元素后 你平均会得到n的运行时间
Dialogue: 0,0:45:51.33,0:46:03.00,英文,,0,0,0,,So even though these worst-case resizes are still theta of n, if we look at the average runtime, we can see that this add last,
Dialogue: 0,0:45:51.33,0:46:03.00,中文,,0,0,0,,即使这些最坏情况下的调整仍然是Θ(N) 如果我们看平均运行时间 我们可以看到这种添加最后一个元素的方式
Dialogue: 0,0:46:03.00,0:46:11.00,英文,,0,0,0,,where we do multiplicative resizing, is asymptotically much better than the inversion where we add only a constant amount to each item.
Dialogue: 0,0:46:03.00,0:46:11.00,中文,,0,0,0,,其中我们进行乘法调整大小 渐进地比仅仅每个项目添加固定数量的情况要好得多
Dialogue: 0,0:46:11.00,0:46:18.57,英文,,0,0,0,,So this is kind of why we end up using this multiplicative factor, because this asymptotic runtime is so much better.
Dialogue: 0,0:46:11.00,0:46:18.57,中文,,0,0,0,,这就是为什么我们最终使用这个乘法因子的原因 因为这种渐进的运行时间要好得多
Dialogue: 0,0:46:18.57,0:46:28.40,英文,,0,0,0,,Now, this isn't worst-case runtime, because the worst case is still theta of n. Every time you resize, you need to spend that really long time copying and pasting those values.
Dialogue: 0,0:46:18.57,0:46:28.40,中文,,0,0,0,,现在 这不是最坏情况下的运行时间 因为最坏情况仍然是Θ(N) 每次调整大小时 你都需要花费很长的时间来复制和粘贴这些值
Dialogue: 0,0:46:28.40,0:46:30.82,英文,,0,0,0,,But we can call this amortized runtime.
Dialogue: 0,0:46:28.40,0:46:30.82,中文,,0,0,0,,但我们可以称之为摊销运行时间
Dialogue: 0,0:46:30.82,0:46:39.39,英文,,0,0,0,,And this amortized runtime is actually sometimes more useful than worst-case runtime, because any single operation may take longer.
Dialogue: 0,0:46:30.82,0:46:39.39,中文,,0,0,0,,而且 这种摊销运行时间有时实际上比最坏情况下的运行时间更有用 因为任何单个操作可能需要更长的时间
Dialogue: 0,0:46:39.39,0:46:46.75,英文,,0,0,0,,But if we use this over a large number of operations, we are going to have a better average performance guaranteed.
Dialogue: 0,0:46:39.39,0:46:46.75,中文,,0,0,0,,但是 如果我们在大量操作中使用这个 我们将会有更好的平均性能保证
Dialogue: 0,0:46:46.75,0:46:53.29,英文,,0,0,0,,No matter how we add or remove items, after n operations, we will have theta of n total runtime.
Dialogue: 0,0:46:46.75,0:46:53.29,中文,,0,0,0,,无论我们如何添加或删除项目 在 N次操作后 我们将有θ(n)的总运行时间
Dialogue: 0,0:46:53.29,0:46:59.11,英文,,0,0,0,,So after n operations, we will have, on average, theta of 1 runtime.
Dialogue: 0,0:46:53.29,0:46:59.11,中文,,0,0,0,,在n次操作后 我们将平均拥有θ(1)的运行时间
Dialogue: 0,0:46:59.11,0:47:01.51,英文,,0,0,0,,So disjoint sets also had this idea.
Dialogue: 0,0:46:59.11,0:47:01.51,中文,,0,0,0,,不相交集合也有这个想法
Dialogue: 0,0:47:01.51,0:47:07.01,英文,,0,0,0,,As I mentioned, theta of log n was the worst case, but inverse acromion of n is the amortized runtime.
Dialogue: 0,0:47:01.51,0:47:07.01,中文,,0,0,0,,正如我所提到的 θ(log N)是最坏情况 但N的倒数的逆是摊销运行时间
Dialogue: 0,0:47:07.01,0:47:11.15,英文,,0,0,0,,So we will sometimes compute the amortized runtime instead of the worst case runtime.
Dialogue: 0,0:47:07.01,0:47:11.15,中文,,0,0,0,,我们有时会计算摊销运行时间 而不是最坏情况运行时间
Dialogue: 0,0:47:11.15,0:47:20.37,英文,,0,0,0,,All right, any questions?
Dialogue: 0,0:47:11.15,0:47:20.37,中文,,0,0,0,,有任何问题吗
Dialogue: 0,0:47:20.37,0:47:21.31,英文,,0,0,0,,All right, I have two minutes.
Dialogue: 0,0:47:20.37,0:47:21.31,中文,,0,0,0,,我有两分钟
Dialogue: 0,0:47:21.31,0:47:24.35,英文,,0,0,0,,Do I have time to do this?
Dialogue: 0,0:47:21.31,0:47:24.35,中文,,0,0,0,,我有时间做这个吗
Dialogue: 0,0:47:24.35,0:47:26.07,英文,,0,0,0,,I don't think I do.
Dialogue: 0,0:47:24.35,0:47:26.07,中文,,0,0,0,,我觉得我没有
Dialogue: 0,0:47:26.07,0:47:29.29,英文,,0,0,0,,You want to give them a flavor of it?
Dialogue: 0,0:47:26.07,0:47:29.29,中文,,0,0,0,,你想让他们尝一尝吗
Dialogue: 0,0:47:29.29,0:47:31.42,英文,,0,0,0,,Yeah, let's do kind of a flavor.
Dialogue: 0,0:47:29.29,0:47:31.42,中文,,0,0,0,,是的 我们来尝一尝
Dialogue: 0,0:47:31.42,0:47:34.82,英文,,0,0,0,,All right.
Dialogue: 0,0:47:34.82,0:47:36.58,英文,,0,0,0,,What if we had this function?
Dialogue: 0,0:47:34.82,0:47:36.58,中文,,0,0,0,,如果我们有这个函数会怎样
Dialogue: 0,0:47:36.58,0:47:40.86,英文,,0,0,0,,What's the runtime of this function?
Dialogue: 0,0:47:36.58,0:47:40.86,中文,,0,0,0,,这个函数的运行时间是多少
Dialogue: 0,0:47:40.86,0:47:59.15,英文,,0,0,0,,Let's actually just talk for the next two minutes, discuss with your neighbors, and we'll do a poll at the very end to see what everyone thinks.
Dialogue: 0,0:47:40.86,0:47:59.15,中文,,0,0,0,,实际上我们只需要花两分钟时间来交谈 与你们的邻居讨论一下 最后我们会做个民意调查 看看大家的想法
Dialogue: 0,0:47:59.15,0:48:20.81,英文,,0,0,0,,I think someone on Zoom asked why
Dialogue: 0,0:47:59.15,0:48:20.81,中文,,0,0,0,,我觉得在 Zoom 上有人问为什么
Dialogue: 0,0:48:20.81,0:48:23.44,英文,,0,0,0,,Why the earlier function was amortized constant?
Dialogue: 0,0:48:20.81,0:48:23.44,中文,,0,0,0,,为什么之前的函数是摊销常数
Dialogue: 0,0:48:23.44,0:48:33.54,英文,,0,0,0,,Well, the reason why is because if we have n things and we take a total of n time to finish those n things, then on average, each thing took one unit of time.
Dialogue: 0,0:48:23.44,0:48:33.54,中文,,0,0,0,,之所以是这样的原因是因为如果我们有 N 个事物 花了总共 N 的时间来完成这些事物 那么平均而言 每个事物花了一个单位的时间
Dialogue: 0,0:48:33.54,0:48:37.22,英文,,0,0,0,,So amortized is just another way of saying on average.
Dialogue: 0,0:48:33.54,0:48:37.22,中文,,0,0,0,,摊销其实就是另一种说法 即平均
Dialogue: 0,0:48:37.22,0:48:56.85,英文,,0,0,0,,So if you have n things that take a total of n time, then on average, each thing took one unit of time.
Dialogue: 0,0:48:37.22,0:48:56.85,中文,,0,0,0,,如果你有 N 个事物 花了总共 N 的时间 那么平均而言 每个事物花了一个单位的时间
Dialogue: 0,0:48:56.85,0:48:59.49,英文,,0,0,0,,All right, let's bring everyone back.
Dialogue: 0,0:48:56.85,0:48:59.49,中文,,0,0,0,,让我们把大家都召回来
Dialogue: 0,0:48:59.49,0:49:04.63,英文,,0,0,0,,So before we go, who here said this is constant time?
Dialogue: 0,0:48:59.49,0:49:04.63,中文,,0,0,0,,在我们继续之前 这里有谁说这是常数时间的
Dialogue: 0,0:49:04.63,0:49:07.25,英文,,0,0,0,,One person, two people, three people.
Dialogue: 0,0:49:04.63,0:49:07.25,中文,,0,0,0,,一个人 两个人 三个人
Dialogue: 0,0:49:07.25,0:49:10.41,英文,,0,0,0,,Who here said it was log n time?
Dialogue: 0,0:49:07.25,0:49:10.41,中文,,0,0,0,,这里有谁说这是log N时间的
Dialogue: 0,0:49:10.41,0:49:13.59,英文,,0,0,0,,Who here said it was n time?
Dialogue: 0,0:49:10.41,0:49:13.59,中文,,0,0,0,,这里有谁说这是 N时间的
Dialogue: 0,0:49:13.59,0:49:16.29,英文,,0,0,0,,Who here said it was n squared?
Dialogue: 0,0:49:13.59,0:49:16.29,中文,,0,0,0,,这里有谁说这是 N平方的
Dialogue: 0,0:49:16.29,0:49:18.55,英文,,0,0,0,,Who here said it was 2 to the n?
Dialogue: 0,0:49:16.29,0:49:18.55,中文,,0,0,0,,这里有谁说这是2^N次方的
Dialogue: 0,0:49:18.55,0:49:19.33,英文,,0,0,0,,Everyone.
Dialogue: 0,0:49:18.55,0:49:19.33,中文,,0,0,0,,大家
Dialogue: 0,0:49:19.33,0:49:22.31,英文,,0,0,0,,Why is this 2 to the n?
Dialogue: 0,0:49:19.33,0:49:22.31,中文,,0,0,0,,为什么是 2 的 N 次方
Dialogue: 0,0:49:22.31,0:49:26.09,英文,,0,0,0,,Yeah, every single time you go down, it doubles in size.
Dialogue: 0,0:49:22.31,0:49:26.09,中文,,0,0,0,,是的 每次你往下走 它的大小都会翻倍
Dialogue: 0,0:49:26.09,0:49:27.51,英文,,0,0,0,,Yeah.
Dialogue: 0,0:49:26.09,0:49:27.51,中文,,0,0,0,,是的
Dialogue: 0,0:49:27.51,0:49:33.32,英文,,0,0,0,,So when we start on Friday, we'll go over exactly the formal understanding of why this is 2 to the n.
Dialogue: 0,0:49:27.51,0:49:33.32,中文,,0,0,0,,当我们在星期五开始时 我们将详细讨论为什么这是 2 的 N 次方的正式理解
Dialogue: 0,0:49:33.32,0:49:38.32,英文,,0,0,0,,But it seems like a lot of people are thinking it looks like a 2 to the n dysfunction.
Dialogue: 0,0:49:33.32,0:49:38.32,中文,,0,0,0,,但看起来很多人认为它看起来像一个 2 的 N 次方的功能障碍
Dialogue: 0,0:49:38.32,0:49:39.80,英文,,0,0,0,,That's great.
Dialogue: 0,0:49:38.32,0:49:39.80,中文,,0,0,0,,太棒了
Dialogue: 0,0:49:39.80,0:49:40.58,英文,,0,0,0,,All right.
Dialogue: 0,0:49:40.58,0:49:41.68,英文,,0,0,0,,We'll continue this on Friday.
Dialogue: 0,0:49:40.58,0:49:41.68,中文,,0,0,0,,我们会在周五继续
Dialogue: 0,0:49:41.68,0:49:42.90,英文,,0,0,0,,See you.
Dialogue: 0,0:49:41.68,0:49:42.90,中文,,0,0,0,,再见
