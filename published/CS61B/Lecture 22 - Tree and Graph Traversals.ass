[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 3
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1152
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Audio File: D:/python_code/video_tool/video_tool/result/[61B SP24] Lecture 17 - B-Trees (2-3, 2-3-4 Trees).mp4
Video File: D:/python_code/video_tool/video_tool/result/[61B SP24] Lecture 17 - B-Trees (2-3, 2-3-4 Trees).mp4
Video AR Mode: 4
Video AR Value: 1.600000
Video Zoom Percent: 0.750000
Scroll Position: 939
Active Line: 940
Video Position: 11471

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,13,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,90,100,0,0,1,1.33333,1.33333,2,6,6,7,1
Style: 英文,Arial,24,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,1,1,5,1
Style: 中文,微软雅黑,38,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,2,2,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
Dialogue: 0,0:00:01.05,0:00:02.31,英文,,0,0,0,,Two A's due?
Dialogue: 0,0:00:01.05,0:00:02.31,中文,,0,0,0,,两个 A 因为要交
Dialogue: 0,0:00:02.31,0:00:04.23,英文,,0,0,0,,Soon, or it was due, yeah.
Dialogue: 0,0:00:02.31,0:00:04.23,中文,,0,0,0,,很快或者说是应该的是的
Dialogue: 0,0:00:04.23,0:00:05.31,英文,,0,0,0,,Wait, when is Two A due?
Dialogue: 0,0:00:04.23,0:00:05.31,中文,,0,0,0,,等等两个 A 是什么时候要交
Dialogue: 0,0:00:05.31,0:00:06.55,英文,,0,0,0,,Like sometime this week.
Dialogue: 0,0:00:05.31,0:00:06.55,中文,,0,0,0,,大概这周的某个时候
Dialogue: 0,0:00:06.55,0:00:07.79,英文,,0,0,0,,Because people have extensions.
Dialogue: 0,0:00:06.55,0:00:07.79,中文,,0,0,0,,因为有人延期了
Dialogue: 0,0:00:07.79,0:00:09.73,英文,,0,0,0,,Ah, yeah, OK.
Dialogue: 0,0:00:07.79,0:00:09.73,中文,,0,0,0,,啊好的
Dialogue: 0,0:00:09.73,0:00:10.81,英文,,0,0,0,,Quick.
Dialogue: 0,0:00:09.73,0:00:10.81,中文,,0,0,0,,快点
Dialogue: 0,0:00:10.81,0:00:13.77,英文,,0,0,0,,OK, Justin wants you to see the calendar really quick.
Dialogue: 0,0:00:10.81,0:00:13.77,中文,,0,0,0,,Justin希望你快速看一下日历
Dialogue: 0,0:00:13.77,0:00:14.87,英文,,0,0,0,,Let's take a look.
Dialogue: 0,0:00:13.77,0:00:14.87,中文,,0,0,0,,让我们来看看
Dialogue: 0,0:00:14.87,0:00:16.06,英文,,0,0,0,,This is today.
Dialogue: 0,0:00:14.87,0:00:16.06,中文,,0,0,0,,这是今天
Dialogue: 0,0:00:16.06,0:00:20.48,英文,,0,0,0,,Project Two A is due, yeah, two days ago, but people have extensions.
Dialogue: 0,0:00:16.06,0:00:20.48,中文,,0,0,0,,项目二A到期了是的两天前但是人们有延期
Dialogue: 0,0:00:20.48,0:00:22.10,英文,,0,0,0,,And there's a LLRB lab.
Dialogue: 0,0:00:20.48,0:00:22.10,中文,,0,0,0,,还有一个LLRB实验室
Dialogue: 0,0:00:22.10,0:00:23.94,英文,,0,0,0,,LLRB lab due today?
Dialogue: 0,0:00:22.10,0:00:23.94,中文,,0,0,0,,LLRB实验室今天到期了
Dialogue: 0,0:00:23.94,0:00:25.06,英文,,0,0,0,,All right.
Dialogue: 0,0:00:25.06,0:00:30.86,英文,,0,0,0,,All right, that's your hasty announcements.
Dialogue: 0,0:00:25.06,0:00:30.86,中文,,0,0,0,,那是你仓促的公告
Dialogue: 0,0:00:30.86,0:00:31.92,英文,,0,0,0,,Hello.
Dialogue: 0,0:00:30.86,0:00:31.92,中文,,0,0,0,,你好
Dialogue: 0,0:00:31.92,0:00:35.50,英文,,0,0,0,,I hope you're really excited because we get to talk about graphs today.
Dialogue: 0,0:00:31.92,0:00:35.50,中文,,0,0,0,,我希望你真的很兴奋因为我们今天要谈论图表
Dialogue: 0,0:00:35.50,0:00:40.61,英文,,0,0,0,,So before I talk about graphs, let's revisit our old friend, the tree.
Dialogue: 0,0:00:35.50,0:00:40.61,中文,,0,0,0,,在我讲解图表之前让我们重新看看我们的老朋友树
Dialogue: 0,0:00:40.61,0:00:42.77,英文,,0,0,0,,So hopefully this slide looks kind of familiar.
Dialogue: 0,0:00:40.61,0:00:42.77,中文,,0,0,0,,希望这张幻灯片看起来有点熟悉
Dialogue: 0,0:00:42.77,0:00:44.45,英文,,0,0,0,,We talked about a tree already.
Dialogue: 0,0:00:42.77,0:00:44.45,中文,,0,0,0,,我们已经谈过一棵树了
Dialogue: 0,0:00:44.45,0:00:45.75,英文,,0,0,0,,It is a set of nodes.
Dialogue: 0,0:00:44.45,0:00:45.75,中文,,0,0,0,,它是一组节点
Dialogue: 0,0:00:45.75,0:00:47.40,英文,,0,0,0,,So we draw a bunch of circles.
Dialogue: 0,0:00:45.75,0:00:47.40,中文,,0,0,0,,我们画了一堆圈圈
Dialogue: 0,0:00:47.40,0:00:55.88,英文,,0,0,0,,Then you draw a bunch of edges to connect the circles together with a constraint that there is only one way to get between any two nodes.
Dialogue: 0,0:00:47.40,0:00:55.88,中文,,0,0,0,,你画一堆边将圈圈连接在一起有一个约束条件即任意两个节点之间只有一种方式可以连接
Dialogue: 0,0:00:55.88,0:00:57.34,英文,,0,0,0,,So we saw this last time.
Dialogue: 0,0:00:55.88,0:00:57.34,中文,,0,0,0,,我们上次看到了这个
Dialogue: 0,0:00:57.34,0:01:02.19,英文,,0,0,0,,If there's only one way to get between any pair of nodes that you choose, then it's a tree.
Dialogue: 0,0:00:57.34,0:01:02.19,中文,,0,0,0,,如果你选择的任意一对节点之间只有一种方式可以连接那么它就是一棵树
Dialogue: 0,0:01:02.19,0:01:08.53,英文,,0,0,0,,If there are two ways to get between two nodes, for example, these trees in red, those are not trees.
Dialogue: 0,0:01:02.19,0:01:08.53,中文,,0,0,0,,如果两个节点之间有两种方式可以连接例如这些红色的树那些就不是树
Dialogue: 0,0:01:08.53,0:01:10.82,英文,,0,0,0,,So something from last time.
Dialogue: 0,0:01:08.53,0:01:10.82,中文,,0,0,0,,上次有些东西
Dialogue: 0,0:01:10.82,0:01:13.78,英文,,0,0,0,,And also from last time, we talked about a rooted tree.
Dialogue: 0,0:01:10.82,0:01:13.78,中文,,0,0,0,,上次还谈到了一棵根树
Dialogue: 0,0:01:13.78,0:01:16.54,英文,,0,0,0,,And the idea behind a rooted tree is it's still a tree.
Dialogue: 0,0:01:13.78,0:01:16.54,中文,,0,0,0,,而根树的背后的想法是它仍然是一棵树
Dialogue: 0,0:01:16.54,0:01:17.72,英文,,0,0,0,,There's no difference.
Dialogue: 0,0:01:16.54,0:01:17.72,中文,,0,0,0,,没有区别
Dialogue: 0,0:01:17.72,0:01:21.24,英文,,0,0,0,,But you choose one special node and say, you're the root.
Dialogue: 0,0:01:17.72,0:01:21.24,中文,,0,0,0,,但你选择一个特殊的节点然后说你是根
Dialogue: 0,0:01:21.24,0:01:25.36,英文,,0,0,0,,And once you choose a root, then you can define things like parents and children.
Dialogue: 0,0:01:21.24,0:01:25.36,中文,,0,0,0,,一旦选择了根那么你就可以定义诸如父节点和子节点之类的东西
Dialogue: 0,0:01:25.36,0:01:30.06,英文,,0,0,0,,In particular, the parent of a node is the first node on the way to the root.
Dialogue: 0,0:01:25.36,0:01:30.06,中文,,0,0,0,,特别是节点的父节点是通往根的第一个节点
Dialogue: 0,0:01:30.06,0:01:37.62,英文,,0,0,0,,So for example, this C node, its parent is B, because that is the node on the way to the root, who I've designated as A.
Dialogue: 0,0:01:30.06,0:01:37.62,中文,,0,0,0,,比如说这个 C 节点它的父节点是 B因为那是通往根节点的节点我把它指定为 A
Dialogue: 0,0:01:37.62,0:01:40.91,英文,,0,0,0,,And as a reminder, if a node has no child, it's called a leaf.
Dialogue: 0,0:01:37.62,0:01:40.91,中文,,0,0,0,,提醒一下如果一个节点没有子节点就叫做叶子节点
Dialogue: 0,0:01:40.91,0:01:45.95,英文,,0,0,0,,So these are all reminders from when we first talked about trees.
Dialogue: 0,0:01:40.91,0:01:45.95,中文,,0,0,0,,这些都是我们第一次讨论树时的提醒
Dialogue: 0,0:01:45.95,0:01:47.67,英文,,0,0,0,,So where have we seen trees?
Dialogue: 0,0:01:45.95,0:01:47.67,中文,,0,0,0,,那么我们在哪里见过树呢
Dialogue: 0,0:01:47.67,0:01:49.69,英文,,0,0,0,,Well, it turns out they've popped up all over the place.
Dialogue: 0,0:01:47.67,0:01:49.69,中文,,0,0,0,,事实证明它们已经在各个地方出现了
Dialogue: 0,0:01:49.69,0:01:54.57,英文,,0,0,0,,So for example, we use the tree to help us build a set.
Dialogue: 0,0:01:49.69,0:01:54.57,中文,,0,0,0,,比如说我们使用树来帮助我们构建一个集合
Dialogue: 0,0:01:54.57,0:01:57.21,英文,,0,0,0,,And we also use the tree to help us build a map.
Dialogue: 0,0:01:54.57,0:01:57.21,中文,,0,0,0,,而且我们也使用树来帮助我们构建一个映射
Dialogue: 0,0:01:57.21,0:02:01.02,英文,,0,0,0,,We use trees to build the priority queue data structure.
Dialogue: 0,0:01:57.21,0:02:01.02,中文,,0,0,0,,我们使用树来构建优先队列数据结构
Dialogue: 0,0:02:01.02,0:02:02.92,英文,,0,0,0,,We used it to build disjoint sets.
Dialogue: 0,0:02:01.02,0:02:02.92,中文,,0,0,0,,我们用它来构建不相交集
Dialogue: 0,0:02:02.92,0:02:09.58,英文,,0,0,0,,So we've seen trees all over the place to build all sorts of different data structures that the user might want.
Dialogue: 0,0:02:02.92,0:02:09.58,中文,,0,0,0,,我们看到树无处不在用来构建各种用户可能需要的不同数据结构
Dialogue: 0,0:02:09.58,0:02:11.98,英文,,0,0,0,,But it turns out trees, they show up in real life too.
Dialogue: 0,0:02:09.58,0:02:11.98,中文,,0,0,0,,但是事实证明树也出现在现实生活中
Dialogue: 0,0:02:11.98,0:02:13.56,英文,,0,0,0,,So here's a bunch of examples.
Dialogue: 0,0:02:11.98,0:02:13.56,中文,,0,0,0,,这里有一堆例子
Dialogue: 0,0:02:13.56,0:02:22.41,英文,,0,0,0,,So like a family tree or like a, I guess this is like a company hierarchy where we have a boss and a bunch of managers and stuff like that.
Dialogue: 0,0:02:13.56,0:02:22.41,中文,,0,0,0,,就像家谱或者我想这就像是公司的层级结构有老板和一堆经理之类的
Dialogue: 0,0:02:22.41,0:02:28.41,英文,,0,0,0,,So it turns out trees, they show up all over the place and you'll see them in real life.
Dialogue: 0,0:02:22.41,0:02:28.41,中文,,0,0,0,,树实际上无处不在你会在现实生活中看到它们
Dialogue: 0,0:02:28.41,0:02:29.25,英文,,0,0,0,,Okay.
Dialogue: 0,0:02:29.25,0:02:30.09,英文,,0,0,0,,So that's trees.
Dialogue: 0,0:02:29.25,0:02:30.09,中文,,0,0,0,,这就是树
Dialogue: 0,0:02:30.09,0:02:31.37,英文,,0,0,0,,It's stuff you've seen before.
Dialogue: 0,0:02:30.09,0:02:31.37,中文,,0,0,0,,这些都是你以前见过的东西
Dialogue: 0,0:02:31.37,0:02:33.86,英文,,0,0,0,,We can use them for data structures.
Dialogue: 0,0:02:31.37,0:02:33.86,中文,,0,0,0,,我们可以用它们来构建数据结构
Dialogue: 0,0:02:33.86,0:02:35.48,英文,,0,0,0,,We can use them in real life.
Dialogue: 0,0:02:33.86,0:02:35.48,中文,,0,0,0,,我们可以在现实生活中使用它们
Dialogue: 0,0:02:35.48,0:02:41.10,英文,,0,0,0,,And so one thing you might want to do is maybe you want to iterate through a tree.
Dialogue: 0,0:02:35.48,0:02:41.10,中文,,0,0,0,,你可能想做的一件事是也许你想要遍历一棵树
Dialogue: 0,0:02:41.10,0:02:47.12,英文,,0,0,0,,And by iterating through a tree, I mean maybe you want to go through this tree and do something to all of the nodes in the tree.
Dialogue: 0,0:02:41.10,0:02:47.12,中文,,0,0,0,,通过遍历树我指的是也许你想要遍历这棵树并对树中的所有节点做一些操作
Dialogue: 0,0:02:47.12,0:02:48.32,英文,,0,0,0,,We have a tree.
Dialogue: 0,0:02:47.12,0:02:48.32,中文,,0,0,0,,我们有一棵树
Dialogue: 0,0:02:48.32,0:02:49.82,英文,,0,0,0,,We have a bunch of nodes.
Dialogue: 0,0:02:48.32,0:02:49.82,中文,,0,0,0,,我们有一堆节点
Dialogue: 0,0:02:49.82,0:02:53.20,英文,,0,0,0,,Maybe you want to do something to all of the nodes.
Dialogue: 0,0:02:49.82,0:02:53.20,中文,,0,0,0,,也许你想对所有节点做点什么
Dialogue: 0,0:02:53.20,0:03:00.35,英文,,0,0,0,,And so if we wanted to iterate through a list, well, then there's only so many natural orders of iterating through a list.
Dialogue: 0,0:02:53.20,0:03:00.35,中文,,0,0,0,,如果我们想要遍历一个列表那么遍历列表的自然顺序就只有那么多
Dialogue: 0,0:03:00.35,0:03:01.67,英文,,0,0,0,,You could go forwards.
Dialogue: 0,0:03:00.35,0:03:01.67,中文,,0,0,0,,你可以向前走
Dialogue: 0,0:03:01.67,0:03:03.11,英文,,0,0,0,,You could go backwards.
Dialogue: 0,0:03:01.67,0:03:03.11,中文,,0,0,0,,你也可以向后走
Dialogue: 0,0:03:03.11,0:03:07.79,英文,,0,0,0,,And that's kind of about it in terms of orders that are pretty natural.
Dialogue: 0,0:03:03.11,0:03:07.79,中文,,0,0,0,,这大概就是相当自然的顺序了
Dialogue: 0,0:03:07.79,0:03:13.43,英文,,0,0,0,,But it turns out with trees, there's actually lots of different ways in which you could iterate through all the nodes.
Dialogue: 0,0:03:07.79,0:03:13.43,中文,,0,0,0,,但事实证明对于树来说实际上有许多不同的方法可以遍历所有节点
Dialogue: 0,0:03:13.43,0:03:16.27,英文,,0,0,0,,There are lots of different orders that might make sense.
Dialogue: 0,0:03:13.43,0:03:16.27,中文,,0,0,0,,有许多不同的顺序可能是有意义的
Dialogue: 0,0:03:16.27,0:03:19.39,英文,,0,0,0,,And so we'll talk about some of those common orders first.
Dialogue: 0,0:03:16.27,0:03:19.39,中文,,0,0,0,,因此我们将首先讨论一些常见的顺序
Dialogue: 0,0:03:19.39,0:03:22.63,英文,,0,0,0,,And usually, people don't call them tree iteration.
Dialogue: 0,0:03:19.39,0:03:22.63,中文,,0,0,0,,通常人们不称之为树的迭代
Dialogue: 0,0:03:22.63,0:03:24.71,英文,,0,0,0,,You could, but people will stare at you funny.
Dialogue: 0,0:03:22.63,0:03:24.71,中文,,0,0,0,,你可以但人们会奇怪地看着你
Dialogue: 0,0:03:24.71,0:03:27.42,英文,,0,0,0,,So instead, people call them tree traversals.
Dialogue: 0,0:03:24.71,0:03:27.42,中文,,0,0,0,,人们称之为树的遍历
Dialogue: 0,0:03:27.42,0:03:29.18,英文,,0,0,0,,But it's the same idea.
Dialogue: 0,0:03:27.42,0:03:29.18,中文,,0,0,0,,但是这是相同的概念
Dialogue: 0,0:03:29.18,0:03:35.66,英文,,0,0,0,,I would like to iterate through all these nodes in some order that makes sense for the task I'm trying to do.
Dialogue: 0,0:03:29.18,0:03:35.66,中文,,0,0,0,,我想按照某种对我尝试完成的任务有意义的顺序来迭代所有这些节点
Dialogue: 0,0:03:35.66,0:03:37.28,英文,,0,0,0,,So here's an example of a tree.
Dialogue: 0,0:03:35.66,0:03:37.28,中文,,0,0,0,,这是一个树的例子
Dialogue: 0,0:03:37.28,0:03:39.72,英文,,0,0,0,,I'm not using this to build a data structure.
Dialogue: 0,0:03:37.28,0:03:39.72,中文,,0,0,0,,我不是用这个来构建一个数据结构
Dialogue: 0,0:03:39.72,0:03:40.84,英文,,0,0,0,,It's not a set.
Dialogue: 0,0:03:39.72,0:03:40.84,中文,,0,0,0,,它不是一个集合
Dialogue: 0,0:03:40.84,0:03:42.34,英文,,0,0,0,,It's not a priority queue.
Dialogue: 0,0:03:40.84,0:03:42.34,中文,,0,0,0,,它不是一个优先队列
Dialogue: 0,0:03:42.34,0:03:46.36,英文,,0,0,0,,But this is just a tree that represents, I guess, a file system.
Dialogue: 0,0:03:42.34,0:03:46.36,中文,,0,0,0,,但这只是一个表示文件系统的树
Dialogue: 0,0:03:46.36,0:03:53.57,英文,,0,0,0,,So maybe you have a folder called 61B, and it's got the folder called project 0, and another folder called project or homework 1.
Dialogue: 0,0:03:46.36,0:03:53.57,中文,,0,0,0,,也许你有一个名为61B的文件夹它有一个名为项目0的文件夹还有一个名为项目或者作业1的文件夹
Dialogue: 0,0:03:53.57,0:03:59.03,英文,,0,0,0,,And maybe the homework 1 folder has a subfolder called spec or whatever.
Dialogue: 0,0:03:53.57,0:03:59.03,中文,,0,0,0,,也许作业1文件夹里有一个叫spec或其他名字的子文件夹
Dialogue: 0,0:03:59.03,0:04:03.30,英文,,0,0,0,,This is a tree that represents your 61B folder.
Dialogue: 0,0:03:59.03,0:04:03.30,中文,,0,0,0,,这是代表你的61B文件夹的树
Dialogue: 0,0:04:03.30,0:04:06.20,英文,,0,0,0,,Maybe I want to iterate through it and do something with it.
Dialogue: 0,0:04:03.30,0:04:06.20,中文,,0,0,0,,也许我想遍历它并对其进行一些操作
Dialogue: 0,0:04:06.20,0:04:09.01,英文,,0,0,0,,So what might that look like?
Dialogue: 0,0:04:06.20,0:04:09.01,中文,,0,0,0,,那会是什么样子呢
Dialogue: 0,0:04:09.01,0:04:10.23,英文,,0,0,0,,So here's another tree.
Dialogue: 0,0:04:09.01,0:04:10.23,中文,,0,0,0,,这里是另一棵树
Dialogue: 0,0:04:10.23,0:04:19.10,英文,,0,0,0,,So one natural order that, to us as humans, makes a lot of sense is maybe we will visit the nodes top to bottom, left to right.
Dialogue: 0,0:04:10.23,0:04:19.10,中文,,0,0,0,,一个对我们人类来说很自然的顺序也许我们会从上到下从左到右访问节点
Dialogue: 0,0:04:19.10,0:04:31.04,英文,,0,0,0,,So if I pick a root, in this case I'm picking D, you're the root, and I shake the tree and all the other nodes fall down below D, then I could read the nodes top to bottom, left to right.
Dialogue: 0,0:04:19.10,0:04:31.04,中文,,0,0,0,,如果我选一个根在这个例子中我选择的是D你是根我摇晃树其他所有节点都落在D下面我就可以从上到下从左到右读取节点
Dialogue: 0,0:04:31.04,0:04:32.50,英文,,0,0,0,,So I could say D.
Dialogue: 0,0:04:31.04,0:04:32.50,中文,,0,0,0,,我可以说 D
Dialogue: 0,0:04:32.50,0:04:37.60,英文,,0,0,0,,B, F, A, C, E, G. That would be top to bottom, left to right.
Dialogue: 0,0:04:32.50,0:04:37.60,中文,,0,0,0,,B、F、A、C、E、G从上到下从左到右
Dialogue: 0,0:04:37.60,0:04:40.02,英文,,0,0,0,,Sometimes people call this level order.
Dialogue: 0,0:04:37.60,0:04:40.02,中文,,0,0,0,,有时人们称之为层次遍历
Dialogue: 0,0:04:40.02,0:04:41.80,英文,,0,0,0,,And we'll talk about this more next time.
Dialogue: 0,0:04:40.02,0:04:41.80,中文,,0,0,0,,下次我们会更详细地讨论这个
Dialogue: 0,0:04:41.80,0:04:45.05,英文,,0,0,0,,But that's one of many natural orders you could use.
Dialogue: 0,0:04:41.80,0:04:45.05,中文,,0,0,0,,但这只是许多自然顺序中的一个
Dialogue: 0,0:04:45.05,0:04:48.59,英文,,0,0,0,,But it turns out there are other orders that might seem natural.
Dialogue: 0,0:04:45.05,0:04:48.59,中文,,0,0,0,,但事实证明还有其他看似自然的顺序
Dialogue: 0,0:04:48.59,0:04:52.75,英文,,0,0,0,,And so we'll talk about three more orders called depth-first orders.
Dialogue: 0,0:04:48.59,0:04:52.75,中文,,0,0,0,,我们将讨论另外三种称为深度优先顺序的顺序
Dialogue: 0,0:04:52.75,0:04:59.61,英文,,0,0,0,,And the idea here, as we'll see soon, is that you'll maybe start with some of these deep nodes before the shallow ones.
Dialogue: 0,0:04:52.75,0:04:59.61,中文,,0,0,0,,这里的想法是正如我们马上会看到的你可能会从一些深层节点开始而不是浅层节点
Dialogue: 0,0:04:59.61,0:05:02.26,英文,,0,0,0,,So what do I mean by that?
Dialogue: 0,0:04:59.61,0:05:02.26,中文,,0,0,0,,那我是什么意思呢
Dialogue: 0,0:05:02.26,0:05:03.68,英文,,0,0,0,,Let's look at the example.
Dialogue: 0,0:05:02.26,0:05:03.68,中文,,0,0,0,,我们来看个例子
Dialogue: 0,0:05:03.68,0:05:10.73,英文,,0,0,0,,So here's a little natural recursive algorithm you could write for traversing the tree and visiting all the nodes.
Dialogue: 0,0:05:03.68,0:05:10.73,中文,,0,0,0,,这里有一个小的自然递归算法你可以用它来遍历树并访问所有节点
Dialogue: 0,0:05:10.73,0:05:15.43,英文,,0,0,0,,So in this case, I'm going to say I want to go through all the nodes and print them.
Dialogue: 0,0:05:10.73,0:05:15.43,中文,,0,0,0,,在这种情况下我要去遍历所有的节点并打印它们
Dialogue: 0,0:05:15.43,0:05:19.13,英文,,0,0,0,,You could do other things with the nodes, but I chose to print them.
Dialogue: 0,0:05:15.43,0:05:19.13,中文,,0,0,0,,你可以对节点做其他事情但我选择打印它们
Dialogue: 0,0:05:19.13,0:05:22.61,英文,,0,0,0,,So I'll write something like, well, if the node is null, then do nothing.
Dialogue: 0,0:05:19.13,0:05:22.61,中文,,0,0,0,,我会写一些像这样的东西如果节点为空那么什么也不做
Dialogue: 0,0:05:22.61,0:05:23.70,英文,,0,0,0,,That's the base case.
Dialogue: 0,0:05:22.61,0:05:23.70,中文,,0,0,0,,这是基本情况
Dialogue: 0,0:05:23.70,0:05:28.86,英文,,0,0,0,,The simplest tree possible is a tree with no items, so I'll do nothing.
Dialogue: 0,0:05:23.70,0:05:28.86,中文,,0,0,0,,可能的最简单的树是一个没有任何项目的树我什么也不做
Dialogue: 0,0:05:28.86,0:05:31.82,英文,,0,0,0,,Then I will print the item in the node.
Dialogue: 0,0:05:28.86,0:05:31.82,中文,,0,0,0,,我会打印节点中的项目
Dialogue: 0,0:05:31.82,0:05:35.48,英文,,0,0,0,,And then I will recursively visit all the nodes in the left children.
Dialogue: 0,0:05:31.82,0:05:35.48,中文,,0,0,0,,我将递归地访问所有左子节点中的节点
Dialogue: 0,0:05:35.48,0:05:39.52,英文,,0,0,0,,And then I'll recursively visit all the nodes in the right children.
Dialogue: 0,0:05:35.48,0:05:39.52,中文,,0,0,0,,然后我将递归地访问所有右子节点中的节点
Dialogue: 0,0:05:39.52,0:05:42.48,英文,,0,0,0,,So let's follow this code together and see what happens.
Dialogue: 0,0:05:39.52,0:05:42.48,中文,,0,0,0,,那么让我们一起跟随这段代码看看会发生什么
Dialogue: 0,0:05:42.48,0:05:48.11,英文,,0,0,0,,So I'm going to call this preorder function on d, because that's the root.
Dialogue: 0,0:05:42.48,0:05:48.11,中文,,0,0,0,,我要在d上调用这个preOrder函数因为那是根
Dialogue: 0,0:05:48.11,0:05:49.25,英文,,0,0,0,,Is d null?
Dialogue: 0,0:05:48.11,0:05:49.25,中文,,0,0,0,,d 是空的吗
Dialogue: 0,0:05:49.25,0:05:49.55,英文,,0,0,0,,No.
Dialogue: 0,0:05:49.25,0:05:49.55,中文,,0,0,0,,不是
Dialogue: 0,0:05:49.55,0:05:50.51,英文,,0,0,0,,So we've got to keep going.
Dialogue: 0,0:05:49.55,0:05:50.51,中文,,0,0,0,,那我们得继续前进
Dialogue: 0,0:05:50.51,0:05:56.46,英文,,0,0,0,,So the first thing we do is we print out d. There it is, d, beautiful.
Dialogue: 0,0:05:50.51,0:05:56.46,中文,,0,0,0,,我们要做的第一件事是打印出 d在这里它是d很漂亮
Dialogue: 0,0:05:56.46,0:05:59.32,英文,,0,0,0,,Then we will recursively visit all the left children.
Dialogue: 0,0:05:56.46,0:05:59.32,中文,,0,0,0,,然后我们将递归访问所有左子节点
Dialogue: 0,0:05:59.32,0:06:02.20,英文,,0,0,0,,And then we will recursively visit all the right children.
Dialogue: 0,0:05:59.32,0:06:02.20,中文,,0,0,0,,然后我们将递归访问所有右子节点
Dialogue: 0,0:06:02.20,0:06:07.58,英文,,0,0,0,,So let's go recursively call this function on the left child, which is B. So here we are.
Dialogue: 0,0:06:02.20,0:06:07.58,中文,,0,0,0,,让我们递归调用这个函数在左子节点上也就是 B我们在这里
Dialogue: 0,0:06:07.58,0:06:13.93,英文,,0,0,0,,We're going to call B. And one critical thing to notice is that when I'm running recursion, I am not done with D.
Dialogue: 0,0:06:07.58,0:06:13.93,中文,,0,0,0,,我们要调用 B有一件非常关键的事情要注意那就是当我运行递归时我并没有完成 D
Dialogue: 0,0:06:13.93,0:06:20.93,英文,,0,0,0,,So I have this little call stack to remind myself, hey, when you're done with B, you've got to go back to D and finish calling preorder on D.
Dialogue: 0,0:06:13.93,0:06:20.93,中文,,0,0,0,,我有这个小调用栈来提醒自己嘿当你完成了 B你必须回到 D 并完成对 D 上的 preOrder 的调用
Dialogue: 0,0:06:20.93,0:06:24.83,英文,,0,0,0,,Because I called preorder on D. It called preorder on B.
Dialogue: 0,0:06:20.93,0:06:24.83,中文,,0,0,0,,因为我调用了 D 上的 preOrder它调用了 B 上的 preOrder
Dialogue: 0,0:06:24.83,0:06:28.75,英文,,0,0,0,,But when I'm done with B, I've got to go back to D and finish whatever I was doing.
Dialogue: 0,0:06:24.83,0:06:28.75,中文,,0,0,0,,但是当我完成 B 时我必须回到 D 并完成我正在做的事情
Dialogue: 0,0:06:28.75,0:06:33.03,英文,,0,0,0,,So that's a note to myself to go back and finish whatever I was doing.
Dialogue: 0,0:06:28.75,0:06:33.03,中文,,0,0,0,,这是提醒自己回去完成我正在做的事情的一个注释
Dialogue: 0,0:06:33.03,0:06:39.17,英文,,0,0,0,,So with that reminder in mind, I'm going to go and call preorder on B. Is B null?
Dialogue: 0,0:06:33.03,0:06:39.17,中文,,0,0,0,,记住这个提醒我将继续调用 B 上的 preOrderB 是空的吗
Dialogue: 0,0:06:39.17,0:06:40.33,英文,,0,0,0,,No. I have stuff to do.
Dialogue: 0,0:06:39.17,0:06:40.33,中文,,0,0,0,,不 我有事情要做
Dialogue: 0,0:06:40.33,0:06:47.89,英文,,0,0,0,,So I will print out B. And then I will call preorder on B's left child and then call preorder on B's right child.
Dialogue: 0,0:06:40.33,0:06:47.89,中文,,0,0,0,,我将打印出 B然后我将调用 B 的左子节点的 preOrder然后调用 B 的右子节点的 preOrder
Dialogue: 0,0:06:47.89,0:06:53.54,英文,,0,0,0,,B's left child is A. So we'll call preorder on A. And again,
Dialogue: 0,0:06:47.89,0:06:53.54,中文,,0,0,0,,B的左子节点是A我们将对A调用前序遍历
Dialogue: 0,0:06:53.54,0:06:56.26,英文,,0,0,0,,Don't get too tempted to say, OK, I'll just do A and I'll finish.
Dialogue: 0,0:06:53.54,0:06:56.26,中文,,0,0,0,,不要太心动说好吧我就做A然后就完成了
Dialogue: 0,0:06:56.26,0:07:03.86,英文,,0,0,0,,I have to go back and finish B whenever I finish A. Because I was halfway through B. I had to distract myself, call A. And when I'm done,
Dialogue: 0,0:06:56.26,0:07:03.86,中文,,0,0,0,,我得回去完成B无论何时我完成A因为我在B的一半的时候我必须分心调用A
Dialogue: 0,0:07:03.86,0:07:14.36,英文,,0,0,0,, I got to go back and finish B. So I have this little call stack to remind myself, hey, when you're done with A, go back to B. And when you're done with B, go back to D.
Dialogue: 0,0:07:03.86,0:07:14.36,中文,,0,0,0,,当我完成时我得回去完成B我有这个小的调用栈来提醒自己当你完成A时回到B当你完成B时回到D
Dialogue: 0,0:07:14.36,0:07:18.04,英文,,0,0,0,,So now I'm calling preorder of A. Is A null?
Dialogue: 0,0:07:14.36,0:07:18.04,中文,,0,0,0,,现在我正在调用A的前序遍历A是空的吗
Dialogue: 0,0:07:18.04,0:07:19.27,英文,,0,0,0,,No. So I have stuff to do.
Dialogue: 0,0:07:18.04,0:07:19.27,中文,,0,0,0,,不是 我有事情要做
Dialogue: 0,0:07:19.27,0:07:24.07,英文,,0,0,0,,So I will call, or I'll print out A. Then I will do preorder on A's left child.
Dialogue: 0,0:07:19.27,0:07:24.07,中文,,0,0,0,,我会调用或者我会打印出A我会对A的左子节点进行前序遍历
Dialogue: 0,0:07:24.07,0:07:25.43,英文,,0,0,0,,What's A's left child?
Dialogue: 0,0:07:24.07,0:07:25.43,中文,,0,0,0,,A的左子节点是什么
Dialogue: 0,0:07:25.43,0:07:26.69,英文,,0,0,0,,It's nothing.
Dialogue: 0,0:07:25.43,0:07:26.69,中文,,0,0,0,,什么都没有
Dialogue: 0,0:07:26.69,0:07:28.13,英文,,0,0,0,,So I'll skip over it.
Dialogue: 0,0:07:26.69,0:07:28.13,中文,,0,0,0,,我会跳过它
Dialogue: 0,0:07:28.13,0:07:28.85,英文,,0,0,0,,It will do nothing.
Dialogue: 0,0:07:28.13,0:07:28.85,中文,,0,0,0,,它什么也不会做
Dialogue: 0,0:07:28.85,0:07:30.16,英文,,0,0,0,,It will just return.
Dialogue: 0,0:07:28.85,0:07:30.16,中文,,0,0,0,,它只会返回
Dialogue: 0,0:07:30.16,0:07:31.74,英文,,0,0,0,,And what's A's right child?
Dialogue: 0,0:07:30.16,0:07:31.74,中文,,0,0,0,,A的右子节点是什么
Dialogue: 0,0:07:31.74,0:07:32.26,英文,,0,0,0,,It's null.
Dialogue: 0,0:07:31.74,0:07:32.26,中文,,0,0,0,,是空的
Dialogue: 0,0:07:32.26,0:07:34.28,英文,,0,0,0,,So I will end up doing nothing as well.
Dialogue: 0,0:07:32.26,0:07:34.28,中文,,0,0,0,,我最终也什么都没做
Dialogue: 0,0:07:34.28,0:07:37.66,英文,,0,0,0,,So now, finally, one of my calls actually finished.
Dialogue: 0,0:07:34.28,0:07:37.66,中文,,0,0,0,,现在终于我的一个调用真的完成了
Dialogue: 0,0:07:37.66,0:07:44.45,英文,,0,0,0,,I am totally done calling preorder of A. I printed out A. I finished all of its left children, which is nothing.
Dialogue: 0,0:07:37.66,0:07:44.45,中文,,0,0,0,,我完全完成了对A的先序调用我打印出了A我完成了它所有的左孩子什么也没有
Dialogue: 0,0:07:44.45,0:07:47.71,英文,,0,0,0,,And I finished all of its right children, which is nothing.
Dialogue: 0,0:07:44.45,0:07:47.71,中文,,0,0,0,,我完成了所有的右孩子什么也没有
Dialogue: 0,0:07:47.71,0:07:50.22,英文,,0,0,0,,So I'm done with A. Beautiful.
Dialogue: 0,0:07:47.71,0:07:50.22,中文,,0,0,0,,我完成了A美好
Dialogue: 0,0:07:50.22,0:07:51.52,英文,,0,0,0,,But remember, I'm not all the way done.
Dialogue: 0,0:07:50.22,0:07:51.52,中文,,0,0,0,,但记住我还没有全部完成
Dialogue: 0,0:07:51.52,0:07:53.66,英文,,0,0,0,,I can't go home and declare success.
Dialogue: 0,0:07:51.52,0:07:53.66,中文,,0,0,0,,我不能回家宣布成功
Dialogue: 0,0:07:53.66,0:07:56.10,英文,,0,0,0,,I have to finish B. So where was I in B?
Dialogue: 0,0:07:53.66,0:07:56.10,中文,,0,0,0,,我得完成B那么我在B做到哪一步了
Dialogue: 0,0:07:56.10,0:07:58.36,英文,,0,0,0,,Well, if I think back, where was I in B?
Dialogue: 0,0:07:56.10,0:07:58.36,中文,,0,0,0,,好吧如果我回想一下在B中我做到了哪一步
Dialogue: 0,0:07:58.36,0:08:04.03,英文,,0,0,0,,Well, when I was calling preorder of B, I called preorder of A, which just finished.
Dialogue: 0,0:07:58.36,0:08:04.03,中文,,0,0,0,,当我调用B的先序遍历时我调用了A的先序遍历而A的先序遍历刚好完成了
Dialogue: 0,0:08:04.03,0:08:09.93,英文,,0,0,0,,So I have to finish my work by calling preorder on B's right child, which is C. So what would happen?
Dialogue: 0,0:08:04.03,0:08:09.93,中文,,0,0,0,,我必须通过调用B的右孩子的先序遍历来完成我的工作右孩子是C那会发生什么呢
Dialogue: 0,0:08:09.93,0:08:18.17,英文,,0,0,0,,I would have to print out C, check out C's left child, which is nothing, check out C's right child, which is nothing, and I get C printed out.
Dialogue: 0,0:08:09.93,0:08:18.17,中文,,0,0,0,,我得打印出C查看C的左孩子什么也没有再查看C的右孩子什么也没有然后我就打印出C了
Dialogue: 0,0:08:18.17,0:08:25.01,英文,,0,0,0,,And finally, I'm done with C. I'm also done with B, because I've taken care of its left child and its right child.
Dialogue: 0,0:08:18.17,0:08:25.01,中文,,0,0,0,,最后我完成了C我也完成了B因为我已经处理了它的左孩子和右孩子
Dialogue: 0,0:08:25.01,0:08:26.19,英文,,0,0,0,,So am I done?
Dialogue: 0,0:08:25.01,0:08:26.19,中文,,0,0,0,,那么我完成了吗
Dialogue: 0,0:08:26.19,0:08:27.63,英文,,0,0,0,,Can I go home?
Dialogue: 0,0:08:26.19,0:08:27.63,中文,,0,0,0,,我可以回家吗
Dialogue: 0,0:08:27.63,0:08:39.36,英文,,0,0,0,,Well, I still have to finish the other side of D. Because remember, when I called D, I said, I'm going to do the whole left half, which I've done, B, A, C. Now I will do the right half.
Dialogue: 0,0:08:27.63,0:08:39.36,中文,,0,0,0,,我还得完成 D 的另一半因为记得当我调用 D 时我说过我要做整个左半部分我已经完成了 B、A、C现在我要做右半部分了
Dialogue: 0,0:08:39.36,0:08:43.90,英文,,0,0,0,,So I'll start skipping over the steps a little bit, but the whole demo is here for you to see.
Dialogue: 0,0:08:39.36,0:08:43.90,中文,,0,0,0,,我会开始略过一些步骤但整个演示都在这里供你观看
Dialogue: 0,0:08:43.90,0:08:45.90,英文,,0,0,0,,So now I'm going to call preorder on the right half.
Dialogue: 0,0:08:43.90,0:08:45.90,中文,,0,0,0,,现在我要在右半部分调用前序遍历
Dialogue: 0,0:08:45.90,0:08:55.27,英文,,0,0,0,,I will visit F. Then I'll visit the left child, which is E. Then I'll visit the right child, which is G. Then I'll be done with F. Then I'll be done with D.
Dialogue: 0,0:08:45.90,0:08:55.27,中文,,0,0,0,,我会访问 F我会访问左子节点也就是 E我会访问右子节点也就是 G我就完成了 F我就完成了 D
Dialogue: 0,0:08:55.27,0:09:14.14,英文,,0,0,0,,So in summary, just by following this code really carefully and keeping track of my call stack, I found out that this recursive call, or this recursive function, gives me the ordering, D, B, A, C, F, E, G. And that is one of the other natural orderings for iterating through a tree.
Dialogue: 0,0:08:55.27,0:09:14.14,中文,,0,0,0,,总结一下通过仔细跟踪这段代码和我的调用堆栈我发现这个递归调用或这个递归函数给了我一个顺序D、B、A、C、F、E、G而这是遍历树的另一种自然顺序之一
Dialogue: 0,0:09:14.14,0:09:21.10,英文,,0,0,0,,Sometimes people call this preorder depth first, because I'm going to the deepest things first. Tree traversal.
Dialogue: 0,0:09:14.14,0:09:21.10,中文,,0,0,0,,有时人们称之为先序深度优先因为我先访问最深层的东西 树遍历
Dialogue: 0,0:09:21.10,0:09:29.05,英文,,0,0,0,,And the preorder, as we'll see, comes from the fact that I am visiting the node, printing it, before I visit its left and right children.
Dialogue: 0,0:09:21.10,0:09:29.05,中文,,0,0,0,,而且正如我们将看到的那样先序遍历源自于我访问节点、打印节点再访问其左右子节点
Dialogue: 0,0:09:29.05,0:09:30.65,英文,,0,0,0,,OK.
Dialogue: 0,0:09:30.65,0:09:32.27,英文,,0,0,0,,So that's pre-order, we saw it.
Dialogue: 0,0:09:30.65,0:09:32.27,中文,,0,0,0,,这就是先序遍历我们看到了
Dialogue: 0,0:09:32.27,0:09:36.62,英文,,0,0,0,,You visit the node first and do something to the node, and then you look at its children.
Dialogue: 0,0:09:32.27,0:09:36.62,中文,,0,0,0,,你首先访问节点并对节点执行某些操作再看它的子节点
Dialogue: 0,0:09:36.62,0:09:39.14,英文,,0,0,0,,But what if I swapped the orders around a little bit?
Dialogue: 0,0:09:36.62,0:09:39.14,中文,,0,0,0,,但是如果我稍微改变一下顺序呢
Dialogue: 0,0:09:39.14,0:09:42.86,英文,,0,0,0,,What if I said, how about you visit the left child first?
Dialogue: 0,0:09:39.14,0:09:42.86,中文,,0,0,0,,如果我说你先访问左子节点呢
Dialogue: 0,0:09:42.86,0:09:47.06,英文,,0,0,0,,Then you do the thing to the current node, then you visit the right child.
Dialogue: 0,0:09:42.86,0:09:47.06,中文,,0,0,0,,你对当前节点执行操作接着访问右子节点
Dialogue: 0,0:09:47.06,0:09:51.47,英文,,0,0,0,,If you do that, you get another order that makes sense, and it's called in-order traversal.
Dialogue: 0,0:09:47.06,0:09:51.47,中文,,0,0,0,,这样做你会得到另一种有意义的顺序这就是所谓的中序遍历
Dialogue: 0,0:09:51.47,0:09:57.91,英文,,0,0,0,,So the difference is, instead of visiting and then looking at its children, I'm going to look at the left child,
Dialogue: 0,0:09:51.47,0:09:57.91,中文,,0,0,0,,区别在于不是先访问节点再看它的子节点我会先看左子节点
Dialogue: 0,0:09:57.91,0:09:59.41,英文,,0,0,0,,Then I'm going to visit you.
Dialogue: 0,0:09:57.91,0:09:59.41,中文,,0,0,0,,我会访问你
Dialogue: 0,0:09:59.41,0:10:01.61,英文,,0,0,0,,Then I'm going to look at all of your right children.
Dialogue: 0,0:09:59.41,0:10:01.61,中文,,0,0,0,,我会看你所有的右子节点
Dialogue: 0,0:10:01.61,0:10:04.65,英文,,0,0,0,,That gives you something called in-order traversal.
Dialogue: 0,0:10:01.61,0:10:04.65,中文,,0,0,0,,这就给你一个叫做中序遍历的东西
Dialogue: 0,0:10:04.65,0:10:05.77,英文,,0,0,0,,So we can do it together.
Dialogue: 0,0:10:04.65,0:10:05.77,中文,,0,0,0,,我们可以一起做
Dialogue: 0,0:10:05.77,0:10:09.16,英文,,0,0,0,,I'm not going to walk through the whole call stag.
Dialogue: 0,0:10:05.77,0:10:09.16,中文,,0,0,0,,我不打算走整个调用栈
Dialogue: 0,0:10:09.16,0:10:15.52,英文,,0,0,0,,But this time, I'm going to call in-order on D. And unlike last time, can I visit D right away?
Dialogue: 0,0:10:09.16,0:10:15.52,中文,,0,0,0,,但这一次我要按顺序在D上调用而且不像上次那样我能立即访问D吗
Dialogue: 0,0:10:15.52,0:10:16.14,英文,,0,0,0,,Well, not yet.
Dialogue: 0,0:10:15.52,0:10:16.14,中文,,0,0,0,,还没有
Dialogue: 0,0:10:16.14,0:10:18.95,英文,,0,0,0,,I have to go do all.
Dialogue: 0,0:10:16.14,0:10:18.95,中文,,0,0,0,,我必须去做所有的事情
Dialogue: 0,0:10:18.95,0:10:26.00,英文,,0,0,0,,Sorry, all of D's left child first, then I can visit D, then I will visit all of D's right children.
Dialogue: 0,0:10:18.95,0:10:26.00,中文,,0,0,0,,抱歉我必须先访问D的所有左子节点才能访问D我会访问D的所有右子节点
Dialogue: 0,0:10:26.00,0:10:28.12,英文,,0,0,0,,So let's go visit all of D's left children.
Dialogue: 0,0:10:26.00,0:10:28.12,中文,,0,0,0,,让我们去访问D的所有左子节点
Dialogue: 0,0:10:28.12,0:10:31.13,英文,,0,0,0,,And again, I have B. Can I instantly visit B?
Dialogue: 0,0:10:28.12,0:10:31.13,中文,,0,0,0,,而且我再次有了B我可以立即访问B吗
Dialogue: 0,0:10:31.13,0:10:31.71,英文,,0,0,0,,Well, not yet.
Dialogue: 0,0:10:31.13,0:10:31.71,中文,,0,0,0,,好吧还没
Dialogue: 0,0:10:31.71,0:10:37.01,英文,,0,0,0,,It says I got to visit the left child first, then I can visit B, then I can visit its right child.
Dialogue: 0,0:10:31.71,0:10:37.01,中文,,0,0,0,,它说我得先访问左子树我可以访问 B我可以访问它的右子树
Dialogue: 0,0:10:37.01,0:10:38.76,英文,,0,0,0,,So I get A.
Dialogue: 0,0:10:37.01,0:10:38.76,中文,,0,0,0,,我得到 A
Dialogue: 0,0:10:38.76,0:10:42.18,英文,,0,0,0,,Then I get B, because I finished visiting B's left child.
Dialogue: 0,0:10:38.76,0:10:42.18,中文,,0,0,0,,我得到 B因为我完成了访问 B 的左子树
Dialogue: 0,0:10:42.18,0:10:44.41,英文,,0,0,0,,Then I get C, that's B's right child.
Dialogue: 0,0:10:42.18,0:10:44.41,中文,,0,0,0,,我得到 C那是 B 的右子树
Dialogue: 0,0:10:44.41,0:10:54.79,英文,,0,0,0,,And only after doing A, B, C, the entire left half of D, now I'm ready to visit D, because I have to visit your whole left side before visiting U.
Dialogue: 0,0:10:44.41,0:10:54.79,中文,,0,0,0,,只有在完成了 A、B、C、D 的整个左半部分后我现在才能访问 D因为在访问 U 之前我必须先访问整个左侧
Dialogue: 0,0:10:54.79,0:10:58.33,英文,,0,0,0,,Now that I'm finished visiting your left side, I can go visit your right side.
Dialogue: 0,0:10:54.79,0:10:58.33,中文,,0,0,0,,现在我访问完你的左侧我可以去访问你的右侧了
Dialogue: 0,0:10:58.33,0:11:00.76,英文,,0,0,0,,And again, I cannot visit F right away.
Dialogue: 0,0:10:58.33,0:11:00.76,中文,,0,0,0,,再次强调我不能立刻访问 F
Dialogue: 0,0:11:00.76,0:11:06.38,英文,,0,0,0,,I have to visit its left child first, then I visit F, then I visit its right child.
Dialogue: 0,0:11:00.76,0:11:06.38,中文,,0,0,0,,我必须先访问它的左子节点再访问 F访问它的右子节点
Dialogue: 0,0:11:06.38,0:11:12.96,英文,,0,0,0,,So I get the order, A, B, C, D, E, F, G. That would be the in-order traversal.
Dialogue: 0,0:11:06.38,0:11:12.96,中文,,0,0,0,,我得到了顺序ABCDEFG这就是中序遍历
Dialogue: 0,0:11:12.96,0:11:16.78,英文,,0,0,0,,OK, I hope you're really excited for the last one, which is post-order.
Dialogue: 0,0:11:12.96,0:11:16.78,中文,,0,0,0,,希望你对最后一个非常兴奋那就是后序遍历
Dialogue: 0,0:11:16.78,0:11:20.55,英文,,0,0,0,,So this time, I'm still doing the same recursive steps.
Dialogue: 0,0:11:16.78,0:11:20.55,中文,,0,0,0,,这一次我仍然执行相同的递归步骤
Dialogue: 0,0:11:20.55,0:11:26.73,英文,,0,0,0,,But this time, I'm going to dictate, we first visit the left and right children, and then we visit the node.
Dialogue: 0,0:11:20.55,0:11:26.73,中文,,0,0,0,,但这一次我要说明我们先访问左右子节点再访问节点
Dialogue: 0,0:11:26.73,0:11:31.11,英文,,0,0,0,,So no visiting nodes until all of its children have been explored.
Dialogue: 0,0:11:26.73,0:11:31.11,中文,,0,0,0,,在探索完所有子节点之前不要访问节点
Dialogue: 0,0:11:31.11,0:11:33.63,英文,,0,0,0,,So this time, I guess it's up to you.
Dialogue: 0,0:11:31.11,0:11:33.63,中文,,0,0,0,,这次我猜轮到你了
Dialogue: 0,0:11:33.63,0:11:37.48,英文,,0,0,0,,While I quickly clear my throat, tell me which one you like out of the five.
Dialogue: 0,0:11:33.63,0:11:37.48,中文,,0,0,0,,我赶紧清了清嗓子告诉我你喜欢五个中的哪一个
Dialogue: 0,0:11:37.48,0:11:41.48,英文,,0,0,0,,Which order do you think is resulting from this recursive code?
Dialogue: 0,0:11:37.48,0:11:41.48,中文,,0,0,0,,你觉得这个递归代码得出的顺序是什么
Dialogue: 0,0:11:41.48,0:11:44.59,英文,,0,0,0,,Go.
Dialogue: 0,0:11:41.48,0:11:44.59,中文,,0,0,0,,开始
Dialogue: 0,0:11:44.59,0:12:01.73,英文,,0,0,0,,OK, so one thing you can notice as kind of a hint to eliminate some of these answers is, well, remember, you can only visit D. You're only licensed to visit D after you visit all of its left children and all of its right children.
Dialogue: 0,0:11:44.59,0:12:01.73,中文,,0,0,0,,你可以注意到的一点作为消除某些答案的提示是记住你只能访问 D在访问所有左子节点和所有右子节点之后你才能访问 D
Dialogue: 0,0:12:01.73,0:12:04.15,英文,,0,0,0,,So you can think, would 1 be valid?
Dialogue: 0,0:12:01.73,0:12:04.15,中文,,0,0,0,,你可以思考1 是有效的吗
Dialogue: 0,0:12:04.15,0:12:06.07,英文,,0,0,0,,Is it OK to visit D?
Dialogue: 0,0:12:04.15,0:12:06.07,中文,,0,0,0,,访问 D 没问题吗
Dialogue: 0,0:12:06.07,0:12:08.83,英文,,0,0,0,,before visiting B, A, C, E, F, G?
Dialogue: 0,0:12:06.07,0:12:08.83,中文,,0,0,0,,在访问B之前A、C、E、F、G
Dialogue: 0,0:12:08.83,0:12:09.79,英文,,0,0,0,,Well, that's not valid.
Dialogue: 0,0:12:08.83,0:12:09.79,中文,,0,0,0,,那是不合法的
Dialogue: 0,0:12:09.79,0:12:17.10,英文,,0,0,0,,This code says I got to visit all of D's children before I am allowed to visit D. So we know 1 is no good.
Dialogue: 0,0:12:09.79,0:12:17.10,中文,,0,0,0,,这段代码说我必须在访问D之前访问其所有子节点我们知道1是不行的
Dialogue: 0,0:12:17.10,0:12:24.08,英文,,0,0,0,,For the same reason we know 2 is no good, because it's visiting some of D's children before visiting D. We know D has to come last.
Dialogue: 0,0:12:17.10,0:12:24.08,中文,,0,0,0,,出于同样的原因我们知道2也是不行的因为它在访问D之前访问了其中一些子节点我们知道D必须最后访问
Dialogue: 0,0:12:24.08,0:12:25.73,英文,,0,0,0,,So it's got to be one of these three.
Dialogue: 0,0:12:24.08,0:12:25.73,中文,,0,0,0,,只能是这三个中的一个
Dialogue: 0,0:12:25.73,0:12:31.27,英文,,0,0,0,,And kind of using the same reasoning, I can't visit B until both of its children are visited.
Dialogue: 0,0:12:25.73,0:12:31.27,中文,,0,0,0,,用相同的推理方式我不能访问B直到它的两个子节点都被访问
Dialogue: 0,0:12:31.27,0:12:33.15,英文,,0,0,0,,And I can't visit F.
Dialogue: 0,0:12:31.27,0:12:33.15,中文,,0,0,0,,而且我不能访问F
Dialogue: 0,0:12:33.15,0:12:38.78,英文,,0,0,0,,until both of its children are visited, you end up getting order number four.
Dialogue: 0,0:12:33.15,0:12:38.78,中文,,0,0,0,,直到访问了它的两个子节点你最终得到了编号四的顺序
Dialogue: 0,0:12:38.78,0:12:52.99,英文,,0,0,0,,A, C, B. So you visit A and C. Only then are you licensed to visit B. Then you visit E and G. Only after that can you visit F. And only after you visited all the children can you visit D. So that's the post-order traversal.
Dialogue: 0,0:12:38.78,0:12:52.99,中文,,0,0,0,,A、C、B你先访问 A 和 C只有在这之后你才有资格访问 B你访问 E 和 G只有在那之后你才能访问 F只有在你访问了所有子节点之后你才能访问 D这就是后序遍历
Dialogue: 0,0:12:52.99,0:12:57.47,英文,,0,0,0,,So at this point, you could probably follow all of these with enough paper and effort.
Dialogue: 0,0:12:52.99,0:12:57.47,中文,,0,0,0,,在这一点上你可能会用足够的纸张和努力来跟随所有这些
Dialogue: 0,0:12:57.47,0:13:01.90,英文,,0,0,0,,But I'm not going to lie, following the recursive code is kind of annoying.
Dialogue: 0,0:12:57.47,0:13:01.90,中文,,0,0,0,,但我不会撒谎跟踪递归代码有点烦人
Dialogue: 0,0:13:01.90,0:13:05.80,英文,,0,0,0,,So I'll show you a little trick just to make things a little bit faster for you.
Dialogue: 0,0:13:01.90,0:13:05.80,中文,,0,0,0,,我会给你展示一个小技巧让事情变得稍微快一点
Dialogue: 0,0:13:05.80,0:13:08.68,英文,,0,0,0,,So the trick is, and this is something for humans.
Dialogue: 0,0:13:05.80,0:13:08.68,中文,,0,0,0,,这个技巧是这是为了人类而设计的
Dialogue: 0,0:13:08.68,0:13:11.36,英文,,0,0,0,,We can do this because we can draw the tree and look at it.
Dialogue: 0,0:13:08.68,0:13:11.36,中文,,0,0,0,,我们可以做到这一点因为我们可以画出树并查看它
Dialogue: 0,0:13:11.36,0:13:14.26,英文,,0,0,0,,Computers, they would have to run this recursive code.
Dialogue: 0,0:13:11.36,0:13:14.26,中文,,0,0,0,,计算机它们必须运行这个递归代码
Dialogue: 0,0:13:14.26,0:13:18.86,英文,,0,0,0,,But since we are humans, we can do this little trick, which is,
Dialogue: 0,0:13:14.26,0:13:18.86,中文,,0,0,0,,但是由于我们是人类我们可以做这个小技巧就是
Dialogue: 0,0:13:18.86,0:13:26.53,英文,,0,0,0,,You draw the tree, and then you trace, using your little finger, a line around the entire graph, going counterclockwise.
Dialogue: 0,0:13:18.86,0:13:26.53,中文,,0,0,0,,你画出树用你的小手指在整个图形周围画一条线逆时针方向
Dialogue: 0,0:13:26.53,0:13:28.97,英文,,0,0,0,,So you start at the root, and you trace.
Dialogue: 0,0:13:26.53,0:13:28.97,中文,,0,0,0,,你从根开始然后你追踪
Dialogue: 0,0:13:28.97,0:13:31.82,英文,,0,0,0,,Hopefully you can see my mouse complaining at me if you can't.
Dialogue: 0,0:13:28.97,0:13:31.82,中文,,0,0,0,,希望你能看到我的鼠标在抱怨如果你看不到的话
Dialogue: 0,0:13:31.82,0:13:37.03,英文,,0,0,0,,So we start here, and we trace all the way around the tree.
Dialogue: 0,0:13:31.82,0:13:37.03,中文,,0,0,0,,我们从这里开始然后我们沿着树追踪到底
Dialogue: 0,0:13:37.03,0:13:43.05,英文,,0,0,0,,And if you're doing pre-order traversal, then you visit the node anytime you pass by the node to its left.
Dialogue: 0,0:13:37.03,0:13:43.05,中文,,0,0,0,,如果你正在进行前序遍历那么每次经过节点的左边时都会访问节点
Dialogue: 0,0:13:43.05,0:13:47.93,英文,,0,0,0,,If you're doing in-order traversal, you visit the node anytime you cross the bottom of the node.
Dialogue: 0,0:13:43.05,0:13:47.93,中文,,0,0,0,,如果你在进行中序遍历那么你在穿过节点底部时就会访问该节点
Dialogue: 0,0:13:47.93,0:13:52.58,英文,,0,0,0,,And if you do post-order, you visit anytime you've crossed by the right side of a node.
Dialogue: 0,0:13:47.93,0:13:52.58,中文,,0,0,0,,而如果你进行后序遍历那么你在穿过节点的右侧时就会访问
Dialogue: 0,0:13:52.58,0:13:53.94,英文,,0,0,0,,So I'll give you an example.
Dialogue: 0,0:13:52.58,0:13:53.94,中文,,0,0,0,,我给你举个例子
Dialogue: 0,0:13:53.94,0:13:55.74,英文,,0,0,0,,Let's do pre-order together.
Dialogue: 0,0:13:53.94,0:13:55.74,中文,,0,0,0,,我们一起做前序遍历
Dialogue: 0,0:13:55.74,0:13:56.82,英文,,0,0,0,,So I start here.
Dialogue: 0,0:13:55.74,0:13:56.82,中文,,0,0,0,,我从这里开始
Dialogue: 0,0:13:56.82,0:13:57.50,英文,,0,0,0,,My mouse is here.
Dialogue: 0,0:13:56.82,0:13:57.50,中文,,0,0,0,,我的鼠标在这里
Dialogue: 0,0:13:57.50,0:14:01.60,英文,,0,0,0,,And remember, any time you pass by a node to its left, you visit it.
Dialogue: 0,0:13:57.50,0:14:01.60,中文,,0,0,0,,记住每当你经过一个节点的左侧时都要访问它
Dialogue: 0,0:14:01.60,0:14:02.76,英文,,0,0,0,,So I start here.
Dialogue: 0,0:14:01.60,0:14:02.76,中文,,0,0,0,,这里我开始
Dialogue: 0,0:14:02.76,0:14:04.12,英文,,0,0,0,,And look, I'm passing by 1.
Dialogue: 0,0:14:02.76,0:14:04.12,中文,,0,0,0,,看我经过 1
Dialogue: 0,0:14:04.12,0:14:05.45,英文,,0,0,0,,I'm passing by its left.
Dialogue: 0,0:14:04.12,0:14:05.45,中文,,0,0,0,,我经过它的左侧
Dialogue: 0,0:14:05.45,0:14:07.07,英文,,0,0,0,,So I visit 1.
Dialogue: 0,0:14:05.45,0:14:07.07,中文,,0,0,0,,我访问 1
Dialogue: 0,0:14:07.07,0:14:09.85,英文,,0,0,0,,And look, oh, I'm passing by 2 on its left side.
Dialogue: 0,0:14:07.07,0:14:09.85,中文,,0,0,0,,看哦我经过 2 在它的左侧
Dialogue: 0,0:14:09.85,0:14:11.21,英文,,0,0,0,,So I visit 2.
Dialogue: 0,0:14:09.85,0:14:11.21,中文,,0,0,0,,我访问 2
Dialogue: 0,0:14:11.21,0:14:11.87,英文,,0,0,0,,I visit 4.
Dialogue: 0,0:14:11.21,0:14:11.87,中文,,0,0,0,,我访问 4
Dialogue: 0,0:14:11.87,0:14:14.65,英文,,0,0,0,,OK, now I'm passing by the right, so I don't care.
Dialogue: 0,0:14:11.87,0:14:14.65,中文,,0,0,0,,现在我从右边路过我不在乎
Dialogue: 0,0:14:14.65,0:14:15.93,英文,,0,0,0,,Oh, I'm passing by the left side of 5.
Dialogue: 0,0:14:14.65,0:14:15.93,中文,,0,0,0,,哦我从5的左边路过
Dialogue: 0,0:14:15.93,0:14:18.05,英文,,0,0,0,,So 5 comes next.
Dialogue: 0,0:14:15.93,0:14:18.05,中文,,0,0,0,,接下来是5
Dialogue: 0,0:14:18.05,0:14:20.96,英文,,0,0,0,,Oh, I passed by 7, so 7 comes next.
Dialogue: 0,0:14:18.05,0:14:20.96,中文,,0,0,0,,哦我路过了7下一个是7
Dialogue: 0,0:14:20.96,0:14:23.34,英文,,0,0,0,,Oh, passing by 8, so 8 comes next.
Dialogue: 0,0:14:20.96,0:14:23.34,中文,,0,0,0,,哦路过8下一个是8
Dialogue: 0,0:14:23.34,0:14:26.52,英文,,0,0,0,,And then I passed by 3, 6, 9.
Dialogue: 0,0:14:23.34,0:14:26.52,中文,,0,0,0,,然后我路过了3、6、9
Dialogue: 0,0:14:26.52,0:14:37.82,英文,,0,0,0,,So the order is 1, 2, 4, 7, sorry, 4, 5, 7, 8, 3, 6, 9, whatever I just said.
Dialogue: 0,0:14:26.52,0:14:37.82,中文,,0,0,0,,顺序是1、2、4、7对不起4、5、7、8、3、6、9不管我刚才说了什么
Dialogue: 0,0:14:37.82,0:14:41.82,英文,,0,0,0,,In order, you would visit any time you cross by the bottom of the node.
Dialogue: 0,0:14:37.82,0:14:41.82,中文,,0,0,0,,按顺序来你会在穿过节点底部的任何时间都可以访问
Dialogue: 0,0:14:41.82,0:14:43.27,英文,,0,0,0,,So here I go again.
Dialogue: 0,0:14:41.82,0:14:43.27,中文,,0,0,0,,我再次开始
Dialogue: 0,0:14:43.27,0:14:46.61,英文,,0,0,0,,I'm not crossing the bottom of any node yet, so I keep going, I keep going.
Dialogue: 0,0:14:43.27,0:14:46.61,中文,,0,0,0,,我还没有穿过任何节点的底部我继续前进我继续前进
Dialogue: 0,0:14:46.61,0:15:01.67,英文,,0,0,0,,Oh, I'm crossing the bottom of 4, so 4 comes first this time, and then 2, and then 7, and then 5, because I'm crossing by the bottom of 5 now, and then 8, and then 1, because I'm crossing below 1, and then 3, 6, 9.
Dialogue: 0,0:14:46.61,0:15:01.67,中文,,0,0,0,,哦我穿过了4的底部这次先是4是2是7然后是5因为我现在穿过了5的底部然后是8然后是1因为我在1下面穿过然后是3、6、9
Dialogue: 0,0:15:01.67,0:15:07.07,英文,,0,0,0,,So whatever I just said, that's in-order traversal, unless I mess something up.
Dialogue: 0,0:15:01.67,0:15:07.07,中文,,0,0,0,,我刚才说的话那就是中序遍历除非我搞错了什么
Dialogue: 0,0:15:07.07,0:15:08.54,英文,,0,0,0,,Now we can do post-order.
Dialogue: 0,0:15:07.07,0:15:08.54,中文,,0,0,0,,现在我们可以做后序遍历了
Dialogue: 0,0:15:08.54,0:15:11.04,英文,,0,0,0,,So now we visit, and we cross the right side of a node.
Dialogue: 0,0:15:08.54,0:15:11.04,中文,,0,0,0,,现在我们访问然后穿过节点的右侧
Dialogue: 0,0:15:11.04,0:15:12.32,英文,,0,0,0,,So I start here.
Dialogue: 0,0:15:11.04,0:15:12.32,中文,,0,0,0,,我从这里开始
Dialogue: 0,0:15:12.32,0:15:18.17,英文,,0,0,0,,I'm not crossing the right side of any node yet until, oh, I've crossed by the right side of 4.
Dialogue: 0,0:15:12.32,0:15:18.17,中文,,0,0,0,,直到哦我已经通过了节点4的右侧我还没有穿过任何节点的右侧
Dialogue: 0,0:15:18.17,0:15:19.93,英文,,0,0,0,,Not crossing by the right side of anything.
Dialogue: 0,0:15:18.17,0:15:19.93,中文,,0,0,0,,不穿过任何节点的右侧
Dialogue: 0,0:15:19.93,0:15:23.77,英文,,0,0,0,,Oh, crossed by the right side of 7.
Dialogue: 0,0:15:19.93,0:15:23.77,中文,,0,0,0,,哦穿过了节点7的右侧
Dialogue: 0,0:15:23.77,0:15:25.07,英文,,0,0,0,,I'm so excited.
Dialogue: 0,0:15:23.77,0:15:25.07,中文,,0,0,0,,我太兴奋了
Dialogue: 0,0:15:25.07,0:15:28.15,英文,,0,0,0,,OK, so then I cross by the right side of 8.
Dialogue: 0,0:15:25.07,0:15:28.15,中文,,0,0,0,,我穿过了节点8的右侧
Dialogue: 0,0:15:28.15,0:15:30.46,英文,,0,0,0,,Then I cross by the right side of 5.
Dialogue: 0,0:15:28.15,0:15:30.46,中文,,0,0,0,,我穿过了节点5的右侧
Dialogue: 0,0:15:30.46,0:15:32.64,英文,,0,0,0,,OK, good, and then 2.
Dialogue: 0,0:15:30.46,0:15:32.64,中文,,0,0,0,,很好然后是2
Dialogue: 0,0:15:32.64,0:15:35.18,英文,,0,0,0,,And then I'm not crossing the right side of anything here.
Dialogue: 0,0:15:32.64,0:15:35.18,中文,,0,0,0,,我这里没穿过右边的任何东西
Dialogue: 0,0:15:35.18,0:15:36.26,英文,,0,0,0,,Oh, but here I go.
Dialogue: 0,0:15:35.18,0:15:36.26,中文,,0,0,0,,哦但我现在开始了
Dialogue: 0,0:15:36.26,0:15:40.76,英文,,0,0,0,,5, or sorry, 9, 6, 3, 1.
Dialogue: 0,0:15:36.26,0:15:40.76,中文,,0,0,0,,5或者抱歉9631
Dialogue: 0,0:15:40.76,0:15:42.72,英文,,0,0,0,,So that'd be post-order traversal.
Dialogue: 0,0:15:40.76,0:15:42.72,中文,,0,0,0,,那就是后序遍历
Dialogue: 0,0:15:42.72,0:15:54.05,英文,,0,0,0,,So if you like, you can draw the picture and trace out the pre-order, in-order, and post-order traversals like this, although computers would not be able to do this.
Dialogue: 0,0:15:42.72,0:15:54.05,中文,,0,0,0,,如果你愿意你可以画出这样的图片并追踪出先序遍历、中序遍历和后序遍历尽管计算机无法做到这一点
Dialogue: 0,0:15:54.05,0:15:57.95,英文,,0,0,0,,OK, thoughts, questions on traversals?
Dialogue: 0,0:15:54.05,0:15:57.95,中文,,0,0,0,,关于遍历的想法有问题吗
Dialogue: 0,0:15:57.95,0:15:58.61,英文,,0,0,0,,Do you like them?
Dialogue: 0,0:15:57.95,0:15:58.61,中文,,0,0,0,,你喜欢它们吗
Dialogue: 0,0:15:58.61,0:16:00.47,英文,,0,0,0,,Do you have questions?
Dialogue: 0,0:15:58.61,0:16:00.47,中文,,0,0,0,,有问题吗
Dialogue: 0,0:16:00.47,0:16:01.84,英文,,0,0,0,,OK.
Dialogue: 0,0:16:01.84,0:16:02.78,英文,,0,0,0,,I think they're fun.
Dialogue: 0,0:16:01.84,0:16:02.78,中文,,0,0,0,,我觉得它们很有趣
Dialogue: 0,0:16:02.78,0:16:05.12,英文,,0,0,0,,So what good are these traversals anyway?
Dialogue: 0,0:16:02.78,0:16:05.12,中文,,0,0,0,,那么这些遍历到底有什么用呢
Dialogue: 0,0:16:05.12,0:16:07.36,英文,,0,0,0,,So I'll give you a couple of small examples.
Dialogue: 0,0:16:05.12,0:16:07.36,中文,,0,0,0,,那我给你举几个小例子
Dialogue: 0,0:16:07.36,0:16:14.03,英文,,0,0,0,,So here's another file directory where I'm illustrating to you folders and subfolders and files.
Dialogue: 0,0:16:07.36,0:16:14.03,中文,,0,0,0,,这是另一个文件目录我在这里向你说明文件夹、子文件夹和文件
Dialogue: 0,0:16:14.03,0:16:18.83,英文,,0,0,0,,So I think Josh made these slides, and this is from when he was playing StarCraft 2 or whatever.
Dialogue: 0,0:16:14.03,0:16:18.83,中文,,0,0,0,,我觉得这些幻灯片是Josh做的这可能是他玩星际争霸2时做的
Dialogue: 0,0:16:18.83,0:16:21.53,英文,,0,0,0,,I have no knowledge whatsoever of that.
Dialogue: 0,0:16:18.83,0:16:21.53,中文,,0,0,0,,我对那一点都不了解
Dialogue: 0,0:16:21.53,0:16:24.30,英文,,0,0,0,,But apparently, he had this little script that he wrote.
Dialogue: 0,0:16:21.53,0:16:24.30,中文,,0,0,0,,但显然他有这个小脚本是自己写的
Dialogue: 0,0:16:24.30,0:16:32.32,英文,,0,0,0,,And he's got a folder called sc2apm, and it's got a subfolder called directoverlay, which has a bunch of other folders and files.
Dialogue: 0,0:16:24.30,0:16:32.32,中文,,0,0,0,,他有一个叫做sc2APM的文件夹里面有一个叫做directoverlay的子文件夹里面有一堆其他的文件夹和文件
Dialogue: 0,0:16:32.32,0:16:41.08,英文,,0,0,0,,So maybe one thing you want to do in your computer is you would like your terminal to print out all of the files in this beautiful indented list.
Dialogue: 0,0:16:32.32,0:16:41.08,中文,,0,0,0,,也许你想在你的电脑上做一件事情就是你希望你的终端打印出这个漂亮的缩进列表中的所有文件
Dialogue: 0,0:16:41.08,0:16:41.64,英文,,0,0,0,,Look at this list.
Dialogue: 0,0:16:41.08,0:16:41.64,中文,,0,0,0,,看看这个列表
Dialogue: 0,0:16:41.64,0:16:42.84,英文,,0,0,0,,It's so nice.
Dialogue: 0,0:16:41.64,0:16:42.84,中文,,0,0,0,,真漂亮
Dialogue: 0,0:16:42.84,0:16:47.60,英文,,0,0,0,,And it says sc2apm is the main folder, and it's got these subfolders.
Dialogue: 0,0:16:42.84,0:16:47.60,中文,,0,0,0,,而且它说sc2APM是主文件夹它有这些子文件夹
Dialogue: 0,0:16:47.60,0:16:50.61,英文,,0,0,0,,And then direct overlay's got these subfolders.
Dialogue: 0,0:16:47.60,0:16:50.61,中文,,0,0,0,,直接覆盖有这些子文件夹
Dialogue: 0,0:16:50.61,0:16:53.17,英文,,0,0,0,,And then direct IO has these subfiles.
Dialogue: 0,0:16:50.61,0:16:53.17,中文,,0,0,0,,直接IO有这些子文件
Dialogue: 0,0:16:53.17,0:16:56.79,英文,,0,0,0,,So I want to print out the files looking like this.
Dialogue: 0,0:16:53.17,0:16:56.79,中文,,0,0,0,,我想打印出这样的文件
Dialogue: 0,0:16:56.79,0:17:07.39,英文,,0,0,0,,And it turns out, you can go and try all the different traversals, that the preordered traversal would be the most natural way to print out a nice-looking directory listing like this.
Dialogue: 0,0:16:56.79,0:17:07.39,中文,,0,0,0,,结果你可以尝试所有不同的遍历方式而前序遍历会是打印出一个漂亮的目录清单的最自然的方式
Dialogue: 0,0:17:07.39,0:17:13.00,英文,,0,0,0,,Because you want to print out sc2apm before you print out all of its children.
Dialogue: 0,0:17:07.39,0:17:13.00,中文,,0,0,0,,因为你想要先打印出sc2APM再打印出它的所有子项
Dialogue: 0,0:17:13.00,0:17:18.76,英文,,0,0,0,,And likewise, you want to first print out the word direct overlay, and then print out all of its children.
Dialogue: 0,0:17:13.00,0:17:18.76,中文,,0,0,0,,同样你想先打印出单词直接覆盖再打印出它的所有子项
Dialogue: 0,0:17:18.76,0:17:24.94,英文,,0,0,0,,If you tried doing in-order or post-order, you would not get this nice-looking directory listing.
Dialogue: 0,0:17:18.76,0:17:24.94,中文,,0,0,0,,如果你尝试按照中序或后序的方式操作你将无法得到这种漂亮的目录列表
Dialogue: 0,0:17:24.94,0:17:30.11,英文,,0,0,0,,So that's just one example of why pre-order might be useful.
Dialogue: 0,0:17:24.94,0:17:30.11,中文,,0,0,0,,这就是为什么前序可能会有用的一个例子
Dialogue: 0,0:17:30.11,0:17:31.37,英文,,0,0,0,,Here's another example.
Dialogue: 0,0:17:30.11,0:17:31.37,中文,,0,0,0,,这是另一个例子
Dialogue: 0,0:17:31.37,0:17:40.75,英文,,0,0,0,,So here's the case where maybe I want to know how big each of these folders is, like how big is DirectIO, and how big is Python, and how big is SC2APM.
Dialogue: 0,0:17:31.37,0:17:40.75,中文,,0,0,0,,这里是另一种情况也许我想知道每个文件夹有多大比如directIO有多大Python有多大sc2APM有多大
Dialogue: 0,0:17:40.75,0:17:43.28,英文,,0,0,0,,So in this case,
Dialogue: 0,0:17:40.75,0:17:43.28,中文,,0,0,0,,在这种情况下
Dialogue: 0,0:17:43.28,0:17:46.68,英文,,0,0,0,,To figure out how big the files are, maybe you want to do post-order.
Dialogue: 0,0:17:43.28,0:17:46.68,中文,,0,0,0,,要想弄清楚文件有多大也许你想按照后序来做
Dialogue: 0,0:17:46.68,0:17:51.66,英文,,0,0,0,,Because say I'm visiting direct overlay and I want to know how big the file is.
Dialogue: 0,0:17:46.68,0:17:51.66,中文,,0,0,0,,因为假设我正在访问直接叠加并且想知道文件有多大
Dialogue: 0,0:17:51.66,0:17:57.75,英文,,0,0,0,,Well first, I'm going to have to traverse all of its children to collect up all the file sizes.
Dialogue: 0,0:17:51.66,0:17:57.75,中文,,0,0,0,,首先我要遍历所有的子节点来收集所有的文件大小
Dialogue: 0,0:17:57.75,0:18:01.31,英文,,0,0,0,,And only then can I tell you how big direct overlay is.
Dialogue: 0,0:17:57.75,0:18:01.31,中文,,0,0,0,,才能告诉你直接叠加的大小
Dialogue: 0,0:18:01.31,0:18:08.94,英文,,0,0,0,,And likewise, if I'm visiting Python, I have to traverse all of its children before I can tell you how big Python is.
Dialogue: 0,0:18:01.31,0:18:08.94,中文,,0,0,0,,同样地如果我正在访问Python我必须先遍历所有的子节点才能告诉你Python有多大
Dialogue: 0,0:18:08.94,0:18:14.34,英文,,0,0,0,,And likewise, with SC2APM, when I first visit SC2APM, I don't know how big it is.
Dialogue: 0,0:18:08.94,0:18:14.34,中文,,0,0,0,,同样地对于sc2APM当我首次访问sc2APM时我不知道它有多大
Dialogue: 0,0:18:14.34,0:18:17.56,英文,,0,0,0,,I have to wait until I visit all of its children.
Dialogue: 0,0:18:14.34,0:18:17.56,中文,,0,0,0,,我必须等到我访问完所有的子节点之后
Dialogue: 0,0:18:17.56,0:18:22.00,英文,,0,0,0,,before being able to collect up the total file size and tell you how big it is.
Dialogue: 0,0:18:17.56,0:18:22.00,中文,,0,0,0,,才能收集到总文件大小并告诉你它有多大
Dialogue: 0,0:18:22.00,0:18:26.30,英文,,0,0,0,,So that could be an example where post-order traversal is useful.
Dialogue: 0,0:18:22.00,0:18:26.30,中文,,0,0,0,,这可能是后序遍历很有用的一个例子
Dialogue: 0,0:18:26.30,0:18:33.95,英文,,0,0,0,,So I traverse, I find out the size of DirectIO, then I traverse everything below DirectOverlay that tells me how big this is.
Dialogue: 0,0:18:26.30,0:18:33.95,中文,,0,0,0,,我遍历我找出 directIO 的大小我遍历 directOverlay 下面的所有内容告诉我这有多大
Dialogue: 0,0:18:33.95,0:18:37.15,英文,,0,0,0,,Then I traverse everything below Python, tells me how big that is.
Dialogue: 0,0:18:33.95,0:18:37.15,中文,,0,0,0,,我遍历 Python 下面的所有内容告诉我那有多大
Dialogue: 0,0:18:37.15,0:18:44.60,英文,,0,0,0,,And only now have I traversed everything below sc2apm, and I can tell you that is the total file size.
Dialogue: 0,0:18:37.15,0:18:44.60,中文,,0,0,0,,现在我只遍历了 sc2APM 下面的所有内容我可以告诉你这是总文件大小
Dialogue: 0,0:18:44.60,0:18:52.18,英文,,0,0,0,,So another example of another traversal order maybe being more natural for a different task.
Dialogue: 0,0:18:44.60,0:18:52.18,中文,,0,0,0,,另一个例子可能会更自然地适用于不同的任务
Dialogue: 0,0:18:52.18,0:18:57.58,英文,,0,0,0,,So this is just to prove to you there are different traversals, and they're good for different things.
Dialogue: 0,0:18:52.18,0:18:57.58,中文,,0,0,0,,这只是为了向你证明有不同的遍历方式它们适用于不同的情况
Dialogue: 0,0:18:57.58,0:18:59.12,英文,,0,0,0,,OK.
Dialogue: 0,0:18:59.12,0:19:04.60,英文,,0,0,0,,Everyone happy with trees and how to iterate or traverse through them in different orders?
Dialogue: 0,0:18:59.12,0:19:04.60,中文,,0,0,0,,大家对树以及如何以不同顺序迭代或遍历它们感到满意吗
Dialogue: 0,0:19:04.60,0:19:05.48,英文,,0,0,0,,OK.
Dialogue: 0,0:19:05.48,0:19:07.52,英文,,0,0,0,,If so, anything on Zoom I should know about?
Dialogue: 0,0:19:05.48,0:19:07.52,中文,,0,0,0,,那么Zoom 上有什么我应该知道的吗
Dialogue: 0,0:19:07.52,0:19:08.24,英文,,0,0,0,,OK.
Dialogue: 0,0:19:08.24,0:19:08.82,英文,,0,0,0,,Good.
Dialogue: 0,0:19:08.82,0:19:13.79,英文,,0,0,0,,So now we can talk about graphs, which are a more general version of trees.
Dialogue: 0,0:19:08.82,0:19:13.79,中文,,0,0,0,,那么现在我们可以谈论一下图表它们是树的一个更通用的版本
Dialogue: 0,0:19:13.79,0:19:14.33,英文,,0,0,0,,I'm sorry.
Dialogue: 0,0:19:13.79,0:19:14.33,中文,,0,0,0,,抱歉
Dialogue: 0,0:19:14.33,0:19:24.30,英文,,0,0,0,,So trees, they're great for representing those hierarchical relationships like the boss and a bunch of managers or the file system that we saw.
Dialogue: 0,0:19:14.33,0:19:24.30,中文,,0,0,0,,树它们非常适合表示像老板和一群经理或者我们看到的文件系统那样的层次关系
Dialogue: 0,0:19:24.30,0:19:31.79,英文,,0,0,0,,But there are other relationships in the world that don't follow a strict hierarchy where there's like one boss and a bunch of subordinates.
Dialogue: 0,0:19:24.30,0:19:31.79,中文,,0,0,0,,但是世界上还有其他不遵循严格等级制度的关系不是像有一个老板和一群下属那样简单
Dialogue: 0,0:19:31.79,0:19:35.95,英文,,0,0,0,,So one example would be Like the map of the Paris Metro.
Dialogue: 0,0:19:31.79,0:19:35.95,中文,,0,0,0,,一个例子就像巴黎地铁的地图
Dialogue: 0,0:19:35.95,0:19:37.37,英文,,0,0,0,,So I guess this is the Paris Metro.
Dialogue: 0,0:19:35.95,0:19:37.37,中文,,0,0,0,,我想这就是巴黎地铁
Dialogue: 0,0:19:37.37,0:19:38.30,英文,,0,0,0,,Here's the map.
Dialogue: 0,0:19:37.37,0:19:38.30,中文,,0,0,0,,这是地图
Dialogue: 0,0:19:38.30,0:19:44.16,英文,,0,0,0,,There are a bunch of stations and they're connected by lines which represent the lines of the system.
Dialogue: 0,0:19:38.30,0:19:44.16,中文,,0,0,0,,有很多站点它们通过代表系统线路的线连接在一起
Dialogue: 0,0:19:44.16,0:19:46.62,英文,,0,0,0,,But in this case, that's not a tree.
Dialogue: 0,0:19:44.16,0:19:46.62,中文,,0,0,0,,但在这种情况下它不是一棵树
Dialogue: 0,0:19:46.62,0:19:51.09,英文,,0,0,0,,There's not necessarily one boss station and a bunch of subordinate stations.
Dialogue: 0,0:19:46.62,0:19:51.09,中文,,0,0,0,,不一定有一个主要站点和一堆从属站点
Dialogue: 0,0:19:51.09,0:19:55.09,英文,,0,0,0,,So in this case, this would not satisfy the definition of a tree.
Dialogue: 0,0:19:51.09,0:19:55.09,中文,,0,0,0,,在这种情况下这就不符合树的定义了
Dialogue: 0,0:19:55.09,0:20:00.68,英文,,0,0,0,,In particular, one reason why it doesn't satisfy the definition of a tree is because there are cycles.
Dialogue: 0,0:19:55.09,0:20:00.68,中文,,0,0,0,,特别是它之不符合树的定义其中一个原因是因为存在循环
Dialogue: 0,0:20:00.68,0:20:07.08,英文,,0,0,0,,For example, if I'm at station A and I want to get to station B, there are multiple ways to get between these stations.
Dialogue: 0,0:20:00.68,0:20:07.08,中文,,0,0,0,,例如如果我在A站想去B站有多种方法可以在这些站点之间移动
Dialogue: 0,0:20:07.08,0:20:08.98,英文,,0,0,0,,I could, I don't know, take this route.
Dialogue: 0,0:20:07.08,0:20:08.98,中文,,0,0,0,,我可以我不知道走这条路线
Dialogue: 0,0:20:08.98,0:20:10.96,英文,,0,0,0,,I could go the long way around.
Dialogue: 0,0:20:08.98,0:20:10.96,中文,,0,0,0,,我可以绕远路
Dialogue: 0,0:20:10.96,0:20:13.25,英文,,0,0,0,,There's lots of different ways to get between them.
Dialogue: 0,0:20:10.96,0:20:13.25,中文,,0,0,0,,有很多不同的方法可以在它们之间移动
Dialogue: 0,0:20:13.25,0:20:15.39,英文,,0,0,0,,So this is no longer a tree.
Dialogue: 0,0:20:13.25,0:20:15.39,中文,,0,0,0,,这不再是一棵树了
Dialogue: 0,0:20:15.39,0:20:19.93,英文,,0,0,0,,We need something more general to represent something like the metro map.
Dialogue: 0,0:20:15.39,0:20:19.93,中文,,0,0,0,,我们需要更一般化的东西来表示地铁地图之类的东西
Dialogue: 0,0:20:19.93,0:20:23.67,英文,,0,0,0,,So to do that, we are going to change the definition of a tree.
Dialogue: 0,0:20:19.93,0:20:23.67,中文,,0,0,0,,为了做到这一点我们要改变树的定义
Dialogue: 0,0:20:23.67,0:20:31.84,英文,,0,0,0,,So again, the definition of a tree says we have nodes, we have edges, and the rule is there's one path between any two nodes.
Dialogue: 0,0:20:23.67,0:20:31.84,中文,,0,0,0,,再次树的定义是说我们有节点我们有边规则是任意两个节点之间有一条路径
Dialogue: 0,0:20:31.84,0:20:37.66,英文,,0,0,0,,However, If you take that constraint away, this constraint is here, now it's gone.
Dialogue: 0,0:20:31.84,0:20:37.66,中文,,0,0,0,, 如果你取消了那个限制这个限制在这里现在它消失了
Dialogue: 0,0:20:37.66,0:20:40.86,英文,,0,0,0,,If you do that, you get something more general called a graph.
Dialogue: 0,0:20:37.66,0:20:40.86,中文,,0,0,0,,如果你这样做你会得到一个更一般化的东西叫做图
Dialogue: 0,0:20:40.86,0:20:45.71,英文,,0,0,0,,And the only rules of a graph are that you have a bunch of nodes, and they're connected by edges.
Dialogue: 0,0:20:40.86,0:20:45.71,中文,,0,0,0,,图的唯一规则就是你有一堆节点它们被边连接着
Dialogue: 0,0:20:45.71,0:20:50.13,英文,,0,0,0,,And it's OK if there are multiple ways to get between two nodes.
Dialogue: 0,0:20:45.71,0:20:50.13,中文,,0,0,0,,如果有多种方法可以在两个节点之间移动也是可以的
Dialogue: 0,0:20:50.13,0:20:52.07,英文,,0,0,0,,It is still a valid graph.
Dialogue: 0,0:20:50.13,0:20:52.07,中文,,0,0,0,,它仍然是一个有效的图
Dialogue: 0,0:20:52.07,0:20:55.07,英文,,0,0,0,,So now we have graph, graph, graph, graph.
Dialogue: 0,0:20:52.07,0:20:55.07,中文,,0,0,0,,现在我们有图图图图
Dialogue: 0,0:20:55.07,0:20:57.63,英文,,0,0,0,,These are all graphs.
Dialogue: 0,0:20:55.07,0:20:57.63,中文,,0,0,0,,这些都是图
Dialogue: 0,0:20:57.63,0:21:05.30,英文,,0,0,0,,And one thing I will note is that if you are a tree, you are also a graph, because a tree is a more restrictive version of a graph.
Dialogue: 0,0:20:57.63,0:21:05.30,中文,,0,0,0,,我要注意的一件事是如果你是一棵树你也是一个图因为树是图的一种更严格的版本
Dialogue: 0,0:21:05.30,0:21:07.66,英文,,0,0,0,,It's like a graph with special constraints on it.
Dialogue: 0,0:21:05.30,0:21:07.66,中文,,0,0,0,,就像一个带有特殊约束的图
Dialogue: 0,0:21:07.66,0:21:09.95,英文,,0,0,0,,But a graph, it's more general purpose.
Dialogue: 0,0:21:07.66,0:21:09.95,中文,,0,0,0,,但是图表它更通用
Dialogue: 0,0:21:09.95,0:21:12.38,英文,,0,0,0,,All of these are graphs.
Dialogue: 0,0:21:09.95,0:21:12.38,中文,,0,0,0,,所有这些都是图表
Dialogue: 0,0:21:12.38,0:21:16.27,英文,,0,0,0,,OK, so here's another example of a metro system.
Dialogue: 0,0:21:12.38,0:21:16.27,中文,,0,0,0,,这里是另一个地铁系统的例子
Dialogue: 0,0:21:16.27,0:21:19.19,英文,,0,0,0,,So this one is more familiar to us, is the BART.
Dialogue: 0,0:21:16.27,0:21:19.19,中文,,0,0,0,,这个对我们来说更熟悉就是BART
Dialogue: 0,0:21:19.19,0:21:27.46,英文,,0,0,0,,So question for you, I guess, as of, I don't know when I pulled this picture, but whenever this picture was pulled, is the BART graph a tree?
Dialogue: 0,0:21:19.19,0:21:27.46,中文,,0,0,0,,问题是我想问你我不知道我拿到这张照片是什么时候但无论这张照片是何时拍摄的BART图表是一棵树吗
Dialogue: 0,0:21:27.46,0:21:31.88,英文,,0,0,0,,That is, is there only one way to get between any two stations?
Dialogue: 0,0:21:27.46,0:21:31.88,中文,,0,0,0,,也就是说有没有一种方式可以在任意两个站点之间移动
Dialogue: 0,0:21:31.88,0:21:33.44,英文,,0,0,0,,Who says yes?
Dialogue: 0,0:21:31.88,0:21:33.44,中文,,0,0,0,,谁说是
Dialogue: 0,0:21:33.44,0:21:34.60,英文,,0,0,0,,Anyone say no?
Dialogue: 0,0:21:33.44,0:21:34.60,中文,,0,0,0,,有人说不
Dialogue: 0,0:21:34.60,0:21:35.30,英文,,0,0,0,,Anyone see the cycle?
Dialogue: 0,0:21:34.60,0:21:35.30,中文,,0,0,0,,有人看到这个循环吗
Dialogue: 0,0:21:35.30,0:21:42.29,英文,,0,0,0,,No cycle?
Dialogue: 0,0:21:35.30,0:21:42.29,中文,,0,0,0,,没有循环
Dialogue: 0,0:21:42.29,0:21:42.97,英文,,0,0,0,,Where's the cycle?
Dialogue: 0,0:21:42.29,0:21:42.97,中文,,0,0,0,,循环在哪里
Dialogue: 0,0:21:42.97,0:21:44.23,英文,,0,0,0,,OK, I think it's here.
Dialogue: 0,0:21:42.97,0:21:44.23,中文,,0,0,0,,我觉得它在这里
Dialogue: 0,0:21:44.23,0:21:51.70,英文,,0,0,0,,If I start at San Bruno, I go to Millbrae, I go back to the airport, I go to San Bruno again, Millbrae, airport.
Dialogue: 0,0:21:44.23,0:21:51.70,中文,,0,0,0,,如果我从San Bruno开始我去Millbrae再回到机场再去San BrunoMillbrae机场
Dialogue: 0,0:21:51.70,0:21:53.04,英文,,0,0,0,,So there's a little cycle here.
Dialogue: 0,0:21:51.70,0:21:53.04,中文,,0,0,0,,这里有一个小循环
Dialogue: 0,0:21:53.04,0:21:58.96,英文,,0,0,0,,If you're not convinced, then maybe you have to take a day trip out and go here and write this, write this, write this.
Dialogue: 0,0:21:53.04,0:21:58.96,中文,,0,0,0,,如果你还不相信的话也许你得出去走一趟来这里然后写这个写这个写这个
Dialogue: 0,0:21:58.96,0:22:01.92,英文,,0,0,0,,People look at you funny and you're like, but I'm trying to figure out if it's a graph.
Dialogue: 0,0:21:58.96,0:22:01.92,中文,,0,0,0,,人们会奇怪地看着你你会说但我在试图弄清楚这是否是一个图表
Dialogue: 0,0:22:01.92,0:22:04.84,英文,,0,0,0,,OK, so that's the bar graph.
Dialogue: 0,0:22:01.92,0:22:04.84,中文,,0,0,0,,那就是柱状图
Dialogue: 0,0:22:04.84,0:22:08.72,英文,,0,0,0,,I don't think it's a tree because they built this little airport extension.
Dialogue: 0,0:22:04.84,0:22:08.72,中文,,0,0,0,,我不认为这是一棵树因为他们建了这个小机场扩建
Dialogue: 0,0:22:08.72,0:22:11.51,英文,,0,0,0,,OK, so there's the cycle.
Dialogue: 0,0:22:08.72,0:22:11.51,中文,,0,0,0,,那就是循环
Dialogue: 0,0:22:11.51,0:22:19.07,英文,,0,0,0,,OK, so now I will throw some definitions at you, not because I want you to memorize all of them, but because they will come up throughout the class.
Dialogue: 0,0:22:11.51,0:22:19.07,中文,,0,0,0,,现在我会给你一些定义不是因为我想让你记住所有这些而是因为它们会在整个课程中出现
Dialogue: 0,0:22:19.07,0:22:20.83,英文,,0,0,0,,So it's good to have a reference.
Dialogue: 0,0:22:19.07,0:22:20.83,中文,,0,0,0,,有一个参考是很好的
Dialogue: 0,0:22:20.83,0:22:24.39,英文,,0,0,0,,Make sure we're all talking about graphs the same way.
Dialogue: 0,0:22:20.83,0:22:24.39,中文,,0,0,0,,确保我们都用相同的方式谈论图表
Dialogue: 0,0:22:24.39,0:22:28.74,英文,,0,0,0,,So while all of these are graphs, some of them are kind of strange.
Dialogue: 0,0:22:24.39,0:22:28.74,中文,,0,0,0,,虽然所有这些都是图表但其中一些有点奇怪
Dialogue: 0,0:22:28.74,0:22:30.90,英文,,0,0,0,,For example, look at this one.
Dialogue: 0,0:22:28.74,0:22:30.90,中文,,0,0,0,,例如看看这个
Dialogue: 0,0:22:30.90,0:22:34.14,英文,,0,0,0,,It's a graph because I have a bunch of nodes connected by edges.
Dialogue: 0,0:22:30.90,0:22:34.14,中文,,0,0,0,,它是一个图表因为我有一堆节点通过边连接
Dialogue: 0,0:22:34.14,0:22:38.94,英文,,0,0,0,,But it's a little bit weird that I have two edges connecting the same pair of nodes.
Dialogue: 0,0:22:34.14,0:22:38.94,中文,,0,0,0,,但有点奇怪的是我有两条边连接同一对节点
Dialogue: 0,0:22:38.94,0:22:41.16,英文,,0,0,0,,They're like parallel edges.
Dialogue: 0,0:22:38.94,0:22:41.16,中文,,0,0,0,,它们就像是平行边
Dialogue: 0,0:22:41.16,0:22:44.88,英文,,0,0,0,,So while this is a valid graph, it's kind of a strange one.
Dialogue: 0,0:22:41.16,0:22:44.88,中文,,0,0,0,,虽然这是一个有效的图表但它有点奇怪
Dialogue: 0,0:22:44.88,0:22:45.68,英文,,0,0,0,,And look at this one.
Dialogue: 0,0:22:44.88,0:22:45.68,中文,,0,0,0,,看看这个
Dialogue: 0,0:22:45.68,0:22:50.42,英文,,0,0,0,,It's also kind of strange, because I have an edge connecting a node to itself.
Dialogue: 0,0:22:45.68,0:22:50.42,中文,,0,0,0,,这也有点奇怪因为我有一个边连接一个节点到它自己
Dialogue: 0,0:22:50.42,0:22:54.69,英文,,0,0,0,,It doesn't violate any of our definitions, but these are kind of strange graphs.
Dialogue: 0,0:22:50.42,0:22:54.69,中文,,0,0,0,,它不违反我们的任何定义但这些图有点奇怪
Dialogue: 0,0:22:54.69,0:22:57.83,英文,,0,0,0,,So I will introduce a new term called simple graph.
Dialogue: 0,0:22:54.69,0:22:57.83,中文,,0,0,0,,我会引入一个新术语叫做简单图
Dialogue: 0,0:22:57.83,0:23:02.35,英文,,0,0,0,,So a simple graph, it's still a graph, but I'm going to introduce two constraints.
Dialogue: 0,0:22:57.83,0:23:02.35,中文,,0,0,0,,一个简单图它仍然是一个图但我要引入两个约束
Dialogue: 0,0:23:02.35,0:23:06.77,英文,,0,0,0,,One of them is, please don't have edges that connect vertices to themselves.
Dialogue: 0,0:23:02.35,0:23:06.77,中文,,0,0,0,,其中一个是请不要有边连接顶点到自己
Dialogue: 0,0:23:06.77,0:23:08.99,英文,,0,0,0,,So don't have a little loop like this.
Dialogue: 0,0:23:06.77,0:23:08.99,中文,,0,0,0,,不要有像这样的小循环
Dialogue: 0,0:23:08.99,0:23:12.54,英文,,0,0,0,,And please don't have two edges that connect the same pair of vertices.
Dialogue: 0,0:23:08.99,0:23:12.54,中文,,0,0,0,,请不要有两条连接相同顶点对的边
Dialogue: 0,0:23:12.54,0:23:15.63,英文,,0,0,0,,If you introduce these, you get something called a simple graph.
Dialogue: 0,0:23:12.54,0:23:15.63,中文,,0,0,0,,如果你引入这些你会得到一个叫做简单图的东西
Dialogue: 0,0:23:15.63,0:23:20.86,英文,,0,0,0,,So the graph in green is simple, but these two graphs are not simple.
Dialogue: 0,0:23:15.63,0:23:20.86,中文,,0,0,0,,绿色的图是简单的但这两个图不是简单的
Dialogue: 0,0:23:20.86,0:23:26.87,英文,,0,0,0,,So in this class, unless otherwise stated, we are going to assume that all the graphs are simple graphs.
Dialogue: 0,0:23:20.86,0:23:26.87,中文,,0,0,0,,在这个课上除非另有说明我们都假设所有的图都是简单图
Dialogue: 0,0:23:26.87,0:23:36.99,英文,,0,0,0,,That is, we will never have two edges connecting the same pair of vertices, and we'll never have an edge connecting a vertex to itself unless otherwise stated.
Dialogue: 0,0:23:26.87,0:23:36.99,中文,,0,0,0,,也就是说我们永远不会有两条边连接相同的顶点并且除非另有说明我们永远不会有一条边连接一个顶点到它自己
Dialogue: 0,0:23:36.99,0:23:45.34,英文,,0,0,0,,So if I ever say graph, you can assume I mean simple graph unless I specifically call out the existence of these weird edge cases.
Dialogue: 0,0:23:36.99,0:23:45.34,中文,,0,0,0,,如果我说到图你可以假设我指的是简单图除非我特别提到了这些奇怪的边缘情况的存在
Dialogue: 0,0:23:45.34,0:23:50.70,英文,,0,0,0,,And that's just because in real life, simple graphs tend to be a lot more common than these weird ones.
Dialogue: 0,0:23:45.34,0:23:50.70,中文,,0,0,0,,这只是因为在现实生活中简单图往往比这些奇怪的图更常见
Dialogue: 0,0:23:50.70,0:23:53.82,英文,,0,0,0,,But you do see these weird ones now and then.
Dialogue: 0,0:23:50.70,0:23:53.82,中文,,0,0,0,,但你偶尔确实会看到这些奇怪的
Dialogue: 0,0:23:53.82,0:23:56.04,英文,,0,0,0,,So that is a simple graph.
Dialogue: 0,0:23:53.82,0:23:56.04,中文,,0,0,0,,这是一个简单的图
Dialogue: 0,0:23:56.04,0:23:57.26,英文,,0,0,0,,OK.
Dialogue: 0,0:23:57.26,0:24:00.95,英文,,0,0,0,,So as we said, unless we state otherwise, all graphs are simple.
Dialogue: 0,0:23:57.26,0:24:00.95,中文,,0,0,0,,正如我们所说除非另有说明所有的图形都是简单的
Dialogue: 0,0:24:00.95,0:24:02.25,英文,,0,0,0,,OK.
Dialogue: 0,0:24:02.25,0:24:04.23,英文,,0,0,0,,Here are some more definitions.
Dialogue: 0,0:24:02.25,0:24:04.23,中文,,0,0,0,,这里有一些更多的定义
Dialogue: 0,0:24:04.23,0:24:08.13,英文,,0,0,0,,So sometimes when you build a graph, you have some choices you can make.
Dialogue: 0,0:24:04.23,0:24:08.13,中文,,0,0,0,,有时候当你构建一个图时你有一些选择可以做
Dialogue: 0,0:24:08.13,0:24:12.51,英文,,0,0,0,,So one choice you can make is, do you want to put arrows on the edges?
Dialogue: 0,0:24:08.13,0:24:12.51,中文,,0,0,0,,你可以做的一个选择是你想要在边上放箭头吗
Dialogue: 0,0:24:12.51,0:24:14.44,英文,,0,0,0,,Or do you not want to put arrows on the edges?
Dialogue: 0,0:24:12.51,0:24:14.44,中文,,0,0,0,,还是你不想在边上放箭头
Dialogue: 0,0:24:14.44,0:24:15.86,英文,,0,0,0,,That's a choice you can make.
Dialogue: 0,0:24:14.44,0:24:15.86,中文,,0,0,0,,这是你可以做出的一个选择
Dialogue: 0,0:24:15.86,0:24:19.84,英文,,0,0,0,,If you put arrows, we call them a directed graph, because you've
Dialogue: 0,0:24:15.86,0:24:19.84,中文,,0,0,0,,如果你放置箭头我们称它们为有向图因为你
Dialogue: 0,0:24:19.84,0:24:21.76,英文,,0,0,0,,put directions on all the arrows.
Dialogue: 0,0:24:19.84,0:24:21.76,中文,,0,0,0,,给所有的箭头标上了方向
Dialogue: 0,0:24:21.76,0:24:25.46,英文,,0,0,0,,If you don't put arrows on the graph, then you have an undirected graph.
Dialogue: 0,0:24:21.76,0:24:25.46,中文,,0,0,0,,如果你在图上不放置箭头那么你就有一个无向图
Dialogue: 0,0:24:25.46,0:24:27.87,英文,,0,0,0,,And which one you choose kind of depends on what you're modeling.
Dialogue: 0,0:24:25.46,0:24:27.87,中文,,0,0,0,,你选择哪个有点取决于你在建模什么
Dialogue: 0,0:24:27.87,0:24:32.13,英文,,0,0,0,,So maybe you're modeling a road system with one-way streets.
Dialogue: 0,0:24:27.87,0:24:32.13,中文,,0,0,0,,也许你正在建模一个具有单行道的道路系统
Dialogue: 0,0:24:32.13,0:24:39.95,英文,,0,0,0,,Well, then maybe you have to throw in the arrows to represent, hey, I can go from C to D, but I cannot go from D to C. That's your choice.
Dialogue: 0,0:24:32.13,0:24:39.95,中文,,0,0,0,,那么也许你需要添加箭头来表示嘿我可以从 C 到 D但我不能从 D 到 C这是你的选择
Dialogue: 0,0:24:39.95,0:24:46.08,英文,,0,0,0,,But if you think that all the lines could be bidirectional, maybe you like the undirected graph, it's your choice.
Dialogue: 0,0:24:39.95,0:24:46.08,中文,,0,0,0,,但如果你认为所有的线都可以是双向的也许你喜欢无向图这是你的选择
Dialogue: 0,0:24:46.08,0:24:48.24,英文,,0,0,0,,Sometimes we have graphs that are acyclic.
Dialogue: 0,0:24:46.08,0:24:48.24,中文,,0,0,0,,有时候我们有非循环的图
Dialogue: 0,0:24:48.24,0:24:49.86,英文,,0,0,0,,That is, there's no cycles.
Dialogue: 0,0:24:48.24,0:24:49.86,中文,,0,0,0,,也就是说没有循环
Dialogue: 0,0:24:49.86,0:24:54.63,英文,,0,0,0,,Like here, try to find a little cycle where you can write around in a circle like a maniac.
Dialogue: 0,0:24:49.86,0:24:54.63,中文,,0,0,0,,就像这里试着找一个小循环在里面像个疯子一样写字
Dialogue: 0,0:24:54.63,0:24:55.99,英文,,0,0,0,,There is no cycle.
Dialogue: 0,0:24:54.63,0:24:55.99,中文,,0,0,0,,这里没有循环
Dialogue: 0,0:24:55.99,0:24:58.55,英文,,0,0,0,,And so this would be an acyclic graph.
Dialogue: 0,0:24:55.99,0:24:58.55,中文,,0,0,0,,这将是一个无环图
Dialogue: 0,0:24:58.55,0:24:59.31,英文,,0,0,0,,Same with this graph.
Dialogue: 0,0:24:58.55,0:24:59.31,中文,,0,0,0,,这个图也一样
Dialogue: 0,0:24:59.31,0:25:00.43,英文,,0,0,0,,It's acyclic.
Dialogue: 0,0:24:59.31,0:25:00.43,中文,,0,0,0,,它是无环的
Dialogue: 0,0:25:00.43,0:25:03.97,英文,,0,0,0,,There's no two ways to get between the same pair of nodes.
Dialogue: 0,0:25:00.43,0:25:03.97,中文,,0,0,0,,在同一对节点之间没有两种方式
Dialogue: 0,0:25:03.97,0:25:06.39,英文,,0,0,0,,But these graphs on the bottom, they are cyclic.
Dialogue: 0,0:25:03.97,0:25:06.39,中文,,0,0,0,,但是底部的这些图是循环的
Dialogue: 0,0:25:06.39,0:25:14.00,英文,,0,0,0,,Because, for example, here I could go B, B, C, A, B, D, C, A. I could write around in this circle like a maniac.
Dialogue: 0,0:25:06.39,0:25:14.00,中文,,0,0,0,,例如在这里我可以走B、B、C、A、B、D、C、A我可以像疯子一样在这个圈子里写来写去
Dialogue: 0,0:25:14.00,0:25:17.00,英文,,0,0,0,,So these would be cyclic graphs.
Dialogue: 0,0:25:14.00,0:25:17.00,中文,,0,0,0,,这些将是循环图
Dialogue: 0,0:25:17.00,0:25:23.78,英文,,0,0,0,,And one more thing you might see now and then is sometimes people like to put numbers on the edges or labels on the edges.
Dialogue: 0,0:25:17.00,0:25:23.78,中文,,0,0,0,,还有一件事你可能会时不时看到的是有时人们喜欢在边缘放置数字或标签
Dialogue: 0,0:25:23.78,0:25:31.75,英文,,0,0,0,,And so this could represent, for example, if I'm trying to map out some roads, maybe this road is longer and this road is shorter.
Dialogue: 0,0:25:23.78,0:25:31.75,中文,,0,0,0,,举个例子如果我试图绘制一些道路也许这条路比较长而这条路比较短
Dialogue: 0,0:25:31.75,0:25:33.75,英文,,0,0,0,,And that's something we will revisit later.
Dialogue: 0,0:25:31.75,0:25:33.75,中文,,0,0,0,,这是我们稍后会重新讨论的一个问题
Dialogue: 0,0:25:33.75,0:25:38.78,英文,,0,0,0,,But just for now, know that sometimes when we draw graphs, people like to put numbers on the edges.
Dialogue: 0,0:25:33.75,0:25:38.78,中文,,0,0,0,,但现在只要知道有时当我们绘制图表时人们喜欢在边缘放置数字
Dialogue: 0,0:25:38.78,0:25:39.86,英文,,0,0,0,,And sometimes people don't.
Dialogue: 0,0:25:38.78,0:25:39.86,中文,,0,0,0,,有时候人们不这样做
Dialogue: 0,0:25:39.86,0:25:40.58,英文,,0,0,0,,It's your choice.
Dialogue: 0,0:25:39.86,0:25:40.58,中文,,0,0,0,,这是你的选择
Dialogue: 0,0:25:40.58,0:25:44.99,英文,,0,0,0,,Question?
Dialogue: 0,0:25:40.58,0:25:44.99,中文,,0,0,0,,有问题吗
Dialogue: 0,0:25:44.99,0:25:51.68,英文,,0,0,0,,Yeah, that's a great question, which you just called me out on, which is, are trees guaranteed to be undirected and acyclic?
Dialogue: 0,0:25:44.99,0:25:51.68,中文,,0,0,0,,是的这个问题问得很好你刚刚指出了那就是树是否保证是无向的且无环的
Dialogue: 0,0:25:51.68,0:25:57.68,英文,,0,0,0,,So I think it is true that trees are always going to fall in this category here, undirected acyclic.
Dialogue: 0,0:25:51.68,0:25:57.68,中文,,0,0,0,,我认为树总是属于这个类别无向无环
Dialogue: 0,0:25:57.68,0:26:08.91,英文,,0,0,0,,Although one slight note I will make that's not too important is that if you are undirected and acyclic, that does not necessarily mean you're a tree, because you could have disconnected components.
Dialogue: 0,0:25:57.68,0:26:08.91,中文,,0,0,0,,虽然我要提的一个小小的注意点不太重要那就是如果你是无向无环的不一定就是一棵树因为你可能有不相连的部分
Dialogue: 0,0:26:08.91,0:26:11.13,英文,,0,0,0,,But if that doesn't make sense, it's OK.
Dialogue: 0,0:26:08.91,0:26:11.13,中文,,0,0,0,,但如果这听起来没意义没关系
Dialogue: 0,0:26:11.13,0:26:12.43,英文,,0,0,0,,OK, good.
Dialogue: 0,0:26:11.13,0:26:12.43,中文,,0,0,0,,明白了
Dialogue: 0,0:26:12.43,0:26:13.23,英文,,0,0,0,,Others?
Dialogue: 0,0:26:12.43,0:26:13.23,中文,,0,0,0,,其他人有问题吗
Dialogue: 0,0:26:13.23,0:26:20.20,英文,,0,0,0,,Yeah, one more.
Dialogue: 0,0:26:13.23,0:26:20.20,中文,,0,0,0,,是的还有一个
Dialogue: 0,0:26:20.20,0:26:26.37,英文,,0,0,0,,The question was, if you have disconnected components, why is it not a tree?
Dialogue: 0,0:26:20.20,0:26:26.37,中文,,0,0,0,,问题是如果你有不连通的组件为什么它不是一棵树
Dialogue: 0,0:26:26.37,0:26:31.30,英文,,0,0,0,,Why is it not connected?
Dialogue: 0,0:26:26.37,0:26:31.30,中文,,0,0,0,,为什么它不是连通的
Dialogue: 0,0:26:31.30,0:26:32.62,英文,,0,0,0,,Why does it not mean trash?
Dialogue: 0,0:26:31.30,0:26:32.62,中文,,0,0,0,,为什么它不意味着垃圾
Dialogue: 0,0:26:32.62,0:26:33.98,英文,,0,0,0,,Sorry.
Dialogue: 0,0:26:32.62,0:26:33.98,中文,,0,0,0,,抱歉
Dialogue: 0,0:26:33.98,0:26:36.10,英文,,0,0,0,,Oh, you think the disconnected graph is just trash?
Dialogue: 0,0:26:33.98,0:26:36.10,中文,,0,0,0,,哦你觉得不连通的图只是垃圾
Dialogue: 0,0:26:36.10,0:26:38.54,英文,,0,0,0,,Well, maybe you want to represent disconnected components.
Dialogue: 0,0:26:36.10,0:26:38.54,中文,,0,0,0,,也许你想表示不连通的组件
Dialogue: 0,0:26:38.54,0:26:39.34,英文,,0,0,0,,I don't know.
Dialogue: 0,0:26:38.54,0:26:39.34,中文,,0,0,0,,我不知道
Dialogue: 0,0:26:39.34,0:26:41.62,英文,,0,0,0,,Maybe the next slide will help, but that's a good question.
Dialogue: 0,0:26:39.34,0:26:41.62,中文,,0,0,0,,也许下一张幻灯片会有帮助但这是一个很好的问题
Dialogue: 0,0:26:41.62,0:26:43.25,英文,,0,0,0,,Okay, sorry for the digression.
Dialogue: 0,0:26:41.62,0:26:43.25,中文,,0,0,0,,抱歉岔开话题了
Dialogue: 0,0:26:43.25,0:26:45.49,英文,,0,0,0,,So, here are some more terms.
Dialogue: 0,0:26:43.25,0:26:45.49,中文,,0,0,0,,这里还有一些术语
Dialogue: 0,0:26:45.49,0:26:55.19,英文,,0,0,0,,Again, I know I'm just throwing vocabulary at you willy-nilly, but it's good to have the same vocabulary so all the people know how smart you are when you talk about graphs.
Dialogue: 0,0:26:45.49,0:26:55.19,中文,,0,0,0,,再次我知道我在随意向你抛掷词汇但当你谈论图表时拥有相同的词汇对于让所有人知道你有多聪明是很重要的
Dialogue: 0,0:26:55.19,0:26:58.83,英文,,0,0,0,,So, Sometimes we call these little nodes nodes.
Dialogue: 0,0:26:55.19,0:26:58.83,中文,,0,0,0,, 有时我们把这些小节点称为节点
Dialogue: 0,0:26:58.83,0:27:00.89,英文,,0,0,0,,Sometimes people call them vertices.
Dialogue: 0,0:26:58.83,0:27:00.89,中文,,0,0,0,,有时人们称它们为顶点
Dialogue: 0,0:27:00.89,0:27:06.20,英文,,0,0,0,,And if they call them vertices, they are talking about the same thing most of the time.
Dialogue: 0,0:27:00.89,0:27:06.20,中文,,0,0,0,,如果他们称它们为顶点大多数时候他们说的是同一件事
Dialogue: 0,0:27:06.20,0:27:10.50,英文,,0,0,0,,And we talked about edges that connect pairs of vertices or pairs of nodes.
Dialogue: 0,0:27:06.20,0:27:10.50,中文,,0,0,0,,我们讨论了连接顶点或节点对的边
Dialogue: 0,0:27:10.50,0:27:12.78,英文,,0,0,0,,Sometimes people talk about adjacency.
Dialogue: 0,0:27:10.50,0:27:12.78,中文,,0,0,0,,有时候人们谈论邻接
Dialogue: 0,0:27:12.78,0:27:15.64,英文,,0,0,0,,And two nodes are adjacent if they're connected by an edge.
Dialogue: 0,0:27:12.78,0:27:15.64,中文,,0,0,0,,如果两个节点通过边相连它们就是相邻的
Dialogue: 0,0:27:15.64,0:27:20.91,英文,,0,0,0,,So like this little node here and this little node here, they're adjacent because there's an edge connecting them.
Dialogue: 0,0:27:15.64,0:27:20.91,中文,,0,0,0,,就像这里的小节点和这里的小节点它们是相邻的因为它们之间有一条边连接着
Dialogue: 0,0:27:20.91,0:27:25.73,英文,,0,0,0,,Sometimes people put labels on the vertices or labels on the edges.
Dialogue: 0,0:27:20.91,0:27:25.73,中文,,0,0,0,,有时人们在顶点上标记或在边上标记
Dialogue: 0,0:27:25.73,0:27:28.97,英文,,0,0,0,,If you put labels on the edges, people sometimes call them weights.
Dialogue: 0,0:27:25.73,0:27:28.97,中文,,0,0,0,,如果你在边上标记人们有时会称它们为权重
Dialogue: 0,0:27:28.97,0:27:33.78,英文,,0,0,0,,Sometimes people talk about paths, which is a sequence of vertices connected by edges.
Dialogue: 0,0:27:28.97,0:27:33.78,中文,,0,0,0,,有时候人们会谈论路径这是一系列由边连接的顶点
Dialogue: 0,0:27:33.78,0:27:35.82,英文,,0,0,0,,So I could draw a little path like here.
Dialogue: 0,0:27:33.78,0:27:35.82,中文,,0,0,0,,我可以在这里画一个小路径
Dialogue: 0,0:27:35.82,0:27:36.78,英文,,0,0,0,,Look at this path.
Dialogue: 0,0:27:35.82,0:27:36.78,中文,,0,0,0,,看这个路径
Dialogue: 0,0:27:36.78,0:27:40.40,英文,,0,0,0,,One, two, three, four edges connecting these two nodes.
Dialogue: 0,0:27:36.78,0:27:40.40,中文,,0,0,0,,一、二、三、四条边连接这两个节点
Dialogue: 0,0:27:40.40,0:27:41.78,英文,,0,0,0,,So you can do that.
Dialogue: 0,0:27:40.40,0:27:41.78,中文,,0,0,0,,你可以这样做
Dialogue: 0,0:27:41.78,0:27:44.92,英文,,0,0,0,,If you have a path that doesn't repeat vertices, it's called simple.
Dialogue: 0,0:27:41.78,0:27:44.92,中文,,0,0,0,,如果你有一个不重复顶点的路径那就叫简单路径
Dialogue: 0,0:27:44.92,0:27:46.72,英文,,0,0,0,,Again, this is not for you to memorize.
Dialogue: 0,0:27:44.92,0:27:46.72,中文,,0,0,0,,再次强调这不是让你死记硬背的
Dialogue: 0,0:27:46.72,0:27:51.35,英文,,0,0,0,,Maybe it's like a cheat sheet thing, but it's just to make sure we all know what we're talking about.
Dialogue: 0,0:27:46.72,0:27:51.35,中文,,0,0,0,,也许这就像是个小抄但目的只是为了确保我们都知道我们在说什么
Dialogue: 0,0:27:51.35,0:27:56.11,英文,,0,0,0,,If you have a path that starts and ends in the same place, it's called a cycle.
Dialogue: 0,0:27:51.35,0:27:56.11,中文,,0,0,0,,如果你有一条路径起点和终点是同一个地方这被称为循环
Dialogue: 0,0:27:56.11,0:28:01.06,英文,,0,0,0,,If you have a cycle in the graph anywhere, it's called a cyclic graph, otherwise it's acyclic.
Dialogue: 0,0:27:56.11,0:28:01.06,中文,,0,0,0,,如果图中任何位置有循环这个图就被称为有环图否则就是无环的
Dialogue: 0,0:28:01.06,0:28:06.16,英文,,0,0,0,,And if two vertices have a path between them, we say the graph is connected.
Dialogue: 0,0:28:01.06,0:28:06.16,中文,,0,0,0,,如果两个顶点之间有路径我们就说这个图是连通的
Dialogue: 0,0:28:06.16,0:28:11.35,英文,,0,0,0,,If all the vertices have paths between them, then the whole graph is connected.
Dialogue: 0,0:28:06.16,0:28:11.35,中文,,0,0,0,,如果所有顶点之间都有路径那么整个图就是连通的
Dialogue: 0,0:28:11.35,0:28:12.87,英文,,0,0,0,,Here's a couple more terms.
Dialogue: 0,0:28:11.35,0:28:12.87,中文,,0,0,0,,这里还有几个术语
Dialogue: 0,0:28:12.87,0:28:16.84,英文,,0,0,0,,If the graph is not connected, you might have some separate components.
Dialogue: 0,0:28:12.87,0:28:16.84,中文,,0,0,0,,如果图不连通你可能会有一些独立的组成部分
Dialogue: 0,0:28:16.84,0:28:20.88,英文,,0,0,0,,For example, this section, everyone's connected to each other.
Dialogue: 0,0:28:16.84,0:28:20.88,中文,,0,0,0,,比如这一部分大家都彼此相连
Dialogue: 0,0:28:20.88,0:28:23.24,英文,,0,0,0,,This section, everyone's connected to each other.
Dialogue: 0,0:28:20.88,0:28:23.24,中文,,0,0,0,,这一部分大家都彼此相连
Dialogue: 0,0:28:23.24,0:28:25.04,英文,,0,0,0,,And this section, everyone's connected.
Dialogue: 0,0:28:23.24,0:28:25.04,中文,,0,0,0,,而这一部分大家都相连
Dialogue: 0,0:28:25.04,0:28:29.10,英文,,0,0,0,,But there's no way to get between nodes in this team and nodes in this team.
Dialogue: 0,0:28:25.04,0:28:29.10,中文,,0,0,0,,但是在这个团队和那个团队之间没有办法直接连接
Dialogue: 0,0:28:29.10,0:28:31.95,英文,,0,0,0,,So they are separate, connected components.
Dialogue: 0,0:28:29.10,0:28:31.95,中文,,0,0,0,,它们是独立的、相连的组件
Dialogue: 0,0:28:31.95,0:28:35.01,英文,,0,0,0,,And maybe this represents something in your graph that you're modeling.
Dialogue: 0,0:28:31.95,0:28:35.01,中文,,0,0,0,,也许这代表了你建模的图中的某些东西
Dialogue: 0,0:28:35.01,0:28:36.05,英文,,0,0,0,,I don't know.
Dialogue: 0,0:28:35.01,0:28:36.05,中文,,0,0,0,,我不知道
Dialogue: 0,0:28:36.05,0:28:43.19,英文,,0,0,0,,One final thing I will note is that sometimes people talk about the degree of a vertex, which tells me how many outgoing edges there are.
Dialogue: 0,0:28:36.05,0:28:43.19,中文,,0,0,0,,我要注意的最后一件事是有时人们谈论顶点的度这告诉我有多少条出边
Dialogue: 0,0:28:43.19,0:28:44.07,英文,,0,0,0,,So here's an edge.
Dialogue: 0,0:28:43.19,0:28:44.07,中文,,0,0,0,,这就是一条边
Dialogue: 0,0:28:44.07,0:28:47.67,英文,,0,0,0,,It's got degree 3, because there are three edges coming out of it.
Dialogue: 0,0:28:44.07,0:28:47.67,中文,,0,0,0,,它的度是3因为有三条边从它出去
Dialogue: 0,0:28:47.67,0:28:51.62,英文,,0,0,0,,Again, I know it's a lot of words, and we'll revisit them now and then.
Dialogue: 0,0:28:47.67,0:28:51.62,中文,,0,0,0,,再说一遍我知道这些话有点多我们会不时地回顾它们
Dialogue: 0,0:28:51.62,0:28:57.76,英文,,0,0,0,,But it's just stuff that people like to say when they talk about graphs, so you can also sound smart.
Dialogue: 0,0:28:51.62,0:28:57.76,中文,,0,0,0,,但这只是人们谈论图时喜欢说的东西这样你也会显得很聪明
Dialogue: 0,0:28:57.76,0:28:59.10,英文,,0,0,0,,OK.
Dialogue: 0,0:28:59.10,0:29:02.38,英文,,0,0,0,,Great, so here's an example of a graph we saw already.
Dialogue: 0,0:28:59.10,0:29:02.38,中文,,0,0,0,,太棒了这是我们已经看过的一个图的例子
Dialogue: 0,0:29:02.38,0:29:07.05,英文,,0,0,0,,You can maybe try and use those vocabulary terms that we just learned.
Dialogue: 0,0:29:02.38,0:29:07.05,中文,,0,0,0,,也许你可以尝试使用我们刚学过的词汇
Dialogue: 0,0:29:07.05,0:29:12.21,英文,,0,0,0,,So I would say the Paris metro map is undirected because there are no arrows on the edges.
Dialogue: 0,0:29:07.05,0:29:12.21,中文,,0,0,0,,我会说巴黎地铁图是无向的因为边上没有箭头
Dialogue: 0,0:29:12.21,0:29:16.45,英文,,0,0,0,,It is connected because I can get from any station to any other station.
Dialogue: 0,0:29:12.21,0:29:16.45,中文,,0,0,0,,它是连通的因为我可以从任何一个车站到达任何其他车站
Dialogue: 0,0:29:16.45,0:29:19.68,英文,,0,0,0,,There's not like a station all by itself that I can't reach.
Dialogue: 0,0:29:16.45,0:29:19.68,中文,,0,0,0,,没有像一个孤立的车站我到不了的
Dialogue: 0,0:29:19.68,0:29:22.98,英文,,0,0,0,,It is cyclic because I can find cycles, so it's not a tree.
Dialogue: 0,0:29:19.68,0:29:22.98,中文,,0,0,0,,它是循环的因为我可以找到循环它不是一棵树
Dialogue: 0,0:29:22.98,0:29:29.60,英文,,0,0,0,,And in this case, it's a vertex label because every vertex has a color, although I do not know what the colors mean.
Dialogue: 0,0:29:22.98,0:29:29.60,中文,,0,0,0,,在这种情况下它是一个顶点标签因为每个顶点都有一种颜色尽管我不知道这些颜色代表什么
Dialogue: 0,0:29:29.60,0:29:32.04,英文,,0,0,0,,Okay, great.
Dialogue: 0,0:29:29.60,0:29:32.04,中文,,0,0,0,,好的太棒了
Dialogue: 0,0:29:32.04,0:29:32.88,英文,,0,0,0,,Those are graphs.
Dialogue: 0,0:29:32.04,0:29:32.88,中文,,0,0,0,,那些是图表
Dialogue: 0,0:29:32.88,0:29:35.48,英文,,0,0,0,,Here's another example of a graph from Project 2.
Dialogue: 0,0:29:32.88,0:29:35.48,中文,,0,0,0,,这是Project 2的另一个图表示例
Dialogue: 0,0:29:35.48,0:29:38.90,英文,,0,0,0,,Again, I have a bunch of nodes, and they're all connected up by arrows.
Dialogue: 0,0:29:35.48,0:29:38.90,中文,,0,0,0,,再次我有一堆节点它们都被箭头连接起来
Dialogue: 0,0:29:38.90,0:29:42.31,英文,,0,0,0,,In this case, this graph would be directed.
Dialogue: 0,0:29:38.90,0:29:42.31,中文,,0,0,0,,在这种情况下这个图表是有方向的
Dialogue: 0,0:29:42.31,0:29:44.69,英文,,0,0,0,,Okay, because it's got arrows.
Dialogue: 0,0:29:42.31,0:29:44.69,中文,,0,0,0,,因为它有箭头
Dialogue: 0,0:29:44.69,0:29:47.15,英文,,0,0,0,,Okay, everyone good with the graph definitions?
Dialogue: 0,0:29:44.69,0:29:47.15,中文,,0,0,0,,大家对图表的定义都明白了吗
Dialogue: 0,0:29:47.15,0:29:50.63,英文,,0,0,0,,Again, it's okay, not for you to memorize, just things we've got to know.
Dialogue: 0,0:29:47.15,0:29:50.63,中文,,0,0,0,,再次强调没关系不需要记住只是我们必须了解的事情
Dialogue: 0,0:29:50.63,0:29:51.87,英文,,0,0,0,,Okay.
Dialogue: 0,0:29:51.87,0:29:52.53,英文,,0,0,0,,Great.
Dialogue: 0,0:29:51.87,0:29:52.53,中文,,0,0,0,,太棒了
Dialogue: 0,0:29:52.53,0:29:55.21,英文,,0,0,0,,So now let's talk about some famous graph problems.
Dialogue: 0,0:29:52.53,0:29:55.21,中文,,0,0,0,,那么现在让我们谈谈一些著名的图问题
Dialogue: 0,0:29:55.21,0:29:58.73,英文,,0,0,0,,If I give you a graph, there are lots of interesting questions you could ask.
Dialogue: 0,0:29:55.21,0:29:58.73,中文,,0,0,0,,如果我给你一个图你可以问很多有趣的问题
Dialogue: 0,0:29:58.73,0:29:59.75,英文,,0,0,0,,Some of them are easy.
Dialogue: 0,0:29:58.73,0:29:59.75,中文,,0,0,0,,其中一些很简单
Dialogue: 0,0:29:59.75,0:30:00.99,英文,,0,0,0,,Some of them are hard.
Dialogue: 0,0:29:59.75,0:30:00.99,中文,,0,0,0,,有些很难
Dialogue: 0,0:30:00.99,0:30:04.46,英文,,0,0,0,,So for example, I could ask, how do you get from s to t?
Dialogue: 0,0:30:00.99,0:30:04.46,中文,,0,0,0,,例如我可以问如何从 A 到 T
Dialogue: 0,0:30:04.46,0:30:06.08,英文,,0,0,0,,What's the shortest way to get there?
Dialogue: 0,0:30:04.46,0:30:06.08,中文,,0,0,0,,怎样最快到那儿
Dialogue: 0,0:30:06.08,0:30:10.44,英文,,0,0,0,,You could say, what is the longest way to get there without using cycles?
Dialogue: 0,0:30:06.08,0:30:10.44,中文,,0,0,0,,你可以说不使用循环的情况下最慢到那儿的方式是什么
Dialogue: 0,0:30:10.44,0:30:13.90,英文,,0,0,0,,You could ask a question like, are there cycles in the graph at all?
Dialogue: 0,0:30:10.44,0:30:13.90,中文,,0,0,0,,你可以问这样一个问题图中是否存在循环
Dialogue: 0,0:30:13.90,0:30:21.85,英文,,0,0,0,,You could ask questions like, is there any way you could visit all the stations exactly once, following all the edges?
Dialogue: 0,0:30:13.90,0:30:21.85,中文,,0,0,0,,你可以问这样的问题是否有可能你能够恰好一次访问所有站点遵循所有的边
Dialogue: 0,0:30:21.85,0:30:27.34,英文,,0,0,0,,You could ask, is there a way to visit all the stations using every edge exactly once?
Dialogue: 0,0:30:21.85,0:30:27.34,中文,,0,0,0,,你可以问是否有一种方法可以访问所有站点每条边恰好使用一次
Dialogue: 0,0:30:27.34,0:30:29.78,英文,,0,0,0,,These are all questions you could ask.
Dialogue: 0,0:30:27.34,0:30:29.78,中文,,0,0,0,,这些都是你可以问的问题
Dialogue: 0,0:30:29.78,0:30:33.44,英文,,0,0,0,,And so here are some names for common questions people might ask.
Dialogue: 0,0:30:29.78,0:30:33.44,中文,,0,0,0,,以下是一些人们可能会问的常见问题的名称
Dialogue: 0,0:30:33.44,0:30:39.91,英文,,0,0,0,,So if you ask, is there a path between the two vertices, sometimes people call that ST path connectivity.
Dialogue: 0,0:30:33.44,0:30:39.91,中文,,0,0,0,,如果你问两个顶点之间是否有路径有时人们称之为ST路径连通性
Dialogue: 0,0:30:39.91,0:30:45.11,英文,,0,0,0,,If people want to know, is the entire graph connected, that's called the connectivity problem.
Dialogue: 0,0:30:39.91,0:30:45.11,中文,,0,0,0,,如果人们想知道整个图是否连通那就是连通性问题
Dialogue: 0,0:30:45.11,0:30:54.17,英文,,0,0,0,,There's a bi-connectivity problem, which is, is there a vertex where if you delete it, the graph splits into two disconnected components?
Dialogue: 0,0:30:45.11,0:30:54.17,中文,,0,0,0,,还有一个双连通性问题就是是否存在一个顶点如果你删除它图就会分裂成两个不相连的部分
Dialogue: 0,0:30:54.17,0:30:58.97,英文,,0,0,0,,If you can find a vertex like that, that would be solving the bi-connectivity problem.
Dialogue: 0,0:30:54.17,0:30:58.97,中文,,0,0,0,,如果你能找到一个这样的顶点那就是解决了双连通性问题
Dialogue: 0,0:30:58.97,0:31:02.01,英文,,0,0,0,,You could ask about the shortest path between vertices.
Dialogue: 0,0:30:58.97,0:31:02.01,中文,,0,0,0,,你可以询问顶点之间的最短路径
Dialogue: 0,0:31:02.01,0:31:04.29,英文,,0,0,0,,You could ask, does the graph have cycles?
Dialogue: 0,0:31:02.01,0:31:04.29,中文,,0,0,0,,你可以问图是否有环
Dialogue: 0,0:31:04.29,0:31:09.21,英文,,0,0,0,,I mean, we can see on a picture, but can you write an algorithm to check if graphs have cycles?
Dialogue: 0,0:31:04.29,0:31:09.21,中文,,0,0,0,,我的意思是我们可以看图片但你能写一个算法来检查图是否有环吗
Dialogue: 0,0:31:09.21,0:31:12.94,英文,,0,0,0,,You could ask, is there a cycle that uses all the edges once?
Dialogue: 0,0:31:09.21,0:31:12.94,中文,,0,0,0,,你可以问是否有一个循环能够使用所有的边一次
Dialogue: 0,0:31:12.94,0:31:17.22,英文,,0,0,0,,So can you take a tour of the whole system and use every edge once?
Dialogue: 0,0:31:12.94,0:31:17.22,中文,,0,0,0,,那你可以遍历整个系统每条边都用一次吗
Dialogue: 0,0:31:17.22,0:31:21.74,英文,,0,0,0,,Could you take a tour of the whole system but use every vertex exactly once?
Dialogue: 0,0:31:17.22,0:31:21.74,中文,,0,0,0,,你可以遍历整个系统但每个顶点只能使用一次吗
Dialogue: 0,0:31:21.74,0:31:25.64,英文,,0,0,0,,Could you draw the graph on paper where you don't have to cross some edges?
Dialogue: 0,0:31:21.74,0:31:25.64,中文,,0,0,0,,你能在纸上画出图而不必穿过某些边吗
Dialogue: 0,0:31:25.64,0:31:27.29,英文,,0,0,0,,That's a question you could ask.
Dialogue: 0,0:31:25.64,0:31:27.29,中文,,0,0,0,,这是你可以问的一个问题
Dialogue: 0,0:31:27.29,0:31:29.11,英文,,0,0,0,,You could ask, are two graphs the same?
Dialogue: 0,0:31:27.29,0:31:29.11,中文,,0,0,0,,你可以问两个图是否相同
Dialogue: 0,0:31:29.11,0:31:40.61,英文,,0,0,0,,Like if I give you two graphs, and you take the second graph, and you rearrange the edges and the vertices, kind of move them around on the paper, are they actually the same graph structure in disguise?
Dialogue: 0,0:31:29.11,0:31:40.61,中文,,0,0,0,,比如我给你两个图你拿第二个图重新排列边和顶点在纸上将它们移动它们实际上是相同的图结构吗
Dialogue: 0,0:31:40.61,0:31:42.53,英文,,0,0,0,,That's called isomorphism.
Dialogue: 0,0:31:40.61,0:31:42.53,中文,,0,0,0,,这被称为同构
Dialogue: 0,0:31:42.53,0:31:43.93,英文,,0,0,0,,So some of these we'll talk about.
Dialogue: 0,0:31:42.53,0:31:43.93,中文,,0,0,0,,我们会谈谈其中一些
Dialogue: 0,0:31:43.93,0:31:45.45,英文,,0,0,0,,Some of these we won't talk about.
Dialogue: 0,0:31:43.93,0:31:45.45,中文,,0,0,0,,有些我们不会谈论
Dialogue: 0,0:31:45.45,0:31:47.25,英文,,0,0,0,,Some of these we will solve together.
Dialogue: 0,0:31:45.45,0:31:47.25,中文,,0,0,0,,其中一些我们会一起解决
Dialogue: 0,0:31:47.25,0:31:52.73,英文,,0,0,0,,Some of these are actually still unsolved, where if you solve them, you'll become very rich and famous.
Dialogue: 0,0:31:47.25,0:31:52.73,中文,,0,0,0,,其中一些实际上还没有解决如果你解决了你将会变得非常富有和出名
Dialogue: 0,0:31:52.73,0:31:53.99,英文,,0,0,0,,OK.
Dialogue: 0,0:31:53.99,0:31:57.11,英文,,0,0,0,,So for example, these two seem kind of similar.
Dialogue: 0,0:31:53.99,0:31:57.11,中文,,0,0,0,,例如这两个看起来有点相似
Dialogue: 0,0:31:57.11,0:32:00.83,英文,,0,0,0,,One of them just says, take a tour, use every edge exactly once.
Dialogue: 0,0:31:57.11,0:32:00.83,中文,,0,0,0,,其中一个只是说参观一下确保每条边恰好使用一次
Dialogue: 0,0:32:00.83,0:32:04.24,英文,,0,0,0,,The other one says, take a tour, use every vertex exactly once.
Dialogue: 0,0:32:00.83,0:32:04.24,中文,,0,0,0,,另一个则是说参观一下确保每个顶点恰好使用一次
Dialogue: 0,0:32:04.24,0:32:08.32,英文,,0,0,0,,And it turns out, one of these is already solved like 200 years ago.
Dialogue: 0,0:32:04.24,0:32:08.32,中文,,0,0,0,,结果发现其中一个问题早在200年前就已经解决了
Dialogue: 0,0:32:08.32,0:32:10.73,英文,,0,0,0,,So you got beaten to the punch.
Dialogue: 0,0:32:08.32,0:32:10.73,中文,,0,0,0,,你被抢先了
Dialogue: 0,0:32:10.73,0:32:14.05,英文,,0,0,0,,Turns out the Hamilton tour problem, it is still unsolved.
Dialogue: 0,0:32:10.73,0:32:14.05,中文,,0,0,0,,事实证明哈密顿游历问题仍未解决
Dialogue: 0,0:32:14.05,0:32:18.41,英文,,0,0,0,,The best known algorithms just say, try every possible tour and see which one works.
Dialogue: 0,0:32:14.05,0:32:18.41,中文,,0,0,0,,目前已知的最佳算法只是尝试每种可能的游历看看哪个有效
Dialogue: 0,0:32:18.41,0:32:20.77,英文,,0,0,0,,So this one is still unsolved.
Dialogue: 0,0:32:18.41,0:32:20.77,中文,,0,0,0,,这个问题仍然没有解决
Dialogue: 0,0:32:20.77,0:32:24.23,英文,,0,0,0,,If you solve it, you will become very rich and very famous.
Dialogue: 0,0:32:20.77,0:32:24.23,中文,,0,0,0,,如果你解决了它你会变得非常富有和非常出名
Dialogue: 0,0:32:24.23,0:32:27.51,英文,,0,0,0,,So I recommend it, although it's pretty hard.
Dialogue: 0,0:32:24.23,0:32:27.51,中文,,0,0,0,,我建议尽管它很难
Dialogue: 0,0:32:27.51,0:32:29.83,英文,,0,0,0,,It's worth a million dollars, says Justin.
Dialogue: 0,0:32:27.51,0:32:29.83,中文,,0,0,0,,贾斯汀说它值一百万美元
Dialogue: 0,0:32:29.83,0:32:31.65,英文,,0,0,0,,OK, but it's very hard.
Dialogue: 0,0:32:29.83,0:32:31.65,中文,,0,0,0,,但是这很难
Dialogue: 0,0:32:31.65,0:32:38.67,英文,,0,0,0,,OK, so we won't solve the hard one today, but let's go solve one of the easy ones just to motivate why graphs are useful.
Dialogue: 0,0:32:31.65,0:32:38.67,中文,,0,0,0,,今天我们不会解决困难的问题但让我们解决一个简单的问题来激励一下为什么图表很有用
Dialogue: 0,0:32:38.67,0:32:41.70,英文,,0,0,0,,So we will solve a classic problem that's already been solved.
Dialogue: 0,0:32:38.67,0:32:41.70,中文,,0,0,0,,我们将解决一个已经解决的经典问题
Dialogue: 0,0:32:41.70,0:32:45.04,英文,,0,0,0,,It's not worth a million dollars, unfortunately, but it's still pretty fun.
Dialogue: 0,0:32:41.70,0:32:45.04,中文,,0,0,0,,不幸的是它不值一百万美元但仍然很有趣
Dialogue: 0,0:32:45.04,0:32:47.46,英文,,0,0,0,,It's called the ST connectivity problem.
Dialogue: 0,0:32:45.04,0:32:47.46,中文,,0,0,0,,这就是所谓的S T连接问题
Dialogue: 0,0:32:47.46,0:32:59.18,英文,,0,0,0,,And the question is, if I give you a source vertex x or s, so I want to start at vertex 0, and I want to reach vertex 7, I want you to tell me yes or no.
Dialogue: 0,0:32:47.46,0:32:59.18,中文,,0,0,0,,问题是如果我给你一个源顶点x或s我想从顶点0开始并且我想到达顶点7我想让你告诉我是或不是
Dialogue: 0,0:32:59.18,0:33:01.43,英文,,0,0,0,,Is there a way to get between 0 and 7?
Dialogue: 0,0:32:59.18,0:33:01.43,中文,,0,0,0,,有没有办法在0和7之间移动
Dialogue: 0,0:33:01.43,0:33:04.26,英文,,0,0,0,,That's all I need to know.
Dialogue: 0,0:33:01.43,0:33:04.26,中文,,0,0,0,,这就是我需要知道的全部
Dialogue: 0,0:33:04.26,0:33:08.76,英文,,0,0,0,,Looking at the picture, we can see, yes, I can get from 0 to 7.
Dialogue: 0,0:33:04.26,0:33:08.76,中文,,0,0,0,,从图片上看我们可以看到是的我可以从0到7
Dialogue: 0,0:33:08.76,0:33:14.42,英文,,0,0,0,,But the question is, how do I tell a computer whether I can reach 7 from 0?
Dialogue: 0,0:33:08.76,0:33:14.42,中文,,0,0,0,,但问题是我如何告诉计算机我是否可以从0到达7
Dialogue: 0,0:33:14.42,0:33:17.42,英文,,0,0,0,,So somehow we're going to have to traverse the graph.
Dialogue: 0,0:33:14.42,0:33:17.42,中文,,0,0,0,,我们必须以某种方式遍历图
Dialogue: 0,0:33:17.42,0:33:22.73,英文,,0,0,0,,That is, we need to iterate through the nodes, just like how we were iterating through the tree nodes.
Dialogue: 0,0:33:17.42,0:33:22.73,中文,,0,0,0,,也就是说我们需要遍历节点就像我们遍历树节点一样
Dialogue: 0,0:33:22.73,0:33:27.83,英文,,0,0,0,,I need to iterate through the nodes to find out whether I can reach 7.
Dialogue: 0,0:33:22.73,0:33:27.83,中文,,0,0,0,,我需要遍历节点来找出我是否能到达7
Dialogue: 0,0:33:27.83,0:33:30.93,英文,,0,0,0,,So what order should I iterate through these nodes?
Dialogue: 0,0:33:27.83,0:33:30.93,中文,,0,0,0,,那么我应该按什么顺序遍历这些节点呢
Dialogue: 0,0:33:30.93,0:33:36.99,英文,,0,0,0,,Well, I guess in the interest of time, I will give you an algorithm, and you can tell me why it's wrong.
Dialogue: 0,0:33:30.93,0:33:36.99,中文,,0,0,0,,好吧我想为了节省时间我会给你一个算法你告诉我它为什么错
Dialogue: 0,0:33:36.99,0:33:42.01,英文,,0,0,0,,So I'm going to write an algorithm that is recursive, because I like recursion.
Dialogue: 0,0:33:36.99,0:33:42.01,中文,,0,0,0,,我要写一个递归的算法因为我喜欢递归
Dialogue: 0,0:33:42.01,0:33:44.95,英文,,0,0,0,,So I will say, what's the base case?
Dialogue: 0,0:33:42.01,0:33:44.95,中文,,0,0,0,,那么我会说什么是基本情况
Dialogue: 0,0:33:44.95,0:33:49.00,英文,,0,0,0,,Well, the base case is, if I'm already there, I should return true.
Dialogue: 0,0:33:44.95,0:33:49.00,中文,,0,0,0,,基本情况是如果我已经在那里我应该返回true
Dialogue: 0,0:33:49.00,0:33:53.08,英文,,0,0,0,,So is there a way to get from, for example, 7 to 7?
Dialogue: 0,0:33:49.00,0:33:53.08,中文,,0,0,0,,那么例如从7到7有办法吗
Dialogue: 0,0:33:53.08,0:33:55.28,英文,,0,0,0,,Yes, you are right there.
Dialogue: 0,0:33:53.08,0:33:55.28,中文,,0,0,0,,是的你说得对
Dialogue: 0,0:33:55.28,0:34:00.04,英文,,0,0,0,,So if S and T are the same, return true, there is a way to get from 7 to 7.
Dialogue: 0,0:33:55.28,0:34:00.04,中文,,0,0,0,,如果S和T相同返回true从7到7有办法
Dialogue: 0,0:34:00.04,0:34:01.96,英文,,0,0,0,,You are already there.
Dialogue: 0,0:34:00.04,0:34:01.96,中文,,0,0,0,,你已经在那儿了
Dialogue: 0,0:34:01.96,0:34:05.66,英文,,0,0,0,,If that is false, then I'll say, how can I get from 0 to 7?
Dialogue: 0,0:34:01.96,0:34:05.66,中文,,0,0,0,,如果那是假的那么我会说我怎么从0到7呢
Dialogue: 0,0:34:05.66,0:34:09.19,英文,,0,0,0,,I should check all the neighbors of 0 and see if any of them can reach 7.
Dialogue: 0,0:34:05.66,0:34:09.19,中文,,0,0,0,,我应该检查0的所有邻居看看它们中是否有任何一个能到达7
Dialogue: 0,0:34:09.19,0:34:15.63,英文,,0,0,0,,So 0, you can't reach 7, so I'll ask all of your friends, in this case just 1, can you reach 7?
Dialogue: 0,0:34:09.19,0:34:15.63,中文,,0,0,0,,0你无法到达7我会问你所有的朋友在这种情况下只有1个你能到达7吗
Dialogue: 0,0:34:15.63,0:34:21.28,英文,,0,0,0,,And 1, it'll be like, well, I can't reach 7, so I'll ask all of my neighbors, 0, 2, and 4, can they reach 7?
Dialogue: 0,0:34:15.63,0:34:21.28,中文,,0,0,0,,首先就会像这样我无法到达7我会问我的所有邻居0、2和4他们能到达7吗
Dialogue: 0,0:34:21.28,0:34:25.00,英文,,0,0,0,,And then they will each recursively ask their neighbors, like, hey, 4,
Dialogue: 0,0:34:21.28,0:34:25.00,中文,,0,0,0,,他们会逐个向他们的邻居递归询问比如说嘿4
Dialogue: 0,0:34:25.00,0:34:27.04,英文,,0,0,0,,3, 1, and 5, can you reach 7?
Dialogue: 0,0:34:25.00,0:34:27.04,中文,,0,0,0,,3、1和5你们能到达7吗
Dialogue: 0,0:34:27.04,0:34:32.71,英文,,0,0,0,,And then 5 would be like, well, I don't know, but 5, 4, 2, 8, and 6, can any of you reach 7?
Dialogue: 0,0:34:27.04,0:34:32.71,中文,,0,0,0,,然后5会说我不知道但5、4、2、8和6你们中有谁能到达7吗
Dialogue: 0,0:34:32.71,0:34:38.73,英文,,0,0,0,,And so everyone's going to recursively ask their neighbors until somebody says, yes, I can reach myself.
Dialogue: 0,0:34:32.71,0:34:38.73,中文,,0,0,0,,于是每个人都会递归地向他们的邻居询问直到有人说是的我可以到达自己
Dialogue: 0,0:34:38.73,0:34:41.30,英文,,0,0,0,,So that's the algorithm sketch I have.
Dialogue: 0,0:34:38.73,0:34:41.30,中文,,0,0,0,,这就是我想到的算法概要
Dialogue: 0,0:34:41.30,0:34:43.30,英文,,0,0,0,,What's the problem?
Dialogue: 0,0:34:41.30,0:34:43.30,中文,,0,0,0,,问题是什么
Dialogue: 0,0:34:43.30,0:34:45.24,英文,,0,0,0,,0 says, can I reach 7?
Dialogue: 0,0:34:43.30,0:34:45.24,中文,,0,0,0,,0说我能到达7吗
Dialogue: 0,0:34:45.24,0:34:46.12,英文,,0,0,0,,I don't know.
Dialogue: 0,0:34:45.24,0:34:46.12,中文,,0,0,0,,我不知道
Dialogue: 0,0:34:46.12,0:34:48.22,英文,,0,0,0,,I'll ask all of my neighbors, 1.
Dialogue: 0,0:34:46.12,0:34:48.22,中文,,0,0,0,,我会问我的所有邻居1
Dialogue: 0,0:34:48.22,0:34:50.56,英文,,0,0,0,,And then 1 will say, I don't know if I can reach 7.
Dialogue: 0,0:34:48.22,0:34:50.56,中文,,0,0,0,,然后1会说我不知道我能否到达7
Dialogue: 0,0:34:50.56,0:34:53.49,英文,,0,0,0,,I'll ask all my neighbors, 0, 2, and 4.
Dialogue: 0,0:34:50.56,0:34:53.49,中文,,0,0,0,,我会问我的所有邻居0、2和4
Dialogue: 0,0:34:53.49,0:34:55.13,英文,,0,0,0,,Is there a problem there?
Dialogue: 0,0:34:53.49,0:34:55.13,中文,,0,0,0,,那里有问题吗
Dialogue: 0,0:34:55.13,0:34:57.95,英文,,0,0,0,,Well, if I ask 0 if it can reach 7, it's going to ask 1.
Dialogue: 0,0:34:55.13,0:34:57.95,中文,,0,0,0,,如果我问0能否到达7它会问1
Dialogue: 0,0:34:57.95,0:35:01.95,英文,,0,0,0,,And if I ask 1 if it can reach 7, it's going to ask 0.
Dialogue: 0,0:34:57.95,0:35:01.95,中文,,0,0,0,,如果我问1能否到达7它会问0
Dialogue: 0,0:35:01.95,0:35:05.05,英文,,0,0,0,,And if I ask 0 if it can reach 7, it's going to ask 1.
Dialogue: 0,0:35:01.95,0:35:05.05,中文,,0,0,0,,如果我问0能否到达7它会问1
Dialogue: 0,0:35:05.05,0:35:07.77,英文,,0,0,0,,So I'm going to get caught in a loop.
Dialogue: 0,0:35:05.05,0:35:07.77,中文,,0,0,0,,我会陷入循环
Dialogue: 0,0:35:07.77,0:35:10.97,英文,,0,0,0,,Because every time 0 asks 1, 1's going to ask 0.
Dialogue: 0,0:35:07.77,0:35:10.97,中文,,0,0,0,,因为每次0问11都会问0
Dialogue: 0,0:35:10.97,0:35:14.42,英文,,0,0,0,,And they're going to be stuck asking each other if they can reach 7.
Dialogue: 0,0:35:10.97,0:35:14.42,中文,,0,0,0,,他们将困在彼此询问是否能到达7的循环中
Dialogue: 0,0:35:14.42,0:35:16.26,英文,,0,0,0,,And that's just not useful.
Dialogue: 0,0:35:14.42,0:35:16.26,中文,,0,0,0,,而那只是没有用的
Dialogue: 0,0:35:16.26,0:35:22.10,英文,,0,0,0,,So I'm going to add one extra fix, which is that as soon as I ask,
Dialogue: 0,0:35:16.26,0:35:22.10,中文,,0,0,0,,我会添加一个额外的修复就是一旦我问了
Dialogue: 0,0:35:22.10,0:35:29.73,英文,,0,0,0,,If 0 can reach 7, I do not want to ask 0 its opinions a second time, because I've already asked 0 for its opinions.
Dialogue: 0,0:35:22.10,0:35:29.73,中文,,0,0,0,,如果 0 能到达 7我就不想再次询问 0 它的意见因为我已经问过 0 它的意见了
Dialogue: 0,0:35:29.73,0:35:37.28,英文,,0,0,0,,So I'm going to introduce the idea of marking a vertex so I don't ask it for its opinions twice.
Dialogue: 0,0:35:29.73,0:35:37.28,中文,,0,0,0,,我要介绍一个标记顶点的想法这样我就不会两次询问它的意见了
Dialogue: 0,0:35:37.28,0:35:38.38,英文,,0,0,0,,So the idea is the same.
Dialogue: 0,0:35:37.28,0:35:38.38,中文,,0,0,0,,这个想法是一样的
Dialogue: 0,0:35:38.38,0:35:43.30,英文,,0,0,0,,The recursive call says, can I get to 7 from 1?
Dialogue: 0,0:35:38.38,0:35:43.30,中文,,0,0,0,,递归调用说我能从 1 到达 7 吗
Dialogue: 0,0:35:43.30,0:35:44.20,英文,,0,0,0,,I don't know.
Dialogue: 0,0:35:43.30,0:35:44.20,中文,,0,0,0,,我不知道
Dialogue: 0,0:35:44.20,0:35:47.55,英文,,0,0,0,,But I will ask all of 1's neighbors if they can reach 7.
Dialogue: 0,0:35:44.20,0:35:47.55,中文,,0,0,0,,但我会问所有 1 的邻居他们能不能到达 7
Dialogue: 0,0:35:47.55,0:35:56.83,英文,,0,0,0,,And the only extra fix is that I will mark every node that I've been to so I do not visit a node twice, because that would cause the infinite loop.
Dialogue: 0,0:35:47.55,0:35:56.83,中文,,0,0,0,,唯一额外的修正是我会标记我到过的每个节点这样我就不会两次访问一个节点因为那会导致无限循环
Dialogue: 0,0:35:56.83,0:35:59.45,英文,,0,0,0,,So I don't want to ask a node for its opinion twice.
Dialogue: 0,0:35:56.83,0:35:59.45,中文,,0,0,0,,我不想两次询问一个节点的意见
Dialogue: 0,0:35:59.45,0:36:00.17,英文,,0,0,0,,So here we go.
Dialogue: 0,0:35:59.45,0:36:00.17,中文,,0,0,0,,那么我们开始吧
Dialogue: 0,0:36:00.17,0:36:01.99,英文,,0,0,0,,Let's do it together.
Dialogue: 0,0:36:00.17,0:36:01.99,中文,,0,0,0,,我们一起来做
Dialogue: 0,0:36:01.99,0:36:03.41,英文,,0,0,0,,I start with 0.
Dialogue: 0,0:36:01.99,0:36:03.41,中文,,0,0,0,,我从0开始
Dialogue: 0,0:36:03.41,0:36:08.84,英文,,0,0,0,,And because I have asked 0 for its opinions, I will mark it white so I don't ask it a second time.
Dialogue: 0,0:36:03.41,0:36:08.84,中文,,0,0,0,,因为我已经询问了0的意见我会把它标记为白色这样我就不会第二次询问它了
Dialogue: 0,0:36:08.84,0:36:10.45,英文,,0,0,0,,I don't want to get caught in a loop.
Dialogue: 0,0:36:08.84,0:36:10.45,中文,,0,0,0,,我不想陷入循环
Dialogue: 0,0:36:10.45,0:36:12.37,英文,,0,0,0,,So is 0 7?
Dialogue: 0,0:36:10.45,0:36:12.37,中文,,0,0,0,,那么0是7吗
Dialogue: 0,0:36:12.37,0:36:12.97,英文,,0,0,0,,No.
Dialogue: 0,0:36:12.37,0:36:12.97,中文,,0,0,0,,不
Dialogue: 0,0:36:12.97,0:36:16.39,英文,,0,0,0,,For all values of 0, it is not 7.
Dialogue: 0,0:36:12.97,0:36:16.39,中文,,0,0,0,,对于所有的0值它都不是7
Dialogue: 0,0:36:16.39,0:36:20.95,英文,,0,0,0,,I'm going to mark it, and I will check all of its neighbors that I have not checked before.
Dialogue: 0,0:36:16.39,0:36:20.95,中文,,0,0,0,,我要标记它然后检查我以前没有检查过的所有邻居
Dialogue: 0,0:36:20.95,0:36:23.65,英文,,0,0,0,,So 0, I don't know if it can get to 7.
Dialogue: 0,0:36:20.95,0:36:23.65,中文,,0,0,0,,0我不知道它能不能到达7
Dialogue: 0,0:36:23.65,0:36:26.69,英文,,0,0,0,,So I'll ask your neighbors, can any of your neighbors reach 7?
Dialogue: 0,0:36:23.65,0:36:26.69,中文,,0,0,0,,我会问你的邻居你们有没有一个能到达7
Dialogue: 0,0:36:26.69,0:36:28.75,英文,,0,0,0,,And so 0's got one neighbor, it's 1.
Dialogue: 0,0:36:26.69,0:36:28.75,中文,,0,0,0,,0有一个邻居就是1
Dialogue: 0,0:36:28.75,0:36:30.32,英文,,0,0,0,,So I'm going to go ask 1 if it can reach 7.
Dialogue: 0,0:36:28.75,0:36:30.32,中文,,0,0,0,,我要去问1能不能到达7
Dialogue: 0,0:36:30.32,0:36:31.94,英文,,0,0,0,,So let's do that.
Dialogue: 0,0:36:30.32,0:36:31.94,中文,,0,0,0,,那么我们就这样做吧
Dialogue: 0,0:36:31.94,0:36:37.30,英文,,0,0,0,,And here's my call stack, because when I'm done with 1, I have to return back to 0 and finish up 0.
Dialogue: 0,0:36:31.94,0:36:37.30,中文,,0,0,0,,这是我的调用栈因为当我完成 1 时我必须返回 0 并完成 0
Dialogue: 0,0:36:37.30,0:36:39.12,英文,,0,0,0,,So here I am in 1.
Dialogue: 0,0:36:37.30,0:36:39.12,中文,,0,0,0,,我在 1 这里
Dialogue: 0,0:36:39.12,0:36:41.72,英文,,0,0,0,,I mark it so I don't revisit it again later.
Dialogue: 0,0:36:39.12,0:36:41.72,中文,,0,0,0,,我标记它这样我以后就不会再访问它了
Dialogue: 0,0:36:41.72,0:36:42.40,英文,,0,0,0,,Is 1 equal to 7?
Dialogue: 0,0:36:41.72,0:36:42.40,中文,,0,0,0,,1 是否等于 7
Dialogue: 0,0:36:42.40,0:36:44.84,英文,,0,0,0,,No.
Dialogue: 0,0:36:42.40,0:36:44.84,中文,,0,0,0,,不
Dialogue: 0,0:36:44.84,0:36:46.96,英文,,0,0,0,,So I'm going to check all of one's neighbors.
Dialogue: 0,0:36:44.84,0:36:46.96,中文,,0,0,0,,我要检查所有的邻居
Dialogue: 0,0:36:46.96,0:36:49.92,英文,,0,0,0,,But I don't want to recheck the neighbors I've already been to.
Dialogue: 0,0:36:46.96,0:36:49.92,中文,,0,0,0,,但我不想再检查我已经访问过的邻居
Dialogue: 0,0:36:49.92,0:36:52.62,英文,,0,0,0,,So the recursive call says, I don't know if I can get to 7.
Dialogue: 0,0:36:49.92,0:36:52.62,中文,,0,0,0,,递归调用说我不知道能不能到达7
Dialogue: 0,0:36:52.62,0:36:56.40,英文,,0,0,0,,I'm going to ask all of my neighbors to see if any of them can reach 7.
Dialogue: 0,0:36:52.62,0:36:56.40,中文,,0,0,0,,我要问所有的邻居看看有没有人能到达7
Dialogue: 0,0:36:56.40,0:36:59.59,英文,,0,0,0,,But I'm not going to ask 0 again, because I already checked 0.
Dialogue: 0,0:36:56.40,0:36:59.59,中文,,0,0,0,,但我不会再问0因为我已经检查过0了
Dialogue: 0,0:36:59.59,0:37:01.33,英文,,0,0,0,,There's no point checking it again.
Dialogue: 0,0:36:59.59,0:37:01.33,中文,,0,0,0,,再次检查它没有意义
Dialogue: 0,0:37:01.33,0:37:03.07,英文,,0,0,0,,So 0 is marked.
Dialogue: 0,0:37:01.33,0:37:03.07,中文,,0,0,0,,0被标记了
Dialogue: 0,0:37:03.07,0:37:04.15,英文,,0,0,0,,So I don't check it again.
Dialogue: 0,0:37:03.07,0:37:04.15,中文,,0,0,0,,我不再检查它
Dialogue: 0,0:37:04.15,0:37:06.21,英文,,0,0,0,,I do not ask for its opinions again.
Dialogue: 0,0:37:04.15,0:37:06.21,中文,,0,0,0,,我不再询问它的意见
Dialogue: 0,0:37:06.21,0:37:08.71,英文,,0,0,0,,But 2 and 4 are not marked.
Dialogue: 0,0:37:06.21,0:37:08.71,中文,,0,0,0,,但是2和4都没有标记
Dialogue: 0,0:37:08.71,0:37:10.77,英文,,0,0,0,,So I should check if either of them can reach 7.
Dialogue: 0,0:37:08.71,0:37:10.77,中文,,0,0,0,,我应该检查它们中的任何一个是否能达到7
Dialogue: 0,0:37:10.77,0:37:13.23,英文,,0,0,0,,So I'll start by asking 2 if it can reach 7.
Dialogue: 0,0:37:10.77,0:37:13.23,中文,,0,0,0,,我会先问2是否能达到7
Dialogue: 0,0:37:13.23,0:37:16.03,英文,,0,0,0,,And then later, I'll come back and ask 4 if it can reach 7.
Dialogue: 0,0:37:13.23,0:37:16.03,中文,,0,0,0,,稍后我会回来问4是否能达到7
Dialogue: 0,0:37:16.03,0:37:18.15,英文,,0,0,0,,So let's start with 2.
Dialogue: 0,0:37:16.03,0:37:18.15,中文,,0,0,0,,让我们从2开始
Dialogue: 0,0:37:18.15,0:37:28.63,英文,,0,0,0,,And again, I have a call stack to remind myself when I'm done calling isConnected 2 and 7, I got to go back and finish up 1, because 1's still got to ask 4 for its opinions.
Dialogue: 0,0:37:18.15,0:37:28.63,中文,,0,0,0,,再次提醒自己我有一个调用栈在我完成调用isConnected 2和7后我必须回去完成1因为1仍然需要询问4的意见
Dialogue: 0,0:37:28.63,0:37:32.46,英文,,0,0,0,,So here I am calling 2, or calling connected on 2.
Dialogue: 0,0:37:28.63,0:37:32.46,中文,,0,0,0,,我在这里调用2或者在2上调用连接
Dialogue: 0,0:37:32.46,0:37:32.62,英文,,0,0,0,,Is 2 7?
Dialogue: 0,0:37:32.46,0:37:32.62,中文,,0,0,0,,2是7吗
Dialogue: 0,0:37:32.62,0:37:32.80,英文,,0,0,0,,No.
Dialogue: 0,0:37:32.62,0:37:32.80,中文,,0,0,0,,不是
Dialogue: 0,0:37:32.80,0:37:37.38,英文,,0,0,0,,So I'm going to check all of 2's neighbors, see if any of them can reach 7.
Dialogue: 0,0:37:32.80,0:37:37.38,中文,,0,0,0,,我要检查所有2的邻居看看它们中有没有能达到7的
Dialogue: 0,0:37:37.38,0:37:40.27,英文,,0,0,0,,So I could check 1, but I already checked 1.
Dialogue: 0,0:37:37.38,0:37:40.27,中文,,0,0,0,,我可以检查1但我已经检查过1了
Dialogue: 0,0:37:40.27,0:37:42.37,英文,,0,0,0,,So there's no point checking it a second time.
Dialogue: 0,0:37:40.27,0:37:42.37,中文,,0,0,0,,再检查一次是没有意义的
Dialogue: 0,0:37:42.37,0:37:45.65,英文,,0,0,0,,So I'm going to check all of its unmarked neighbors, which is just 5.
Dialogue: 0,0:37:42.37,0:37:45.65,中文,,0,0,0,,我要检查所有未标记的邻居也就是只有5
Dialogue: 0,0:37:45.65,0:37:47.17,英文,,0,0,0,,So let's go check 5.
Dialogue: 0,0:37:45.65,0:37:47.17,中文,,0,0,0,,我们来检查5
Dialogue: 0,0:37:47.17,0:37:51.76,英文,,0,0,0,,And again, my call stack deepens, because when I'm done with 5, I've got to go back and finish 2.
Dialogue: 0,0:37:47.17,0:37:51.76,中文,,0,0,0,,再次我的调用堆栈加深了因为当我完成5时我必须回去完成2
Dialogue: 0,0:37:51.76,0:37:52.94,英文,,0,0,0,,So here I am at 5.
Dialogue: 0,0:37:51.76,0:37:52.94,中文,,0,0,0,,我在这里是5
Dialogue: 0,0:37:52.94,0:37:54.24,英文,,0,0,0,,Is 5 7?
Dialogue: 0,0:37:52.94,0:37:54.24,中文,,0,0,0,,5是7吗
Dialogue: 0,0:37:54.24,0:37:54.84,英文,,0,0,0,,No.
Dialogue: 0,0:37:54.24,0:37:54.84,中文,,0,0,0,,不
Dialogue: 0,0:37:54.84,0:37:56.56,英文,,0,0,0,,So I'll check all of 5's neighbors.
Dialogue: 0,0:37:54.84,0:37:56.56,中文,,0,0,0,,我会检查所有5的邻居
Dialogue: 0,0:37:56.56,0:37:59.25,英文,,0,0,0,,But I don't want to recheck 2, because I already checked 2.
Dialogue: 0,0:37:56.56,0:37:59.25,中文,,0,0,0,,但我不想重新检查2因为我已经检查过2了
Dialogue: 0,0:37:59.25,0:38:03.09,英文,,0,0,0,,So I will check 4, 6, and 8.
Dialogue: 0,0:37:59.25,0:38:03.09,中文,,0,0,0,,我会检查4、6和8
Dialogue: 0,0:38:03.09,0:38:04.19,英文,,0,0,0,,Let's start with 4.
Dialogue: 0,0:38:03.09,0:38:04.19,中文,,0,0,0,,我们先从4开始
Dialogue: 0,0:38:04.19,0:38:06.28,英文,,0,0,0,,If you want to, you could have started with 6.
Dialogue: 0,0:38:04.19,0:38:06.28,中文,,0,0,0,,如果你想的话你也可以从6开始
Dialogue: 0,0:38:06.28,0:38:07.22,英文,,0,0,0,,It's up to you.
Dialogue: 0,0:38:06.28,0:38:07.22,中文,,0,0,0,,这取决于你
Dialogue: 0,0:38:07.22,0:38:08.94,英文,,0,0,0,,But I'm going to start with 4.
Dialogue: 0,0:38:07.22,0:38:08.94,中文,,0,0,0,,但我会从4开始
Dialogue: 0,0:38:08.94,0:38:12.18,英文,,0,0,0,,So I'm going to go connected to 4 and 7.
Dialogue: 0,0:38:08.94,0:38:12.18,中文,,0,0,0,,我要连接到4和7
Dialogue: 0,0:38:12.18,0:38:13.80,英文,,0,0,0,,So here I am in 4.
Dialogue: 0,0:38:12.18,0:38:13.80,中文,,0,0,0,,我在4这里
Dialogue: 0,0:38:13.80,0:38:16.54,英文,,0,0,0,,I mark it to avoid visiting it again.
Dialogue: 0,0:38:13.80,0:38:16.54,中文,,0,0,0,,我标记它以避免再次访问
Dialogue: 0,0:38:16.54,0:38:20.37,英文,,0,0,0,,I use my call stack to remind myself when I'm done with 4, you've got to go back to 5.
Dialogue: 0,0:38:16.54,0:38:20.37,中文,,0,0,0,,我使用我的调用栈来提醒自己当我完成4时你必须回到5
Dialogue: 0,0:38:20.37,0:38:21.97,英文,,0,0,0,,There's more stuff to do there.
Dialogue: 0,0:38:20.37,0:38:21.97,中文,,0,0,0,,那里还有更多事情要做
Dialogue: 0,0:38:21.97,0:38:22.89,英文,,0,0,0,,So here I am at 4.
Dialogue: 0,0:38:21.97,0:38:22.89,中文,,0,0,0,,我现在在4这里
Dialogue: 0,0:38:22.89,0:38:26.81,英文,,0,0,0,,4 is not 7, so I have to check all of its neighbors.
Dialogue: 0,0:38:22.89,0:38:26.81,中文,,0,0,0,,4不是7我必须检查它所有的邻居
Dialogue: 0,0:38:26.81,0:38:29.71,英文,,0,0,0,,So I go ask 3, are you connected to 7?
Dialogue: 0,0:38:26.81,0:38:29.71,中文,,0,0,0,,我去问3你和7相连吗
Dialogue: 0,0:38:29.71,0:38:33.15,英文,,0,0,0,,No, and crucially, 3 has no more neighbors.
Dialogue: 0,0:38:29.71,0:38:33.15,中文,,0,0,0,,不关键是3没有更多的邻居
Dialogue: 0,0:38:33.15,0:38:34.82,英文,,0,0,0,,All of its neighbors are marked.
Dialogue: 0,0:38:33.15,0:38:34.82,中文,,0,0,0,,它的所有邻居都被标记了
Dialogue: 0,0:38:34.82,0:38:41.52,英文,,0,0,0,,So 3 says, I am not 7, and none of my neighbors, I don't have any more neighbors to check.
Dialogue: 0,0:38:34.82,0:38:41.52,中文,,0,0,0,, 3 说我不是 7而且我的邻居们也不是我没有更多的邻居要检查了
Dialogue: 0,0:38:41.52,0:38:43.20,英文,,0,0,0,,All of them have already been checked.
Dialogue: 0,0:38:41.52,0:38:43.20,中文,,0,0,0,,它们都已经被检查过了
Dialogue: 0,0:38:43.20,0:38:44.81,英文,,0,0,0,,So 3 is going to return false.
Dialogue: 0,0:38:43.20,0:38:44.81,中文,,0,0,0,, 3 将返回 false
Dialogue: 0,0:38:44.81,0:38:46.01,英文,,0,0,0,,It's done.
Dialogue: 0,0:38:44.81,0:38:46.01,中文,,0,0,0,,完成了
Dialogue: 0,0:38:46.01,0:38:47.87,英文,,0,0,0,,So look, 3 is done.
Dialogue: 0,0:38:46.01,0:38:47.87,中文,,0,0,0,,看3 完成了
Dialogue: 0,0:38:47.87,0:38:49.68,英文,,0,0,0,,It returns false.
Dialogue: 0,0:38:47.87,0:38:49.68,中文,,0,0,0,,它返回 false
Dialogue: 0,0:38:49.68,0:38:50.82,英文,,0,0,0,,And does that mean I'm done?
Dialogue: 0,0:38:49.68,0:38:50.82,中文,,0,0,0,,那是不是意味着我完成了吗
Dialogue: 0,0:38:50.82,0:38:53.14,英文,,0,0,0,,Does that mean I am completely doomed?
Dialogue: 0,0:38:50.82,0:38:53.14,中文,,0,0,0,,那是不是意味着我完全完蛋了
Dialogue: 0,0:38:53.14,0:38:54.52,英文,,0,0,0,,Well, no, because I have more stuff to do.
Dialogue: 0,0:38:53.14,0:38:54.52,中文,,0,0,0,,不因为我还有更多事情要做
Dialogue: 0,0:38:54.52,0:38:58.35,英文,,0,0,0,,So I'm going to go back to 4, because that was who called 3.
Dialogue: 0,0:38:54.52,0:38:58.35,中文,,0,0,0,,我要回到 4因为那是谁叫的 3
Dialogue: 0,0:38:58.35,0:38:59.35,英文,,0,0,0,,And I'm going to finish 4.
Dialogue: 0,0:38:58.35,0:38:59.35,中文,,0,0,0,,我要完成 4
Dialogue: 0,0:38:59.35,0:39:01.27,英文,,0,0,0,,Look, I had all of this work in 4.
Dialogue: 0,0:38:59.35,0:39:01.27,中文,,0,0,0,,看我在 4 有这么多工作要做
Dialogue: 0,0:39:01.27,0:39:02.59,英文,,0,0,0,,I was halfway done.
Dialogue: 0,0:39:01.27,0:39:02.59,中文,,0,0,0,,我已经完成一半了
Dialogue: 0,0:39:02.59,0:39:05.79,英文,,0,0,0,,I checked 3 and 7 and went on a digression.
Dialogue: 0,0:39:02.59,0:39:05.79,中文,,0,0,0,,我检查了3和7然后离题了一下
Dialogue: 0,0:39:05.79,0:39:06.95,英文,,0,0,0,,I came back.
Dialogue: 0,0:39:05.79,0:39:06.95,中文,,0,0,0,,我回来了
Dialogue: 0,0:39:06.95,0:39:08.39,英文,,0,0,0,,3 and 7 said false.
Dialogue: 0,0:39:06.95,0:39:08.39,中文,,0,0,0,,3和7说了假话
Dialogue: 0,0:39:08.39,0:39:10.45,英文,,0,0,0,,So I'm going to keep checking all of its neighbors.
Dialogue: 0,0:39:08.39,0:39:10.45,中文,,0,0,0,,我要继续检查它的所有邻居
Dialogue: 0,0:39:10.45,0:39:13.36,英文,,0,0,0,,Well, 4, do you have any more neighbors to check?
Dialogue: 0,0:39:10.45,0:39:13.36,中文,,0,0,0,,好吧4你还有其他邻居要检查吗
Dialogue: 0,0:39:13.36,0:39:14.82,英文,,0,0,0,,No, you're out of neighbors to check.
Dialogue: 0,0:39:13.36,0:39:14.82,中文,,0,0,0,,没有了你已经检查完所有邻居了
Dialogue: 0,0:39:14.82,0:39:16.18,英文,,0,0,0,,Everyone's been checked.
Dialogue: 0,0:39:14.82,0:39:16.18,中文,,0,0,0,,每个人都被检查过了
Dialogue: 0,0:39:16.18,0:39:18.72,英文,,0,0,0,,So you're going to return false as well.
Dialogue: 0,0:39:16.18,0:39:18.72,中文,,0,0,0,,那你也会返回假
Dialogue: 0,0:39:18.72,0:39:19.98,英文,,0,0,0,,Again, am I doomed?
Dialogue: 0,0:39:18.72,0:39:19.98,中文,,0,0,0,,我又要完蛋了吗
Dialogue: 0,0:39:19.98,0:39:27.62,英文,,0,0,0,,Well, not quite, because when I returned false from 4, that was a subroutine when I was calling connected 5 of 7.
Dialogue: 0,0:39:19.98,0:39:27.62,中文,,0,0,0,,不完全是因为当我从4返回假时那是在我调用7的5个连接的子程序时
Dialogue: 0,0:39:27.62,0:39:31.52,英文,,0,0,0,,So I can go back to 5 and finish up my work of 5.
Dialogue: 0,0:39:27.62,0:39:31.52,中文,,0,0,0,,我可以回到5并完成我的工作
Dialogue: 0,0:39:31.52,0:39:32.92,英文,,0,0,0,,So what was 5 doing?
Dialogue: 0,0:39:31.52,0:39:32.92,中文,,0,0,0,,那5在做什么
Dialogue: 0,0:39:32.92,0:39:37.59,英文,,0,0,0,,5 was checking 4, and we went on that whole journey and came back and returned false.
Dialogue: 0,0:39:32.92,0:39:37.59,中文,,0,0,0,,5在检查4我们经历了整个过程然后回来并返回假
Dialogue: 0,0:39:37.59,0:39:39.23,英文,,0,0,0,,But 5 has more work to do.
Dialogue: 0,0:39:37.59,0:39:39.23,中文,,0,0,0,,但5还有更多的工作要做
Dialogue: 0,0:39:39.23,0:39:41.45,英文,,0,0,0,,In particular, it can continue checking 6.
Dialogue: 0,0:39:39.23,0:39:41.45,中文,,0,0,0,,特别是它可以继续检查6
Dialogue: 0,0:39:41.45,0:39:44.12,英文,,0,0,0,,So let's go do that.
Dialogue: 0,0:39:41.45,0:39:44.12,中文,,0,0,0,,我们去做吧
Dialogue: 0,0:39:44.12,0:39:44.86,英文,,0,0,0,,So I go and check 6.
Dialogue: 0,0:39:44.12,0:39:44.86,中文,,0,0,0,,我去检查6
Dialogue: 0,0:39:44.86,0:39:45.90,英文,,0,0,0,,OK, great.
Dialogue: 0,0:39:44.86,0:39:45.90,中文,,0,0,0,,太好了
Dialogue: 0,0:39:45.90,0:39:47.76,英文,,0,0,0,,6 is not 7.
Dialogue: 0,0:39:45.90,0:39:47.76,中文,,0,0,0,,6不是7
Dialogue: 0,0:39:47.76,0:39:48.82,英文,,0,0,0,,OK.
Dialogue: 0,0:39:48.82,0:39:51.16,英文,,0,0,0,,So I will check all of its unmarked neighbors.
Dialogue: 0,0:39:48.82,0:39:51.16,中文,,0,0,0,,我会检查它所有未标记的邻居
Dialogue: 0,0:39:51.16,0:39:52.14,英文,,0,0,0,,5 is already marked.
Dialogue: 0,0:39:51.16,0:39:52.14,中文,,0,0,0,,5已经标记过了
Dialogue: 0,0:39:52.14,0:39:53.76,英文,,0,0,0,,No point checking it again.
Dialogue: 0,0:39:52.14,0:39:53.76,中文,,0,0,0,,再检查也没意义
Dialogue: 0,0:39:53.76,0:39:55.79,英文,,0,0,0,,So I will check its neighbor, 7.
Dialogue: 0,0:39:53.76,0:39:55.79,中文,,0,0,0,,我会检查它的邻居7
Dialogue: 0,0:39:55.79,0:39:58.29,英文,,0,0,0,,And at last, I have found a base case.
Dialogue: 0,0:39:55.79,0:39:58.29,中文,,0,0,0,,最后我找到了一个基本情况
Dialogue: 0,0:39:58.29,0:40:02.24,英文,,0,0,0,,Because is there a way to get from 7 to 7?
Dialogue: 0,0:39:58.29,0:40:02.24,中文,,0,0,0,,因为从7到7有办法吗
Dialogue: 0,0:40:02.24,0:40:04.18,英文,,0,0,0,,Yes, you were already there.
Dialogue: 0,0:40:02.24,0:40:04.18,中文,,0,0,0,,是的你已经在那儿了
Dialogue: 0,0:40:04.18,0:40:06.59,英文,,0,0,0,,So 7 is connected to 7.
Dialogue: 0,0:40:04.18,0:40:06.59,中文,,0,0,0,,7连着7
Dialogue: 0,0:40:06.59,0:40:08.85,英文,,0,0,0,,I can return true.
Dialogue: 0,0:40:06.59,0:40:08.85,中文,,0,0,0,,我可以返回true
Dialogue: 0,0:40:08.85,0:40:10.65,英文,,0,0,0,,And now I go back to 6.
Dialogue: 0,0:40:08.85,0:40:10.65,中文,,0,0,0,,现在我回到6
Dialogue: 0,0:40:10.65,0:40:11.61,英文,,0,0,0,,What was 6 doing?
Dialogue: 0,0:40:10.65,0:40:11.61,中文,,0,0,0,,6在做什么
Dialogue: 0,0:40:11.61,0:40:14.93,英文,,0,0,0,,It was checking all of its neighbors, asking if any of its neighbors can reach 7.
Dialogue: 0,0:40:11.61,0:40:14.93,中文,,0,0,0,,它正在检查所有的邻居询问是否有邻居可以到达7
Dialogue: 0,0:40:14.93,0:40:16.45,英文,,0,0,0,,And one of its neighbors said yes.
Dialogue: 0,0:40:14.93,0:40:16.45,中文,,0,0,0,,而其中一个邻居说可以
Dialogue: 0,0:40:16.45,0:40:19.77,英文,,0,0,0,,One of its neighbors said, yes, I can get to 7 because I am 7.
Dialogue: 0,0:40:16.45,0:40:19.77,中文,,0,0,0,,其中一个邻居说是的我可以到达7因为我就是7
Dialogue: 0,0:40:19.77,0:40:23.14,英文,,0,0,0,,So 6, it found a neighbor who can reach 7.
Dialogue: 0,0:40:19.77,0:40:23.14,中文,,0,0,0,,6找到了一个可以到达7的邻居
Dialogue: 0,0:40:23.14,0:40:24.72,英文,,0,0,0,,So 6 will return true.
Dialogue: 0,0:40:23.14,0:40:24.72,中文,,0,0,0,, 6 会返回 true
Dialogue: 0,0:40:24.72,0:40:26.96,英文,,0,0,0,,I found a neighbor who can reach 7.
Dialogue: 0,0:40:24.72,0:40:26.96,中文,,0,0,0,,我找到一个能到达 7 的邻居
Dialogue: 0,0:40:26.96,0:40:28.44,英文,,0,0,0,,So it returns true.
Dialogue: 0,0:40:26.96,0:40:28.44,中文,,0,0,0,,它返回 true
Dialogue: 0,0:40:28.44,0:40:30.44,英文,,0,0,0,,And why was I calling 6 in the first place?
Dialogue: 0,0:40:28.44,0:40:30.44,中文,,0,0,0,,那我为什么一开始要调用 6 呢
Dialogue: 0,0:40:30.44,0:40:36.00,英文,,0,0,0,,When I look at my call stack, it reminds me, well, the reason you called 6 is because 5 called 6.
Dialogue: 0,0:40:30.44,0:40:36.00,中文,,0,0,0,,当我查看我的调用栈时它提醒我你调用 6 的原因是因为 5 调用了 6
Dialogue: 0,0:40:36.00,0:40:36.82,英文,,0,0,0,,So I'll go back to 5.
Dialogue: 0,0:40:36.00,0:40:36.82,中文,,0,0,0,,我会回到 5
Dialogue: 0,0:40:36.82,0:40:38.40,英文,,0,0,0,,OK, great.
Dialogue: 0,0:40:36.82,0:40:38.40,中文,,0,0,0,,好的太棒了
Dialogue: 0,0:40:38.40,0:40:44.04,英文,,0,0,0,,And 5, it says, well, I was checking if any of my neighbors can return true.
Dialogue: 0,0:40:38.40,0:40:44.04,中文,,0,0,0,,而且5它说我在检查我的邻居中是否有人返回true
Dialogue: 0,0:40:44.04,0:40:46.30,英文,,0,0,0,,And I checked 4, returned false.
Dialogue: 0,0:40:44.04,0:40:46.30,中文,,0,0,0,,而我检查了4返回了false
Dialogue: 0,0:40:46.30,0:40:46.95,英文,,0,0,0,,Oh, well.
Dialogue: 0,0:40:46.30,0:40:46.95,中文,,0,0,0,,哦嗯
Dialogue: 0,0:40:46.95,0:40:51.81,英文,,0,0,0,,But I checked 6, and it returned true, which means one of my neighbors, 6, can reach 7.
Dialogue: 0,0:40:46.95,0:40:51.81,中文,,0,0,0,,但我检查了6它返回了true这意味着我的一个邻居6可以到达7
Dialogue: 0,0:40:51.81,0:40:54.37,英文,,0,0,0,,So 5 can return true.
Dialogue: 0,0:40:51.81,0:40:54.37,中文,,0,0,0,,5可以返回true
Dialogue: 0,0:40:54.37,0:40:57.05,英文,,0,0,0,,And yeah, it's got more neighbors to check, but it doesn't have to check them.
Dialogue: 0,0:40:54.37,0:40:57.05,中文,,0,0,0,,而且是的它有更多的邻居要检查但它不必检查它们
Dialogue: 0,0:40:57.05,0:40:59.35,英文,,0,0,0,,It already found a neighbor who can reach 7.
Dialogue: 0,0:40:57.05,0:40:59.35,中文,,0,0,0,,它已经找到了一个可以到达7的邻居
Dialogue: 0,0:40:59.35,0:41:01.34,英文,,0,0,0,,So there's no point checking 8.
Dialogue: 0,0:40:59.35,0:41:01.34,中文,,0,0,0,,没有检查8的意义
Dialogue: 0,0:41:01.34,0:41:03.34,英文,,0,0,0,,So 5 is going to return true.
Dialogue: 0,0:41:01.34,0:41:03.34,中文,,0,0,0,,5将返回true
Dialogue: 0,0:41:03.34,0:41:04.22,英文,,0,0,0,,And why was I calling 5?
Dialogue: 0,0:41:03.34,0:41:04.22,中文,,0,0,0,,为什么我要调用5呢
Dialogue: 0,0:41:04.22,0:41:06.52,英文,,0,0,0,,Well, it's because 2 was calling 5.
Dialogue: 0,0:41:04.22,0:41:06.52,中文,,0,0,0,,好吧因为2在调用5
Dialogue: 0,0:41:06.52,0:41:09.59,英文,,0,0,0,,So 2 was asking if any of its neighbors could reach 7.
Dialogue: 0,0:41:06.52,0:41:09.59,中文,,0,0,0,,2在询问它的邻居是否能到达7
Dialogue: 0,0:41:09.59,0:41:13.37,英文,,0,0,0,,And one of the neighbors, 5, it shouted, yes, I can reach 7.
Dialogue: 0,0:41:09.59,0:41:13.37,中文,,0,0,0,,而其中一个邻居5大声说是的我能到达7
Dialogue: 0,0:41:13.37,0:41:18.14,英文,,0,0,0,,And so 2 says, one of my neighbors can reach 7, so I should return true.
Dialogue: 0,0:41:13.37,0:41:18.14,中文,,0,0,0,,2说我的一个邻居可以到达7我应该返回true
Dialogue: 0,0:41:18.14,0:41:19.62,英文,,0,0,0,,And 1 does the same thing.
Dialogue: 0,0:41:18.14,0:41:19.62,中文,,0,0,0,,而 1 做同样的事情
Dialogue: 0,0:41:19.62,0:41:24.86,英文,,0,0,0,,It says, one of my neighbors, 2, said it could reach 7, so I should return true.
Dialogue: 0,0:41:19.62,0:41:24.86,中文,,0,0,0,,它说我的一个邻居2说它可以达到7我应该返回true
Dialogue: 0,0:41:24.86,0:41:29.44,英文,,0,0,0,,And finally, all the way back at 0, it was asking if 1 could reach 7.
Dialogue: 0,0:41:24.86,0:41:29.44,中文,,0,0,0,,最后回到0它问是否 1 可以达到7
Dialogue: 0,0:41:29.44,0:41:30.69,英文,,0,0,0,,The answer was true.
Dialogue: 0,0:41:29.44,0:41:30.69,中文,,0,0,0,,答案是true
Dialogue: 0,0:41:30.69,0:41:33.09,英文,,0,0,0,,So I celebrate, and I get true.
Dialogue: 0,0:41:30.69,0:41:33.09,中文,,0,0,0,,我庆祝我得到true
Dialogue: 0,0:41:33.09,0:41:35.07,英文,,0,0,0,,True, true, true, true, true.
Dialogue: 0,0:41:33.09,0:41:35.07,中文,,0,0,0,,Truetruetruetruetrue
Dialogue: 0,0:41:35.07,0:41:35.81,英文,,0,0,0,,Good.
Dialogue: 0,0:41:35.07,0:41:35.81,中文,,0,0,0,,好
Dialogue: 0,0:41:35.81,0:41:39.33,英文,,0,0,0,,So I found that I can reach 7 and 0.
Dialogue: 0,0:41:35.81,0:41:39.33,中文,,0,0,0,,我发现我可以到达7和0
Dialogue: 0,0:41:39.33,0:41:45.50,英文,,0,0,0,,And I did it recursively with the help of my call stack and by checking all the unmarked neighbors.
Dialogue: 0,0:41:39.33,0:41:45.50,中文,,0,0,0,,而且我通过调用堆栈和检查所有未标记的邻居递归地做到了这一点
Dialogue: 0,0:41:45.50,0:41:47.74,英文,,0,0,0,,Thoughts, opinions, questions on this algorithm?
Dialogue: 0,0:41:45.50,0:41:47.74,中文,,0,0,0,,对这个算法有什么想法、意见、问题吗
Dialogue: 0,0:41:47.74,0:41:49.70,英文,,0,0,0,,It's kind of cute.
Dialogue: 0,0:41:47.74,0:41:49.70,中文,,0,0,0,,这有点可爱
Dialogue: 0,0:41:49.70,0:41:51.30,英文,,0,0,0,,Okay.
Dialogue: 0,0:41:51.30,0:41:51.94,英文,,0,0,0,,Great.
Dialogue: 0,0:41:51.30,0:41:51.94,中文,,0,0,0,,太棒了
Dialogue: 0,0:41:51.94,0:41:54.47,英文,,0,0,0,,So what we just did has a special name.
Dialogue: 0,0:41:51.94,0:41:54.47,中文,,0,0,0,,我们刚刚做的事情有一个特别的名字
Dialogue: 0,0:41:54.47,0:41:58.19,英文,,0,0,0,,It's called depth-first traversal or depth-first search.
Dialogue: 0,0:41:54.47,0:41:58.19,中文,,0,0,0,,这被称为深度优先遍历或深度优先搜索
Dialogue: 0,0:41:58.19,0:42:05.74,英文,,0,0,0,,And the reason why it's called that, by the way, is because you end up checking, and you can go back and play with this graph to confirm for yourself,
Dialogue: 0,0:41:58.19,0:42:05.74,中文,,0,0,0,,顺便说一句它被称为这个的原因是因为你最终会检查你可以回去玩这个图来自己确认
Dialogue: 0,0:42:05.74,0:42:14.24,英文,,0,0,0,,but the character of depth-first search, what makes it special compared to some other ones we'll see next time, is you end up exploring an entire subgraph
Dialogue: 0,0:42:05.74,0:42:14.24,中文,,0,0,0,,但深度优先搜索的特点与我们下次会看到的一些其他算法相比是你最终会探索整个子图
Dialogue: 0,0:42:14.24,0:42:17.69,英文,,0,0,0,,before you explore any of the other subgraphs.
Dialogue: 0,0:42:14.24,0:42:17.69,中文,,0,0,0,,在你探索其他任何子图之前
Dialogue: 0,0:42:17.69,0:42:22.15,英文,,0,0,0,,So for example, I would start at 0, and then I would call isConnected on 1.
Dialogue: 0,0:42:17.69,0:42:22.15,中文,,0,0,0,,例如我会从0开始然后我会在1上调用isConnected
Dialogue: 0,0:42:22.15,0:42:29.05,英文,,0,0,0,,And then 1 would call connected on 2, which would call connected on 5, which would call connected on 6.
Dialogue: 0,0:42:22.15,0:42:29.05,中文,,0,0,0,,然后1会在2上调用connected它会在5上调用connected然后在6上调用connected
Dialogue: 0,0:42:29.05,0:42:36.88,英文,,0,0,0,,And I would have to finish all the work in this subtree before I can go back to 0 and check another part of the graph.
Dialogue: 0,0:42:29.05,0:42:36.88,中文,,0,0,0,,在我能够回到0并检查图的另一部分之前我必须完成这个子树中的所有工作
Dialogue: 0,0:42:36.88,0:42:40.86,英文,,0,0,0,,So the idea is you're going as deep as you possibly can.
Dialogue: 0,0:42:36.88,0:42:40.86,中文,,0,0,0,,想法是你尽可能地深入
Dialogue: 0,0:42:40.86,0:42:43.85,英文,,0,0,0,,You're going to chase this path down and be like, oh, but what's next?
Dialogue: 0,0:42:40.86,0:42:43.85,中文,,0,0,0,,你要一直追寻这条路径然后会想哦接下来呢
Dialogue: 0,0:42:43.85,0:42:44.71,英文,,0,0,0,,What's next?
Dialogue: 0,0:42:43.85,0:42:44.71,中文,,0,0,0,,接下来呢
Dialogue: 0,0:42:44.71,0:42:52.06,英文,,0,0,0,,And you're going to finish this entire subgraph before you ever touch any of these other outgoing edges from 0.
Dialogue: 0,0:42:44.71,0:42:52.06,中文,,0,0,0,,在你触及从 0 出发的任何其他出边之前你会先完成整个子图
Dialogue: 0,0:42:52.06,0:42:53.86,英文,,0,0,0,,That's kind of the idea.
Dialogue: 0,0:42:52.06,0:42:53.86,中文,,0,0,0,,这个想法挺好的
Dialogue: 0,0:42:53.86,0:43:00.85,英文,,0,0,0,,One quick note I will make is that, for example, here, yes, there are two ways to get to, say, 8.
Dialogue: 0,0:42:53.86,0:43:00.85,中文,,0,0,0,,我要提一点比如说这里是的有两种方法可以到达比如说8
Dialogue: 0,0:43:00.85,0:43:09.00,英文,,0,0,0,,But I will first go 0, 3, 8, I guess, before I ever explore 4 and use 4's edge to 8.
Dialogue: 0,0:43:00.85,0:43:09.00,中文,,0,0,0,,但我会先走 038我猜然后再去探索 4 并使用 4 到 8 的边
Dialogue: 0,0:43:09.00,0:43:09.72,英文,,0,0,0,,Does that make sense?
Dialogue: 0,0:43:09.00,0:43:09.72,中文,,0,0,0,,这样说你明白了吗
Dialogue: 0,0:43:09.72,0:43:10.16,英文,,0,0,0,,Kind of?
Dialogue: 0,0:43:09.72,0:43:10.16,中文,,0,0,0,,有点吗
Dialogue: 0,0:43:10.16,0:43:10.82,英文,,0,0,0,,OK.
Dialogue: 0,0:43:10.82,0:43:11.92,英文,,0,0,0,,I guess I'll say this one more time.
Dialogue: 0,0:43:10.82,0:43:11.92,中文,,0,0,0,,我猜我得再说一遍
Dialogue: 0,0:43:11.92,0:43:15.54,英文,,0,0,0,,So here's an example where 0 could take you directly to 4.
Dialogue: 0,0:43:11.92,0:43:15.54,中文,,0,0,0,,这里举个例子0 可以直接到 4
Dialogue: 0,0:43:15.54,0:43:24.13,英文,,0,0,0,,But what depth-first search will do, because it tries to go as deep as possible, is it will first explore 0, and then 3, and then 8, and then 4.
Dialogue: 0,0:43:15.54,0:43:24.13,中文,,0,0,0,,但是深度优先搜索会怎么做呢因为它尽可能深入它会先探索 0然后 3然后 8然后 4
Dialogue: 0,0:43:24.13,0:43:30.11,英文,,0,0,0,,So it would actually explore 4 this way before it ever uses the 0 to 4 edge.
Dialogue: 0,0:43:24.13,0:43:30.11,中文,,0,0,0,,它会在使用 0 到 4 的边之前以这种方式实际上探索 4
Dialogue: 0,0:43:30.11,0:43:30.63,英文,,0,0,0,,OK.
Dialogue: 0,0:43:30.63,0:43:32.57,英文,,0,0,0,,Hopefully that made a little more sense.
Dialogue: 0,0:43:30.63,0:43:32.57,中文,,0,0,0,,希望这样说起来稍微清楚一点
Dialogue: 0,0:43:32.57,0:43:35.89,英文,,0,0,0,,But the character is just that it goes as deep as possible.
Dialogue: 0,0:43:32.57,0:43:35.89,中文,,0,0,0,,但是角色就是尽可能深入
Dialogue: 0,0:43:35.89,0:43:38.18,英文,,0,0,0,,OK, I guess here's another example.
Dialogue: 0,0:43:35.89,0:43:38.18,中文,,0,0,0,,我猜这里有另一个例子
Dialogue: 0,0:43:38.18,0:43:44.32,英文,,0,0,0,,So maybe 1, 2, 5, 3, maybe you explore 3 using this subgraph first.
Dialogue: 0,0:43:38.18,0:43:44.32,中文,,0,0,0,,也许是1、2、5、3也许你首先使用这个子图来探索3
Dialogue: 0,0:43:44.32,0:43:48.50,英文,,0,0,0,,And so you would end up exploring 3 before you use the 0 to 3 edge.
Dialogue: 0,0:43:44.32,0:43:48.50,中文,,0,0,0,,你最终会在使用0到3的边之前探索3
Dialogue: 0,0:43:48.50,0:43:50.18,英文,,0,0,0,,That's possible because it's a graph.
Dialogue: 0,0:43:48.50,0:43:50.18,中文,,0,0,0,,这是可能的因为它是一个图
Dialogue: 0,0:43:50.18,0:43:52.21,英文,,0,0,0,,There could be multiple ways to get to 3.
Dialogue: 0,0:43:50.18,0:43:52.21,中文,,0,0,0,,可能有多种方法达到3
Dialogue: 0,0:43:52.21,0:43:56.15,英文,,0,0,0,,You would use, I guess, the deepest way to get to 3 first.
Dialogue: 0,0:43:52.21,0:43:56.15,中文,,0,0,0,,你会先使用最深的方法达到3吧我猜
Dialogue: 0,0:43:56.15,0:43:57.43,英文,,0,0,0,,OK.
Dialogue: 0,0:43:57.43,0:43:58.47,英文,,0,0,0,,Here's a little comic.
Dialogue: 0,0:43:57.43,0:43:58.47,中文,,0,0,0,,这里有一本小漫画
Dialogue: 0,0:43:58.47,0:44:01.39,英文,,0,0,0,,In the interest of time, I'm not going to read it in too much detail.
Dialogue: 0,0:43:58.47,0:44:01.39,中文,,0,0,0,,考虑到时间我不会详细阅读它
Dialogue: 0,0:44:01.39,0:44:05.29,英文,,0,0,0,,But it basically says, if you're preparing for a date, you could use depth-first search.
Dialogue: 0,0:44:01.39,0:44:05.29,中文,,0,0,0,,但基本上是说如果你在准备约会你可以使用深度优先搜索
Dialogue: 0,0:44:05.29,0:44:12.24,英文,,0,0,0,,And what you would do is you would list out, well, here's all the things I have to prepare for, so medical emergency, food too expensive, whatever.
Dialogue: 0,0:44:05.29,0:44:12.24,中文,,0,0,0,,你要做的是列出这里是我需要准备的所有事情比如医疗急救食物太贵了等等
Dialogue: 0,0:44:12.24,0:44:13.52,英文,,0,0,0,,And you're like, well, hold on.
Dialogue: 0,0:44:12.24,0:44:13.52,中文,,0,0,0,,而你可能会想等等
Dialogue: 0,0:44:13.52,0:44:16.18,英文,,0,0,0,,Let me go explore that medical emergency thing first.
Dialogue: 0,0:44:13.52,0:44:16.18,中文,,0,0,0,,让我先去探索一下那个医疗急症的事情
Dialogue: 0,0:44:16.18,0:44:19.10,英文,,0,0,0,,OK, so medical emergency, what are the emergencies?
Dialogue: 0,0:44:16.18,0:44:19.10,中文,,0,0,0,,那么医疗急症有哪些急症呢
Dialogue: 0,0:44:19.10,0:44:21.78,英文,,0,0,0,,Snake bite, lightning strike, fall, whatever.
Dialogue: 0,0:44:19.10,0:44:21.78,中文,,0,0,0,,被蛇咬、被闪电击中、摔倒无论什么急症
Dialogue: 0,0:44:21.78,0:44:22.88,英文,,0,0,0,,But hold on.
Dialogue: 0,0:44:21.78,0:44:22.88,中文,,0,0,0,,但是等等
Dialogue: 0,0:44:22.88,0:44:25.06,英文,,0,0,0,,Let me go explore that snakebite thing first.
Dialogue: 0,0:44:22.88,0:44:25.06,中文,,0,0,0,,让我先去探索一下被蛇咬的事情
Dialogue: 0,0:44:25.06,0:44:26.33,英文,,0,0,0,,So I go to the snakebite.
Dialogue: 0,0:44:25.06,0:44:26.33,中文,,0,0,0,,我去处理被蛇咬的情况
Dialogue: 0,0:44:26.33,0:44:28.21,英文,,0,0,0,,I think about the different kinds of snakes.
Dialogue: 0,0:44:26.33,0:44:28.21,中文,,0,0,0,,我在想各种不同的蛇
Dialogue: 0,0:44:28.21,0:44:38.97,英文,,0,0,0,,And so I'm continually diving deeper and deeper into the first idea, medical emergency, snakebite, corn snake, before I ever go back and explore the other ideas.
Dialogue: 0,0:44:28.21,0:44:38.97,中文,,0,0,0,,我不断地深入探讨第一个想法医疗急救蛇咬伤玉米蛇然后才会回去探索其他的想法
Dialogue: 0,0:44:38.97,0:44:43.12,英文,,0,0,0,,And by the time my hypothetical date gets here, I'm only thinking about snake venom.
Dialogue: 0,0:44:38.97,0:44:43.12,中文,,0,0,0,,等到我假想的约会到来时我只想着蛇毒
Dialogue: 0,0:44:43.12,0:44:49.58,英文,,0,0,0,,So depth-first search, maybe not the best idea for date preparation, although I have no experience, so you can't ask me.
Dialogue: 0,0:44:43.12,0:44:49.58,中文,,0,0,0,,深度优先搜索也许不是约会准备的最佳选择虽然我没有经验你不能问我
Dialogue: 0,0:44:49.58,0:44:51.63,英文,,0,0,0,,OK, great.
Dialogue: 0,0:44:49.58,0:44:51.63,中文,,0,0,0,,好的太棒了
Dialogue: 0,0:44:51.63,0:44:53.01,英文,,0,0,0,,That's depth-first search.
Dialogue: 0,0:44:51.63,0:44:53.01,中文,,0,0,0,,这就是深度优先搜索
Dialogue: 0,0:44:53.01,0:44:53.77,英文,,0,0,0,,It's really great.
Dialogue: 0,0:44:53.01,0:44:53.77,中文,,0,0,0,,真的很棒
Dialogue: 0,0:44:53.77,0:44:56.13,英文,,0,0,0,,You can use it to traverse graphs.
Dialogue: 0,0:44:53.77,0:44:56.13,中文,,0,0,0,,你可以用它来遍历图表
Dialogue: 0,0:44:56.13,0:45:00.77,英文,,0,0,0,,And so I'll give you another quick example of why depth-first search is so powerful.
Dialogue: 0,0:44:56.13,0:45:00.77,中文,,0,0,0,,那么我给你举个深度优先搜索为何如此强大的快速例子
Dialogue: 0,0:45:00.77,0:45:02.07,英文,,0,0,0,,And then we'll wrap up.
Dialogue: 0,0:45:00.77,0:45:02.07,中文,,0,0,0,,我们就结束了
Dialogue: 0,0:45:02.07,0:45:09.77,英文,,0,0,0,,So let's discuss another algorithm that's also inspired by this depth-first search idea, where you always dive as deep down as possible.
Dialogue: 0,0:45:02.07,0:45:09.77,中文,,0,0,0,,让我们讨论另一个算法也是受深度优先搜索思想启发的你总是尽可能深入
Dialogue: 0,0:45:09.77,0:45:13.81,英文,,0,0,0,,And you keep chasing these paths until you cannot chase them any further.
Dialogue: 0,0:45:09.77,0:45:13.81,中文,,0,0,0,,你会一直追踪这些路径直到无法再继续追踪为止
Dialogue: 0,0:45:13.81,0:45:16.63,英文,,0,0,0,,This one is going to be called depth-first paths.
Dialogue: 0,0:45:13.81,0:45:16.63,中文,,0,0,0,,这个算法将被称为深度优先路径
Dialogue: 0,0:45:16.63,0:45:20.10,英文,,0,0,0,,And remember, the previous algorithm, I gave you a source and a target.
Dialogue: 0,0:45:16.63,0:45:20.10,中文,,0,0,0,,记住之前的算法我给了你一个源点和一个目标点
Dialogue: 0,0:45:20.10,0:45:24.50,英文,,0,0,0,,And I said, true or false, tell me if I can reach the target from the source.
Dialogue: 0,0:45:20.10,0:45:24.50,中文,,0,0,0,,我说真的还是假的告诉我我能否从源点到达目标点
Dialogue: 0,0:45:24.50,0:45:34.94,英文,,0,0,0,,This time, I want something harder, which is I want you to actually give me the path to get from s to not just one target vertex, but every other vertex.
Dialogue: 0,0:45:24.50,0:45:34.94,中文,,0,0,0,,这次我想要更难的东西我希望你实际上给我路径不仅仅是从s到一个目标顶点而是到每一个其他顶点的路径
Dialogue: 0,0:45:34.94,0:45:38.01,英文,,0,0,0,,So I want a path from 0 to 1.
Dialogue: 0,0:45:34.94,0:45:38.01,中文,,0,0,0,,我想要从0到1的路径
Dialogue: 0,0:45:38.01,0:45:39.93,英文,,0,0,0,,And I want a path from 0 to 2.
Dialogue: 0,0:45:38.01,0:45:39.93,中文,,0,0,0,,我想要从0到2的路径
Dialogue: 0,0:45:39.93,0:45:43.73,英文,,0,0,0,,And I want a path from 0 to 7, and 0 to 6, and 0 to 5.
Dialogue: 0,0:45:39.93,0:45:43.73,中文,,0,0,0,,我想要从0到7的路径以及从0到6从0到5的路径
Dialogue: 0,0:45:43.73,0:45:46.31,英文,,0,0,0,,So I want a path to every vertex.
Dialogue: 0,0:45:43.73,0:45:46.31,中文,,0,0,0,,我想要到每个顶点的路径
Dialogue: 0,0:45:46.31,0:45:55.58,英文,,0,0,0,,And this seems kind of daunting, but it turns out the depth-first search idea is going to help us find a path to every single vertex, which is kind of cool.
Dialogue: 0,0:45:46.31,0:45:55.58,中文,,0,0,0,,这似乎有些艰巨但事实证明深度优先搜索的思想将帮助我们找到到每个顶点的路径这很酷
Dialogue: 0,0:45:55.58,0:45:57.28,英文,,0,0,0,,So let's do it.
Dialogue: 0,0:45:55.58,0:45:57.28,中文,,0,0,0,,让我们来做吧
Dialogue: 0,0:45:57.28,0:45:59.16,英文,,0,0,0,,So here's the general idea.
Dialogue: 0,0:45:57.28,0:45:59.16,中文,,0,0,0,,这是一个大致的想法
Dialogue: 0,0:45:59.16,0:46:07.13,英文,,0,0,0,,We're going to use the same idea from before, which is every time you visit a vertex, you're going to mark it to avoid visiting the same vertex twice.
Dialogue: 0,0:45:59.16,0:46:07.13,中文,,0,0,0,,我们将使用之前的相同想法即每次访问一个顶点时你都会标记它以避免两次访问相同的顶点
Dialogue: 0,0:46:07.13,0:46:08.29,英文,,0,0,0,,You don't want an infinite loop.
Dialogue: 0,0:46:07.13,0:46:08.29,中文,,0,0,0,,你不想要一个无限循环
Dialogue: 0,0:46:08.29,0:46:10.95,英文,,0,0,0,,I don't want to ask a vertex for its opinions twice.
Dialogue: 0,0:46:08.29,0:46:10.95,中文,,0,0,0,,我不想两次询问一个顶点的意见
Dialogue: 0,0:46:10.95,0:46:13.23,英文,,0,0,0,,So every time I visit, I will mark it.
Dialogue: 0,0:46:10.95,0:46:13.23,中文,,0,0,0,,每次我访问我都会标记它
Dialogue: 0,0:46:13.23,0:46:17.80,英文,,0,0,0,,I'll color it white on the slide to represent I don't need to visit it a second time.
Dialogue: 0,0:46:13.23,0:46:17.80,中文,,0,0,0,,我会在幻灯片上将其涂白表示我不需要再次访问它
Dialogue: 0,0:46:17.80,0:46:24.54,英文,,0,0,0,,And then for every adjacent vertex for all of my neighbors, I'm going to write down how I got to that neighbor.
Dialogue: 0,0:46:17.80,0:46:24.54,中文,,0,0,0,,对于我的所有邻居的每个相邻顶点我都会写下我是如何到达该邻居的
Dialogue: 0,0:46:24.54,0:46:28.77,英文,,0,0,0,,So I'll use this edge to array to mark how I get to every neighbor.
Dialogue: 0,0:46:24.54,0:46:28.77,中文,,0,0,0,,我会使用这个边缘数组来标记我如何到达每个邻居
Dialogue: 0,0:46:28.77,0:46:34.33,英文,,0,0,0,,And then I will recursively call depth-first search on the neighbors, just like I was doing before.
Dialogue: 0,0:46:28.77,0:46:34.33,中文,,0,0,0,,然后我会递归地对邻居调用深度优先搜索就像以前一样
Dialogue: 0,0:46:34.33,0:46:38.11,英文,,0,0,0,,So every time I visit a node, I will recursively visit all the neighbors.
Dialogue: 0,0:46:34.33,0:46:38.11,中文,,0,0,0,,每次我访问一个节点我都会递归地访问所有的邻居
Dialogue: 0,0:46:38.11,0:46:42.08,英文,,0,0,0,,And then when I visit another node, I will recursively visit all of its neighbors.
Dialogue: 0,0:46:38.11,0:46:42.08,中文,,0,0,0,,然后当我访问另一个节点时我将递归地访问其所有邻居
Dialogue: 0,0:46:42.08,0:46:45.93,英文,,0,0,0,,But I'll use markings to avoid visiting a node twice.
Dialogue: 0,0:46:42.08,0:46:45.93,中文,,0,0,0,,但是我会使用标记来避免两次访问一个节点
Dialogue: 0,0:46:45.93,0:46:46.55,英文,,0,0,0,,So let's do it.
Dialogue: 0,0:46:45.93,0:46:46.55,中文,,0,0,0,,让我们开始吧
Dialogue: 0,0:46:46.55,0:46:47.63,英文,,0,0,0,,I hope you're ready.
Dialogue: 0,0:46:46.55,0:46:47.63,中文,,0,0,0,,希望你准备好了
Dialogue: 0,0:46:47.63,0:46:50.23,英文,,0,0,0,,So I'm going to call DFS of 0.
Dialogue: 0,0:46:47.63,0:46:50.23,中文,,0,0,0,,我要调用DFS的0号节点
Dialogue: 0,0:46:50.23,0:46:52.85,英文,,0,0,0,,That is the source that someone designated for me.
Dialogue: 0,0:46:50.23,0:46:52.85,中文,,0,0,0,,这是有人为我指定的源节点
Dialogue: 0,0:46:52.85,0:46:54.25,英文,,0,0,0,,So that's where I start.
Dialogue: 0,0:46:52.85,0:46:54.25,中文,,0,0,0,,这就是我的起点
Dialogue: 0,0:46:54.25,0:46:55.47,英文,,0,0,0,,So I'm going to mark it.
Dialogue: 0,0:46:54.25,0:46:55.47,中文,,0,0,0,,我要标记它
Dialogue: 0,0:46:55.47,0:46:56.59,英文,,0,0,0,,Look, it's marked.
Dialogue: 0,0:46:55.47,0:46:56.59,中文,,0,0,0,,看它被标记了
Dialogue: 0,0:46:56.59,0:46:58.88,英文,,0,0,0,,And now I'm going to look at all of its neighbors.
Dialogue: 0,0:46:56.59,0:46:58.88,中文,,0,0,0,,现在我要查看它的所有邻居
Dialogue: 0,0:46:58.88,0:47:00.58,英文,,0,0,0,,It's just got one neighbor, 1.
Dialogue: 0,0:46:58.88,0:47:00.58,中文,,0,0,0,,它只有一个邻居1
Dialogue: 0,0:47:00.58,0:47:01.66,英文,,0,0,0,,It's not marked.
Dialogue: 0,0:47:00.58,0:47:01.66,中文,,0,0,0,,没有标记
Dialogue: 0,0:47:01.66,0:47:06.04,英文,,0,0,0,,So what I will do is I will write down how I got to 1.
Dialogue: 0,0:47:01.66,0:47:06.04,中文,,0,0,0,,我要做的是写下我是怎么到达1的
Dialogue: 0,0:47:06.04,0:47:07.38,英文,,0,0,0,,How did I get to 1?
Dialogue: 0,0:47:06.04,0:47:07.38,中文,,0,0,0,,我是怎么到达1的
Dialogue: 0,0:47:07.38,0:47:08.94,英文,,0,0,0,,I got to 1 from 0.
Dialogue: 0,0:47:07.38,0:47:08.94,中文,,0,0,0,,我是从0到1的
Dialogue: 0,0:47:08.94,0:47:10.32,英文,,0,0,0,,So look, I wrote it down.
Dialogue: 0,0:47:08.94,0:47:10.32,中文,,0,0,0,,看我写下来了
Dialogue: 0,0:47:10.32,0:47:11.62,英文,,0,0,0,,How did I get to 1?
Dialogue: 0,0:47:10.32,0:47:11.62,中文,,0,0,0,,我是怎么到达1的
Dialogue: 0,0:47:11.62,0:47:13.52,英文,,0,0,0,,I got to 1 from 0.
Dialogue: 0,0:47:11.62,0:47:13.52,中文,,0,0,0,,我从0到1了
Dialogue: 0,0:47:13.52,0:47:14.72,英文,,0,0,0,,Note that down.
Dialogue: 0,0:47:13.52,0:47:14.72,中文,,0,0,0,,记下来
Dialogue: 0,0:47:14.72,0:47:16.56,英文,,0,0,0,,Now let's go call depth-first search on 1.
Dialogue: 0,0:47:14.72,0:47:16.56,中文,,0,0,0,,现在让我们在1上调用深度优先搜索
Dialogue: 0,0:47:16.56,0:47:22.03,英文,,0,0,0,,And again, I mark it, and I explore all of its unmarked neighbors.
Dialogue: 0,0:47:16.56,0:47:22.03,中文,,0,0,0,,再次我标记它探索其所有未标记的邻居
Dialogue: 0,0:47:22.03,0:47:25.27,英文,,0,0,0,,So in this case, its unmarked neighbors are 2 and 4.
Dialogue: 0,0:47:22.03,0:47:25.27,中文,,0,0,0,,在这种情况下它的未标记邻居是2和4
Dialogue: 0,0:47:25.27,0:47:27.99,英文,,0,0,0,,So I'm going to start by visiting 2.
Dialogue: 0,0:47:25.27,0:47:27.99,中文,,0,0,0,,我要先访问2
Dialogue: 0,0:47:27.99,0:47:33.10,英文,,0,0,0,,But then later, when I'm done with 2, I've got to come back and finish and possibly visit 4.
Dialogue: 0,0:47:27.99,0:47:33.10,中文,,0,0,0,,但后来当我完成2后我必须回来完成并可能访问4
Dialogue: 0,0:47:33.10,0:47:36.51,英文,,0,0,0,,So I'm going to go visit 2, but remember,
Dialogue: 0,0:47:33.10,0:47:36.51,中文,,0,0,0,,我要去拜访2但记住
Dialogue: 0,0:47:36.51,0:47:41.50,英文,,0,0,0,,I have a call stack, which tells me when I'm done with 2, go back to 1, because there could be unfinished work there.
Dialogue: 0,0:47:36.51,0:47:41.50,中文,,0,0,0,,我有一个调用栈告诉我什么时候完成2返回1因为那里可能有未完成的工作
Dialogue: 0,0:47:41.50,0:47:43.20,英文,,0,0,0,,So here I am calling 2.
Dialogue: 0,0:47:41.50,0:47:43.20,中文,,0,0,0,,在这里我在调用2
Dialogue: 0,0:47:43.20,0:47:44.44,英文,,0,0,0,,And again, I mark it.
Dialogue: 0,0:47:43.20,0:47:44.44,中文,,0,0,0,,而且我再次标记它
Dialogue: 0,0:47:44.44,0:47:47.72,英文,,0,0,0,,And when I mark 2, I'm also going to write, how did I get to 2?
Dialogue: 0,0:47:44.44,0:47:47.72,中文,,0,0,0,,当我标记2时我还要写下我是怎么到达2的
Dialogue: 0,0:47:47.72,0:47:50.64,英文,,0,0,0,,Like, what path did I take to reach 2?
Dialogue: 0,0:47:47.72,0:47:50.64,中文,,0,0,0,,就像我是通过什么路径到达2的
Dialogue: 0,0:47:50.64,0:47:52.70,英文,,0,0,0,,Well, I got to 2 from 1.
Dialogue: 0,0:47:50.64,0:47:52.70,中文,,0,0,0,,我是从1到2的
Dialogue: 0,0:47:52.70,0:47:53.64,英文,,0,0,0,,That's what it says, right?
Dialogue: 0,0:47:52.70,0:47:53.64,中文,,0,0,0,,就是这样写的对吧
Dialogue: 0,0:47:53.64,0:47:55.00,英文,,0,0,0,,I used to be at 1.
Dialogue: 0,0:47:53.64,0:47:55.00,中文,,0,0,0,,我以前在1
Dialogue: 0,0:47:55.00,0:47:56.38,英文,,0,0,0,,Then I got to 2.
Dialogue: 0,0:47:55.00,0:47:56.38,中文,,0,0,0,,然后我到了2
Dialogue: 0,0:47:56.38,0:47:57.87,英文,,0,0,0,,So I'll write that down.
Dialogue: 0,0:47:56.38,0:47:57.87,中文,,0,0,0,,我会记下来
Dialogue: 0,0:47:57.87,0:47:59.51,英文,,0,0,0,,Look, how did I get to 2?
Dialogue: 0,0:47:57.87,0:47:59.51,中文,,0,0,0,,看我怎么到2的
Dialogue: 0,0:47:59.51,0:48:01.84,英文,,0,0,0,,I got there from 1.
Dialogue: 0,0:47:59.51,0:48:01.84,中文,,0,0,0,,我是从1到那里的
Dialogue: 0,0:48:01.84,0:48:03.34,英文,,0,0,0,,Now I'm calling depth-first search on 2.
Dialogue: 0,0:48:01.84,0:48:03.34,中文,,0,0,0,,现在我在2上调用深度优先搜索
Dialogue: 0,0:48:03.34,0:48:06.18,英文,,0,0,0,,I mark it, and I look at all of its neighbors.
Dialogue: 0,0:48:03.34,0:48:06.18,中文,,0,0,0,,我标记它然后我看看它的所有邻居
Dialogue: 0,0:48:06.18,0:48:07.20,英文,,0,0,0,,2's got some neighbors.
Dialogue: 0,0:48:06.18,0:48:07.20,中文,,0,0,0,,2 有一些邻居
Dialogue: 0,0:48:07.20,0:48:08.04,英文,,0,0,0,,1 is marked.
Dialogue: 0,0:48:07.20,0:48:08.04,中文,,0,0,0,,1 被标记了
Dialogue: 0,0:48:08.04,0:48:09.48,英文,,0,0,0,,I don't want to go backwards.
Dialogue: 0,0:48:08.04,0:48:09.48,中文,,0,0,0,,我不想倒退
Dialogue: 0,0:48:09.48,0:48:11.96,英文,,0,0,0,,But 2, it's got an unmarked neighbor, 5.
Dialogue: 0,0:48:09.48,0:48:11.96,中文,,0,0,0,,但是 2它有一个未标记的邻居5
Dialogue: 0,0:48:11.96,0:48:13.91,英文,,0,0,0,,So I'm going to go explore 5.
Dialogue: 0,0:48:11.96,0:48:13.91,中文,,0,0,0,,我要去探索 5
Dialogue: 0,0:48:13.91,0:48:16.91,英文,,0,0,0,,And when I explore 5, I will write down how I got there.
Dialogue: 0,0:48:13.91,0:48:16.91,中文,,0,0,0,,当我探索 5 时我会记下我是如何到达那里的
Dialogue: 0,0:48:16.91,0:48:18.39,英文,,0,0,0,,How did I get to 5?
Dialogue: 0,0:48:16.91,0:48:18.39,中文,,0,0,0,,我是怎么到达5的?
Dialogue: 0,0:48:18.39,0:48:19.79,英文,,0,0,0,,I got to 5.
Dialogue: 0,0:48:18.39,0:48:19.79,中文,,0,0,0,,我到达了5.
Dialogue: 0,0:48:19.79,0:48:21.37,英文,,0,0,0,,through 2.
Dialogue: 0,0:48:19.79,0:48:21.37,中文,,0,0,0,,通过2.
Dialogue: 0,0:48:21.37,0:48:22.31,英文,,0,0,0,,So I write that down.
Dialogue: 0,0:48:21.37,0:48:22.31,中文,,0,0,0,,我把它写下来了.
Dialogue: 0,0:48:22.31,0:48:23.83,英文,,0,0,0,,That's how I got to 5.
Dialogue: 0,0:48:22.31,0:48:23.83,中文,,0,0,0,,这就是我到达5的方式.
Dialogue: 0,0:48:23.83,0:48:27.20,英文,,0,0,0,,I was at 2, then I went to 5.
Dialogue: 0,0:48:23.83,0:48:27.20,中文,,0,0,0,,我曾经在2然后我去了5.
Dialogue: 0,0:48:27.20,0:48:28.66,英文,,0,0,0,,That's how I got there.
Dialogue: 0,0:48:27.20,0:48:28.66,中文,,0,0,0,,这就是我到达那里的方式.
Dialogue: 0,0:48:28.66,0:48:29.82,英文,,0,0,0,,So now let's go explore 5.
Dialogue: 0,0:48:28.66,0:48:29.82,中文,,0,0,0,,现在让我们去探索5号
Dialogue: 0,0:48:29.82,0:48:34.34,英文,,0,0,0,,I mark it, and then I look at all of its unexplored neighbors.
Dialogue: 0,0:48:29.82,0:48:34.34,中文,,0,0,0,,我标记它然后看看它所有未探索的邻居
Dialogue: 0,0:48:34.34,0:48:36.96,英文,,0,0,0,,There are quite a few.
Dialogue: 0,0:48:34.34,0:48:36.96,中文,,0,0,0,,有相当多的
Dialogue: 0,0:48:36.96,0:48:37.69,英文,,0,0,0,,I guess I'll start with 4.
Dialogue: 0,0:48:36.96,0:48:37.69,中文,,0,0,0,,我想我会从4号开始
Dialogue: 0,0:48:37.69,0:48:40.07,英文,,0,0,0,,So I'm going to go visit 4.
Dialogue: 0,0:48:37.69,0:48:40.07,中文,,0,0,0,,我要去访问4号
Dialogue: 0,0:48:40.07,0:48:43.37,英文,,0,0,0,,And again, in my Edge2 array, I'm going to mark.
Dialogue: 0,0:48:40.07,0:48:43.37,中文,,0,0,0,,再次在我的Edge2数组中我要标记
Dialogue: 0,0:48:43.37,0:48:44.81,英文,,0,0,0,,How did I get to 4?
Dialogue: 0,0:48:43.37,0:48:44.81,中文,,0,0,0,,我是怎么到达4号的
Dialogue: 0,0:48:44.81,0:48:46.87,英文,,0,0,0,,I got to 4 using 5.
Dialogue: 0,0:48:44.81,0:48:46.87,中文,,0,0,0,,我用 5 达到了 4
Dialogue: 0,0:48:46.87,0:48:48.27,英文,,0,0,0,,That's how I got to 4.
Dialogue: 0,0:48:46.87,0:48:48.27,中文,,0,0,0,,这就是我达到 4 的方式
Dialogue: 0,0:48:48.27,0:48:49.59,英文,,0,0,0,,That's where I came from.
Dialogue: 0,0:48:48.27,0:48:49.59,中文,,0,0,0,,那就是我来的地方
Dialogue: 0,0:48:49.59,0:48:53.98,英文,,0,0,0,,So before I go DFS4, I will write down how I got to 4.
Dialogue: 0,0:48:49.59,0:48:53.98,中文,,0,0,0,,在我进行 DFS4 之前我会写下我达到 4 的方式
Dialogue: 0,0:48:53.98,0:48:55.32,英文,,0,0,0,,Now I'm going to go to 4.
Dialogue: 0,0:48:53.98,0:48:55.32,中文,,0,0,0,,现在我要去 4
Dialogue: 0,0:48:55.32,0:48:57.80,英文,,0,0,0,,And again, my call stack is getting deeper and deeper.
Dialogue: 0,0:48:55.32,0:48:57.80,中文,,0,0,0,,而且我的调用堆栈越来越深了
Dialogue: 0,0:48:57.80,0:48:59.92,英文,,0,0,0,,That's the idea of depth-first search.
Dialogue: 0,0:48:57.80,0:48:59.92,中文,,0,0,0,,这就是深度优先搜索的思想
Dialogue: 0,0:48:59.92,0:49:06.63,英文,,0,0,0,,I'm going deeper and deeper in this tree and behind me whenever I return and go back and work on some other stuff when I'm done.
Dialogue: 0,0:48:59.92,0:49:06.63,中文,,0,0,0,,我越来越深入这棵树了每当我回头去处理一些别的事情完成之后再回来
Dialogue: 0,0:49:06.63,0:49:07.87,英文,,0,0,0,,So here I am at 4.
Dialogue: 0,0:49:06.63,0:49:07.87,中文,,0,0,0,,现在我在4这里
Dialogue: 0,0:49:07.87,0:49:08.89,英文,,0,0,0,,I mark it.
Dialogue: 0,0:49:07.87,0:49:08.89,中文,,0,0,0,,我标记了它
Dialogue: 0,0:49:08.89,0:49:11.29,英文,,0,0,0,,I look for its unmarked neighbors, just 1.
Dialogue: 0,0:49:08.89,0:49:11.29,中文,,0,0,0,,我寻找它未标记的邻居只有1
Dialogue: 0,0:49:11.29,0:49:12.33,英文,,0,0,0,,Just got 3.
Dialogue: 0,0:49:11.29,0:49:12.33,中文,,0,0,0,,刚得到3
Dialogue: 0,0:49:12.33,0:49:14.71,英文,,0,0,0,,So I'll write down, how do I get to 3?
Dialogue: 0,0:49:12.33,0:49:14.71,中文,,0,0,0,,那我该怎么记录呢我是怎么到达3的
Dialogue: 0,0:49:14.71,0:49:15.69,英文,,0,0,0,,Using 4.
Dialogue: 0,0:49:14.71,0:49:15.69,中文,,0,0,0,,通过4
Dialogue: 0,0:49:15.69,0:49:16.84,英文,,0,0,0,,Great.
Dialogue: 0,0:49:15.69,0:49:16.84,中文,,0,0,0,,太好了
Dialogue: 0,0:49:16.84,0:49:18.22,英文,,0,0,0,,Now I'm going to go to 3.
Dialogue: 0,0:49:16.84,0:49:18.22,中文,,0,0,0,,现在我要去3
Dialogue: 0,0:49:18.22,0:49:19.74,英文,,0,0,0,,And 3, it's got no more neighbors.
Dialogue: 0,0:49:18.22,0:49:19.74,中文,,0,0,0,,然后3它再也没有邻居了
Dialogue: 0,0:49:19.74,0:49:21.52,英文,,0,0,0,,Look, there's no more neighbors.
Dialogue: 0,0:49:19.74,0:49:21.52,中文,,0,0,0,,看再也没有邻居了
Dialogue: 0,0:49:21.52,0:49:23.30,英文,,0,0,0,,All of its neighbors have been marked.
Dialogue: 0,0:49:21.52,0:49:23.30,中文,,0,0,0,,所有的邻居都已经标记过了
Dialogue: 0,0:49:23.30,0:49:25.34,英文,,0,0,0,,So 3 has no more work to do.
Dialogue: 0,0:49:23.30,0:49:25.34,中文,,0,0,0,,3没有更多的工作要做了
Dialogue: 0,0:49:25.34,0:49:27.82,英文,,0,0,0,,So 3 is just going to return and say, I'm done.
Dialogue: 0,0:49:25.34,0:49:27.82,中文,,0,0,0,,3只是会返回并说我完成了
Dialogue: 0,0:49:27.82,0:49:29.60,英文,,0,0,0,,OK, so 3 has returned.
Dialogue: 0,0:49:27.82,0:49:29.60,中文,,0,0,0,,3号已经回来了
Dialogue: 0,0:49:29.60,0:49:31.67,英文,,0,0,0,,Great, but does that mean I'm done?
Dialogue: 0,0:49:29.60,0:49:31.67,中文,,0,0,0,,太好了但这意味着我完成了吗
Dialogue: 0,0:49:31.67,0:49:33.99,英文,,0,0,0,,If I return from 3, do I just go home?
Dialogue: 0,0:49:31.67,0:49:33.99,中文,,0,0,0,,如果我从3号回来我就可以回家了吗
Dialogue: 0,0:49:33.99,0:49:37.89,英文,,0,0,0,,Nope, because I have all this other work left to be done.
Dialogue: 0,0:49:33.99,0:49:37.89,中文,,0,0,0,,不因为我还有所有其他工作要做
Dialogue: 0,0:49:37.89,0:49:43.63,英文,,0,0,0,,So when I'm done with 3, I go back to 4, because that's who called 3.
Dialogue: 0,0:49:37.89,0:49:43.63,中文,,0,0,0,,当我完成了3号我回到4号因为那个叫3号的人就是4号
Dialogue: 0,0:49:43.63,0:49:44.63,英文,,0,0,0,,So here I am at 4.
Dialogue: 0,0:49:43.63,0:49:44.63,中文,,0,0,0,,我在这里是4号
Dialogue: 0,0:49:44.63,0:49:45.57,英文,,0,0,0,,And I look around.
Dialogue: 0,0:49:44.63,0:49:45.57,中文,,0,0,0,,然后我四处看看
Dialogue: 0,0:49:45.57,0:49:47.31,英文,,0,0,0,,Is there any more work to be done?
Dialogue: 0,0:49:45.57,0:49:47.31,中文,,0,0,0,,还有更多工作要做吗
Dialogue: 0,0:49:47.31,0:49:47.65,英文,,0,0,0,,Nope.
Dialogue: 0,0:49:47.31,0:49:47.65,中文,,0,0,0,,没有了
Dialogue: 0,0:49:47.65,0:49:48.57,英文,,0,0,0,,Everyone's been marked.
Dialogue: 0,0:49:47.65,0:49:48.57,中文,,0,0,0,,每个人都被标记了
Dialogue: 0,0:49:48.57,0:49:50.45,英文,,0,0,0,,So 4 can also return.
Dialogue: 0,0:49:48.57,0:49:50.45,中文,,0,0,0,,4也可以回来
Dialogue: 0,0:49:50.45,0:49:52.85,英文,,0,0,0,,I go back to 5, because that's who called 4.
Dialogue: 0,0:49:50.45,0:49:52.85,中文,,0,0,0,,我回到5因为那是叫4的人
Dialogue: 0,0:49:52.85,0:49:53.73,英文,,0,0,0,,And I look around.
Dialogue: 0,0:49:52.85,0:49:53.73,中文,,0,0,0,,我四处看看
Dialogue: 0,0:49:53.73,0:49:55.32,英文,,0,0,0,,Is there any more work to be done?
Dialogue: 0,0:49:53.73,0:49:55.32,中文,,0,0,0,,还有更多工作要做吗
Dialogue: 0,0:49:55.32,0:49:56.02,英文,,0,0,0,,Yes.
Dialogue: 0,0:49:55.32,0:49:56.02,中文,,0,0,0,,是的
Dialogue: 0,0:49:56.02,0:49:58.70,英文,,0,0,0,,There are some more unmarked neighbors to check.
Dialogue: 0,0:49:56.02,0:49:58.70,中文,,0,0,0,,还有一些未标记的邻居要检查
Dialogue: 0,0:49:58.70,0:50:00.66,英文,,0,0,0,,In particular, I got to go visiting 6.
Dialogue: 0,0:49:58.70,0:50:00.66,中文,,0,0,0,,特别是我要去拜访6号
Dialogue: 0,0:50:00.66,0:50:03.12,英文,,0,0,0,,So I'm going to go visit 6.
Dialogue: 0,0:50:00.66,0:50:03.12,中文,,0,0,0,,我要去拜访6号
Dialogue: 0,0:50:03.12,0:50:06.65,英文,,0,0,0,,And I'm going to write down how I got to 6, which is from 5.
Dialogue: 0,0:50:03.12,0:50:06.65,中文,,0,0,0,,我要写下我是如何到达6号的那是从5号来的
Dialogue: 0,0:50:06.65,0:50:07.19,英文,,0,0,0,,So I'll go to 6.
Dialogue: 0,0:50:06.65,0:50:07.19,中文,,0,0,0,,我会去6号
Dialogue: 0,0:50:07.19,0:50:08.77,英文,,0,0,0,,I will mark it.
Dialogue: 0,0:50:07.19,0:50:08.77,中文,,0,0,0,,我会标记它
Dialogue: 0,0:50:08.77,0:50:09.75,英文,,0,0,0,,And I'll check.
Dialogue: 0,0:50:08.77,0:50:09.75,中文,,0,0,0,,我来检查一下
Dialogue: 0,0:50:09.75,0:50:11.37,英文,,0,0,0,,6, do you have any unmarked neighbors?
Dialogue: 0,0:50:09.75,0:50:11.37,中文,,0,0,0,,6你有没有标记过的邻居
Dialogue: 0,0:50:11.37,0:50:13.01,英文,,0,0,0,,Yes.
Dialogue: 0,0:50:11.37,0:50:13.01,中文,,0,0,0,,有
Dialogue: 0,0:50:13.01,0:50:13.73,英文,,0,0,0,,You've got 7.
Dialogue: 0,0:50:13.01,0:50:13.73,中文,,0,0,0,,你有7个
Dialogue: 0,0:50:13.73,0:50:14.74,英文,,0,0,0,,It's not marked.
Dialogue: 0,0:50:13.73,0:50:14.74,中文,,0,0,0,,它没有标记
Dialogue: 0,0:50:14.74,0:50:16.86,英文,,0,0,0,,So I'll write down how I got to 7, which is from 6.
Dialogue: 0,0:50:14.74,0:50:16.86,中文,,0,0,0,,我会写下我是如何得到7的就是从6得来的
Dialogue: 0,0:50:16.86,0:50:18.90,英文,,0,0,0,,So I write it down.
Dialogue: 0,0:50:16.86,0:50:18.90,中文,,0,0,0,,我写下来
Dialogue: 0,0:50:18.90,0:50:19.74,英文,,0,0,0,,Great.
Dialogue: 0,0:50:18.90,0:50:19.74,中文,,0,0,0,,太好了
Dialogue: 0,0:50:19.74,0:50:21.78,英文,,0,0,0,,7, do you have any more unmarked neighbors?
Dialogue: 0,0:50:19.74,0:50:21.78,中文,,0,0,0,,7你还有没有更多未标记的邻居
Dialogue: 0,0:50:21.78,0:50:22.14,英文,,0,0,0,,No.
Dialogue: 0,0:50:21.78,0:50:22.14,中文,,0,0,0,,没有
Dialogue: 0,0:50:22.14,0:50:23.02,英文,,0,0,0,,So you're done.
Dialogue: 0,0:50:22.14,0:50:23.02,中文,,0,0,0,,那你就完成了
Dialogue: 0,0:50:23.02,0:50:24.56,英文,,0,0,0,,I can go back to 6.
Dialogue: 0,0:50:23.02,0:50:24.56,中文,,0,0,0,,我可以回到6
Dialogue: 0,0:50:24.56,0:50:26.60,英文,,0,0,0,,6, do you have any more unmarked neighbors?
Dialogue: 0,0:50:24.56,0:50:26.60,中文,,0,0,0,,6你还有没有更多未标记的邻居
Dialogue: 0,0:50:26.60,0:50:26.86,英文,,0,0,0,,No.
Dialogue: 0,0:50:26.60,0:50:26.86,中文,,0,0,0,,没有
Dialogue: 0,0:50:26.86,0:50:28.02,英文,,0,0,0,,You're done.
Dialogue: 0,0:50:26.86,0:50:28.02,中文,,0,0,0,,你完成了
Dialogue: 0,0:50:28.02,0:50:30.22,英文,,0,0,0,,5, do you have any more unmarked neighbors?
Dialogue: 0,0:50:28.02,0:50:30.22,中文,,0,0,0,,5你还有没有更多没有标记的邻居
Dialogue: 0,0:50:30.22,0:50:31.04,英文,,0,0,0,,Yes.
Dialogue: 0,0:50:30.22,0:50:31.04,中文,,0,0,0,,有的
Dialogue: 0,0:50:31.04,0:50:32.62,英文,,0,0,0,,You still have to go to 8.
Dialogue: 0,0:50:31.04,0:50:32.62,中文,,0,0,0,,你还得去8号
Dialogue: 0,0:50:32.62,0:50:34.00,英文,,0,0,0,,Let's go to 8 real quick.
Dialogue: 0,0:50:32.62,0:50:34.00,中文,,0,0,0,,我们快点去8号
Dialogue: 0,0:50:34.00,0:50:35.64,英文,,0,0,0,,I write down how to get to 8.
Dialogue: 0,0:50:34.00,0:50:35.64,中文,,0,0,0,,我写下了如何去8号
Dialogue: 0,0:50:35.64,0:50:40.07,英文,,0,0,0,,And now everything is marked, so all of my functions will just return.
Dialogue: 0,0:50:35.64,0:50:40.07,中文,,0,0,0,,现在所有的都标记好了我的所有函数都会直接返回
Dialogue: 0,0:50:40.07,0:50:44.43,英文,,0,0,0,,Nothing more to do, nothing more to do, nothing more to do, nothing more to do.
Dialogue: 0,0:50:40.07,0:50:44.43,中文,,0,0,0,,没什么事情要做没什么事情要做没什么事情要做没什么事情要做
Dialogue: 0,0:50:44.43,0:50:45.69,英文,,0,0,0,,So I'm all done.
Dialogue: 0,0:50:44.43,0:50:45.69,中文,,0,0,0,,我都完成了
Dialogue: 0,0:50:45.69,0:50:51.69,英文,,0,0,0,,And the key idea before you go, look at this h2 array, because think about what I've just built.
Dialogue: 0,0:50:45.69,0:50:51.69,中文,,0,0,0,,在你走之前关键的想法是看看这个 h2 数组因为想想我刚刚建立的东西
Dialogue: 0,0:50:51.69,0:50:54.35,英文,,0,0,0,,This tells me how to get to every vertex.
Dialogue: 0,0:50:51.69,0:50:54.35,中文,,0,0,0,,这告诉我如何到达每个顶点
Dialogue: 0,0:50:54.35,0:50:56.95,英文,,0,0,0,,So for example, how do I get to 7?
Dialogue: 0,0:50:54.35,0:50:56.95,中文,,0,0,0,,例如我怎么到达 7
Dialogue: 0,0:50:56.95,0:50:58.51,英文,,0,0,0,,I get there from 6.
Dialogue: 0,0:50:56.95,0:50:58.51,中文,,0,0,0,,我是从 6 到达的
Dialogue: 0,0:50:58.51,0:50:59.09,英文,,0,0,0,,How do I get to 6?
Dialogue: 0,0:50:58.51,0:50:59.09,中文,,0,0,0,,我怎么到达 6
Dialogue: 0,0:50:59.09,0:51:01.37,英文,,0,0,0,,I got there from 5.
Dialogue: 0,0:50:59.09,0:51:01.37,中文,,0,0,0,,我是从5号到达的
Dialogue: 0,0:51:01.37,0:51:02.07,英文,,0,0,0,,How do I get to 5?
Dialogue: 0,0:51:01.37,0:51:02.07,中文,,0,0,0,,我怎么到5号
Dialogue: 0,0:51:02.07,0:51:04.24,英文,,0,0,0,,I got there from 2.
Dialogue: 0,0:51:02.07,0:51:04.24,中文,,0,0,0,,我是从2号到达的
Dialogue: 0,0:51:04.24,0:51:05.80,英文,,0,0,0,,How do I get to 2?
Dialogue: 0,0:51:04.24,0:51:05.80,中文,,0,0,0,,我怎么到2号
Dialogue: 0,0:51:05.80,0:51:07.00,英文,,0,0,0,,I got there from 1.
Dialogue: 0,0:51:05.80,0:51:07.00,中文,,0,0,0,,我是从1号到达的
Dialogue: 0,0:51:07.00,0:51:08.16,英文,,0,0,0,,And how do I get to 1?
Dialogue: 0,0:51:07.00,0:51:08.16,中文,,0,0,0,,那我怎么到1号呢
Dialogue: 0,0:51:08.16,0:51:09.86,英文,,0,0,0,,I got there from the source.
Dialogue: 0,0:51:08.16,0:51:09.86,中文,,0,0,0,,我是从源头到达的
Dialogue: 0,0:51:09.86,0:51:17.06,英文,,0,0,0,,So by using this edge2 array, it actually gives me a picture or a diagram telling me how to get to every single node.
Dialogue: 0,0:51:09.86,0:51:17.06,中文,,0,0,0,,通过使用这个 edge2 数组实际上给了我一个图片或者图表告诉我如何到达每一个单独的节点
Dialogue: 0,0:51:17.06,0:51:27.65,英文,,0,0,0,,So by using depth-first search and by keeping track of how I visited every node, like where I came from, this edge-to-array will help me remember how to get to every single node.
Dialogue: 0,0:51:17.06,0:51:27.65,中文,,0,0,0,,通过使用深度优先搜索并且记录我访问每一个节点的方式比如我是从哪里来的这个 edge-to-array 将帮助我记住如何到达每一个单独的节点
Dialogue: 0,0:51:27.65,0:51:31.21,英文,,0,0,0,,OK, I guess I will have to leave this last point for next time.
Dialogue: 0,0:51:27.65,0:51:31.21,中文,,0,0,0,,我想我会把最后这一点留到下次再说
Dialogue: 0,0:51:31.21,0:51:39.24,英文,,0,0,0,,But all I will say for next time is just that, just as there are many tree traversals, what we just did was one of many different graph traversals.
Dialogue: 0,0:51:31.21,0:51:39.24,中文,,0,0,0,,但是我要说的是就像有很多树的遍历一样我们刚刚做的只是许多不同的图的遍历之一
Dialogue: 0,0:51:39.24,0:51:42.38,英文,,0,0,0,,OK, tree traversals, graph traversals, DFS, it's fun.
Dialogue: 0,0:51:39.24,0:51:42.38,中文,,0,0,0,,树的遍历图的遍历dfs很有趣
Dialogue: 0,0:51:42.38,0:51:43.36,英文,,0,0,0,,I'll see you next time.
Dialogue: 0,0:51:42.38,0:51:43.36,中文,,0,0,0,,下次见
Dialogue: 0,0:51:43.36,0:51:43.44,英文,,0,0,0,,OK.
