[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 3
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1152
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Audio File: D:/python_code/video_tool/result/cs61b/[61B SP24] Lecture 39 - Computability, P=NP.mp4
Video File: D:/python_code/video_tool/result/cs61b/[61B SP24] Lecture 39 - Computability, P=NP.mp4
Video AR Mode: 4
Video AR Value: 1.600000
Video Zoom Percent: 1.125000
Scroll Position: 524
Active Line: 537
Video Position: 69166

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,14,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,90,100,0,0,1,1.33333,1.33333,2,5,5,8,1
Style: 英文,Arial,24,&H00FFFF00,&H000A0A0C,&H000A0A0C,&H00FFFFFF,-1,0,0,0,90,100,0,0,1,1,1,2,2,2,6,1
Style: 中文,微软雅黑,38,&H0000FFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,2,2,20,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
Dialogue: 0,0:00:03.67,0:00:06.70,英文,,0,0,0,,All right, let me start recording and then hiding this.
Dialogue: 0,0:00:03.67,0:00:06.70,中文,,0,0,0,,好的  我先开始录制  然后把这些隐藏起来
Dialogue: 0,0:00:06.70,0:00:08.10,英文,,0,0,0,,All right.
Dialogue: 0,0:00:06.70,0:00:08.10,中文,,0,0,0,,
Dialogue: 0,0:00:08.10,0:00:12.00,英文,,0,0,0,,So welcome, everyone, to our penultimate lecture.
Dialogue: 0,0:00:08.10,0:00:12.00,中文,,0,0,0,,欢迎大家来到我们倒数第二节课
Dialogue: 0,0:00:12.00,0:00:16.36,英文,,0,0,0,,So today we'll be talking a bit about some cool math behind this.
Dialogue: 0,0:00:12.00,0:00:16.36,中文,,0,0,0,,今天我们会聊一些这背后的很酷的数学知识
Dialogue: 0,0:00:16.36,0:00:24.98,英文,,0,0,0,,And we'll eventually get to a problem that if you solve, you win $1 million.
Dialogue: 0,0:00:16.36,0:00:24.98,中文,,0,0,0,,最终我们会遇到一个问题  如果你能解决它  你就能赢得 100 万美元
Dialogue: 0,0:00:24.98,0:00:30.88,英文,,0,0,0,,So just as a brief caveat, this lecture is somewhat dense.
Dialogue: 0,0:00:24.98,0:00:30.88,中文,,0,0,0,,简单提醒一下  这节课内容有点密集
Dialogue: 0,0:00:30.88,0:00:36.98,英文,,0,0,0,,It covers basically a full lecture of 170 plus a full lecture of 172.
Dialogue: 0,0:00:30.88,0:00:36.98,中文,,0,0,0,,它基本上涵盖了 170 和 172 两节课的全部内容
Dialogue: 0,0:00:36.98,0:00:39.92,英文,,0,0,0,,So if you don't understand everything, don't worry about it.
Dialogue: 0,0:00:36.98,0:00:39.92,中文,,0,0,0,,如果你不理解所有内容  别担心
Dialogue: 0,0:00:39.92,0:00:45.71,英文,,0,0,0,,You will eventually go into classes where you learn a lot more about the underlying theory behind this.
Dialogue: 0,0:00:39.92,0:00:45.71,中文,,0,0,0,,你最终会进入一些课程  在那里你会学到更多关于这背后的基础理论
Dialogue: 0,0:00:45.71,0:00:50.61,英文,,0,0,0,,But this is still a really cool lecture to go over.
Dialogue: 0,0:00:45.71,0:00:50.61,中文,,0,0,0,,但这仍然是一节非常酷的课程
Dialogue: 0,0:00:50.61,0:00:55.83,英文,,0,0,0,,Hopefully, I've made this somewhat approachable.
Dialogue: 0,0:00:50.61,0:00:55.83,中文,,0,0,0,,希望我把它讲得比较容易理解
Dialogue: 0,0:00:55.83,0:01:01.93,英文,,0,0,0,,So before we get started, let's kind of do some practice on reductions.
Dialogue: 0,0:00:55.83,0:01:01.93,中文,,0,0,0,,在开始之前  我们先来练习一下规约
Dialogue: 0,0:01:01.93,0:01:05.51,英文,,0,0,0,,So let's say that we're playing this game called the knapsack problem.
Dialogue: 0,0:01:01.93,0:01:05.51,中文,,0,0,0,,假设我们正在玩一个叫做背包问题的游戏
Dialogue: 0,0:01:05.51,0:01:09.63,英文,,0,0,0,,So you're a thief, and you're planning a heist on a museum.
Dialogue: 0,0:01:05.51,0:01:09.63,中文,,0,0,0,,你是一个小偷  你正在计划抢劫博物馆
Dialogue: 0,0:01:09.63,0:01:12.51,英文,,0,0,0,,So this museum has a large number of items.
Dialogue: 0,0:01:09.63,0:01:12.51,中文,,0,0,0,,这个博物馆有很多物品
Dialogue: 0,0:01:12.51,0:01:15.23,英文,,0,0,0,,Each one has a different weight and a different monetary value.
Dialogue: 0,0:01:12.51,0:01:15.23,中文,,0,0,0,,每件物品都有不同的重量和不同的价值
Dialogue: 0,0:01:15.23,0:01:19.94,英文,,0,0,0,,And your goal is to steal the set of items with the most total value.
Dialogue: 0,0:01:15.23,0:01:19.94,中文,,0,0,0,,你的目标是偷走总价值最高的物品组合
Dialogue: 0,0:01:19.94,0:01:25.63,英文,,0,0,0,,The problem is you have a knapsack, and you can only carry up to 10 pounds worth of stuff.
Dialogue: 0,0:01:19.94,0:01:25.63,中文,,0,0,0,,问题是  你有一个背包  你最多只能携带 10 磅重的物品
Dialogue: 0,0:01:25.63,0:01:26.78,英文,,0,0,0,,You can't make multiple trips.
Dialogue: 0,0:01:25.63,0:01:26.78,中文,,0,0,0,,你不能多次往返
Dialogue: 0,0:01:26.78,0:01:31.26,英文,,0,0,0,,You just have one time you can get through this.
Dialogue: 0,0:01:26.78,0:01:31.26,中文,,0,0,0,,你只有一次机会穿过这里
Dialogue: 0,0:01:31.26,0:01:33.70,英文,,0,0,0,,So you'll have to decide what you want to get.
Dialogue: 0,0:01:31.26,0:01:33.70,中文,,0,0,0,,所以你得决定想要什么
Dialogue: 0,0:01:33.70,0:01:34.96,英文,,0,0,0,,Do you want to steal crown jewels?
Dialogue: 0,0:01:33.70,0:01:34.96,中文,,0,0,0,,你想偷王冠上的宝石吗？
Dialogue: 0,0:01:34.96,0:01:37.18,英文,,0,0,0,,They're heavy, but they're really valuable.
Dialogue: 0,0:01:34.96,0:01:37.18,中文,,0,0,0,,它们很重  但是非常值钱
Dialogue: 0,0:01:37.18,0:01:38.64,英文,,0,0,0,,Do you want to steal the screen?
Dialogue: 0,0:01:37.18,0:01:38.64,中文,,0,0,0,,你想偷屏幕吗？
Dialogue: 0,0:01:38.64,0:01:42.72,英文,,0,0,0,,It's less valuable, but it's much lighter.
Dialogue: 0,0:01:38.64,0:01:42.72,中文,,0,0,0,,它不那么值钱  但轻得多
Dialogue: 0,0:01:42.72,0:01:51.80,英文,,0,0,0,,Or do you want to steal this tiny postage stamp, which is apparently extremely, extremely valuable, despite it saying only $1 on it?
Dialogue: 0,0:01:42.72,0:01:51.80,中文,,0,0,0,,或者你想偷这个小小的邮票吗  它显然非常非常值钱  尽管上面只写着1美元？
Dialogue: 0,0:01:51.80,0:01:54.84,英文,,0,0,0,,Well, let's say that we have these particular values.
Dialogue: 0,0:01:51.80,0:01:54.84,中文,,0,0,0,,好吧  假设我们有这些特定的价值
Dialogue: 0,0:01:54.84,0:01:58.70,英文,,0,0,0,,We have these stamps that are abnormally heavy.
Dialogue: 0,0:01:54.84,0:01:58.70,中文,,0,0,0,,我们有这些异常重的邮票
Dialogue: 0,0:01:58.70,0:02:01.76,英文,,0,0,0,,We have a crown that's three pounds, but worth $20 million.
Dialogue: 0,0:01:58.70,0:02:01.76,中文,,0,0,0,,我们有一个三磅重的王冠  价值 2000 万美元
Dialogue: 0,0:02:01.76,0:02:04.84,英文,,0,0,0,,A painting that's five pounds, but worth $10 million.
Dialogue: 0,0:02:01.76,0:02:04.84,中文,,0,0,0,,一幅五磅重的画  价值 1000 万美元
Dialogue: 0,0:02:04.84,0:02:09.40,英文,,0,0,0,,A diamond that's worth a million dollars, but two pounds.
Dialogue: 0,0:02:04.84,0:02:09.40,中文,,0,0,0,,一颗价值100万美元的钻石  但重两磅
Dialogue: 0,0:02:09.40,0:02:13.98,英文,,0,0,0,,And then you have some random pebble that you found on the ground that's $1 worth.
Dialogue: 0,0:02:09.40,0:02:13.98,中文,,0,0,0,,然后你在地上发现了一些随机的鹅卵石  价值 1 美元
Dialogue: 0,0:02:13.98,0:02:21.15,英文,,0,0,0,,So what items are you planning to steal here?
Dialogue: 0,0:02:13.98,0:02:21.15,中文,,0,0,0,,那么你打算在这里偷什么东西呢？
Dialogue: 0,0:02:21.15,0:02:22.76,英文,,0,0,0,,So feel free to discuss.
Dialogue: 0,0:02:21.15,0:02:22.76,中文,,0,0,0,,所以请随意讨论
Dialogue: 0,0:02:22.76,0:02:24.92,英文,,0,0,0,,If you were the thieves, what would you steal?
Dialogue: 0,0:02:22.76,0:02:24.92,中文,,0,0,0,,如果你是小偷  你会偷什么？
Dialogue: 0,0:02:24.92,0:02:58.90,英文,,0,0,0,,I'll give a minute.
Dialogue: 0,0:02:24.92,0:02:58.90,中文,,0,0,0,,我给你一分钟
Dialogue: 0,0:02:58.90,0:03:00.26,英文,,0,0,0,,All right.
Dialogue: 0,0:02:58.90,0:03:00.26,中文,,0,0,0,,
Dialogue: 0,0:03:00.26,0:03:02.21,英文,,0,0,0,,Let's bring everyone back.
Dialogue: 0,0:03:00.26,0:03:02.21,中文,,0,0,0,,让我们把大家都带回来
Dialogue: 0,0:03:02.21,0:03:05.41,英文,,0,0,0,,How many people want to steal the stamp?
Dialogue: 0,0:03:02.21,0:03:05.41,中文,,0,0,0,,有多少人想偷邮票？
Dialogue: 0,0:03:05.41,0:03:06.03,英文,,0,0,0,,Everyone.
Dialogue: 0,0:03:05.41,0:03:06.03,中文,,0,0,0,,每个人
Dialogue: 0,0:03:06.03,0:03:09.01,英文,,0,0,0,,How many people want to steal the crown?
Dialogue: 0,0:03:06.03,0:03:09.01,中文,,0,0,0,,有多少人想偷皇冠？
Dialogue: 0,0:03:09.01,0:03:09.75,英文,,0,0,0,,Most people still.
Dialogue: 0,0:03:09.01,0:03:09.75,中文,,0,0,0,,大多数人还是想偷的
Dialogue: 0,0:03:09.75,0:03:13.13,英文,,0,0,0,,How many people want to steal the painting?
Dialogue: 0,0:03:09.75,0:03:13.13,中文,,0,0,0,,有多少人想偷画？
Dialogue: 0,0:03:13.13,0:03:13.77,英文,,0,0,0,,Most people.
Dialogue: 0,0:03:13.13,0:03:13.77,中文,,0,0,0,,大多数人
Dialogue: 0,0:03:13.77,0:03:16.23,英文,,0,0,0,,How many people want to steal the diamond?
Dialogue: 0,0:03:13.77,0:03:16.23,中文,,0,0,0,,有多少人想偷钻石？
Dialogue: 0,0:03:16.23,0:03:17.03,英文,,0,0,0,,No one.
Dialogue: 0,0:03:16.23,0:03:17.03,中文,,0,0,0,,没人
Dialogue: 0,0:03:17.03,0:03:19.39,英文,,0,0,0,,How about the pebble?
Dialogue: 0,0:03:17.03,0:03:19.39,中文,,0,0,0,,那鹅卵石呢？
Dialogue: 0,0:03:19.39,0:03:22.53,英文,,0,0,0,,Why do people want to steal the pebble?
Dialogue: 0,0:03:19.39,0:03:22.53,中文,,0,0,0,,为什么人们想偷鹅卵石？
Dialogue: 0,0:03:22.53,0:03:24.73,英文,,0,0,0,,Well, why do we want to steal the pebble?
Dialogue: 0,0:03:22.53,0:03:24.73,中文,,0,0,0,,嗯  为什么我们想偷鹅卵石？
Dialogue: 0,0:03:24.73,0:03:26.61,英文,,0,0,0,,Does anyone want to explain why?
Dialogue: 0,0:03:24.73,0:03:26.61,中文,,0,0,0,,有人想解释一下原因吗？
Dialogue: 0,0:03:26.61,0:03:42.33,英文,,0,0,0,,Yeah.
Dialogue: 0,0:03:26.61,0:03:42.33,中文,,0,0,0,,
Dialogue: 0,0:03:42.33,0:03:48.92,英文,,0,0,0,,Yeah, as it turns out in this particular set, if you want to steal the three high-value items, you get up to nine pounds.
Dialogue: 0,0:03:42.33,0:03:48.92,中文,,0,0,0,,是的  事实证明  在这个特定的集合中  如果你想偷走三个高价值的物品  你最多可以承受九磅的重量
Dialogue: 0,0:03:48.92,0:03:50.82,英文,,0,0,0,,You can't steal the diamond with that.
Dialogue: 0,0:03:48.92,0:03:50.82,中文,,0,0,0,,你偷不了钻石
Dialogue: 0,0:03:50.82,0:03:52.66,英文,,0,0,0,,It's just too heavy.
Dialogue: 0,0:03:50.82,0:03:52.66,中文,,0,0,0,,它太重了
Dialogue: 0,0:03:52.66,0:03:53.84,英文,,0,0,0,,So you might as well steal a pebble.
Dialogue: 0,0:03:52.66,0:03:53.84,中文,,0,0,0,,所以你不如偷一块鹅卵石
Dialogue: 0,0:03:53.84,0:03:55.94,英文,,0,0,0,,It's worth a dollar.
Dialogue: 0,0:03:53.84,0:03:55.94,中文,,0,0,0,,它值一美元
Dialogue: 0,0:03:55.94,0:03:58.22,英文,,0,0,0,,Might as well.
Dialogue: 0,0:03:55.94,0:03:58.22,中文,,0,0,0,,不如偷它
Dialogue: 0,0:03:58.22,0:04:05.66,英文,,0,0,0,,So overall, you get a total of $40 million and $1 worth of stuff.
Dialogue: 0,0:03:58.22,0:04:05.66,中文,,0,0,0,,总的来说  你总共可以得到4000万美元和1美元的东西
Dialogue: 0,0:04:05.66,0:04:12.59,英文,,0,0,0,,Now, as it turns out, there's three different problems that we can think about that's based on this same problem.
Dialogue: 0,0:04:05.66,0:04:12.59,中文,,0,0,0,,现在  事实证明  我们可以考虑三个不同的问题  它们都基于同一个问题
Dialogue: 0,0:04:12.59,0:04:15.37,英文,,0,0,0,,So we'll look at these three different types.
Dialogue: 0,0:04:12.59,0:04:15.37,中文,,0,0,0,,我们将看看这三种不同的类型
Dialogue: 0,0:04:15.37,0:04:24.36,英文,,0,0,0,,So the first main way that we describe it is, given the list of items that we could steal and the weight limit, what set of items do we want to steal?
Dialogue: 0,0:04:15.37,0:04:24.36,中文,,0,0,0,,我们描述它的第一种主要方式是  给定我们可以偷窃的物品清单和重量限制  我们想要偷哪一套物品？
Dialogue: 0,0:04:24.36,0:04:30.18,英文,,0,0,0,,So if we had this particular problem, we would return stamp, crown, diamond, and pebble.
Dialogue: 0,0:04:24.36,0:04:30.18,中文,,0,0,0,,因此  如果我们遇到这个问题  我们会返回邮票、皇冠、钻石和鹅卵石
Dialogue: 0,0:04:30.18,0:04:35.23,英文,,0,0,0,,Another problem we can think about is just asking, I don't want to know the set of items.
Dialogue: 0,0:04:30.18,0:04:35.23,中文,,0,0,0,,我们可以考虑的另一个问题是  我不想知道物品的集合
Dialogue: 0,0:04:35.23,0:04:42.13,英文,,0,0,0,,I just want to know how much total value I can steal, so the maximum amount of money I can steal.
Dialogue: 0,0:04:35.23,0:04:42.13,中文,,0,0,0,,我只想知道我能偷多少钱  也就是我能偷的最大金额
Dialogue: 0,0:04:42.13,0:04:46.61,英文,,0,0,0,,And this third problem, we'll only actually return true or false.
Dialogue: 0,0:04:42.13,0:04:46.61,中文,,0,0,0,,而第三个问题  我们实际上只会返回真或假
Dialogue: 0,0:04:46.61,0:04:52.80,英文,,0,0,0,,We'll return true if we can hit a certain target and false if we cannot hit a certain target.
Dialogue: 0,0:04:46.61,0:04:52.80,中文,,0,0,0,,如果我们能达到某个目标  我们会返回真  如果我们不能达到某个目标  我们会返回假
Dialogue: 0,0:04:52.80,0:04:56.22,英文,,0,0,0,,So we'll give it a target value of how much we want to steal in this heist.
Dialogue: 0,0:04:52.80,0:04:56.22,中文,,0,0,0,,我们会给它一个目标值  即我们想在这场抢劫中偷多少钱
Dialogue: 0,0:04:56.22,0:04:59.86,英文,,0,0,0,,And we'll be returning true or false depending on whether or not we can reach that.
Dialogue: 0,0:04:56.22,0:04:59.86,中文,,0,0,0,,我们将根据是否可以达到目标返回真或假
Dialogue: 0,0:04:59.86,0:05:07.28,英文,,0,0,0,,So in this example here, if I say, can I steal at least $4 million or $40 million and $1 worth of stuff, you would say yes.
Dialogue: 0,0:04:59.86,0:05:07.28,中文,,0,0,0,,在這個例子中  如果我问  我能不能至少偷400万美元或4000万零1美元的东西  你会说可以
Dialogue: 0,0:05:07.28,0:05:15.61,英文,,0,0,0,,If I ask, can you steal at least $40 million and $2 worth of stuff, you would say no, because that's not possible.
Dialogue: 0,0:05:07.28,0:05:15.61,中文,,0,0,0,,如果我问  你能不能至少偷4000万零2美元的东西  你会说不能  因为那是不可能的
Dialogue: 0,0:05:15.61,0:05:20.15,英文,,0,0,0,,So these three problems, they seem to be somewhat related.
Dialogue: 0,0:05:15.61,0:05:20.15,中文,,0,0,0,,这三个问题  它们似乎有一定的关联
Dialogue: 0,0:05:20.15,0:05:26.84,英文,,0,0,0,,We'll try and actually formalize how they're related by showing that they reduce to each other.
Dialogue: 0,0:05:20.15,0:05:26.84,中文,,0,0,0,,我们将尝试通过展示它们如何相互简化来正式化它们之间的关系
Dialogue: 0,0:05:26.84,0:05:31.20,英文,,0,0,0,,So let's kind of show that these problems are equivalent with reductions.
Dialogue: 0,0:05:26.84,0:05:31.20,中文,,0,0,0,,让我们来展示一下这些问题是如何通过简化来等价的
Dialogue: 0,0:05:31.20,0:05:38.39,英文,,0,0,0,,So formally, what we're going to do is we're going to say that if we had some oracle, someone who can solve one of these problems in constant time,
Dialogue: 0,0:05:31.20,0:05:39.39,中文,,0,0,0,,正式地说  我们要做的是  如果我们有一个预言机  一个能够在常数时间内解决其中一个问题的人
Dialogue: 0,0:05:38.39,0:05:44.39,英文,,0,0,0,,then we could solve the other problems in constant time or in polynomial time as well.
Dialogue: 0,0:05:39.39,0:05:44.39,中文,,0,0,0,,那么我们也可以在常数时间或多项式时间内解决其他问题
Dialogue: 0,0:05:44.39,0:05:47.25,英文,,0,0,0,,So let's take an example.
Dialogue: 0,0:05:44.39,0:05:47.25,中文,,0,0,0,,让我们举个例子
Dialogue: 0,0:05:47.25,0:05:57.17,英文,,0,0,0,,When we go from three to two, problem three, it asks, can we steal at least the target amount?
Dialogue: 0,0:05:47.25,0:05:57.17,中文,,0,0,0,,当我们从第三个问题到第二个问题时  第三个问题问  我们是否可以至少偷到目标金额？
Dialogue: 0,0:05:57.17,0:06:02.79,英文,,0,0,0,,Problem two asks, what's the most amount you can steal?
Dialogue: 0,0:05:57.17,0:06:02.79,中文,,0,0,0,,第二个问题问  你能偷到的最大金额是多少？
Dialogue: 0,0:06:02.79,0:06:12.98,英文,,0,0,0,,So given an oracle to two, can you solve three?
Dialogue: 0,0:06:02.79,0:06:12.98,中文,,0,0,0,,那么  给定一个第二个问题的预言机  你能解决第三个问题吗？
Dialogue: 0,0:06:12.98,0:06:17.10,英文,,0,0,0,,So I have some problem that lets me solve.
Dialogue: 0,0:06:12.98,0:06:17.10,中文,,0,0,0,,我有一些问题可以解决
Dialogue: 0,0:06:17.10,0:06:20.18,英文,,0,0,0,,I can get exactly the number that I can steal at most.
Dialogue: 0,0:06:17.10,0:06:20.18,中文,,0,0,0,,我可以得到我最多可以偷的数字
Dialogue: 0,0:06:20.18,0:06:25.79,英文,,0,0,0,,And can I solve the problem where I get told, can I hit a target value?
Dialogue: 0,0:06:20.18,0:06:25.79,中文,,0,0,0,,我可以解决“能否达到目标值”这个问题吗？
Dialogue: 0,0:06:25.79,0:06:29.25,英文,,0,0,0,,How many people think this is fairly possible?
Dialogue: 0,0:06:25.79,0:06:29.25,中文,,0,0,0,,有多少人认为这很有可能实现？
Dialogue: 0,0:06:29.25,0:06:30.16,英文,,0,0,0,,Yeah.
Dialogue: 0,0:06:29.25,0:06:30.16,中文,,0,0,0,,嗯
Dialogue: 0,0:06:30.16,0:06:32.82,英文,,0,0,0,,How would you do this?
Dialogue: 0,0:06:30.16,0:06:32.82,中文,,0,0,0,,你打算怎么做？
Dialogue: 0,0:06:32.82,0:06:39.22,英文,,0,0,0,,Yeah.
Dialogue: 0,0:06:32.82,0:06:39.22,中文,,0,0,0,,
Dialogue: 0,0:06:39.22,0:06:40.54,英文,,0,0,0,,Yeah.
Dialogue: 0,0:06:39.22,0:06:40.54,中文,,0,0,0,,
Dialogue: 0,0:06:40.54,0:06:41.23,英文,,0,0,0,,I'll just look.
Dialogue: 0,0:06:40.54,0:06:41.23,中文,,0,0,0,,我看看
Dialogue: 0,0:06:41.23,0:06:42.53,英文,,0,0,0,,Is it 40 million and 1?
Dialogue: 0,0:06:41.23,0:06:42.53,中文,,0,0,0,,是 4000 万零 1 吗？
Dialogue: 0,0:06:42.53,0:06:42.99,英文,,0,0,0,,Yeah.
Dialogue: 0,0:06:42.53,0:06:42.99,中文,,0,0,0,,嗯
Dialogue: 0,0:06:42.99,0:06:45.51,英文,,0,0,0,,It's greater than our target value, so it's good.
Dialogue: 0,0:06:42.99,0:06:45.51,中文,,0,0,0,,这大于我们的目标值  所以很好
Dialogue: 0,0:06:45.51,0:06:47.55,英文,,0,0,0,,Yeah.
Dialogue: 0,0:06:45.51,0:06:47.55,中文,,0,0,0,,
Dialogue: 0,0:06:47.55,0:06:48.87,英文,,0,0,0,,What about this way?
Dialogue: 0,0:06:47.55,0:06:48.87,中文,,0,0,0,,这种方法怎么样？
Dialogue: 0,0:06:48.87,0:06:53.32,英文,,0,0,0,,If I have an oracle to 2, or if I have an oracle to 1 that tells me exactly
Dialogue: 0,0:06:48.87,0:06:53.32,中文,,0,0,0,,如果我有一个能够告诉我应该偷哪些物品才能最大化价值的神谕（对应问题 2）
Dialogue: 0,0:06:53.32,0:07:00.32,英文,,0,0,0,,what list of things to steal to maximize my value,
Dialogue: 0,0:06:53.32,0:07:00.32,中文,,0,0,0,,或者有一个能够告诉我应该偷哪些物品才能正好达到目标价值的神谕（对应问题 1）
Dialogue: 0,0:07:00.32,0:07:03.32,英文,,0,0,0,,can I determine what the maximum value I can steal?
Dialogue: 0,0:07:00.32,0:07:03.32,中文,,0,0,0,,我能否确定我能偷到的最大价值是多少？
Dialogue: 0,0:07:03.32,0:07:08.07,英文,,0,0,0,,How do I do that?
Dialogue: 0,0:07:03.32,0:07:08.07,中文,,0,0,0,,我该怎么做？
Dialogue: 0,0:07:08.07,0:07:13.75,英文,,0,0,0,,Just add up the values on that list.
Dialogue: 0,0:07:08.07,0:07:13.75,中文,,0,0,0,,只需将清单上的物品价值加起来
Dialogue: 0,0:07:13.75,0:07:15.63,英文,,0,0,0,,What about from three to one?
Dialogue: 0,0:07:13.75,0:07:15.63,中文,,0,0,0,,从问题 3 到问题 1 呢？
Dialogue: 0,0:07:15.63,0:07:22.22,英文,,0,0,0,,So if I had a solution to one, could I use that to get the solution to three?
Dialogue: 0,0:07:15.63,0:07:22.22,中文,,0,0,0,,如果我有了问题 1 的解决方案  我可以用它来得到问题 3 的解决方案吗？
Dialogue: 0,0:07:22.22,0:07:24.62,英文,,0,0,0,,So one is the list of items.
Dialogue: 0,0:07:22.22,0:07:24.62,中文,,0,0,0,,问题 1 是物品清单
Dialogue: 0,0:07:24.62,0:07:43.66,英文,,0,0,0,,Three is whether or not I can steal a certain target amount.
Dialogue: 0,0:07:24.62,0:07:43.66,中文,,0,0,0,,问题 3 是我是否可以偷到特定目标数量的物品
Dialogue: 0,0:07:43.66,0:07:46.44,英文,,0,0,0,,Well, as it turns out, yes.
Dialogue: 0,0:07:43.66,0:07:46.44,中文,,0,0,0,,事实证明  可以
Dialogue: 0,0:07:46.44,0:07:48.83,英文,,0,0,0,,You could just come up with your own algorithm to do that.
Dialogue: 0,0:07:46.44,0:07:48.83,中文,,0,0,0,,你可以自己想出一个算法来做到这一点
Dialogue: 0,0:07:48.83,0:07:53.65,英文,,0,0,0,,But the simplest way I can think of is use one to solve two, use two to solve three.
Dialogue: 0,0:07:48.83,0:07:53.65,中文,,0,0,0,,但我能想到的最简单的方法是  用第一个问题的结果去解决第二个问题  用第二个问题的答案去解决第三个问题
Dialogue: 0,0:07:53.65,0:07:55.77,英文,,0,0,0,,If I can do that, then I can use one to solve three.
Dialogue: 0,0:07:53.65,0:07:55.77,中文,,0,0,0,,如果我能做到这一点  那么我就可以用第一个问题的答案去解决第三个问题
Dialogue: 0,0:07:55.77,0:07:58.65,英文,,0,0,0,,So in this kind of way, this graph is transitive.
Dialogue: 0,0:07:55.77,0:07:58.65,中文,,0,0,0,,所以以这种方式  这个图是传递的
Dialogue: 0,0:07:58.65,0:08:05.26,英文,,0,0,0,,If I can go from one to another, from three to two to one, then I can go from three to one directly.
Dialogue: 0,0:07:58.65,0:08:05.26,中文,,0,0,0,,如果我可以从一个点到另一个点  从三到二再到一  那么我可以直接从三到一
Dialogue: 0,0:08:05.26,0:08:06.82,英文,,0,0,0,,So those are kind of the easy directions.
Dialogue: 0,0:08:05.26,0:08:06.82,中文,,0,0,0,,这些都是比较容易的方向
Dialogue: 0,0:08:06.82,0:08:11.77,英文,,0,0,0,,It's kind of going from where you have more information to less information needed.
Dialogue: 0,0:08:06.82,0:08:11.77,中文,,0,0,0,,这有点像从信息量多的地方到信息量少的地方
Dialogue: 0,0:08:11.77,0:08:15.39,英文,,0,0,0,,So let's try going the opposite direction.
Dialogue: 0,0:08:11.77,0:08:15.39,中文,,0,0,0,,那我们试试反方向吧
Dialogue: 0,0:08:15.39,0:08:26.82,英文,,0,0,0,,So if I want to go from the most value I can steal to the list of items, you can still solve this in a polynomial time, but it's going to be a bit trickier.
Dialogue: 0,0:08:15.39,0:08:26.82,中文,,0,0,0,,如果我想从我能偷到的最大价值到物品清单  你仍然可以在多项式时间内解决这个问题  但它会有点棘手
Dialogue: 0,0:08:26.82,0:08:34.98,英文,,0,0,0,,Kind of the way that you do this is you start off with a list of all the things, and you ask, well, what's the most value I can steal from it?
Dialogue: 0,0:08:26.82,0:08:34.98,中文,,0,0,0,,解决这个问题的方法是  从所有物品的清单开始  然后问  好吧  我能从中偷到的最大价值是多少？
Dialogue: 0,0:08:34.98,0:08:41.55,英文,,0,0,0,,And if I get some number k, let's say, then what I'll do is I'll say, well, let's say I just remove one of these items.
Dialogue: 0,0:08:34.98,0:08:41.55,中文,,0,0,0,,如果我得到某个数字 k  比如说  那么我会说  好吧  假设我只是删除其中一个物品
Dialogue: 0,0:08:41.55,0:08:44.63,英文,,0,0,0,,Is the maximum amount I can steal still k?
Dialogue: 0,0:08:41.55,0:08:44.63,中文,,0,0,0,,我能偷到的最大金额还是 k 吗？
Dialogue: 0,0:08:44.63,0:08:50.17,英文,,0,0,0,,If it is, then that means that that item was not in the list of things that I needed to steal to make a set of k.
Dialogue: 0,0:08:44.63,0:08:50.17,中文,,0,0,0,,如果是  那就意味着那个物品不在我需要偷的东西清单上
Dialogue: 0,0:08:50.17,0:08:55.17,英文,,0,0,0,, If it isn't k, then that means that that item was one of the things I needed to steal.
Dialogue: 0,0:08:50.17,0:08:55.17,中文,,0,0,0,,以组成一个 k 的集合  如果不是 k  那就意味着那个物品是我需要偷的东西之一
Dialogue: 0,0:08:55.17,0:09:05.95,英文,,0,0,0,,So I can keep doing this over and over with each set of items minus one item until I get a list of items that sums to k, exactly.
Dialogue: 0,0:08:55.17,0:09:05.95,中文,,0,0,0,,我可以一遍又一遍地对每一组减去一个物品的物品进行这个操作  直到我得到一个总和正好是 k 的物品清单
Dialogue: 0,0:09:05.95,0:09:18.32,英文,,0,0,0,,So using this, if I had some solution that tells me the maximum amount I can steal, then I should be able to solve the list of items.
Dialogue: 0,0:09:05.95,0:09:18.32,中文,,0,0,0,,利用这一点  如果我有一个解决方案告诉我我能偷到的最大金额  那么我应该能够解决物品清单的问题
Dialogue: 0,0:09:18.32,0:09:20.44,英文,,0,0,0,,What about this direction?
Dialogue: 0,0:09:18.32,0:09:20.44,中文,,0,0,0,,这个方向呢？
Dialogue: 0,0:09:20.44,0:09:27.63,英文,,0,0,0,,If I had a solution to the problem, can I steal up to a certain amount?
Dialogue: 0,0:09:20.44,0:09:27.63,中文,,0,0,0,,如果我有一个解决这个问题的方案  我能偷到一定数量的东西吗？
Dialogue: 0,0:09:27.63,0:09:41.99,英文,,0,0,0,,Can you tell me the maximum amount I can steal in polynomial time?
Dialogue: 0,0:09:27.63,0:09:41.99,中文,,0,0,0,,你能告诉我  在多项式时间内  我能偷到的最大数量吗？
Dialogue: 0,0:09:41.99,0:09:43.41,英文,,0,0,0,,Feel free to discuss with your neighbor for a bit.
Dialogue: 0,0:09:41.99,0:09:43.41,中文,,0,0,0,,请随意与你的邻居讨论一下
Dialogue: 0,0:09:43.41,0:09:52.63,英文,,0,0,0,,I'll give, let's say, two minutes on this.
Dialogue: 0,0:09:43.41,0:09:52.63,中文,,0,0,0,,我给  比如说  两分钟的时间来讨论这个
Dialogue: 0,0:09:52.63,0:10:00.49,英文,,0,0,0,,How was the chat?
Dialogue: 0,0:09:52.63,0:10:00.49,中文,,0,0,0,,聊得怎么样？
Dialogue: 0,0:10:00.49,0:10:04.45,英文,,0,0,0,,The last one I was going to.
Dialogue: 0,0:10:00.49,0:10:04.45,中文,,0,0,0,,这是我最后一个要聊的
Dialogue: 0,0:10:04.45,0:10:11.90,英文,,0,0,0,,You checked.
Dialogue: 0,0:10:04.45,0:10:11.90,中文,,0,0,0,,你查过了
Dialogue: 0,0:10:11.90,0:10:24.31,英文,,0,0,0,,Yeah, that doesn't seem to be doing anything yet.
Dialogue: 0,0:10:11.90,0:10:24.31,中文,,0,0,0,,是啊  目前看来还没有任何效果
Dialogue: 0,0:10:24.31,0:10:37.84,英文,,0,0,0,,Do you have a solution?
Dialogue: 0,0:10:24.31,0:10:37.84,中文,,0,0,0,,你有什么解决方案吗？
Dialogue: 0,0:10:37.84,0:10:38.22,英文,,0,0,0,,OK.
Dialogue: 0,0:10:37.84,0:10:38.22,中文,,0,0,0,,
Dialogue: 0,0:10:38.22,0:10:53.88,英文,,0,0,0,,Let's give it another minute or so so that other people can look for solutions.
Dialogue: 0,0:10:38.22,0:10:53.88,中文,,0,0,0,,让我们再等一分钟左右  让其他人可以寻找解决方案
Dialogue: 0,0:10:53.88,0:10:56.59,英文,,0,0,0,,OK.
Dialogue: 0,0:10:53.88,0:10:56.59,中文,,0,0,0,,
Dialogue: 0,0:10:56.59,0:10:58.77,英文,,0,0,0,,I think that's good.
Dialogue: 0,0:10:56.59,0:10:58.77,中文,,0,0,0,,我觉得这样就可以了
Dialogue: 0,0:10:58.77,0:11:02.13,英文,,0,0,0,,Does anyone have a solution to this?
Dialogue: 0,0:10:58.77,0:11:02.13,中文,,0,0,0,,有人有解决办法吗？
Dialogue: 0,0:11:02.13,0:11:11.87,英文,,0,0,0,,Yeah, I guess.
Dialogue: 0,0:11:02.13,0:11:11.87,中文,,0,0,0,,嗯  我猜
Dialogue: 0,0:11:11.87,0:11:12.42,英文,,0,0,0,,Yeah.
Dialogue: 0,0:11:11.87,0:11:12.42,中文,,0,0,0,,是的
Dialogue: 0,0:11:12.42,0:11:14.14,英文,,0,0,0,,Sounds like a reasonable approach.
Dialogue: 0,0:11:12.42,0:11:14.14,中文,,0,0,0,,听起来像个合理的方法
Dialogue: 0,0:11:14.14,0:11:17.99,英文,,0,0,0,,What you kind of do is you start off somewhere in the middle.
Dialogue: 0,0:11:14.14,0:11:17.99,中文,,0,0,0,,你所要做的就是从中间某个地方开始
Dialogue: 0,0:11:17.99,0:11:21.15,英文,,0,0,0,,You see, can you steal at least, let's say, $1 million?
Dialogue: 0,0:11:17.99,0:11:21.15,中文,,0,0,0,,你看  你能偷走至少  比如说  100万美元吗？
Dialogue: 0,0:11:21.15,0:11:24.93,英文,,0,0,0,,If yes, then let's ask, can I steal $2 million?
Dialogue: 0,0:11:21.15,0:11:24.93,中文,,0,0,0,,如果可以  那么让我们问问  我能偷200万美元吗？
Dialogue: 0,0:11:24.93,0:11:29.17,英文,,0,0,0,,If yes, then $4 million, $8 million, up to the point at which you start saying no.
Dialogue: 0,0:11:24.93,0:11:29.17,中文,,0,0,0,,如果可以  那就400万美元  800万美元  直到你开始说“不”为止
Dialogue: 0,0:11:29.17,0:11:32.11,英文,,0,0,0,,And then at that point, we can do binary searching.
Dialogue: 0,0:11:29.17,0:11:32.11,中文,,0,0,0,,到那时  我们可以进行二分查找
Dialogue: 0,0:11:32.11,0:11:47.34,英文,,0,0,0,,We can show that, overall, the runtime of this is going to be log v. And you can get a maximum value by just computing the total value of the items in n time first.
Dialogue: 0,0:11:32.11,0:11:47.34,中文,,0,0,0,,我们可以证明  总的来说  它的运行时间将是 log V  你可以通过首先计算项目在 n 时间内的总值来获得最大值
Dialogue: 0,0:11:47.34,0:11:54.61,英文,,0,0,0,,So either way, you can do this in polynomial time with respect to the size of the input.
Dialogue: 0,0:11:47.34,0:11:54.61,中文,,0,0,0,,所以无论哪种方式  你都可以在输入大小的多项式时间内做到这一点
Dialogue: 0,0:11:54.61,0:11:55.95,英文,,0,0,0,,I know there was something back there.
Dialogue: 0,0:11:54.61,0:11:55.95,中文,,0,0,0,,我知道那后面有点东西
Dialogue: 0,0:11:55.95,0:11:59.71,英文,,0,0,0,,Did you have a similar idea?
Dialogue: 0,0:11:55.95,0:11:59.71,中文,,0,0,0,,你也有类似的想法吗？
Dialogue: 0,0:11:59.71,0:12:01.98,英文,,0,0,0,,Yeah.
Dialogue: 0,0:11:59.71,0:12:01.98,中文,,0,0,0,,
Dialogue: 0,0:12:01.98,0:12:02.94,英文,,0,0,0,,How about this?
Dialogue: 0,0:12:01.98,0:12:02.94,中文,,0,0,0,,这样如何？
Dialogue: 0,0:12:02.94,0:12:10.07,英文,,0,0,0,,Can we go this last path from one to three?
Dialogue: 0,0:12:02.94,0:12:10.07,中文,,0,0,0,,我们可以走这条从1到3的最后路径吗？
Dialogue: 0,0:12:10.07,0:12:11.27,英文,,0,0,0,,Well, yeah.
Dialogue: 0,0:12:10.07,0:12:11.27,中文,,0,0,0,,嗯  是的
Dialogue: 0,0:12:11.27,0:12:19.19,英文,,0,0,0,,The simple approach is to just make a solver to two given one, and then make a solver to three given two.
Dialogue: 0,0:12:11.27,0:12:19.19,中文,,0,0,0,,简单的方法是  给定1  创建一个到2的求解器  然后给定2  创建一个到3的求解器
Dialogue: 0,0:12:19.19,0:12:22.39,英文,,0,0,0,,If you do that, then you get down from one to three.
Dialogue: 0,0:12:19.19,0:12:22.39,中文,,0,0,0,,如果你这样做  那么你就可以从1到3了
Dialogue: 0,0:12:22.39,0:12:29.35,英文,,0,0,0,,Reductions are transitive, so if you can go from one to two and from two to three, then you can go from one to three directly.
Dialogue: 0,0:12:22.39,0:12:29.35,中文,,0,0,0,,规约具有传递性  所以如果你可以从1到2  从2到3  那么你就可以直接从1到3了
Dialogue: 0,0:12:29.35,0:12:33.92,英文,,0,0,0,,It's possible, it's just going to take a bit longer to set up.
Dialogue: 0,0:12:29.35,0:12:33.92,中文,,0,0,0,,这是可能的  只是设置起来需要更长的时间
Dialogue: 0,0:12:33.92,0:12:42.66,英文,,0,0,0,,So in theory, at least, if we have a solution to any one of these three problems, then we have a solution to all the other problems.
Dialogue: 0,0:12:33.92,0:12:42.66,中文,,0,0,0,,至少在理论上  如果我们对这三个问题中的任何一个有解决方案  那么我们对所有其他问题都有解决方案
Dialogue: 0,0:12:42.66,0:12:47.04,英文,,0,0,0,,So we can consider these three problems to be effectively equivalent.
Dialogue: 0,0:12:42.66,0:12:47.04,中文,,0,0,0,,因此  我们可以认为这三个问题实际上是等价的
Dialogue: 0,0:12:47.04,0:12:50.51,英文,,0,0,0,,If we solve one in polynomial time, we'll solve all the others in polynomial time.
Dialogue: 0,0:12:47.04,0:12:50.51,中文,,0,0,0,,如果我们在多项式时间内解决一个  我们将在多项式时间内解决所有其他问题
Dialogue: 0,0:12:50.51,0:12:53.67,英文,,0,0,0,,And we will call this an equivalence under Turing reduction.
Dialogue: 0,0:12:50.51,0:12:53.67,中文,,0,0,0,,我们称之为图灵规约下的等价性
Dialogue: 0,0:12:53.67,0:13:04.59,英文,,0,0,0,,Turing is just some guy who did a lot of CS back in the old times, so we named this type of reduction after him.
Dialogue: 0,0:12:53.67,0:13:04.59,中文,,0,0,0,,图灵只是一个在过去做了很多计算机科学工作的人  所以我们用他的名字来命名这种类型的规约
Dialogue: 0,0:13:04.59,0:13:10.97,英文,,0,0,0,,It's interesting to note, though, that all three of these types of problems, they return a different type of return value.
Dialogue: 0,0:13:04.59,0:13:10.97,中文,,0,0,0,,有趣的是  所有这三种类型的问题  它们都返回不同类型的返回值
Dialogue: 0,0:13:10.97,0:13:12.27,英文,,0,0,0,,Problem one returned a list.
Dialogue: 0,0:13:10.97,0:13:12.27,中文,,0,0,0,,问题一返回一个列表
Dialogue: 0,0:13:12.27,0:13:13.39,英文,,0,0,0,,Problem two returned an integer.
Dialogue: 0,0:13:12.27,0:13:13.39,中文,,0,0,0,,问题二返回一个整数
Dialogue: 0,0:13:13.39,0:13:17.19,英文,,0,0,0,,And problem three returned a Boolean value.
Dialogue: 0,0:13:13.39,0:13:17.19,中文,,0,0,0,,问题三返回一个布尔值
Dialogue: 0,0:13:17.19,0:13:22.12,英文,,0,0,0,,And it's useful to think about the entropy of the value that got returned.
Dialogue: 0,0:13:17.19,0:13:22.12,中文,,0,0,0,,思考返回值的熵是有益的
Dialogue: 0,0:13:22.12,0:13:24.90,英文,,0,0,0,,A list has so many different possible outputs.
Dialogue: 0,0:13:22.12,0:13:24.90,中文,,0,0,0,,列表可以有很多种不同的输出结果
Dialogue: 0,0:13:24.90,0:13:27.04,英文,,0,0,0,,An integer has only a few billion possibilities.
Dialogue: 0,0:13:24.90,0:13:27.04,中文,,0,0,0,,一个整数只有几十亿种可能性
Dialogue: 0,0:13:27.04,0:13:31.21,英文,,0,0,0,,And a Boolean value has only one possible value.
Dialogue: 0,0:13:27.04,0:13:31.21,中文,,0,0,0,,而布尔值只有一种可能的值
Dialogue: 0,0:13:31.21,0:13:39.65,英文,,0,0,0,,As it turns out, this number three option, it returns the least entropy of a possible function.
Dialogue: 0,0:13:31.21,0:13:39.65,中文,,0,0,0,,事实证明  第三种选择  也就是返回布尔值  它返回的函数的熵最小
Dialogue: 0,0:13:39.65,0:13:42.89,英文,,0,0,0,,It only returns a true false value, so there's only two possible outputs.
Dialogue: 0,0:13:39.65,0:13:42.89,中文,,0,0,0,,它只返回真或假  所以只有两种可能的输出
Dialogue: 0,0:13:42.89,0:13:47.42,英文,,0,0,0,,So we can consider it like one of the simplest possible return value types possible.
Dialogue: 0,0:13:42.89,0:13:47.42,中文,,0,0,0,,因此我们可以认为它是最简单的返回值类型之一
Dialogue: 0,0:13:47.42,0:13:52.00,英文,,0,0,0,,If you had anything simpler, then it would only be able to return one thing, and that would be a very trivial function.
Dialogue: 0,0:13:47.42,0:13:52.00,中文,,0,0,0,,如果有什么比它更简单的东西  那它就只能返回一个东西  那将是一个非常简单的函数
Dialogue: 0,0:13:52.00,0:13:56.19,英文,,0,0,0,,It just returns the same thing over and over again.
Dialogue: 0,0:13:52.00,0:13:56.19,中文,,0,0,0,,它只是重复返回相同的内容
Dialogue: 0,0:13:56.19,0:14:00.33,英文,,0,0,0,,So we'll call functions that return true-false decision problems.
Dialogue: 0,0:13:56.19,0:14:00.33,中文,,0,0,0,,我们把返回真假的函数称为判定问题
Dialogue: 0,0:14:00.33,0:14:05.39,英文,,0,0,0,,And because that makes our life simpler, we'll only be considering decision problems.
Dialogue: 0,0:14:00.33,0:14:05.39,中文,,0,0,0,,因为这样可以简化我们的工作  所以我们只考虑判定问题
Dialogue: 0,0:14:05.39,0:14:07.57,英文,,0,0,0,,Now, this does seem like a potential limitation.
Dialogue: 0,0:14:05.39,0:14:07.57,中文,,0,0,0,,现在  这看起来像是一个潜在的限制
Dialogue: 0,0:14:07.57,0:14:14.30,英文,,0,0,0,,But in practice, you generally have a way to reduce any non-decision problem down to a set of decision problems.
Dialogue: 0,0:14:07.57,0:14:14.30,中文,,0,0,0,,但在实践中  通常有一种方法可以将任何非判定问题简化为一组判定问题
Dialogue: 0,0:14:14.30,0:14:20.10,英文,,0,0,0,,So you can generally get it down to a decision problem and show that if you can solve the decision problem in polynomial time,
Dialogue: 0,0:14:14.30,0:14:20.10,中文,,0,0,0,,所以通常可以把它归结为一个判定问题  并证明如果可以在多项式时间内解决判定问题
Dialogue: 0,0:14:20.10,0:14:23.10,英文,,0,0,0,, then you can solve the real problem in polynomial time as well.
Dialogue: 0,0:14:20.10,0:14:23.10,中文,,0,0,0,,那么也可以在多项式时间内解决实际问题
Dialogue: 0,0:14:23.10,0:14:28.26,英文,,0,0,0,,It just makes our analysis a bit simpler.
Dialogue: 0,0:14:23.10,0:14:28.26,中文,,0,0,0,,这只是让我们的分析更简单一些
Dialogue: 0,0:14:28.26,0:14:33.86,英文,,0,0,0,,So we're going to actually be looking kind of in detail in what we mean by asymptotic runtime.
Dialogue: 0,0:14:28.26,0:14:33.86,中文,,0,0,0,,我们实际上要详细研究一下渐近运行时间的含义
Dialogue: 0,0:14:33.86,0:14:37.46,英文,,0,0,0,,We kind of abstracted this away a bit when we first talked about this.
Dialogue: 0,0:14:33.86,0:14:37.46,中文,,0,0,0,,我们第一次谈到这个的时候有点抽象
Dialogue: 0,0:14:37.46,0:14:45.98,英文,,0,0,0,,But in reality, when we're talking about any decision problem in theoretical computer science, we actually say that it gets run on what we call a Turing machine.
Dialogue: 0,0:14:37.46,0:14:45.98,中文,,0,0,0,,但实际上  当我们在理论计算机科学中谈论任何判定问题时  我们实际上是说它是在我们所说的图灵机上运行的
Dialogue: 0,0:14:45.98,0:14:50.90,英文,,0,0,0,,Now, a Turing machine is this kind of very simple computer.
Dialogue: 0,0:14:45.98,0:14:50.90,中文,,0,0,0,,图灵机是一种非常简单的计算机
Dialogue: 0,0:14:50.90,0:14:57.39,英文,,0,0,0,,It kind of represents what any computer can run, a universal set of computation.
Dialogue: 0,0:14:50.90,0:14:57.39,中文,,0,0,0,,它代表了任何计算机可以运行的东西  一个通用的计算集合
Dialogue: 0,0:14:57.39,0:15:03.14,英文,,0,0,0,,Effectively, anything that can be solved with a computer program can be solved by a Turing machine, and anything
Dialogue: 0,0:14:57.39,0:15:03.14,中文,,0,0,0,,实际上  任何可以用计算机程序解决的问题都可以用图灵机解决
Dialogue: 0,0:15:03.14,0:15:08.14,英文,,0,0,0,,that can be solved by a Turing machine can be solved by a programming language like Java or Python or anything like that.
Dialogue: 0,0:15:03.14,0:15:08.14,中文,,0,0,0,,任何可以用图灵机解决的问题都可以用像Java、Python之类的编程语言来解决
Dialogue: 0,0:15:08.14,0:15:20.62,英文,,0,0,0,,So when we talked about time and space complexity about a Java program, in reality, we were talking about the equivalent Turing machine and looking at those precise definitions for time and memory.
Dialogue: 0,0:15:08.14,0:15:20.62,中文,,0,0,0,,当我们谈论 Java 程序的时间和空间复杂度时  实际上我们是在谈论等效的图灵机  并查看那些关于时间和内存的精确定义
Dialogue: 0,0:15:20.62,0:15:31.73,英文,,0,0,0,,In practice, a Turing machine actually walks one step at a time, changing one unit of memory per time step, and has a very specific definition of how many steps it takes to run.
Dialogue: 0,0:15:20.62,0:15:31.73,中文,,0,0,0,,在实践中  图灵机实际上是一次走一步  每个时间步改变一个内存单元  并且对运行所需的步数有非常具体的定义
Dialogue: 0,0:15:31.73,0:15:41.15,英文,,0,0,0,,So if you wanted the actual formal definition of how we define our asymptotic runtimes or our actual runtimes, then it's in units of time corresponding to the Turing machine.
Dialogue: 0,0:15:31.73,0:15:41.15,中文,,0,0,0,,因此  如果你想要我们定义渐近运行时间或实际运行时间的正式定义  那么它就是以图灵机对应的时间单位来表示的
Dialogue: 0,0:15:41.15,0:15:47.43,英文,,0,0,0,,And you can show that any Java program and any Turing machine has an equivalent Turing machine.
Dialogue: 0,0:15:41.15,0:15:47.43,中文,,0,0,0,,你可以证明任何 Java 程序和任何图灵机都具有等效的图灵机
Dialogue: 0,0:15:47.43,0:15:56.48,英文,,0,0,0,,The main difference between a regular Java program and a Turing machine is actually that in a Turing machine, we assume that we have an infinitely large memory space.
Dialogue: 0,0:15:47.43,0:15:56.48,中文,,0,0,0,,普通 Java 程序和图灵机之间的主要区别实际上在于  在图灵机中  我们假设我们拥有无限大的内存空间
Dialogue: 0,0:15:56.48,0:16:00.16,英文,,0,0,0,,In Java, eventually, if you add enough stuff, then eventually you'll run out of memory.
Dialogue: 0,0:15:56.48,0:16:00.16,中文,,0,0,0,,在 Java 中  如果你添加足够多的东西  最终会耗尽内存
Dialogue: 0,0:16:00.16,0:16:02.56,英文,,0,0,0,,So you can't just keep adding memory.
Dialogue: 0,0:16:00.16,0:16:02.56,中文,,0,0,0,,所以你不能一直添加内存
Dialogue: 0,0:16:02.56,0:16:05.30,英文,,0,0,0,,You can't just run an arbitrarily large input.
Dialogue: 0,0:16:02.56,0:16:05.30,中文,,0,0,0,,你不能只运行任意大的输入
Dialogue: 0,0:16:05.30,0:16:10.20,英文,,0,0,0,,With the Turing machine, we can assume that we can increase our size to arbitrarily large inputs.
Dialogue: 0,0:16:05.30,0:16:10.20,中文,,0,0,0,,使用图灵机  我们可以假设我们可以将大小增加到任意大的输入
Dialogue: 0,0:16:10.20,0:16:15.65,英文,,0,0,0,,That's kind of why we looked at asymptotic analysis when we looked at arbitrarily large values.
Dialogue: 0,0:16:10.20,0:16:15.65,中文,,0,0,0,,这就是为什么我们在查看任意大的值时会进行渐近分析的原因
Dialogue: 0,0:16:15.65,0:16:29.14,英文,,0,0,0,,Even if, say, our integer class can only contain like 2 to the 32 at most, we could theoretically assume that the Turing machine could work with infinitely large numbers.
Dialogue: 0,0:16:15.65,0:16:29.14,中文,,0,0,0,,即使我们的整数类最多只能包含 2 的 32 次方  我们也可以理论上假设图灵机可以处理无限大的数字
Dialogue: 0,0:16:29.14,0:16:34.60,英文,,0,0,0,,So a programming language is said to be Turing-complete if any Turing machine can be simulated with a program in that language.
Dialogue: 0,0:16:29.14,0:16:34.60,中文,,0,0,0,,如果任何图灵机都可以用该语言的程序来模拟  那么这种编程语言就被称为图灵完备的
Dialogue: 0,0:16:34.60,0:16:38.23,英文,,0,0,0,,So most of these programming languages you work with, they're considered Turing-complete.
Dialogue: 0,0:16:34.60,0:16:38.23,中文,,0,0,0,,你使用的大多数编程语言都被认为是图灵完备的
Dialogue: 0,0:16:38.23,0:16:46.91,英文,,0,0,0,,So Python, Java, C, basically anything that can be solved with a Turing machine can be solved with Python, assuming you have an infinite memory.
Dialogue: 0,0:16:38.23,0:16:46.91,中文,,0,0,0,,所以 Python、Java、C  基本上任何可以用图灵机解决的问题都可以用 Python 解决  假设你拥有无限的内存
Dialogue: 0,0:16:46.91,0:16:52.17,英文,,0,0,0,,As it turns out, there's actually a lot of other languages that are also Turing-complete by complete chance.
Dialogue: 0,0:16:46.91,0:16:52.17,中文,,0,0,0,,事实证明  实际上还有很多其他语言也是图灵完备的  完全是偶然的
Dialogue: 0,0:16:52.17,0:16:58.02,英文,,0,0,0,,The requirements for a Turing completeness are actually surprisingly low.
Dialogue: 0,0:16:52.17,0:16:58.02,中文,,0,0,0,,图灵完备性的要求实际上低得惊人
Dialogue: 0,0:16:58.02,0:17:02.20,英文,,0,0,0,,Minecraft, for example, their redstone library is turned complete.
Dialogue: 0,0:16:58.02,0:17:02.20,中文,,0,0,0,,例如  Minecraft 的红石库是图灵完备的
Dialogue: 0,0:17:02.20,0:17:09.01,英文,,0,0,0,,People have made computers, entire CPUs, entirely in Minecraft.
Dialogue: 0,0:17:02.20,0:17:09.01,中文,,0,0,0,,人们已经完全在 Minecraft 中制造了计算机、整个 CPU
Dialogue: 0,0:17:09.01,0:17:19.58,英文,,0,0,0,,And I think they managed to get it to run at like 1 hertz, so like one clock cycle per second, which is just incredibly fast for the system that gets run.
Dialogue: 0,0:17:09.01,0:17:19.58,中文,,0,0,0,,我认为他们设法让它以 1 赫兹的频率运行  也就是每秒一个时钟周期  这对于运行的系统来说是难以置信的快
Dialogue: 0,0:17:19.58,0:17:29.42,英文,,0,0,0,,So when engineers have a lot of time on their hands and a lot of fun to play with, they tend to build CPUs in Minecraft for some reason.
Dialogue: 0,0:17:19.58,0:17:29.42,中文,,0,0,0,,当工程师们有很多时间和很多乐趣可以玩的时候  他们出于某种原因倾向于在 Minecraft 中构建 CPU
Dialogue: 0,0:17:29.42,0:17:37.88,英文,,0,0,0,,So because these two are somewhat equal, we can informally think of a Turing machine as just any function we can write in Java that returns a Boolean value.
Dialogue: 0,0:17:29.42,0:17:37.88,中文,,0,0,0,,因此  由于这两者大致相等  我们可以非正式地将图灵机视为任何可以用Java编写的返回布尔值的函数
Dialogue: 0,0:17:37.88,0:17:42.50,英文,,0,0,0,,So we'll call this a deterministic Turing machine.
Dialogue: 0,0:17:37.88,0:17:42.50,中文,,0,0,0,,所以我们称之为确定性图灵机
Dialogue: 0,0:17:42.50,0:17:50.46,英文,,0,0,0,,And we'll define the set P as a set of all decision problems that can be solved with a deterministic Turing machine in polynomial time.
Dialogue: 0,0:17:42.50,0:17:50.46,中文,,0,0,0,,我们将集合P定义为可以在多项式时间内用确定性图灵机解决的所有判定问题
Dialogue: 0,0:17:50.46,0:17:57.78,英文,,0,0,0,,So something like n, n squared, n cubed, n log n, n to the 5 million, that's all polynomial time.
Dialogue: 0,0:17:50.46,0:17:57.78,中文,,0,0,0,,所以像N、N²、N³、N log N、N的500万次方  这些都是多项式时间
Dialogue: 0,0:17:57.78,0:18:02.74,英文,,0,0,0,,So here's a few examples of problems that can be run in p. Is the array of length n sorted?
Dialogue: 0,0:17:57.78,0:18:02.74,中文,,0,0,0,,以下是一些可以在 P 中运行的问题的例子：长度为 N 的数组是否已排序？
Dialogue: 0,0:18:02.74,0:18:06.04,英文,,0,0,0,,We saw that we can run that in theta n time.
Dialogue: 0,0:18:02.74,0:18:06.04,中文,,0,0,0,,我们看到我们可以在Θ(N)时间内运行它
Dialogue: 0,0:18:06.04,0:18:11.86,英文,,0,0,0,,Does there exist a spanning tree of this graph with size smaller than x?
Dialogue: 0,0:18:06.04,0:18:11.86,中文,,0,0,0,,是否存在这个图的生成树  其大小小于x？
Dialogue: 0,0:18:11.86,0:18:12.86,英文,,0,0,0,,We were able to solve that.
Dialogue: 0,0:18:11.86,0:18:12.86,中文,,0,0,0,,我们能够解决这个问题
Dialogue: 0,0:18:12.86,0:18:23.79,英文,,0,0,0,,Does anyone remember the name of the algorithm we used to solve this?
Dialogue: 0,0:18:12.86,0:18:23.79,中文,,0,0,0,,有人记得我们用来解决这个问题的算法的名字吗？
Dialogue: 0,0:18:23.79,0:18:24.57,英文,,0,0,0,,Anyone?
Dialogue: 0,0:18:23.79,0:18:24.57,中文,,0,0,0,,有人吗？
Dialogue: 0,0:18:24.57,0:18:25.35,英文,,0,0,0,,Please.
Dialogue: 0,0:18:24.57,0:18:25.35,中文,,0,0,0,,拜托
Dialogue: 0,0:18:25.35,0:18:30.76,英文,,0,0,0,,I'm getting concerned.
Dialogue: 0,0:18:25.35,0:18:30.76,中文,,0,0,0,,我开始担心了
Dialogue: 0,0:18:30.76,0:18:33.50,英文,,0,0,0,,Someone say in the back.
Dialogue: 0,0:18:30.76,0:18:33.50,中文,,0,0,0,,有人在后面说
Dialogue: 0,0:18:33.50,0:18:35.45,英文,,0,0,0,,I'm hearing it being said.
Dialogue: 0,0:18:33.50,0:18:35.45,中文,,0,0,0,,我听到有人说了
Dialogue: 0,0:18:35.45,0:18:36.79,英文,,0,0,0,,Yeah, Prim's.
Dialogue: 0,0:18:35.45,0:18:36.79,中文,,0,0,0,,是的  Prim算法
Dialogue: 0,0:18:36.79,0:18:39.43,英文,,0,0,0,,Yeah. Prim's was the minimum spanning tree problem.
Dialogue: 0,0:18:36.79,0:18:39.43,中文,,0,0,0,,是的   Prim算法是最小生成树问题
Dialogue: 0,0:18:39.43,0:18:42.41,英文,,0,0,0,,And we solved that it was v log e, was it?
Dialogue: 0,0:18:39.43,0:18:42.41,中文,,0,0,0,,我们解决了它是V log E  是吗？
Dialogue: 0,0:18:42.41,0:18:44.39,英文,,0,0,0,,Something like that.
Dialogue: 0,0:18:42.41,0:18:44.39,中文,,0,0,0,,和它类似
Dialogue: 0,0:18:44.39,0:18:44.81,英文,,0,0,0,,Yeah.
Dialogue: 0,0:18:44.39,0:18:44.81,中文,,0,0,0,,是的
Dialogue: 0,0:18:44.81,0:18:46.85,英文,,0,0,0,,So we were able to solve it there.
Dialogue: 0,0:18:44.81,0:18:46.85,中文,,0,0,0,,所以我们能够在那里解决它
Dialogue: 0,0:18:46.85,0:18:51.07,英文,,0,0,0,,There's also some problems that are actually a bit harder to prove are in polynomial time.
Dialogue: 0,0:18:46.85,0:18:51.07,中文,,0,0,0,,还有一些问题实际上很难证明是在多项式时间内的
Dialogue: 0,0:18:51.07,0:18:53.73,英文,,0,0,0,,For example, is this number prime was solved in 2002.
Dialogue: 0,0:18:51.07,0:18:53.73,中文,,0,0,0,,例如  “这个数字是质数吗”这个问题在 2002 年得到了解决
Dialogue: 0,0:18:53.73,0:19:00.13,英文,,0,0,0,,So very recently, we were able to prove that that was in p.
Dialogue: 0,0:18:53.73,0:19:00.13,中文,,0,0,0,,最近  我们能够证明那是在 P 类问题中
Dialogue: 0,0:19:00.13,0:19:11.02,英文,,0,0,0,,Now, a non-deterministic Turing machine is a version of a Turing machine that allows for one additional operation that doesn't exist in reality, a guess.
Dialogue: 0,0:19:00.13,0:19:11.02,中文,,0,0,0,,现在  非确定性图灵机是图灵机的一个版本  它允许一个现实中不存在的额外操作：猜测
Dialogue: 0,0:19:11.02,0:19:21.96,英文,,0,0,0,,So informally, the way that this works is that we will allow our Turing machine to make guesses on any number between some range from min and max.
Dialogue: 0,0:19:11.02,0:19:21.96,中文,,0,0,0,,非正式地说  它的工作原理是  我们将允许我们的图灵机在最小值和最大值之间的一定范围内进行猜测
Dialogue: 0,0:19:21.96,0:19:31.30,英文,,0,0,0,,And those guesses will always be correct guesses that lead us towards a solution that yields true, if possible.
Dialogue: 0,0:19:21.96,0:19:31.30,中文,,0,0,0,,如果可能的话  这些猜测将始终是正确的猜测  引导我们走向产生“真”的解决方案
Dialogue: 0,0:19:31.30,0:19:38.15,英文,,0,0,0,,So this non-deterministic Turing machine, it'll return false only if every possible guess you can make returns false.
Dialogue: 0,0:19:31.30,0:19:38.15,中文,,0,0,0,,这个非确定性图灵机  只有当你做出的每个可能的猜测都返回“假”时  它才会返回“假”
Dialogue: 0,0:19:38.15,0:19:44.29,英文,,0,0,0,,If even one possible guess returns true, then the non-deterministic Turing machine is going to return true.
Dialogue: 0,0:19:38.15,0:19:44.29,中文,,0,0,0,,如果即使有一个可能的猜测返回“真”  那么非确定性图灵机就会返回“真”
Dialogue: 0,0:19:44.29,0:19:51.32,英文,,0,0,0,,The set of problems called NP is a set of problems that can be solved in polynomial time with this non-deterministic Turing machine.
Dialogue: 0,0:19:44.29,0:19:51.32,中文,,0,0,0,,称为 NP 的问题集是一组可以使用这种非确定性图灵机在多项式时间内解决的问题
Dialogue: 0,0:19:51.32,0:20:00.30,英文,,0,0,0,,Effectively, the same Turing machine, you can run any Java program, but you allow this guess operation that doesn't really exist,
Dialogue: 0,0:19:51.32,0:19:59.30,中文,,0,0,0,,实际上  相同的图灵机可以运行任何 Java 程序  但是你允许这种实际上不存在的猜测操作
Dialogue: 0,0:19:59.30,0:20:06.30,中文,,0,0,0,,因为我们需要非常幸运才能让这种猜测操作在现实生活中起作用
Dialogue: 0,0:20:00.30,0:20:06.30,英文,,0,0,0,,because we need to be extremely lucky to have this guess operation work in real life.
Dialogue: 0,0:20:06.30,0:20:09.76,英文,,0,0,0,,Anyone have any questions up to here?
Dialogue: 0,0:20:06.30,0:20:09.76,中文,,0,0,0,,到目前为止  有人有任何问题吗？
Dialogue: 0,0:20:09.76,0:20:12.18,英文,,0,0,0,,Yeah?
Dialogue: 0,0:20:09.76,0:20:12.18,中文,,0,0,0,,好的？
Dialogue: 0,0:20:12.18,0:20:13.28,英文,,0,0,0,,What's that?
Dialogue: 0,0:20:12.18,0:20:13.28,中文,,0,0,0,,那是什么？
Dialogue: 0,0:20:13.28,0:20:14.59,英文,,0,0,0,,Nothing?
Dialogue: 0,0:20:13.28,0:20:14.59,中文,,0,0,0,,没有？
Dialogue: 0,0:20:14.59,0:20:18.21,英文,,0,0,0,,All right.
Dialogue: 0,0:20:14.59,0:20:18.21,中文,,0,0,0,,
Dialogue: 0,0:20:18.21,0:20:20.33,英文,,0,0,0,,So let's take a look at this.
Dialogue: 0,0:20:18.21,0:20:20.33,中文,,0,0,0,,让我们来看看这个
Dialogue: 0,0:20:20.33,0:20:24.85,英文,,0,0,0,,Here's an example of a problem that's in NP.
Dialogue: 0,0:20:20.33,0:20:24.85,中文,,0,0,0,,这是一个 NP 类问题的例子
Dialogue: 0,0:20:24.85,0:20:27.01,英文,,0,0,0,,So here is the problem of Sudoku.
Dialogue: 0,0:20:24.85,0:20:27.01,中文,,0,0,0,,所以这里是数独问题
Dialogue: 0,0:20:27.01,0:20:30.01,英文,,0,0,0,,How many people have solved a Sudoku before?
Dialogue: 0,0:20:27.01,0:20:30.01,中文,,0,0,0,,有多少人以前玩过数独？
Dialogue: 0,0:20:30.01,0:20:31.17,英文,,0,0,0,,Most people.
Dialogue: 0,0:20:30.01,0:20:31.17,中文,,0,0,0,,大多数人
Dialogue: 0,0:20:31.17,0:20:38.04,英文,,0,0,0,,So for those of you who don't know, a Sudoku is a logic puzzle where the goal is to write the numbers 1 through 9 such that every single row,
Dialogue: 0,0:20:31.17,0:20:38.04,中文,,0,0,0,,对于那些不知道数独的人来说  数独是一个逻辑谜题  目标是填入数字 1 到 9
Dialogue: 0,0:20:38.04,0:20:44.04,英文,,0,0,0,,every single column, and every single 3 by 3 cell has a number 1 through 9 in it.
Dialogue: 0,0:20:38.04,0:20:44.04,中文,,0,0,0,,使每一行、每一列和每一个 3×3 的单元格都包含数字 1 到 9
Dialogue: 0,0:20:44.04,0:20:53.02,英文,,0,0,0,,The decision problem is going to be kind of given a partially filled grid, does at least one solution exist?
Dialogue: 0,0:20:44.04,0:20:53.02,中文,,0,0,0,,决策问题是  给定一个部分填充的数独网格  是否存在至少一个解？
Dialogue: 0,0:20:53.02,0:20:56.66,英文,,0,0,0,,So here's how this non-deterministic Turing machine might solve the Sudoku.
Dialogue: 0,0:20:53.02,0:20:56.66,中文,,0,0,0,,那么  这个非确定性图灵机如何解决数独呢？
Dialogue: 0,0:20:56.66,0:21:02.24,英文,,0,0,0,,So what we'll do is we'll just make a guess for every single possible cell that exists.
Dialogue: 0,0:20:56.66,0:21:02.24,中文,,0,0,0,,我们要做的是  对每个可能的单元格进行猜测
Dialogue: 0,0:21:02.24,0:21:06.39,英文,,0,0,0,,And we'll just make random guesses everywhere.
Dialogue: 0,0:21:02.24,0:21:06.39,中文,,0,0,0,,我们将随机猜测每个单元格的值
Dialogue: 0,0:21:06.39,0:21:13.62,英文,,0,0,0,,We'll then check every single one of the impossible conditions of a Sudoku to see if we've ended up at a solution that works.
Dialogue: 0,0:21:06.39,0:21:13.62,中文,,0,0,0,,然后  我们将检查数独的所有不可能条件  看看我们是否得到了一个有效的解
Dialogue: 0,0:21:13.62,0:21:17.28,英文,,0,0,0,,If we have a valid Sudoku solution, then we'll return true.
Dialogue: 0,0:21:13.62,0:21:17.28,中文,,0,0,0,,如果我们得到了一个有效的数独解  那么我们将返回 True
Dialogue: 0,0:21:17.28,0:21:20.24,英文,,0,0,0,,If we didn't, then we'll return false.
Dialogue: 0,0:21:17.28,0:21:20.24,中文,,0,0,0,,如果没有  我们将返回 False
Dialogue: 0,0:21:20.24,0:21:28.04,英文,,0,0,0,,The idea is if we do this in this format, then on the universes where we guessed completely right, then we'll return true.
Dialogue: 0,0:21:20.24,0:21:28.04,中文,,0,0,0,,想法是  如果我们以这种形式进行操作  那么在那些我们完全猜对的宇宙中  我们将返回 True
Dialogue: 0,0:21:28.04,0:21:31.82,英文,,0,0,0,,And if a solution exists, we'll have guessed right in at least one universe.
Dialogue: 0,0:21:28.04,0:21:31.82,中文,,0,0,0,,如果存在解  我们将在至少一个宇宙中猜对
Dialogue: 0,0:21:31.82,0:21:34.76,英文,,0,0,0,,We only need one universe to return true.
Dialogue: 0,0:21:31.82,0:21:34.76,中文,,0,0,0,,我们只需要一个宇宙返回 True
Dialogue: 0,0:21:34.76,0:21:40.66,英文,,0,0,0,,So therefore, if we get a true anywhere, then we have a solution.
Dialogue: 0,0:21:34.76,0:21:40.66,中文,,0,0,0,,因此  如果我们在任何地方得到 True  那么我们就有一个解
Dialogue: 0,0:21:40.66,0:21:44.89,英文,,0,0,0,,On the other hand, if all the universes return false, then that means that no matter how we guess, we can't have a solution.
Dialogue: 0,0:21:40.66,0:21:44.89,中文,,0,0,0,,另一方面  如果所有宇宙都返回 False  那么这意味着无论我们如何猜测  都不可能找到解
Dialogue: 0,0:21:44.89,0:21:48.27,英文,,0,0,0,,So therefore, there is no solution to this Sudoku.
Dialogue: 0,0:21:44.89,0:21:48.27,中文,,0,0,0,,因此  这个数独无解
Dialogue: 0,0:21:48.27,0:21:51.67,英文,,0,0,0,,Let's kind of see how this would work in real life.
Dialogue: 0,0:21:48.27,0:21:51.67,中文,,0,0,0,,让我们看看这在现实生活中是如何运作的
Dialogue: 0,0:21:51.67,0:21:56.20,英文,,0,0,0,,So in universe one, we will guess all of them being ones.
Dialogue: 0,0:21:51.67,0:21:56.20,中文,,0,0,0,,在宇宙 1 中  我们将所有单元格都猜成 1
Dialogue: 0,0:21:56.20,0:21:58.66,英文,,0,0,0,,Is this a valid Sudoku solution?
Dialogue: 0,0:21:56.20,0:21:58.66,中文,,0,0,0,,这是一个有效的数独解吗？
Dialogue: 0,0:21:58.66,0:21:59.28,英文,,0,0,0,,No.
Dialogue: 0,0:21:58.66,0:21:59.28,中文,,0,0,0,,不是
Dialogue: 0,0:21:59.28,0:22:02.08,英文,,0,0,0,,We have two ones in the same row at the top.
Dialogue: 0,0:21:59.28,0:22:02.08,中文,,0,0,0,,在顶行中有两个 1
Dialogue: 0,0:22:02.08,0:22:05.15,英文,,0,0,0,,So this universe is going to return false.
Dialogue: 0,0:22:02.08,0:22:05.15,中文,,0,0,0,,这个宇宙会返回 False
Dialogue: 0,0:22:05.15,0:22:11.92,英文,,0,0,0,,At the exact same time, simultaneously to this, in another part of the multiverse, we'll have universe two,
Dialogue: 0,0:22:05.15,0:22:10.92,中文,,0,0,0,,与此同时  在多元宇宙的另一个部分  我们将拥有宇宙二
Dialogue: 0,0:22:10.92,0:22:16.92,中文,,0,0,0,,在那里我们将做完全相同的事情  只是我们将右下角的这个改成 2
Dialogue: 0,0:22:11.92,0:22:16.92,英文,,0,0,0,,where we do the exact same thing, except we change this one at the bottom right to a two.
Dialogue: 0,0:22:16.92,0:22:18.92,英文,,0,0,0,,Does this work?
Dialogue: 0,0:22:16.92,0:22:18.92,中文,,0,0,0,,这样可以吗？
Dialogue: 0,0:22:18.92,0:22:21.97,英文,,0,0,0,,No, because we still have that thing at the top.
Dialogue: 0,0:22:18.92,0:22:21.97,中文,,0,0,0,,不行  因为我们上面还有那个东西
Dialogue: 0,0:22:21.97,0:22:27.29,英文,,0,0,0,,Universe three, we'll check the same thing, but with the three at the bottom, and we'll keep going.
Dialogue: 0,0:22:21.97,0:22:27.29,中文,,0,0,0,,宇宙三  我们将检查相同的东西  但底部是 3  我们将继续下去
Dialogue: 0,0:22:27.29,0:22:36.63,英文,,0,0,0,,Eventually, over all of these universes, in one of these universes, we'll eventually come across universe 385 quattro decillion,
Dialogue: 0,0:22:27.29,0:22:36.63,中文,,0,0,0,,最终  在所有这些宇宙中  在其中一个宇宙中  我们最终会遇到宇宙 385 十四进制、
Dialogue: 0,0:22:36.63,0:22:45.63,英文,,0,0,0,, 585 tri decillion, 354 duo decillion, 550 undecillion, 914 decillion, 402 nanillion, 442 octillion, 800 septillion, 888,
Dialogue: 0,0:22:36.63,0:22:45.63,中文,,0,0,0,,585 十三进制、354 十二进制、550 十一进制、914 十进制、402 纳进制、442 千万进制、800 十亿进制、
Dialogue: 0,0:22:45.63,0:22:56.68,英文,,0,0,0,,I was off by one.
Dialogue: 0,0:22:45.63,0:22:56.68,中文,,0,0,0,,我算错了一个
Dialogue: 0,0:22:56.68,0:23:00.70,英文,,0,0,0,,And in this one, we'll have this particular setup.
Dialogue: 0,0:22:56.68,0:23:00.70,中文,,0,0,0,,在这个宇宙中  我们将拥有这个特定的设置
Dialogue: 0,0:23:00.70,0:23:04.14,英文,,0,0,0,,Is this a valid solution to the Sudoku?
Dialogue: 0,0:23:00.70,0:23:04.14,中文,,0,0,0,,这是数独的有效解吗？
Dialogue: 0,0:23:04.14,0:23:04.76,英文,,0,0,0,,Yes?
Dialogue: 0,0:23:04.14,0:23:04.76,中文,,0,0,0,,是？
Dialogue: 0,0:23:04.76,0:23:08.22,英文,,0,0,0,,How many people say yes?
Dialogue: 0,0:23:04.76,0:23:08.22,中文,,0,0,0,,有多少人说是？
Dialogue: 0,0:23:08.22,0:23:10.28,英文,,0,0,0,,How many people say no?
Dialogue: 0,0:23:08.22,0:23:10.28,中文,,0,0,0,,有多少人说不是？
Dialogue: 0,0:23:10.28,0:23:10.78,英文,,0,0,0,,You say no.
Dialogue: 0,0:23:10.28,0:23:10.78,中文,,0,0,0,,你说不是
Dialogue: 0,0:23:10.78,0:23:13.81,英文,,0,0,0,,Why do you say no?
Dialogue: 0,0:23:10.78,0:23:13.81,中文,,0,0,0,,你为什么说不是？
Dialogue: 0,0:23:13.81,0:23:18.03,英文,,0,0,0,,Yeah, there's two 2's in the bottom right.
Dialogue: 0,0:23:13.81,0:23:18.03,中文,,0,0,0,,是的  右下角有两个 2
Dialogue: 0,0:23:18.03,0:23:21.25,英文,,0,0,0,,Yep, this universe will return false.
Dialogue: 0,0:23:18.03,0:23:21.25,中文,,0,0,0,,是的  这个宇宙会返回 False
Dialogue: 0,0:23:21.25,0:23:27.86,英文,,0,0,0,,But the next universe will return true.
Dialogue: 0,0:23:21.25,0:23:27.86,中文,,0,0,0,,但下一个宇宙会返回 True
Dialogue: 0,0:23:27.86,0:23:31.14,英文,,0,0,0,,So this next universe does return true.
Dialogue: 0,0:23:27.86,0:23:31.14,中文,,0,0,0,,下一个宇宙确实返回了 True
Dialogue: 0,0:23:31.14,0:23:33.78,英文,,0,0,0,,And every single other universe, as it turns out, is going to return false.
Dialogue: 0,0:23:31.14,0:23:33.78,中文,,0,0,0,,事实证明  所有其他宇宙都将返回 False
Dialogue: 0,0:23:33.78,0:23:38.48,英文,,0,0,0,,Eventually, we hit this number 9 to the 47.
Dialogue: 0,0:23:33.78,0:23:38.48,中文,,0,0,0,,最终  我们达到了 9 的 47 次方这个数字
Dialogue: 0,0:23:38.48,0:23:44.38,英文,,0,0,0,,That one's going to return false as well, because there's two 9's at the top.
Dialogue: 0,0:23:38.48,0:23:44.38,中文,,0,0,0,,那个也会返回False  因为上面有两个9
Dialogue: 0,0:23:44.38,0:23:49.44,英文,,0,0,0,,So but the point is, in at least one of these universes that we created, it returned true.
Dialogue: 0,0:23:44.38,0:23:49.44,中文,,0,0,0,,但重点是  在我们创建的至少一个宇宙中  它返回了True
Dialogue: 0,0:23:49.44,0:23:52.95,英文,,0,0,0,,Therefore, the non-deterministic Turing machine does return true.
Dialogue: 0,0:23:49.44,0:23:52.95,中文,,0,0,0,,因此  非确定性图灵机确实返回了True
Dialogue: 0,0:23:52.95,0:23:55.97,英文,,0,0,0,,Now, you can imagine that all these universes are running in parallel.
Dialogue: 0,0:23:52.95,0:23:55.97,中文,,0,0,0,,现在  你可以想象所有这些宇宙都是并行运行的
Dialogue: 0,0:23:55.97,0:24:00.27,英文,,0,0,0,,So the runtime is based on the slowest universe that ever run.
Dialogue: 0,0:23:55.97,0:24:00.27,中文,,0,0,0,,所以运行时间取决于运行最慢的那个宇宙
Dialogue: 0,0:24:00.27,0:24:06.17,英文,,0,0,0,,And in each universe, it takes a certain amount of time to do the verification.
Dialogue: 0,0:24:00.27,0:24:06.17,中文,,0,0,0,,在每个宇宙中  验证都需要一定的时间
Dialogue: 0,0:24:06.17,0:24:15.16,英文,,0,0,0,,So how much time does it take to verify that an n squared by n squared Sudoku solution is correct?
Dialogue: 0,0:24:06.17,0:24:15.16,中文,,0,0,0,,那么  验证一个 n² x n² 数独解需要多少时间呢？
Dialogue: 0,0:24:15.16,0:24:16.41,英文,,0,0,0,,Feel free to discuss.
Dialogue: 0,0:24:15.16,0:24:16.41,中文,,0,0,0,,大家可以讨论一下
Dialogue: 0,0:24:16.41,0:25:05.83,英文,,0,0,0,,I'll give a minute for this.
Dialogue: 0,0:24:16.41,0:25:05.83,中文,,0,0,0,,我给一分钟时间
Dialogue: 0,0:25:05.83,0:25:09.73,英文,,0,0,0,,All right, and keep in mind that the Sudoku size is n squared by n squared.
Dialogue: 0,0:25:05.83,0:25:09.73,中文,,0,0,0,,好的  请记住数独的大小是 n² x n²
Dialogue: 0,0:25:09.73,0:25:12.97,英文,,0,0,0,,So this is the size n equals 3.
Dialogue: 0,0:25:09.73,0:25:12.97,中文,,0,0,0,,所以这是大小 n = 3
Dialogue: 0,0:25:12.97,0:25:28.40,英文,,0,0,0,,So this is a 3 by 3 size, so n equals 3.
Dialogue: 0,0:25:12.97,0:25:28.40,中文,,0,0,0,,这是一个 3 x 3 的大小  所以 n = 3
Dialogue: 0,0:25:28.40,0:25:40.85,英文,,0,0,0,,Anything on it?
Dialogue: 0,0:25:28.40,0:25:40.85,中文,,0,0,0,,有什么想法吗？
Dialogue: 0,0:25:40.85,0:25:43.25,英文,,0,0,0,,All right, let's bring everyone back together.
Dialogue: 0,0:25:40.85,0:25:43.25,中文,,0,0,0,,好的  让我们大家一起回到这个问题
Dialogue: 0,0:25:43.25,0:25:44.79,英文,,0,0,0,,What's the numbers we get?
Dialogue: 0,0:25:43.25,0:25:44.79,中文,,0,0,0,,我们得到了哪些数字？
Dialogue: 0,0:25:44.79,0:25:49.24,英文,,0,0,0,,What's your runtime for verifying a solution here?
Dialogue: 0,0:25:44.79,0:25:49.24,中文,,0,0,0,,验证这个解决方案需要多少运行时间？
Dialogue: 0,0:25:49.24,0:25:52.46,英文,,0,0,0,,Yeah?
Dialogue: 0,0:25:49.24,0:25:52.46,中文,,0,0,0,,嗯？
Dialogue: 0,0:25:52.46,0:25:53.26,英文,,0,0,0,,9 to the n to the fourth?
Dialogue: 0,0:25:52.46,0:25:53.26,中文,,0,0,0,,9 的 n⁴ 次方？
Dialogue: 0,0:25:53.26,0:26:06.28,英文,,0,0,0,,Why?
Dialogue: 0,0:25:53.26,0:26:06.28,中文,,0,0,0,,为什么？
Dialogue: 0,0:26:06.28,0:26:14.28,英文,,0,0,0,,Well, if you increase the size of a Sudoku to n squared by n squared, then you'll be putting the numbers 1 through n squared in every cell.
Dialogue: 0,0:26:06.28,0:26:14.28,中文,,0,0,0,,如果你把数独的大小增加到 n² x n²  那么你就会在每个单元格中放入 1 到 n² 的数字
Dialogue: 0,0:26:14.28,0:26:15.69,英文,,0,0,0,,It's not just going to be the numbers 1 through 9.
Dialogue: 0,0:26:14.28,0:26:15.69,中文,,0,0,0,,不只是 1 到 9 这几个数字
Dialogue: 0,0:26:15.69,0:26:20.81,英文,,0,0,0,,Yeah?
Dialogue: 0,0:26:15.69,0:26:20.81,中文,,0,0,0,,是吗？
Dialogue: 0,0:26:20.81,0:26:26.20,英文,,0,0,0,,Yeah?
Dialogue: 0,0:26:20.81,0:26:26.20,中文,,0,0,0,,是吗？
Dialogue: 0,0:26:26.20,0:26:28.74,英文,,0,0,0,,n by n to the n squared by n squared.
Dialogue: 0,0:26:26.20,0:26:28.74,中文,,0,0,0,,n x n 到 n² x n²
Dialogue: 0,0:26:28.74,0:26:39.41,英文,,0,0,0,,Can you explain why?
Dialogue: 0,0:26:28.74,0:26:39.41,中文,,0,0,0,,能解释一下为什么吗？
Dialogue: 0,0:26:39.41,0:26:52.73,英文,,0,0,0,,Mm-hmm.
Dialogue: 0,0:26:39.41,0:26:52.73,中文,,0,0,0,,
Dialogue: 0,0:26:52.73,0:26:57.25,英文,,0,0,0,,So keep in mind that all the universes are running simultaneously.
Dialogue: 0,0:26:52.73,0:26:57.25,中文,,0,0,0,,记住  所有宇宙都是同时运行的
Dialogue: 0,0:26:57.25,0:27:02.40,英文,,0,0,0,,It seems like a lot of these are asking, you take the number of possible universes that we do.
Dialogue: 0,0:26:57.25,0:27:02.40,中文,,0,0,0,,好像很多问题都在问  我们假设可能的宇宙数量
Dialogue: 0,0:27:02.40,0:27:04.96,英文,,0,0,0,,But all these universes are happening at the exact same time.
Dialogue: 0,0:27:02.40,0:27:04.96,中文,,0,0,0,,但所有这些宇宙都发生在同一时间
Dialogue: 0,0:27:04.96,0:27:07.42,英文,,0,0,0,,It doesn't matter how many universes we're running.
Dialogue: 0,0:27:04.96,0:27:07.42,中文,,0,0,0,,我们运行多少个宇宙并不重要
Dialogue: 0,0:27:07.42,0:27:16.91,英文,,0,0,0,,All that matters is checking, if I fill out the entire grid, how fast does it take to actually verify that this is a correct solution?
Dialogue: 0,0:27:07.42,0:27:16.91,中文,,0,0,0,,重要的是  如果我把整个网格填满  验证它是否是一个正确解决方案需要多长时间？
Dialogue: 0,0:27:16.91,0:27:19.16,英文,,0,0,0,,Yeah.
Dialogue: 0,0:27:16.91,0:27:19.16,中文,,0,0,0,,
Dialogue: 0,0:27:19.16,0:27:29.71,英文,,0,0,0,,So as it turns out here, if we try to do this, then what we need to do is we need to check every single row, every single column, and every single 3 by 3 cell.
Dialogue: 0,0:27:19.16,0:27:29.71,中文,,0,0,0,,事实证明  如果我们试图这样做  那么我们需要做的是检查每一行、每一列和每个 3x3 的单元格
Dialogue: 0,0:27:29.71,0:27:37.75,英文,,0,0,0,,And how long does it take to check if a row contains all the same number?
Dialogue: 0,0:27:29.71,0:27:37.75,中文,,0,0,0,,检查一行是否包含所有相同数字需要多长时间？
Dialogue: 0,0:27:37.75,0:27:40.31,英文,,0,0,0,,How much time?
Dialogue: 0,0:27:37.75,0:27:40.31,中文,,0,0,0,,需要多少时间？
Dialogue: 0,0:27:40.31,0:27:40.77,英文,,0,0,0,,n squared.
Dialogue: 0,0:27:40.31,0:27:40.77,中文,,0,0,0,,n²
Dialogue: 0,0:27:40.77,0:27:41.29,英文,,0,0,0,,Yep.
Dialogue: 0,0:27:40.77,0:27:41.29,中文,,0,0,0,,是的
Dialogue: 0,0:27:41.29,0:27:47.01,英文,,0,0,0,,It takes n squared time to check if a particular row has all the numbers from 1 to n squared.
Dialogue: 0,0:27:41.29,0:27:47.01,中文,,0,0,0,,检查特定行是否包含从 1 到 n² 的所有数字需要 n² 时间
Dialogue: 0,0:27:47.01,0:27:51.36,英文,,0,0,0,,How many rows do we have?
Dialogue: 0,0:27:47.01,0:27:51.36,中文,,0,0,0,,我们有多少行？
Dialogue: 0,0:27:51.36,0:27:56.46,英文,,0,0,0,,Yep, n squared rows, n squared columns, n by n cells.
Dialogue: 0,0:27:51.36,0:27:56.46,中文,,0,0,0,,是的  n² 行  n² 列  n x n 个单元格
Dialogue: 0,0:27:56.46,0:28:05.58,英文,,0,0,0,,So overall, how much runtime do we have?
Dialogue: 0,0:27:56.46,0:28:05.58,中文,,0,0,0,,总的来说  我们有多少运行时间？
Dialogue: 0,0:28:05.58,0:28:12.10,英文,,0,0,0,,Yeah, so we have n squared rows, n squared columns, n squared n by n cells.
Dialogue: 0,0:28:05.58,0:28:12.10,中文,,0,0,0,,我们有 n² 行  n² 列  n² 个 n×n 单元格
Dialogue: 0,0:28:12.10,0:28:16.76,英文,,0,0,0,,So it's total three n squared total things we need to check, and each one takes n squared time.
Dialogue: 0,0:28:12.10,0:28:16.76,中文,,0,0,0,,总共有 3n² 个东西需要检查  每个都需要 n² 的时间
Dialogue: 0,0:28:16.76,0:28:20.77,英文,,0,0,0,,So what's our total runtime?
Dialogue: 0,0:28:16.76,0:28:20.77,中文,,0,0,0,,那总运行时间是多少呢？
Dialogue: 0,0:28:20.77,0:28:25.83,英文,,0,0,0,,3n squared times n squared, which is theta n to the fourth.
Dialogue: 0,0:28:20.77,0:28:25.83,中文,,0,0,0,,3n² x n²  也就是 Θ(n⁴)
Dialogue: 0,0:28:25.83,0:28:27.73,英文,,0,0,0,,Yes.
Dialogue: 0,0:28:25.83,0:28:27.73,中文,,0,0,0,,
Dialogue: 0,0:28:27.73,0:28:28.33,英文,,0,0,0,,Yeah.
Dialogue: 0,0:28:27.73,0:28:28.33,中文,,0,0,0,,
Dialogue: 0,0:28:28.33,0:28:33.19,英文,,0,0,0,,Overall, if we run the verification, that takes n to the fourth time.
Dialogue: 0,0:28:28.33,0:28:33.19,中文,,0,0,0,,总的来说  如果我们运行验证  那需要 n⁴ 的时间
Dialogue: 0,0:28:33.19,0:28:42.22,英文,,0,0,0,,And because all these universes are running simultaneously, we'll imagine that a non-deterministic Turing machine is going to be running in n to the fourth time to solve this problem.
Dialogue: 0,0:28:33.19,0:28:42.22,中文,,0,0,0,,由于所有这些宇宙都在同时运行  我们可以想象一个非确定性图灵机将在 n⁴ 的时间内运行来解决这个问题
Dialogue: 0,0:28:42.22,0:28:47.60,英文,,0,0,0,,So this problem is considered in NP.
Dialogue: 0,0:28:42.22,0:28:47.60,中文,,0,0,0,,这个问题被认为属于 NP
Dialogue: 0,0:28:47.60,0:28:48.42,英文,,0,0,0,,Let me ask you this.
Dialogue: 0,0:28:47.60,0:28:48.42,中文,,0,0,0,,我问你一个问题
Dialogue: 0,0:28:48.42,0:28:52.36,英文,,0,0,0,,Is the knapsack problem that we said earlier, is that also an NP?
Dialogue: 0,0:28:48.42,0:28:52.36,中文,,0,0,0,,我们之前提到的背包问题  它也是 NP 吗？
Dialogue: 0,0:28:52.36,0:29:02.31,英文,,0,0,0,,Given a list of n items and a weight limit, can you verify a particular solution to see if you exceed a certain weight?
Dialogue: 0,0:28:52.36,0:29:02.31,中文,,0,0,0,,给定一个包含 N 个物品的列表和一个重量限制  你能验证一个特定的解决方案  看看是否超过了某个重量吗？
Dialogue: 0,0:29:02.31,0:29:05.15,英文,,0,0,0,,How many people think this is an NP?
Dialogue: 0,0:29:02.31,0:29:05.15,中文,,0,0,0,,有多少人认为这是 NP？
Dialogue: 0,0:29:05.15,0:29:18.39,英文,,0,0,0,,How many people think this is not an NP?
Dialogue: 0,0:29:05.15,0:29:18.39,中文,,0,0,0,,有多少人认为这不是 NP？
Dialogue: 0,0:29:18.39,0:29:30.28,英文,,0,0,0,,OK, does anyone want to explain why it's not or why it is?
Dialogue: 0,0:29:18.39,0:29:30.28,中文,,0,0,0,,好的  有人想解释一下为什么它不是或为什么它是 NP 吗？
Dialogue: 0,0:29:30.28,0:29:48.41,英文,,0,0,0,,Yeah?
Dialogue: 0,0:29:30.28,0:29:48.41,中文,,0,0,0,,
Dialogue: 0,0:29:48.41,0:29:52.77,英文,,0,0,0,,Well, Knapsack 3 is the one that was the Boolean value one, yeah.
Dialogue: 0,0:29:48.41,0:29:52.77,中文,,0,0,0,,嗯  背包问题 3 是那个布尔值的问题  对吧
Dialogue: 0,0:29:52.77,0:29:55.17,英文,,0,0,0,,The question is if that problem is an NP.
Dialogue: 0,0:29:52.77,0:29:55.17,中文,,0,0,0,,问题是这个问题是不是 NP
Dialogue: 0,0:29:55.17,0:29:57.81,英文,,0,0,0,,Can you verify a solution?
Dialogue: 0,0:29:55.17,0:29:57.81,中文,,0,0,0,,你能验证一个解决方案吗？
Dialogue: 0,0:29:57.81,0:30:07.09,英文,,0,0,0,,So if I said here, I'm going to randomly guess something, and then can I check to see if that guess is right?
Dialogue: 0,0:29:57.81,0:30:07.09,中文,,0,0,0,,如果我在这里说  我要随机猜测一个东西  然后我能不能检查这个猜测是否正确？
Dialogue: 0,0:30:07.09,0:30:11.87,英文,,0,0,0,,Yeah?
Dialogue: 0,0:30:07.09,0:30:11.87,中文,,0,0,0,,可以吗？
Dialogue: 0,0:30:11.87,0:30:21.29,英文,,0,0,0,,Mm-hm?
Dialogue: 0,0:30:11.87,0:30:21.29,中文,,0,0,0,,
Dialogue: 0,0:30:21.29,0:30:22.87,英文,,0,0,0,,Yeah, effectively you can do that.
Dialogue: 0,0:30:21.29,0:30:22.87,中文,,0,0,0,,是的  实际上你可以这样做
Dialogue: 0,0:30:22.87,0:30:27.35,英文,,0,0,0,,You can kind of make a guess as to what set of things you want to get.
Dialogue: 0,0:30:22.87,0:30:27.35,中文,,0,0,0,,你可以猜测你想得到哪些东西
Dialogue: 0,0:30:27.35,0:30:29.35,英文,,0,0,0,,And then you check if that waits above our target.
Dialogue: 0,0:30:27.35,0:30:29.35,中文,,0,0,0,,然后你检查它是否高于我们的目标
Dialogue: 0,0:30:29.35,0:30:30.49,英文,,0,0,0,,If it is, then you return true.
Dialogue: 0,0:30:29.35,0:30:30.49,中文,,0,0,0,,如果是  则返回 True
Dialogue: 0,0:30:30.49,0:30:31.85,英文,,0,0,0,,If it isn't, you return false.
Dialogue: 0,0:30:30.49,0:30:31.85,中文,,0,0,0,,如果不是  则返回 False
Dialogue: 0,0:30:31.85,0:30:43.46,英文,,0,0,0,,And because we're in this non-deterministic Turing machine environment, we can make these guesses, and we can guarantee that we guess right every single time, because we are lucky.
Dialogue: 0,0:30:31.85,0:30:43.46,中文,,0,0,0,,因为我们处于这个非确定性图灵机环境中  我们可以进行这些猜测  并且我们可以保证每次都猜对  因为我们很幸运
Dialogue: 0,0:30:43.46,0:30:50.59,英文,,0,0,0,,Now, in general, this two-step process actually works for all non-deterministic Turing machines.
Dialogue: 0,0:30:43.46,0:30:50.59,中文,,0,0,0,,现在  一般来说  这个两步过程实际上适用于所有非确定性图灵机
Dialogue: 0,0:30:50.59,0:30:56.43,英文,,0,0,0,,You can always generate a random solution to the problem and then verify if that solution actually solves the problem.
Dialogue: 0,0:30:50.59,0:30:56.43,中文,,0,0,0,,你总是可以生成问题的随机解决方案  然后验证该解决方案是否确实解决了问题
Dialogue: 0,0:30:56.43,0:31:01.01,英文,,0,0,0,,That's basically every single problem in NP.
Dialogue: 0,0:30:56.43,0:31:01.01,中文,,0,0,0,,这基本上是 NP 中的每个问题
Dialogue: 0,0:31:01.01,0:31:09.61,英文,,0,0,0,,It's kind of a non-trivial fact to show that you don't gain any additional benefit from guessing repeatedly in between operations.
Dialogue: 0,0:31:01.01,0:31:09.61,中文,,0,0,0,,证明在操作之间反复猜测不会获得任何额外的好处  这是一个不平凡的事实
Dialogue: 0,0:31:09.61,0:31:19.57,英文,,0,0,0,,But we can kind of imagine that the reason why is because you can move all of these guesses to the start of the program and save those guess values somewhere in memory for use later.
Dialogue: 0,0:31:09.61,0:31:19.57,中文,,0,0,0,,但我们可以想象  原因在于你可以将所有这些猜测移动到程序的开头  并将这些猜测值保存在内存中的某个位置以供以后使用
Dialogue: 0,0:31:19.57,0:31:29.61,英文,,0,0,0,,But effectively, we can conclude from this that the set of problems in NP is also the set of problems that can be verified in polynomial time using the deterministic Turing machine.
Dialogue: 0,0:31:19.57,0:31:29.61,中文,,0,0,0,,但实际上  我们可以由此得出结论  NP 中的问题集也是可以在多项式时间内使用确定性图灵机验证的问题集
Dialogue: 0,0:31:29.61,0:31:35.21,英文,,0,0,0,,So given a solution to a problem, you can say whether or not this is a solution or this isn't.
Dialogue: 0,0:31:29.61,0:31:35.21,中文,,0,0,0,,因此  给定问题的解决方案  你可以判断这是否是解决方案
Dialogue: 0,0:31:35.21,0:31:41.94,英文,,0,0,0,,With Sudoku, you're able to tell, yes, this is a solution to the Sudoku, or no, it's not a solution to the Sudoku in n to the fourth time.
Dialogue: 0,0:31:35.21,0:31:41.94,中文,,0,0,0,,使用数独  你可以判断  是的  这是数独的解决方案  或者不是  它不是数独的解决方案  时间复杂度为 n⁴
Dialogue: 0,0:31:41.94,0:31:48.80,英文,,0,0,0,,With knapsack, you're able to tell if a given set of items is exceeding a certain weight or not exceeding a certain weight.
Dialogue: 0,0:31:41.94,0:31:48.80,中文,,0,0,0,,使用背包问题  你可以判断给定的一组物品是否超过某个重量或不超过某个重量
Dialogue: 0,0:31:48.80,0:31:53.30,英文,,0,0,0,,In contrast, P is a set of problems that can be generated in polynomial time.
Dialogue: 0,0:31:48.80,0:31:53.30,中文,,0,0,0,,相比之下  P 是一组可以在多项式时间内生成的问题
Dialogue: 0,0:31:53.30,0:32:01.25,英文,,0,0,0,,So given a Sudoku, can you create a solution to that Sudoku in polynomial time?
Dialogue: 0,0:31:53.30,0:32:01.25,中文,,0,0,0,,那么  给定一个数独  你能在多项式时间内创建该数独的解决方案吗？
Dialogue: 0,0:32:01.25,0:32:05.67,英文,,0,0,0,,As it turns out, that's a bit tricky to deal with.
Dialogue: 0,0:32:01.25,0:32:05.67,中文,,0,0,0,,结果发现  处理起来有点棘手
Dialogue: 0,0:32:05.67,0:32:09.45,英文,,0,0,0,,But here's a few examples of other NP problems that exist.
Dialogue: 0,0:32:05.67,0:32:09.45,中文,,0,0,0,,但是这里有一些其他 NP 问题的例子
Dialogue: 0,0:32:09.45,0:32:15.17,英文,,0,0,0,,So any problem in P, if you can solve it in polynomial time, you can verify it in polynomial time.
Dialogue: 0,0:32:09.45,0:32:15.17,中文,,0,0,0,,在 P 类问题中  如果可以在多项式时间内解决  那么你也可以在多项式时间内验证它
Dialogue: 0,0:32:15.17,0:32:19.84,英文,,0,0,0,,You can just try solving it and see if your solution matches.
Dialogue: 0,0:32:15.17,0:32:19.84,中文,,0,0,0,,你可以尝试解决它  看看你的解决方案是否匹配
Dialogue: 0,0:32:19.84,0:32:23.50,英文,,0,0,0,,The Knapsack problem, that's an NP, as we saw earlier.
Dialogue: 0,0:32:19.84,0:32:23.50,中文,,0,0,0,,背包问题  正如我们之前看到的  是一个 NP 问题
Dialogue: 0,0:32:23.50,0:32:25.58,英文,,0,0,0,,Sudoku was an NP.
Dialogue: 0,0:32:23.50,0:32:25.58,中文,,0,0,0,,数独也是一个 NP 问题
Dialogue: 0,0:32:25.58,0:32:28.50,英文,,0,0,0,,As it turns out, most logic puzzles are also an NP.
Dialogue: 0,0:32:25.58,0:32:28.50,中文,,0,0,0,,事实证明  大多数逻辑谜题也是 NP 问题
Dialogue: 0,0:32:28.50,0:32:34.71,英文,,0,0,0,,KenKen, Minesweeper, Tetris, all those are NP problems, if you define them properly.
Dialogue: 0,0:32:28.50,0:32:34.71,中文,,0,0,0,,数和  扫雷  俄罗斯方块  所有这些都是 NP 问题  如果你正确地定义它们的话
Dialogue: 0,0:32:34.71,0:32:41.28,英文,,0,0,0,,The longest path, it's kind of the opposite of our shortest path problem from earlier that solves with Dijkstra's.
Dialogue: 0,0:32:34.71,0:32:41.28,中文,,0,0,0,,最长路径  它有点像我们之前用 Dijkstra 算法解决的最短路径问题的反面
Dialogue: 0,0:32:41.28,0:32:48.03,英文,,0,0,0,,The longest path actually is an NP as well.
Dialogue: 0,0:32:41.28,0:32:48.03,中文,,0,0,0,,最长路径实际上也是一个 NP 问题
Dialogue: 0,0:32:48.03,0:32:50.97,英文,,0,0,0,,What would you consider a solution in Tetris?
Dialogue: 0,0:32:48.03,0:32:50.97,中文,,0,0,0,,你认为在俄罗斯方块中什么才算是解决方案？
Dialogue: 0,0:32:50.97,0:33:02.26,英文,,0,0,0,,Given a current board state and a set of continuous, the next few items that get added, can you reduce it down to zero?
Dialogue: 0,0:32:50.97,0:33:02.26,中文,,0,0,0,,给定当前的棋盘状态和一组连续的、接下来要添加的几个项目  你能把它减少到零吗？
Dialogue: 0,0:33:02.26,0:33:03.84,英文,,0,0,0,,Yeah.
Dialogue: 0,0:33:02.26,0:33:03.84,中文,,0,0,0,,
Dialogue: 0,0:33:03.84,0:33:11.73,英文,,0,0,0,,So can you get rid of a set of trash in a Tetris board would be considered the equivalent puzzle.
Dialogue: 0,0:33:03.84,0:33:11.73,中文,,0,0,0,,你是否能在俄罗斯方块棋盘上清除一组垃圾  这将被认为是等价的谜题
Dialogue: 0,0:33:11.73,0:33:13.00,英文,,0,0,0,,Yeah.
Dialogue: 0,0:33:11.73,0:33:13.00,中文,,0,0,0,,
Dialogue: 0,0:33:13.00,0:33:15.13,英文,,0,0,0,,Independent set is actually another cool problem.
Dialogue: 0,0:33:13.00,0:33:15.13,中文,,0,0,0,,独立集实际上是另一个很酷的问题
Dialogue: 0,0:33:15.13,0:33:20.93,英文,,0,0,0,,Given a graph, find the largest set of vertices that have no adjacencies.
Dialogue: 0,0:33:15.13,0:33:20.93,中文,,0,0,0,,给定一个图  找到没有邻接点的最大顶点集
Dialogue: 0,0:33:20.93,0:33:34.80,英文,,0,0,0,,Prime factorization is considered in NP, because if I had two primes, then I can ask, do these primes multiply to form the target prime?
Dialogue: 0,0:33:20.93,0:33:34.80,中文,,0,0,0,,质因数分解被认为是 NP 问题  因为如果我有两个质数  那么我可以问  这两个质数相乘是否可以形成目标质数？
Dialogue: 0,0:33:34.80,0:33:40.18,英文,,0,0,0,,Encryption is actually also considered to be a problem in NP.
Dialogue: 0,0:33:34.80,0:33:40.18,中文,,0,0,0,,加密实际上也被认为是 NP 问题
Dialogue: 0,0:33:40.18,0:33:42.98,英文,,0,0,0,,It involves coming up with this algorithm to encrypt.
Dialogue: 0,0:33:40.18,0:33:42.98,中文,,0,0,0,,它涉及到提出这种算法来加密
Dialogue: 0,0:33:42.98,0:33:52.80,英文,,0,0,0,,So you can say that the solution in NP is guess the random encryption scheme and the random encryption constant and solve it with that.
Dialogue: 0,0:33:42.98,0:33:52.80,中文,,0,0,0,,你可以说  NP 中的解决方案是猜测随机加密方案和随机加密常数  然后用它们来解决问题
Dialogue: 0,0:33:52.80,0:33:59.56,英文,,0,0,0,,So effectively, imagine that you can solve passwords in a non-deterministic Turing machine by literally just guessing every single password.
Dialogue: 0,0:33:52.80,0:33:59.56,中文,,0,0,0,,实际上  想象一下  你可以通过逐个猜测每个密码  在非确定性图灵机中解决密码问题
Dialogue: 0,0:33:59.56,0:34:05.08,英文,,0,0,0,,And because you're guessing right every single time, you're going to be guaranteed to get your password.
Dialogue: 0,0:33:59.56,0:34:05.08,中文,,0,0,0,,而且因为你每次都猜对了  所以你一定会得到你的密码
Dialogue: 0,0:34:05.08,0:34:10.61,英文,,0,0,0,,Compression is also actually Also considered an NP problem.
Dialogue: 0,0:34:05.08,0:34:10.61,中文,,0,0,0,,压缩实际上也被认为是一个 NP 问题
Dialogue: 0,0:34:10.61,0:34:18.41,英文,,0,0,0,,It's basically the question of can you optimally compress a bit string such that it can be uncompressed in polynomial time.
Dialogue: 0,0:34:10.61,0:34:18.41,中文,,0,0,0,,它基本上是关于你是否可以最佳地压缩一个位串  以便它可以在多项式时间内解压缩的问题
Dialogue: 0,0:34:18.41,0:34:21.07,英文,,0,0,0,,Here's a few problems that we don't know are currently an NP.
Dialogue: 0,0:34:18.41,0:34:21.07,中文,,0,0,0,,以下是一些我们不知道是否属于 NP 的问题
Dialogue: 0,0:34:21.07,0:34:29.11,英文,,0,0,0,,As it turns out, it's hard to prove that something isn't an NP, but we can say that some things feel like they're not an NP.
Dialogue: 0,0:34:21.07,0:34:29.11,中文,,0,0,0,,事实证明  很难证明某件事不是 NP  但我们可以说  有些事情感觉不像 NP
Dialogue: 0,0:34:29.11,0:34:30.33,英文,,0,0,0,,For example, chess.
Dialogue: 0,0:34:29.11,0:34:30.33,中文,,0,0,0,,例如  国际象棋
Dialogue: 0,0:34:30.33,0:34:33.35,英文,,0,0,0,,Given a chess position, determine who's winning or if it's draw.
Dialogue: 0,0:34:30.33,0:34:33.35,中文,,0,0,0,,给定一个棋局  确定谁赢了或者是否平局
Dialogue: 0,0:34:33.35,0:34:40.07,英文,,0,0,0,,That's actually considered to be what's known as PSPACE complete, which is a harder level than NP.
Dialogue: 0,0:34:33.35,0:34:40.07,中文,,0,0,0,,这实际上被认为是 PSPACE 完整问题  它比 NP 更难
Dialogue: 0,0:34:40.07,0:34:44.84,英文,,0,0,0,,We don't know if it's an NP right now, but we think it's not.
Dialogue: 0,0:34:40.07,0:34:44.84,中文,,0,0,0,,我们现在不知道它是否是 NP  但我们认为它不是
Dialogue: 0,0:34:44.84,0:34:47.50,英文,,0,0,0,,Many other games, including Go, are also there.
Dialogue: 0,0:34:44.84,0:34:47.50,中文,,0,0,0,,许多其他游戏  包括围棋  也在那里
Dialogue: 0,0:34:47.50,0:34:51.33,英文,,0,0,0,,The halting problem, given a program input, does a program terminate?
Dialogue: 0,0:34:47.50,0:34:51.33,中文,,0,0,0,,停机问题  给定一个程序输入  程序是否会终止？
Dialogue: 0,0:34:51.33,0:34:52.77,英文,,0,0,0,,That's not even solvable.
Dialogue: 0,0:34:51.33,0:34:52.77,中文,,0,0,0,,这甚至无法解决
Dialogue: 0,0:34:52.77,0:34:58.13,英文,,0,0,0,,If you've taken CS70, you'll show that this is actually impossible to solve with an algorithm.
Dialogue: 0,0:34:52.77,0:34:58.13,中文,,0,0,0,,如果你学过 CS70  你会发现这实际上是不可能用算法解决的
Dialogue: 0,0:34:58.13,0:35:05.44,英文,,0,0,0,,If you have compression without an upper limit, that also apparently reduces to the halting problem, so it's undecidable as well.
Dialogue: 0,0:34:58.13,0:35:05.44,中文,,0,0,0,,如果你进行无上限压缩  那也显然会归结为停机问题  所以它也是不可判定的
Dialogue: 0,0:35:05.44,0:35:07.86,英文,,0,0,0,,So there's all these problems which aren't in NP.
Dialogue: 0,0:35:05.44,0:35:07.86,中文,,0,0,0,,所有这些问题都不在 NP 中
Dialogue: 0,0:35:07.86,0:35:14.13,英文,,0,0,0,,There are some problems which aren't in NP, and there are some problems which aren't in P.
Dialogue: 0,0:35:07.86,0:35:14.13,中文,,0,0,0,,有些问题不在 NP 中  有些问题不在 P 中
Dialogue: 0,0:35:14.13,0:35:20.73,英文,,0,0,0,,Now, interestingly enough, there's actually this really cool connection between problems in P and problems in NP.
Dialogue: 0,0:35:14.13,0:35:20.73,中文,,0,0,0,,有趣的是  P 中的问题和 NP 中的问题之间实际上存在着非常酷的联系
Dialogue: 0,0:35:20.73,0:35:22.83,英文,,0,0,0,,So let's take a look at this.
Dialogue: 0,0:35:20.73,0:35:22.83,中文,,0,0,0,,我们来看看这个
Dialogue: 0,0:35:22.83,0:35:27.60,英文,,0,0,0,,Earlier, we showed that the three versions of knapsack problem were equivalent under turn reduction.
Dialogue: 0,0:35:22.83,0:35:27.60,中文,,0,0,0,,之前  我们展示了背包问题的三个版本在图灵规约下是等价的
Dialogue: 0,0:35:27.60,0:35:30.12,英文,,0,0,0,,Effectively, each one reduces to the others.
Dialogue: 0,0:35:27.60,0:35:30.12,中文,,0,0,0,,实际上  每个版本都可以规约到其他版本
Dialogue: 0,0:35:30.12,0:35:34.40,英文,,0,0,0,,So effectively, we can say that all these problems are about the same difficulty.
Dialogue: 0,0:35:30.12,0:35:34.40,中文,,0,0,0,,实际上  我们可以说所有这些问题的难度都差不多
Dialogue: 0,0:35:34.40,0:35:38.25,英文,,0,0,0,,If we solve one, we solve all the others.
Dialogue: 0,0:35:34.40,0:35:38.25,中文,,0,0,0,,如果我们解决了一个  我们就解决了所有其他的
Dialogue: 0,0:35:38.25,0:35:44.83,英文,,0,0,0,,So we'll call a problem NP hard if every problem in NP can reduce to that problem.
Dialogue: 0,0:35:38.25,0:35:44.83,中文,,0,0,0,,如果NP中的每个问题都可以规约到某个问题  我们就称该问题为NP难问题
Dialogue: 0,0:35:44.83,0:35:53.46,英文,,0,0,0,,So if we can solve this one problem, then every problem in NP is solvable.
Dialogue: 0,0:35:44.83,0:35:53.46,中文,,0,0,0,,如果我们能解决这一个问题  那么NP中的每一个问题都是可解的
Dialogue: 0,0:35:53.46,0:35:57.68,英文,,0,0,0,,So as it turns out, this definition is kind of weird.
Dialogue: 0,0:35:53.46,0:35:57.68,中文,,0,0,0,,结果发现  这个定义有点奇怪
Dialogue: 0,0:35:57.68,0:36:00.71,英文,,0,0,0,,It's kind of hard to imagine that there might be anything like that.
Dialogue: 0,0:35:57.68,0:36:00.71,中文,,0,0,0,,很难想象会存在这样的问题
Dialogue: 0,0:36:00.71,0:36:02.37,英文,,0,0,0,,Well, let me talk about this problem.
Dialogue: 0,0:36:00.71,0:36:02.37,中文,,0,0,0,,我来谈谈这个问题
Dialogue: 0,0:36:02.37,0:36:06.77,英文,,0,0,0,,The SAT problem is defined as this, where you're given a Boolean function.
Dialogue: 0,0:36:02.37,0:36:06.77,中文,,0,0,0,,SAT问题定义如下：给定一个布尔函数
Dialogue: 0,0:36:06.77,0:36:11.07,英文,,0,0,0,,So you have a bunch of Boolean variables, and you have ands, ors, and nots.
Dialogue: 0,0:36:06.77,0:36:11.07,中文,,0,0,0,,你有一堆布尔变量  还有与、或、非运算符
Dialogue: 0,0:36:11.07,0:36:19.79,英文,,0,0,0,,And your goal is to figure out if there's any possible way to assign variables, true or false, such that the overall thing returns true.
Dialogue: 0,0:36:11.07,0:36:19.79,中文,,0,0,0,,你的目标是找出是否有任何可能的方法来分配变量（真或假）  使得整个表达式返回真
Dialogue: 0,0:36:19.79,0:36:23.97,英文,,0,0,0,,For example, if we have x and y, then this can be true.
Dialogue: 0,0:36:19.79,0:36:23.97,中文,,0,0,0,,例如  如果我们有x和y  那么这可能是真的
Dialogue: 0,0:36:23.97,0:36:28.39,英文,,0,0,0,,If you set x equal to true and y equal to true, then x and y will return true.
Dialogue: 0,0:36:23.97,0:36:28.39,中文,,0,0,0,,如果你将x设置为真  将y设置为真  那么x和y将返回真
Dialogue: 0,0:36:28.39,0:36:30.75,英文,,0,0,0,,So this should return true.
Dialogue: 0,0:36:28.39,0:36:30.75,中文,,0,0,0,,这应该返回真
Dialogue: 0,0:36:30.75,0:36:37.80,英文,,0,0,0,,On the other hand, if we have the function x and not x, no matter how we assign x as a variable, you'll yield false.
Dialogue: 0,0:36:30.75,0:36:37.80,中文,,0,0,0,,另一方面  如果我们有函数x和非x  无论我们如何将x赋值为变量  都会得到假
Dialogue: 0,0:36:37.80,0:36:41.72,英文,,0,0,0,,So the satisfiability question should return false.
Dialogue: 0,0:36:37.80,0:36:41.72,中文,,0,0,0,,可满足性问题应该返回假
Dialogue: 0,0:36:41.72,0:36:48.03,英文,,0,0,0,,This equation here at the bottom is said to be unsatisfiable, but this equation here is said to be satisfiable.
Dialogue: 0,0:36:41.72,0:36:48.03,中文,,0,0,0,,底部这个等式被称为不可满足的  而这个等式被称为可满足的
Dialogue: 0,0:36:48.03,0:36:53.68,英文,,0,0,0,,Determining whether or not a problem in satisfiability is satisfiable is an NP.
Dialogue: 0,0:36:48.03,0:36:53.68,中文,,0,0,0,,确定可满足性问题中的一个问题是否可满足是一个NP问题
Dialogue: 0,0:36:53.68,0:37:01.70,英文,,0,0,0,,The way you can do that is you can just guess a random assignment of the variables and see if it returns true.
Dialogue: 0,0:36:53.68,0:37:01.70,中文,,0,0,0,,你可以通过随机分配变量值  然后看看是否返回 True 来做到这一点
Dialogue: 0,0:37:01.70,0:37:07.63,英文,,0,0,0,,What's harder to prove is that SAT is NP-hard.
Dialogue: 0,0:37:01.70,0:37:07.63,中文,,0,0,0,,更难证明的是 SAT 是 NP-hard 的
Dialogue: 0,0:37:07.63,0:37:14.38,英文,,0,0,0,,Every decision problem that you can solve with a non-deterministic Turing machine can be transformed into a SAT problem in polynomial time.
Dialogue: 0,0:37:07.63,0:37:14.38,中文,,0,0,0,,任何可以用非确定性图灵机解决的判定问题都可以在多项式时间内转换为 SAT 问题
Dialogue: 0,0:37:14.38,0:37:21.39,英文,,0,0,0,,Even ones that we haven't discovered yet, those problems, as long as they're an NP, they can be reduced to SAT.
Dialogue: 0,0:37:14.38,0:37:21.39,中文,,0,0,0,,即使是我们尚未发现的问题  只要它们属于 NP  它们都可以约简到 SAT
Dialogue: 0,0:37:21.39,0:37:25.07,英文,,0,0,0,,And it is an amazingly complicated proof to show that's the case.
Dialogue: 0,0:37:21.39,0:37:25.07,中文,,0,0,0,,证明这一点是一个极其复杂的过程
Dialogue: 0,0:37:25.07,0:37:27.38,英文,,0,0,0,,See the Cook-Levin theorem.
Dialogue: 0,0:37:25.07,0:37:27.38,中文,,0,0,0,,参见 Cook-Levin 定理
Dialogue: 0,0:37:27.38,0:37:30.00,英文,,0,0,0,,In addition, SAT is an NP as well.
Dialogue: 0,0:37:27.38,0:37:30.00,中文,,0,0,0,,此外  SAT 也是一个 NP 问题
Dialogue: 0,0:37:30.00,0:37:35.14,英文,,0,0,0,,So a problem that's both an NP and NP-hard, we'll call an NP-complete problem.
Dialogue: 0,0:37:30.00,0:37:35.14,中文,,0,0,0,,一个既是 NP 又是 NP-hard 的问题  我们称之为 NP-完全问题
Dialogue: 0,0:37:35.14,0:37:39.98,英文,,0,0,0,,Informally, it's the hardest problem that could possibly exist in NP.
Dialogue: 0,0:37:35.14,0:37:39.98,中文,,0,0,0,,通俗地说  它是 NP 中可能存在的最难的问题
Dialogue: 0,0:37:39.98,0:37:42.62,英文,,0,0,0,,Here's kind of what we have right now.
Dialogue: 0,0:37:39.98,0:37:42.62,中文,,0,0,0,,这是我们现在所掌握的大致情况
Dialogue: 0,0:37:42.62,0:37:50.08,英文,,0,0,0,,All the problems in P, they can be solved by reductions to each other in polynomial time just by solving them manually from there.
Dialogue: 0,0:37:42.62,0:37:50.08,中文,,0,0,0,,P 中的所有问题  都可以通过手动解决或相互之间的多项式时间约简来解决
Dialogue: 0,0:37:50.08,0:38:01.59,英文,,0,0,0,,But every single other problem in NP, Sudoku, Knapsack, Longest Path, all of them reduce down to SAT, because SAT is NP-complete.
Dialogue: 0,0:37:50.08,0:38:01.59,中文,,0,0,0,,但是 NP 中的每一个其他问题  如数独、背包问题、最长路径问题  都可以约简到 SAT  因为 SAT 是 NP-完全的
Dialogue: 0,0:38:01.59,0:38:04.93,英文,,0,0,0,,And we know for a fact that every problem in NP can reduce down there.
Dialogue: 0,0:38:01.59,0:38:04.93,中文,,0,0,0,,我们确切地知道  NP 中的每个问题都可以约简到那里
Dialogue: 0,0:38:04.93,0:38:13.90,英文,,0,0,0,,Every problem in P is also reducible to NP, so we can go from any P problem to SAT as well.
Dialogue: 0,0:38:04.93,0:38:13.90,中文,,0,0,0,,P 中的每个问题也可以约简到 NP  所以我们也可以从任何 P 问题约简到 SAT
Dialogue: 0,0:38:13.90,0:38:16.50,英文,,0,0,0,,Here's something even crazier.
Dialogue: 0,0:38:13.90,0:38:16.50,中文,,0,0,0,,更疯狂的是...
Dialogue: 0,0:38:16.50,0:38:21.00,英文,,0,0,0,,SAT can reduce to other problems in NP as well.
Dialogue: 0,0:38:16.50,0:38:21.00,中文,,0,0,0,,SAT 也可以约简到 NP 中的其他问题
Dialogue: 0,0:38:21.00,0:38:32.45,英文,,0,0,0,,SAT reduces to 3SAT, which is basically the same problem with the added restriction that every single set of things is only like three ANDed together, three items ANDed together.
Dialogue: 0,0:38:21.00,0:38:32.45,中文,,0,0,0,,SAT 可以约简到 3SAT  3SAT 基本上是相同的问题  只是增加了每个集合中只有三个项目进行“与”运算的限制
Dialogue: 0,0:38:32.45,0:38:37.69,英文,,0,0,0,,SAT can reduce to independent set, which is the problem we mentioned earlier.
Dialogue: 0,0:38:32.45,0:38:37.69,中文,,0,0,0,,SAT 可以约简到独立集问题  这是我们之前提到的问题
Dialogue: 0,0:38:37.69,0:38:39.29,英文,,0,0,0,,3SAT reduces to graph coloring.
Dialogue: 0,0:38:37.69,0:38:39.29,中文,,0,0,0,,3SAT 可以约简到图着色问题
Dialogue: 0,0:38:39.29,0:38:43.03,英文,,0,0,0,,Given a graph, can you color in the nodes in a particular pattern?
Dialogue: 0,0:38:39.29,0:38:43.03,中文,,0,0,0,,给定一个图  你能否按照特定的模式为节点着色？
Dialogue: 0,0:38:43.03,0:38:45.42,英文,,0,0,0,,Graph coloring reduces to exact cover.
Dialogue: 0,0:38:43.03,0:38:45.42,中文,,0,0,0,,图着色问题可以归约为精确覆盖问题
Dialogue: 0,0:38:45.42,0:38:47.30,英文,,0,0,0,,Exact cover reduces to knapsack.
Dialogue: 0,0:38:45.42,0:38:47.30,中文,,0,0,0,,精确覆盖问题可以归约为背包问题
Dialogue: 0,0:38:47.30,0:38:51.18,英文,,0,0,0,,So overall, you can reduce from SAT down to knapsack somehow.
Dialogue: 0,0:38:47.30,0:38:51.18,中文,,0,0,0,,总的来说  你可以以某种方式将 SAT 问题归约为背包问题
Dialogue: 0,0:38:51.18,0:38:55.20,英文,,0,0,0,,Independent SAT reduces to vertex cover, which reduces to Hamilton circuit,
Dialogue: 0,0:38:51.18,0:38:55.20,中文,,0,0,0,,独立 SAT 问题可以归约为顶点覆盖问题  顶点覆盖问题可以归约为哈密顿回路问题
Dialogue: 0,0:38:55.20,0:38:57.20,英文,,0,0,0,,which ends up reducing to longest path.
Dialogue: 0,0:38:55.20,0:38:57.20,中文,,0,0,0,,哈密顿回路问题最终可以归约为最长路径问题
Dialogue: 0,0:38:57.20,0:39:04.58,英文,,0,0,0,,And then you can actually show that there's this complex sequence of problems that goes all the way from 3SAT down to Sudoku.
Dialogue: 0,0:38:57.20,0:39:04.58,中文,,0,0,0,,然后你实际上可以证明  存在这一系列复杂的问题  从 3SAT 一直到数独
Dialogue: 0,0:39:04.58,0:39:11.56,英文,,0,0,0,,Prime factorization is one of the only problems right now that we don't have that's currently known to be NP-complete.
Dialogue: 0,0:39:04.58,0:39:11.56,中文,,0,0,0,,质因数分解是目前我们所知的唯一一个不属于 NP 完全问题的问题
Dialogue: 0,0:39:11.56,0:39:18.23,英文,,0,0,0,,But all of these other problems that SAT can reduce to, because you can go from SAT to all of them,
Dialogue: 0,0:39:11.56,0:39:18.23,中文,,0,0,0,,但是所有这些 SAT 可以归约的其他问题  因为你可以从 SAT 到所有这些问题
Dialogue: 0,0:39:18.23,0:39:23.23,英文,,0,0,0,,and you can go from them to SAT, all of them are NP-complete.
Dialogue: 0,0:39:18.23,0:39:23.23,中文,,0,0,0,,并且你可以从它们回到 SAT  所有这些问题都是 NP 完全问题
Dialogue: 0,0:39:23.23,0:39:25.45,英文,,0,0,0,,So all of these problems are now NP-complete.
Dialogue: 0,0:39:23.23,0:39:25.45,中文,,0,0,0,,所有这些问题现在都是 NP 完全问题
Dialogue: 0,0:39:25.45,0:39:34.80,英文,,0,0,0,,And if you solve even one of these problems, then every other problem in NP will now be considered solvable in polynomial time.
Dialogue: 0,0:39:25.45,0:39:34.80,中文,,0,0,0,,如果你解决了其中任何一个问题  那么 NP 中的每一个其他问题都将被认为可以在多项式时间内解决
Dialogue: 0,0:39:34.80,0:39:41.15,英文,,0,0,0,,Just one of these problems, if you solve them, you solve all of them at the exact same time.
Dialogue: 0,0:39:34.80,0:39:41.15,中文,,0,0,0,,只要解决其中一个问题  你就同时解决了所有问题
Dialogue: 0,0:39:41.15,0:39:46.27,英文,,0,0,0,,So in some ways, solving the knapsack problem is actually the exact same as solving Sudoku.
Dialogue: 0,0:39:41.15,0:39:46.27,中文,,0,0,0,,在某种程度上  解决背包问题实际上与解决数独完全相同
Dialogue: 0,0:39:46.27,0:39:50.41,英文,,0,0,0,,If you can solve a Sudoku quickly, you can solve the knapsack problem quickly.
Dialogue: 0,0:39:46.27,0:39:50.41,中文,,0,0,0,,如果你能快速解决数独  你就能快速解决背包问题
Dialogue: 0,0:39:50.41,0:39:54.17,英文,,0,0,0,,There's actually tens of thousands of these problems now known to be NP-complete.
Dialogue: 0,0:39:50.41,0:39:54.17,中文,,0,0,0,,实际上现在有成千上万个问题被认为是 NP 完全问题
Dialogue: 0,0:39:54.17,0:39:57.68,英文,,0,0,0,,And a lot of these were just discovered entirely by chance.
Dialogue: 0,0:39:54.17,0:39:57.68,中文,,0,0,0,,其中很多都是偶然发现的
Dialogue: 0,0:39:57.68,0:40:03.36,英文,,0,0,0,,They were discovered in completely independent fields in things like physics or game theory or just puzzles.
Dialogue: 0,0:39:57.68,0:40:03.36,中文,,0,0,0,,它们是在完全独立的领域中发现的  比如物理学、博弈论或只是谜题
Dialogue: 0,0:40:03.36,0:40:06.85,英文,,0,0,0,,Well before we even had this concept of NP completeness,
Dialogue: 0,0:40:03.36,0:40:06.85,中文,,0,0,0,,在我们还没有 NP 完全性这个概念之前
Dialogue: 0,0:40:06.85,0:40:13.85,英文,,0,0,0,,and we've been trying to find these polynomial time solutions for all these and for decades, centuries, even millennia.
Dialogue: 0,0:40:06.85,0:40:13.85,中文,,0,0,0,,我们就已经尝试为所有这些问题找到多项式时间解决方案  几十年、几百年  甚至几千年了
Dialogue: 0,0:40:13.85,0:40:21.73,英文,,0,0,0,,If even one of these problems has a solution that reduces an NP, then every other NP problem is going to be solved in polynomial time.
Dialogue: 0,0:40:13.85,0:40:21.73,中文,,0,0,0,,如果其中任何一个问题都有一个可以归约 NP 的解决方案  那么所有其他 NP 问题都可以在多项式时间内解决
Dialogue: 0,0:40:21.73,0:40:24.64,英文,,0,0,0,,At this point, we haven't found a reduction for any of these.
Dialogue: 0,0:40:21.73,0:40:24.64,中文,,0,0,0,,目前  我们还没有找到任何一个问题的归约方法
Dialogue: 0,0:40:24.64,0:40:30.36,英文,,0,0,0,,But if we do, then we will prove that the set P is the same as the set NP.
Dialogue: 0,0:40:24.64,0:40:30.36,中文,,0,0,0,,但是如果找到了  我们就会证明 P 集合与 NP 集合相同
Dialogue: 0,0:40:30.36,0:40:34.81,英文,,0,0,0,,In other words, P equals NP.
Dialogue: 0,0:40:30.36,0:40:34.81,中文,,0,0,0,,换句话说  P=NP
Dialogue: 0,0:40:34.81,0:40:36.67,英文,,0,0,0,,If we can find that, then P equals NP.
Dialogue: 0,0:40:34.81,0:40:36.67,中文,,0,0,0,,如果我们能找到那个算法  那么 P 就等于 NP
Dialogue: 0,0:40:36.67,0:40:40.75,英文,,0,0,0,,If we can prove that it is impossible, then P is not equal to NP.
Dialogue: 0,0:40:36.67,0:40:40.75,中文,,0,0,0,,如果我们能证明它是不可能的  那么 P 就不等于 NP
Dialogue: 0,0:40:40.75,0:40:45.18,英文,,0,0,0,,This is the P equals NP problem.
Dialogue: 0,0:40:40.75,0:40:45.18,中文,,0,0,0,,这就是 P=NP 问题
Dialogue: 0,0:40:45.18,0:40:49.22,英文,,0,0,0,,And if you can solve this, you win a million dollars.
Dialogue: 0,0:40:45.18,0:40:49.22,中文,,0,0,0,,如果你能解决这个问题  你就能赢得一百万美元
Dialogue: 0,0:40:49.22,0:40:52.12,英文,,0,0,0,,So what's the consensus on what's going on right now?
Dialogue: 0,0:40:49.22,0:40:52.12,中文,,0,0,0,,那么目前大家对此有什么共识呢？
Dialogue: 0,0:40:52.12,0:40:56.49,英文,,0,0,0,,Well, they do a poll every now and then of these famous theorists.
Dialogue: 0,0:40:52.12,0:40:56.49,中文,,0,0,0,,嗯  他们时不时地对这些著名的理论家进行民意调查
Dialogue: 0,0:40:56.49,0:41:00.75,英文,,0,0,0,,Right now, 89% of people say that P is not equal to NP.
Dialogue: 0,0:40:56.49,0:41:00.75,中文,,0,0,0,,目前  89% 的人认为 P ≠ NP
Dialogue: 0,0:41:00.75,0:41:03.44,英文,,0,0,0,,11% of people say that something like P equals NP.
Dialogue: 0,0:41:00.75,0:41:03.44,中文,,0,0,0,,11% 的人认为 P = NP
Dialogue: 0,0:41:03.44,0:41:09.26,英文,,0,0,0,,And about 3% favor the idea that maybe P equals NP is impossible to prove entirely.
Dialogue: 0,0:41:03.44,0:41:09.26,中文,,0,0,0,,大约 3% 的人认为 P = NP 可能完全无法证明
Dialogue: 0,0:41:09.26,0:41:09.88,英文,,0,0,0,,You can't prove it.
Dialogue: 0,0:41:09.26,0:41:09.88,中文,,0,0,0,,你无法证明它
Dialogue: 0,0:41:09.88,0:41:10.77,英文,,0,0,0,,You can't disprove it.
Dialogue: 0,0:41:09.88,0:41:10.77,中文,,0,0,0,,你无法反驳它
Dialogue: 0,0:41:10.77,0:41:18.75,英文,,0,0,0,,As it turns out, there are things in math that you can neither prove nor disprove, like the axiom of choice.
Dialogue: 0,0:41:10.77,0:41:18.75,中文,,0,0,0,,事实证明  数学中有些东西你既不能证明也不能反驳  比如选择公理
Dialogue: 0,0:41:18.75,0:41:32.14,英文,,0,0,0,,Generally speaking, opinion's negative right now, because there's so many of these NP-complete problems that someone probably would have found a polynomial time solution if there existed one.
Dialogue: 0,0:41:18.75,0:41:32.14,中文,,0,0,0,,总的来说  目前的观点是负面的  因为有这么多 NP 完全问题  如果存在多项式时间解  那么可能早就有人找到了
Dialogue: 0,0:41:32.14,0:41:41.11,英文,,0,0,0,,And generally speaking, the ability to create infinite universes all at the exact same time, that feels like something you shouldn't be able to do in polynomial time.
Dialogue: 0,0:41:32.14,0:41:41.11,中文,,0,0,0,,一般来说  能够同时创造无限个宇宙  这感觉像是在多项式时间内不应该能够做到的事情
Dialogue: 0,0:41:41.11,0:41:46.89,英文,,0,0,0,,You should be able to do more with this non-deterministic Turing machine than a Turing machine.
Dialogue: 0,0:41:41.11,0:41:46.89,中文,,0,0,0,,你应该能够用这种非确定性图灵机做比图灵机更多的事情
Dialogue: 0,0:41:46.89,0:41:49.01,英文,,0,0,0,,But that's not a proof.
Dialogue: 0,0:41:46.89,0:41:49.01,中文,,0,0,0,,但那不是证明
Dialogue: 0,0:41:49.01,0:41:51.83,英文,,0,0,0,,And in order to do this right in math, you need a proof.
Dialogue: 0,0:41:49.01,0:41:51.83,中文,,0,0,0,,为了在数学上做到这一点  你需要一个证明
Dialogue: 0,0:41:51.83,0:41:55.79,英文,,0,0,0,,You need to be able to show definitively that this is true.
Dialogue: 0,0:41:51.83,0:41:55.79,中文,,0,0,0,,你需要能够明确地证明这是真的
Dialogue: 0,0:41:55.79,0:42:01.60,英文,,0,0,0,,And as it turns out, there's some arguments that say that P equals NP is still possible.
Dialogue: 0,0:41:55.79,0:42:01.60,中文,,0,0,0,,事实证明  有一些论点认为 P=NP 仍然是可能的
Dialogue: 0,0:42:01.60,0:42:06.98,英文,,0,0,0,,NP is surprisingly close to P. For example, take knapsack.
Dialogue: 0,0:42:01.60,0:42:06.98,中文,,0,0,0,,NP 与 P 惊人地接近  例如  以背包问题为例
Dialogue: 0,0:42:06.98,0:42:15.27,英文,,0,0,0,,We said that knapsack is in NP, and it's NP-complete, which means that we only have exponential time solutions.
Dialogue: 0,0:42:06.98,0:42:15.27,中文,,0,0,0,,我们说过背包问题属于 NP 问题  而且是 NP 完全问题  这意味着我们只有指数时间的解决方案
Dialogue: 0,0:42:15.27,0:42:19.15,英文,,0,0,0,,If you change the question just slightly, you can get to polynomial time solutions.
Dialogue: 0,0:42:15.27,0:42:19.15,中文,,0,0,0,,如果稍微改变一下问题  就可以得到多项式时间的解决方案
Dialogue: 0,0:42:19.15,0:42:23.45,英文,,0,0,0,,If we say n was actually the total weight of the items instead of the number of items,
Dialogue: 0,0:42:19.15,0:42:23.45,中文,,0,0,0,,如果我们将 n 定义为物品的总重量  而不是物品的数量
Dialogue: 0,0:42:23.45,0:42:29.45,英文,,0,0,0,,then we have a polynomial time solution, but only if the weights are integers and not rational numbers.
Dialogue: 0,0:42:23.45,0:42:29.45,中文,,0,0,0,,那么我们就可以得到一个多项式时间的解决方案  但前提是重量必须是整数而不是有理数
Dialogue: 0,0:42:29.45,0:42:31.85,英文,,0,0,0,,So if they're integers, then we found a polynomial time solution.
Dialogue: 0,0:42:29.45,0:42:31.85,中文,,0,0,0,,如果它们是整数  那么我们就找到了一个多项式时间的解决方案
Dialogue: 0,0:42:31.85,0:42:34.82,英文,,0,0,0,,If they're rational numbers, we haven't yet.
Dialogue: 0,0:42:31.85,0:42:34.82,中文,,0,0,0,,如果它们是有理数  我们还没有找到
Dialogue: 0,0:42:34.82,0:42:39.19,英文,,0,0,0,,If you only want to find a solution that's within x percent of the optimal solution,
Dialogue: 0,0:42:34.82,0:42:39.19,中文,,0,0,0,,如果你只想找到一个在最优解 x% 以内的解决方案  你不关心 1% 的损失
Dialogue: 0,0:42:39.19,0:42:44.19,英文,,0,0,0,,you don't care about like a 1% loss, then you can find an optimal, then you can find a solution in polynomial time as well.
Dialogue: 0,0:42:39.19,0:42:44.19,中文,,0,0,0,,那么你可以找到一个最优的  你也可以在多项式时间内找到一个解决方案
Dialogue: 0,0:42:44.19,0:42:46.35,英文,,0,0,0,,In fact, you can do this for any x greater than 0.
Dialogue: 0,0:42:44.19,0:42:46.35,中文,,0,0,0,,事实上  对于任何大于 0 的 x  你都可以这样做
Dialogue: 0,0:42:46.35,0:42:51.82,英文,,0,0,0,,So even if you want it 0.00001% off, you have a polynomial time solution for that.
Dialogue: 0,0:42:46.35,0:42:51.82,中文,,0,0,0,,即使你想要 0.00001% 的偏差  你也有一个多项式时间的解决方案
Dialogue: 0,0:42:51.82,0:42:55.77,英文,,0,0,0,,It just takes a lot of time in terms of x.
Dialogue: 0,0:42:51.82,0:42:55.77,中文,,0,0,0,,这只是需要根据 x 花费大量的时间
Dialogue: 0,0:42:55.77,0:43:02.37,英文,,0,0,0,,And if you look at how modern SAT works, we actually have SAT solvers that can generally solve most randomly generated cases.
Dialogue: 0,0:42:55.77,0:43:02.37,中文,,0,0,0,,如果你看看现代 SAT 是如何工作的  我们实际上有 SAT 求解器  通常可以解决大多数随机生成的案例
Dialogue: 0,0:43:02.37,0:43:08.24,英文,,0,0,0,,It only exhibits exponential time for cases that are specifically tailor-made to that particular SAT solver.
Dialogue: 0,0:43:02.37,0:43:08.24,中文,,0,0,0,,它只对专门为特定 SAT 求解器定制的案例表现出指数时间
Dialogue: 0,0:43:08.24,0:43:13.74,英文,,0,0,0,,So it's really close to P being equal to NP.
Dialogue: 0,0:43:08.24,0:43:13.74,中文,,0,0,0,,所以 P = NP 真的很接近
Dialogue: 0,0:43:13.74,0:43:22.79,英文,,0,0,0,,There's only those tiny, minor edge cases that happen to run exponentially that we haven't been able to get rid of.
Dialogue: 0,0:43:13.74,0:43:22.79,中文,,0,0,0,,只有那些微小、次要的边缘情况恰好以指数级运行  我们还没有找到办法消除它们
Dialogue: 0,0:43:22.79,0:43:26.55,英文,,0,0,0,,So if P equals NP is proven,
Dialogue: 0,0:43:22.79,0:43:26.55,中文,,0,0,0,,所以如果证明 P=NP
Dialogue: 0,0:43:26.55,0:43:29.33,英文,,0,0,0,,Basically, all of modern cryptography breaks.
Dialogue: 0,0:43:26.55,0:43:29.33,中文,,0,0,0,,基本上  所有现代密码学都会被破解
Dialogue: 0,0:43:29.33,0:43:35.23,英文,,0,0,0,,Every problem in NP just collapses down to P. And as we saw, basically, encryption is a problem in NP.
Dialogue: 0,0:43:29.33,0:43:35.23,中文,,0,0,0,,NP 中的每个问题都会归结为 P  正如我们所看到的  基本上  加密是 NP 中的一个问题
Dialogue: 0,0:43:35.23,0:43:39.22,英文,,0,0,0,,So everything is going to break.
Dialogue: 0,0:43:35.23,0:43:39.22,中文,,0,0,0,,所以一切都会被破解
Dialogue: 0,0:43:39.22,0:43:44.98,英文,,0,0,0,,Even if the algorithm is infeasible to run in real life, like something that's n to the 1 million power,
Dialogue: 0,0:43:39.22,0:43:44.98,中文,,0,0,0,,即使算法在现实生活中不可行  比如 n 的 100 万次方
Dialogue: 0,0:43:44.98,0:43:49.51,英文,,0,0,0,,We would have broken a fundamental assumption made by 89% of CS theorists.
Dialogue: 0,0:43:44.98,0:43:49.51,中文,,0,0,0,,我们也会打破 89% 的 CS 理论家所做的一个基本假设
Dialogue: 0,0:43:49.51,0:43:54.09,英文,,0,0,0,,And we would likely be able to find further improvements to this n to the 1 million solution.
Dialogue: 0,0:43:49.51,0:43:54.09,中文,,0,0,0,,我们很可能会进一步改进这个 n 的 100 万次方解
Dialogue: 0,0:43:54.09,0:43:58.44,英文,,0,0,0,,So it would open up basically an entirely new branch of computer science.
Dialogue: 0,0:43:54.09,0:43:58.44,中文,,0,0,0,,这将开启一个全新的计算机科学分支
Dialogue: 0,0:43:58.44,0:44:02.51,英文,,0,0,0,,If P is not equal to NP, then we would also uncover an entirely new branch of theory,
Dialogue: 0,0:43:58.44,0:44:02.51,中文,,0,0,0,,如果P≠NP  那么也将揭示理论上的一个全新领域
Dialogue: 0,0:44:02.51,0:44:11.51,英文,,0,0,0,,because we've so far not been able to prove any similarities between P, NP, P space, N log, all of those complexity classes.
Dialogue: 0,0:44:02.51,0:44:11.51,中文,,0,0,0,,因为迄今为止我们还无法证明P、NP、P空间、N log这些复杂度类别之间有任何相似之处
Dialogue: 0,0:44:11.51,0:44:17.14,英文,,0,0,0,,We haven't been able to find equivalences between them at all, or prove that they're not equivalent.
Dialogue: 0,0:44:11.51,0:44:17.14,中文,,0,0,0,,我们一直无法找到它们之间的等价性  也无法证明它们不等价
Dialogue: 0,0:44:17.14,0:44:20.22,英文,,0,0,0,,There's actually a lot of these unsolved problems in the complexity hierarchy.
Dialogue: 0,0:44:17.14,0:44:20.22,中文,,0,0,0,,实际上  在复杂度等级体系中存在许多这样的未解问题
Dialogue: 0,0:44:20.22,0:44:26.18,英文,,0,0,0,,And despite hundreds of people working on this problem, there's basically been no progress over the past decade.
Dialogue: 0,0:44:20.22,0:44:26.18,中文,,0,0,0,,尽管有数百人致力于这个问题  但在过去十年中基本上没有取得任何进展
Dialogue: 0,0:44:26.18,0:44:31.26,英文,,0,0,0,,We've been kind of stuck.
Dialogue: 0,0:44:26.18,0:44:31.26,中文,,0,0,0,,我们有点卡住了
Dialogue: 0,0:44:31.26,0:44:37.26,英文,,0,0,0,,Now, in 2000, the Clay Mathematics Institute set up these $1 million prizes to solve any of these problems.
Dialogue: 0,0:44:31.26,0:44:37.26,中文,,0,0,0,,2000年  克莱数学研究所设立了这些100万美元的奖金  用于解决任何一个这类问题
Dialogue: 0,0:44:37.26,0:44:39.48,英文,,0,0,0,,P equals NP was one of them.
Dialogue: 0,0:44:37.26,0:44:39.48,中文,,0,0,0,,P=NP是其中之一
Dialogue: 0,0:44:39.48,0:44:42.31,英文,,0,0,0,,And so far, out of these, only one of them have been solved.
Dialogue: 0,0:44:39.48,0:44:42.31,中文,,0,0,0,,到目前为止  这些问题中只有一个得到了解决
Dialogue: 0,0:44:42.31,0:44:44.03,英文,,0,0,0,,The Poincare conjecture was solved in 2002.
Dialogue: 0,0:44:42.31,0:44:44.03,中文,,0,0,0,,庞加莱猜想在2002年得到了解决
Dialogue: 0,0:44:44.03,0:44:54.82,英文,,0,0,0,,And these are considered the most important problems in modern mathematics and modern computer science today.
Dialogue: 0,0:44:44.03,0:44:54.82,中文,,0,0,0,,这些被认为是当今现代数学和现代计算机科学中最重要的难题
Dialogue: 0,0:44:54.82,0:44:59.85,英文,,0,0,0,,If you solve any one of these, then you earn $1 million.
Dialogue: 0,0:44:54.82,0:44:59.85,中文,,0,0,0,,如果你能解决其中任何一个  就能获得100万美元的奖金
Dialogue: 0,0:44:59.85,0:45:04.54,英文,,0,0,0,,Plus, probably a ton of honorary doctorates and tenure for life.
Dialogue: 0,0:44:59.85,0:45:04.54,中文,,0,0,0,,此外  还可能获得大量的荣誉博士学位和终身教职
Dialogue: 0,0:45:04.54,0:45:05.83,英文,,0,0,0,,So if you can solve these, you're set.
Dialogue: 0,0:45:04.54,0:45:05.83,中文,,0,0,0,,如果你能解决这些问题  你就成功了
Dialogue: 0,0:45:05.83,0:45:09.26,英文,,0,0,0,,You don't need to worry about anything you're taking in your classes.
Dialogue: 0,0:45:05.83,0:45:09.26,中文,,0,0,0,,你不需要担心你在课堂上学习的任何东西
Dialogue: 0,0:45:09.26,0:45:15.24,英文,,0,0,0,,You win. But it's going to be hard.
Dialogue: 0,0:45:09.26,0:45:15.24,中文,,0,0,0,,你赢了   但这将会很难
Dialogue: 0,0:45:15.24,0:45:22.75,英文,,0,0,0,,Now, I will point out that despite saying that all of this is very hard, I'm not going to say that you can't solve these with what you know.
Dialogue: 0,0:45:15.24,0:45:22.75,中文,,0,0,0,,我想指出的是  尽管我说过所有这些都非常困难  但我并不是说你无法用你所知道的知识来解决这些问题
Dialogue: 0,0:45:22.75,0:45:28.17,英文,,0,0,0,,Given what you know now, you have enough understanding to solve these problems.
Dialogue: 0,0:45:22.75,0:45:28.17,中文,,0,0,0,,凭借你现在所掌握的知识  你已经具备了足够的理解力来解决这些问题
Dialogue: 0,0:45:28.17,0:45:31.47,英文,,0,0,0,,As it turned out, this happens in real life sometimes.
Dialogue: 0,0:45:28.17,0:45:31.47,中文,,0,0,0,,事实证明  这种情况在现实生活中确实时有发生
Dialogue: 0,0:45:31.47,0:45:40.50,英文,,0,0,0,,So as it turns out, like some years back, there was this anime called The Melancholy of Haruhi Suzumiya.
Dialogue: 0,0:45:31.47,0:45:40.50,中文,,0,0,0,,几年前有一部叫《凉宫春日的忧郁》的动漫
Dialogue: 0,0:45:40.50,0:45:50.76,英文,,0,0,0,,Apparently, there's this really cool thing or this really weird thing where there's 14 episodes that are all identical or something.
Dialogue: 0,0:45:40.50,0:45:50.76,中文,,0,0,0,,它有一个非常酷或非常奇怪的地方  就是有 14 集内容完全相同的剧集
Dialogue: 0,0:45:50.76,0:45:57.67,英文,,0,0,0,,Someone decided to run the exact same episode eight times in a row because it was the time loop.
Dialogue: 0,0:45:50.76,0:45:57.67,中文,,0,0,0,,有人决定连续播放八次完全相同的剧集  因为这是一个时间循环
Dialogue: 0,0:45:57.67,0:46:06.64,英文,,0,0,0,,But one of the people who was watching this was asked, well, how many different ways can I watch these episodes in order?
Dialogue: 0,0:45:57.67,0:46:06.64,中文,,0,0,0,,但是其中一个观众问了一个问题：有多少种不同的顺序可以观看这些剧集？
Dialogue: 0,0:46:06.64,0:46:12.83,英文,,0,0,0,,And how many times do I need to watch the episodes to watch it in every possible permutation of order?
Dialogue: 0,0:46:06.64,0:46:12.83,中文,,0,0,0,,并且需要观看多少次才能以所有可能的排列顺序看完？
Dialogue: 0,0:46:12.83,0:46:16.53,英文,,0,0,0,,As it turns out, that was an unsolved math problem.
Dialogue: 0,0:46:12.83,0:46:16.53,中文,,0,0,0,,事实证明  这是一个未解决的数学问题
Dialogue: 0,0:46:16.53,0:46:24.80,英文,,0,0,0,,But these people who are just randomly asking on 4Chat about this, they solved it in 2011.
Dialogue: 0,0:46:16.53,0:46:24.80,中文,,0,0,0,,但是这些在 4chan 上随机提问的人  在 2011 年解决了这个问题
Dialogue: 0,0:46:24.80,0:46:30.75,英文,,0,0,0,,It was discovered by a mathematician in 2018, and they published it in 2021.
Dialogue: 0,0:46:24.80,0:46:30.75,中文,,0,0,0,,一位数学家在 2018 年发现了它  并在 2021 年发表了论文
Dialogue: 0,0:46:30.75,0:46:36.37,英文,,0,0,0,,Basically, this person didn't know it was unsolved and ended up solving it by complete chance.
Dialogue: 0,0:46:30.75,0:46:36.37,中文,,0,0,0,,基本上  这个人不知道它尚未解决  并最终偶然地解决了它
Dialogue: 0,0:46:36.37,0:46:37.55,英文,,0,0,0,,Here's the actual paper.
Dialogue: 0,0:46:36.37,0:46:37.55,中文,,0,0,0,,这是实际的论文
Dialogue: 0,0:46:37.55,0:46:43.56,英文,,0,0,0,,It is credited to anonymous 4chan poster.
Dialogue: 0,0:46:37.55,0:46:43.56,中文,,0,0,0,,它被署名为匿名的 4chan 发帖者
Dialogue: 0,0:46:43.56,0:46:46.54,英文,,0,0,0,,So this kind of thing happens.
Dialogue: 0,0:46:43.56,0:46:46.54,中文,,0,0,0,,所以这种事情会发生
Dialogue: 0,0:46:46.54,0:46:56.83,英文,,0,0,0,,Amateur mathematicians find amazing results every so often and come up with these crazy proofs just because they aren't told that it's impossible to do.
Dialogue: 0,0:46:46.54,0:46:56.83,中文,,0,0,0,,业余数学家经常会发现惊人的结果  并提出这些疯狂的证明  仅仅是因为没有人告诉他们这是不可能的
Dialogue: 0,0:46:56.83,0:46:58.81,英文,,0,0,0,,So feel free.
Dialogue: 0,0:46:56.83,0:46:58.81,中文,,0,0,0,,所以请随意尝试
Dialogue: 0,0:46:58.81,0:46:59.57,英文,,0,0,0,,Play around.
Dialogue: 0,0:46:58.81,0:46:59.57,中文,,0,0,0,,玩得开心
Dialogue: 0,0:46:59.57,0:47:01.13,英文,,0,0,0,,Have fun with life.
Dialogue: 0,0:46:59.57,0:47:01.13,中文,,0,0,0,,享受生活
Dialogue: 0,0:47:01.13,0:47:02.88,英文,,0,0,0,,If you can solve these problems, then please tell me.
Dialogue: 0,0:47:01.13,0:47:02.88,中文,,0,0,0,,如果你能解决这些问题  请告诉我
Dialogue: 0,0:47:02.88,0:47:05.10,英文,,0,0,0,,I would really love to know.
Dialogue: 0,0:47:02.88,0:47:05.10,中文,,0,0,0,,我真的很想知道
Dialogue: 0,0:47:05.10,0:47:06.10,英文,,0,0,0,,You can have the million dollars.
Dialogue: 0,0:47:05.10,0:47:06.10,中文,,0,0,0,,你可以获得一百万美元
Dialogue: 0,0:47:06.10,0:47:07.95,英文,,0,0,0,,I just want to know.
Dialogue: 0,0:47:06.10,0:47:07.95,中文,,0,0,0,,我只是想知道
Dialogue: 0,0:47:07.95,0:47:09.83,英文,,0,0,0,,But have fun.
Dialogue: 0,0:47:07.95,0:47:09.83,中文,,0,0,0,,尽情享受吧
Dialogue: 0,0:47:09.83,0:47:11.27,英文,,0,0,0,,Play around with it.
Dialogue: 0,0:47:09.83,0:47:11.27,中文,,0,0,0,,随意玩玩
Dialogue: 0,0:47:11.27,0:47:14.11,英文,,0,0,0,,There's a non-zero chance that you can actually solve this.
Dialogue: 0,0:47:11.27,0:47:14.11,中文,,0,0,0,,你确实有可能解决这个问题的概率不为零
Dialogue: 0,0:47:14.11,0:47:18.57,英文,,0,0,0,,You can do these kinds of things.
Dialogue: 0,0:47:14.11,0:47:18.57,中文,,0,0,0,,你能做到这些
Dialogue: 0,0:47:18.57,0:47:19.74,英文,,0,0,0,,So that concludes today's lecture.
Dialogue: 0,0:47:18.57,0:47:19.74,中文,,0,0,0,,今天的课程到此结束
Dialogue: 0,0:47:19.74,0:47:24.80,英文,,0,0,0,,Does anyone have any questions?
Dialogue: 0,0:47:19.74,0:47:24.80,中文,,0,0,0,,有人有问题吗？
Dialogue: 0,0:47:24.80,0:47:25.04,英文,,0,0,0,,All right.
Dialogue: 0,0:47:24.80,0:47:25.04,中文,,0,0,0,,
Dialogue: 0,0:47:25.04,0:47:26.10,英文,,0,0,0,,In that case, thank you.
Dialogue: 0,0:47:25.04,0:47:26.10,中文,,0,0,0,,那么  谢谢大家
Dialogue: 0,0:47:26.10,0:47:28.19,英文,,0,0,0,,Thanks for throwing up.
Dialogue: 0,0:47:26.10,0:47:28.19,中文,,0,0,0,,谢谢你的倾诉
Dialogue: 0,0:47:28.19,0:47:31.51,英文,,0,0,0,,Friday, I'm going over a summary of the entire class.
Dialogue: 0,0:47:28.19,0:47:31.51,中文,,0,0,0,,周五  我会对整门课程进行总结
Dialogue: 0,0:47:31.51,0:47:35.09,英文,,0,0,0,,We'll have a brief Q&A with me and Perrin answering questions.
Dialogue: 0,0:47:31.51,0:47:35.09,中文,,0,0,0,,我们将进行简短的问答环节  由我和 Perrin 回答问题
Dialogue: 0,0:47:35.09,0:47:39.13,英文,,0,0,0,,So yeah, if you have any questions you want to ask us, please come Friday.
Dialogue: 0,0:47:35.09,0:47:39.13,中文,,0,0,0,,如果你有任何问题想问我们  请周五来
Dialogue: 0,0:47:39.13,0:47:39.90,英文,,0,0,0,,We'll have some fun there.
Dialogue: 0,0:47:39.13,0:47:39.90,中文,,0,0,0,,到时会很有趣的
