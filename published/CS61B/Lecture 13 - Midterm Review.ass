[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 3
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1152
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Audio File: D:/python_code/video_tool/video_tool/result/Lecture 5 - Lists 3 DLLists and Arrays.mp4
Video File: D:/python_code/video_tool/video_tool/result/Lecture 5 - Lists 3 DLLists and Arrays.mp4
Video AR Mode: 4
Video AR Value: 1.600000
Video Zoom Percent: 0.500000
Scroll Position: 656
Active Line: 670
Video Position: 57565

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,13,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,90,100,0,0,1,1.33333,1.33333,2,6,6,7,1
Style: 英文,Arial,24,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,90,100,0,0,1,1.33333,1.33333,2,1,1,5,1
Style: 中文,微软雅黑,38,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,90,100,0,0,1,1.33333,1.33333,2,2,2,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
Dialogue: 0,0:00:00.08,0:00:05.73,英文,,0,0,0,,A few examples, that kind of stuff.
Dialogue: 0,0:00:00.08,0:00:05.73,中文,,0,0,0,,举几个例子 那种东西
Dialogue: 0,0:00:05.73,0:00:15.90,英文,,0,0,0,,Other than that, yeah, I think we don't have many major assignments.
Dialogue: 0,0:00:05.73,0:00:15.90,中文,,0,0,0,,除此之外 是的 我觉得我们没有太多的主要作业
Dialogue: 0,0:00:15.90,0:00:19.08,英文,,0,0,0,,I think the next assignment's due on Tuesday, right?
Dialogue: 0,0:00:15.90,0:00:19.08,中文,,0,0,0,,我觉得下一个任务是星期二截止 对吗
Dialogue: 0,0:00:19.08,0:00:35.66,英文,,0,0,0,,So once you're done with the exam, you're done for another few days, right?
Dialogue: 0,0:00:19.08,0:00:35.66,中文,,0,0,0,,一旦你完成了考试 你又可以休息几天 对吗
Dialogue: 0,0:00:35.66,0:00:37.86,英文,,0,0,0,,How's chat?
Dialogue: 0,0:00:35.66,0:00:37.86,中文,,0,0,0,,聊天怎么样
Dialogue: 0,0:00:37.86,0:00:39.30,英文,,0,0,0,,Did you put the slides on the website?
Dialogue: 0,0:00:37.86,0:00:39.30,中文,,0,0,0,,你把幻灯片放到网站上了吗
Dialogue: 0,0:00:39.30,0:00:40.68,英文,,0,0,0,,Yes.
Dialogue: 0,0:00:39.30,0:00:40.68,中文,,0,0,0,,是的
Dialogue: 0,0:00:40.68,0:00:43.78,英文,,0,0,0,,There's a bunch of people on the slides right now.
Dialogue: 0,0:00:40.68,0:00:43.78,中文,,0,0,0,,现在滑梯上有一群人
Dialogue: 0,0:00:43.78,0:00:45.96,英文,,0,0,0,,Is that 12 people or 72 people?
Dialogue: 0,0:00:43.78,0:00:45.96,中文,,0,0,0,,是12个人还是72个人
Dialogue: 0,0:00:45.96,0:00:46.46,英文,,0,0,0,,I think that's 12.
Dialogue: 0,0:00:45.96,0:00:46.46,中文,,0,0,0,,我觉得是12个
Dialogue: 0,0:00:46.46,0:00:51.50,英文,,0,0,0,,All right.
Dialogue: 0,0:00:51.50,0:00:59.52,英文,,0,0,0,,So before we get started, does anyone have any questions to start us off with?
Dialogue: 0,0:00:51.50,0:00:59.52,中文,,0,0,0,,那么在我们开始之前 有没有人有任何问题要提出的
Dialogue: 0,0:00:59.52,0:01:02.46,英文,,0,0,0,,Anything anyone wants us to cover?
Dialogue: 0,0:00:59.52,0:01:02.46,中文,,0,0,0,,有什么是任何人想让我们讨论的吗
Dialogue: 0,0:01:02.46,0:01:06.01,英文,,0,0,0,,Yeah?
Dialogue: 0,0:01:02.46,0:01:06.01,中文,,0,0,0,,是的
Dialogue: 0,0:01:06.01,0:01:10.92,英文,,0,0,0,,Comparators, iterators, that's not on this list.
Dialogue: 0,0:01:06.01,0:01:10.92,中文,,0,0,0,,比较器、迭代器 这个列表里没有
Dialogue: 0,0:01:10.92,0:01:12.36,英文,,0,0,0,,Whoops.
Dialogue: 0,0:01:10.92,0:01:12.36,中文,,0,0,0,,哎呀
Dialogue: 0,0:01:12.36,0:01:15.88,英文,,0,0,0,,I deleted the slides that were from last semester on those.
Dialogue: 0,0:01:12.36,0:01:15.88,中文,,0,0,0,,我删掉了上学期那些幻灯片
Dialogue: 0,0:01:15.88,0:01:17.48,英文,,0,0,0,,Whoops.
Dialogue: 0,0:01:15.88,0:01:17.48,中文,,0,0,0,,哎呀
Dialogue: 0,0:01:17.48,0:01:18.56,英文,,0,0,0,,We can talk about it a bit.
Dialogue: 0,0:01:17.48,0:01:18.56,中文,,0,0,0,,我们可以稍微讨论一下
Dialogue: 0,0:01:18.56,0:01:19.98,英文,,0,0,0,,Yeah.
Dialogue: 0,0:01:18.56,0:01:19.98,中文,,0,0,0,,是的
Dialogue: 0,0:01:19.98,0:01:20.83,英文,,0,0,0,,Yeah.
Dialogue: 0,0:01:19.98,0:01:20.83,中文,,0,0,0,,是的
Dialogue: 0,0:01:20.83,0:01:24.75,英文,,0,0,0,,Huh?
Dialogue: 0,0:01:20.83,0:01:24.75,中文,,0,0,0,,嗯
Dialogue: 0,0:01:24.75,0:01:28.69,英文,,0,0,0,,Well, we have to write boxes and pointers on the midterm.
Dialogue: 0,0:01:24.75,0:01:28.69,中文,,0,0,0,,好吧 我们得在期中考试上写盒子和指针
Dialogue: 0,0:01:28.69,0:01:33.98,英文,,0,0,0,,I cannot answer that question.
Dialogue: 0,0:01:28.69,0:01:33.98,中文,,0,0,0,,我不能回答那个问题
Dialogue: 0,0:01:33.98,0:01:35.29,英文,,0,0,0,,Yeah.
Dialogue: 0,0:01:33.98,0:01:35.29,中文,,0,0,0,,是的
Dialogue: 0,0:01:35.29,0:01:41.94,英文,,0,0,0,,I can't really answer, are you going to be expected to do x, y, z on the midterm?
Dialogue: 0,0:01:35.29,0:01:41.94,中文,,0,0,0,,我真的回答不了 你期中考试会被要求做 x、y、z 吗
Dialogue: 0,0:01:41.94,0:01:49.77,英文,,0,0,0,,Because that's going to spoil some information about the midterm, and I am aware of what is on the midterm.
Dialogue: 0,0:01:41.94,0:01:49.77,中文,,0,0,0,,因为那会泄露一些有关期中考试的信息 我知道期中考试上会考什么
Dialogue: 0,0:01:49.77,0:01:51.43,英文,,0,0,0,,Yeah.
Dialogue: 0,0:01:49.77,0:01:51.43,中文,,0,0,0,,是的
Dialogue: 0,0:01:51.43,0:01:52.59,英文,,0,0,0,,Sorry about that.
Dialogue: 0,0:01:51.43,0:01:52.59,中文,,0,0,0,,抱歉
Dialogue: 0,0:01:52.59,0:01:58.12,英文,,0,0,0,,Any other questions before we get started?
Dialogue: 0,0:01:52.59,0:01:58.12,中文,,0,0,0,,在我们开始之前还有其他问题吗
Dialogue: 0,0:01:58.12,0:02:02.63,英文,,0,0,0,,Yeah.
Dialogue: 0,0:01:58.12,0:02:02.63,中文,,0,0,0,,嗯
Dialogue: 0,0:02:02.63,0:02:12.72,英文,,0,0,0,,Can we summarize the imports that we have available?
Dialogue: 0,0:02:02.63,0:02:12.72,中文,,0,0,0,,我们能不能总结一下我们可以使用的导入
Dialogue: 0,0:02:12.72,0:02:15.86,英文,,0,0,0,,I mean, I can think about that.
Dialogue: 0,0:02:12.72,0:02:15.86,中文,,0,0,0,,我的意思是 我可以考虑一下
Dialogue: 0,0:02:15.86,0:02:17.22,英文,,0,0,0,,There are a number of imports.
Dialogue: 0,0:02:15.86,0:02:17.22,中文,,0,0,0,,有很多导入
Dialogue: 0,0:02:17.22,0:02:22.65,英文,,0,0,0,,I think largely, if you have it on the reference card, then that's something that you can use.
Dialogue: 0,0:02:17.22,0:02:22.65,中文,,0,0,0,,我认为 如果你在参考卡上有它 那就是你可以使用的
Dialogue: 0,0:02:22.65,0:02:24.67,英文,,0,0,0,,Yeah.
Dialogue: 0,0:02:22.65,0:02:24.67,中文,,0,0,0,,是的
Dialogue: 0,0:02:24.67,0:02:31.46,英文,,0,0,0,,There was another question back there too, right?
Dialogue: 0,0:02:24.67,0:02:31.46,中文,,0,0,0,,那里也有另一个问题 对吧
Dialogue: 0,0:02:31.46,0:02:35.86,英文,,0,0,0,,Can a class be both a comparable and an iterable?
Dialogue: 0,0:02:31.46,0:02:35.86,中文,,0,0,0,,一个类可以同时是可比较的和可迭代的吗
Dialogue: 0,0:02:35.86,0:02:37.42,英文,,0,0,0,,And an iterable?
Dialogue: 0,0:02:35.86,0:02:37.42,中文,,0,0,0,,还有可迭代的吗
Dialogue: 0,0:02:37.42,0:02:39.80,英文,,0,0,0,,Yeah, both can.
Dialogue: 0,0:02:37.42,0:02:39.80,中文,,0,0,0,,是的 两者都可以
Dialogue: 0,0:02:39.80,0:02:43.00,英文,,0,0,0,,A single class can implement multiple interfaces.
Dialogue: 0,0:02:39.80,0:02:43.00,中文,,0,0,0,,一个类可以实现多个接口
Dialogue: 0,0:02:43.00,0:02:50.50,英文,,0,0,0,,All you need to do is to just make sure that every single function in either of these interfaces is somewhere in that class.
Dialogue: 0,0:02:43.00,0:02:50.50,中文,,0,0,0,,你只需要确保这个类中的每个函数都在其中任意一个接口中
Dialogue: 0,0:02:50.50,0:02:51.52,英文,,0,0,0,,Yeah.
Dialogue: 0,0:02:50.50,0:02:51.52,中文,,0,0,0,,是的
Dialogue: 0,0:02:51.52,0:02:53.07,英文,,0,0,0,,Any other questions before we get started?
Dialogue: 0,0:02:51.52,0:02:53.07,中文,,0,0,0,,在我们开始之前还有其他问题吗
Dialogue: 0,0:02:53.07,0:02:55.69,英文,,0,0,0,,There's lots of requests for iterators and comparators.
Dialogue: 0,0:02:53.07,0:02:55.69,中文,,0,0,0,,有很多关于迭代器和比较器的请求
Dialogue: 0,0:02:55.69,0:02:56.81,英文,,0,0,0,,All right.
Dialogue: 0,0:02:56.81,0:02:57.65,英文,,0,0,0,,Wing it.
Dialogue: 0,0:02:56.81,0:02:57.65,中文,,0,0,0,,凭感觉来
Dialogue: 0,0:02:57.65,0:03:00.71,英文,,0,0,0,,Yeah, we'll wing it.
Dialogue: 0,0:02:57.65,0:03:00.71,中文,,0,0,0,,是的 我们会凭感觉来
Dialogue: 0,0:03:00.71,0:03:07.32,英文,,0,0,0,,All right, so yeah, I went over the stuff that you all wanted covered.
Dialogue: 0,0:03:00.71,0:03:07.32,中文,,0,0,0,,是的 我已经讲解了你们想要涵盖的内容
Dialogue: 0,0:03:07.32,0:03:12.97,英文,,0,0,0,,I picked, I think, these main things that it seemed a lot of people were asking about.
Dialogue: 0,0:03:07.32,0:03:12.97,中文,,0,0,0,,我挑选了 我觉得 这些主要的事情 似乎有很多人在问
Dialogue: 0,0:03:12.97,0:03:14.33,英文,,0,0,0,,And I made a few slides for each of these.
Dialogue: 0,0:03:12.97,0:03:14.33,中文,,0,0,0,,我为每个事情做了几张幻灯片
Dialogue: 0,0:03:14.33,0:03:16.89,英文,,0,0,0,,Let's go over these.
Dialogue: 0,0:03:14.33,0:03:16.89,中文,,0,0,0,,让我们来看看这些
Dialogue: 0,0:03:16.89,0:03:21.45,英文,,0,0,0,,So the first thing is that static dynamic typing and typecasting stuff.
Dialogue: 0,0:03:16.89,0:03:21.45,中文,,0,0,0,,第一件事就是静态动态类型和类型转换的东西
Dialogue: 0,0:03:21.45,0:03:26.55,英文,,0,0,0,,I think it's useful to see exactly what goes on when you write a Java program.
Dialogue: 0,0:03:21.45,0:03:26.55,中文,,0,0,0,,我认为看一看当你写一个Java程序时到底发生了什么是有用的
Dialogue: 0,0:03:26.55,0:03:31.90,英文,,0,0,0,,So when we press the Play button on a Java program, there's two steps that happen, actually.
Dialogue: 0,0:03:26.55,0:03:31.90,中文,,0,0,0,,当我们在Java程序上按下播放按钮时 实际上会发生两个步骤
Dialogue: 0,0:03:31.90,0:03:33.00,英文,,0,0,0,,It's not just a single step.
Dialogue: 0,0:03:31.90,0:03:33.00,中文,,0,0,0,,这不仅仅是一个步骤
Dialogue: 0,0:03:33.00,0:03:34.98,英文,,0,0,0,,It's two separate steps.
Dialogue: 0,0:03:33.00,0:03:34.98,中文,,0,0,0,,这是两个独立的步骤
Dialogue: 0,0:03:34.98,0:03:37.30,英文,,0,0,0,,The first step is compilation.
Dialogue: 0,0:03:34.98,0:03:37.30,中文,,0,0,0,,第一步是编译
Dialogue: 0,0:03:37.30,0:03:42.58,英文,,0,0,0,,And that's kind of where the computer gets to see if your code makes sense.
Dialogue: 0,0:03:37.30,0:03:42.58,中文,,0,0,0,,这就是计算机看看你的代码是否有意义的地方
Dialogue: 0,0:03:42.58,0:03:46.48,英文,,0,0,0,,So this checks for things like syntax errors, like did you miss a semicolon?
Dialogue: 0,0:03:42.58,0:03:46.48,中文,,0,0,0,,这个检查语法错误 比如你是不是漏了一个分号
Dialogue: 0,0:03:46.48,0:03:51.71,英文,,0,0,0,,It puts together a list of all the methods and attributes of every class.
Dialogue: 0,0:03:46.48,0:03:51.71,中文,,0,0,0,,它会列出每个类的所有方法和属性
Dialogue: 0,0:03:51.71,0:03:54.83,英文,,0,0,0,,So this actually includes all this inheritance stuff.
Dialogue: 0,0:03:51.71,0:03:54.83,中文,,0,0,0,,这实际上包括了所有这些继承的东西
Dialogue: 0,0:03:54.83,0:04:05.47,英文,,0,0,0,,So the way I like to think about it is that if you define a class, let's say Animal, and you have some functions there, and then you have the class Dog, then Dog is going to inherit everything from Animal.
Dialogue: 0,0:03:54.83,0:04:05.47,中文,,0,0,0,,我喜欢这样想 如果你定义了一个类 比如Animal 然后在那里有一些函数 然后你有Dog这个类 那么Dog会继承Animal的所有东西
Dialogue: 0,0:04:05.47,0:04:12.38,英文,,0,0,0,,It's going to copy all the Animal code into its own body, except for the stuff that gets overwritten.
Dialogue: 0,0:04:05.47,0:04:12.38,中文,,0,0,0,,它将会把所有的Animal 代码复制到自己的主体中 除了那些被覆盖的部分
Dialogue: 0,0:04:12.38,0:04:17.45,英文,,0,0,0,,So that kind of makes it so that everything the animal can do, a dog can do as well.
Dialogue: 0,0:04:12.38,0:04:17.45,中文,,0,0,0,,这样一来 Dog也能做Animal能做的一切
Dialogue: 0,0:04:17.45,0:04:19.69,英文,,0,0,0,,So it kind of copies over all this code.
Dialogue: 0,0:04:17.45,0:04:19.69,中文,,0,0,0,,它会复制所有这些代码
Dialogue: 0,0:04:19.69,0:04:23.73,英文,,0,0,0,,Now, if a class implements an interface, then it will inherit all the default methods.
Dialogue: 0,0:04:19.69,0:04:23.73,中文,,0,0,0,,现在 如果一个类实现了一个接口 那么它将继承所有的默认方法
Dialogue: 0,0:04:23.73,0:04:34.19,英文,,0,0,0,,And it will also check to make sure that any of the non-default methods in the interface have been properly overridden by the child class.
Dialogue: 0,0:04:23.73,0:04:34.19,中文,,0,0,0,,它还会检查接口中的任何非默认方法是否已被子类正确地覆盖
Dialogue: 0,0:04:34.19,0:04:41.27,英文,,0,0,0,,That way, you know that this interface is actually implementing everything that you need to.
Dialogue: 0,0:04:34.19,0:04:41.27,中文,,0,0,0,,这样 你就知道这个接口实际上实现了你需要的一切
Dialogue: 0,0:04:41.27,0:04:49.34,英文,,0,0,0,,Now, in order to override something, you need to have the same argument and the same name as the other class.
Dialogue: 0,0:04:41.27,0:04:49.34,中文,,0,0,0,,现在 为了覆盖某些东西 你需要和其他类有相同的参数和相同的名字
Dialogue: 0,0:04:49.34,0:04:52.76,英文,,0,0,0,,So this, collectively, we call the function signature.
Dialogue: 0,0:04:49.34,0:04:52.76,中文,,0,0,0,,这就是 总体来说 我们称之为函数签名
Dialogue: 0,0:04:52.76,0:04:58.87,英文,,0,0,0,,And if these mismatch, then you end up getting a completely separate method.
Dialogue: 0,0:04:52.76,0:04:58.87,中文,,0,0,0,,如果这些不匹配 那么最终你会得到一个完全不同的方法
Dialogue: 0,0:04:58.87,0:05:02.45,英文,,0,0,0,,The most common instance where this happens is things like equals.
Dialogue: 0,0:04:58.87,0:05:02.45,中文,,0,0,0,,最常见的情况是像 equals 这样的东西
Dialogue: 0,0:05:02.45,0:05:07.61,英文,,0,0,0,,If you have everything eventually
Dialogue: 0,0:05:02.45,0:05:07.61,中文,,0,0,0,,如果最终你拥有了一切
Dialogue: 0,0:05:07.61,0:05:09.05,英文,,0,0,0,,inherits from object.
Dialogue: 0,0:05:07.61,0:05:09.05,中文,,0,0,0,,都继承自对象
Dialogue: 0,0:05:09.05,0:05:18.32,英文,,0,0,0,,And within object, you have this equals object o method.
Dialogue: 0,0:05:09.05,0:05:18.32,中文,,0,0,0,,在对象内部 你有这个 equals 对象 o 方法
Dialogue: 0,0:05:18.32,0:05:21.46,英文,,0,0,0,,You have this public bool equals object.
Dialogue: 0,0:05:18.32,0:05:21.46,中文,,0,0,0,,你有这个public bool equals Object
Dialogue: 0,0:05:21.46,0:05:30.76,英文,,0,0,0,,But if you have a dog, then you might want to just write public bool equals Dog, right?
Dialogue: 0,0:05:21.46,0:05:30.76,中文,,0,0,0,,但如果你有一只Dog 那么你可能只想写public bool equals (Dog d) 对吧
Dialogue: 0,0:05:30.76,0:05:36.38,英文,,0,0,0,,But if you do this, then these two are two completely different functions, and neither one's going to override the other.
Dialogue: 0,0:05:30.76,0:05:36.38,中文,,0,0,0,,但是如果你这样做 那么这两个函数是完全不同的 也不会覆盖彼此
Dialogue: 0,0:05:36.38,0:05:40.32,英文,,0,0,0,,So it's not going to properly override the equals method.
Dialogue: 0,0:05:36.38,0:05:40.32,中文,,0,0,0,,它不会正确地覆盖equals方法
Dialogue: 0,0:05:40.32,0:05:48.39,英文,,0,0,0,,This is something that's outside of the scope for this semester's version of DMS, so you don't need to worry about us doing this.
Dialogue: 0,0:05:40.32,0:05:48.39,中文,,0,0,0,,这是超出本学期DMS版本范围的事情 所以你不需要担心我们会这样做
Dialogue: 0,0:05:48.39,0:05:50.77,英文,,0,0,0,,But you might do this accidentally in your code.
Dialogue: 0,0:05:48.39,0:05:50.77,中文,,0,0,0,,但你可能会在代码中不小心这样做
Dialogue: 0,0:05:50.77,0:06:00.13,英文,,0,0,0,,So what you need to do is you need to actually say that this is an object, and then within your code,
Dialogue: 0,0:05:50.77,0:06:00.13,中文,,0,0,0,,你需要做的是你实际上需要说这是一个对象 然后在你的代码中
Dialogue: 0,0:06:00.13,0:06:07.06,英文,,0,0,0,,Like, check if what was the format?
Dialogue: 0,0:06:00.13,0:06:07.06,中文,,0,0,0,,检查一下格式是什么
Dialogue: 0,0:06:07.06,0:06:08.68,英文,,0,0,0,,What's the?
Dialogue: 0,0:06:07.06,0:06:08.68,中文,,0,0,0,,是什么
Dialogue: 0,0:06:08.68,0:06:14.74,英文,,0,0,0,,If the instance of dog.
Dialogue: 0,0:06:08.68,0:06:14.74,中文,,0,0,0,,如果是Dog的实例
Dialogue: 0,0:06:14.74,0:06:17.42,英文,,0,0,0,,Give it a name like other dog.
Dialogue: 0,0:06:14.74,0:06:17.42,中文,,0,0,0,,给它起个像其他Dog一样的名字
Dialogue: 0,0:06:17.42,0:06:20.47,英文,,0,0,0,,O-D.
Dialogue: 0,0:06:17.42,0:06:20.47,中文,,0,0,0,,o-d
Dialogue: 0,0:06:20.47,0:06:22.11,英文,,0,0,0,,Yeah, something like this.
Dialogue: 0,0:06:20.47,0:06:22.11,中文,,0,0,0,,是的 就像这样
Dialogue: 0,0:06:22.11,0:06:25.10,英文,,0,0,0,,The syntax is weird.
Dialogue: 0,0:06:22.11,0:06:25.10,中文,,0,0,0,,语法有点奇怪
Dialogue: 0,0:06:25.10,0:06:34.74,英文,,0,0,0,,So if you want to set an equality thing, you need to override with object, not with the class that you're trying to override with.
Dialogue: 0,0:06:25.10,0:06:34.74,中文,,0,0,0,,如果你想设置一个相等的东西 你需要用对象覆盖 而不是用你试图用来覆盖的类
Dialogue: 0,0:06:34.74,0:06:38.18,英文,,0,0,0,,So equality needs to be checking against any possible object.
Dialogue: 0,0:06:34.74,0:06:38.18,中文,,0,0,0,,所以相等性需要检查任何可能的对象
Dialogue: 0,0:06:38.18,0:06:45.45,英文,,0,0,0,,Yeah?
Dialogue: 0,0:06:38.18,0:06:45.45,中文,,0,0,0,,是吗
Dialogue: 0,0:06:45.45,0:06:48.23,英文,,0,0,0,,Yes?
Dialogue: 0,0:06:45.45,0:06:48.23,中文,,0,0,0,,是的
Dialogue: 0,0:06:48.23,0:06:49.83,英文,,0,0,0,,Look, I grew up with C Sharp, OK?
Dialogue: 0,0:06:48.23,0:06:49.83,中文,,0,0,0,,看 我是用C Sharp长大的 好吗
Dialogue: 0,0:06:49.83,0:06:51.83,英文,,0,0,0,,It's also lowercase.
Dialogue: 0,0:06:49.83,0:06:51.83,中文,,0,0,0,,它也是小写的
Dialogue: 0,0:06:51.83,0:06:57.79,英文,,0,0,0,,Is it lowercase?
Dialogue: 0,0:06:51.83,0:06:57.79,中文,,0,0,0,,小写吗
Dialogue: 0,0:06:57.79,0:07:01.12,英文,,0,0,0,,OK, any other syntax typos?
Dialogue: 0,0:06:57.79,0:07:01.12,中文,,0,0,0,,还有其他语法错误吗
Dialogue: 0,0:07:01.12,0:07:07.54,英文,,0,0,0,,Something like this, yeah.
Dialogue: 0,0:07:01.12,0:07:07.54,中文,,0,0,0,,差不多就是这样了
Dialogue: 0,0:07:07.54,0:07:13.86,英文,,0,0,0,,All right.
Dialogue: 0,0:07:13.86,0:07:19.32,英文,,0,0,0,,So in addition to this, you'll go through your code, and it will assign a static type to every variable.
Dialogue: 0,0:07:13.86,0:07:19.32,中文,,0,0,0,,除此之外 你会浏览你的代码 并且它会为每个变量分配一个静态类型
Dialogue: 0,0:07:19.32,0:07:30.80,英文,,0,0,0,,So every variable or every partial computation within your code, it gets assigned a static type according to what type the compiler thinks it is based on just that line of code.
Dialogue: 0,0:07:19.32,0:07:30.80,中文,,0,0,0,,你代码中的每个变量或部分计算 都会根据编译器认为的类型来分配一个静态类型 仅基于那行代码
Dialogue: 0,0:07:30.80,0:07:34.38,英文,,0,0,0,,So normally, this is kind of what the type of variable was declared.
Dialogue: 0,0:07:30.80,0:07:34.38,中文,,0,0,0,,通常 这就是变量声明的类型
Dialogue: 0,0:07:34.38,0:07:42.98,英文,,0,0,0,,So if you declared a variable as type list, then the static type is list for that variable, or as the type of the return value.
Dialogue: 0,0:07:34.38,0:07:42.98,中文,,0,0,0,,如果你将一个变量声明为列表类型 那么该变量的静态类型就是列表 或者是返回值的类型
Dialogue: 0,0:07:42.98,0:07:54.47,英文,,0,0,0,,So if you evaluate some function, then whatever the return value's type is, that's going to be the static type of that subpart of a line.
Dialogue: 0,0:07:42.98,0:07:54.47,中文,,0,0,0,,如果你评估一些函数 那么无论返回值的类型是什么 这都将是该行子部分的静态类型
Dialogue: 0,0:07:54.47,0:07:56.93,英文,,0,0,0,,The only exception is if you do a typecast.
Dialogue: 0,0:07:54.47,0:07:56.93,中文,,0,0,0,,唯一的例外是你做了一个类型转换
Dialogue: 0,0:07:56.93,0:07:59.11,英文,,0,0,0,,So when you do a typecast,
Dialogue: 0,0:07:56.93,0:07:59.11,中文,,0,0,0,,当你进行类型转换时
Dialogue: 0,0:07:59.11,0:08:08.53,英文,,0,0,0,,You do, for example, animal new dog.
Dialogue: 0,0:07:59.11,0:08:08.53,中文,,0,0,0,,你做 例如 (Animal) new Dog
Dialogue: 0,0:08:08.53,0:08:15.42,英文,,0,0,0,,What this does is it creates a new dog, a dog object, and then it typecasts the thing to an animal.
Dialogue: 0,0:08:08.53,0:08:15.42,中文,,0,0,0,,这样做的效果是它创建了一个new Dog 一个狗对象 然后它将这个东西强制转换为一个 Animal
Dialogue: 0,0:08:15.42,0:08:26.69,英文,,0,0,0,,So now the static type of this piece of code is an animal.
Dialogue: 0,0:08:15.42,0:08:26.69,中文,,0,0,0,,现在这段代码的静态类型也是 Animal
Dialogue: 0,0:08:26.69,0:08:32.91,英文,,0,0,0,,So this also does check to see that this is possible or theoretically possible.
Dialogue: 0,0:08:26.69,0:08:32.91,中文,,0,0,0,,这也检查一下 看看这是可能的 或者理论上可能的
Dialogue: 0,0:08:32.91,0:08:36.86,英文,,0,0,0,,So if I do animal new dog, this is fine because all dogs are animals.
Dialogue: 0,0:08:32.91,0:08:36.86,中文,,0,0,0,,如果我创建一个new Dog对象 这没问题 因为所有的Dog都是 Animal
Dialogue: 0,0:08:36.86,0:08:42.16,英文,,0,0,0,,It is theoretically possible for this typecast to work.
Dialogue: 0,0:08:36.86,0:08:42.16,中文,,0,0,0,,理论上 这种类型转换是可能的
Dialogue: 0,0:08:42.16,0:08:46.27,英文,,0,0,0,,If you do dog new animal.
Dialogue: 0,0:08:42.16,0:08:46.27,中文,,0,0,0,,如果你创建一个 Animal对象而不是Dog
Dialogue: 0,0:08:46.27,0:08:49.95,英文,,0,0,0,,This isn't going to work, but it's not going to work in runtime.
Dialogue: 0,0:08:46.27,0:08:49.95,中文,,0,0,0,,这不会起作用 但它不会在运行时出错
Dialogue: 0,0:08:49.95,0:08:55.08,英文,,0,0,0,,During compile time, it'll say, yes, an animal could theoretically be a dog.
Dialogue: 0,0:08:49.95,0:08:55.08,中文,,0,0,0,,在编译时 它会说 是的  Animal理论上可以是一只Dog
Dialogue: 0,0:08:55.08,0:08:58.78,英文,,0,0,0,,So I'm going to say that this is fine during static runtime.
Dialogue: 0,0:08:55.08,0:08:58.78,中文,,0,0,0,,我会说在静态运行时这没问题
Dialogue: 0,0:08:58.78,0:09:04.92,英文,,0,0,0,,Only when we actually run the code later do we realize that this is broken.
Dialogue: 0,0:08:58.78,0:09:04.92,中文,,0,0,0,,只有当我们实际运行代码时 我们才意识到这有问题
Dialogue: 0,0:09:04.92,0:09:18.37,英文,,0,0,0,,If you do something like list new animal or list new dog, then Chava's going to complain at you, because it is very, very, very clear that dogs are not lists.
Dialogue: 0,0:09:04.92,0:09:18.37,中文,,0,0,0,,如果你做类似列出new Animal或列出new Dog的事情 Chava会抱怨你 因为非常非常清楚Dog不是列表
Dialogue: 0,0:09:18.37,0:09:19.85,英文,,0,0,0,,At least, I hope so.
Dialogue: 0,0:09:18.37,0:09:19.85,中文,,0,0,0,,至少我希望是这样
Dialogue: 0,0:09:19.85,0:09:23.23,英文,,0,0,0,,Dogs are not lists, right?
Dialogue: 0,0:09:19.85,0:09:23.23,中文,,0,0,0,,Dog不是列表 对吧
Dialogue: 0,0:09:23.23,0:09:24.83,英文,,0,0,0,,Yes.
Dialogue: 0,0:09:23.23,0:09:24.83,中文,,0,0,0,,是的
Dialogue: 0,0:09:24.83,0:09:32.39,英文,,0,0,0,,So generally speaking, if you have this type of typecast, then it's going to break, because dogs are definitely not lists.
Dialogue: 0,0:09:24.83,0:09:32.39,中文,,0,0,0,,总的来说 如果你有这种类型转换 那么它会出错 因为Dog绝对不是列表
Dialogue: 0,0:09:32.39,0:09:35.36,英文,,0,0,0,,There's no parent-child relationship between them.
Dialogue: 0,0:09:32.39,0:09:35.36,中文,,0,0,0,,它们之间没有父子关系
Dialogue: 0,0:09:35.36,0:09:40.86,英文,,0,0,0,,So it's just going to break there.
Dialogue: 0,0:09:35.36,0:09:40.86,中文,,0,0,0,,它只会在那里中断
Dialogue: 0,0:09:40.86,0:09:45.32,英文,,0,0,0,,Yeah?
Dialogue: 0,0:09:40.86,0:09:45.32,中文,,0,0,0,,是吗
Dialogue: 0,0:09:45.32,0:09:47.52,英文,,0,0,0,,When do you know if it's compiled time versus runtime?
Dialogue: 0,0:09:45.32,0:09:47.52,中文,,0,0,0,,你怎么知道是编译时还是运行时
Dialogue: 0,0:09:47.52,0:09:54.84,英文,,0,0,0,,It is going to be a compiled time error if it is guaranteed impossible just from looking at the types.
Dialogue: 0,0:09:47.52,0:09:54.84,中文,,0,0,0,,如果从类型上看是绝对不可能的 那么它就会是编译时错误
Dialogue: 0,0:09:54.84,0:09:57.79,英文,,0,0,0,,So here, a dog is definitely not a list.
Dialogue: 0,0:09:54.84,0:09:57.79,中文,,0,0,0,,在这里 Dog绝对不是一个列表
Dialogue: 0,0:09:57.79,0:10:03.47,英文,,0,0,0,,And there is no universe in which a dog could potentially be a list.
Dialogue: 0,0:09:57.79,0:10:03.47,中文,,0,0,0,,在任何可能的情况下 Dog都不可能是一个列表
Dialogue: 0,0:10:03.47,0:10:08.98,英文,,0,0,0,,How do you define that it's definitely a dog?
Dialogue: 0,0:10:03.47,0:10:08.98,中文,,0,0,0,,你怎么定义它肯定是一只Dog呢
Dialogue: 0,0:10:08.98,0:10:10.30,英文,,0,0,0,,Dogs are not lists.
Dialogue: 0,0:10:08.98,0:10:10.30,中文,,0,0,0,,Dog不是列表
Dialogue: 0,0:10:10.30,0:10:12.40,英文,,0,0,0,,Dogs can definitely not be lists.
Dialogue: 0,0:10:10.30,0:10:12.40,中文,,0,0,0,,Dog绝对不能是列表
Dialogue: 0,0:10:12.40,0:10:15.79,英文,,0,0,0,,But some animals are dogs, right?
Dialogue: 0,0:10:12.40,0:10:15.79,中文,,0,0,0,,但有些 Animal是Dog 对吧
Dialogue: 0,0:10:15.79,0:10:21.70,英文,,0,0,0,,It is possible for an animal to be a dog.
Dialogue: 0,0:10:15.79,0:10:21.70,中文,,0,0,0,,一个 Animal可能是一只Dog
Dialogue: 0,0:10:21.70,0:10:23.24,英文,,0,0,0,,So this is going to be allowed.
Dialogue: 0,0:10:21.70,0:10:23.24,中文,,0,0,0,,这是允许的
Dialogue: 0,0:10:23.24,0:10:28.84,英文,,0,0,0,,If you do dog new animal, you can theoretically have an animal that is a dog.
Dialogue: 0,0:10:23.24,0:10:28.84,中文,,0,0,0,,如果你做(Dog) new Animal 理论上你可以有一只是Dog的Animal
Dialogue: 0,0:10:28.84,0:10:34.74,英文,,0,0,0,,It doesn't know that you're defining as a new animal, and therefore the actual type is animal, which is not a dog.
Dialogue: 0,0:10:28.84,0:10:34.74,中文,,0,0,0,,它不知道你正在定义一个new Animal 因此实际类型是Animal 而不是Dog
Dialogue: 0,0:10:34.74,0:10:37.56,英文,,0,0,0,,It just knows that it is an animal.
Dialogue: 0,0:10:34.74,0:10:37.56,中文,,0,0,0,,它只知道自己是一只Animal
Dialogue: 0,0:10:37.56,0:10:40.68,英文,,0,0,0,,So you could theoretically say, yeah, this is possible.
Dialogue: 0,0:10:37.56,0:10:40.68,中文,,0,0,0,,理论上你可以说 是的 这是可能的
Dialogue: 0,0:10:40.68,0:10:42.50,英文,,0,0,0,,It's possible that this animal is a dog.
Dialogue: 0,0:10:40.68,0:10:42.50,中文,,0,0,0,,这只 Animal可能是一条Dog
Dialogue: 0,0:10:42.50,0:10:45.02,英文,,0,0,0,,So the static type check is going to pass.
Dialogue: 0,0:10:42.50,0:10:45.02,中文,,0,0,0,,静态类型检查会通过
Dialogue: 0,0:10:45.02,0:10:49.78,英文,,0,0,0,,It's only in the dynamic actual run do we see that it's an animal, not a dog.
Dialogue: 0,0:10:45.02,0:10:49.78,中文,,0,0,0,,只有在实际运行时 我们才看到它是一只Animal 而不是一只Dog
Dialogue: 0,0:10:49.78,0:10:51.70,英文,,0,0,0,,And therefore, we crash.
Dialogue: 0,0:10:49.78,0:10:51.70,中文,,0,0,0,,因此 我们崩溃了
Dialogue: 0,0:10:51.70,0:10:52.46,英文,,0,0,0,,Yeah.
Dialogue: 0,0:10:51.70,0:10:52.46,中文,,0,0,0,,是的
Dialogue: 0,0:10:52.46,0:10:56.72,英文,,0,0,0,,This also means that you could technically do new cat.
Dialogue: 0,0:10:52.46,0:10:56.72,中文,,0,0,0,,这也意味着你技术上可以做new  Cat
Dialogue: 0,0:10:56.72,0:11:01.57,英文,,0,0,0,,And you can typecast this to an animal.
Dialogue: 0,0:10:56.72,0:11:01.57,中文,,0,0,0,,你可以将这个转换为Animal类型
Dialogue: 0,0:11:01.57,0:11:04.24,英文,,0,0,0,,Add some parentheses here.
Dialogue: 0,0:11:01.57,0:11:04.24,中文,,0,0,0,,在这里加上一些括号
Dialogue: 0,0:11:04.24,0:11:10.41,英文,,0,0,0,,And this is going to pass a compile time check because a cat is an animal, so that's going to be fine.
Dialogue: 0,0:11:04.24,0:11:10.41,中文,,0,0,0,,这会通过编译时检查 因为 Cat 是Animal 所以没问题
Dialogue: 0,0:11:10.41,0:11:14.59,英文,,0,0,0,,And an animal could be a dog, so that's fine as well.
Dialogue: 0,0:11:10.41,0:11:14.59,中文,,0,0,0,,Animal也可以是Dog 所以也没问题
Dialogue: 0,0:11:14.59,0:11:17.58,英文,,0,0,0,,So you could do this kind of double casting.
Dialogue: 0,0:11:14.59,0:11:17.58,中文,,0,0,0,,你可以做这种双重转换
Dialogue: 0,0:11:17.58,0:11:26.85,英文,,0,0,0,,You could actually, if you really want to, you could do object list like this.
Dialogue: 0,0:11:17.58,0:11:26.85,中文,,0,0,0,,如果你真的想的话 你可以像这样做对象列表
Dialogue: 0,0:11:26.85,0:11:32.68,英文,,0,0,0,,And you're basically lying to the compiler that, yeah, yeah, trust me, this cat, it's actually a list.
Dialogue: 0,0:11:26.85,0:11:32.68,中文,,0,0,0,,你基本上是在对编译器说谎 是的 是的 相信我 这只 Cat  其实是一个列表
Dialogue: 0,0:11:32.68,0:11:37.20,英文,,0,0,0,,But no, in order to fool you, I'm going to say, no, it's actually an object first.
Dialogue: 0,0:11:32.68,0:11:37.20,中文,,0,0,0,,但不 为了欺骗你 我会先说 不 它实际上是一个对象
Dialogue: 0,0:11:37.20,0:11:41.16,英文,,0,0,0,,And this object that's completely different from this previous thing I talked about, it's definitely a list.
Dialogue: 0,0:11:37.20,0:11:41.16,中文,,0,0,0,,这个对象完全不同于我之前谈论的那个东西 它肯定是一个列表
Dialogue: 0,0:11:41.16,0:11:44.99,英文,,0,0,0,,Trust me.
Dialogue: 0,0:11:41.16,0:11:44.99,中文,,0,0,0,,相信我
Dialogue: 0,0:11:44.99,0:11:45.83,英文,,0,0,0,,Yeah.
Dialogue: 0,0:11:44.99,0:11:45.83,中文,,0,0,0,,是的
Dialogue: 0,0:11:45.83,0:11:50.81,英文,,0,0,0,,Yes.
Dialogue: 0,0:11:50.81,0:11:53.60,英文,,0,0,0,,When will casting a parent to its child work?
Dialogue: 0,0:11:50.81,0:11:53.60,中文,,0,0,0,,何时将父项转换为其子项会起作用
Dialogue: 0,0:11:53.60,0:11:58.90,英文,,0,0,0,,It only works if it actually is that child.
Dialogue: 0,0:11:53.60,0:11:58.90,中文,,0,0,0,,只有实际上是那个子类时才有效
Dialogue: 0,0:11:58.90,0:12:07.30,英文,,0,0,0,,So for example, here, if I say animal here, and then I say cat again here,
Dialogue: 0,0:11:58.90,0:12:07.30,中文,,0,0,0,,例如 在这里 如果我在这里说Animal 然后我再次说 Cat
Dialogue: 0,0:12:07.30,0:12:11.48,英文,,0,0,0,,then I can see that it's going to work, even in the dynamic time.
Dialogue: 0,0:12:07.30,0:12:11.48,中文,,0,0,0,,那么我可以看到它将会工作 即使在动态时间下也是如此
Dialogue: 0,0:12:11.48,0:12:13.20,英文,,0,0,0,,So it'll typecast the cat to be an animal.
Dialogue: 0,0:12:11.48,0:12:13.20,中文,,0,0,0,,它将把 Cat 强制转换为Animal
Dialogue: 0,0:12:13.20,0:12:13.96,英文,,0,0,0,,That's fine.
Dialogue: 0,0:12:13.20,0:12:13.96,中文,,0,0,0,,那没问题
Dialogue: 0,0:12:13.96,0:12:15.74,英文,,0,0,0,,It'll typecast the animal to a cat.
Dialogue: 0,0:12:13.96,0:12:15.74,中文,,0,0,0,,它将Animal强制转换为 Cat
Dialogue: 0,0:12:15.74,0:12:18.72,英文,,0,0,0,,That's theoretically possible, so the compiler will work for that.
Dialogue: 0,0:12:15.74,0:12:18.72,中文,,0,0,0,,这在理论上是可能的 所以编译器将为此工作
Dialogue: 0,0:12:18.72,0:12:23.59,英文,,0,0,0,,When we actually run this code, the cat is going to become a cat, which is going to become a cat.
Dialogue: 0,0:12:18.72,0:12:23.59,中文,,0,0,0,,当我们实际运行这段代码时  Cat 会变成一只 Cat  然后会变成一只 Cat
Dialogue: 0,0:12:23.59,0:12:26.29,英文,,0,0,0,,So a cat is a cat, and it's fine.
Dialogue: 0,0:12:23.59,0:12:26.29,中文,,0,0,0,,所以 Cat 就是 Cat  没问题的
Dialogue: 0,0:12:26.29,0:12:33.58,英文,,0,0,0,,Yeah?
Dialogue: 0,0:12:26.29,0:12:33.58,中文,,0,0,0,,是吗
Dialogue: 0,0:12:33.58,0:12:40.74,英文,,0,0,0,,So after that, it's going to check each line in isolation to see if that line is possible to run.
Dialogue: 0,0:12:33.58,0:12:40.74,中文,,0,0,0,,然后 在这之后 它将逐行检查以查看该行是否可以运行
Dialogue: 0,0:12:40.74,0:12:43.45,英文,,0,0,0,,So it'll look through each function.
Dialogue: 0,0:12:40.74,0:12:43.45,中文,,0,0,0,,它会遍历每个函数
Dialogue: 0,0:12:43.45,0:12:45.67,英文,,0,0,0,,It'll look for the static type of each variable.
Dialogue: 0,0:12:43.45,0:12:45.67,中文,,0,0,0,,它会查找每个变量的静态类型
Dialogue: 0,0:12:45.67,0:12:53.67,英文,,0,0,0,,And it'll check to make sure that that particular line has a way to run.
Dialogue: 0,0:12:45.67,0:12:53.67,中文,,0,0,0,,并且它会检查确保该特定行有一种运行的方式
Dialogue: 0,0:12:53.67,0:13:00.09,英文,,0,0,0,,So as an example here, if I have a list type,
Dialogue: 0,0:12:53.67,0:13:00.09,中文,,0,0,0,,比如说 在这里作为一个例子 如果我有一个列表类型 列表 L
Dialogue: 0,0:13:00.09,0:13:04.03,英文,,0,0,0,,List L. Let's say that I define the L somehow.
Dialogue: 0,0:13:00.09,0:13:04.03,中文,,0,0,0,,假设我以某种方式定义了 L
Dialogue: 0,0:13:04.03,0:13:06.93,英文,,0,0,0,,And then I want to do some list-specific thing.
Dialogue: 0,0:13:04.03,0:13:06.93,中文,,0,0,0,,然后我想执行一些特定于列表的操作
Dialogue: 0,0:13:06.93,0:13:11.19,英文,,0,0,0,,L dot, name me a list operation.
Dialogue: 0,0:13:06.93,0:13:11.19,中文,,0,0,0,,L 点 给我说一个列表操作
Dialogue: 0,0:13:11.19,0:13:13.61,英文,,0,0,0,,Get.
Dialogue: 0,0:13:11.19,0:13:13.61,中文,,0,0,0,,获取
Dialogue: 0,0:13:13.61,0:13:15.61,英文,,0,0,0,,Name me a number.
Dialogue: 0,0:13:13.61,0:13:15.61,中文,,0,0,0,,给我说一个数字
Dialogue: 0,0:13:15.61,0:13:16.90,英文,,0,0,0,,Three.
Dialogue: 0,0:13:15.61,0:13:16.90,中文,,0,0,0,,三
Dialogue: 0,0:13:16.90,0:13:18.84,英文,,0,0,0,,All right, L.get3.
Dialogue: 0,0:13:16.90,0:13:18.84,中文,,0,0,0,,好的 L.get3
Dialogue: 0,0:13:18.84,0:13:20.38,英文,,0,0,0,,So what does this do?
Dialogue: 0,0:13:18.84,0:13:20.38,中文,,0,0,0,,那这个做什么
Dialogue: 0,0:13:20.38,0:13:24.62,英文,,0,0,0,,Well, it checks to see if L, it's a list.
Dialogue: 0,0:13:20.38,0:13:24.62,中文,,0,0,0,,嗯 它检查一下 L 它是一个列表
Dialogue: 0,0:13:24.62,0:13:25.56,英文,,0,0,0,,3 is an integer.
Dialogue: 0,0:13:24.62,0:13:25.56,中文,,0,0,0,,3 是一个整数
Dialogue: 0,0:13:25.56,0:13:35.68,英文,,0,0,0,,So it checks to see if the list class has some function that takes in an integer and is a get, is named get.
Dialogue: 0,0:13:25.56,0:13:35.68,中文,,0,0,0,,它检查一下列表类是否有一些函数接受一个整数并且是一个获取函数 叫做 get
Dialogue: 0,0:13:35.68,0:13:38.00,英文,,0,0,0,,And it finds that, and it'll use that function.
Dialogue: 0,0:13:35.68,0:13:38.00,中文,,0,0,0,,然后它找到了 它会使用那个函数
Dialogue: 0,0:13:38.00,0:13:41.39,英文,,0,0,0,,Or it'll look at that function and see that that exists.
Dialogue: 0,0:13:38.00,0:13:41.39,中文,,0,0,0,,或者它会查看那个函数并且看到那个函数是存在的
Dialogue: 0,0:13:41.39,0:13:43.13,英文,,0,0,0,,It's going to decide on that function's signature.
Dialogue: 0,0:13:41.39,0:13:43.13,中文,,0,0,0,,它将决定该函数的签名
Dialogue: 0,0:13:43.13,0:13:47.37,英文,,0,0,0,,It's not actually going to run the code, because we're still on compile time.
Dialogue: 0,0:13:43.13,0:13:47.37,中文,,0,0,0,,实际上 它不会运行代码 因为我们仍然处于编译时期
Dialogue: 0,0:13:47.37,0:13:56.25,英文,,0,0,0,,Now, if I do something different, like, I don't know, list.get 3.5, then this will do something weird.
Dialogue: 0,0:13:47.37,0:13:56.25,中文,,0,0,0,,现在 如果我做一些不同的事情 比如 我不知道 list.get 3.5 那么这将会产生一些奇怪的情况
Dialogue: 0,0:13:56.25,0:14:03.20,英文,,0,0,0,,It'll look at 3.5, and it'll see this as a double, double being like some decimal value.
Dialogue: 0,0:13:56.25,0:14:03.20,中文,,0,0,0,,它会看到3.5 并将其视为double double是一些小数值
Dialogue: 0,0:14:03.20,0:14:11.04,英文,,0,0,0,,And it'll look to see if there's a function in list that has get, has the name get, and which takes in as input a double.
Dialogue: 0,0:14:03.20,0:14:11.04,中文,,0,0,0,,它会查看列表中是否有一个名为get的函数 以及该函数是否接受一个double作为输入
Dialogue: 0,0:14:11.04,0:14:17.31,英文,,0,0,0,,It doesn't find that, so it's going to run a compiler error saying that it doesn't know what you mean by get 3.5.
Dialogue: 0,0:14:11.04,0:14:17.31,中文,,0,0,0,,它找不到这样的函数 所以它会运行一个编译器错误 说它不知道你的get 3.5是什么意思
Dialogue: 0,0:14:17.31,0:14:18.65,英文,,0,0,0,,Which kind of makes sense.
Dialogue: 0,0:14:17.31,0:14:18.65,中文,,0,0,0,,这有点说得通
Dialogue: 0,0:14:18.65,0:14:24.04,英文,,0,0,0,,You can't really get the 3.5th element of a list.
Dialogue: 0,0:14:18.65,0:14:24.04,中文,,0,0,0,,你真的不能获取列表的第3.5个元素
Dialogue: 0,0:14:24.04,0:14:25.32,英文,,0,0,0,,Yeah.
Dialogue: 0,0:14:24.04,0:14:25.32,中文,,0,0,0,,是的
Dialogue: 0,0:14:25.32,0:14:34.46,英文,,0,0,0,,The same thing happens if you do, I don't know, name a word that is not a list operation.
Dialogue: 0,0:14:25.32,0:14:34.46,中文,,0,0,0,,如果你做了同样的事 比如说 随便说个不是列表操作的词
Dialogue: 0,0:14:34.46,0:14:35.54,英文,,0,0,0,,Eat.
Dialogue: 0,0:14:34.46,0:14:35.54,中文,,0,0,0,,吃
Dialogue: 0,0:14:35.54,0:14:37.41,英文,,0,0,0,,L.eat3.
Dialogue: 0,0:14:35.54,0:14:37.41,中文,,0,0,0,,L.eat3
Dialogue: 0,0:14:37.41,0:14:43.15,英文,,0,0,0,,Lists don't know how to eat, so it won't understand what to do with this.
Dialogue: 0,0:14:37.41,0:14:43.15,中文,,0,0,0,,列表不会吃 所以它不明白该怎么做
Dialogue: 0,0:14:43.15,0:14:44.91,英文,,0,0,0,,And even...
Dialogue: 0,0:14:43.15,0:14:44.91,中文,,0,0,0,,甚至还...
Dialogue: 0,0:14:44.91,0:14:53.14,英文,,0,0,0,,And this is true even with you do something like resize.
Dialogue: 0,0:14:44.91,0:14:53.14,中文,,0,0,0,,即使你进行像调整大小这样的操作 这也是真的
Dialogue: 0,0:14:53.14,0:15:00.60,英文,,0,0,0,,Even if your ArrayList has a way to do a resize operation, it's not going to be able to do this, because L is a list.
Dialogue: 0,0:14:53.14,0:15:00.60,中文,,0,0,0,,即使你的ArrayList有调整大小的方法 它也做不到 因为L是一个列表
Dialogue: 0,0:15:00.60,0:15:06.60,英文,,0,0,0,,Because L is a list, it doesn't know what type of list it is, so it's only going to assume that it can do list-specific things.
Dialogue: 0,0:15:00.60,0:15:06.60,中文,,0,0,0,,因为L是一个列表 它不知道是什么类型的列表 所以它只会认为它只能做列表特有的事情
Dialogue: 0,0:15:06.60,0:15:14.09,英文,,0,0,0,,It's not going to be able to do things like resize, because a resize is an ArrayList-specific thing, and it doesn't know that this is an ArrayList.
Dialogue: 0,0:15:06.60,0:15:14.09,中文,,0,0,0,,它做不到像调整大小这样的操作 因为调整大小是ArrayList特有的事情 而它不知道这是一个ArrayList
Dialogue: 0,0:15:14.09,0:15:17.19,英文,,0,0,0,,So because of that, it's going to not allow this line.
Dialogue: 0,0:15:14.09,0:15:17.19,中文,,0,0,0,,因为这个原因 它不会允许这行代码
Dialogue: 0,0:15:17.19,0:15:17.99,英文,,0,0,0,,Yeah?
Dialogue: 0,0:15:17.19,0:15:17.99,中文,,0,0,0,,是吗
Dialogue: 0,0:15:17.99,0:15:23.58,英文,,0,0,0,,Can we define L to be an unparameterized list, like you have here?
Dialogue: 0,0:15:17.99,0:15:23.58,中文,,0,0,0,,我们可以定义L为一个未参数化的列表 就像你这里有的吗
Dialogue: 0,0:15:23.58,0:15:25.92,英文,,0,0,0,,Can we define L to be an unparameterized list?
Dialogue: 0,0:15:23.58,0:15:25.92,中文,,0,0,0,,我们能把 L 定义为一个无参数的列表吗
Dialogue: 0,0:15:25.92,0:15:27.18,英文,,0,0,0,,No, I'm just ignoring this.
Dialogue: 0,0:15:25.92,0:15:27.18,中文,,0,0,0,,不 我只是忽略了这个
Dialogue: 0,0:15:27.18,0:15:31.58,英文,,0,0,0,,It really should be integer or something like this.
Dialogue: 0,0:15:27.18,0:15:31.58,中文,,0,0,0,,实际上应该是整数或类似这样的东西
Dialogue: 0,0:15:31.58,0:15:34.89,英文,,0,0,0,,Yeah, you have to do something like this if you want to actually have this.
Dialogue: 0,0:15:31.58,0:15:34.89,中文,,0,0,0,,是的 如果你想要实际拥有这个 你必须做这样的事情
Dialogue: 0,0:15:34.89,0:15:46.97,英文,,0,0,0,,But yeah, yes?
Dialogue: 0,0:15:34.89,0:15:46.97,中文,,0,0,0,,但是 是的
Dialogue: 0,0:15:46.97,0:16:04.10,英文,,0,0,0,,Yeah?
Dialogue: 0,0:15:46.97,0:16:04.10,中文,,0,0,0,,是的
Dialogue: 0,0:16:04.10,0:16:11.53,英文,,0,0,0,,So yeah, if you decide to do this, then you can do this by casting this to an ArrayList first.
Dialogue: 0,0:16:04.10,0:16:11.53,中文,,0,0,0,,是的 如果你决定这样做 那么你可以先将它转换为 ArrayList
Dialogue: 0,0:16:11.53,0:16:14.77,英文,,0,0,0,,And if you do this, then it'll work.
Dialogue: 0,0:16:11.53,0:16:14.77,中文,,0,0,0,,如果你这样做 那么它就会起作用
Dialogue: 0,0:16:14.77,0:16:17.79,英文,,0,0,0,,So the LLIST is going to be treated as an ArrayList.
Dialogue: 0,0:16:14.77,0:16:17.79,中文,,0,0,0,,所以List将被视为ArrayList
Dialogue: 0,0:16:17.79,0:16:22.45,英文,,0,0,0,,That is a theoretically possible type cast, so the compile time check is going to pass there.
Dialogue: 0,0:16:17.79,0:16:22.45,中文,,0,0,0,,这是一种在理论上可能发生的类型转换 因此编译时检查会通过
Dialogue: 0,0:16:22.45,0:16:25.93,英文,,0,0,0,,And then it'll check if ArrayList has a resize operation.
Dialogue: 0,0:16:22.45,0:16:25.93,中文,,0,0,0,,然后它会检查ArrayList是否有调整大小的操作
Dialogue: 0,0:16:25.93,0:16:31.44,英文,,0,0,0,,And if you made your resize operation public, then you would be able to do this directly.
Dialogue: 0,0:16:25.93,0:16:31.44,中文,,0,0,0,,如果你将调整大小的操作设为public 那么你就可以直接这样做
Dialogue: 0,0:16:31.44,0:16:34.66,英文,,0,0,0,,Yeah?
Dialogue: 0,0:16:31.44,0:16:34.66,中文,,0,0,0,,是的
Dialogue: 0,0:16:34.66,0:16:41.72,英文,,0,0,0,,Can you cast in the line above?
Dialogue: 0,0:16:34.66,0:16:41.72,中文,,0,0,0,,你能在上面的行中进行类型转换吗
Dialogue: 0,0:16:41.72,0:16:44.28,英文,,0,0,0,,Like this?
Dialogue: 0,0:16:41.72,0:16:44.28,中文,,0,0,0,,这样行吗
Dialogue: 0,0:16:44.28,0:16:51.40,英文,,0,0,0,,You can, except that doesn't do anything, because the ArrayList is already definitely an ArrayList.
Dialogue: 0,0:16:44.28,0:16:51.40,中文,,0,0,0,,你可以 但是这样做其实没有任何作用 因为 ArrayList 已经明确是一个 ArrayList 了
Dialogue: 0,0:16:51.40,0:16:51.97,英文,,0,0,0,,Yeah.
Dialogue: 0,0:16:51.40,0:16:51.97,中文,,0,0,0,,对
Dialogue: 0,0:16:51.97,0:16:55.69,英文,,0,0,0,,The problem here is that L is defined as a list, not as an ArrayList.
Dialogue: 0,0:16:51.97,0:16:55.69,中文,,0,0,0,,问题在于 L 被定义为一个列表 而不是一个 ArrayList
Dialogue: 0,0:16:55.69,0:16:59.81,英文,,0,0,0,,So if you wanted to do this, you would have to define this as ArrayList, like this.
Dialogue: 0,0:16:55.69,0:16:59.81,中文,,0,0,0,,如果你想这样做 你需要将其定义为 ArrayList 就像这样
Dialogue: 0,0:16:59.81,0:17:07.16,英文,,0,0,0,,Otherwise, you would need the cast, because each line of code only looks at that one line.
Dialogue: 0,0:16:59.81,0:17:07.16,中文,,0,0,0,,否则 你就需要进行强制转换 因为每行代码只看那一行
Dialogue: 0,0:17:07.16,0:17:08.88,英文,,0,0,0,,Yeah.
Dialogue: 0,0:17:07.16,0:17:08.88,中文,,0,0,0,,对
Dialogue: 0,0:17:08.88,0:17:16.26,英文,,0,0,0,,Yes?
Dialogue: 0,0:17:08.88,0:17:16.26,中文,,0,0,0,,是吗
Dialogue: 0,0:17:16.26,0:17:20.70,英文,,0,0,0,,It changes the static type to ArrayList for that one line only.
Dialogue: 0,0:17:16.26,0:17:20.70,中文,,0,0,0,,它只是将静态类型更改为 ArrayList 仅限于那一行
Dialogue: 0,0:17:20.70,0:17:21.24,英文,,0,0,0,,Yeah.
Dialogue: 0,0:17:20.70,0:17:21.24,中文,,0,0,0,,是的
Dialogue: 0,0:17:21.24,0:17:27.16,英文,,0,0,0,,This type cast only affects a single instance where it's being written.
Dialogue: 0,0:17:21.24,0:17:27.16,中文,,0,0,0,,这种类型转换只影响到它正在被写入的单个实例
Dialogue: 0,0:17:27.16,0:17:38.19,英文,,0,0,0,,Like, if I, I don't know, did L here, like there was some operation that had some list, then this second L is also going to be of list type, not of ArrayList static type.
Dialogue: 0,0:17:27.16,0:17:38.19,中文,,0,0,0,,就像 如果我 在这里做了 L 就像有一些操作有一些列表 那么第二个 L 也会是列表类型 而不是 ArrayList 静态类型
Dialogue: 0,0:17:38.19,0:17:44.21,英文,,0,0,0,,So this type cast only affects this one time that L is being looked at.
Dialogue: 0,0:17:38.19,0:17:44.21,中文,,0,0,0,,这种类型转换只影响 L 被查看的这一次
Dialogue: 0,0:17:44.21,0:17:44.69,英文,,0,0,0,,Yeah.
Dialogue: 0,0:17:44.21,0:17:44.69,中文,,0,0,0,,是的
Dialogue: 0,0:17:44.69,0:18:01.73,英文,,0,0,0,,Yes.
Dialogue: 0,0:17:44.69,0:18:01.73,中文,,0,0,0,,是的
Dialogue: 0,0:18:01.73,0:18:04.46,英文,,0,0,0,,Yes, this thing is going to have a static type ArrayList.
Dialogue: 0,0:18:01.73,0:18:04.46,中文,,0,0,0,,是的 这个东西将拥有一个静态类型的ArrayList
Dialogue: 0,0:18:04.46,0:18:05.90,英文,,0,0,0,,That's all the compiler sees.
Dialogue: 0,0:18:04.46,0:18:05.90,中文,,0,0,0,,编译器只能看到这些
Dialogue: 0,0:18:05.90,0:18:10.12,英文,,0,0,0,,When we actually run this in dynamic time, we'll actually turn this into an actual ArrayList.
Dialogue: 0,0:18:05.90,0:18:10.12,中文,,0,0,0,,当我们实际在动态时间运行时 我们将把这个转换成一个真正的ArrayList
Dialogue: 0,0:18:10.12,0:18:13.14,英文,,0,0,0,,So we'll have dynamic type ArrayList as well.
Dialogue: 0,0:18:10.12,0:18:13.14,中文,,0,0,0,,我们也会有动态类型的ArrayList
Dialogue: 0,0:18:13.14,0:18:27.74,英文,,0,0,0,,There was a question up here, right?
Dialogue: 0,0:18:13.14,0:18:27.74,中文,,0,0,0,,这里有个问题 对吗
Dialogue: 0,0:18:27.74,0:18:30.55,英文,,0,0,0,,If you do this, is it going to compile?
Dialogue: 0,0:18:27.74,0:18:30.55,中文,,0,0,0,,如果你这样做 它会编译吗
Dialogue: 0,0:18:30.55,0:18:33.13,英文,,0,0,0,,I do not believe it will.
Dialogue: 0,0:18:30.55,0:18:33.13,中文,,0,0,0,,我不相信会这样的
Dialogue: 0,0:18:33.13,0:18:38.37,英文,,0,0,0,,I think the compiler is smart enough to say, hey, you didn't define this variable before you tried to use it.
Dialogue: 0,0:18:33.13,0:18:38.37,中文,,0,0,0,,我认为编译器足够聪明 会说：“嘿 你在尝试使用这个变量之前没有定义它 ”
Dialogue: 0,0:18:38.37,0:18:40.37,英文,,0,0,0,,But I'm not sure.
Dialogue: 0,0:18:38.37,0:18:40.37,中文,,0,0,0,,但我不太确定
Dialogue: 0,0:18:40.37,0:18:42.09,英文,,0,0,0,,I would have to check.
Dialogue: 0,0:18:40.37,0:18:42.09,中文,,0,0,0,,我得检查一下
Dialogue: 0,0:18:42.09,0:18:42.19,英文,,0,0,0,,Yeah?
Dialogue: 0,0:18:42.09,0:18:42.19,中文,,0,0,0,,是吗
Dialogue: 0,0:18:42.19,0:19:06.12,英文,,0,0,0,,This is a little different question and topic.
Dialogue: 0,0:18:42.19,0:19:06.12,中文,,0,0,0,,这是一个有点不同的问题和话题
Dialogue: 0,0:19:06.12,0:19:15.21,英文,,0,0,0,,So functions that return void but could also return something, those do not exist in Java.
Dialogue: 0,0:19:06.12,0:19:15.21,中文,,0,0,0,,因此返回void但也可能返回某些东西的函数在Java中不存在
Dialogue: 0,0:19:15.21,0:19:17.38,英文,,0,0,0,,Void is not null.
Dialogue: 0,0:19:15.21,0:19:17.38,中文,,0,0,0,,Void不是空的
Dialogue: 0,0:19:17.38,0:19:25.28,英文,,0,0,0,,Null is specifically something that exists in all types, which refers to something that doesn't exist.
Dialogue: 0,0:19:17.38,0:19:25.28,中文,,0,0,0,,Null是所有类型中都存在的东西 指的是不存在的东西
Dialogue: 0,0:19:25.28,0:19:30.59,英文,,0,0,0,,That is different from void, which is where you're not returning anything at all.
Dialogue: 0,0:19:25.28,0:19:30.59,中文,,0,0,0,,这与void不同 void表示你根本没有返回任何东西
Dialogue: 0,0:19:30.59,0:19:36.03,英文,,0,0,0,,So there's a difference between returning something that is definitely not exist yet and returning nothing at all.
Dialogue: 0,0:19:30.59,0:19:36.03,中文,,0,0,0,,返回一个肯定不存在的东西和根本不返回任何东西之间是有区别的
Dialogue: 0,0:19:36.03,0:19:36.21,英文,,0,0,0,,Yeah.
Dialogue: 0,0:19:36.03,0:19:36.21,中文,,0,0,0,,是的
Dialogue: 0,0:19:36.21,0:20:10.58,英文,,0,0,0,,Yes?
Dialogue: 0,0:19:36.21,0:20:10.58,中文,,0,0,0,,是吗
Dialogue: 0,0:20:10.58,0:20:16.93,英文,,0,0,0,,No, this is just going to be a syntax error, because you can't typecast the type you're defining something as.
Dialogue: 0,0:20:10.58,0:20:16.93,中文,,0,0,0,,不 这只会导致语法错误 因为你不能将类型强制转换为你正在定义的类型
Dialogue: 0,0:20:16.93,0:20:35.10,英文,,0,0,0,,Yeah?
Dialogue: 0,0:20:16.93,0:20:35.10,中文,,0,0,0,,是吗
Dialogue: 0,0:20:35.10,0:20:40.75,英文,,0,0,0,,Yes, if list or a parent of list had a resize method, then that would work.
Dialogue: 0,0:20:35.10,0:20:40.75,中文,,0,0,0,,是的 如果列表或列表的父类具有调整大小的方法 那么就可以起作用
Dialogue: 0,0:20:40.75,0:20:41.41,英文,,0,0,0,,Yeah.
Dialogue: 0,0:20:40.75,0:20:41.41,中文,,0,0,0,,是的
Dialogue: 0,0:20:41.41,0:20:48.61,英文,,0,0,0,,But because list doesn't have a resize method itself, you would need to do the typecast to say that, yes, this is specifically an ArrayList.
Dialogue: 0,0:20:41.41,0:20:48.61,中文,,0,0,0,,但是因为列表本身没有调整大小的方法 所以你需要进行类型转换来说明 是的 这确切地是一个 ArrayList
Dialogue: 0,0:20:48.61,0:20:52.23,英文,,0,0,0,,And ArrayList can do something that normal list can't do.
Dialogue: 0,0:20:48.61,0:20:52.23,中文,,0,0,0,,而 ArrayList 可以做一些普通列表不能做的事情
Dialogue: 0,0:20:52.23,0:20:56.04,英文,,0,0,0,,Yeah.
Dialogue: 0,0:20:52.23,0:20:56.04,中文,,0,0,0,,是的
Dialogue: 0,0:20:56.04,0:21:01.48,英文,,0,0,0,,So as it turns out, we'll discuss this more when we get to 61C.
Dialogue: 0,0:20:56.04,0:21:01.48,中文,,0,0,0,,事实证明 当我们到达 61C 时 我们会更详细地讨论这个问题
Dialogue: 0,0:21:01.48,0:21:06.94,英文,,0,0,0,,But once it does this, it'll actually try to rewrite your code in a way that's more computer-friendly.
Dialogue: 0,0:21:01.48,0:21:06.94,中文,,0,0,0,,但一旦它这样做 它实际上会尝试以更适合计算机的方式重写你的代码
Dialogue: 0,0:21:06.94,0:21:10.02,英文,,0,0,0,,It turns it into what we call an assembly language.
Dialogue: 0,0:21:06.94,0:21:10.02,中文,,0,0,0,,它将其转换为我们称之为汇编语言的东西
Dialogue: 0,0:21:10.02,0:21:14.92,英文,,0,0,0,,And that is an easier programming language for your computer to understand.
Dialogue: 0,0:21:10.02,0:21:14.92,中文,,0,0,0,,这是一种计算机更容易理解的编程语言
Dialogue: 0,0:21:14.92,0:21:21.22,英文,,0,0,0,,Now, normally, this translation thing only happens once over the course of, like, any time that you run your code.
Dialogue: 0,0:21:14.92,0:21:21.22,中文,,0,0,0,,现在 通常情况下 这种翻译只会在你运行代码的任何时候发生一次
Dialogue: 0,0:21:21.22,0:21:30.05,英文,,0,0,0,,The main difference between how you work on IntelliJ is that every time you press the play button, it recompiles, because you're likely changing your code and making, like, changes.
Dialogue: 0,0:21:21.22,0:21:30.05,中文,,0,0,0,,在IntelliJ上工作的主要区别在于 每次按下播放按钮时 它都会重新编译 因为你可能正在更改代码并进行更改
Dialogue: 0,0:21:30.05,0:21:34.23,英文,,0,0,0,,Once you actually, like, publish your code, it's compiled once, and that's it.
Dialogue: 0,0:21:30.05,0:21:34.23,中文,,0,0,0,,一旦你真正发布代码 它就会被编译一次 然后就完成了
Dialogue: 0,0:21:34.23,0:21:36.29,英文,,0,0,0,,It doesn't get compiled more often than that.
Dialogue: 0,0:21:34.23,0:21:36.29,中文,,0,0,0,,它不会比那更频繁地被编译
Dialogue: 0,0:21:36.29,0:21:42.91,英文,,0,0,0,,So these checks only happen at this, like, early stage during this compilation.
Dialogue: 0,0:21:36.29,0:21:42.91,中文,,0,0,0,,这些检查只会在这个编译的早期阶段发生
Dialogue: 0,0:21:42.91,0:21:45.18,英文,,0,0,0,,Now, when you run your code,
Dialogue: 0,0:21:42.91,0:21:45.18,中文,,0,0,0,,现在 当你运行你的代码时
Dialogue: 0,0:21:45.18,0:21:49.82,英文,,0,0,0,,It'll actually run the program, and it'll rely on whatever the dynamic type of the object.
Dialogue: 0,0:21:45.18,0:21:49.82,中文,,0,0,0,,它实际上会运行程序 并依赖于对象的动态类型
Dialogue: 0,0:21:49.82,0:21:53.94,英文,,0,0,0,,So when you actually run the code, you can see what type of an object it actually is.
Dialogue: 0,0:21:49.82,0:21:53.94,中文,,0,0,0,,当你真正运行代码时 你可以看到它实际上是什么类型的对象
Dialogue: 0,0:21:53.94,0:22:00.10,英文,,0,0,0,,And it can check to see if any type cast or anything is broken.
Dialogue: 0,0:21:53.94,0:22:00.10,中文,,0,0,0,,它可以检查是否有任何类型转换或其他问题
Dialogue: 0,0:22:00.10,0:22:06.32,英文,,0,0,0,,If it calls a function, then it will use the method of the same name in the dynamic types class.
Dialogue: 0,0:22:00.10,0:22:06.32,中文,,0,0,0,,如果它调用一个函数 那么它将使用动态类型类中相同名称的方法
Dialogue: 0,0:22:06.32,0:22:12.18,英文,,0,0,0,,So even if you type cast something to be a list, if that something is actually an ArrayList,
Dialogue: 0,0:22:06.32,0:22:12.18,中文,,0,0,0,,即使你将某些东西强制转换为列表 如果那个东西实际上是一个ArrayList
Dialogue: 0,0:22:12.18,0:22:17.18,英文,,0,0,0,,then it will do the ArrayList-specific behavior, not the list behavior.
Dialogue: 0,0:22:12.18,0:22:17.18,中文,,0,0,0,,那么它将执行ArrayList特定的行为 而不是列表行为
Dialogue: 0,0:22:17.18,0:22:24.56,英文,,0,0,0,,Now, if it has multiple methods of the same name, like a method is overloaded, then it'll pick the one whose signature matches.
Dialogue: 0,0:22:17.18,0:22:24.56,中文,,0,0,0,,现在 如果它有多个同名的方法 就像方法被重载了一样 那么它会选择与签名匹配的那个
Dialogue: 0,0:22:24.56,0:22:39.59,英文,,0,0,0,,So if you have two methods here, like, I think, a max function and a max comparator.
Dialogue: 0,0:22:24.56,0:22:39.59,中文,,0,0,0,,如果你在这里有两个方法 比如 我想 一个是最大函数 一个是最大比较器
Dialogue: 0,0:22:39.59,0:22:44.83,英文,,0,0,0,,then it'll look to see which one best matches the code that you wrote.
Dialogue: 0,0:22:39.59,0:22:44.83,中文,,0,0,0,,然后它会查看哪个最能匹配你写的代码
Dialogue: 0,0:22:44.83,0:22:52.62,英文,,0,0,0,,If you write, let's say, integer i equals a dot max, like this, then it'll see that, yes,
Dialogue: 0,0:22:44.83,0:22:52.62,中文,,0,0,0,,如果你写 比如 int i = a . max 像这样
Dialogue: 0,0:22:52.62,0:23:00.62,英文,,0,0,0,,a dot max takes in zero arguments, so it'll pick the max with no arguments in it.
Dialogue: 0,0:22:52.62,0:23:00.62,中文,,0,0,0,,那么它会看到 a . max 不带任何参数 所以它会选择没有参数的 max
Dialogue: 0,0:23:00.62,0:23:07.99,英文,,0,0,0,,If you see max comparator, then it'll be, Like this, something like this.
Dialogue: 0,0:23:00.62,0:23:07.99,中文,,0,0,0,,如果你看到最大比较器 就像这样 类似这样
Dialogue: 0,0:23:07.99,0:23:13.41,英文,,0,0,0,,If you have this, then you'll see that the closest match is the comparative version.
Dialogue: 0,0:23:07.99,0:23:13.41,中文,,0,0,0,,如果你有这个 那么你会看到最接近的匹配是比较版本
Dialogue: 0,0:23:13.41,0:23:14.57,英文,,0,0,0,,Yeah.
Dialogue: 0,0:23:13.41,0:23:14.57,中文,,0,0,0,,是的
Dialogue: 0,0:23:14.57,0:23:22.64,英文,,0,0,0,,Now, it's actually kind of complicated what happens if you have multiple inputs or if you have inputs that are not the direct subtypes.
Dialogue: 0,0:23:14.57,0:23:22.64,中文,,0,0,0,,现在 如果你有多个输入或者输入不是直接的子类型 情况就会变得有些复杂
Dialogue: 0,0:23:22.64,0:23:24.48,英文,,0,0,0,,We kind of say that it's too complicated.
Dialogue: 0,0:23:22.64,0:23:24.48,中文,,0,0,0,,我们有点说这太复杂了
Dialogue: 0,0:23:24.48,0:23:26.64,英文,,0,0,0,,We're not going to cover it here.
Dialogue: 0,0:23:24.48,0:23:26.64,中文,,0,0,0,,我们不打算在这里涉及这个
Dialogue: 0,0:23:26.64,0:23:29.33,英文,,0,0,0,,We're not going to test that kind of thing.
Dialogue: 0,0:23:26.64,0:23:29.33,中文,,0,0,0,,我们不打算测试那种东西
Dialogue: 0,0:23:29.33,0:23:32.73,英文,,0,0,0,,Yeah.
Dialogue: 0,0:23:29.33,0:23:32.73,中文,,0,0,0,,是的
Dialogue: 0,0:23:32.73,0:23:36.69,英文,,0,0,0,,It also finds any illegal actions that can't be found by the static type analysis.
Dialogue: 0,0:23:32.73,0:23:36.69,中文,,0,0,0,,它还会找到任何静态类型分析找不到的任何非法操作
Dialogue: 0,0:23:36.69,0:23:49.57,英文,,0,0,0,,So if you remember here, like we said, like this.
Dialogue: 0,0:23:36.69,0:23:49.57,中文,,0,0,0,,记得这里 就像我们说的 就像这样
Dialogue: 0,0:23:49.57,0:23:54.25,英文,,0,0,0,,Like, this line would have worked through static type code.
Dialogue: 0,0:23:49.57,0:23:54.25,中文,,0,0,0,,比如 这行会在静态类型代码中起作用
Dialogue: 0,0:23:54.25,0:24:00.03,英文,,0,0,0,,But it's not going to pass the dynamic type check, because it'll see that a cat is not a list.
Dialogue: 0,0:23:54.25,0:24:00.03,中文,,0,0,0,,但它不会通过动态类型检查 因为它会看到 Cat 不是列表
Dialogue: 0,0:24:00.03,0:24:06.54,英文,,0,0,0,,And therefore, it is going to complain, hey, you lied to me when you said that this cat was a list, when this object was a list.
Dialogue: 0,0:24:00.03,0:24:06.54,中文,,0,0,0,,因此 它会抱怨 嘿 你骗了我 你说这只 Cat 是个列表 而这个对象是个列表
Dialogue: 0,0:24:06.54,0:24:12.52,英文,,0,0,0,,And if you lie to the compiler, then the runtime is going to crash the program for you.
Dialogue: 0,0:24:06.54,0:24:12.52,中文,,0,0,0,,如果你欺骗编译器 运行时会为你崩溃程序
Dialogue: 0,0:24:12.52,0:24:13.80,英文,,0,0,0,,Yeah.
Dialogue: 0,0:24:12.52,0:24:13.80,中文,,0,0,0,,是的
Dialogue: 0,0:24:13.80,0:24:16.39,英文,,0,0,0,,It does not like to be lied to.
Dialogue: 0,0:24:13.80,0:24:16.39,中文,,0,0,0,,它不喜欢被欺骗
Dialogue: 0,0:24:16.39,0:24:25.71,英文,,0,0,0,,It will not do what you like if you lie to the code.
Dialogue: 0,0:24:16.39,0:24:25.71,中文,,0,0,0,,如果你对代码撒谎 它就不会按你的意愿执行
Dialogue: 0,0:24:25.71,0:24:37.13,英文,,0,0,0,,Other than that, any other errors that can't be caught during compile time, like if you're accessing an array out of bounds error, if you run out of memory, all those things get caught during runtime.
Dialogue: 0,0:24:25.71,0:24:37.13,中文,,0,0,0,,除此之外 在编译时无法捕获的任何其他错误 比如访问数组越界错误 内存耗尽等 所有这些问题都会在运行时捕获到
Dialogue: 0,0:24:37.13,0:24:41.19,英文,,0,0,0,,And these are what we consider to be the runtime errors.
Dialogue: 0,0:24:37.13,0:24:41.19,中文,,0,0,0,,这些就是我们认为的运行时错误
Dialogue: 0,0:24:41.19,0:24:45.49,英文,,0,0,0,,Now, we do consider that the hardest part of DMS is out of scope for this semester.
Dialogue: 0,0:24:41.19,0:24:45.49,中文,,0,0,0,,现在 我们认为 DMS 最困难的部分超出了本学期的范围
Dialogue: 0,0:24:45.49,0:24:47.67,英文,,0,0,0,,So we won't override any overloaded methods.
Dialogue: 0,0:24:45.49,0:24:47.67,中文,,0,0,0,,我们不会重写任何已重载的方法
Dialogue: 0,0:24:47.67,0:24:50.88,英文,,0,0,0,,We won't have ambiguous overloads.
Dialogue: 0,0:24:47.67,0:24:50.88,中文,,0,0,0,,我们不会有模糊的重载
Dialogue: 0,0:24:50.88,0:24:56.14,英文,,0,0,0,,Some of the things I say on this slide do only apply given these simplifications.
Dialogue: 0,0:24:50.88,0:24:56.14,中文,,0,0,0,,这张幻灯片上我说的一些事情只适用于这些简化情况
Dialogue: 0,0:24:56.14,0:25:00.82,英文,,0,0,0,,Like when I say that you use the method of the same name in the dynamic types class,
Dialogue: 0,0:24:56.14,0:25:00.82,中文,,0,0,0,,就像我说的 你在动态类型类中使用同名方法的方法
Dialogue: 0,0:25:00.82,0:25:03.85,英文,,0,0,0,,That's not always true.
Dialogue: 0,0:25:00.82,0:25:03.85,中文,,0,0,0,,这并不总是正确的
Dialogue: 0,0:25:03.85,0:25:12.86,英文,,0,0,0,,Sometimes if you have an overridden, overloaded method, you end up getting this weird thing where it uses a different method than what you'd expect.
Dialogue: 0,0:25:03.85,0:25:12.86,中文,,0,0,0,,有时如果你有一个被覆盖、重载的方法 最终会出现这种奇怪的情况 它使用的方法与你期望的不同
Dialogue: 0,0:25:12.86,0:25:14.40,英文,,0,0,0,,But you don't need to worry about that.
Dialogue: 0,0:25:12.86,0:25:14.40,中文,,0,0,0,,但你不需要担心这个
Dialogue: 0,0:25:14.40,0:25:15.50,英文,,0,0,0,,It's way too complicated.
Dialogue: 0,0:25:14.40,0:25:15.50,中文,,0,0,0,,这太复杂了
Dialogue: 0,0:25:15.50,0:25:18.16,英文,,0,0,0,,It frankly does not help you beyond Java.
Dialogue: 0,0:25:15.50,0:25:18.16,中文,,0,0,0,,它实际上对你除了 Java 之外没有帮助
Dialogue: 0,0:25:18.16,0:25:20.62,英文,,0,0,0,,And you shouldn't be writing code that ends up doing that anyway.
Dialogue: 0,0:25:18.16,0:25:20.62,中文,,0,0,0,,而且你也不应该写最终会出现这种情况的代码
Dialogue: 0,0:25:20.62,0:25:51.38,英文,,0,0,0,,Yes?
Dialogue: 0,0:25:20.62,0:25:51.38,中文,,0,0,0,,好吗
Dialogue: 0,0:25:51.38,0:26:00.95,英文,,0,0,0,,So let's say that list has, I don't know, what's something that both a cat and a list does?
Dialogue: 0,0:25:51.38,0:26:00.95,中文,,0,0,0,,那么我们来说一下 列表有 我不知道  Cat 和列表都有什么共同点呢
Dialogue: 0,0:26:00.95,0:26:04.25,英文,,0,0,0,,Size.
Dialogue: 0,0:26:00.95,0:26:04.25,中文,,0,0,0,,大小
Dialogue: 0,0:26:04.25,0:26:05.25,英文,,0,0,0,,All right.
Dialogue: 0,0:26:05.25,0:26:07.20,英文,,0,0,0,,All right.
Dialogue: 0,0:26:07.20,0:26:11.54,英文,,0,0,0,,So this is still going to complain to you.
Dialogue: 0,0:26:07.20,0:26:11.54,中文,,0,0,0,,这仍然会向你抱怨
Dialogue: 0,0:26:11.54,0:26:16.14,英文,,0,0,0,,It's the typecast itself that actually does the complaining.
Dialogue: 0,0:26:11.54,0:26:16.14,中文,,0,0,0,,实际上是类型转换本身在抱怨
Dialogue: 0,0:26:16.14,0:26:22.04,英文,,0,0,0,,So it doesn't even check the size method, or the size attribute.
Dialogue: 0,0:26:16.14,0:26:22.04,中文,,0,0,0,,它甚至不检查大小方法 或大小属性
Dialogue: 0,0:26:22.04,0:26:23.34,英文,,0,0,0,,Yeah.
Dialogue: 0,0:26:22.04,0:26:23.34,中文,,0,0,0,,是的
Dialogue: 0,0:26:23.34,0:26:24.26,英文,,0,0,0,,Yes.
Dialogue: 0,0:26:23.34,0:26:24.26,中文,,0,0,0,,是的
Dialogue: 0,0:26:24.26,0:26:39.85,英文,,0,0,0,,Yes, this line will error, unless cat is an extension of list somehow.
Dialogue: 0,0:26:24.26,0:26:39.85,中文,,0,0,0,,是的 这行代码会出错 除非 Cat 以某种方式是 list 的扩展
Dialogue: 0,0:26:39.85,0:26:42.66,英文,,0,0,0,,People on Zoom want you to repeat the question before you answer.
Dialogue: 0,0:26:39.85,0:26:42.66,中文,,0,0,0,,在 Zoom 上的人希望你在回答之前重复问题
Dialogue: 0,0:26:42.66,0:26:43.32,英文,,0,0,0,,Yes, yes.
Dialogue: 0,0:26:42.66,0:26:43.32,中文,,0,0,0,,是的 是的
Dialogue: 0,0:26:43.32,0:26:51.00,英文,,0,0,0,,So that question was kind of like, what happens if we have some function size that's both a cat and a list operation?
Dialogue: 0,0:26:43.32,0:26:51.00,中文,,0,0,0,,这个问题有点像 如果我们有一个既是 Cat 又是列表操作的函数大小会发生什么
Dialogue: 0,0:26:51.00,0:26:52.20,英文,,0,0,0,,Is this still going to work?
Dialogue: 0,0:26:51.00,0:26:52.20,中文,,0,0,0,,这还能行吗
Dialogue: 0,0:26:52.20,0:26:54.17,英文,,0,0,0,,No, it's not going to work.
Dialogue: 0,0:26:52.20,0:26:54.17,中文,,0,0,0,,不 不会的
Dialogue: 0,0:26:54.17,0:26:56.49,英文,,0,0,0,,Yeah.
Dialogue: 0,0:26:54.17,0:26:56.49,中文,,0,0,0,,是的
Dialogue: 0,0:26:56.49,0:27:06.60,英文,,0,0,0,,Yes, was that a question back there?
Dialogue: 0,0:26:56.49,0:27:06.60,中文,,0,0,0,,是的 刚才那是个问题吗
Dialogue: 0,0:27:06.60,0:27:15.58,英文,,0,0,0,,If you're writing your own
Dialogue: 0,0:27:06.60,0:27:15.58,中文,,0,0,0,,如果你正在编写自己的
Dialogue: 0,0:27:15.58,0:27:34.07,英文,,0,0,0,,If you're writing your own class and you want it to be cast into an array or?
Dialogue: 0,0:27:15.58,0:27:34.07,中文,,0,0,0,,如果你正在编写自己的类 并且想要将其转换为数组或者
Dialogue: 0,0:27:34.07,0:27:39.92,英文,,0,0,0,,If you want to write something that can be cast into a list, what do you do?
Dialogue: 0,0:27:34.07,0:27:39.92,中文,,0,0,0,,如果你想要编写能够转换为列表的东西 你该怎么办
Dialogue: 0,0:27:39.92,0:27:46.66,英文,,0,0,0,,Is that what you're?
Dialogue: 0,0:27:39.92,0:27:46.66,中文,,0,0,0,,那就是你要的吗
Dialogue: 0,0:27:46.66,0:27:51.20,英文,,0,0,0,,How do you turn a cat into a list?
Dialogue: 0,0:27:46.66,0:27:51.20,中文,,0,0,0,,你怎么把 Cat 变成列表
Dialogue: 0,0:27:51.20,0:27:53.05,英文,,0,0,0,,Sorry, I cannot.
Dialogue: 0,0:27:51.20,0:27:53.05,中文,,0,0,0,,抱歉 我做不到
Dialogue: 0,0:27:53.05,0:27:55.07,英文,,0,0,0,,Huh?
Dialogue: 0,0:27:53.05,0:27:55.07,中文,,0,0,0,,嗯
Dialogue: 0,0:27:55.07,0:28:00.01,英文,,0,0,0,,The body parts.
Dialogue: 0,0:27:55.07,0:28:00.01,中文,,0,0,0,,主体部位
Dialogue: 0,0:28:00.01,0:28:05.79,英文,,0,0,0,,Why are you turning your cat into a list of body parts?
Dialogue: 0,0:28:00.01,0:28:05.79,中文,,0,0,0,,为什么要把你的 Cat 变成主体部位的列表
Dialogue: 0,0:28:05.79,0:28:16.01,英文,,0,0,0,,Please do not turn your cat into a list of body parts.
Dialogue: 0,0:28:05.79,0:28:16.01,中文,,0,0,0,,请不要把你的 Cat 变成主体部位的列表
Dialogue: 0,0:28:16.01,0:28:29.86,英文,,0,0,0,,You would probably need a function to do this, like within cat public list parts.
Dialogue: 0,0:28:16.01,0:28:29.86,中文,,0,0,0,,你可能需要一个函数来做这个 就像在 Cat public list parts 里面一样
Dialogue: 0,0:28:29.86,0:28:41.02,英文,,0,0,0,,And then you would do like new cat, new cat dot parts.
Dialogue: 0,0:28:29.86,0:28:41.02,中文,,0,0,0,,然后你会像 new Cat, new Cat dot parts 这样做
Dialogue: 0,0:28:41.02,0:28:45.09,英文,,0,0,0,,Like this is going to be allowed, I guess,
Dialogue: 0,0:28:41.02,0:28:45.09,中文,,0,0,0,,像这样应该是被允许的 我猜
Dialogue: 0,0:28:45.09,0:28:49.91,英文,,0,0,0,,But do not do this.
Dialogue: 0,0:28:45.09,0:28:49.91,中文,,0,0,0,,但不要这样做
Dialogue: 0,0:28:49.91,0:28:53.95,英文,,0,0,0,,Yeah.
Dialogue: 0,0:28:49.91,0:28:53.95,中文,,0,0,0,,是的
Dialogue: 0,0:28:53.95,0:28:58.16,英文,,0,0,0,,Oh, no.
Dialogue: 0,0:28:53.95,0:28:58.16,中文,,0,0,0,,哦 不
Dialogue: 0,0:28:58.16,0:29:04.10,英文,,0,0,0,,Anyway.
Dialogue: 0,0:28:58.16,0:29:04.10,中文,,0,0,0,,总之
Dialogue: 0,0:29:04.10,0:29:06.50,英文,,0,0,0,,Anyone have any questions on this?
Dialogue: 0,0:29:04.10,0:29:06.50,中文,,0,0,0,,有人对这有问题吗
Dialogue: 0,0:29:06.50,0:29:11.02,英文,,0,0,0,,What time is it right now?
Dialogue: 0,0:29:06.50,0:29:11.02,中文,,0,0,0,,现在是几点了
Dialogue: 0,0:29:11.02,0:29:11.06,英文,,0,0,0,,138.
Dialogue: 0,0:29:11.02,0:29:11.06,中文,,0,0,0,,138
Dialogue: 0,0:29:11.06,0:29:16.32,英文,,0,0,0,,Do you all want to go over an example, or do you want to continue to the next topic?
Dialogue: 0,0:29:11.06,0:29:16.32,中文,,0,0,0,,你们想讲解一个例子 还是想继续下一个主题
Dialogue: 0,0:29:16.32,0:29:18.20,英文,,0,0,0,,Who wants to continue?
Dialogue: 0,0:29:16.32,0:29:18.20,中文,,0,0,0,,谁想继续
Dialogue: 0,0:29:18.20,0:29:19.68,英文,,0,0,0,,Who wants next topic?
Dialogue: 0,0:29:18.20,0:29:19.68,中文,,0,0,0,,谁想要下一个主题
Dialogue: 0,0:29:19.68,0:29:22.02,英文,,0,0,0,,Sorry, that's the same thing.
Dialogue: 0,0:29:19.68,0:29:22.02,中文,,0,0,0,,抱歉 那是一样的东西
Dialogue: 0,0:29:22.02,0:29:24.48,英文,,0,0,0,,Who wants next topic?
Dialogue: 0,0:29:22.02,0:29:24.48,中文,,0,0,0,,谁想要下一个话题
Dialogue: 0,0:29:24.48,0:29:28.24,英文,,0,0,0,,Who wants example?
Dialogue: 0,0:29:24.48,0:29:28.24,中文,,0,0,0,,谁要举例子
Dialogue: 0,0:29:28.24,0:29:31.04,英文,,0,0,0,,Seems like next topic is what I saw more.
Dialogue: 0,0:29:28.24,0:29:31.04,中文,,0,0,0,,似乎下一个话题是我看到更多的
Dialogue: 0,0:29:31.04,0:29:37.51,英文,,0,0,0,,All right.
Dialogue: 0,0:29:37.51,0:29:42.57,英文,,0,0,0,,So I think the next topic that a lot of people were asking for were lists.
Dialogue: 0,0:29:37.51,0:29:42.57,中文,,0,0,0,,我认为很多人在问的下一个话题是列表
Dialogue: 0,0:29:42.57,0:29:45.65,英文,,0,0,0,,So here's the different types of lists that we have.
Dialogue: 0,0:29:42.57,0:29:45.65,中文,,0,0,0,,这里是我们有的不同类型的列表
Dialogue: 0,0:29:45.65,0:29:48.16,英文,,0,0,0,,The main types we have are linked lists and array lists.
Dialogue: 0,0:29:45.65,0:29:48.16,中文,,0,0,0,,我们主要有链表和数组列表
Dialogue: 0,0:29:48.16,0:29:51.52,英文,,0,0,0,,So for linked lists, we have a few options.
Dialogue: 0,0:29:48.16,0:29:51.52,中文,,0,0,0,,对于链表 我们有几个选择
Dialogue: 0,0:29:51.52,0:29:56.97,英文,,0,0,0,,So the first option was that original list version that we had, the int list.
Dialogue: 0,0:29:51.52,0:29:56.97,中文,,0,0,0,,第一个选择是我们原来的列表版本 即 int 列表
Dialogue: 0,0:29:56.97,0:30:03.26,英文,,0,0,0,,We called this a naked linked list because the type itself is deliberately recursive.
Dialogue: 0,0:29:56.97,0:30:03.26,中文,,0,0,0,,我们称之为裸链表 因为类型本身是故意递归的
Dialogue: 0,0:30:03.26,0:30:06.06,英文,,0,0,0,,It contained a value and then a pointer to the next element.
Dialogue: 0,0:30:03.26,0:30:06.06,中文,,0,0,0,,它包含一个值 然后是指向下一个元素的指针
Dialogue: 0,0:30:06.06,0:30:12.81,英文,,0,0,0,,It isn't actually used in practice too much, because it's not nice to use.
Dialogue: 0,0:30:06.06,0:30:12.81,中文,,0,0,0,,实际上它在实践中并没有被广泛使用 因为它不好用
Dialogue: 0,0:30:12.81,0:30:17.99,英文,,0,0,0,,If it only has a value and a next, it doesn't have a lot of nice features we have.
Dialogue: 0,0:30:12.81,0:30:17.99,中文,,0,0,0,,如果它只有一个值和一个下一个 那么它就没有我们拥有的许多好用的功能
Dialogue: 0,0:30:17.99,0:30:22.11,英文,,0,0,0,,For example, if you want to calculate the size, then you need to go through everything all at the same time.
Dialogue: 0,0:30:17.99,0:30:22.11,中文,,0,0,0,,例如 如果你想要计算大小 那么你需要同时遍历所有元素
Dialogue: 0,0:30:22.11,0:30:24.01,英文,,0,0,0,,It takes forever to do that.
Dialogue: 0,0:30:22.11,0:30:24.01,中文,,0,0,0,,做那件事情需要很长时间
Dialogue: 0,0:30:24.01,0:30:27.16,英文,,0,0,0,,Instead, we make our singly linked list.
Dialogue: 0,0:30:24.01,0:30:27.16,中文,,0,0,0,,相反 我们制作我们的单链表
Dialogue: 0,0:30:27.16,0:30:30.78,英文,,0,0,0,,We turn our naked linked list into an internal node class.
Dialogue: 0,0:30:27.16,0:30:30.78,中文,,0,0,0,,我们将裸链表转换为内部节点类
Dialogue: 0,0:30:30.78,0:30:36.52,英文,,0,0,0,,And then we add a bit more functionality on top of that to be list-specific things.
Dialogue: 0,0:30:30.78,0:30:36.52,中文,,0,0,0,,然后我们在其上添加更多功能以处理特定于列表的事物
Dialogue: 0,0:30:36.52,0:30:41.27,英文,,0,0,0,,So in a way, we're saying that a list isn't a value with its next.
Dialogue: 0,0:30:36.52,0:30:41.27,中文,,0,0,0,,因此 在某种程度上 我们在说列表不是一个具有其下一个的值
Dialogue: 0,0:30:41.27,0:30:47.43,英文,,0,0,0,,We're saying that a list is something that contains as many items as we want, a list of actual things.
Dialogue: 0,0:30:41.27,0:30:47.43,中文,,0,0,0,,我们在说列表是一个包含我们想要的任意数量项的东西 一个实际事物的列表
Dialogue: 0,0:30:47.43,0:30:55.19,英文,,0,0,0,,And then it's actually implemented by using a bunch of nodes which just point to the next item.
Dialogue: 0,0:30:47.43,0:30:55.19,中文,,0,0,0,,然后 通过使用一堆节点实际实现它 这些节点只是指向下一个项
Dialogue: 0,0:30:55.19,0:31:00.18,英文,,0,0,0,,It only lets you move forward in the list, so this is less useful than a doubly-linked list.
Dialogue: 0,0:30:55.19,0:31:00.18,中文,,0,0,0,,它只允许你在列表中向前移动 所以这比双向链表没那么有用
Dialogue: 0,0:31:00.18,0:31:04.30,英文,,0,0,0,,But it does use less memory, so it does have some niche use.
Dialogue: 0,0:31:00.18,0:31:04.30,中文,,0,0,0,,但它确实使用更少的内存 所以它确实有一些特定的用途
Dialogue: 0,0:31:04.30,0:31:06.20,英文,,0,0,0,,We also add a sentinel.
Dialogue: 0,0:31:04.30,0:31:06.20,中文,,0,0,0,,我们还添加了一个哨兵
Dialogue: 0,0:31:06.20,0:31:09.94,英文,,0,0,0,,That's kind of just some dummy node that doesn't do anything.
Dialogue: 0,0:31:06.20,0:31:09.94,中文,,0,0,0,,那只是一个不做任何事情的虚拟节点
Dialogue: 0,0:31:09.94,0:31:15.08,英文,,0,0,0,,It's just there to make sure we don't have to handle an empty list edge case.
Dialogue: 0,0:31:09.94,0:31:15.08,中文,,0,0,0,,它只是为了确保我们不必处理空列表的边缘情况
Dialogue: 0,0:31:15.08,0:31:17.54,英文,,0,0,0,,The doubly-linked list is the same thing as a singly-linked list.
Dialogue: 0,0:31:15.08,0:31:17.54,中文,,0,0,0,,双向链表和单向链表是一样的
Dialogue: 0,0:31:17.54,0:31:22.56,英文,,0,0,0,,The only difference is that we have a pointer to the previous element as well.
Dialogue: 0,0:31:17.54,0:31:22.56,中文,,0,0,0,,唯一的区别是我们还有一个指向前一个元素的指针
Dialogue: 0,0:31:22.56,0:31:25.08,英文,,0,0,0,,So that way, we can go forwards or backwards in our list.
Dialogue: 0,0:31:22.56,0:31:25.08,中文,,0,0,0,,这样我们可以在列表中前进或后退
Dialogue: 0,0:31:25.08,0:31:26.10,英文,,0,0,0,,We still have a sentinel.
Dialogue: 0,0:31:25.08,0:31:26.10,中文,,0,0,0,,我们仍然有一个哨兵
Dialogue: 0,0:31:26.10,0:31:27.76,英文,,0,0,0,,We still have pointers.
Dialogue: 0,0:31:26.10,0:31:27.76,中文,,0,0,0,,我们仍然有指针
Dialogue: 0,0:31:27.76,0:31:33.50,英文,,0,0,0,,It still has a node class that does this.
Dialogue: 0,0:31:27.76,0:31:33.50,中文,,0,0,0,,它仍然有一个执行这个操作的节点类
Dialogue: 0,0:31:33.50,0:31:37.28,英文,,0,0,0,,Other than that, it's largely the same as a singly-linked list.
Dialogue: 0,0:31:33.50,0:31:37.28,中文,,0,0,0,,除此之外 它基本上与单链表相同
Dialogue: 0,0:31:37.28,0:31:41.08,英文,,0,0,0,,Yes?
Dialogue: 0,0:31:37.28,0:31:41.08,中文,,0,0,0,,是的
Dialogue: 0,0:31:41.08,0:31:43.63,英文,,0,0,0,,Should we assume that it's always circular?
Dialogue: 0,0:31:41.08,0:31:43.63,中文,,0,0,0,,我们应该假设它总是循环的吗
Dialogue: 0,0:31:43.63,0:31:48.79,英文,,0,0,0,,Singly linked lists and doubly linked lists, the ones that we show generally, it will be circular.
Dialogue: 0,0:31:43.63,0:31:48.79,中文,,0,0,0,,单链表和双链表 通常我们展示的是循环的
Dialogue: 0,0:31:48.79,0:31:52.53,英文,,0,0,0,,If it doesn't specify, then you can ask.
Dialogue: 0,0:31:48.79,0:31:52.53,中文,,0,0,0,,如果没有具体说明 那么你可以问一下
Dialogue: 0,0:31:52.53,0:31:54.05,英文,,0,0,0,,Yeah.
Dialogue: 0,0:31:52.53,0:31:54.05,中文,,0,0,0,,嗯
Dialogue: 0,0:31:54.05,0:31:59.01,英文,,0,0,0,,So general rule of thumb is not to assume something unless it's written down.
Dialogue: 0,0:31:54.05,0:31:59.01,中文,,0,0,0,,一般的经验法则是不要假设某事除非它有书面说明
Dialogue: 0,0:31:59.01,0:32:03.55,英文,,0,0,0,,But this is close enough that you can request a clarification.
Dialogue: 0,0:31:59.01,0:32:03.55,中文,,0,0,0,,但这已经足够接近了 你可以要求澄清
Dialogue: 0,0:32:03.55,0:32:09.47,英文,,0,0,0,,And if it is meant to be circular and we didn't say it, then we will have to write down that, yes, it was circular.
Dialogue: 0,0:32:03.55,0:32:09.47,中文,,0,0,0,,如果它是循环的而我们没有说明 那么我们就必须写下来 是的 它是循环的
Dialogue: 0,0:32:09.47,0:32:15.12,英文,,0,0,0,,Yeah.
Dialogue: 0,0:32:09.47,0:32:15.12,中文,,0,0,0,,嗯
Dialogue: 0,0:32:15.12,0:32:17.48,英文,,0,0,0,,The other main type is the ArrayList.
Dialogue: 0,0:32:15.12,0:32:17.48,中文,,0,0,0,,另一种主要类型是 ArrayList
Dialogue: 0,0:32:17.48,0:32:20.00,英文,,0,0,0,,The ArrayList is ultimately based on what we call an array.
Dialogue: 0,0:32:17.48,0:32:20.00,中文,,0,0,0,,ArrayList 最终基于我们所谓的数组
Dialogue: 0,0:32:20.00,0:32:23.42,英文,,0,0,0,,That's kind of the default Java's version of a list.
Dialogue: 0,0:32:20.00,0:32:23.42,中文,,0,0,0,,这算是 Java 默认的列表版本
Dialogue: 0,0:32:23.42,0:32:28.66,英文,,0,0,0,,It's natively supported by Java, so it's not actually considered a class.
Dialogue: 0,0:32:23.42,0:32:28.66,中文,,0,0,0,,它是 Java 原生支持的 所以实际上并不被视为一个类
Dialogue: 0,0:32:28.66,0:32:37.40,英文,,0,0,0,,The main difference here is that you need to specify how long the list or the array is before you actually start using it.
Dialogue: 0,0:32:28.66,0:32:37.40,中文,,0,0,0,,这里的主要区别在于 在实际开始使用之前 你需要指定列表或数组的长度
Dialogue: 0,0:32:37.40,0:32:39.62,英文,,0,0,0,,And you can't change that length once you decide it.
Dialogue: 0,0:32:37.40,0:32:39.62,中文,,0,0,0,,一旦确定了长度 就无法更改它
Dialogue: 0,0:32:39.62,0:32:43.43,英文,,0,0,0,,So if you make an array of length 100, it is stuck at 100.
Dialogue: 0,0:32:39.62,0:32:43.43,中文,,0,0,0,,如果你创建了一个长度为 100 的数组 它就会固定在 100
Dialogue: 0,0:32:43.43,0:32:50.74,英文,,0,0,0,,You cannot make it larger at any point.
Dialogue: 0,0:32:43.43,0:32:50.74,中文,,0,0,0,,在任何时候都不能使它变得更大
Dialogue: 0,0:32:50.74,0:32:54.08,英文,,0,0,0,,Because it can't grow indefinitely, it's actually not considered a list.
Dialogue: 0,0:32:50.74,0:32:54.08,中文,,0,0,0,,因为它无法无限增长 实际上不被视为列表
Dialogue: 0,0:32:54.08,0:32:58.87,英文,,0,0,0,,A list, by definition, needs to be able to grow as much as possible.
Dialogue: 0,0:32:54.08,0:32:58.87,中文,,0,0,0,,列表根据定义需要能够尽可能地增长
Dialogue: 0,0:32:58.87,0:33:03.57,英文,,0,0,0,,Meanwhile, the ArrayList is kind of like the list type that uses that array in the back end.
Dialogue: 0,0:32:58.87,0:33:03.57,中文,,0,0,0,,与此同时 ArrayList 在后台使用数组的列表类型有点类似
Dialogue: 0,0:33:03.57,0:33:15.76,英文,,0,0,0,,The main difference is that you need to do that resize operation every now and then, so that when you run out of space in your length 100 array, you can increase to 200 array instead.
Dialogue: 0,0:33:03.57,0:33:15.76,中文,,0,0,0,,主要区别在于 你需要定期执行调整大小的操作 这样当你的长度为100的数组空间用尽时 可以增加到长度为200的数组
Dialogue: 0,0:33:15.76,0:33:26.07,英文,,0,0,0,,Now, if you set this up properly, if you multiplicatively increase the size, then on average, you get a constant time access per operation.
Dialogue: 0,0:33:15.76,0:33:26.07,中文,,0,0,0,,现在 如果你正确设置了这一点 如果你按乘法增加大小 那么平均而言 每个操作都可以在常数时间内访问
Dialogue: 0,0:33:26.07,0:33:29.75,英文,,0,0,0,,We'll discuss this more in detail in a few days.
Dialogue: 0,0:33:26.07,0:33:29.75,中文,,0,0,0,,我们将在几天内更详细地讨论这个
Dialogue: 0,0:33:29.75,0:33:35.66,英文,,0,0,0,,But effectively, for an array list, you can imagine that it takes a constant time to look for a particular item.
Dialogue: 0,0:33:29.75,0:33:35.66,中文,,0,0,0,,但实际上 对于一个数组列表 你可以想象查找特定项目需要常数时间
Dialogue: 0,0:33:35.66,0:33:38.48,英文,,0,0,0,,It takes a constant time to add a particular item.
Dialogue: 0,0:33:35.66,0:33:38.48,中文,,0,0,0,,添加特定项目需要常数时间
Dialogue: 0,0:33:38.48,0:33:42.56,英文,,0,0,0,,Meanwhile, for a linked list, it will take constant time to add items to the start and end.
Dialogue: 0,0:33:38.48,0:33:42.56,中文,,0,0,0,,与此同时 对于链表 将项目添加到开头和结尾需要常数时间
Dialogue: 0,0:33:42.56,0:33:45.00,英文,,0,0,0,,It will take linear time to look for a particular item.
Dialogue: 0,0:33:42.56,0:33:45.00,中文,,0,0,0,,查找特定项目需要线性时间
Dialogue: 0,0:33:45.00,0:33:51.94,英文,,0,0,0,,Like, if you have a million items in a linked list, then you have to go like 500,000 times to get to the middle.
Dialogue: 0,0:33:45.00,0:33:51.94,中文,,0,0,0,,比如 如果你有一个百万个项目的链表 那么你就要走大约 500,000 次才能到达中间
Dialogue: 0,0:33:51.94,0:33:55.98,英文,,0,0,0,,And that takes forever.
Dialogue: 0,0:33:51.94,0:33:55.98,中文,,0,0,0,,而那需要很长时间
Dialogue: 0,0:33:55.98,0:33:57.30,英文,,0,0,0,,All right.
Dialogue: 0,0:33:57.30,0:34:03.88,英文,,0,0,0,,Any questions here?
Dialogue: 0,0:33:57.30,0:34:03.88,中文,,0,0,0,,这里有什么问题吗
Dialogue: 0,0:34:03.88,0:34:06.11,英文,,0,0,0,,All right.
Dialogue: 0,0:34:06.11,0:34:08.29,英文,,0,0,0,,I'm actually going to go over these slides first.
Dialogue: 0,0:34:06.11,0:34:08.29,中文,,0,0,0,,我其实要先讲这些幻灯片
Dialogue: 0,0:34:08.29,0:34:11.65,英文,,0,0,0,,We'll see if we have time for examples after this.
Dialogue: 0,0:34:08.29,0:34:11.65,中文,,0,0,0,,看看我们之后是否有时间来做示例
Dialogue: 0,0:34:11.65,0:34:14.35,英文,,0,0,0,,I was going to ask, there were so many requests for comparators.
Dialogue: 0,0:34:11.65,0:34:14.35,中文,,0,0,0,,我本来想问 比较器的请求太多了
Dialogue: 0,0:34:14.35,0:34:17.01,英文,,0,0,0,,Do you want to try winging that instead of lists?
Dialogue: 0,0:34:14.35,0:34:17.01,中文,,0,0,0,,你想试试不用列表 直接试试吗
Dialogue: 0,0:34:17.01,0:34:17.69,英文,,0,0,0,,Yeah.
Dialogue: 0,0:34:17.01,0:34:17.69,中文,,0,0,0,,嗯
Dialogue: 0,0:34:17.69,0:34:20.05,英文,,0,0,0,,Well, that's why I'm also doing comparators, iterators at the end.
Dialogue: 0,0:34:17.69,0:34:20.05,中文,,0,0,0,,嗯 这就是为什么我最后也在做比较器、迭代器
Dialogue: 0,0:34:20.05,0:34:21.29,英文,,0,0,0,,Yeah.
Dialogue: 0,0:34:20.05,0:34:21.29,中文,,0,0,0,,是的
Dialogue: 0,0:34:21.29,0:34:25.97,英文,,0,0,0,,So the other major thing that I think some students were asking were public versus private.
Dialogue: 0,0:34:21.29,0:34:25.97,中文,,0,0,0,,我认为其他一些学生问的另一个主要问题是公有还是私有
Dialogue: 0,0:34:25.97,0:34:32.10,英文,,0,0,0,,I think largely this boils down to the fundamental philosophy of Java.
Dialogue: 0,0:34:25.97,0:34:32.10,中文,,0,0,0,,我觉得这在很大程度上归结为Java的基本理念
Dialogue: 0,0:34:32.10,0:34:43.72,英文,,0,0,0,,In Java, the main philosophy is that you try to restrict yourself as much as possible in what you allow yourself to do.
Dialogue: 0,0:34:32.10,0:34:43.72,中文,,0,0,0,,在Java中 主要的理念是尽量限制自己可以做的事情
Dialogue: 0,0:34:43.72,0:34:51.58,英文,,0,0,0,,So kind of the reasoning behind this is that the more things you let yourself do, the more complicated your code becomes.
Dialogue: 0,0:34:43.72,0:34:51.58,中文,,0,0,0,,因此 这背后的推理是 你允许自己做的事情越多 你的代码就会变得越复杂
Dialogue: 0,0:34:51.58,0:34:58.65,英文,,0,0,0,,If you have a dog class that can do 500 things, then you now have to think about all those 500 things that you could possibly do with a dog.
Dialogue: 0,0:34:51.58,0:34:58.65,中文,,0,0,0,,如果你有一个能做500件事的狗类 那么你现在就必须考虑所有这500件可能与Dog有关的事情
Dialogue: 0,0:34:58.65,0:35:09.87,英文,,0,0,0,,Instead, what I'm going to do is I'm going to restrict you to like five or six things that you're allowed to do, and everything else you don't get to touch.
Dialogue: 0,0:34:58.65,0:35:09.87,中文,,0,0,0,,相反 我要做的是限制你只能做五六件事情 其他所有的都不能动
Dialogue: 0,0:35:09.87,0:35:16.24,英文,,0,0,0,,So an example that we have that doesn't involve public versus private is actually this interface idea.
Dialogue: 0,0:35:09.87,0:35:16.24,中文,,0,0,0,,我们有一个例子 不涉及公共与私有 实际上是这个接口的概念
Dialogue: 0,0:35:16.24,0:35:23.98,英文,,0,0,0,,The list interface tells you everything that lists can do, but you still need a class to make the list.
Dialogue: 0,0:35:16.24,0:35:23.98,中文,,0,0,0,,列表接口告诉你列表可以做什么 但你仍然需要一个类来创建列表
Dialogue: 0,0:35:23.98,0:35:29.18,英文,,0,0,0,,You might think, well, why did I make this list interface in the first place if I needed to make an ArrayList class anyway?
Dialogue: 0,0:35:23.98,0:35:29.18,中文,,0,0,0,,你可能会想 我为什么要先创建这个列表接口 如果我还需要创建一个 ArrayList 类呢
Dialogue: 0,0:35:29.18,0:35:31.83,英文,,0,0,0,,It seems like it's a lot of extra work for no gain.
Dialogue: 0,0:35:29.18,0:35:31.83,中文,,0,0,0,,看起来好像是多余的工作 没有任何收益
Dialogue: 0,0:35:31.83,0:35:38.41,英文,,0,0,0,,The main reason why we do this is because, generally speaking, we only use the list operations on ArrayList.
Dialogue: 0,0:35:31.83,0:35:38.41,中文,,0,0,0,,我们这样做的主要原因是 一般来说 我们只在 ArrayList 上使用列表操作
Dialogue: 0,0:35:38.41,0:35:41.18,英文,,0,0,0,,We don't use ArrayList-specific stuff.
Dialogue: 0,0:35:38.41,0:35:41.18,中文,,0,0,0,,我们不使用特定于 ArrayList 的东西
Dialogue: 0,0:35:41.18,0:35:48.23,英文,,0,0,0,,So instead of writing ArrayList integer a equals new ArrayList, we write List integer a equals new ArrayList.
Dialogue: 0,0:35:41.18,0:35:48.23,中文,,0,0,0,,我们不是写 ArrayList <integer> a = new ArrayList<>( ) 而是写 List <integer> a= new ArrayList<>( )
Dialogue: 0,0:35:48.23,0:35:58.90,英文,,0,0,0,,That way, we restrict ourselves from using only the list-specific behaviors in a. We can't use resize, because resize is an ArrayList-specific behavior.
Dialogue: 0,0:35:48.23,0:35:58.90,中文,,0,0,0,,这样 我们限制了自己只能使用 a 中特定于列表的行为 我们不能使用 resize 因为 resize 是 ArrayList 特定的行为
Dialogue: 0,0:35:58.90,0:36:00.76,英文,,0,0,0,,Why is that better?
Dialogue: 0,0:35:58.90,0:36:00.76,中文,,0,0,0,,为什么这样做更好呢
Dialogue: 0,0:36:00.76,0:36:09.14,英文,,0,0,0,,Well, if I decide that, hey, I don't want to use an ArrayList this time, I want to use a LinkList instead, I can just change the single line here to be LinkList.
Dialogue: 0,0:36:00.76,0:36:09.14,中文,,0,0,0,,嗯 如果我决定 嘿 这次我不想使用 ArrayList 我想使用LinkedList 我只需在这里更改单行为 LinkedList
Dialogue: 0,0:36:09.14,0:36:15.11,英文,,0,0,0,,And that guarantees that the rest of my code works properly, because all the rest of my code only knows that A is a list.
Dialogue: 0,0:36:09.14,0:36:15.11,中文,,0,0,0,,这就保证了我的其余代码正常工作 因为我的所有其他代码只知道 A 是一个列表
Dialogue: 0,0:36:15.11,0:36:18.09,英文,,0,0,0,,It doesn't know that it's an ArrayList specifically.
Dialogue: 0,0:36:15.11,0:36:18.09,中文,,0,0,0,,它不知道它是一个 ArrayList 具体的
Dialogue: 0,0:36:18.09,0:36:27.05,英文,,0,0,0,,As long as you're not doing any typecasting and things like that, you can safely change your code from using ArrayList to using LinkList with only one line of code difference.
Dialogue: 0,0:36:18.09,0:36:27.05,中文,,0,0,0,,只要你不进行任何类型转换之类的操作 你就可以安全地将代码从使用 ArrayList 更改为使用 LinkedList 只需一行代码的区别
Dialogue: 0,0:36:27.05,0:36:31.50,英文,,0,0,0,,So this actually helps make your code a lot more flexible, easier to change in the future.
Dialogue: 0,0:36:27.05,0:36:31.50,中文,,0,0,0,,这实际上有助于使你的代码更加灵活 未来更容易更改
Dialogue: 0,0:36:31.50,0:36:36.62,英文,,0,0,0,,We highly recommend that you just restrict yourself as much as possible.
Dialogue: 0,0:36:31.50,0:36:36.62,中文,,0,0,0,,我们强烈建议你尽可能地限制自己
Dialogue: 0,0:36:36.62,0:36:43.72,英文,,0,0,0,,So if something is defined as an ArrayList, but you can define it as a list instead, define it as a list instead.
Dialogue: 0,0:36:36.62,0:36:43.72,中文,,0,0,0,,如果某物被定义为ArrayList 但你可以将其定义为列表 那就将其定义为列表
Dialogue: 0,0:36:43.72,0:36:49.47,英文,,0,0,0,,It'll make your code easier to change in the future.
Dialogue: 0,0:36:43.72,0:36:49.47,中文,,0,0,0,,这将使你的代码更容易在未来更改
Dialogue: 0,0:36:49.47,0:36:50.13,英文,,0,0,0,,Any questions?
Dialogue: 0,0:36:49.47,0:36:50.13,中文,,0,0,0,,有任何问题吗
Dialogue: 0,0:36:50.13,0:37:00.41,英文,,0,0,0,,Yeah.
Dialogue: 0,0:36:50.13,0:37:00.41,中文,,0,0,0,,是的
Dialogue: 0,0:37:00.41,0:37:05.30,英文,,0,0,0,,If you set it as an array list of static type, later you could treat it as a list.
Dialogue: 0,0:37:00.41,0:37:05.30,中文,,0,0,0,,如果你将其设置为静态类型的数组列表 稍后你可以将其视为列表
Dialogue: 0,0:37:05.30,0:37:07.64,英文,,0,0,0,,But that's riskier.
Dialogue: 0,0:37:05.30,0:37:07.64,中文,,0,0,0,,但那更冒险
Dialogue: 0,0:37:07.64,0:37:18.43,英文,,0,0,0,,The fact that we're defining it right here, right now, as a list, also tells me, through this line, that I'm only ever planning on using A as a list, not as an array list specific.
Dialogue: 0,0:37:07.64,0:37:18.43,中文,,0,0,0,,我们在这里定义它 现在就是一个列表 这也告诉我 通过这一行 我只计划将A用作列表 而不是数组列表特定的
Dialogue: 0,0:37:18.43,0:37:20.01,英文,,0,0,0,,Yeah.
Dialogue: 0,0:37:18.43,0:37:20.01,中文,,0,0,0,,是的
Dialogue: 0,0:37:20.01,0:37:22.75,英文,,0,0,0,,Part of writing code is communicating.
Dialogue: 0,0:37:20.01,0:37:22.75,中文,,0,0,0,,编写代码的一部分是沟通
Dialogue: 0,0:37:22.75,0:37:27.05,英文,,0,0,0,,So when you communicate, you want to make things as clear as possible.
Dialogue: 0,0:37:22.75,0:37:27.05,中文,,0,0,0,,当你沟通时 你希望尽可能地清晰明了
Dialogue: 0,0:37:27.05,0:37:35.81,英文,,0,0,0,,And even if you're writing code that only you will ever read, you are going to be communicating with yourself five days from now.
Dialogue: 0,0:37:27.05,0:37:35.81,中文,,0,0,0,,即使你写的代码只有你自己会读 五天后你也会与现在的自己交流
Dialogue: 0,0:37:35.81,0:37:40.32,英文,,0,0,0,,And five days from now, you're not going to remember anything you remember right now.
Dialogue: 0,0:37:35.81,0:37:40.32,中文,,0,0,0,,而五天后 你将不会记得现在记得的任何东西
Dialogue: 0,0:37:40.32,0:37:45.56,英文,,0,0,0,,So if you try to lie to your other people when you write your code, then you are lying to yourself in five days.
Dialogue: 0,0:37:40.32,0:37:45.56,中文,,0,0,0,,如果在编写代码时试图欺骗其他人 那么你其实是在五天前欺骗了自己
Dialogue: 0,0:37:45.56,0:37:49.23,英文,,0,0,0,,And you're going to hate that you lied to yourself five days ago.
Dialogue: 0,0:37:45.56,0:37:49.23,中文,,0,0,0,,而你将会讨厌自己在五天前的谎言
Dialogue: 0,0:37:49.23,0:37:50.53,英文,,0,0,0,,Don't lie to yourself.
Dialogue: 0,0:37:49.23,0:37:50.53,中文,,0,0,0,,不要欺骗自己
Dialogue: 0,0:37:50.53,0:37:54.28,英文,,0,0,0,,It's not good.
Dialogue: 0,0:37:50.53,0:37:54.28,中文,,0,0,0,,这不好
Dialogue: 0,0:37:54.28,0:37:57.84,英文,,0,0,0,,So public and private actually fall into this idea.
Dialogue: 0,0:37:54.28,0:37:57.84,中文,,0,0,0,,公有和私有实际上属于这个概念
Dialogue: 0,0:37:57.84,0:38:06.98,英文,,0,0,0,,With a public method or attribute, every single outside class that you see can change or see that variable.
Dialogue: 0,0:37:57.84,0:38:06.98,中文,,0,0,0,,对于公有方法或属性 你看到的每个外部类都可以更改或查看该变量
Dialogue: 0,0:38:06.98,0:38:13.96,英文,,0,0,0,,So that means that things like addFirst, addLastOnList, those are things that everyone outside the list class can see.
Dialogue: 0,0:38:06.98,0:38:13.96,中文,,0,0,0,,这意味着像addFirst、addLastOnList这样的东西是每个列表类外部的人都能看到的
Dialogue: 0,0:38:13.96,0:38:18.19,英文,,0,0,0,,Everyone outside the list class can use those.
Dialogue: 0,0:38:13.96,0:38:18.19,中文,,0,0,0,,列表类外的所有人都可以使用它们
Dialogue: 0,0:38:18.19,0:38:28.28,英文,,0,0,0,,Once you build the class and you build some stuff that uses that class, you can no longer change these public methods without risking an entirely broken code.
Dialogue: 0,0:38:18.19,0:38:28.28,中文,,0,0,0,,一旦你构建了类并构建了一些使用该类的东西 你就不能再更改这些公共方法 否则会导致整个代码完全崩溃
Dialogue: 0,0:38:28.28,0:38:29.96,英文,,0,0,0,,It's like a load-bearing wall, right?
Dialogue: 0,0:38:28.28,0:38:29.96,中文,,0,0,0,,就像承重墙一样 对吧
Dialogue: 0,0:38:29.96,0:38:41.85,英文,,0,0,0,,If you build a wall and you make it load-bearing and then you attach another floor on top of it, and you try to remake this wall and destroy it, your entire house collapses.
Dialogue: 0,0:38:29.96,0:38:41.85,中文,,0,0,0,,如果你建造一堵墙 并使其承重 然后在其上附加另一层 然后试图重建这堵墙并摧毁它 你的整个房子就会倒塌
Dialogue: 0,0:38:41.85,0:38:45.25,英文,,0,0,0,,So you can't change your public
Dialogue: 0,0:38:41.85,0:38:45.25,中文,,0,0,0,,你不能随意更改你的公共方法
Dialogue: 0,0:38:45.25,0:38:50.88,英文,,0,0,0,,You can't change your public methods as easily as others.
Dialogue: 0,0:38:45.25,0:38:50.88,中文,,0,0,0,,你不能像更改其他方法那样轻松地更改你的公共方法
Dialogue: 0,0:38:50.88,0:38:55.16,英文,,0,0,0,,Private methods are kind of like something that you do yourself internally.
Dialogue: 0,0:38:50.88,0:38:55.16,中文,,0,0,0,,私有方法有点像你自己内部做的事情
Dialogue: 0,0:38:55.16,0:38:58.32,英文,,0,0,0,,It's not anything that the outside classes can see.
Dialogue: 0,0:38:55.16,0:38:58.32,中文,,0,0,0,,外部类看不到这些东西
Dialogue: 0,0:38:58.32,0:39:02.05,英文,,0,0,0,,And because of that, you can basically change it however you want.
Dialogue: 0,0:38:58.32,0:39:02.05,中文,,0,0,0,,因此 你基本上可以随意更改它
Dialogue: 0,0:39:02.05,0:39:03.43,英文,,0,0,0,,It's like a non-load-bearing wall.
Dialogue: 0,0:39:02.05,0:39:03.43,中文,,0,0,0,,就像是一个非承重墙
Dialogue: 0,0:39:03.43,0:39:04.17,英文,,0,0,0,,You can destroy it.
Dialogue: 0,0:39:03.43,0:39:04.17,中文,,0,0,0,,你可以摧毁它
Dialogue: 0,0:39:04.17,0:39:05.55,英文,,0,0,0,,You can play around with it.
Dialogue: 0,0:39:04.17,0:39:05.55,中文,,0,0,0,,你可以随意操作它
Dialogue: 0,0:39:05.55,0:39:07.83,英文,,0,0,0,,You can just remake it into some other form.
Dialogue: 0,0:39:05.55,0:39:07.83,中文,,0,0,0,,你可以将其重新制作成其他形式
Dialogue: 0,0:39:07.83,0:39:08.95,英文,,0,0,0,,It doesn't matter.
Dialogue: 0,0:39:07.83,0:39:08.95,中文,,0,0,0,,这没关系
Dialogue: 0,0:39:08.95,0:39:12.51,英文,,0,0,0,,You can just safely change this as much as you want.
Dialogue: 0,0:39:08.95,0:39:12.51,中文,,0,0,0,,你可以放心地随意更改这个
Dialogue: 0,0:39:12.51,0:39:20.15,英文,,0,0,0,,As long as your code within your class works fine with it.
Dialogue: 0,0:39:12.51,0:39:20.15,中文,,0,0,0,,只要你类中的代码能正常工作
Dialogue: 0,0:39:20.15,0:39:23.68,英文,,0,0,0,,Now, there are actually two other levels that we don't cover in this class.
Dialogue: 0,0:39:20.15,0:39:23.68,中文,,0,0,0,,现在 实际上还有另外两个级别我们在这门课上没有涉及
Dialogue: 0,0:39:23.68,0:39:25.58,英文,,0,0,0,,We have protected and package private.
Dialogue: 0,0:39:23.68,0:39:25.58,中文,,0,0,0,,我们有protected和package private
Dialogue: 0,0:39:25.58,0:39:30.36,英文,,0,0,0,,Package private is kind of like what happens if you don't write protected or public or private or anything.
Dialogue: 0,0:39:25.58,0:39:30.36,中文,,0,0,0,,Package private有点像如果你不写protected或public或private或任何东西会发生什么
Dialogue: 0,0:39:30.36,0:39:36.60,英文,,0,0,0,,The main differences here is that protected actually allows subclasses to see your variable.
Dialogue: 0,0:39:30.36,0:39:36.60,中文,,0,0,0,,这里的主要区别在于protected实际上允许子类看到你的变量
Dialogue: 0,0:39:36.60,0:39:41.73,英文,,0,0,0,,And then package private allows classes within the same folder to see it.
Dialogue: 0,0:39:36.60,0:39:41.73,中文,,0,0,0,,然后package private允许同一文件夹中的类看到它
Dialogue: 0,0:39:41.73,0:39:54.25,英文,,0,0,0,,Yes?
Dialogue: 0,0:39:41.73,0:39:54.25,中文,,0,0,0,,是吗
Dialogue: 0,0:39:54.25,0:40:00.01,英文,,0,0,0,,Yes, the question was talking about nested classes versus inner classes.
Dialogue: 0,0:39:54.25,0:40:00.01,中文,,0,0,0,,是的 这个问题是在谈论嵌套类与内部类之间的区别
Dialogue: 0,0:40:00.01,0:40:02.80,英文,,0,0,0,,I have a slide for that.
Dialogue: 0,0:40:00.01,0:40:02.80,中文,,0,0,0,,我有一张幻灯片讲这个
Dialogue: 0,0:40:02.80,0:40:08.68,英文,,0,0,0,,So with nested classes, inner classes and outer classes can always see each other's things.
Dialogue: 0,0:40:02.80,0:40:08.68,中文,,0,0,0,,在嵌套类中 内部类和外部类总是可以互相看到对方的东西
Dialogue: 0,0:40:08.68,0:40:13.77,英文,,0,0,0,,It bypasses the standard rules of access modifiers.
Dialogue: 0,0:40:08.68,0:40:13.77,中文,,0,0,0,,它绕过了访问修饰符的标准规则
Dialogue: 0,0:40:13.77,0:40:16.19,英文,,0,0,0,,It still ends up affecting things outside.
Dialogue: 0,0:40:13.77,0:40:16.19,中文,,0,0,0,,但最终它仍然会影响到外部的东西
Dialogue: 0,0:40:16.19,0:40:19.52,英文,,0,0,0,,So if you have an inner class, you generally want to make it private.
Dialogue: 0,0:40:16.19,0:40:19.52,中文,,0,0,0,,如果你有一个内部类 通常会想把它设置为私有
Dialogue: 0,0:40:19.52,0:40:28.50,英文,,0,0,0,,Because otherwise, if you make it public, then some outside code could theoretically create a new object of a list and then make a node.
Dialogue: 0,0:40:19.52,0:40:28.50,中文,,0,0,0,,否则 如果你将其公开 那么一些外部代码理论上可以创建一个列表的新对象 然后创建一个节点
Dialogue: 0,0:40:28.50,0:40:45.61,英文,,0,0,0,,If you define public array list, or sorry, linked list T, and then you have inside it public node,
Dialogue: 0,0:40:28.50,0:40:45.61,中文,,0,0,0,,如果你定义公共数组列表 或者抱歉 链接列表 T 然后在其中有一个公共节点
Dialogue: 0,0:40:45.61,0:41:04.38,英文,,0,0,0,,If you have a node class inside, then I could theoretically write some code, linked list integer equals new linked list.
Dialogue: 0,0:40:45.61,0:41:04.38,中文,,0,0,0,,如果在内部有一个节点类 那么我理论上可以编写一些代码 链接列表整数等于新链接列表
Dialogue: 0,0:41:04.38,0:41:19.62,英文,,0,0,0,,Let's call this a. And then I can say a dot node. node equals new A.node like this.
Dialogue: 0,0:41:04.38,0:41:19.62,中文,,0,0,0,,我们称之为 a 然后我可以说 a .Node node = new a.Node( )这样
Dialogue: 0,0:41:19.62,0:41:30.23,英文,,0,0,0,,I could theoretically write this code, which doesn't really make sense and kind of bypasses the public-private modifiers.
Dialogue: 0,0:41:19.62,0:41:30.23,中文,,0,0,0,,我理论上可以编写这段代码 这并不真正有意义 而且绕过了公共-私有修饰符
Dialogue: 0,0:41:30.23,0:41:34.23,英文,,0,0,0,,So because of that, we generally try to make inner classes private.
Dialogue: 0,0:41:30.23,0:41:34.23,中文,,0,0,0,,因此 由于这个原因 我们通常会尝试将内部类设置为私有
Dialogue: 0,0:41:34.23,0:41:37.05,英文,,0,0,0,,If we make this private, then we can no longer run this line.
Dialogue: 0,0:41:34.23,0:41:37.05,中文,,0,0,0,,如果我们将这个设为私有的话 那么我们就不能再运行这行代码了
Dialogue: 0,0:41:37.05,0:41:45.61,英文,,0,0,0,,This line is not going to work because A.node doesn't know that node exists.
Dialogue: 0,0:41:37.05,0:41:45.61,中文,,0,0,0,,这行代码不会起作用 因为 a.Node 不知道 node 的存在
Dialogue: 0,0:41:45.61,0:41:49.61,英文,,0,0,0,,The ideal code that you write is going to restrict the classes as much as possible.
Dialogue: 0,0:41:45.61,0:41:49.61,中文,,0,0,0,,你编写的理想代码会尽可能地限制类的访问权限
Dialogue: 0,0:41:49.61,0:41:58.26,英文,,0,0,0,,If you can make a method or attribute private, make it private, because that'll make your code more flexible in the future.
Dialogue: 0,0:41:49.61,0:41:58.26,中文,,0,0,0,,如果你可以将方法或属性设为私有的 就设为私有 因为这样将来你的代码会更灵活
Dialogue: 0,0:41:58.26,0:42:00.44,英文,,0,0,0,,All right.
Dialogue: 0,0:42:00.44,0:42:06.19,英文,,0,0,0,,Are there any other questions on public versus private modifiers?
Dialogue: 0,0:42:00.44,0:42:06.19,中文,,0,0,0,,关于公共和私有修饰符 还有其他问题吗
Dialogue: 0,0:42:06.19,0:42:22.75,英文,,0,0,0,,Yes.
Dialogue: 0,0:42:06.19,0:42:22.75,中文,,0,0,0,,有
Dialogue: 0,0:42:22.75,0:42:32.16,英文,,0,0,0,,If an inner class is public, then you will need to do this, because this is actually associated with a particular instance, right?
Dialogue: 0,0:42:22.75,0:42:32.16,中文,,0,0,0,,如果一个内部类是公开的 那么你就需要这样做 因为这实际上与特定实例相关联 对吧
Dialogue: 0,0:42:32.16,0:42:47.83,英文,,0,0,0,,This is not a static class as well, so it will be associated with the variable A. If this was static, like this,
Dialogue: 0,0:42:32.16,0:42:47.83,中文,,0,0,0,,这也不是静态类 所以它将与变量 a 相关联 如果这是静态的 就像这样
Dialogue: 0,0:42:47.83,0:42:49.52,英文,,0,0,0,,Then it's associated with linked listing.
Dialogue: 0,0:42:47.83,0:42:49.52,中文,,0,0,0,,那么它与链表相关联
Dialogue: 0,0:42:49.52,0:42:54.20,英文,,0,0,0,,We'd actually have to do linked list dot node to access it this way.
Dialogue: 0,0:42:49.52,0:42:54.20,中文,,0,0,0,,我们实际上必须使用链表点节点来以这种方式访问它
Dialogue: 0,0:42:54.20,0:42:58.58,英文,,0,0,0,,In either case, we need to use this dot notation to get access to the inner class.
Dialogue: 0,0:42:54.20,0:42:58.58,中文,,0,0,0,,无论哪种情况 我们都需要使用这个点符号来访问内部类
Dialogue: 0,0:42:58.58,0:42:59.54,英文,,0,0,0,,Yeah?
Dialogue: 0,0:42:58.58,0:42:59.54,中文,,0,0,0,,是的
Dialogue: 0,0:42:59.54,0:43:03.51,英文,,0,0,0,,Yes?
Dialogue: 0,0:42:59.54,0:43:03.51,中文,,0,0,0,,是的
Dialogue: 0,0:43:03.51,0:43:07.15,英文,,0,0,0,,Can you make the constructor of the inner class private?
Dialogue: 0,0:43:03.51,0:43:07.15,中文,,0,0,0,,内部类的构造函数可以设置为私有吗
Dialogue: 0,0:43:07.15,0:43:10.17,英文,,0,0,0,,I'm not sure.
Dialogue: 0,0:43:07.15,0:43:10.17,中文,,0,0,0,,我不太确定
Dialogue: 0,0:43:10.17,0:43:16.54,英文,,0,0,0,,I think even if you do that, you might still have access to the default constructor,
Dialogue: 0,0:43:10.17,0:43:16.54,中文,,0,0,0,,我觉得即使你这样做了 你可能仍然可以访问默认构造函数
Dialogue: 0,0:43:16.54,0:43:23.54,英文,,0,0,0,,which all objects have, which just takes in no input and which returns a blank object with no variable set.
Dialogue: 0,0:43:16.54,0:43:23.54,中文,,0,0,0,,因为所有对象都有默认构造函数 它只是不接受任何输入并返回一个没有设置变量的空对象
Dialogue: 0,0:43:23.54,0:43:30.42,英文,,0,0,0,,Yeah?
Dialogue: 0,0:43:23.54,0:43:30.42,中文,,0,0,0,,是吗
Dialogue: 0,0:43:30.42,0:43:34.82,英文,,0,0,0,,You cannot use a particular instance for a static method, no.
Dialogue: 0,0:43:30.42,0:43:34.82,中文,,0,0,0,,你不能对静态方法使用特定的实例
Dialogue: 0,0:43:34.82,0:43:42.76,英文,,0,0,0,,So effectively, the word static here, what it means is that it is associated with the general concept of linked list, not a particular linked list.
Dialogue: 0,0:43:34.82,0:43:42.76,中文,,0,0,0,,因此 在这里 "static" 实际上意味着它与链表的一般概念相关联 而不是特定的链表
Dialogue: 0,0:43:42.76,0:43:56.62,英文,,0,0,0,,So in this case here, each node is actually dependent on what particular linked list you're working with, because an integer linked list is going to have a different node class than a floating point linked list or a dog linked list.
Dialogue: 0,0:43:42.76,0:43:56.62,中文,,0,0,0,,在这种情况下 每个节点实际上取决于你正在使用的特定链表 因为整数链表将具有不同于浮点链表或狗链表的节点类
Dialogue: 0,0:43:56.62,0:44:01.83,英文,,0,0,0,,Yeah, so you can't access static from instance or instance from static.
Dialogue: 0,0:43:56.62,0:44:01.83,中文,,0,0,0,,是的 所以你无法从实例访问静态 或者从静态访问实例
Dialogue: 0,0:44:01.83,0:44:03.59,英文,,0,0,0,,Yeah.
Dialogue: 0,0:44:01.83,0:44:03.59,中文,,0,0,0,,是的
Dialogue: 0,0:44:03.59,0:44:18.79,英文,,0,0,0,,Yeah, you.
Dialogue: 0,0:44:03.59,0:44:18.79,中文,,0,0,0,,是的 你
Dialogue: 0,0:44:18.79,0:44:42.59,英文,,0,0,0,,Yes, if you are within an inner class and you write some private variables, so if you do private class node and then private int t value, you can still access t from within the linkless class.
Dialogue: 0,0:44:18.79,0:44:42.59,中文,,0,0,0,,如果你在内部类中 并且你写了一些私有变量 如果你做私有类节点然后私有整数t值 你仍然可以从无链接类中访问T
Dialogue: 0,0:44:42.59,0:44:48.40,英文,,0,0,0,,So inner classes and outer classes, they bypass the standard access restrictions.
Dialogue: 0,0:44:42.59,0:44:48.40,中文,,0,0,0,,所以内部类和外部类 它们绕过了标准访问限制
Dialogue: 0,0:44:48.40,0:44:55.89,英文,,0,0,0,,As a result, there is absolutely no reason why, if you have a private inner class, you should ever use public here.
Dialogue: 0,0:44:48.40,0:44:55.89,中文,,0,0,0,,因此 如果你有一个私有内部类 你绝对没有理由在这里使用public
Dialogue: 0,0:44:55.89,0:45:00.47,英文,,0,0,0,,Because basically, it is never going to be accessible anyway outside.
Dialogue: 0,0:44:55.89,0:45:00.47,中文,,0,0,0,,因为基本上 它永远不会在外部可访问
Dialogue: 0,0:45:00.47,0:45:03.15,英文,,0,0,0,,So might as well just call it private.
Dialogue: 0,0:45:00.47,0:45:03.15,中文,,0,0,0,,所以还是干脆称之为私有的
Dialogue: 0,0:45:03.15,0:45:12.11,英文,,0,0,0,,Yes?
Dialogue: 0,0:45:03.15,0:45:12.11,中文,,0,0,0,,是的
Dialogue: 0,0:45:12.11,0:45:17.61,英文,,0,0,0,,The node object we create is an instance of the a.node class, actually.
Dialogue: 0,0:45:12.11,0:45:17.61,中文,,0,0,0,,我们创建的节点对象实际上是 a.node 类的一个实例
Dialogue: 0,0:45:17.61,0:45:26.82,英文,,0,0,0,,It's not an instance of the linked list.node class or an instance of the node class itself, because each individual linked list creates a new node class for itself.
Dialogue: 0,0:45:17.61,0:45:26.82,中文,,0,0,0,,它不是链表.node 类的实例 也不是节点类本身的实例 因为每个单独的链表都为自己创建了一个新的节点类
Dialogue: 0,0:45:26.82,0:45:29.12,英文,,0,0,0,,Yeah.
Dialogue: 0,0:45:29.12,0:45:42.22,英文,,0,0,0,,Yes.
Dialogue: 0,0:45:29.12,0:45:42.22,中文,,0,0,0,,是的
Dialogue: 0,0:45:42.22,0:45:56.41,英文,,0,0,0,,If a class with a parameter has a static method, then what actually happens is that you're not allowed to access the particular generic type at all.
Dialogue: 0,0:45:42.22,0:45:56.41,中文,,0,0,0,,如果一个带有参数的类有一个静态方法 那么实际上是你根本不允许访问特定的泛型类型
Dialogue: 0,0:45:56.41,0:46:05.17,英文,,0,0,0,,The generic type just doesn't work properly, because it doesn't necessarily know what type T it is.
Dialogue: 0,0:45:56.41,0:46:05.17,中文,,0,0,0,,泛型类型就是不太好用 因为它不一定知道类型T是什么
Dialogue: 0,0:46:05.17,0:46:10.39,英文,,0,0,0,,Yeah, t is defined per linked list to be integer or a string or whatever.
Dialogue: 0,0:46:05.17,0:46:10.39,中文,,0,0,0,,是的 T 是根据链表定义的 可以是整数或字符串或其他什么的
Dialogue: 0,0:46:10.39,0:46:19.43,英文,,0,0,0,,So by default, there is no static t thing that will actually work.
Dialogue: 0,0:46:10.39,0:46:19.43,中文,,0,0,0,,默认情况下 没有静态的T 东西可以正常工作
Dialogue: 0,0:46:19.43,0:46:23.06,英文,,0,0,0,,This will immediately error, because you don't know what t is.
Dialogue: 0,0:46:19.43,0:46:23.06,中文,,0,0,0,,这会立即报错 因为你不知道t是什么
Dialogue: 0,0:46:23.06,0:46:37.79,英文,,0,0,0,,Yeah, you could theoretically have a static linked list k,
Dialogue: 0,0:46:23.06,0:46:37.79,中文,,0,0,0,,是的 理论上你可以有一个静态的链表k
Dialogue: 0,0:46:37.79,0:46:48.52,英文,,0,0,0,,Copy.
Dialogue: 0,0:46:37.79,0:46:48.52,中文,,0,0,0,,复制
Dialogue: 0,0:46:48.52,0:46:57.21,英文,,0,0,0,,So if you write this out, then what it does is it defines the k in terms of this linked list k here.
Dialogue: 0,0:46:48.52,0:46:57.21,中文,,0,0,0,,如果你把这个写出来 它实际上是在这里定义了k 以这个链表k为基础
Dialogue: 0,0:46:57.21,0:47:02.37,英文,,0,0,0,,Yeah.
Dialogue: 0,0:46:57.21,0:47:02.37,中文,,0,0,0,,是的
Dialogue: 0,0:47:02.37,0:47:07.21,英文,,0,0,0,,From outside, you would call linked list dot, I think.
Dialogue: 0,0:47:02.37,0:47:07.21,中文,,0,0,0,,从外面看 你会称之为链表点 我想
Dialogue: 0,0:47:07.21,0:47:09.70,英文,,0,0,0,,Yeah, yeah.
Dialogue: 0,0:47:07.21,0:47:09.70,中文,,0,0,0,,是的 是的
Dialogue: 0,0:47:09.70,0:47:16.18,英文,,0,0,0,,The bracket thing is only to specify a class type, yeah.
Dialogue: 0,0:47:09.70,0:47:16.18,中文,,0,0,0,,括号的作用只是为了指定类类型 是的
Dialogue: 0,0:47:16.18,0:47:17.18,英文,,0,0,0,,All right.
Dialogue: 0,0:47:17.18,0:47:21.26,英文,,0,0,0,,I'm going to move on to comparators.
Dialogue: 0,0:47:17.18,0:47:21.26,中文,,0,0,0,,我要继续讲比较器
Dialogue: 0,0:47:21.26,0:47:26.70,英文,,0,0,0,,I think your static copy doesn't work.
Dialogue: 0,0:47:21.26,0:47:26.70,中文,,0,0,0,,我觉得你的静态复制不起作用
Dialogue: 0,0:47:26.70,0:47:29.54,英文,,0,0,0,,You can't have a placeholder k if it's static.
Dialogue: 0,0:47:26.70,0:47:29.54,中文,,0,0,0,,如果它是静态的 你不能有一个占位符k
Dialogue: 0,0:47:29.54,0:47:37.06,英文,,0,0,0,,You can't use the one from the T, but I'm here defining K as separate.
Dialogue: 0,0:47:29.54,0:47:37.06,中文,,0,0,0,,你不能使用T中的那个 但我在这里定义K作为一个单独的东西
Dialogue: 0,0:47:37.06,0:47:41.20,英文,,0,0,0,,K is an entirely different one, so because of that, it works.
Dialogue: 0,0:47:37.06,0:47:41.20,中文,,0,0,0,,K是完全不同的一个 所以因为这个原因 它起作用了
Dialogue: 0,0:47:41.20,0:47:48.11,英文,,0,0,0,,You can't use the T directly, but you can use K as a separate thing.
Dialogue: 0,0:47:41.20,0:47:48.11,中文,,0,0,0,,你不能直接使用T 但你可以使用K作为一个独立的东西
Dialogue: 0,0:47:48.11,0:47:50.49,英文,,0,0,0,,So comparators and iterators.
Dialogue: 0,0:47:48.11,0:47:50.49,中文,,0,0,0,,所以比较器和迭代器
Dialogue: 0,0:47:50.49,0:47:54.06,英文,,0,0,0,,I think that's the topic that you all want to cover.
Dialogue: 0,0:47:50.49,0:47:54.06,中文,,0,0,0,,我认为这是你们都想要讨论的话题
Dialogue: 0,0:47:54.06,0:48:01.34,英文,,0,0,0,,So I think, overall, the main thing is that we have two different things to compare stuff and two different things to iterate.
Dialogue: 0,0:47:54.06,0:48:01.34,中文,,0,0,0,,我认为 总的来说 主要的是我们有两个不同的东西来比较东西和两个不同的东西来迭代
Dialogue: 0,0:48:01.34,0:48:02.80,英文,,0,0,0,,So we have two interfaces.
Dialogue: 0,0:48:01.34,0:48:02.80,中文,,0,0,0,,我们有两个接口
Dialogue: 0,0:48:02.80,0:48:08.70,英文,,0,0,0,,We have the comparable interface and the comparator.
Dialogue: 0,0:48:02.80,0:48:08.70,中文,,0,0,0,,我们有可比接口和比较器
Dialogue: 0,0:48:08.70,0:48:21.83,英文,,0,0,0,,Now, the comparable interface kind of acts as a way to compare your class to other things of type T. So we have the compareTo method.
Dialogue: 0,0:48:08.70,0:48:21.83,中文,,0,0,0,,现在 可比接口在某种程度上充当将你的类与其他T类型的东西进行比较的方法 所以我们有compareTo方法
Dialogue: 0,0:48:21.83,0:48:24.49,英文,,0,0,0,,That allows you to compare two things.
Dialogue: 0,0:48:21.83,0:48:24.49,中文,,0,0,0,,这允许你比较两件事
Dialogue: 0,0:48:24.49,0:48:33.69,英文,,0,0,0,,So for example, you might say that a dog implements comparable dog.
Dialogue: 0,0:48:24.49,0:48:33.69,中文,,0,0,0,,例如 你可能会说一只狗实现了可比狗
Dialogue: 0,0:48:33.69,0:48:37.42,英文,,0,0,0,,And this will allow your dog to compare itself to other dogs.
Dialogue: 0,0:48:33.69,0:48:37.42,中文,,0,0,0,,这将允许你的Dog将自己与其他Dog进行比较
Dialogue: 0,0:48:37.42,0:48:42.24,英文,,0,0,0,,You can even do something weird like comparing dogs to cats.
Dialogue: 0,0:48:37.42,0:48:42.24,中文,,0,0,0,,你甚至可以做一些奇怪的事情 比如将Dog与 Cat 进行比较
Dialogue: 0,0:48:42.24,0:48:50.87,英文,,0,0,0,,This will allow you to compare a dog to a cat and only to a cat, not to another dog.
Dialogue: 0,0:48:42.24,0:48:50.87,中文,,0,0,0,,这将允许你将Dog与 Cat 进行比较 只是与 Cat 比较 而不是与另一只Dog比较
Dialogue: 0,0:48:50.87,0:48:52.99,英文,,0,0,0,,So you can do this kind of weird thing.
Dialogue: 0,0:48:50.87,0:48:52.99,中文,,0,0,0,,你可以做这种奇怪的事情
Dialogue: 0,0:48:52.99,0:48:57.64,英文,,0,0,0,,If you really want to, you can do a compareToAllObjects.
Dialogue: 0,0:48:52.99,0:48:57.64,中文,,0,0,0,,如果你真的想的话 你可以做一个compareToAllObjects
Dialogue: 0,0:48:57.64,0:48:59.82,英文,,0,0,0,,Kind of weird.
Dialogue: 0,0:48:57.64,0:48:59.82,中文,,0,0,0,,有点奇怪
Dialogue: 0,0:48:59.82,0:49:05.02,英文,,0,0,0,,I don't know how you compare a dog to a list.
Dialogue: 0,0:48:59.82,0:49:05.02,中文,,0,0,0,,我不知道你如何将Dog与列表进行比较
Dialogue: 0,0:49:05.02,0:49:09.58,英文,,0,0,0,,Meanwhile, the comparator function, it acts as a weight.
Dialogue: 0,0:49:05.02,0:49:09.58,中文,,0,0,0,,与此同时 比较器函数 它充当一种权重
Dialogue: 0,0:49:09.58,0:49:14.20,英文,,0,0,0,,It's kind of a machine that compares two items of the same type.
Dialogue: 0,0:49:09.58,0:49:14.20,中文,,0,0,0,,它有点像一个比较同一类型两个项目的机器
Dialogue: 0,0:49:14.20,0:49:19.57,英文,,0,0,0,,So it'll compare t and t together.
Dialogue: 0,0:49:14.20,0:49:19.57,中文,,0,0,0,,它将比较t和t在一起
Dialogue: 0,0:49:19.57,0:49:24.29,英文,,0,0,0,,So generally speaking, the comparator T class is its own separate class.
Dialogue: 0,0:49:19.57,0:49:24.29,中文,,0,0,0,,一般来说 比较器T类是它自己的独立类
Dialogue: 0,0:49:24.29,0:49:40.66,英文,,0,0,0,,So DogComparingMachine implements comparator T. And using this, you're able to compare two dogs and determine which one's bigger.
Dialogue: 0,0:49:24.29,0:49:40.66,中文,,0,0,0,,所以DogComparingMachine实现了比较器T 使用这个 你能够比较两只Dog 并确定哪只更大
Dialogue: 0,0:49:40.66,0:49:45.00,英文,,0,0,0,,In any case, all of these comparators follow the same pattern.
Dialogue: 0,0:49:40.66,0:49:45.00,中文,,0,0,0,,无论如何 所有这些比较器都遵循相同的模式
Dialogue: 0,0:49:45.00,0:49:49.51,英文,,0,0,0,,Negative 1 means that the left side
Dialogue: 0,0:49:45.00,0:49:49.51,中文,,0,0,0,,负1意味着左边
Dialogue: 0,0:49:49.51,0:49:55.18,英文,,0,0,0,,Is smaller right, I think?
Dialogue: 0,0:49:49.51,0:49:55.18,中文,,0,0,0,,更小 对吧
Dialogue: 0,0:49:55.18,0:49:57.06,英文,,0,0,0,,0 means that it's equal.
Dialogue: 0,0:49:55.18,0:49:57.06,中文,,0,0,0,,0意味着它相等
Dialogue: 0,0:49:57.06,0:50:05.21,英文,,0,0,0,,And then 1 means that the right side is smaller, I think.
Dialogue: 0,0:49:57.06,0:50:05.21,中文,,0,0,0,,然后1表示右边较小 我觉得
Dialogue: 0,0:50:05.21,0:50:07.11,英文,,0,0,0,,Parin, do you remember this?
Dialogue: 0,0:50:05.21,0:50:07.11,中文,,0,0,0,,帕林 你记得这个吗
Dialogue: 0,0:50:07.11,0:50:07.79,英文,,0,0,0,,Is this right?
Dialogue: 0,0:50:07.11,0:50:07.79,中文,,0,0,0,,这是对的吗
Dialogue: 0,0:50:07.79,0:50:09.47,英文,,0,0,0,,I forget which one's negative 1 and positive 1.
Dialogue: 0,0:50:07.79,0:50:09.47,中文,,0,0,0,,我忘记哪个是负1和正1了
Dialogue: 0,0:50:09.47,0:50:12.51,英文,,0,0,0,,Negative 1 is if the first item is smaller than the second item.
Dialogue: 0,0:50:09.47,0:50:12.51,中文,,0,0,0,,负1是如果第一个项目比第二个项目小
Dialogue: 0,0:50:12.51,0:50:12.99,英文,,0,0,0,,OK.
Dialogue: 0,0:50:12.99,0:50:13.53,英文,,0,0,0,,So this is right.
Dialogue: 0,0:50:12.99,0:50:13.53,中文,,0,0,0,,这是对的
Dialogue: 0,0:50:13.53,0:50:15.27,英文,,0,0,0,,Yes.
Dialogue: 0,0:50:13.53,0:50:15.27,中文,,0,0,0,,是的
Dialogue: 0,0:50:15.27,0:50:16.05,英文,,0,0,0,,Yeah.
Dialogue: 0,0:50:15.27,0:50:16.05,中文,,0,0,0,,嗯
Dialogue: 0,0:50:16.05,0:50:19.31,英文,,0,0,0,,So this is kind of how comparables work.
Dialogue: 0,0:50:16.05,0:50:19.31,中文,,0,0,0,,这有点像可比较的工作方式
Dialogue: 0,0:50:19.31,0:50:25.73,英文,,0,0,0,,For iterators, we have iterator and iterable.
Dialogue: 0,0:50:19.31,0:50:25.73,中文,,0,0,0,,对于迭代器 我们有迭代器和可迭代对象
Dialogue: 0,0:50:25.73,0:50:39.38,英文,,0,0,0,,Now, iterable just means that there is a way to make an iterator out of this.
Dialogue: 0,0:50:25.73,0:50:39.38,中文,,0,0,0,,现在 可迭代对象只是意味着有一种方法将迭代器从中提取出来
Dialogue: 0,0:50:39.38,0:50:44.56,英文,,0,0,0,,The iterator itself is kind of like a generator function from Python.
Dialogue: 0,0:50:39.38,0:50:44.56,中文,,0,0,0,,迭代器本身有点像 Python 中的生成器函数
Dialogue: 0,0:50:44.56,0:50:50.73,英文,,0,0,0,,It kind of just does something, but it yields items over and over.
Dialogue: 0,0:50:44.56,0:50:50.73,中文,,0,0,0,,它有点像只是做某事 但是一遍又一遍地产生项目
Dialogue: 0,0:50:50.73,0:50:55.65,英文,,0,0,0,,So it has the hasNext, and it has the next operations.
Dialogue: 0,0:50:50.73,0:50:55.65,中文,,0,0,0,,它有hasNext和next操作
Dialogue: 0,0:50:55.65,0:50:59.16,英文,,0,0,0,,Next just gives you this next item in the iterator.
Dialogue: 0,0:50:55.65,0:50:59.16,中文,,0,0,0,,next只是给你这个迭代器中的下一个项目
Dialogue: 0,0:50:59.16,0:51:01.60,英文,,0,0,0,,HasNext checks if there's a next item.
Dialogue: 0,0:50:59.16,0:51:01.60,中文,,0,0,0,,hasNext检查是否有下一个项目
Dialogue: 0,0:51:01.60,0:51:09.63,英文,,0,0,0,,And you can use iterators by themselves as generating functions, like you can make a public
Dialogue: 0,0:51:01.60,0:51:09.63,中文,,0,0,0,,你可以单独使用迭代器作为生成函数 比如你可以制作一个
Dialogue: 0,0:51:09.63,0:51:19.52,英文,,0,0,0,,Class square generator, iterator integer.
Dialogue: 0,0:51:09.63,0:51:19.52,中文,,0,0,0,,public class squareGenerator implements Iterator<Integer>
Dialogue: 0,0:51:19.52,0:51:41.98,英文,,0,0,0,,And then you can do like int i equals 0, public int next, return i
Dialogue: 0,0:51:19.52,0:51:41.98,中文,,0,0,0,,然后你可以像这样使用int i=于0 public int next 返回 i
Dialogue: 0,0:51:41.98,0:51:47.85,英文,,0,0,0,,i plus equals 1, return i times i, something like this.
Dialogue: 0,0:51:41.98,0:51:47.85,中文,,0,0,0,,i+=1 返回i乘以i 类似这样
Dialogue: 0,0:51:47.85,0:51:51.81,英文,,0,0,0,,And if you do this, then it'll act kind of as a generator of all the square numbers.
Dialogue: 0,0:51:47.85,0:51:51.81,中文,,0,0,0,,如果你这样做的话 它会充当所有平方数的生成器
Dialogue: 0,0:51:51.81,0:51:53.03,英文,,0,0,0,,So you can do this kind of thing.
Dialogue: 0,0:51:51.81,0:51:53.03,中文,,0,0,0,,你可以做这种事情
Dialogue: 0,0:51:53.03,0:51:56.15,英文,,0,0,0,,With iterables, you need to create an iterator for it.
Dialogue: 0,0:51:53.03,0:51:56.15,中文,,0,0,0,,对于可迭代对象 你需要为其创建一个迭代器
Dialogue: 0,0:51:56.15,0:52:00.51,英文,,0,0,0,,And generally, it's designed to just iterate through all the items in that list.
Dialogue: 0,0:51:56.15,0:52:00.51,中文,,0,0,0,,通常 它被设计成只是迭代列表中的所有项
Dialogue: 0,0:52:00.51,0:52:05.04,英文,,0,0,0,,All right, any questions on this or the comparator?
Dialogue: 0,0:52:00.51,0:52:05.04,中文,,0,0,0,,关于这个或比较器有什么问题吗
Dialogue: 0,0:52:05.04,0:52:08.86,英文,,0,0,0,,All right.
Dialogue: 0,0:52:08.86,0:52:21.96,英文,,0,0,0,,If not, yeah, it's two.
Dialogue: 0,0:52:08.86,0:52:21.96,中文,,0,0,0,,如果没有 那就是两个了
Dialogue: 0,0:52:21.96,0:52:27.85,英文,,0,0,0,,For example, what if we made a list that could take in a dog class or something like that?
Dialogue: 0,0:52:21.96,0:52:27.85,中文,,0,0,0,,例如 假设我们制作了一个可以接收狗类或类似内容的列表 那样做会得到相同的结果 对吧
Dialogue: 0,0:52:27.85,0:52:32.57,英文,,0,0,0,,So wouldn't that kind of achieve the same result if you iterated through that list?
Dialogue: 0,0:52:27.85,0:52:32.57,中文,,0,0,0,,如果你遍历那个列表 不就能达到同样的结果了吗
