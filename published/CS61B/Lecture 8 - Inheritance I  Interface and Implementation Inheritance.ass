[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 3
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1152
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Audio File: D:/python_code/video_tool/video_tool/result/Lecture 5 - Lists 3 DLLists and Arrays.mp4
Video File: D:/python_code/video_tool/video_tool/result/Lecture 5 - Lists 3 DLLists and Arrays.mp4
Video AR Mode: 4
Video AR Value: 1.600000
Video Zoom Percent: 0.500000
Scroll Position: 967
Active Line: 927
Video Position: 57565

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,13,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,90,100,0,0,1,1.33333,1.33333,2,6,6,7,1
Style: 英文,Arial,24,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,90,100,0,0,1,1.33333,1.33333,2,1,1,5,1
Style: 中文,微软雅黑,38,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,90,100,0,0,1,1.33333,1.33333,2,2,2,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
Dialogue: 0,0:00:02.55,0:00:02.85,英文,,0,0,0,,Wow.
Dialogue: 0,0:00:02.55,0:00:02.85,中文,,0,0,0,,哇
Dialogue: 0,0:00:04.33,0:00:04.61,英文,,0,0,0,,OK.
Dialogue: 0,0:00:04.33,0:00:04.61,中文,,0,0,0,,好的
Dialogue: 0,0:00:05.65,0:00:05.95,英文,,0,0,0,,Hi.
Dialogue: 0,0:00:05.65,0:00:05.95,中文,,0,0,0,,嗨
Dialogue: 0,0:00:06.05,0:00:09.31,英文,,0,0,0,,So we are done with lists for now.
Dialogue: 0,0:00:06.05,0:00:09.31,中文,,0,0,0,,我们现在完成了列表
Dialogue: 0,0:00:09.31,0:00:13.08,英文,,0,0,0,,And today, we get to start a totally new topic that I find very cool.
Dialogue: 0,0:00:09.31,0:00:13.08,中文,,0,0,0,,今天 我们要开始一个我觉得非常酷的全新话题
Dialogue: 0,0:00:13.08,0:00:15.52,英文,,0,0,0,,It's called inheritance.
Dialogue: 0,0:00:13.08,0:00:15.52,中文,,0,0,0,,它叫做继承
Dialogue: 0,0:00:15.52,0:00:16.90,英文,,0,0,0,,Shall we talk about inheritance?
Dialogue: 0,0:00:15.52,0:00:16.90,中文,,0,0,0,,我们来谈谈继承吧
Dialogue: 0,0:00:16.90,0:00:18.26,英文,,0,0,0,,Yeah, it's kind of quiet.
Dialogue: 0,0:00:16.90,0:00:18.26,中文,,0,0,0,,是的 有点安静
Dialogue: 0,0:00:18.26,0:00:20.72,英文,,0,0,0,,I guess the mic is maybe on its last legs.
Dialogue: 0,0:00:18.26,0:00:20.72,中文,,0,0,0,,我想话筒可能快完蛋了
Dialogue: 0,0:00:20.72,0:00:21.60,英文,,0,0,0,,OK.
Dialogue: 0,0:00:21.60,0:00:24.00,英文,,0,0,0,,So what's inheritance? Why do we need it?
Dialogue: 0,0:00:21.60,0:00:24.00,中文,,0,0,0,,那什么是继承  我们为什么需要它
Dialogue: 0,0:00:24.00,0:00:27.62,英文,,0,0,0,,Why are we spending four lectures on this thing?
Dialogue: 0,0:00:24.00,0:00:27.62,中文,,0,0,0,,为什么我们要花四节课来讲这个东西
Dialogue: 0,0:00:27.62,0:00:32.72,英文,,0,0,0,,In the last four lectures, we've built the beautiful A-list, which had these methods.
Dialogue: 0,0:00:27.62,0:00:32.72,中文,,0,0,0,,在过去的四节课中 我们建立了漂亮的AList 它有这些方法
Dialogue: 0,0:00:32.72,0:00:36.38,英文,,0,0,0,,You could add to it, you could get items, you could remove items.
Dialogue: 0,0:00:32.72,0:00:36.38,中文,,0,0,0,,你可以添加 你可以获取项目 你可以移除项目
Dialogue: 0,0:00:36.38,0:00:39.74,英文,,0,0,0,,And we also built the beautiful S-list, which had these methods.
Dialogue: 0,0:00:36.38,0:00:39.74,中文,,0,0,0,,而且我们还构建了漂亮的SLList 其中包含这些方法
Dialogue: 0,0:00:39.74,0:00:48.24,英文,,0,0,0,,You could add items, you could insert items, you could remove items.
Dialogue: 0,0:00:39.74,0:00:48.24,中文,,0,0,0,,你可以添加项目 你可以插入项目 你可以移除项目
Dialogue: 0,0:00:48.24,0:00:49.26,英文,,0,0,0,,I'll get to that.
Dialogue: 0,0:00:48.24,0:00:49.26,中文,,0,0,0,,我会解释的
Dialogue: 0,0:00:49.26,0:00:51.79,英文,,0,0,0,,So, A-list, it's beautiful.
Dialogue: 0,0:00:49.26,0:00:51.79,中文,,0,0,0,,那么, AList 它很漂亮
Dialogue: 0,0:00:51.79,0:00:52.83,英文,,0,0,0,,It has these methods.
Dialogue: 0,0:00:51.79,0:00:52.83,中文,,0,0,0,,它有这些方法
Dialogue: 0,0:00:52.83,0:00:54.07,英文,,0,0,0,,S-list is beautiful.
Dialogue: 0,0:00:52.83,0:00:54.07,中文,,0,0,0,,SLList很漂亮
Dialogue: 0,0:00:54.07,0:00:56.56,英文,,0,0,0,,It has basically the same methods.
Dialogue: 0,0:00:54.07,0:00:56.56,中文,,0,0,0,,它基本上有相同的方法
Dialogue: 0,0:00:56.56,0:01:02.04,英文,,0,0,0,,So let's see how someone in the real world might use these classes that we built.
Dialogue: 0,0:00:56.56,0:01:02.04,中文,,0,0,0,,那我们来看看现实世界中有人是如何使用我们构建的这些类的
Dialogue: 0,0:01:02.04,0:01:07.79,英文,,0,0,0,,So suppose maybe I want to write some code that finds the longest word in a list of words.
Dialogue: 0,0:01:02.04,0:01:07.79,中文,,0,0,0,,那么假设我想写一些代码 找出一个单词列表中最长的单词
Dialogue: 0,0:01:07.79,0:01:13.91,英文,,0,0,0,,You do not have to read this code and understand what it does, but somehow it takes in a list, an S list of words.
Dialogue: 0,0:01:07.79,0:01:13.91,中文,,0,0,0,,你不必阅读这段代码并理解它的作用 但它以某种方式接受一个单词列表 一个SLList
Dialogue: 0,0:01:13.91,0:01:17.09,英文,,0,0,0,,It goes through them and tries to find the longest word in the list.
Dialogue: 0,0:01:13.91,0:01:17.09,中文,,0,0,0,,它遍历它们并尝试找到列表中最长的单词
Dialogue: 0,0:01:17.09,0:01:21.82,英文,,0,0,0,,So for example, if I passed in, here's a copy of the code.
Dialogue: 0,0:01:17.09,0:01:21.82,中文,,0,0,0,,例如 如果我传入 这是代码的一个副本
Dialogue: 0,0:01:21.82,0:01:34.75,英文,,0,0,0,,If I passed in, you know, like elk are watching, and then I printed out what the longest word in that string is, then I should get watching, because that's the longest word in that list of words.
Dialogue: 0,0:01:21.82,0:01:34.75,中文,,0,0,0,,如果我传入了 就像麋鹿在观察一样 然后我打印出那个字符串中最长的单词 那么我应该得到观察 因为那是单词列表中最长的单词
Dialogue: 0,0:01:34.75,0:01:36.91,英文,,0,0,0,,I guess it'll eventually build.
Dialogue: 0,0:01:34.75,0:01:36.91,中文,,0,0,0,,我猜它最终会构建
Dialogue: 0,0:01:36.91,0:01:40.03,英文,,0,0,0,,And I get watching, because watching is the longest word.
Dialogue: 0,0:01:36.91,0:01:40.03,中文,,0,0,0,,我得到观察 因为观察是最长的单词
Dialogue: 0,0:01:40.03,0:01:41.85,英文,,0,0,0,,OK, great.
Dialogue: 0,0:01:40.03,0:01:41.85,中文,,0,0,0,,太棒了
Dialogue: 0,0:01:41.85,0:01:50.55,英文,,0,0,0,,But there is a minor problem, which is this is all good if the user chose to use an SLList and then called my wordUtilsLongest method.
Dialogue: 0,0:01:41.85,0:01:50.55,中文,,0,0,0,,但是有一个小问题 那就是如果用户选择使用SLList 然后调用我的wordUtilsLongest方法 这一切都很好
Dialogue: 0,0:01:50.55,0:01:53.07,英文,,0,0,0,,But what if the user actually said, you know what?
Dialogue: 0,0:01:50.55,0:01:53.07,中文,,0,0,0,,但是如果用户实际上说 你知道吗
Dialogue: 0,0:01:53.07,0:01:54.81,英文,,0,0,0,,I'm going to put the words in my list.
Dialogue: 0,0:01:53.07,0:01:54.81,中文,,0,0,0,,我要把这些词放到我的列表中
Dialogue: 0,0:01:54.81,0:01:58.74,英文,,0,0,0,,Not in an SLList, but I'm going to put my words in an AList instead.
Dialogue: 0,0:01:54.81,0:01:58.74,中文,,0,0,0,,不是在SLList中 而是我会把我的话放在AList中
Dialogue: 0,0:01:58.74,0:02:02.20,英文,,0,0,0,,Well, now we have a problem, because if I read my words into an AList,
Dialogue: 0,0:01:58.74,0:02:02.20,中文,,0,0,0,,现在我们有个问题 因为如果我把我的话读到AList中
Dialogue: 0,0:02:02.20,0:02:09.47,英文,,0,0,0,,This longest method, Java starts complaining, and it says, I thought you were going to give me an S list, but you gave me an A list instead.
Dialogue: 0,0:02:02.20,0:02:09.47,中文,,0,0,0,,这个最长的方法 Java开始抱怨 并说 我以为你要给我一个SLList 但你给了我一个AList
Dialogue: 0,0:02:09.47,0:02:13.67,英文,,0,0,0,,They don't match, and the types don't match, so I'm not going to compile this program.
Dialogue: 0,0:02:09.47,0:02:13.67,中文,,0,0,0,,它们不匹配 类型也不匹配 我不会编译这个程序
Dialogue: 0,0:02:13.67,0:02:15.42,英文,,0,0,0,,So we have a problem.
Dialogue: 0,0:02:13.67,0:02:15.42,中文,,0,0,0,,我们有一个问题
Dialogue: 0,0:02:15.42,0:02:17.56,英文,,0,0,0,,If I would like.
Dialogue: 0,0:02:15.42,0:02:17.56,中文,,0,0,0,,如果我愿意的话
Dialogue: 0,0:02:17.56,0:02:19.08,英文,,0,0,0,,This method's taken an A-list.
Dialogue: 0,0:02:17.56,0:02:19.08,中文,,0,0,0,,这个方法接收一个AList
Dialogue: 0,0:02:19.08,0:02:20.20,英文,,0,0,0,,It no longer works.
Dialogue: 0,0:02:19.08,0:02:20.20,中文,,0,0,0,,它不再起作用
Dialogue: 0,0:02:20.20,0:02:23.30,英文,,0,0,0,,So how do we fix this?
Dialogue: 0,0:02:20.20,0:02:23.30,中文,,0,0,0,,那我们该怎么修复这个问题呢
Dialogue: 0,0:02:23.30,0:02:25.84,英文,,0,0,0,,I guess I spoiled it because I accidentally hit the next slide.
Dialogue: 0,0:02:23.30,0:02:25.84,中文,,0,0,0,,我想我弄砸了它 因为我不小心点到了下一张幻灯片
Dialogue: 0,0:02:25.84,0:02:32.97,英文,,0,0,0,,But one possible idea is, well, maybe I will make a copy of the longest method.
Dialogue: 0,0:02:25.84,0:02:32.97,中文,,0,0,0,,但一个可能的想法是 也许我会复制最长的方法
Dialogue: 0,0:02:32.97,0:02:38.25,英文,,0,0,0,,And instead of taking in an SLList, it'll be the exact same method, but I'll make it take in an AList.
Dialogue: 0,0:02:32.97,0:02:38.25,中文,,0,0,0,,然后 不是接收一个 SLList 而是完全相同的方法 但我会让它接收一个 AList
Dialogue: 0,0:02:38.25,0:02:41.07,英文,,0,0,0,,So I could do that. So it would look like this.
Dialogue: 0,0:02:38.25,0:02:41.07,中文,,0,0,0,,我可以这样做  那么它看起来会是这样的
Dialogue: 0,0:02:41.07,0:02:42.74,英文,,0,0,0,,I'd have two longest methods.
Dialogue: 0,0:02:41.07,0:02:42.74,中文,,0,0,0,,我会有两个最长的方法
Dialogue: 0,0:02:42.74,0:02:44.26,英文,,0,0,0,,One of them takes in an SLList.
Dialogue: 0,0:02:42.74,0:02:44.26,中文,,0,0,0,,其中一个接收一个SLList
Dialogue: 0,0:02:44.26,0:02:45.62,英文,,0,0,0,,One of them takes in an AList.
Dialogue: 0,0:02:44.26,0:02:45.62,中文,,0,0,0,,其中一个接收一个AList
Dialogue: 0,0:02:45.62,0:02:49.02,英文,,0,0,0,,The body of the methods would be totally copy-pasted.
Dialogue: 0,0:02:45.62,0:02:49.02,中文,,0,0,0,,方法的主体将完全是复制粘贴的
Dialogue: 0,0:02:49.02,0:02:52.84,英文,,0,0,0,,And this way, if someone calls longest with an SLList, they would use this method.
Dialogue: 0,0:02:49.02,0:02:52.84,中文,,0,0,0,,这样 如果有人用SLList调用最长的方法 他们将使用这个方法
Dialogue: 0,0:02:52.84,0:02:56.01,英文,,0,0,0,,If they called longest with an AList, they would use this top method.
Dialogue: 0,0:02:52.84,0:02:56.01,中文,,0,0,0,,如果他们用AList调用最长的方法 他们将使用这个顶部的方法
Dialogue: 0,0:02:56.01,0:02:57.29,英文,,0,0,0,,They do the same thing.
Dialogue: 0,0:02:56.01,0:02:57.29,中文,,0,0,0,,它们做同样的事情
Dialogue: 0,0:02:57.29,0:03:01.69,英文,,0,0,0,,Sometimes this is called overloading, because there are two methods.
Dialogue: 0,0:02:57.29,0:03:01.69,中文,,0,0,0,,有时候这被称为重载 因为有两种方法
Dialogue: 0,0:03:01.69,0:03:02.75,英文,,0,0,0,,with different signatures.
Dialogue: 0,0:03:01.69,0:03:02.75,中文,,0,0,0,,带有不同的签名
Dialogue: 0,0:03:02.75,0:03:04.31,英文,,0,0,0,,They take in different arguments.
Dialogue: 0,0:03:02.75,0:03:04.31,中文,,0,0,0,,它们接受不同的参数
Dialogue: 0,0:03:04.31,0:03:05.83,英文,,0,0,0,,So this works.
Dialogue: 0,0:03:04.31,0:03:05.83,中文,,0,0,0,,这样可以
Dialogue: 0,0:03:05.83,0:03:07.31,英文,,0,0,0,,I could copy-paste the method.
Dialogue: 0,0:03:05.83,0:03:07.31,中文,,0,0,0,,我可以复制粘贴这个方法
Dialogue: 0,0:03:07.31,0:03:09.09,英文,,0,0,0,,But I don't like this.
Dialogue: 0,0:03:07.31,0:03:09.09,中文,,0,0,0,,但我不喜欢这样
Dialogue: 0,0:03:09.09,0:03:10.68,英文,,0,0,0,,So do you like this?
Dialogue: 0,0:03:09.09,0:03:10.68,中文,,0,0,0,,那么你喜欢这样吗
Dialogue: 0,0:03:10.68,0:03:12.32,英文,,0,0,0,,Do you not like this?
Dialogue: 0,0:03:10.68,0:03:12.32,中文,,0,0,0,,你不喜欢这个吗
Dialogue: 0,0:03:12.32,0:03:13.08,英文,,0,0,0,,Tell me why you like it.
Dialogue: 0,0:03:12.32,0:03:13.08,中文,,0,0,0,,告诉我你为什么喜欢它
Dialogue: 0,0:03:13.08,0:03:14.98,英文,,0,0,0,,Tell me why you don't like it.
Dialogue: 0,0:03:13.08,0:03:14.98,中文,,0,0,0,,告诉我你为什么不喜欢它
Dialogue: 0,0:03:14.98,0:03:16.12,英文,,0,0,0,,I saw thumbs down.
Dialogue: 0,0:03:14.98,0:03:16.12,中文,,0,0,0,,我看到了大拇指向下
Dialogue: 0,0:03:16.12,0:03:16.50,英文,,0,0,0,,Why?
Dialogue: 0,0:03:16.12,0:03:16.50,中文,,0,0,0,,为什么
Dialogue: 0,0:03:16.50,0:03:17.94,英文,,0,0,0,,Why?
Dialogue: 0,0:03:16.50,0:03:17.94,中文,,0,0,0,,为什么
Dialogue: 0,0:03:17.94,0:03:20.88,英文,,0,0,0,,Someone shouted something.
Dialogue: 0,0:03:17.94,0:03:20.88,中文,,0,0,0,,有人喊了些什么
Dialogue: 0,0:03:20.88,0:03:21.04,英文,,0,0,0,,No?
Dialogue: 0,0:03:20.88,0:03:21.04,中文,,0,0,0,,不是吗?
Dialogue: 0,0:03:21.04,0:03:23.16,英文,,0,0,0,,11.
Dialogue: 0,0:03:21.04,0:03:23.16,中文,,0,0,0,,11.
Dialogue: 0,0:03:23.16,0:03:25.74,英文,,0,0,0,,I don't understand.
Dialogue: 0,0:03:23.16,0:03:25.74,中文,,0,0,0,,我不明白
Dialogue: 0,0:03:25.74,0:03:28.32,英文,,0,0,0,,I don't understand.
Dialogue: 0,0:03:25.74,0:03:28.32,中文,,0,0,0,,我不明白
Dialogue: 0,0:03:28.32,0:03:30.40,英文,,0,0,0,,You love it.
Dialogue: 0,0:03:28.32,0:03:30.40,中文,,0,0,0,,你喜欢它
Dialogue: 0,0:03:30.40,0:03:36.45,英文,,0,0,0,,Any reason why?
Dialogue: 0,0:03:30.40,0:03:36.45,中文,,0,0,0,,有什么原因吗?
Dialogue: 0,0:03:36.45,0:03:37.85,英文,,0,0,0,,A lot of code, a lot of lines. You're right.
Dialogue: 0,0:03:36.45,0:03:37.85,中文,,0,0,0,,很多代码, 很多行  你说得对
Dialogue: 0,0:03:37.85,0:03:40.61,英文,,0,0,0,,The code is now twice as long as it needs to be.
Dialogue: 0,0:03:37.85,0:03:40.61,中文,,0,0,0,,这段代码现在比必要的长了一倍
Dialogue: 0,0:03:40.61,0:03:48.22,英文,,0,0,0,,And in fact, not only is it twice as long, but it's repeatedly twice as long in the sense that it's the same code twice.
Dialogue: 0,0:03:40.61,0:03:48.22,中文,,0,0,0,,实际上 它不仅是两倍长 而且在某种意义上 它是相同的代码重复了两次
Dialogue: 0,0:03:48.22,0:03:49.24,英文,,0,0,0,,So it didn't need to be the same.
Dialogue: 0,0:03:48.22,0:03:49.24,中文,,0,0,0,,它没必要是相同的
Dialogue: 0,0:03:49.24,0:03:51.31,英文,,0,0,0,,So it's the same code twice.
Dialogue: 0,0:03:49.24,0:03:51.31,中文,,0,0,0,,它是相同的代码两次
Dialogue: 0,0:03:51.31,0:03:55.11,英文,,0,0,0,,I find it kind of gross if you're reading code and the same code appears twice.
Dialogue: 0,0:03:51.31,0:03:55.11,中文,,0,0,0,,如果你在阅读代码时看到相同的代码出现两次 我觉得有点恶心
Dialogue: 0,0:03:55.11,0:03:58.77,英文,,0,0,0,,That's kind of gross. Another problem is, what if you end up creating more lists?
Dialogue: 0,0:03:55.11,0:03:58.77,中文,,0,0,0,,另一个问题是 如果你最终创建了更多的列表怎么办
Dialogue: 0,0:03:58.77,0:04:02.51,英文,,0,0,0,,You're like, actually, I don't just like S lists and A lists.
Dialogue: 0,0:03:58.77,0:04:02.51,中文,,0,0,0,,你会觉得 实际上 我不只喜欢 SLList和 AList
Dialogue: 0,0:04:02.51,0:04:04.84,英文,,0,0,0,,I like D lists, too, doubly-linked lists.
Dialogue: 0,0:04:02.51,0:04:04.84,中文,,0,0,0,,我也喜欢 D 列表 双向链表
Dialogue: 0,0:04:04.84,0:04:10.68,英文,,0,0,0,,Well, then you're going to have to go back and copy-paste a third time to get the longest method to work on D lists.
Dialogue: 0,0:04:04.84,0:04:10.68,中文,,0,0,0,,那么 你将不得不返回并第三次复制粘贴以使最长方法在 D 列表上工作
Dialogue: 0,0:04:10.68,0:04:16.56,英文,,0,0,0,,Or if you create some weird Q list class, you're going to have to create another longest method for the Q list.
Dialogue: 0,0:04:10.68,0:04:16.56,中文,,0,0,0,,或者如果你创建了一些奇怪的 Q 列表类 你将不得不为 Q 列表创建另一个最长方法
Dialogue: 0,0:04:16.56,0:04:17.96,英文,,0,0,0,,Also, it's hard to maintain.
Dialogue: 0,0:04:16.56,0:04:17.96,中文,,0,0,0,,而且 它很难维护
Dialogue: 0,0:04:17.96,0:04:20.44,英文,,0,0,0,,This one's kind of interesting, because a code's not like a car.
Dialogue: 0,0:04:17.96,0:04:20.44,中文,,0,0,0,,这个有点有趣 因为代码不像汽车
Dialogue: 0,0:04:20.44,0:04:22.18,英文,,0,0,0,,It doesn't need maintenance.
Dialogue: 0,0:04:20.44,0:04:22.18,中文,,0,0,0,,它不需要维护
Dialogue: 0,0:04:22.18,0:04:26.80,英文,,0,0,0,,But maybe your code depends on, I don't know, other libraries, and you need to update it now and then.
Dialogue: 0,0:04:22.18,0:04:26.80,中文,,0,0,0,,但也许你的代码依赖于 我不知道 其他库 而且你偶尔需要更新它
Dialogue: 0,0:04:26.80,0:04:28.56,英文,,0,0,0,,Or maybe you go back and discover, you know what?
Dialogue: 0,0:04:26.80,0:04:28.56,中文,,0,0,0,,或者你回去发现 你知道吗
Dialogue: 0,0:04:28.56,0:04:29.86,英文,,0,0,0,,This longest code's kind of slow.
Dialogue: 0,0:04:28.56,0:04:29.86,中文,,0,0,0,,这个最长的代码有点慢
Dialogue: 0,0:04:29.86,0:04:31.38,英文,,0,0,0,,I want to make it faster.
Dialogue: 0,0:04:29.86,0:04:31.38,中文,,0,0,0,,我想让它更快一点
Dialogue: 0,0:04:31.38,0:04:33.88,英文,,0,0,0,,Or you go back in, and you find a bug, and you want to fix it.
Dialogue: 0,0:04:31.38,0:04:33.88,中文,,0,0,0,,或者你回去 发现了一个 bug 想要修复它
Dialogue: 0,0:04:33.88,0:04:40.84,英文,,0,0,0,,Well, now if you have to fix something in one of the methods, you also have to remember to go back and fix it in all the copy-pasted versions.
Dialogue: 0,0:04:33.88,0:04:40.84,中文,,0,0,0,,现在 如果你必须在其中一个方法中修复一些东西 你也必须记得回去在所有复制粘贴的版本中修复它
Dialogue: 0,0:04:40.84,0:04:44.81,英文,,0,0,0,,And if you forget to do that, then you'll have a sad time.
Dialogue: 0,0:04:40.84,0:04:44.81,中文,,0,0,0,,如果你忘了那个 那你就会很难过
Dialogue: 0,0:04:44.81,0:04:49.69,英文,,0,0,0,,There are at least some reasons why I feel that copying the same code three times, not a good idea.
Dialogue: 0,0:04:44.81,0:04:49.69,中文,,0,0,0,,至少有一些理由让我觉得把相同的代码复制三次不是一个好主意
Dialogue: 0,0:04:49.69,0:04:51.51,英文,,0,0,0,,So we've got to find something better.
Dialogue: 0,0:04:49.69,0:04:51.51,中文,,0,0,0,,我们得找到更好的办法
Dialogue: 0,0:04:51.51,0:04:52.43,英文,,0,0,0,,OK.
Dialogue: 0,0:04:52.43,0:04:59.49,英文,,0,0,0,,So to find something better, I have to take a quick detour, give you a grammar lesson, and then we'll come back, talk about why the grammar lesson is necessary.
Dialogue: 0,0:04:52.43,0:04:59.49,中文,,0,0,0,,要找到更好的方法 我得稍微绕个弯 给你上个语法课 然后我们再回来 讨论一下为什么语法课是必要的
Dialogue: 0,0:04:59.49,0:05:02.31,英文,,0,0,0,,So here are some instructions on how to wash a poodle.
Dialogue: 0,0:04:59.49,0:05:02.31,中文,,0,0,0,,这里有一些关于如何给贵宾犬洗澡的说明
Dialogue: 0,0:05:02.31,0:05:05.53,英文,,0,0,0,,So first, brush your poodle before a bath.
Dialogue: 0,0:05:02.31,0:05:05.53,中文,,0,0,0,,首先 在洗澡之前给你的贵宾犬梳毛
Dialogue: 0,0:05:05.53,0:05:07.32,英文,,0,0,0,,2. Use lukewarm water.
Dialogue: 0,0:05:05.53,0:05:07.32,中文,,0,0,0,,2. 使用温水
Dialogue: 0,0:05:07.32,0:05:09.70,英文,,0,0,0,,3. Talk to your poodle in a calm voice.
Dialogue: 0,0:05:07.32,0:05:09.70,中文,,0,0,0,,3. 用平静的声音与你的贵宾犬交谈
Dialogue: 0,0:05:09.70,0:05:11.60,英文,,0,0,0,,4. Use poodle shampoo.
Dialogue: 0,0:05:09.70,0:05:11.60,中文,,0,0,0,,4. 使用贵宾犬洗发水
Dialogue: 0,0:05:11.60,0:05:12.64,英文,,0,0,0,,5. Rinse well.
Dialogue: 0,0:05:11.60,0:05:12.64,中文,,0,0,0,,5. 彻底冲洗
Dialogue: 0,0:05:12.64,0:05:14.00,英文,,0,0,0,,6. Air dry.
Dialogue: 0,0:05:12.64,0:05:14.00,中文,,0,0,0,,6. 晾干
Dialogue: 0,0:05:14.00,0:05:24.71,英文,,0,0,0,,7. Reward your poodle.
Dialogue: 0,0:05:14.00,0:05:24.71,中文,,0,0,0,,7.奖励你的贵宾犬
Dialogue: 0,0:05:24.71,0:05:27.13,英文,,0,0,0,,So, what are the instructions for washing a malamute?
Dialogue: 0,0:05:24.71,0:05:27.13,中文,,0,0,0,,那么 洗马拉穆特犬的说明是什么
Dialogue: 0,0:05:27.13,0:05:28.43,英文,,0,0,0,,Well, it'd be 1.
Dialogue: 0,0:05:27.13,0:05:28.43,中文,,0,0,0,,就是1
Dialogue: 0,0:05:28.43,0:05:30.23,英文,,0,0,0,,Brush your malamute before a bath.
Dialogue: 0,0:05:28.43,0:05:30.23,中文,,0,0,0,,洗澡前先给你的阿拉斯加雪橇犬梳毛
Dialogue: 0,0:05:30.23,0:05:31.39,英文,,0,0,0,,2. Use lukewarm water.
Dialogue: 0,0:05:30.23,0:05:31.39,中文,,0,0,0,,2. 使用微温水
Dialogue: 0,0:05:31.39,0:05:34.23,英文,,0,0,0,,3. Talk to your malamute in a calm voice.
Dialogue: 0,0:05:31.39,0:05:34.23,中文,,0,0,0,,3. 用平静的声音和你的阿拉斯加雪橇犬交流
Dialogue: 0,0:05:34.23,0:05:36.04,英文,,0,0,0,,4. Use malamute shampoo.
Dialogue: 0,0:05:34.23,0:05:36.04,中文,,0,0,0,,4. 使用阿拉斯加雪橇犬洗发水
Dialogue: 0,0:05:36.04,0:05:37.20,英文,,0,0,0,,5. Rinse well.
Dialogue: 0,0:05:36.04,0:05:37.20,中文,,0,0,0,,5. 彻底冲洗
Dialogue: 0,0:05:37.20,0:05:38.20,英文,,0,0,0,,6. Air dry.
Dialogue: 0,0:05:37.20,0:05:38.20,中文,,0,0,0,,6. 自然风干
Dialogue: 0,0:05:38.20,0:05:40.20,英文,,0,0,0,,And 7. Reward your malamute.
Dialogue: 0,0:05:38.20,0:05:40.20,中文,,0,0,0,,7. 奖励你的马拉穆特
Dialogue: 0,0:05:40.20,0:05:42.72,英文,,0,0,0,,Well, that's basically the same thing we were just doing.
Dialogue: 0,0:05:40.20,0:05:42.72,中文,,0,0,0,,这基本上就是我们刚才做的事情
Dialogue: 0,0:05:42.72,0:05:45.74,英文,,0,0,0,,We just took the word poodle and swapped it out with malamute.
Dialogue: 0,0:05:42.72,0:05:45.74,中文,,0,0,0,,我们只是把“贵宾犬”这个词换成了“阿拉斯加雪橇犬”
Dialogue: 0,0:05:45.74,0:05:54.64,英文,,0,0,0,,So when we're faced with this problem in the real world, we're not going to copy-paste this exact same set of dog-washing instructions for every possible dog.
Dialogue: 0,0:05:45.74,0:05:54.64,中文,,0,0,0,,当我们在现实世界面对这个问题时 我们不会为每一种可能的狗都复制粘贴这一套狗洗澡指令
Dialogue: 0,0:05:54.64,0:05:59.45,英文,,0,0,0,,Instead, we might write one general purpose instruction for all types of dogs.
Dialogue: 0,0:05:54.64,0:05:59.45,中文,,0,0,0,,相反 我们可能会写一个适用于所有类型狗的通用指令
Dialogue: 0,0:05:59.45,0:06:09.57,英文,,0,0,0,,So we know a poodle is a dog, a malamute is also a dog, so maybe we'll come up with a set of instructions that works for all types of dogs.
Dialogue: 0,0:05:59.45,0:06:09.57,中文,,0,0,0,,我们知道贵宾犬是一种狗 阿拉斯加雪橇犬也是狗 也许我们会想出一套适用于所有类型狗的指令
Dialogue: 0,0:06:09.57,0:06:11.19,英文,,0,0,0,,So it might look like this.
Dialogue: 0,0:06:09.57,0:06:11.19,中文,,0,0,0,,可能会是这个样子的
Dialogue: 0,0:06:11.19,0:06:13.17,英文,,0,0,0,,Here's the instructions for washing a dog.
Dialogue: 0,0:06:11.19,0:06:13.17,中文,,0,0,0,,这是洗狗的指令
Dialogue: 0,0:06:13.17,0:06:14.75,英文,,0,0,0,,Brush the dog before a bath.
Dialogue: 0,0:06:13.17,0:06:14.75,中文,,0,0,0,,在洗澡之前给狗刷毛
Dialogue: 0,0:06:14.75,0:06:16.13,英文,,0,0,0,,Use lukewarm water.
Dialogue: 0,0:06:14.75,0:06:16.13,中文,,0,0,0,,用温水
Dialogue: 0,0:06:16.13,0:06:18.77,英文,,0,0,0,,I'm not going to read that again, but you get the idea.
Dialogue: 0,0:06:16.13,0:06:18.77,中文,,0,0,0,,我不会再读一遍了 但你明白了吧
Dialogue: 0,0:06:18.77,0:06:19.71,英文,,0,0,0,,And so
Dialogue: 0,0:06:19.71,0:06:24.45,英文,,0,0,0,,I'm not going to expect you to memorize this, but it turns out that in English, there's a fancy word for this.
Dialogue: 0,0:06:19.71,0:06:24.45,中文,,0,0,0,,我不指望你记住这个 但事实证明 在英语中 有一个花哨的词来表示这个
Dialogue: 0,0:06:24.45,0:06:25.83,英文,,0,0,0,,It's a hypernym.
Dialogue: 0,0:06:24.45,0:06:25.83,中文,,0,0,0,,这是一个上位词
Dialogue: 0,0:06:25.83,0:06:35.68,英文,,0,0,0,,And so because poodles are a type of dog, malamutes are a type of dog, then we can say dog is a hypernym of poodle and malamute and so forth.
Dialogue: 0,0:06:25.83,0:06:35.68,中文,,0,0,0,,因为贵宾犬是一种狗 阿拉斯加雪橇犬也是一种狗 那么我们可以说狗是贵宾犬和阿拉斯加雪橇犬等的上位词
Dialogue: 0,0:06:35.68,0:06:41.42,英文,,0,0,0,,So it's a more general purpose word that encompasses all sorts of different specific types of dogs.
Dialogue: 0,0:06:35.68,0:06:41.42,中文,,0,0,0,,这是一个更通用的词 涵盖了各种不同类型的狗
Dialogue: 0,0:06:41.42,0:06:42.66,英文,,0,0,0,,OK.
Dialogue: 0,0:06:42.66,0:06:43.24,英文,,0,0,0,,Great.
Dialogue: 0,0:06:42.66,0:06:43.24,中文,,0,0,0,,太好了
Dialogue: 0,0:06:43.24,0:06:45.76,英文,,0,0,0,,And so it turns out you can also use the other direction.
Dialogue: 0,0:06:43.24,0:06:45.76,中文,,0,0,0,,事实证明你也可以使用另一个方向
Dialogue: 0,0:06:45.76,0:06:48.24,英文,,0,0,0,,You could say poodle is a hyponym of dog.
Dialogue: 0,0:06:45.76,0:06:48.24,中文,,0,0,0,,你可以说贵宾犬是狗的下义词
Dialogue: 0,0:06:48.24,0:06:51.84,英文,,0,0,0,,And that basically says the poodle is a more specific type of dog.
Dialogue: 0,0:06:48.24,0:06:51.84,中文,,0,0,0,,基本上就是说贵宾犬是狗的一个更具体的类型
Dialogue: 0,0:06:51.84,0:06:53.65,英文,,0,0,0,,Now, again, I'm not going to test you on this.
Dialogue: 0,0:06:51.84,0:06:53.65,中文,,0,0,0,,现在 再次强调 我不会考察你这个
Dialogue: 0,0:06:53.65,0:06:55.79,英文,,0,0,0,,You might see this a little bit in Project 2.
Dialogue: 0,0:06:53.65,0:06:55.79,中文,,0,0,0,,你可能会在Project 2中略微看到这个
Dialogue: 0,0:06:55.79,0:07:01.55,英文,,0,0,0,,But the key idea is that in English, people had the same problem, which is you had different types of dogs.
Dialogue: 0,0:06:55.79,0:07:01.55,中文,,0,0,0,,但关键思想是 在英语中 人们遇到了同样的问题 那就是有不同类型的狗
Dialogue: 0,0:07:01.55,0:07:04.35,英文,,0,0,0,,And instead of writing separate instructions, you generalized them.
Dialogue: 0,0:07:01.55,0:07:04.35,中文,,0,0,0,,而不是写不同的指令 你将它们泛化了
Dialogue: 0,0:07:04.35,0:07:08.14,英文,,0,0,0,,You said, here are the instructions for washing any type of dog.
Dialogue: 0,0:07:04.35,0:07:08.14,中文,,0,0,0,,你说 这里有洗任何类型狗的指令
Dialogue: 0,0:07:08.14,0:07:13.32,英文,,0,0,0,,So can we take this idea and put it into Java?
Dialogue: 0,0:07:08.14,0:07:13.32,中文,,0,0,0,,那我们能把这个想法用在Java上吗
Dialogue: 0,0:07:13.32,0:07:20.26,英文,,0,0,0,,Just like we saw from the dog example, it seems clear that SLLists and ALLists are both clearly some kind of list.
Dialogue: 0,0:07:13.32,0:07:20.26,中文,,0,0,0,,就像我们从狗的例子中看到的 SLLists和ALists显然都是某种类型的列表
Dialogue: 0,0:07:20.26,0:07:25.61,英文,,0,0,0,,So if we're using our fancy grammar vocabulary, then we could say list is a hypername.
Dialogue: 0,0:07:20.26,0:07:25.61,中文,,0,0,0,,如果我们使用我们的高级语法词汇 那我们可以说列表是一个超名称
Dialogue: 0,0:07:25.61,0:07:29.43,英文,,0,0,0,,It's like the more general version of SLLists and ALLists.
Dialogue: 0,0:07:25.61,0:07:29.43,中文,,0,0,0,,这就像 SLLists 和 ALists 的更一般版本
Dialogue: 0,0:07:29.43,0:07:36.30,英文,,0,0,0,,Another way of putting it is an S-list is a specific type of list, an A-list is also a specific type of list.
Dialogue: 0,0:07:29.43,0:07:36.30,中文,,0,0,0,,另一种说法是 SLList是一种特定类型的列表 AList也是一种特定类型的列表
Dialogue: 0,0:07:36.30,0:07:41.17,英文,,0,0,0,,And we know this because they have the same interfaces for the user to interact with.
Dialogue: 0,0:07:36.30,0:07:41.17,中文,,0,0,0,,我们知道这一点是因为它们具有相同的用户交互接口
Dialogue: 0,0:07:41.17,0:07:42.65,英文,,0,0,0,,So how do you tell Java this?
Dialogue: 0,0:07:41.17,0:07:42.65,中文,,0,0,0,,那么你如何告诉 Java 呢
Dialogue: 0,0:07:42.65,0:07:45.49,英文,,0,0,0,,How do I tell Java that these are both lists?
Dialogue: 0,0:07:42.65,0:07:45.49,中文,,0,0,0,,我如何告诉 Java 这两个都是列表
Dialogue: 0,0:07:45.49,0:07:49.07,英文,,0,0,0,,So one thing I can do is I can first define a new type.
Dialogue: 0,0:07:45.49,0:07:49.07,中文,,0,0,0,,我可以做的一件事是首先定义一个新类型
Dialogue: 0,0:07:49.07,0:07:51.19,英文,,0,0,0,,Remember, there are a primitive types.
Dialogue: 0,0:07:49.07,0:07:51.19,中文,,0,0,0,,记住 还有一些原始类型
Dialogue: 0,0:07:51.19,0:07:52.93,英文,,0,0,0,,Everything else is a reference type.
Dialogue: 0,0:07:51.19,0:07:52.93,中文,,0,0,0,,其他一切都是引用类型
Dialogue: 0,0:07:52.93,0:07:55.51,英文,,0,0,0,,So I'll define a reference type for the hypername.
Dialogue: 0,0:07:52.93,0:07:55.51,中文,,0,0,0,,我会为超文本引用类型定义一个引用类型
Dialogue: 0,0:07:55.51,0:07:57.15,英文,,0,0,0,,I'll call it list61b.
Dialogue: 0,0:07:55.51,0:07:57.15,中文,,0,0,0,,我会把它叫做List61B
Dialogue: 0,0:07:57.15,0:07:58.85,英文,,0,0,0,,You could have called it other things.
Dialogue: 0,0:07:57.15,0:07:58.85,中文,,0,0,0,,你本可以叫它其他名字
Dialogue: 0,0:07:58.85,0:08:03.19,英文,,0,0,0,,And then I will tell Java that an S list is actually a specific type of list.
Dialogue: 0,0:07:58.85,0:08:03.19,中文,,0,0,0,,然后我会告诉Java SLList实际上是一种特定类型的列表
Dialogue: 0,0:08:03.19,0:08:04.44,英文,,0,0,0,,So it's an A list.
Dialogue: 0,0:08:03.19,0:08:04.44,中文,,0,0,0,,它是一个AList
Dialogue: 0,0:08:04.44,0:08:05.28,英文,,0,0,0,,OK.
Dialogue: 0,0:08:05.28,0:08:08.38,英文,,0,0,0,,So with that in mind, we're going to try coding it.
Dialogue: 0,0:08:05.28,0:08:08.38,中文,,0,0,0,,考虑到这一点 我们打算试着编码它
Dialogue: 0,0:08:08.38,0:08:11.12,英文,,0,0,0,,But someone on ad complained that the dark mode is too hard to read.
Dialogue: 0,0:08:08.38,0:08:11.12,中文,,0,0,0,,但广告上有人抱怨暗模式太难读了
Dialogue: 0,0:08:11.12,0:08:13.26,英文,,0,0,0,,So let's bring it to the floor.
Dialogue: 0,0:08:11.12,0:08:13.26,中文,,0,0,0,,让我们把它提到台面上
Dialogue: 0,0:08:13.26,0:08:18.00,英文,,0,0,0,,How should we do this?
Dialogue: 0,0:08:13.26,0:08:18.00,中文,,0,0,0,,我们应该怎么做呢
Dialogue: 0,0:08:18.00,0:08:21.22,英文,,0,0,0,,Are we just going to do a show of hands in person?
Dialogue: 0,0:08:18.00,0:08:21.22,中文,,0,0,0,,我们是不是要在现场通过举手来决定
Dialogue: 0,0:08:21.22,0:08:24.18,英文,,0,0,0,,How do I do that?
Dialogue: 0,0:08:21.22,0:08:24.18,中文,,0,0,0,,我该怎么做呢
Dialogue: 0,0:08:24.18,0:08:26.92,英文,,0,0,0,,I was hoping you would know how to do that.
Dialogue: 0,0:08:24.18,0:08:26.92,中文,,0,0,0,,我希望你知道怎么做
Dialogue: 0,0:08:26.92,0:08:29.19,英文,,0,0,0,,Preferences.
Dialogue: 0,0:08:26.92,0:08:29.19,中文,,0,0,0,,首选项
Dialogue: 0,0:08:29.19,0:08:30.19,英文,,0,0,0,,Oh, there we go.
Dialogue: 0,0:08:29.19,0:08:30.19,中文,,0,0,0,,噢 我们开始吧
Dialogue: 0,0:08:30.19,0:08:30.73,英文,,0,0,0,,Beautiful.
Dialogue: 0,0:08:30.19,0:08:30.73,中文,,0,0,0,,漂亮
Dialogue: 0,0:08:30.73,0:08:35.19,英文,,0,0,0,,OK, so that's light.
Dialogue: 0,0:08:30.73,0:08:35.19,中文,,0,0,0,,那就是光线
Dialogue: 0,0:08:35.19,0:08:36.79,英文,,0,0,0,,I don't know what that reaction was.
Dialogue: 0,0:08:35.19,0:08:36.79,中文,,0,0,0,,我不知道那是什么反应
Dialogue: 0,0:08:36.79,0:08:47.46,英文,,0,0,0,,Dark.
Dialogue: 0,0:08:36.79,0:08:47.46,中文,,0,0,0,,黑暗
Dialogue: 0,0:08:47.46,0:08:50.28,英文,,0,0,0,,Light.
Dialogue: 0,0:08:47.46,0:08:50.28,中文,,0,0,0,,亮
Dialogue: 0,0:08:50.28,0:08:52.47,英文,,0,0,0,,What do you like?
Dialogue: 0,0:08:50.28,0:08:52.47,中文,,0,0,0,,你喜欢什么
Dialogue: 0,0:08:52.47,0:08:56.71,英文,,0,0,0,,Are there other high contrasts?
Dialogue: 0,0:08:52.47,0:08:56.71,中文,,0,0,0,,有其他高对比度吗
Dialogue: 0,0:08:56.71,0:09:04.59,英文,,0,0,0,,I don't know what this is.
Dialogue: 0,0:08:56.71,0:09:04.59,中文,,0,0,0,,我不知道这是什么
Dialogue: 0,0:09:04.59,0:09:09.70,英文,,0,0,0,,Intelligent light.
Dialogue: 0,0:09:04.59,0:09:09.70,中文,,0,0,0,,智能灯
Dialogue: 0,0:09:09.70,0:09:11.34,英文,,0,0,0,,I don't know what we're doing.
Dialogue: 0,0:09:09.70,0:09:11.34,中文,,0,0,0,,我不知道我们在做什么
Dialogue: 0,0:09:11.34,0:09:12.30,英文,,0,0,0,,What do you want?
Dialogue: 0,0:09:11.34,0:09:12.30,中文,,0,0,0,,你想要什么
Dialogue: 0,0:09:12.30,0:09:13.54,英文,,0,0,0,,Light mode?
Dialogue: 0,0:09:12.30,0:09:13.54,中文,,0,0,0,,灯光模式
Dialogue: 0,0:09:13.54,0:09:16.36,英文,,0,0,0,,Yeah.
Dialogue: 0,0:09:13.54,0:09:16.36,中文,,0,0,0,,是的
Dialogue: 0,0:09:16.36,0:09:18.34,英文,,0,0,0,,All right, dark mode.
Dialogue: 0,0:09:16.36,0:09:18.34,中文,,0,0,0,,暗模式
Dialogue: 0,0:09:18.34,0:09:24.97,英文,,0,0,0,,All right, high contrast.
Dialogue: 0,0:09:18.34,0:09:24.97,中文,,0,0,0,,高对比度
Dialogue: 0,0:09:24.97,0:09:26.69,英文,,0,0,0,,All right, seems like dark mode, high contrast.
Dialogue: 0,0:09:24.97,0:09:26.69,中文,,0,0,0,,看起来是暗模式 高对比度
Dialogue: 0,0:09:26.69,0:09:27.79,英文,,0,0,0,,Someone wanted Darkula.
Dialogue: 0,0:09:26.69,0:09:27.79,中文,,0,0,0,,有人想要 Darcula
Dialogue: 0,0:09:27.79,0:09:30.73,英文,,0,0,0,,I think Darkula's the default.
Dialogue: 0,0:09:27.79,0:09:30.73,中文,,0,0,0,,我觉得 Darcula 是默认的
Dialogue: 0,0:09:30.73,0:09:31.55,英文,,0,0,0,,Darkula.
Dialogue: 0,0:09:30.73,0:09:31.55,中文,,0,0,0,,Darcula
Dialogue: 0,0:09:31.55,0:09:33.42,英文,,0,0,0,,I think Darkula's the default.
Dialogue: 0,0:09:31.55,0:09:33.42,中文,,0,0,0,,我觉得Darcula是默认的
Dialogue: 0,0:09:33.42,0:09:35.02,英文,,0,0,0,,OK, so what do people want?
Dialogue: 0,0:09:33.42,0:09:35.02,中文,,0,0,0,,那么人们想要什么呢
Dialogue: 0,0:09:35.02,0:09:36.58,英文,,0,0,0,,Sorry, I wasn't keeping track.
Dialogue: 0,0:09:35.02,0:09:36.58,中文,,0,0,0,,对不起 我没有注意
Dialogue: 0,0:09:36.58,0:09:37.14,英文,,0,0,0,,High contrast.
Dialogue: 0,0:09:36.58,0:09:37.14,中文,,0,0,0,,高对比度
Dialogue: 0,0:09:37.14,0:09:39.78,英文,,0,0,0,,High contrast, OK.
Dialogue: 0,0:09:37.14,0:09:39.78,中文,,0,0,0,,高对比度
Dialogue: 0,0:09:39.78,0:09:40.68,英文,,0,0,0,,Exotic.
Dialogue: 0,0:09:39.78,0:09:40.68,中文,,0,0,0,,异域风情
Dialogue: 0,0:09:40.68,0:09:43.64,英文,,0,0,0,,OK, yeah, maybe we'll get more themes. The next time it'll be like bright pink.
Dialogue: 0,0:09:40.68,0:09:43.64,中文,,0,0,0,,是的 也许我们会有更多的主题  下次就会是亮粉色了
Dialogue: 0,0:09:43.64,0:09:47.26,英文,,0,0,0,,OK.
Dialogue: 0,0:09:47.26,0:09:47.62,英文,,0,0,0,,off.
Dialogue: 0,0:09:47.26,0:09:47.62,中文,,0,0,0,,关闭
Dialogue: 0,0:09:47.62,0:09:48.34,英文,,0,0,0,,OK.
Dialogue: 0,0:09:48.34,0:09:49.32,英文,,0,0,0,,It's like watching a movie.
Dialogue: 0,0:09:48.34,0:09:49.32,中文,,0,0,0,,就像在看电影一样
Dialogue: 0,0:09:49.32,0:09:49.90,英文,,0,0,0,,OK.
Dialogue: 0,0:09:49.90,0:09:51.98,英文,,0,0,0,,All right, so we're doing high contrast.
Dialogue: 0,0:09:49.90,0:09:51.98,中文,,0,0,0,,我们正在进行高对比度
Dialogue: 0,0:09:51.98,0:09:53.06,英文,,0,0,0,,All right, let's do it.
Dialogue: 0,0:09:51.98,0:09:53.06,中文,,0,0,0,,我们开始吧
Dialogue: 0,0:09:53.06,0:09:57.73,英文,,0,0,0,,So as we were saying, OK, let me know if you like it.
Dialogue: 0,0:09:53.06,0:09:57.73,中文,,0,0,0,,就像我们说的 好 你喜欢的话就告诉我
Dialogue: 0,0:09:57.73,0:09:59.07,英文,,0,0,0,,If you don't like it, we'll switch next time.
Dialogue: 0,0:09:57.73,0:09:59.07,中文,,0,0,0,,如果你不喜欢 下次我们换一个
Dialogue: 0,0:09:59.07,0:10:01.33,英文,,0,0,0,,Also, the battery's about to die, so give me a new one.
Dialogue: 0,0:09:59.07,0:10:01.33,中文,,0,0,0,,还有 电池快没电了 给我一个新的
Dialogue: 0,0:10:01.33,0:10:04.55,英文,,0,0,0,,OK.
Dialogue: 0,0:10:04.55,0:10:18.78,英文,,0,0,0,,So what we have to do is we have to define a reference type and then specify that our specific lists, the S list from last time, it's right there in beautiful high contrast font, and the A list, we need to specify that these are specific lists.
Dialogue: 0,0:10:04.55,0:10:18.78,中文,,0,0,0,,我们要做的是定义一个引用类型 然后指定我们的具体列表 上次的SLList 在那美丽的高对比度字体中 还有AList 我们需要指定这些是具体的列表
Dialogue: 0,0:10:18.78,0:10:20.10,英文,,0,0,0,,So let's go back and do it.
Dialogue: 0,0:10:18.78,0:10:20.10,中文,,0,0,0,,让我们回去做吧
Dialogue: 0,0:10:20.10,0:10:22.07,英文,,0,0,0,,So I'm going to say,
Dialogue: 0,0:10:20.10,0:10:22.07,中文,,0,0,0,,我要说的是,
Dialogue: 0,0:10:22.07,0:10:25.85,英文,,0,0,0,,Public, and usually I'd say class to define a new reference type.
Dialogue: 0,0:10:22.07,0:10:25.85,中文,,0,0,0,,公共的,通常我会说类来定义一个新的引用类型
Dialogue: 0,0:10:25.85,0:10:29.49,英文,,0,0,0,,But today I'm going to use a slightly different word for reasons we will see soon.
Dialogue: 0,0:10:25.85,0:10:29.49,中文,,0,0,0,,但今天我要用一个稍微不同的词 原因我们马上会看到
Dialogue: 0,0:10:29.49,0:10:33.08,英文,,0,0,0,,I will say interface, and then I'll call it List61B.
Dialogue: 0,0:10:29.49,0:10:33.08,中文,,0,0,0,,我会说接口,然后我会叫它List61B
Dialogue: 0,0:10:33.08,0:10:35.58,英文,,0,0,0,,That's the name of my new reference type.
Dialogue: 0,0:10:33.08,0:10:35.58,中文,,0,0,0,,这是我新的引用类型的名称
Dialogue: 0,0:10:35.58,0:10:43.76,英文,,0,0,0,,And now, instead of specifying methods and saying, here's the blueprint of how the List61B does things, I'm going to do something a little bit different.
Dialogue: 0,0:10:35.58,0:10:43.76,中文,,0,0,0,,现在,不再指定方法并说,这是List61B如何做事的蓝图,我要做一些稍微不同的事情
Dialogue: 0,0:10:43.76,0:10:46.88,英文,,0,0,0,,I'm going to look through my list, and I'm going to say, you know what?
Dialogue: 0,0:10:43.76,0:10:46.88,中文,,0,0,0,,我要查看我的列表,然后我要说,你知道吗?
Dialogue: 0,0:10:46.88,0:10:48.94,英文,,0,0,0,,My list has an operation called addFirst.
Dialogue: 0,0:10:46.88,0:10:48.94,中文,,0,0,0,,我的列表有一个叫做addFirst的操作
Dialogue: 0,0:10:48.94,0:10:50.78,英文,,0,0,0,,So I'll say public void addFirst.
Dialogue: 0,0:10:48.94,0:10:50.78,中文,,0,0,0,,我会说public void addFirst
Dialogue: 0,0:10:50.78,0:10:51.52,英文,,0,0,0,,Oops.
Dialogue: 0,0:10:50.78,0:10:51.52,中文,,0,0,0,,哎呀
Dialogue: 0,0:10:51.52,0:10:52.66,英文,,0,0,0,,I'll make it generic.
Dialogue: 0,0:10:51.52,0:10:52.66,中文,,0,0,0,,我会使它成为泛型
Dialogue: 0,0:10:52.66,0:10:54.90,英文,,0,0,0,,I'll say addFirst itemX.
Dialogue: 0,0:10:52.66,0:10:54.90,中文,,0,0,0,,我会说addFirst itemX
Dialogue: 0,0:10:54.90,0:11:06.49,英文,,0,0,0,,And instead of actually writing the body and telling the program how to addFirst, I'm actually going to put a semicolon and say, this is the statement that list61b's all need to have an addFirst method.
Dialogue: 0,0:10:54.90,0:11:06.49,中文,,0,0,0,,而且 我并不会真正编写方法体 并告诉程序如何addFirst 我实际上会加上一个分号并说 这就是List61B所有需要有addFirst方法的语句
Dialogue: 0,0:11:06.49,0:11:07.81,英文,,0,0,0,,How is it implemented?
Dialogue: 0,0:11:06.49,0:11:07.81,中文,,0,0,0,,它是如何实现的
Dialogue: 0,0:11:07.81,0:11:09.45,英文,,0,0,0,,That's specific to each list.
Dialogue: 0,0:11:07.81,0:11:09.45,中文,,0,0,0,,这是针对每个列表的具体情况
Dialogue: 0,0:11:09.45,0:11:11.67,英文,,0,0,0,,But all lists have an addFirst.
Dialogue: 0,0:11:09.45,0:11:11.67,中文,,0,0,0,,但所有列表都有一个 addFirst
Dialogue: 0,0:11:11.67,0:11:15.47,英文,,0,0,0,,So this is like a blueprint of what all lists need to be able to do.
Dialogue: 0,0:11:11.67,0:11:15.47,中文,,0,0,0,,这就像所有列表需要能够做的蓝图
Dialogue: 0,0:11:15.47,0:11:18.89,英文,,0,0,0,,So we can keep going, public void addLast, also itemX.
Dialogue: 0,0:11:15.47,0:11:18.89,中文,,0,0,0,,我们可以继续 public void addLast 还有 itemX
Dialogue: 0,0:11:18.89,0:11:20.53,英文,,0,0,0,,And again, I'm not going to write how to do it.
Dialogue: 0,0:11:18.89,0:11:20.53,中文,,0,0,0,,再说一遍 我不会写如何做
Dialogue: 0,0:11:20.53,0:11:24.26,英文,,0,0,0,,I'm just going to say, this list has to be able to addLast.
Dialogue: 0,0:11:20.53,0:11:24.26,中文,,0,0,0,,我只会说 这个列表必须能够 addLast
Dialogue: 0,0:11:24.26,0:11:25.38,英文,,0,0,0,,So I could go through and do this.
Dialogue: 0,0:11:24.26,0:11:25.38,中文,,0,0,0,,我可以继续并做这个
Dialogue: 0,0:11:25.38,0:11:31.66,英文,,0,0,0,,But maybe to make a more interesting point, I'm actually going to take all of this code and just copy-paste it in to see what happens.
Dialogue: 0,0:11:25.38,0:11:31.66,中文,,0,0,0,,但也许为了更有趣的观点 我打算把所有这些代码都复制粘贴进去看看会发生什么
Dialogue: 0,0:11:31.66,0:11:33.08,英文,,0,0,0,,So I'll take my A list.
Dialogue: 0,0:11:31.66,0:11:33.08,中文,,0,0,0,,我会拿出我的 AList
Dialogue: 0,0:11:33.08,0:11:35.14,英文,,0,0,0,,I will copy-paste it.
Dialogue: 0,0:11:33.08,0:11:35.14,中文,,0,0,0,,我会复制粘贴它
Dialogue: 0,0:11:35.14,0:11:36.04,英文,,0,0,0,,And I'll go through.
Dialogue: 0,0:11:35.14,0:11:36.04,中文,,0,0,0,,然后我会浏览一遍
Dialogue: 0,0:11:36.04,0:11:37.30,英文,,0,0,0,,And Java starts screaming at me.
Dialogue: 0,0:11:36.04,0:11:37.30,中文,,0,0,0,,Java 就开始对我尖叫了
Dialogue: 0,0:11:37.30,0:11:39.38,英文,,0,0,0,,So we'll go through and try to fix some things.
Dialogue: 0,0:11:37.30,0:11:39.38,中文,,0,0,0,,我们会逐步查看并尝试修复一些问题
Dialogue: 0,0:11:39.38,0:11:44.44,英文,,0,0,0,,So first, it says, these instance variables, well, they're not specific to all lists.
Dialogue: 0,0:11:39.38,0:11:44.44,中文,,0,0,0,,首先 它说 这些实例变量 它们并不适用于所有列表
Dialogue: 0,0:11:44.44,0:11:45.74,英文,,0,0,0,,They're specific to an AList.
Dialogue: 0,0:11:44.44,0:11:45.74,中文,,0,0,0,,它们是特定于 AList 的
Dialogue: 0,0:11:45.74,0:11:47.41,英文,,0,0,0,,So not all lists have an array.
Dialogue: 0,0:11:45.74,0:11:47.41,中文,,0,0,0,,并非所有的列表都有一个数组
Dialogue: 0,0:11:47.41,0:11:50.05,英文,,0,0,0,,In fact, SLists don't have a backing array at all.
Dialogue: 0,0:11:47.41,0:11:50.05,中文,,0,0,0,,事实上 SLLists 根本没有支持数组
Dialogue: 0,0:11:50.05,0:11:51.55,英文,,0,0,0,,Some lists maybe don't even have a size.
Dialogue: 0,0:11:50.05,0:11:51.55,中文,,0,0,0,,有些列表甚至可能没有大小
Dialogue: 0,0:11:51.55,0:11:53.89,英文,,0,0,0,,Maybe they just compute the size on demand.
Dialogue: 0,0:11:51.55,0:11:53.89,中文,,0,0,0,,也许它们只是按需计算大小
Dialogue: 0,0:11:53.89,0:11:56.15,英文,,0,0,0,,So these are not things that all lists have.
Dialogue: 0,0:11:53.89,0:11:56.15,中文,,0,0,0,,这些不是所有列表都有的东西
Dialogue: 0,0:11:56.15,0:11:57.37,英文,,0,0,0,,So we'll get rid of them.
Dialogue: 0,0:11:56.15,0:11:57.37,中文,,0,0,0,,我们会摆脱它们
Dialogue: 0,0:11:57.37,0:11:58.43,英文,,0,0,0,,I don't want a constructor.
Dialogue: 0,0:11:57.37,0:11:58.43,中文,,0,0,0,,我不想要构造函数
Dialogue: 0,0:11:58.43,0:11:59.99,英文,,0,0,0,,It's not obvious that I don't.
Dialogue: 0,0:11:58.43,0:11:59.99,中文,,0,0,0,,不明显我不想要
Dialogue: 0,0:11:59.99,0:12:03.31,英文,,0,0,0,,But if you come back next time, it might be a little more obvious.
Dialogue: 0,0:11:59.99,0:12:03.31,中文,,0,0,0,,但如果你下次回来 可能会更明显一些
Dialogue: 0,0:12:03.31,0:12:03.77,英文,,0,0,0,,Insert.
Dialogue: 0,0:12:03.31,0:12:03.77,中文,,0,0,0,,插入
Dialogue: 0,0:12:03.77,0:12:05.65,英文,,0,0,0,,Yeah, I think all lists should be able to insert.
Dialogue: 0,0:12:03.77,0:12:05.65,中文,,0,0,0,,是啊 我觉得所有的列表都应该能够插入
Dialogue: 0,0:12:05.65,0:12:10.88,英文,,0,0,0,,So instead of having the body, I will just declare that all lists have to be able to insert.
Dialogue: 0,0:12:05.65,0:12:10.88,中文,,0,0,0,,我不会再写出具体的方法 我只会声明所有的列表都必须能够插入
Dialogue: 0,0:12:10.88,0:12:12.48,英文,,0,0,0,,What about resizing?
Dialogue: 0,0:12:10.88,0:12:12.48,中文,,0,0,0,,调整大小呢
Dialogue: 0,0:12:12.48,0:12:14.82,英文,,0,0,0,,Well, that's not really part of being a list, right?
Dialogue: 0,0:12:12.48,0:12:14.82,中文,,0,0,0,,那不是列表的一部分 对吧
Dialogue: 0,0:12:14.82,0:12:17.50,英文,,0,0,0,,Like, S lists, D lists, they don't resize at all.
Dialogue: 0,0:12:14.82,0:12:17.50,中文,,0,0,0,,比如 SLList D列表 它们根本不会调整大小
Dialogue: 0,0:12:17.50,0:12:20.26,英文,,0,0,0,,So, in fact, this one we don't need.
Dialogue: 0,0:12:17.50,0:12:20.26,中文,,0,0,0,,实际上 我们不需要这个
Dialogue: 0,0:12:20.26,0:12:22.62,英文,,0,0,0,,And another way you can tell that it's not needed is, like, it's private.
Dialogue: 0,0:12:20.26,0:12:22.62,中文,,0,0,0,,另一种你可以判断它不需要的方式是 就像 它是私有的
Dialogue: 0,0:12:22.62,0:12:23.90,英文,,0,0,0,,We don't need a private method.
Dialogue: 0,0:12:22.62,0:12:23.90,中文,,0,0,0,,我们不需要一个私有方法
Dialogue: 0,0:12:23.90,0:12:26.20,英文,,0,0,0,,Those are private implementation details.
Dialogue: 0,0:12:23.90,0:12:26.20,中文,,0,0,0,,那些都是私有的实现细节
Dialogue: 0,0:12:26.20,0:12:29.83,英文,,0,0,0,,They're not things that the user is going to use to interact with the list.
Dialogue: 0,0:12:26.20,0:12:29.83,中文,,0,0,0,,它们不是用户用来与列表交互的东西
Dialogue: 0,0:12:29.83,0:12:30.89,英文,,0,0,0,,What about at first?
Dialogue: 0,0:12:29.83,0:12:30.89,中文,,0,0,0,,首先怎么样
Dialogue: 0,0:12:30.89,0:12:32.05,英文,,0,0,0,,I like that.
Dialogue: 0,0:12:30.89,0:12:32.05,中文,,0,0,0,,我喜欢那个
Dialogue: 0,0:12:32.05,0:12:33.77,英文,,0,0,0,,I think Liz should be able to add first.
Dialogue: 0,0:12:32.05,0:12:33.77,中文,,0,0,0,,我觉得Liz应该能够首先添加
Dialogue: 0,0:12:33.77,0:12:34.71,英文,,0,0,0,,What about add last?
Dialogue: 0,0:12:33.77,0:12:34.71,中文,,0,0,0,,最后再添加呢
Dialogue: 0,0:12:34.71,0:12:35.45,英文,,0,0,0,,I like it.
Dialogue: 0,0:12:34.71,0:12:35.45,中文,,0,0,0,,我喜欢它
Dialogue: 0,0:12:35.45,0:12:36.85,英文,,0,0,0,,What about get first?
Dialogue: 0,0:12:35.45,0:12:36.85,中文,,0,0,0,,首先获取呢
Dialogue: 0,0:12:36.85,0:12:37.64,英文,,0,0,0,,It's good.
Dialogue: 0,0:12:36.85,0:12:37.64,中文,,0,0,0,,这很好
Dialogue: 0,0:12:37.64,0:12:38.78,英文,,0,0,0,,Get last?
Dialogue: 0,0:12:37.64,0:12:38.78,中文,,0,0,0,,拿到最后的?
Dialogue: 0,0:12:38.78,0:12:39.86,英文,,0,0,0,,Okay, good.
Dialogue: 0,0:12:38.78,0:12:39.86,中文,,0,0,0,,很好
Dialogue: 0,0:12:39.86,0:12:40.48,英文,,0,0,0,,Get?
Dialogue: 0,0:12:39.86,0:12:40.48,中文,,0,0,0,,拿到?
Dialogue: 0,0:12:40.48,0:12:41.12,英文,,0,0,0,,Good.
Dialogue: 0,0:12:41.12,0:12:42.20,英文,,0,0,0,,Having fun.
Dialogue: 0,0:12:41.12,0:12:42.20,中文,,0,0,0,,玩得开心
Dialogue: 0,0:12:42.20,0:12:42.90,英文,,0,0,0,,Size?
Dialogue: 0,0:12:42.20,0:12:42.90,中文,,0,0,0,,大小?
Dialogue: 0,0:12:42.90,0:12:43.81,英文,,0,0,0,,Good.
Dialogue: 0,0:12:43.81,0:12:45.29,英文,,0,0,0,,And remove last?
Dialogue: 0,0:12:43.81,0:12:45.29,中文,,0,0,0,,然后删除最后一个吗
Dialogue: 0,0:12:45.29,0:12:46.75,英文,,0,0,0,,Also good.
Dialogue: 0,0:12:45.29,0:12:46.75,中文,,0,0,0,,也可以
Dialogue: 0,0:12:46.75,0:12:47.29,英文,,0,0,0,,OK, great.
Dialogue: 0,0:12:46.75,0:12:47.29,中文,,0,0,0,,太棒了
Dialogue: 0,0:12:47.29,0:12:54.29,英文,,0,0,0,,So what I've done here is I've specified a type that tells me the blueprint of what things the list61b has to do.
Dialogue: 0,0:12:47.29,0:12:54.29,中文,,0,0,0,,我在这里做的是指定了一个类型 告诉我列表61B必须做的事情的蓝图
Dialogue: 0,0:12:54.29,0:12:59.14,英文,,0,0,0,,So this is a list of all things that a 61b has to do, a list61b has to do.
Dialogue: 0,0:12:54.29,0:12:59.14,中文,,0,0,0,,这是一个列表 列出了61B必须做的所有事情 一个列表61B必须做的事情
Dialogue: 0,0:12:59.14,0:13:04.36,英文,,0,0,0,,If I give you a list61b object, you can be certain that it has all of these methods.
Dialogue: 0,0:12:59.14,0:13:04.36,中文,,0,0,0,,如果我给你一个List61B对象 你可以肯定它有所有这些方法
Dialogue: 0,0:13:04.36,0:13:06.24,英文,,0,0,0,,OK, great.
Dialogue: 0,0:13:04.36,0:13:06.24,中文,,0,0,0,,太棒了
Dialogue: 0,0:13:06.24,0:13:07.98,英文,,0,0,0,,So that was the first step.
Dialogue: 0,0:13:06.24,0:13:07.98,中文,,0,0,0,,这是第一步
Dialogue: 0,0:13:07.98,0:13:09.88,英文,,0,0,0,,We use the word interface instead of class.
Dialogue: 0,0:13:07.98,0:13:09.88,中文,,0,0,0,,我们使用接口这个词代替类
Dialogue: 0,0:13:09.88,0:13:14.88,英文,,0,0,0,,And the key idea here is that we didn't tell you how the list did its operations.
Dialogue: 0,0:13:09.88,0:13:14.88,中文,,0,0,0,,而关键的想法在于 我们没有告诉你列表如何执行它的操作
Dialogue: 0,0:13:14.88,0:13:16.12,英文,,0,0,0,,How do you add last?
Dialogue: 0,0:13:14.88,0:13:16.12,中文,,0,0,0,,你如何添加最后一个元素
Dialogue: 0,0:13:16.12,0:13:17.37,英文,,0,0,0,,Do you add a link?
Dialogue: 0,0:13:16.12,0:13:17.37,中文,,0,0,0,,你添加一个链接吗
Dialogue: 0,0:13:17.37,0:13:19.63,英文,,0,0,0,,Do you change the array? We didn't tell you that.
Dialogue: 0,0:13:17.37,0:13:19.63,中文,,0,0,0,,你改变数组吗  我们没有告诉你这一点
Dialogue: 0,0:13:19.63,0:13:23.67,英文,,0,0,0,,We just told you a list of what that object had to be able to do.
Dialogue: 0,0:13:19.63,0:13:23.67,中文,,0,0,0,,我们刚刚告诉了你一个对象必须能做什么的清单
Dialogue: 0,0:13:23.67,0:13:25.09,英文,,0,0,0,,So here's the interface.
Dialogue: 0,0:13:23.67,0:13:25.09,中文,,0,0,0,,这就是接口
Dialogue: 0,0:13:25.09,0:13:28.75,英文,,0,0,0,,Instead of having methods, they all end in semicolons now.
Dialogue: 0,0:13:25.09,0:13:28.75,中文,,0,0,0,,现在不再有方法了 它们都以分号结尾
Dialogue: 0,0:13:28.75,0:13:30.51,英文,,0,0,0,,OK, that was step one.
Dialogue: 0,0:13:28.75,0:13:30.51,中文,,0,0,0,,那是第一步
Dialogue: 0,0:13:30.51,0:13:40.16,英文,,0,0,0,,Now we have to go through and do the second step, which is now that we have our general purpose list, we need to specify that A lists and S lists, they are specific types of lists.
Dialogue: 0,0:13:30.51,0:13:40.16,中文,,0,0,0,,现在我们必须继续进行第二步 现在我们有了通用列表 我们需要指定AList和SLList 它们是特定类型的列表
Dialogue: 0,0:13:40.16,0:13:42.76,英文,,0,0,0,,Because right now, A list could be in the old class.
Dialogue: 0,0:13:40.16,0:13:42.76,中文,,0,0,0,,因为现在 AList可能在旧类中
Dialogue: 0,0:13:42.76,0:13:46.96,英文,,0,0,0,,I need to tell Java that an A list is a specific type of list 61b.
Dialogue: 0,0:13:42.76,0:13:46.96,中文,,0,0,0,,我需要告诉Java AList是一种特定类型的列表61B
Dialogue: 0,0:13:46.96,0:13:47.92,英文,,0,0,0,,So let's do that.
Dialogue: 0,0:13:46.96,0:13:47.92,中文,,0,0,0,,那么我们就这样做吧
Dialogue: 0,0:13:47.92,0:13:55.27,英文,,0,0,0,,So the magic word I'm going to use, I know these lectures sometimes introduce a lot of extra words, but the magic word I'm going to use is implements.
Dialogue: 0,0:13:47.92,0:13:55.27,中文,,0,0,0,,我要使用的魔术词是implements 我知道有时候这些讲座会引入很多额外的词 但我要使用的魔术词是implements
Dialogue: 0,0:13:55.27,0:13:57.69,英文,,0,0,0,,And I'll say, implements list 61b.
Dialogue: 0,0:13:55.27,0:13:57.69,中文,,0,0,0,,我会说implements List61B
Dialogue: 0,0:13:57.69,0:14:02.07,英文,,0,0,0,,And by saying that, I'm telling to Java, this A list is not just any type of object.
Dialogue: 0,0:13:57.69,0:14:02.07,中文,,0,0,0,,通过这样说 我在告诉Java 这个列表不只是任何类型的对象
Dialogue: 0,0:14:02.07,0:14:03.87,英文,,0,0,0,,It's a specific list 61b.
Dialogue: 0,0:14:02.07,0:14:03.87,中文,,0,0,0,,它是一个特定的61B列表
Dialogue: 0,0:14:03.87,0:14:07.43,英文,,0,0,0,,It's like saying a Malamute is not just any type of object.
Dialogue: 0,0:14:03.87,0:14:07.43,中文,,0,0,0,,这就像说Malamute不只是任何类型的对象
Dialogue: 0,0:14:07.43,0:14:10.15,英文,,0,0,0,,It's specifically a type of dog.
Dialogue: 0,0:14:07.43,0:14:10.15,中文,,0,0,0,,它是一个特定类型的狗
Dialogue: 0,0:14:10.15,0:14:12.93,英文,,0,0,0,,So I'll say, A list implements list 61b.
Dialogue: 0,0:14:10.15,0:14:12.93,中文,,0,0,0,,我会说 一个列表实现列表61B
Dialogue: 0,0:14:12.93,0:14:17.36,英文,,0,0,0,,And I will come to S list and also say that it implements list 61b.
Dialogue: 0,0:14:12.93,0:14:17.36,中文,,0,0,0,,我也会来到SLList 同时也会说它实现了列表61B
Dialogue: 0,0:14:17.36,0:14:22.16,英文,,0,0,0,,So this is me telling Java, these are both specific types of lists.
Dialogue: 0,0:14:17.36,0:14:22.16,中文,,0,0,0,,这就是我告诉Java的 这两者都是特定类型的列表
Dialogue: 0,0:14:22.16,0:14:25.22,英文,,0,0,0,,I guess the generic word here was blorp.
Dialogue: 0,0:14:22.16,0:14:25.22,中文,,0,0,0,,我猜这里的通用词是blorp
Dialogue: 0,0:14:25.22,0:14:26.26,英文,,0,0,0,,Great.
Dialogue: 0,0:14:26.26,0:14:30.13,英文,,0,0,0,,So I tell Java, in A-list, it's A-list 61B.
Dialogue: 0,0:14:26.26,0:14:30.13,中文,,0,0,0,,我告诉Java 在AList中 它是AList61B
Dialogue: 0,0:14:30.13,0:14:32.79,英文,,0,0,0,,As S-list, you are also A-list 61B.
Dialogue: 0,0:14:30.13,0:14:32.79,中文,,0,0,0,,作为SLList 你也是AList61B
Dialogue: 0,0:14:32.79,0:14:38.61,英文,,0,0,0,,And now the compiler knows that this is the hypernym-hypoonym relationship that we want.
Dialogue: 0,0:14:32.79,0:14:38.61,中文,,0,0,0,,现在编译器知道这是我们想要的上下位词关系
Dialogue: 0,0:14:38.61,0:14:39.92,英文,,0,0,0,,So
Dialogue: 0,0:14:38.61,0:14:39.92,中文,,0,0,0,,这样
Dialogue: 0,0:14:39.92,0:14:40.61,英文,,0,0,0,,That's good.
Dialogue: 0,0:14:39.92,0:14:40.61,中文,,0,0,0,,这很好
Dialogue: 0,0:14:40.61,0:14:41.69,英文,,0,0,0,,What's the whole point of that?
Dialogue: 0,0:14:40.61,0:14:41.69,中文,,0,0,0,,那有什么意义呢
Dialogue: 0,0:14:41.69,0:14:51.84,英文,,0,0,0,,Well, the point is this, because now I can come in here and say this longest method that we were about to copy-paste five different times for S-lists and A-lists, and it was going to be horrible.
Dialogue: 0,0:14:41.69,0:14:51.84,中文,,0,0,0,,重点是 因为现在我可以进来并说这是我们将要为SLList和AList复制粘贴五次的最长方法 而且这将会很可怕
Dialogue: 0,0:14:51.84,0:14:56.22,英文,,0,0,0,,Well, here's the trick, which is this is not necessarily an S-list.
Dialogue: 0,0:14:51.84,0:14:56.22,中文,,0,0,0,,这里的诀窍是 这不一定是SLList
Dialogue: 0,0:14:56.22,0:14:57.32,英文,,0,0,0,,It's not an A-list.
Dialogue: 0,0:14:56.22,0:14:57.32,中文,,0,0,0,,这不是AList
Dialogue: 0,0:14:57.32,0:15:00.62,英文,,0,0,0,,What if this was just any sort of low 61B?
Dialogue: 0,0:14:57.32,0:15:00.62,中文,,0,0,0,,如果这只是任何一种低 61B 的话 会怎样呢
Dialogue: 0,0:15:00.62,0:15:01.54,英文,,0,0,0,,Ah.
Dialogue: 0,0:15:00.62,0:15:01.54,中文,,0,0,0,,啊
Dialogue: 0,0:15:01.54,0:15:08.22,英文,,0,0,0,,Then when I come down here, if I have an A list and I pass it in, that's OK, because A lists are a specific type of list.
Dialogue: 0,0:15:01.54,0:15:08.22,中文,,0,0,0,,那么当我下来这里的时候 如果我有一个 AList 并且我把它传进来 那没问题 因为 AList是一种特定类型的列表
Dialogue: 0,0:15:08.22,0:15:10.76,英文,,0,0,0,,What if I had an S list instead?
Dialogue: 0,0:15:08.22,0:15:10.76,中文,,0,0,0,,如果我有一个 SLList呢
Dialogue: 0,0:15:10.76,0:15:12.81,英文,,0,0,0,,Well, that's also OK.
Dialogue: 0,0:15:10.76,0:15:12.81,中文,,0,0,0,,那也没问题
Dialogue: 0,0:15:12.81,0:15:14.29,英文,,0,0,0,,And Java is OK with that, too.
Dialogue: 0,0:15:12.81,0:15:14.29,中文,,0,0,0,,Java 也可以接受这样
Dialogue: 0,0:15:14.29,0:15:21.93,英文,,0,0,0,,And if later I came around and I had, like, oh, let's build a D list, which also is a type of list 61B, then this longest method would still work.
Dialogue: 0,0:15:14.29,0:15:21.93,中文,,0,0,0,,如果后来我又想到 比如 让我们构建一个 D 列表 它也是一种 61B 列表的类型 那么这个 longest 方法仍然可以工作
Dialogue: 0,0:15:21.93,0:15:24.73,英文,,0,0,0,,I'd still get, hopefully, the word watching.
Dialogue: 0,0:15:21.93,0:15:24.73,中文,,0,0,0,,我还是会希望能够理解这个词的含义
Dialogue: 0,0:15:24.73,0:15:25.67,英文,,0,0,0,,OK.
Dialogue: 0,0:15:25.67,0:15:28.47,英文,,0,0,0,,So watching in high contrast.
Dialogue: 0,0:15:25.67,0:15:28.47,中文,,0,0,0,,在高对比度下观看
Dialogue: 0,0:15:28.47,0:15:30.20,英文,,0,0,0,,OK.
Dialogue: 0,0:15:30.20,0:15:36.04,英文,,0,0,0,,That's what the blueprint was, and now we were able to use list60.umb as the argument.
Dialogue: 0,0:15:30.20,0:15:36.04,中文,,0,0,0,,这就是蓝图的内容 现在我们可以将 List61B 作为参数使用
Dialogue: 0,0:15:36.04,0:15:43.10,英文,,0,0,0,,And now we can take in anything you want, A lists, S lists, even lists that have not been invented yet, which is pretty cool.
Dialogue: 0,0:15:36.04,0:15:43.10,中文,,0,0,0,,现在我们可以接受任何你想要的东西 AList SLList 甚至还有尚未发明的列表 这相当酷
Dialogue: 0,0:15:43.10,0:15:44.40,英文,,0,0,0,,Egg boys. I don't know what that is.
Dialogue: 0,0:15:43.10,0:15:44.40,中文,,0,0,0,,男孩们  我不知道那是什么
Dialogue: 0,0:15:44.40,0:15:45.24,英文,,0,0,0,,OK.
Dialogue: 0,0:15:45.24,0:15:51.88,英文,,0,0,0,,So let's talk about what happened, which was overwriting, and contrast it with something we saw earlier, which was overloading.
Dialogue: 0,0:15:45.24,0:15:51.88,中文,,0,0,0,,那么让我们谈谈发生了什么 也就是覆盖 然后将其与我们早些时候看到的内容进行对比 那是过载
Dialogue: 0,0:15:51.88,0:15:58.65,英文,,0,0,0,,So what we saw was that we had this list60.umb interface, and it had a method signature called addLast.
Dialogue: 0,0:15:51.88,0:15:58.65,中文,,0,0,0,,我们看到的是 我们有这个List61B接口 它有一个名为addLast的方法签名
Dialogue: 0,0:15:58.65,0:16:00.21,英文,,0,0,0,,And the method itself was blank.
Dialogue: 0,0:15:58.65,0:16:00.21,中文,,0,0,0,,而方法本身是空白的
Dialogue: 0,0:16:00.21,0:16:01.53,英文,,0,0,0,,We just added a semicolon.
Dialogue: 0,0:16:00.21,0:16:01.53,中文,,0,0,0,,我们只是加了一个分号
Dialogue: 0,0:16:01.53,0:16:03.61,英文,,0,0,0,,There was no actual code in here.
Dialogue: 0,0:16:01.53,0:16:03.61,中文,,0,0,0,,这里实际上没有实际的代码
Dialogue: 0,0:16:03.61,0:16:08.54,英文,,0,0,0,,So this signature says, the interface list61b has an add last operation.
Dialogue: 0,0:16:03.61,0:16:08.54,中文,,0,0,0,,这个签名表示 接口List61B具有一个addLast操作
Dialogue: 0,0:16:08.54,0:16:10.06,英文,,0,0,0,,I'm not going to tell you how it's done.
Dialogue: 0,0:16:08.54,0:16:10.06,中文,,0,0,0,,我不打算告诉你它是如何实现的
Dialogue: 0,0:16:10.06,0:16:12.09,英文,,0,0,0,,That is up to each of the specific lists.
Dialogue: 0,0:16:10.06,0:16:12.09,中文,,0,0,0,,这取决于每个特定的列表
Dialogue: 0,0:16:12.09,0:16:14.73,英文,,0,0,0,,But I'm going to tell you that this method exists.
Dialogue: 0,0:16:12.09,0:16:14.73,中文,,0,0,0,,但我会告诉你这个方法是存在的
Dialogue: 0,0:16:14.73,0:16:18.33,英文,,0,0,0,,And then when we came down here to A-list, we had the exact same signature.
Dialogue: 0,0:16:14.73,0:16:18.33,中文,,0,0,0,,然后当我们来到A-list这里时 我们有完全相同的签名
Dialogue: 0,0:16:18.33,0:16:22.80,英文,,0,0,0,,Look, they're the same, public void at last item x.
Dialogue: 0,0:16:18.33,0:16:22.80,中文,,0,0,0,,看 它们是一样的 public void at last item x
Dialogue: 0,0:16:22.80,0:16:27.80,英文,,0,0,0,,And because these method signatures are the exact same, the same name, and the exact same arguments,
Dialogue: 0,0:16:22.80,0:16:27.80,中文,,0,0,0,,由于这些方法签名完全相同 名称也相同 参数也完全相同
Dialogue: 0,0:16:27.80,0:16:35.80,英文,,0,0,0,, then we can say that the argument in the function in the subclass, this addLast method, it overrides the little61b's addLast method.
Dialogue: 0,0:16:27.80,0:16:35.80,中文,,0,0,0,,我们可以说在子类中的函数中的参数 这个addLast方法 覆盖了List61B的addLast方法
Dialogue: 0,0:16:35.80,0:16:44.22,英文,,0,0,0,,So we took this method, which was blank, and we replaced it with this method, which is going to have actual information about how to add last to the S list.
Dialogue: 0,0:16:35.80,0:16:44.22,中文,,0,0,0,,我们拿这个空白的方法 然后用这个方法替换它 这个方法将包含有关如何向SLList添加最后一个的实际信息
Dialogue: 0,0:16:44.22,0:16:47.17,英文,,0,0,0,,So the fancy word for what we did here is overwriting.
Dialogue: 0,0:16:44.22,0:16:47.17,中文,,0,0,0,,我们这里做的事情 用一个花哨的词来说就是覆盖
Dialogue: 0,0:16:47.17,0:16:51.95,英文,,0,0,0,,Exact same function arguments all the way down, so we would call it overwriting.
Dialogue: 0,0:16:47.17,0:16:51.95,中文,,0,0,0,,从头到尾都是完全相同的函数参数 我们会称之为覆盖
Dialogue: 0,0:16:51.95,0:16:52.75,英文,,0,0,0,,OK.
Dialogue: 0,0:16:52.75,0:17:02.65,英文,,0,0,0,,By contrast, the thing we saw earlier where you had the same name but they had different parameters, one of them took in an A-list, one of them took in an S-list, that was called overloading.
Dialogue: 0,0:16:52.75,0:17:02.65,中文,,0,0,0,,相比之下 之前看到的情况是 你有相同的名称 但它们有不同的参数 一个接受 AList 一个接受 SLList 那被称为重载
Dialogue: 0,0:17:02.65,0:17:05.78,英文,,0,0,0,,So these two, at first, they're going to seem kind of similar.
Dialogue: 0,0:17:02.65,0:17:05.78,中文,,0,0,0,,这两者起初看起来可能有点相似
Dialogue: 0,0:17:05.78,0:17:08.96,英文,,0,0,0,,Here's a slide that tries to tease them apart.
Dialogue: 0,0:17:05.78,0:17:08.96,中文,,0,0,0,,这是一张幻灯片 试图把它们区分开
Dialogue: 0,0:17:08.96,0:17:11.04,英文,,0,0,0,,Let's look at public interface animal.
Dialogue: 0,0:17:08.96,0:17:11.04,中文,,0,0,0,,让我们看一下公共接口 animal
Dialogue: 0,0:17:11.04,0:17:12.32,英文,,0,0,0,,This is a statement.
Dialogue: 0,0:17:11.04,0:17:12.32,中文,,0,0,0,,这是一句话
Dialogue: 0,0:17:12.32,0:17:14.28,英文,,0,0,0,,All animals should make noise.
Dialogue: 0,0:17:12.32,0:17:14.28,中文,,0,0,0,,所有animal都应该发出声音
Dialogue: 0,0:17:14.28,0:17:15.92,英文,,0,0,0,,What specific noises are they making?
Dialogue: 0,0:17:14.28,0:17:15.92,中文,,0,0,0,,它们发出什么具体的声音
Dialogue: 0,0:17:15.92,0:17:17.34,英文,,0,0,0,,That depends on the animal.
Dialogue: 0,0:17:15.92,0:17:17.34,中文,,0,0,0,,这取决于animal
Dialogue: 0,0:17:17.34,0:17:20.15,英文,,0,0,0,,And then I can say pig is a subclass of animal.
Dialogue: 0,0:17:17.34,0:17:20.15,中文,,0,0,0,,然后我可以说猪是animal的一个子类
Dialogue: 0,0:17:20.15,0:17:22.79,英文,,0,0,0,,So remember the hyponym-hyponym relationship?
Dialogue: 0,0:17:20.15,0:17:22.79,中文,,0,0,0,,记住下义词-上义词的关系
Dialogue: 0,0:17:22.79,0:17:25.03,英文,,0,0,0,,Pig, you're a specific type of animal.
Dialogue: 0,0:17:22.79,0:17:25.03,中文,,0,0,0,,猪 你是animal的一种具体类型
Dialogue: 0,0:17:25.03,0:17:28.33,英文,,0,0,0,,And your make noise method, it's going to print out oink.
Dialogue: 0,0:17:25.03,0:17:28.33,中文,,0,0,0,,你的makeNoise方法 它会打印出 oink
Dialogue: 0,0:17:28.33,0:17:32.52,英文,,0,0,0,,All right, this is overriding the method of Animal, because this is the subclass.
Dialogue: 0,0:17:28.33,0:17:32.52,中文,,0,0,0,,这是覆盖Animal的方法 因为这是子类
Dialogue: 0,0:17:32.52,0:17:36.48,英文,,0,0,0,,And it's the exact same method signature, public void makeNoise, no arguments.
Dialogue: 0,0:17:32.52,0:17:36.48,中文,,0,0,0,,而且它是完全相同的方法签名 public void makeNoise 没有参数
Dialogue: 0,0:17:36.48,0:17:38.64,英文,,0,0,0,,So Pig overrides the makeNoise method.
Dialogue: 0,0:17:36.48,0:17:38.64,中文,,0,0,0,,Pig覆盖了makeNoise方法
Dialogue: 0,0:17:38.64,0:17:40.74,英文,,0,0,0,,It says this blank one, I don't like it.
Dialogue: 0,0:17:38.64,0:17:40.74,中文,,0,0,0,,它说这个空白的 我不喜欢它
Dialogue: 0,0:17:40.74,0:17:44.37,英文,,0,0,0,,I'm going to write my own more specific makeNoise method.
Dialogue: 0,0:17:40.74,0:17:44.37,中文,,0,0,0,,我要写一个更具体的makeNoise方法
Dialogue: 0,0:17:44.37,0:17:45.59,英文,,0,0,0,,OK.
Dialogue: 0,0:17:45.59,0:17:51.91,英文,,0,0,0,,By contrast, if you look at something like this, where maybe I have another class dog, well, now I have to make noises.
Dialogue: 0,0:17:45.59,0:17:51.91,中文,,0,0,0,,相比之下 如果你看一下这样的情况 也许我有另一个类狗 现在我必须发出声音
Dialogue: 0,0:17:51.91,0:17:55.36,英文,,0,0,0,,But it's not the case that one of these is overriding the other.
Dialogue: 0,0:17:51.91,0:17:55.36,中文,,0,0,0,,但并不是说其中一个覆盖了另一个
Dialogue: 0,0:17:55.36,0:18:02.32,英文,,0,0,0,,Now it's the case that both of these are hanging around, and which one you use depends on which arguments you call the function with.
Dialogue: 0,0:17:55.36,0:18:02.32,中文,,0,0,0,,现在情况是这样 这两个都在那里晃来晃去 你使用哪个取决于你调用函数时传入了哪些参数
Dialogue: 0,0:18:02.32,0:18:04.02,英文,,0,0,0,,So you have to have the same name.
Dialogue: 0,0:18:02.32,0:18:04.02,中文,,0,0,0,,你必须有相同的名称
Dialogue: 0,0:18:04.02,0:18:05.77,英文,,0,0,0,,But they're both hanging around.
Dialogue: 0,0:18:04.02,0:18:05.77,中文,,0,0,0,,但它们都在那里晃来晃去
Dialogue: 0,0:18:05.77,0:18:08.11,英文,,0,0,0,,If you don't pass an argument, then we could use the second one.
Dialogue: 0,0:18:05.77,0:18:08.11,中文,,0,0,0,,如果你不传递参数 那么我们可以使用第二个
Dialogue: 0,0:18:08.11,0:18:11.79,英文,,0,0,0,,That's just like a dog barking at the wall or barking at the tree.
Dialogue: 0,0:18:08.11,0:18:11.79,中文,,0,0,0,,这就像一只狗对着墙叫 或者对着树叫
Dialogue: 0,0:18:11.79,0:18:16.44,英文,,0,0,0,,But maybe if a dog sees another dog and wants to bark at the other dog, maybe use this one.
Dialogue: 0,0:18:11.79,0:18:16.44,中文,,0,0,0,,但也许如果一只狗看到另一只狗并想对着另一只狗叫 也许可以使用这个
Dialogue: 0,0:18:16.44,0:18:18.38,英文,,0,0,0,,So here, makeNoise is overloaded.
Dialogue: 0,0:18:16.44,0:18:18.38,中文,,0,0,0,,在这里 makeNoise 被重载了
Dialogue: 0,0:18:18.38,0:18:21.93,英文,,0,0,0,,And usually, we would not say that one method
Dialogue: 0,0:18:18.38,0:18:21.93,中文,,0,0,0,,而通常 我们不会说一个方法
Dialogue: 0,0:18:21.93,0:18:24.45,英文,,0,0,0,,So here we can say pig overrides make noise.
Dialogue: 0,0:18:21.93,0:18:24.45,中文,,0,0,0,,在这里 我们可以说 pig 重写了 makeNoise
Dialogue: 0,0:18:24.45,0:18:27.19,英文,,0,0,0,,This is just terminology, by the way, not super interesting.
Dialogue: 0,0:18:24.45,0:18:27.19,中文,,0,0,0,,这只是术语 顺便说一句 不是很有趣
Dialogue: 0,0:18:27.19,0:18:29.53,英文,,0,0,0,,But you could say pig overrides make noise.
Dialogue: 0,0:18:27.19,0:18:29.53,中文,,0,0,0,,但你可以说 pig 重写了 makeNoise
Dialogue: 0,0:18:29.53,0:18:33.85,英文,,0,0,0,,But usually, it does not make sense to say that one of these make noise overloads the other.
Dialogue: 0,0:18:29.53,0:18:33.85,中文,,0,0,0,,但通常情况下 说其中一个 makeNoise 重载了另一个是没有意义的
Dialogue: 0,0:18:33.85,0:18:34.91,英文,,0,0,0,,They both exist together.
Dialogue: 0,0:18:33.85,0:18:34.91,中文,,0,0,0,,它们两者是一起存在的
Dialogue: 0,0:18:34.91,0:18:41.01,英文,,0,0,0,,It's like if the power grid starts to go down, you don't say that one person overloaded the other person.
Dialogue: 0,0:18:34.91,0:18:41.01,中文,,0,0,0,,就像电网开始崩溃 你不会说一个人过载了另一个人
Dialogue: 0,0:18:41.01,0:18:45.03,英文,,0,0,0,,You just say the power grid is overloaded, if that makes any sense.
Dialogue: 0,0:18:41.01,0:18:45.03,中文,,0,0,0,,你只会说电网过载了 如果这有任何意义的话
Dialogue: 0,0:18:45.03,0:18:50.03,英文,,0,0,0,,So overloading, turns out, has some real-world uses, like this make noise one is pretty good.
Dialogue: 0,0:18:45.03,0:18:50.03,中文,,0,0,0,,过载 结果表明 有一些现实世界的用途 比如这个制造噪音的用途还不错
Dialogue: 0,0:18:50.03,0:18:52.18,英文,,0,0,0,,I also like this one in the math class.
Dialogue: 0,0:18:50.03,0:18:52.18,中文,,0,0,0,,我也喜欢数学课上的这个
Dialogue: 0,0:18:52.18,0:18:54.82,英文,,0,0,0,,We have an absolute value method for integers.
Dialogue: 0,0:18:52.18,0:18:54.82,中文,,0,0,0,,我们有一个整数的绝对值方法
Dialogue: 0,0:18:54.82,0:18:56.30,英文,,0,0,0,,And then we have another one for doubles.
Dialogue: 0,0:18:54.82,0:18:56.30,中文,,0,0,0,,然后我们有另一个双精度的
Dialogue: 0,0:18:56.30,0:18:57.62,英文,,0,0,0,,They have the same name.
Dialogue: 0,0:18:56.30,0:18:57.62,中文,,0,0,0,,它们有相同的名称
Dialogue: 0,0:18:57.62,0:19:02.16,英文,,0,0,0,,And depending on whether you pass in an integer or a double, the proper one gets called.
Dialogue: 0,0:18:57.62,0:19:02.16,中文,,0,0,0,,而且根据你传递的是整数还是双精度 会调用适当的函数
Dialogue: 0,0:19:02.16,0:19:05.28,英文,,0,0,0,,That's another example of something being overloaded.
Dialogue: 0,0:19:02.16,0:19:05.28,中文,,0,0,0,,这是另一个重载的例子
Dialogue: 0,0:19:05.28,0:19:06.18,英文,,0,0,0,,Question?
Dialogue: 0,0:19:05.28,0:19:06.18,中文,,0,0,0,,问题
Dialogue: 0,0:19:06.18,0:19:13.47,英文,,0,0,0,,Yeah.
Dialogue: 0,0:19:06.18,0:19:13.47,中文,,0,0,0,,是的
Dialogue: 0,0:19:13.47,0:19:19.08,英文,,0,0,0,,Hm, there was a question, which was someone is not happy with the tab here, the extra space.
Dialogue: 0,0:19:13.47,0:19:19.08,中文,,0,0,0,,有一个问题 就是有人对这里的制表符不满意 有多余的空格
Dialogue: 0,0:19:19.08,0:19:21.02,英文,,0,0,0,,Thoughts?
Dialogue: 0,0:19:19.08,0:19:21.02,中文,,0,0,0,,想法
Dialogue: 0,0:19:21.02,0:19:22.84,英文,,0,0,0,,I personally wouldn't add that tab.
Dialogue: 0,0:19:21.02,0:19:22.84,中文,,0,0,0,,我个人不会加那个选项卡
Dialogue: 0,0:19:22.84,0:19:23.94,英文,,0,0,0,,Oh, you wouldn't add it?
Dialogue: 0,0:19:22.84,0:19:23.94,中文,,0,0,0,,哦 你不会加吗
Dialogue: 0,0:19:23.94,0:19:25.74,英文,,0,0,0,,OK, should we fix it?
Dialogue: 0,0:19:23.94,0:19:25.74,中文,,0,0,0,,我们应该修复它吗
Dialogue: 0,0:19:25.74,0:19:28.41,英文,,0,0,0,,I mean, it's my personal style.
Dialogue: 0,0:19:25.74,0:19:28.41,中文,,0,0,0,,我是说 这是我的个人风格
Dialogue: 0,0:19:28.41,0:19:29.55,英文,,0,0,0,,Oh, OK.
Dialogue: 0,0:19:29.55,0:19:33.21,英文,,0,0,0,,So you would like it more like that?
Dialogue: 0,0:19:29.55,0:19:33.21,中文,,0,0,0,,那么你会更喜欢这样吗
Dialogue: 0,0:19:33.21,0:19:34.71,英文,,0,0,0,,Good?
Dialogue: 0,0:19:33.21,0:19:34.71,中文,,0,0,0,,可以吗
Dialogue: 0,0:19:34.71,0:19:36.10,英文,,0,0,0,,OK.
Dialogue: 0,0:19:36.10,0:19:36.69,英文,,0,0,0,,Requested.
Dialogue: 0,0:19:36.10,0:19:36.69,中文,,0,0,0,,已请求
Dialogue: 0,0:19:36.69,0:19:39.65,英文,,0,0,0,,OK, maybe next semester someone will come and add this face back.
Dialogue: 0,0:19:36.69,0:19:39.65,中文,,0,0,0,,也许下个学期会有人回来添加这个表情
Dialogue: 0,0:19:39.65,0:19:40.95,英文,,0,0,0,,OK, cool.
Dialogue: 0,0:19:39.65,0:19:40.95,中文,,0,0,0,,很酷
Dialogue: 0,0:19:40.95,0:19:44.49,英文,,0,0,0,,So there's one more thing we should do just to keep our code more organized.
Dialogue: 0,0:19:40.95,0:19:44.49,中文,,0,0,0,,还有一件事我们应该做 就是为了保持我们的代码更有组织性
Dialogue: 0,0:19:44.49,0:19:49.26,英文,,0,0,0,,So at this point, our overriding methods have completely been implemented.
Dialogue: 0,0:19:44.49,0:19:49.26,中文,,0,0,0,,在这一点上 我们的重写方法已经完全实现了
Dialogue: 0,0:19:49.26,0:19:50.56,英文,,0,0,0,,They work, right?
Dialogue: 0,0:19:49.26,0:19:50.56,中文,,0,0,0,,它们能正常工作 对吧
Dialogue: 0,0:19:50.56,0:19:55.36,英文,,0,0,0,,But I'm going to add a little extra tag just to remind myself what I'm doing.
Dialogue: 0,0:19:50.56,0:19:55.36,中文,,0,0,0,,但我要添加一个小额外标记 只是为了提醒自己我在做什么
Dialogue: 0,0:19:55.36,0:19:59.39,英文,,0,0,0,,And you'll do this too when you're working on projects or whatever else it is.
Dialogue: 0,0:19:55.36,0:19:59.39,中文,,0,0,0,,当你在做项目或其他事情时 你也会这样做
Dialogue: 0,0:19:59.39,0:20:07.31,英文,,0,0,0,,So I am going to go through, and any time I have a method that overrides what the parent class was doing, I'm going to add an extra tag.
Dialogue: 0,0:19:59.39,0:20:07.31,中文,,0,0,0,,我要逐个检查 每当我有一个方法覆盖了父类的方法时 我就会添加一个额外的标记
Dialogue: 0,0:20:07.31,0:20:09.99,英文,,0,0,0,,So I'm going to say, Let's see, I go through.
Dialogue: 0,0:20:07.31,0:20:09.99,中文,,0,0,0,,我要说  让我们看看 我要逐个检查
Dialogue: 0,0:20:09.99,0:20:11.73,英文,,0,0,0,,I didn't overwrite any of this stuff.
Dialogue: 0,0:20:09.99,0:20:11.73,中文,,0,0,0,,我没有覆盖任何这些东西
Dialogue: 0,0:20:11.73,0:20:15.04,英文,,0,0,0,,But aha, the insert method, I did overwrite.
Dialogue: 0,0:20:11.73,0:20:15.04,中文,,0,0,0,,但是 啊哈 插入方法 我确实覆盖了
Dialogue: 0,0:20:15.04,0:20:18.90,英文,,0,0,0,,So I'm going to use the add symbol, kind of like the one I used when I was writing a test.
Dialogue: 0,0:20:15.04,0:20:18.90,中文,,0,0,0,,我将使用添加符号 就像我写测试时用的那个
Dialogue: 0,0:20:18.90,0:20:20.82,英文,,0,0,0,,I'm going to say overwrite.
Dialogue: 0,0:20:18.90,0:20:20.82,中文,,0,0,0,,我会说覆盖
Dialogue: 0,0:20:20.82,0:20:22.90,英文,,0,0,0,,And what does this actually do?
Dialogue: 0,0:20:20.82,0:20:22.90,中文,,0,0,0,,这实际上有什么作用呢
Dialogue: 0,0:20:22.90,0:20:24.34,英文,,0,0,0,,Turns out it doesn't do anything.
Dialogue: 0,0:20:22.90,0:20:24.34,中文,,0,0,0,,结果它什么也没做
Dialogue: 0,0:20:24.34,0:20:27.80,英文,,0,0,0,,So even if I don't have this overwrite tag, I was still overwriting.
Dialogue: 0,0:20:24.34,0:20:27.80,中文,,0,0,0,,即使我没有这个覆盖标签 我还是会覆盖
Dialogue: 0,0:20:27.80,0:20:29.50,英文,,0,0,0,,So what is the point of adding this?
Dialogue: 0,0:20:27.80,0:20:29.50,中文,,0,0,0,,那么添加这个有什么意义呢
Dialogue: 0,0:20:29.50,0:20:30.54,英文,,0,0,0,,It's kind of like a comment.
Dialogue: 0,0:20:29.50,0:20:30.54,中文,,0,0,0,,这有点像是一个注释
Dialogue: 0,0:20:30.54,0:20:35.26,英文,,0,0,0,,It's like a reminder to myself that this insert method is not just any insert method.
Dialogue: 0,0:20:30.54,0:20:35.26,中文,,0,0,0,,就像是对自己的一个提醒 这个插入方法可不是普通的插入方法
Dialogue: 0,0:20:35.26,0:20:45.93,英文,,0,0,0,,It is specifically an overridden insert method because my parent interface had an insert method that was blank, and I replaced it with this new and improved SLList-specific one.
Dialogue: 0,0:20:35.26,0:20:45.93,中文,,0,0,0,,它特别是一个被重写的插入方法 因为我的父接口有一个空白的插入方法 我用这个新的、改进过的 SLList 特定的方法来替代它
Dialogue: 0,0:20:45.93,0:20:54.34,英文,,0,0,0,,So I'm going to go through and add this override tag just to remind myself or the readers of my code, hey, this addFirst method, it didn't just come from anywhere.
Dialogue: 0,0:20:45.93,0:20:54.34,中文,,0,0,0,,我要浏览一下 加上这个覆盖标签 只是为了提醒自己或者代码阅读者 嘿 这个 addFirst 方法 可不是从哪里随便拿来的
Dialogue: 0,0:20:54.34,0:20:58.12,英文,,0,0,0,,It's actually an overridden version of the parent class's addFirst.
Dialogue: 0,0:20:54.34,0:20:58.12,中文,,0,0,0,,它实际上是父类的 addFirst 方法的一个重写版本
Dialogue: 0,0:20:58.12,0:20:59.68,英文,,0,0,0,,Same thing with the addLast.
Dialogue: 0,0:20:58.12,0:20:59.68,中文,,0,0,0,,addLast 也是一样
Dialogue: 0,0:20:59.68,0:21:01.14,英文,,0,0,0,,Same thing with the getFirst.
Dialogue: 0,0:20:59.68,0:21:01.14,中文,,0,0,0,,getFirst 也是一样
Dialogue: 0,0:21:01.14,0:21:02.22,英文,,0,0,0,,I hope you're having fun.
Dialogue: 0,0:21:01.14,0:21:02.22,中文,,0,0,0,,希望你玩得开心
Dialogue: 0,0:21:02.22,0:21:03.70,英文,,0,0,0,,Same thing with the getLast.
Dialogue: 0,0:21:02.22,0:21:03.70,中文,,0,0,0,,跟getLast一样
Dialogue: 0,0:21:03.70,0:21:04.46,英文,,0,0,0,,Maybe not this one.
Dialogue: 0,0:21:03.70,0:21:04.46,中文,,0,0,0,,也许不是这个
Dialogue: 0,0:21:04.46,0:21:07.75,英文,,0,0,0,,This one's private, so we don't want that.
Dialogue: 0,0:21:04.46,0:21:07.75,中文,,0,0,0,,这个是私有的 我们不想要
Dialogue: 0,0:21:07.75,0:21:08.85,英文,,0,0,0,,That one did not overwrite.
Dialogue: 0,0:21:07.75,0:21:08.85,中文,,0,0,0,,那个没有覆盖
Dialogue: 0,0:21:08.85,0:21:14.93,英文,,0,0,0,,So you could see that if I tried to claim to Java, hey, getLastNode is being overwritten, Java says, no, it's not.
Dialogue: 0,0:21:08.85,0:21:14.93,中文,,0,0,0,,你可以看到 如果我试图声明给Java 嘿 getLastNode正在被覆盖 Java说 不 没有
Dialogue: 0,0:21:14.93,0:21:17.59,英文,,0,0,0,,getLastNode is not from list61b.
Dialogue: 0,0:21:14.93,0:21:17.59,中文,,0,0,0,,getLastNode不是来自List61B
Dialogue: 0,0:21:17.59,0:21:19.05,英文,,0,0,0,,You defined this yourself.
Dialogue: 0,0:21:17.59,0:21:19.05,中文,,0,0,0,,这是你自己定义的
Dialogue: 0,0:21:19.05,0:21:21.15,英文,,0,0,0,,It was not overwritten from the parent class.
Dialogue: 0,0:21:19.05,0:21:21.15,中文,,0,0,0,,它没有从父类被重写
Dialogue: 0,0:21:21.15,0:21:24.72,英文,,0,0,0,,So this tag will remind you, like, nope, that's not being overwritten.
Dialogue: 0,0:21:21.15,0:21:24.72,中文,,0,0,0,,这个标记会提醒你 就像 不 那个没有被重写
Dialogue: 0,0:21:24.72,0:21:25.50,英文,,0,0,0,,OK.
Dialogue: 0,0:21:25.50,0:21:35.65,英文,,0,0,0,,Great, so I'll say get overrides, and this version of get also overrides, except it doesn't, because this one's private, takes in different arguments, so it doesn't override.
Dialogue: 0,0:21:25.50,0:21:35.65,中文,,0,0,0,,太棒了 我会说得到覆盖 而这个版本的获取也覆盖了 除了它没有 因为这个是私有的 接受不同的参数 它没有覆盖
Dialogue: 0,0:21:35.65,0:21:39.33,英文,,0,0,0,,Size of the list, I think that overrides, remove last, override.
Dialogue: 0,0:21:35.65,0:21:39.33,中文,,0,0,0,,列表的大小 我认为那是覆盖 移除最后一个 覆盖
Dialogue: 0,0:21:39.33,0:21:42.44,英文,,0,0,0,,OK, great, what fun.
Dialogue: 0,0:21:39.33,0:21:42.44,中文,,0,0,0,,太棒了 多有趣啊
Dialogue: 0,0:21:42.44,0:21:43.58,英文,,0,0,0,,What's the purpose of this?
Dialogue: 0,0:21:42.44,0:21:43.58,中文,,0,0,0,,这是什么目的
Dialogue: 0,0:21:43.58,0:21:49.70,英文,,0,0,0,,One thing, I think it makes code easier to read because it makes clear that this removeLast is not just any old function.
Dialogue: 0,0:21:43.58,0:21:49.70,中文,,0,0,0,,我觉得有一点 它能让代码更易读 因为它清楚地表明了这个 removeLast 不只是个普通的函数
Dialogue: 0,0:21:49.70,0:21:54.62,英文,,0,0,0,,It's a function that was overridden from the parent class, which had a blank removeLast.
Dialogue: 0,0:21:49.70,0:21:54.62,中文,,0,0,0,,它是一个从父类中重写过来的函数 父类中是一个空的 removeLast
Dialogue: 0,0:21:54.62,0:21:57.27,英文,,0,0,0,,Another really good thing about overwrite is that it catches typos.
Dialogue: 0,0:21:54.62,0:21:57.27,中文,,0,0,0,,另一个非常好的重写的好处是它可以捕捉到拼写错误
Dialogue: 0,0:21:57.27,0:22:00.65,英文,,0,0,0,,So maybe, let's say, where's my addFirst?
Dialogue: 0,0:21:57.27,0:22:00.65,中文,,0,0,0,,也许 就像 我的 addFirst 在哪里呢
Dialogue: 0,0:22:00.65,0:22:01.93,英文,,0,0,0,,I have this override tag.
Dialogue: 0,0:22:00.65,0:22:01.93,中文,,0,0,0,,我有这个 override 标签
Dialogue: 0,0:22:01.93,0:22:07.49,英文,,0,0,0,,Maybe instead of typing addFirst, when I was coding, I actually typed addFirstIt.
Dialogue: 0,0:22:01.93,0:22:07.49,中文,,0,0,0,,也许在编码时 我输入的不是 addFirst 而是 addFirstIt
Dialogue: 0,0:22:07.49,0:22:08.99,英文,,0,0,0,,OK, well, now we have a problem.
Dialogue: 0,0:22:07.49,0:22:08.99,中文,,0,0,0,,现在我们有个问题
Dialogue: 0,0:22:08.99,0:22:13.04,英文,,0,0,0,,So addFirstIt, it is totally OK to have an addFirstIt method.
Dialogue: 0,0:22:08.99,0:22:13.04,中文,,0,0,0,,addFirstIt 完全没问题有一个addFirstIt方法
Dialogue: 0,0:22:13.04,0:22:15.96,英文,,0,0,0,,Java has no rules against having addFirstIt.
Dialogue: 0,0:22:13.04,0:22:15.96,中文,,0,0,0,,Java没有对使用addFirstIt的规定
Dialogue: 0,0:22:15.96,0:22:20.06,英文,,0,0,0,,But if you write addFirstIt, you are not actually overriding what the boss says.
Dialogue: 0,0:22:15.96,0:22:20.06,中文,,0,0,0,,但如果你写addFirstIt 实际上并没有覆盖老板说的内容
Dialogue: 0,0:22:20.06,0:22:27.69,英文,,0,0,0,,So if you say addFirstIt, you're not actually replacing the blank addFirst implementation that was in the list61b interface.
Dialogue: 0,0:22:20.06,0:22:27.69,中文,,0,0,0,,如果你说addFirstIt 你实际上并没有替换List61B接口中原本的空白addFirst实现
Dialogue: 0,0:22:27.69,0:22:40.80,英文,,0,0,0,,And the override tag, the really great thing about it is that if you're not actually overriding, if you put this tag, this reminder to yourself on a method that's not actually overriding, like the addFirstIt, it will complain and say, actually,
Dialogue: 0,0:22:27.69,0:22:40.80,中文,,0,0,0,,而override标记 真正厉害的地方在于 如果你实际上没有覆盖 如果你在一个实际上没有覆盖的方法上加上这个标记 就像addFirstIt一样 它会警告并说 实际上
Dialogue: 0,0:22:40.80,0:22:41.72,英文,,0,0,0,,You're not overwriting.
Dialogue: 0,0:22:40.80,0:22:41.72,中文,,0,0,0,,你没有覆盖
Dialogue: 0,0:22:41.72,0:22:44.35,英文,,0,0,0,,There is no at first sit in list60.umb.
Dialogue: 0,0:22:41.72,0:22:44.35,中文,,0,0,0,,在List61B中没有at first sit
Dialogue: 0,0:22:44.35,0:22:48.02,英文,,0,0,0,,And I would look at this and be like, ah, I misspelled first.
Dialogue: 0,0:22:44.35,0:22:48.02,中文,,0,0,0,,我会看着这个 就会想 啊 我拼错了第一个单词
Dialogue: 0,0:22:48.02,0:22:52.70,英文,,0,0,0,,OK, so it catches typos and also just makes code, in my opinion, easier to read.
Dialogue: 0,0:22:48.02,0:22:52.70,中文,,0,0,0,,它会捕捉到拼写错误 而且只是让代码 我个人认为 更容易阅读
Dialogue: 0,0:22:52.70,0:22:56.90,英文,,0,0,0,,But do note that even if I don't put the override tag, I was still overriding.
Dialogue: 0,0:22:52.70,0:22:56.90,中文,,0,0,0,,但请注意 即使我没有放置覆盖标签 我仍然在覆盖
Dialogue: 0,0:22:56.90,0:23:04.38,英文,,0,0,0,,This is just a reminder to myself and a way to catch if I'm ever claiming to overwrite something that I'm really not.
Dialogue: 0,0:22:56.90,0:23:04.38,中文,,0,0,0,,这只是提醒我自己的一种方式 也是一种方式 如果我声称要覆盖某些东西 而实际上并没有
Dialogue: 0,0:23:04.38,0:23:07.86,英文,,0,0,0,,OK, everything I said is now on the slide in words.
Dialogue: 0,0:23:04.38,0:23:07.86,中文,,0,0,0,,我说的一切现在都在幻灯片上用文字展示出来
Dialogue: 0,0:23:07.86,0:23:09.64,英文,,0,0,0,,So if you don't write it, it still overrides.
Dialogue: 0,0:23:07.86,0:23:09.64,中文,,0,0,0,,如果你不写它 它仍然会覆盖
Dialogue: 0,0:23:09.64,0:23:10.48,英文,,0,0,0,,It's optional.
Dialogue: 0,0:23:09.64,0:23:10.48,中文,,0,0,0,,这是可选的
Dialogue: 0,0:23:10.48,0:23:14.10,英文,,0,0,0,,But in this class, we recommend it because it catches things like typos.
Dialogue: 0,0:23:10.48,0:23:14.10,中文,,0,0,0,,但是在这个课程中 我们建议使用它 因为它可以捕捉到诸如拼写错误之类的东西
Dialogue: 0,0:23:14.10,0:23:16.38,英文,,0,0,0,,At first, it add lats.
Dialogue: 0,0:23:14.10,0:23:16.38,中文,,0,0,0,,起初 它添加了 lats
Dialogue: 0,0:23:16.38,0:23:23.84,英文,,0,0,0,,OK, question?
Dialogue: 0,0:23:16.38,0:23:23.84,中文,,0,0,0,,有疑问
Dialogue: 0,0:23:23.84,0:23:27.67,英文,,0,0,0,,In a more complicated program structure, can you specify what overwrites?
Dialogue: 0,0:23:23.84,0:23:27.67,中文,,0,0,0,,在更复杂的程序结构中 你能指定覆盖什么吗
Dialogue: 0,0:23:27.67,0:23:32.73,英文,,0,0,0,,Could you be more specific?
Dialogue: 0,0:23:27.67,0:23:32.73,中文,,0,0,0,,能更具体一些吗
Dialogue: 0,0:23:32.73,0:23:35.85,英文,,0,0,0,,Oh, I mean, do you want to reference what the parent class?
Dialogue: 0,0:23:32.73,0:23:35.85,中文,,0,0,0,,哦 我是说 你想引用父类的什么
Dialogue: 0,0:23:35.85,0:23:38.09,英文,,0,0,0,,Well, I guess you maybe could.
Dialogue: 0,0:23:35.85,0:23:38.09,中文,,0,0,0,,我想你可能可以
Dialogue: 0,0:23:38.09,0:23:43.86,英文,,0,0,0,,I guess maybe the reason why the override tag doesn't include more information is because the method signature is already the same.
Dialogue: 0,0:23:38.09,0:23:43.86,中文,,0,0,0,,我猜可能覆盖标签没有包含更多信息的原因是因为方法签名已经相同
Dialogue: 0,0:23:43.86,0:23:47.18,英文,,0,0,0,,So this public void addLast takes in a generic thing.
Dialogue: 0,0:23:43.86,0:23:47.18,中文,,0,0,0,,这个public void addLast接收一个泛型的东西
Dialogue: 0,0:23:47.18,0:23:49.60,英文,,0,0,0,,Public void addLast takes in a generic thing.
Dialogue: 0,0:23:47.18,0:23:49.60,中文,,0,0,0,,Public void addLast接收一个泛型的东西
Dialogue: 0,0:23:49.60,0:23:53.82,英文,,0,0,0,,So the signatures are already the same. So I don't know if I'd add more information.
Dialogue: 0,0:23:49.60,0:23:53.82,中文,,0,0,0,,签名已经相同  我不知道是否应该添加更多信息
Dialogue: 0,0:23:53.82,0:23:56.72,英文,,0,0,0,,There's only ever one thing that matters.
Dialogue: 0,0:23:53.82,0:23:56.72,中文,,0,0,0,,只有一件事情是重要的
Dialogue: 0,0:23:56.72,0:24:02.86,英文,,0,0,0,,Yeah, Justin points out that there's only one thing that could ever be overwritten, and it would be the method with the exact same signature.
Dialogue: 0,0:23:56.72,0:24:02.86,中文,,0,0,0,,是的 贾斯汀指出只有一件事情可以被覆盖 那就是具有完全相同签名的方法
Dialogue: 0,0:24:02.86,0:24:10.87,英文,,0,0,0,,So I guess for that reason, I mean, yeah, you could maybe in another version of Java do that, but it would just be redundant.
Dialogue: 0,0:24:02.86,0:24:10.87,中文,,0,0,0,,我想因为那个原因 我是说 是的 在另一个版本的Java中可能会这样做 但那只会是多余的
Dialogue: 0,0:24:10.87,0:24:14.77,英文,,0,0,0,,But in this version, you just put overwrite.
Dialogue: 0,0:24:10.87,0:24:14.77,中文,,0,0,0,,但在这个版本中 你只需覆盖
Dialogue: 0,0:24:14.77,0:24:19.65,英文,,0,0,0,,There was another question?
Dialogue: 0,0:24:14.77,0:24:19.65,中文,,0,0,0,,还有另一个问题吗
Dialogue: 0,0:24:19.65,0:24:21.47,英文,,0,0,0,,There's a question of, can I override twice?
Dialogue: 0,0:24:19.65,0:24:21.47,中文,,0,0,0,,有一个问题 我可以重写两次吗
Dialogue: 0,0:24:21.47,0:24:22.47,英文,,0,0,0,,I mean, you can try it.
Dialogue: 0,0:24:21.47,0:24:22.47,中文,,0,0,0,,我是说 你可以试试
Dialogue: 0,0:24:22.47,0:24:25.21,英文,,0,0,0,,I don't think it's possible, because then it's not.
Dialogue: 0,0:24:22.47,0:24:25.21,中文,,0,0,0,,我不认为这是可能的 因为那样的话就不行了
Dialogue: 0,0:24:25.21,0:24:27.07,英文,,0,0,0,,Then Java doesn't know which one to call, right?
Dialogue: 0,0:24:25.21,0:24:27.07,中文,,0,0,0,,那么Java就不知道该调用哪一个 对吧
Dialogue: 0,0:24:27.07,0:24:32.75,英文,,0,0,0,,So if I do addLast lower x again, then Java's going to be like, well, hold on.
Dialogue: 0,0:24:27.07,0:24:32.75,中文,,0,0,0,,如果我再次添加 addLast lower x 那么 Java 就会像 等一下
Dialogue: 0,0:24:32.75,0:24:33.37,英文,,0,0,0,,There's two.
Dialogue: 0,0:24:32.75,0:24:33.37,中文,,0,0,0,,有两个
Dialogue: 0,0:24:33.37,0:24:34.83,英文,,0,0,0,,You defined it already.
Dialogue: 0,0:24:33.37,0:24:34.83,中文,,0,0,0,,你已经定义过了
Dialogue: 0,0:24:34.83,0:24:39.07,英文,,0,0,0,,And I guess the idea is that if someone tried to call addLast with a single argument, Java would get confused.
Dialogue: 0,0:24:34.83,0:24:39.07,中文,,0,0,0,,我想问题是 如果有人尝试用单个参数调用 addLast Java 会感到困惑
Dialogue: 0,0:24:39.07,0:24:40.37,英文,,0,0,0,,It would say, do you want this one?
Dialogue: 0,0:24:39.07,0:24:40.37,中文,,0,0,0,,它会说 你想要这个吗
Dialogue: 0,0:24:40.37,0:24:41.51,英文,,0,0,0,,Do you want this one?
Dialogue: 0,0:24:40.37,0:24:41.51,中文,,0,0,0,,你想要这个吗
Dialogue: 0,0:24:41.51,0:24:44.26,英文,,0,0,0,,It's not clear, so it complains.
Dialogue: 0,0:24:41.51,0:24:44.26,中文,,0,0,0,,不太清楚 它抱怨
Dialogue: 0,0:24:44.26,0:24:45.95,英文,,0,0,0,,Great question, though.
Dialogue: 0,0:24:44.26,0:24:45.95,中文,,0,0,0,,很棒的问题 不过
Dialogue: 0,0:24:45.95,0:24:47.27,英文,,0,0,0,,OK, and we got this right.
Dialogue: 0,0:24:45.95,0:24:47.27,中文,,0,0,0,,我们做对了
Dialogue: 0,0:24:47.27,0:24:48.15,英文,,0,0,0,,Cool.
Dialogue: 0,0:24:47.27,0:24:48.15,中文,,0,0,0,,酷
Dialogue: 0,0:24:48.15,0:24:53.03,英文,,0,0,0,,OK, so all this stuff that we did, it has another fancy name.
Dialogue: 0,0:24:48.15,0:24:53.03,中文,,0,0,0,,我们做的所有这些东西 都有另一个花哨的名字
Dialogue: 0,0:24:53.03,0:25:00.87,英文,,0,0,0,,So when we specified this generic type, or the more general type, list60.umb, then we implemented it with these two specific lists.
Dialogue: 0,0:24:53.03,0:25:00.87,中文,,0,0,0,,当我们指定这个泛型类型 或者更一般的类型 List61B 然后我们用这两个具体的列表来实现它
Dialogue: 0,0:25:00.87,0:25:02.73,英文,,0,0,0,,That's called interface inheritance.
Dialogue: 0,0:25:00.87,0:25:02.73,中文,,0,0,0,,这就是接口继承
Dialogue: 0,0:25:02.73,0:25:09.78,英文,,0,0,0,,So to break down the term a bit, the word interface, that is the list of all the things that my list has to be able to do.
Dialogue: 0,0:25:02.73,0:25:09.78,中文,,0,0,0,,来解释一下这个术语 接口这个词 那就是我这个列表必须能够做的所有事情的列表
Dialogue: 0,0:25:09.78,0:25:12.92,英文,,0,0,0,,All lists have to be able to add first, add last, whatever.
Dialogue: 0,0:25:09.78,0:25:12.92,中文,,0,0,0,,所有的列表都必须能够在开头添加 末尾添加 随便怎么加
Dialogue: 0,0:25:12.92,0:25:20.10,英文,,0,0,0,,And then the word inheritance, that came from when I said there are these two subclasses that are more specific types of List61B.
Dialogue: 0,0:25:12.92,0:25:20.10,中文,,0,0,0,,然后有继承这个词 那是因为我说有这两个更具体的List61B子类
Dialogue: 0,0:25:20.10,0:25:23.19,英文,,0,0,0,,They implement the List61B interface.
Dialogue: 0,0:25:20.10,0:25:23.19,中文,,0,0,0,,它们实现了List61B接口
Dialogue: 0,0:25:23.19,0:25:28.31,英文,,0,0,0,,And the interface itself, it just specifies what the class can do, but it doesn't say anything about how.
Dialogue: 0,0:25:23.19,0:25:28.31,中文,,0,0,0,,而接口本身只是规定了类能做什么 但并没有说明具体怎么做
Dialogue: 0,0:25:28.31,0:25:30.56,英文,,0,0,0,,That's why all the methods were blank.
Dialogue: 0,0:25:28.31,0:25:30.56,中文,,0,0,0,,这就是为什么所有的方法都是空白的原因
Dialogue: 0,0:25:30.56,0:25:42.56,英文,,0,0,0,,And one thing I'll note is that if you have an interface and you have something that implements the interface, like the SLList implements List60UMB, then you must, it's required that you have to overwrite all the blank methods.
Dialogue: 0,0:25:30.56,0:25:42.56,中文,,0,0,0,,我要注意的一件事是 如果你有一个接口 然后有东西实现了这个接口 比如SLList实现了List61B 那么你必须 必须要覆盖所有的空白方法
Dialogue: 0,0:25:42.56,0:25:45.54,英文,,0,0,0,,You can't leave any methods unoverridden and blank.
Dialogue: 0,0:25:42.56,0:25:45.54,中文,,0,0,0,,不能留下任何未覆盖和空白的方法
Dialogue: 0,0:25:45.54,0:25:50.61,英文,,0,0,0,,You need to specify exactly how all of the methods in the interface are implemented.
Dialogue: 0,0:25:45.54,0:25:50.61,中文,,0,0,0,,你需要明确指定接口中的所有方法是如何实现的
Dialogue: 0,0:25:50.61,0:25:55.73,英文,,0,0,0,,So for example, in my List60UMB, I had insert, I had add first, I had add last.
Dialogue: 0,0:25:50.61,0:25:55.73,中文,,0,0,0,,例如 在我的List61B中 我有insert 我有add first 我有addLast
Dialogue: 0,0:25:55.73,0:25:58.91,英文,,0,0,0,,So anything that claims to be a list, it has to implement
Dialogue: 0,0:25:55.73,0:25:58.91,中文,,0,0,0,,任何声称自己是一个列表的东西 都必须实现
Dialogue: 0,0:25:58.91,0:26:03.09,英文,,0,0,0,,and overwrite all methods that are listed in list61b.
Dialogue: 0,0:25:58.91,0:26:03.09,中文,,0,0,0,,并覆盖列表List61B中列出的所有方法
Dialogue: 0,0:26:03.09,0:26:08.83,英文,,0,0,0,,So it's kind of like, I don't know, maybe you have like a blueprint that tells you this is how a key works, or like a lock works.
Dialogue: 0,0:26:03.09,0:26:08.83,中文,,0,0,0,,有点像 我不知道 也许你有一个告诉你这是一个键的工作方式的蓝图 或者像一个锁的工作方式
Dialogue: 0,0:26:08.83,0:26:10.24,英文,,0,0,0,,It has to be able to lock.
Dialogue: 0,0:26:08.83,0:26:10.24,中文,,0,0,0,,它必须能够锁定
Dialogue: 0,0:26:10.24,0:26:11.90,英文,,0,0,0,,It has to be able to unlock.
Dialogue: 0,0:26:10.24,0:26:11.90,中文,,0,0,0,,它必须能够解锁
Dialogue: 0,0:26:11.90,0:26:16.12,英文,,0,0,0,,And so anything that you claim is a lock, it has to have a lock operation.
Dialogue: 0,0:26:11.90,0:26:16.12,中文,,0,0,0,,任何你声称是锁的东西 都必须有一个锁操作
Dialogue: 0,0:26:16.12,0:26:18.20,英文,,0,0,0,,It has to have an unlock operation.
Dialogue: 0,0:26:16.12,0:26:18.20,中文,,0,0,0,,它必须有一个解锁操作
Dialogue: 0,0:26:18.20,0:26:20.96,英文,,0,0,0,,And you could implement that in lots of different ways.
Dialogue: 0,0:26:18.20,0:26:20.96,中文,,0,0,0,,你可以用很多不同的方式来实现这个
Dialogue: 0,0:26:20.96,0:26:22.56,英文,,0,0,0,,Maybe some locks use a key.
Dialogue: 0,0:26:20.96,0:26:22.56,中文,,0,0,0,,也许有些锁用钥匙
Dialogue: 0,0:26:22.56,0:26:23.88,英文,,0,0,0,,Some locks use a combination.
Dialogue: 0,0:26:22.56,0:26:23.88,中文,,0,0,0,,有些锁用密码
Dialogue: 0,0:26:23.88,0:26:26.98,英文,,0,0,0,,Some locks use a fingerprint or whatever.
Dialogue: 0,0:26:23.88,0:26:26.98,中文,,0,0,0,,有些锁用指纹或其他的
Dialogue: 0,0:26:26.98,0:26:31.77,英文,,0,0,0,,All the locks that you ever built have to have a lock operation and an unlock operation.
Dialogue: 0,0:26:26.98,0:26:31.77,中文,,0,0,0,,所有你曾经制造的锁都必须有一个锁操作和一个解锁操作
Dialogue: 0,0:26:31.77,0:26:38.01,英文,,0,0,0,,If you build a lock and there's no lock operation or there's no unlock operation, then can it really be a lock?
Dialogue: 0,0:26:31.77,0:26:38.01,中文,,0,0,0,,如果你建立了一个锁 没有锁定操作或者没有解锁操作 那真的能算是个锁吗
Dialogue: 0,0:26:38.01,0:26:42.41,英文,,0,0,0,,I guess, philosophical question, but at least Java would say, no, that's not a lock.
Dialogue: 0,0:26:38.01,0:26:42.41,中文,,0,0,0,,我猜 这是一个哲学问题 但至少Java会说 不 那不算是个锁
Dialogue: 0,0:26:42.41,0:26:45.29,英文,,0,0,0,,It does not do all the things that locks have to do.
Dialogue: 0,0:26:42.41,0:26:45.29,中文,,0,0,0,,它并没有完成锁必须做的所有事情
Dialogue: 0,0:26:45.29,0:26:55.78,英文,,0,0,0,,So anytime you implement an interface, you must take all of these blank methods and overwrite them with actual implementations, or else Java will fail to compile the program.
Dialogue: 0,0:26:45.29,0:26:55.78,中文,,0,0,0,,每当你实现一个接口 你必须拿这些空白的方法并用实际的实现来覆盖它们 否则Java会在编译程序时失败
Dialogue: 0,0:26:55.78,0:27:00.45,英文,,0,0,0,,So for example, if I said, you know what, List61Bs, they have a new extra operation.
Dialogue: 0,0:26:55.78,0:27:00.45,中文,,0,0,0,,例如 如果我说 你知道吗 List61B 它们有一个新的额外操作
Dialogue: 0,0:27:00.45,0:27:07.59,英文,,0,0,0,,I think all lists should be able to prove, I don't know what that is, but maybe all lists have to be able to prove
Dialogue: 0,0:27:00.45,0:27:07.59,中文,,0,0,0,,我认为所有的列表都应该能够证明 我不知道那是什么 但也许所有的列表都必须能够证明
Dialogue: 0,0:27:07.59,0:27:14.46,英文,,0,0,0,,If I add this extra blank method and I say all List61Bs must prove, then you'll see that SLList no longer compiles.
Dialogue: 0,0:27:07.59,0:27:14.46,中文,,0,0,0,,如果我添加这个额外的空白方法 并说所有的List61B都必须证明 那么你会发现SLList将不再编译
Dialogue: 0,0:27:14.46,0:27:16.60,英文,,0,0,0,,It says SLList, you don't count anymore.
Dialogue: 0,0:27:14.46,0:27:16.60,中文,,0,0,0,,它说 SLList 你不算了
Dialogue: 0,0:27:16.60,0:27:19.44,英文,,0,0,0,,You're not a real List61B because you don't prove.
Dialogue: 0,0:27:16.60,0:27:19.44,中文,,0,0,0,,你不是真正的 List61B 因为你不证明
Dialogue: 0,0:27:19.44,0:27:20.88,英文,,0,0,0,,It's the same thing with AList.
Dialogue: 0,0:27:19.44,0:27:20.88,中文,,0,0,0,,AList 也是一样的
Dialogue: 0,0:27:20.88,0:27:22.86,英文,,0,0,0,,You don't count either because you don't prove.
Dialogue: 0,0:27:20.88,0:27:22.86,中文,,0,0,0,,你也不算 因为你不证明
Dialogue: 0,0:27:22.86,0:27:27.50,英文,,0,0,0,,So that's what happens if you don't override all the methods.
Dialogue: 0,0:27:22.86,0:27:27.50,中文,,0,0,0,,如果你不重写所有方法 就会发生这种情况
Dialogue: 0,0:27:27.50,0:27:29.12,英文,,0,0,0,,OK.
Dialogue: 0,0:27:29.12,0:27:29.58,英文,,0,0,0,,Great.
Dialogue: 0,0:27:29.12,0:27:29.58,中文,,0,0,0,,太好了
Dialogue: 0,0:27:29.58,0:27:31.04,英文,,0,0,0,,So this is really powerful.
Dialogue: 0,0:27:29.58,0:27:31.04,中文,,0,0,0,,这真的很强大
Dialogue: 0,0:27:31.04,0:27:32.49,英文,,0,0,0,,Here's a picture of it.
Dialogue: 0,0:27:31.04,0:27:32.49,中文,,0,0,0,,这是它的照片
Dialogue: 0,0:27:32.49,0:27:35.11,英文,,0,0,0,,On the slides, usually, if there's an interface, it's in white.
Dialogue: 0,0:27:32.49,0:27:35.11,中文,,0,0,0,,通常在幻灯片上 如果有一个接口 它是白色的
Dialogue: 0,0:27:35.11,0:27:39.35,英文,,0,0,0,,If there's a class, it's in green, so in case you ever see these pictures.
Dialogue: 0,0:27:35.11,0:27:39.35,中文,,0,0,0,,如果有一个类 它是绿色的 如果你看到这些图片
Dialogue: 0,0:27:39.35,0:27:40.15,英文,,0,0,0,,But this is really cool.
Dialogue: 0,0:27:39.35,0:27:40.15,中文,,0,0,0,,但这真的很酷
Dialogue: 0,0:27:40.15,0:27:47.88,英文,,0,0,0,,We solved our problem from today, which was that longest method that used to have to be copy-pasted if I had S list and A list.
Dialogue: 0,0:27:40.15,0:27:47.88,中文,,0,0,0,,我们解决了今天的问题 那就是以前必须复制粘贴的最长方法 如果我有 SLList和 AList
Dialogue: 0,0:27:47.88,0:27:51.06,英文,,0,0,0,,Now it works on any type of list, S list, A list, D list.
Dialogue: 0,0:27:47.88,0:27:51.06,中文,,0,0,0,,现在它可以用于任何类型的列表 SLList AList D 列表
Dialogue: 0,0:27:51.06,0:27:58.91,英文,,0,0,0,,Even if, like, 20 years from now, you go and invent the Q list, well, as long as it follows the list61b interface, then the world utils longest method
Dialogue: 0,0:27:51.06,0:27:58.91,中文,,0,0,0,,即使 就像 20年后 你去发明Q列表 那么 只要它遵循List61B接口 那么世界utils最长的方法
Dialogue: 0,0:27:58.91,0:28:01.69,英文,,0,0,0,,can take in the queue list as an argument, too.
Dialogue: 0,0:27:58.91,0:28:01.69,中文,,0,0,0,,也可以接受队列列表作为参数
Dialogue: 0,0:28:01.69,0:28:04.09,英文,,0,0,0,,That's great.
Dialogue: 0,0:28:01.69,0:28:04.09,中文,,0,0,0,,那太棒了
Dialogue: 0,0:28:04.09,0:28:08.36,英文,,0,0,0,,So just to be really clear, I guess there's one final little note.
Dialogue: 0,0:28:04.09,0:28:08.36,中文,,0,0,0,,为了非常清楚 我猜最后有一个小小的注意事项
Dialogue: 0,0:28:08.36,0:28:10.75,英文,,0,0,0,,Sometimes people bring this up, sometimes they don't.
Dialogue: 0,0:28:08.36,0:28:10.75,中文,,0,0,0,,有时人们会提起这个 有时他们不会
Dialogue: 0,0:28:10.75,0:28:14.35,英文,,0,0,0,,If this makes no sense to you, I guess this can be your one slight break.
Dialogue: 0,0:28:10.75,0:28:14.35,中文,,0,0,0,,如果这对你毫无意义 我猜这可以是你的一个轻微的休息
Dialogue: 0,0:28:14.35,0:28:16.97,英文,,0,0,0,,Sometimes people complain, and they say, well, wait a minute.
Dialogue: 0,0:28:14.35,0:28:16.97,中文,,0,0,0,,有时人们抱怨 他们说 等一下
Dialogue: 0,0:28:16.97,0:28:21.57,英文,,0,0,0,,Back in lecture three, you told me about the mystery of the walrus, the golden rule of equals.
Dialogue: 0,0:28:16.97,0:28:21.57,中文,,0,0,0,,在第三讲时 你跟我讲过海象的神秘之谜 等号的黄金法则
Dialogue: 0,0:28:21.57,0:28:32.98,英文,,0,0,0,,And you said that when I pass in an argument, so I'm calling longest on a1, and when I pass in this argument a1 to the input list variable, you told me you just copy the bits.
Dialogue: 0,0:28:21.57,0:28:32.98,中文,,0,0,0,,你说过当我传递一个参数时 就像我在 a1 上调用 longest 当我将参数 a1 传递给输入列表变量时 你告诉我只是复制了这些位
Dialogue: 0,0:28:32.98,0:28:43.83,英文,,0,0,0,,And you also told me that this input list variable, it was declared as a list 61b, but you're copying the bits from something that is declared of type A-list string.
Dialogue: 0,0:28:32.98,0:28:43.83,中文,,0,0,0,,你还告诉我 这个输入列表变量 它被声明为列表61B 但你正在从声明为 A-list string 的东西中复制位
Dialogue: 0,0:28:43.83,0:28:47.87,英文,,0,0,0,,So how can something of A-list string go into List60 and B?
Dialogue: 0,0:28:43.83,0:28:47.87,中文,,0,0,0,,那么 一个 A-list string 的东西怎么能进入 List61B呢
Dialogue: 0,0:28:47.87,0:28:49.69,英文,,0,0,0,,Somehow, these types don't seem like they match.
Dialogue: 0,0:28:47.87,0:28:49.69,中文,,0,0,0,,不知何故 这些类型似乎不匹配
Dialogue: 0,0:28:49.69,0:28:51.07,英文,,0,0,0,,Doesn't Java complain?
Dialogue: 0,0:28:49.69,0:28:51.07,中文,,0,0,0,,Java 不会报错吗
Dialogue: 0,0:28:51.07,0:29:00.80,英文,,0,0,0,,How is Java OK with this being an address of or a reference to a List60 and B, but this memory box, the bits that I'm copying in, they're a reference to an A-list?
Dialogue: 0,0:28:51.07,0:29:00.80,中文,,0,0,0,,Java是如何处理这个问题的 它可以是List60和B的地址或引用 但是这个内存盒子 我要复制的位是A-list的引用
Dialogue: 0,0:29:00.80,0:29:01.98,英文,,0,0,0,,So why is that OK?
Dialogue: 0,0:29:00.80,0:29:01.98,中文,,0,0,0,,那为什么这样做没问题呢
Dialogue: 0,0:29:01.98,0:29:15.03,英文,,0,0,0,,Well, the little syntactic trick that makes this work is that if I define or I declare a variable saying input list is of type list60.umb, this memory box can hold a reference to any type of list60.umb.
Dialogue: 0,0:29:01.98,0:29:15.03,中文,,0,0,0,,使这个方法奏效的小语法技巧是 如果我定义或声明一个变量 说输入列表的类型是List61B 这个内存盒子可以保存对任何类型的List61B的引用
Dialogue: 0,0:29:15.03,0:29:17.57,英文,,0,0,0,,So it can hold a reference to an A list.
Dialogue: 0,0:29:15.03,0:29:17.57,中文,,0,0,0,,它可以保存对AList的引用
Dialogue: 0,0:29:17.57,0:29:19.19,英文,,0,0,0,,It can hold a reference to an S list.
Dialogue: 0,0:29:17.57,0:29:19.19,中文,,0,0,0,,它可以保存对SLList的引用
Dialogue: 0,0:29:19.19,0:29:23.17,英文,,0,0,0,,That's OK, because an A list is an A list60.umb.
Dialogue: 0,0:29:19.19,0:29:23.17,中文,,0,0,0,,这没问题 因为AList就是A List61B
Dialogue: 0,0:29:23.17,0:29:26.70,英文,,0,0,0,,So that's the little English trick that makes this work.
Dialogue: 0,0:29:23.17,0:29:26.70,中文,,0,0,0,,这就是使这个方法奏效的小技巧
Dialogue: 0,0:29:26.70,0:29:29.86,英文,,0,0,0,,Just in case you were uncomfortable with this, hopefully now you're not.
Dialogue: 0,0:29:26.70,0:29:29.86,中文,,0,0,0,,如果你对此感到不舒服 希望现在好些了
Dialogue: 0,0:29:29.86,0:29:31.14,英文,,0,0,0,,OK.
Dialogue: 0,0:29:31.14,0:29:34.68,英文,,0,0,0,,In the interest of time, because we did a little dark mode demo, I'm not going to show this to you.
Dialogue: 0,0:29:31.14,0:29:34.68,中文,,0,0,0,,为了节省时间 因为我们做了一个小的暗模式演示 我不打算向你展示这个
Dialogue: 0,0:29:34.68,0:29:36.96,英文,,0,0,0,,But after we go home, I would suggest staring at this.
Dialogue: 0,0:29:34.68,0:29:36.96,中文,,0,0,0,,但是在我们回家后 我建议你盯着这个看一会儿
Dialogue: 0,0:29:36.96,0:29:38.14,英文,,0,0,0,,This is just two lines of code.
Dialogue: 0,0:29:36.96,0:29:38.14,中文,,0,0,0,,这只是两行代码
Dialogue: 0,0:29:38.14,0:29:41.66,英文,,0,0,0,,Try and figure out if this actually compiles and if it works.
Dialogue: 0,0:29:38.14,0:29:41.66,中文,,0,0,0,,试着弄清楚这是否实际上可以编译并且是否有效
Dialogue: 0,0:29:41.66,0:29:44.32,英文,,0,0,0,,Just to make you do it, I'm going to skip the answer.
Dialogue: 0,0:29:41.66,0:29:44.32,中文,,0,0,0,,只是让你自己去做 我会跳过答案的
Dialogue: 0,0:29:44.32,0:29:45.30,英文,,0,0,0,,You don't get to see it.
Dialogue: 0,0:29:44.32,0:29:45.30,中文,,0,0,0,,你看不到它
Dialogue: 0,0:29:45.30,0:29:48.22,英文,,0,0,0,,But go home and try it out, and let me know what you think.
Dialogue: 0,0:29:45.30,0:29:48.22,中文,,0,0,0,,但是回家试试 然后告诉我你的想法
Dialogue: 0,0:29:48.22,0:29:49.54,英文,,0,0,0,,OK.
Dialogue: 0,0:29:49.54,0:29:51.68,英文,,0,0,0,,So we talked about interface inheritance.
Dialogue: 0,0:29:49.54,0:29:51.68,中文,,0,0,0,,我们谈论了接口继承
Dialogue: 0,0:29:51.68,0:29:54.70,英文,,0,0,0,,We said you inherit all the signatures.
Dialogue: 0,0:29:51.68,0:29:54.70,中文,,0,0,0,,我们说你继承所有的签名
Dialogue: 0,0:29:54.70,0:30:03.27,英文,,0,0,0,,You inherit what the list has to do, or you inherit the list of all locks have to lock and unlock, but you do not inherit the implementation.
Dialogue: 0,0:29:54.70,0:30:03.27,中文,,0,0,0,,你继承了列表必须做什么 或者你继承了所有锁必须锁定和解锁的列表 但你不继承实现
Dialogue: 0,0:30:03.27,0:30:08.85,英文,,0,0,0,,When you wrote the interface, all the methods were blank, and you had to override all the blank methods.
Dialogue: 0,0:30:03.27,0:30:08.85,中文,,0,0,0,,当你写接口时 所有的方法都是空白的 你必须重写所有的空白方法
Dialogue: 0,0:30:08.85,0:30:11.27,英文,,0,0,0,,So there's another type of inheritance out there, though.
Dialogue: 0,0:30:08.85,0:30:11.27,中文,,0,0,0,,还有另一种类型的继承 不过
Dialogue: 0,0:30:11.27,0:30:13.79,英文,,0,0,0,,This one is called implementation inheritance.
Dialogue: 0,0:30:11.27,0:30:13.79,中文,,0,0,0,,这个叫做实现继承
Dialogue: 0,0:30:13.79,0:30:19.88,英文,,0,0,0,,So this time, you're not just inheriting the blank signatures that say, this is what a list has to do.
Dialogue: 0,0:30:13.79,0:30:19.88,中文,,0,0,0,,这一次 你不仅仅是继承了空白签名 说 这是列表必须做的事情
Dialogue: 0,0:30:19.88,0:30:23.50,英文,,0,0,0,,You're actually going to inherit some of the implementations as well.
Dialogue: 0,0:30:19.88,0:30:23.50,中文,,0,0,0,,你实际上还会继承一些实现
Dialogue: 0,0:30:23.50,0:30:30.60,英文,,0,0,0,,So now the subclass not only gets the blank signatures that it has to go through and override, it also gets some actual code.
Dialogue: 0,0:30:23.50,0:30:30.60,中文,,0,0,0,,现在子类不仅仅是得到了必须去覆盖的空白签名 它还得到了一些实际的代码
Dialogue: 0,0:30:30.60,0:30:32.24,英文,,0,0,0,,So let's go see what this looks like.
Dialogue: 0,0:30:30.60,0:30:32.24,中文,,0,0,0,,让我们看看这是什么样子的
Dialogue: 0,0:30:32.24,0:30:39.13,英文,,0,0,0,,I'm going to write an implementation and then have the subclasses implement or inherit that implementation.
Dialogue: 0,0:30:32.24,0:30:39.13,中文,,0,0,0,,我将编写一个实现 然后让子类实现或继承该实现
Dialogue: 0,0:30:39.13,0:30:40.63,英文,,0,0,0,,Okay, so let's do it.
Dialogue: 0,0:30:39.13,0:30:40.63,中文,,0,0,0,,那我们就开始吧
Dialogue: 0,0:30:40.63,0:30:44.11,英文,,0,0,0,,I'm going to come over to List60.umb, and I'm going to say, you know what?
Dialogue: 0,0:30:40.63,0:30:44.11,中文,,0,0,0,,我要跳到 List61B 然后我会说 你知道吗
Dialogue: 0,0:30:44.11,0:30:46.71,英文,,0,0,0,,I actually think all lists should be able to print.
Dialogue: 0,0:30:44.11,0:30:46.71,中文,,0,0,0,,我其实觉得所有的列表都应该能够打印
Dialogue: 0,0:30:46.71,0:30:53.33,英文,,0,0,0,,So I'll say public void print, and I'll say print all the items in the list.
Dialogue: 0,0:30:46.71,0:30:53.33,中文,,0,0,0,,我会说 public void print 然后我会打印列表中的所有项目
Dialogue: 0,0:30:53.33,0:30:54.34,英文,,0,0,0,,Okay.
Dialogue: 0,0:30:54.34,0:30:54.86,英文,,0,0,0,,Great.
Dialogue: 0,0:30:54.34,0:30:54.86,中文,,0,0,0,,很好
Dialogue: 0,0:30:54.86,0:30:57.07,英文,,0,0,0,,So I think all this should be able to print.
Dialogue: 0,0:30:54.86,0:30:57.07,中文,,0,0,0,,我觉得所有这些都应该能够打印
Dialogue: 0,0:30:57.07,0:30:59.49,英文,,0,0,0,,Well, right now, they don't print, so they're complaining.
Dialogue: 0,0:30:57.07,0:30:59.49,中文,,0,0,0,,现在嘛 他们不打印 他们在抱怨
Dialogue: 0,0:30:59.49,0:31:06.67,英文,,0,0,0,,So maybe instead of just giving the blank print method to all of my subclasses and say, here's a blank print method.
Dialogue: 0,0:30:59.49,0:31:06.67,中文,,0,0,0,,也许 我不应该把空白的打印方法直接给所有的子类 而是应该这样说 这里是一个空白的打印方法
Dialogue: 0,0:31:06.67,0:31:07.40,英文,,0,0,0,,You deal with it.
Dialogue: 0,0:31:06.67,0:31:07.40,中文,,0,0,0,,你来解决它
Dialogue: 0,0:31:07.40,0:31:08.52,英文,,0,0,0,,You overwrite it.
Dialogue: 0,0:31:07.40,0:31:08.52,中文,,0,0,0,,你重写它
Dialogue: 0,0:31:08.52,0:31:15.34,英文,,0,0,0,,I can actually say, not only am I gifting you this print method to all my subclasses, I'm also gifting you a default implementation.
Dialogue: 0,0:31:08.52,0:31:15.34,中文,,0,0,0,,我实际上可以说 我不仅仅是把这个打印方法赠送给了所有的子类 我还赠送给了你一个默认的实现
Dialogue: 0,0:31:15.34,0:31:19.07,英文,,0,0,0,,So if you're lazy and you don't want to write a print method, I'm going to give one to you.
Dialogue: 0,0:31:15.34,0:31:19.07,中文,,0,0,0,,如果你懒得写一个打印方法 我会给你一个
Dialogue: 0,0:31:19.07,0:31:22.43,英文,,0,0,0,,So this way, not only am I inheriting
Dialogue: 0,0:31:19.07,0:31:22.43,中文,,0,0,0,,这样一来 我不仅仅是继承
Dialogue: 0,0:31:22.43,0:31:24.61,英文,,0,0,0,,I'm also inheriting code.
Dialogue: 0,0:31:22.43,0:31:24.61,中文,,0,0,0,,我也要继承代码
Dialogue: 0,0:31:24.61,0:31:26.51,英文,,0,0,0,,So I could first start by trying to write code.
Dialogue: 0,0:31:24.61,0:31:26.51,中文,,0,0,0,,我可以先尝试编写代码
Dialogue: 0,0:31:26.51,0:31:27.09,英文,,0,0,0,,It complains.
Dialogue: 0,0:31:26.51,0:31:27.09,中文,,0,0,0,,它抱怨了
Dialogue: 0,0:31:27.09,0:31:30.32,英文,,0,0,0,,It says, nope, you can't have code in an interface.
Dialogue: 0,0:31:27.09,0:31:30.32,中文,,0,0,0,,它说 不行 在接口中不能有代码
Dialogue: 0,0:31:30.32,0:31:32.96,英文,,0,0,0,,But if I put the default keyword, now I can.
Dialogue: 0,0:31:30.32,0:31:32.96,中文,,0,0,0,,但如果我加上默认关键字 现在就可以了
Dialogue: 0,0:31:32.96,0:31:38.40,英文,,0,0,0,,So the default keyword says, here's a default implementation that is given to all the subclasses.
Dialogue: 0,0:31:32.96,0:31:38.40,中文,,0,0,0,,默认关键字表示 这是一个默认实现 提供给所有的子类
Dialogue: 0,0:31:38.40,0:31:40.41,英文,,0,0,0,,So at first, this seems weird.
Dialogue: 0,0:31:38.40,0:31:40.41,中文,,0,0,0,,一开始 这似乎很奇怪
Dialogue: 0,0:31:40.41,0:31:44.59,英文,,0,0,0,,How can I possibly write a print method for any type of list 61b?
Dialogue: 0,0:31:40.41,0:31:44.59,中文,,0,0,0,,我怎么可能为 61B 的任何类型的列表编写一个打印方法呢
Dialogue: 0,0:31:44.59,0:31:46.35,英文,,0,0,0,,A list, S list, Q list?
Dialogue: 0,0:31:44.59,0:31:46.35,中文,,0,0,0,,AList SLList Q 列表
Dialogue: 0,0:31:46.35,0:31:50.50,英文,,0,0,0,,How can I possibly write a print method if I don't even know what type of list it is?
Dialogue: 0,0:31:46.35,0:31:50.50,中文,,0,0,0,,如果我连列表是什么类型都不知道 我怎么可能写一个打印方法呢
Dialogue: 0,0:31:50.50,0:31:55.80,英文,,0,0,0,,Look, there's no instance variables because those are private and specific to S list or A list.
Dialogue: 0,0:31:50.50,0:31:55.80,中文,,0,0,0,,看 这里没有实例变量 因为那些是私有的 特定于 SLList或 AList
Dialogue: 0,0:31:55.80,0:31:56.72,英文,,0,0,0,,There's no array.
Dialogue: 0,0:31:55.80,0:31:56.72,中文,,0,0,0,,这里没有数组
Dialogue: 0,0:31:56.72,0:31:57.98,英文,,0,0,0,,There's no sentinel.
Dialogue: 0,0:31:56.72,0:31:57.98,中文,,0,0,0,,这里没有哨兵
Dialogue: 0,0:31:57.98,0:32:00.60,英文,,0,0,0,,How the heck am I going to be able to print things?
Dialogue: 0,0:31:57.98,0:32:00.60,中文,,0,0,0,,我到底怎么能够打印东西呢
Dialogue: 0,0:32:00.60,0:32:03.55,英文,,0,0,0,,But it turns out I do have some things at my disposal.
Dialogue: 0,0:32:00.60,0:32:03.55,中文,,0,0,0,,但事实证明我确实有一些可用的东西
Dialogue: 0,0:32:03.55,0:32:05.33,英文,,0,0,0,,So I don't have instance variables.
Dialogue: 0,0:32:03.55,0:32:05.33,中文,,0,0,0,,我没有实例变量
Dialogue: 0,0:32:05.33,0:32:06.65,英文,,0,0,0,,I don't have private methods.
Dialogue: 0,0:32:05.33,0:32:06.65,中文,,0,0,0,,我没有私有方法
Dialogue: 0,0:32:06.65,0:32:17.84,英文,,0,0,0,,But I do know that any type of list, even ones that have never been built yet that are coming later, every list that I could ever build that implements ListXDOMB, it's going to have an insert method.
Dialogue: 0,0:32:06.65,0:32:17.84,中文,,0,0,0,,但我知道任何类型的列表 即使是后来才建立的列表 我可以构建的任何列表实现了ListXDOMB 它都会有一个插入方法
Dialogue: 0,0:32:17.84,0:32:19.40,英文,,0,0,0,,It's going to have an at first method.
Dialogue: 0,0:32:17.84,0:32:19.40,中文,,0,0,0,,它会有一个首先方法
Dialogue: 0,0:32:19.40,0:32:21.52,英文,,0,0,0,,So I can use these methods.
Dialogue: 0,0:32:19.40,0:32:21.52,中文,,0,0,0,,我可以使用这些方法
Dialogue: 0,0:32:21.52,0:32:24.28,英文,,0,0,0,,even though I don't know what specific type of list it is.
Dialogue: 0,0:32:21.52,0:32:24.28,中文,,0,0,0,,尽管我不知道它是什么具体类型的列表
Dialogue: 0,0:32:24.28,0:32:25.40,英文,,0,0,0,,That's kind of cool.
Dialogue: 0,0:32:24.28,0:32:25.40,中文,,0,0,0,,这还挺酷的
Dialogue: 0,0:32:25.40,0:32:31.46,英文,,0,0,0,,So I'll say maybe I'm going to start at 0, and I'll say i less than size.
Dialogue: 0,0:32:25.40,0:32:31.46,中文,,0,0,0,,我会说也许我要从0开始 然后我会说i小于size
Dialogue: 0,0:32:31.46,0:32:33.96,英文,,0,0,0,,Why can I use size? What licenses me to do this?
Dialogue: 0,0:32:31.46,0:32:33.96,中文,,0,0,0,,我为什么可以使用size呢  是什么让我能够这样做呢
Dialogue: 0,0:32:33.96,0:32:39.53,英文,,0,0,0,,Because every list ever that implements little60.umb is guaranteed to have a size method.
Dialogue: 0,0:32:33.96,0:32:39.53,中文,,0,0,0,,因为每个实现List61B的列表都保证有一个size方法
Dialogue: 0,0:32:39.53,0:32:41.19,英文,,0,0,0,,That's what my interface says.
Dialogue: 0,0:32:39.53,0:32:41.19,中文,,0,0,0,,这就是我的接口所说的
Dialogue: 0,0:32:41.19,0:32:45.87,英文,,0,0,0,,So I'll go through from 0 to size, and then I'll say something like print.
Dialogue: 0,0:32:41.19,0:32:45.87,中文,,0,0,0,,我会从0到size遍历 然后我会说类似于print的东西
Dialogue: 0,0:32:45.87,0:32:46.65,英文,,0,0,0,,OK, great.
Dialogue: 0,0:32:45.87,0:32:46.65,中文,,0,0,0,,很好
Dialogue: 0,0:32:46.65,0:32:48.93,英文,,0,0,0,,And maybe I'll do get the ith item.
Dialogue: 0,0:32:46.65,0:32:48.93,中文,,0,0,0,,也许我会获取第i项
Dialogue: 0,0:32:48.93,0:32:51.41,英文,,0,0,0,,And again, what licenses me to use get?
Dialogue: 0,0:32:48.93,0:32:51.41,中文,,0,0,0,,而且 是什么让我有权使用get
Dialogue: 0,0:32:51.41,0:32:59.80,英文,,0,0,0,,It's the fact that every list 61b, S list, A list, D list, Q list, Z list, all of them have a get method that will be overridden later.
Dialogue: 0,0:32:51.41,0:32:59.80,中文,,0,0,0,,事实上 每个列表61B、SLList、AList、D列表、Q列表、Z列表 它们都有一个稍后会被重写的get方法
Dialogue: 0,0:32:59.80,0:33:06.42,英文,,0,0,0,,So even though I don't know what the get method is doing, I'm safe to call it because I know every single list out there has a get method.
Dialogue: 0,0:32:59.80,0:33:06.42,中文,,0,0,0,,即使我不知道get方法在做什么 我也可以放心地调用它 因为我知道每一个列表都有一个get方法
Dialogue: 0,0:33:06.42,0:33:09.07,英文,,0,0,0,,OK, maybe I'll print a new line at the end.
Dialogue: 0,0:33:06.42,0:33:09.07,中文,,0,0,0,,也许我会在最后打印一个新行
Dialogue: 0,0:33:09.07,0:33:10.81,英文,,0,0,0,,Just for aesthetic purposes.
Dialogue: 0,0:33:09.07,0:33:10.81,中文,,0,0,0,,只是为了美观
Dialogue: 0,0:33:10.81,0:33:11.57,英文,,0,0,0,,OK.
Dialogue: 0,0:33:11.57,0:33:13.33,英文,,0,0,0,,So there's my default print method.
Dialogue: 0,0:33:11.57,0:33:13.33,中文,,0,0,0,,这是我的默认打印方法
Dialogue: 0,0:33:13.33,0:33:17.91,英文,,0,0,0,,I guess I can go into my is a demo class.
Dialogue: 0,0:33:13.33,0:33:17.91,中文,,0,0,0,,我猜我可以进入我的一个演示类
Dialogue: 0,0:33:17.91,0:33:19.15,英文,,0,0,0,,So what is this doing?
Dialogue: 0,0:33:17.91,0:33:19.15,中文,,0,0,0,,那么这是在做什么
Dialogue: 0,0:33:19.15,0:33:21.89,英文,,0,0,0,,It just calls the print method on a SLList.
Dialogue: 0,0:33:19.15,0:33:21.89,中文,,0,0,0,,它只是在 SLList 上调用打印方法
Dialogue: 0,0:33:21.89,0:33:24.85,英文,,0,0,0,,So I'll say, I declare there's a new SLList.
Dialogue: 0,0:33:21.89,0:33:24.85,中文,,0,0,0,,我会说 我声明有一个新的 SLList
Dialogue: 0,0:33:24.85,0:33:26.97,英文,,0,0,0,,I put it in a memory box of type list 61b.
Dialogue: 0,0:33:24.85,0:33:26.97,中文,,0,0,0,,我把它放在一个类型为 List61B 的内存盒子里
Dialogue: 0,0:33:26.97,0:33:28.43,英文,,0,0,0,,We saw earlier that's fine.
Dialogue: 0,0:33:26.97,0:33:28.43,中文,,0,0,0,,我们之前看到那样就好了
Dialogue: 0,0:33:28.43,0:33:31.83,英文,,0,0,0,,And I'll add the words elk dwell on existential crises.
Dialogue: 0,0:33:28.43,0:33:31.83,中文,,0,0,0,,我会加上elk dwell on existential crises这几个词
Dialogue: 0,0:33:31.83,0:33:33.03,英文,,0,0,0,,And I'll try to print it out.
Dialogue: 0,0:33:31.83,0:33:33.03,中文,,0,0,0,,然后我会尝试打印它出来
Dialogue: 0,0:33:33.03,0:33:34.59,英文,,0,0,0,,So if I run it.
Dialogue: 0,0:33:33.03,0:33:34.59,中文,,0,0,0,,如果我运行它
Dialogue: 0,0:33:34.59,0:33:37.51,英文,,0,0,0,,I will get Elk, Dwell, and Existential Crises.
Dialogue: 0,0:33:34.59,0:33:37.51,中文,,0,0,0,,我会得到elk dwell和existential crises
Dialogue: 0,0:33:37.51,0:33:45.84,英文,,0,0,0,,And the really cool thing about this, I get Elk, Dwell, but the really cool thing is that if you look in the SLList class, SLList class, look, no print, right?
Dialogue: 0,0:33:37.51,0:33:45.84,中文,,0,0,0,,而这真正酷的事情是 我得到了Elk Dwell 但真正酷的事情是 如果你看SLList类 SLList类 看 没有打印 对吧
Dialogue: 0,0:33:45.84,0:33:46.74,英文,,0,0,0,,That's not the print method.
Dialogue: 0,0:33:45.84,0:33:46.74,中文,,0,0,0,,那不是打印的方法
Dialogue: 0,0:33:46.74,0:33:48.80,英文,,0,0,0,,That's just some print line call.
Dialogue: 0,0:33:46.74,0:33:48.80,中文,,0,0,0,,这只是一些打印行调用
Dialogue: 0,0:33:48.80,0:34:01.08,英文,,0,0,0,,So even though my SLList did not have any print state or print method whatsoever, the SLList still inherited the default method that I wrote in List60 and B. And the same would go for an AList.
Dialogue: 0,0:33:48.80,0:34:01.08,中文,,0,0,0,,即使我的 SLList 没有任何打印状态或打印方法 SLList 仍然继承了我在 List61B中编写的默认方法 对于 AList 也是一样的
Dialogue: 0,0:34:01.08,0:34:07.03,英文,,0,0,0,,There's no print method, but if I had a list with these items, I could still print them out, which is pretty cool.
Dialogue: 0,0:34:01.08,0:34:07.03,中文,,0,0,0,,没有打印方法 但如果我有一个包含这些项的列表 我仍然可以将它们打印出来 这很酷
Dialogue: 0,0:34:07.03,0:34:09.55,英文,,0,0,0,,So there's my default method that I wrote.
Dialogue: 0,0:34:07.03,0:34:09.55,中文,,0,0,0,,这就是我写的默认方法
Dialogue: 0,0:34:09.55,0:34:12.65,英文,,0,0,0,,How was I able to write this despite not knowing what type of list?
Dialogue: 0,0:34:09.55,0:34:12.65,中文,,0,0,0,,尽管我不知道列表的类型 我是如何写这个的
Dialogue: 0,0:34:12.65,0:34:18.97,英文,,0,0,0,,I leveraged the knowledge that all lists have a size method, all lists have a get method, so I can safely use those.
Dialogue: 0,0:34:12.65,0:34:18.97,中文,,0,0,0,,我利用了所有列表都有一个 size 方法 所有列表都有一个 get 方法的知识 我可以安全地使用它们
Dialogue: 0,0:34:18.97,0:34:19.93,英文,,0,0,0,,OK.
Dialogue: 0,0:34:19.93,0:34:29.03,英文,,0,0,0,,And then I was able to print out dwell on existential crises, even though my S list did not have a print method, because it inherited the print method that I wrote earlier.
Dialogue: 0,0:34:19.93,0:34:29.03,中文,,0,0,0,,然后我能够打印出对存在危机的沉思 尽管我的 SLList没有打印方法 因为它继承了我之前写的打印方法
Dialogue: 0,0:34:29.03,0:34:31.37,英文,,0,0,0,,So question for you, then. Are we done?
Dialogue: 0,0:34:29.03,0:34:31.37,中文,,0,0,0,,那么问题来了  我们结束了吗
Dialogue: 0,0:34:31.37,0:34:37.66,英文,,0,0,0,,Can we just have every list use the default method that we provide to all of our subclasses?
Dialogue: 0,0:34:31.37,0:34:37.66,中文,,0,0,0,,我们能否让每个列表都使用我们提供给所有子类的默认方法
Dialogue: 0,0:34:37.66,0:34:45.25,英文,,0,0,0,,Or maybe, just maybe, is this method a little bit slow for a specific type of list?
Dialogue: 0,0:34:37.66,0:34:45.25,中文,,0,0,0,,或者 也许 这个方法对于某种类型的列表来说有点慢
Dialogue: 0,0:34:45.25,0:34:46.91,英文,,0,0,0,,Or maybe both type of lists.
Dialogue: 0,0:34:45.25,0:34:46.91,中文,,0,0,0,,或者可能是两种类型的列表
Dialogue: 0,0:34:46.91,0:34:49.99,英文,,0,0,0,,So what do you think?
Dialogue: 0,0:34:46.91,0:34:49.99,中文,,0,0,0,,那么你觉得呢
Dialogue: 0,0:34:49.99,0:34:52.21,英文,,0,0,0,,Is it too slow for some types of lists?
Dialogue: 0,0:34:49.99,0:34:52.21,中文,,0,0,0,,有些类型的列表速度太慢了吗
Dialogue: 0,0:34:52.21,0:34:55.64,英文,,0,0,0,,Is it kind of fast? Well, I guess I could start with an alist.
Dialogue: 0,0:34:52.21,0:34:55.64,中文,,0,0,0,,速度还算可以吧  我想我可以从一个 AList 开始
Dialogue: 0,0:34:55.64,0:34:58.86,英文,,0,0,0,,So in an alist, getting size, pretty quick.
Dialogue: 0,0:34:55.64,0:34:58.86,中文,,0,0,0,,在一个 AList 中 获取大小 相当快的
Dialogue: 0,0:34:58.86,0:35:00.46,英文,,0,0,0,,Remember, we had our size variable.
Dialogue: 0,0:34:58.86,0:35:00.46,中文,,0,0,0,,记得 我们有我们的大小变量
Dialogue: 0,0:35:00.46,0:35:01.70,英文,,0,0,0,,You just return it.
Dialogue: 0,0:35:00.46,0:35:01.70,中文,,0,0,0,,你只需将其返回
Dialogue: 0,0:35:01.70,0:35:03.58,英文,,0,0,0,,What about getting things in an alist?
Dialogue: 0,0:35:01.70,0:35:03.58,中文,,0,0,0,,在 AList 中获取东西怎么样
Dialogue: 0,0:35:03.58,0:35:04.70,英文,,0,0,0,,How fast is that?
Dialogue: 0,0:35:03.58,0:35:04.70,中文,,0,0,0,,那有多快
Dialogue: 0,0:35:04.70,0:35:06.85,英文,,0,0,0,,Well, we had to go in the array and get an item.
Dialogue: 0,0:35:04.70,0:35:06.85,中文,,0,0,0,,我们得在数组中找到一个项目
Dialogue: 0,0:35:06.85,0:35:10.13,英文,,0,0,0,,But in an alist, getting something from an item, pretty fast.
Dialogue: 0,0:35:06.85,0:35:10.13,中文,,0,0,0,,但在一个列表中 从一个项目中获取东西 相当快的
Dialogue: 0,0:35:10.13,0:35:11.49,英文,,0,0,0,,So I'm OK with that.
Dialogue: 0,0:35:10.13,0:35:11.49,中文,,0,0,0,,我对此感到满意
Dialogue: 0,0:35:11.49,0:35:13.99,英文,,0,0,0,,What about SLLists?
Dialogue: 0,0:35:11.49,0:35:13.99,中文,,0,0,0,,SLList 呢
Dialogue: 0,0:35:13.99,0:35:16.57,英文,,0,0,0,,Well, what is the size method of an SLList?
Dialogue: 0,0:35:13.99,0:35:16.57,中文,,0,0,0,,那么 SLList 的 size 方法是什么
Dialogue: 0,0:35:16.57,0:35:17.47,英文,,0,0,0,,You just get the size.
Dialogue: 0,0:35:16.57,0:35:17.47,中文,,0,0,0,,你只需获取大小
Dialogue: 0,0:35:17.47,0:35:18.63,英文,,0,0,0,,It's an instance variable.
Dialogue: 0,0:35:17.47,0:35:18.63,中文,,0,0,0,,这是一个实例变量
Dialogue: 0,0:35:18.63,0:35:19.94,英文,,0,0,0,,It's pretty quick.
Dialogue: 0,0:35:18.63,0:35:19.94,中文,,0,0,0,,这相当快
Dialogue: 0,0:35:19.94,0:35:21.96,英文,,0,0,0,,How do you get something in an SLList?
Dialogue: 0,0:35:19.94,0:35:21.96,中文,,0,0,0,,怎么在SLList中获取东西
Dialogue: 0,0:35:21.96,0:35:25.10,英文,,0,0,0,,Start at the beginning, scan.
Dialogue: 0,0:35:21.96,0:35:25.10,中文,,0,0,0,,从开头开始 扫描
Dialogue: 0,0:35:25.10,0:35:34.21,英文,,0,0,0,,Ah, OK, that's the problem, which is, well, if I loop through all the items and I try to call get 0, get 1, get 2, then I'm going to be calling get over and over again.
Dialogue: 0,0:35:25.10,0:35:34.21,中文,,0,0,0,,啊 问题就在这里 也就是说 如果我循环遍历所有项目 并尝试调用 get 0、get 1、get 2 那么我将一遍又一遍地调用 get
Dialogue: 0,0:35:34.21,0:35:36.15,英文,,0,0,0,,What's the X list going to do?
Dialogue: 0,0:35:34.21,0:35:36.15,中文,,0,0,0,,X 列表会做什么
Dialogue: 0,0:35:36.15,0:35:41.31,英文,,0,0,0,,I'm going to call get 0, scan to item 0, get 1, start at the beginning, scan to item 1.
Dialogue: 0,0:35:36.15,0:35:41.31,中文,,0,0,0,,我会调用 get 0 扫描到第 0 项 然后调用 get 1 从头开始 扫描到第 1 项
Dialogue: 0,0:35:41.31,0:35:44.65,英文,,0,0,0,,Get 200, start at the beginning, scan to item 200.
Dialogue: 0,0:35:41.31,0:35:44.65,中文,,0,0,0,,获取 200 从头开始 扫描到项目 200
Dialogue: 0,0:35:44.65,0:35:48.50,英文,,0,0,0,,Get 201, start at the beginning, scan to 201.
Dialogue: 0,0:35:44.65,0:35:48.50,中文,,0,0,0,,获取 201 从头开始 扫描到 201
Dialogue: 0,0:35:48.50,0:35:52.88,英文,,0,0,0,,So I'm scanning the list over and over and over again to repeatedly get all the items.
Dialogue: 0,0:35:48.50,0:35:52.88,中文,,0,0,0,,我一遍又一遍地扫描列表 一次又一次地获取所有项目
Dialogue: 0,0:35:52.88,0:35:59.12,英文,,0,0,0,,And if I do, I get 500,000, scan to item 500,000, get 500,001.
Dialogue: 0,0:35:52.88,0:35:59.12,中文,,0,0,0,,如果我这样做 我会得到 500,000 扫描到项目 500,000 获取 500,001
Dialogue: 0,0:35:59.12,0:36:02.95,英文,,0,0,0,,I start at the beginning all over again, and I scan to 500,001.
Dialogue: 0,0:35:59.12,0:36:02.95,中文,,0,0,0,,我从头开始重新开始 然后扫描到 500,001
Dialogue: 0,0:36:02.95,0:36:04.79,英文,,0,0,0,,That's how we wrote our get method.
Dialogue: 0,0:36:02.95,0:36:04.79,中文,,0,0,0,,这就是我们编写获取方法的方式
Dialogue: 0,0:36:04.79,0:36:06.81,英文,,0,0,0,,So it turns out.
Dialogue: 0,0:36:04.79,0:36:06.81,中文,,0,0,0,,结果就是这样
Dialogue: 0,0:36:06.81,0:36:10.87,英文,,0,0,0,,If you stare really closely, there's like a double nested for loop happening here.
Dialogue: 0,0:36:06.81,0:36:10.87,中文,,0,0,0,,如果你仔细看的话 这里有一个双重嵌套的for循环
Dialogue: 0,0:36:10.87,0:36:11.97,英文,,0,0,0,,So I don't like it.
Dialogue: 0,0:36:10.87,0:36:11.97,中文,,0,0,0,,我不喜欢它
Dialogue: 0,0:36:11.97,0:36:19.16,英文,,0,0,0,,So it turns out this method is too slow for SLList because I'm repeatedly scanning the array over and over, and it's wasting time.
Dialogue: 0,0:36:11.97,0:36:19.16,中文,,0,0,0,,结果发现这个方法对SLList来说太慢了 因为我一遍又一遍地扫描数组 浪费时间
Dialogue: 0,0:36:19.16,0:36:21.34,英文,,0,0,0,,So how do I make it better?
Dialogue: 0,0:36:19.16,0:36:21.34,中文,,0,0,0,,那么我该如何改进呢
Dialogue: 0,0:36:21.34,0:36:27.65,英文,,0,0,0,,Well, it turns out that if you do not like the default method that was gifted to you, so, you know, now we're the SLList, and our parents,
Dialogue: 0,0:36:21.34,0:36:27.65,中文,,0,0,0,,原来如果你不喜欢那个默认的方法 它就被赋予给你了 你知道的 现在我们是SLList
Dialogue: 0,0:36:27.65,0:36:35.65,英文,,0,0,0,,the low-61B, they like gifted to us this default method and said, you don't have to write a print method if you don't want to.
Dialogue: 0,0:36:27.65,0:36:35.65,中文,,0,0,0,,而我们的父类 低61B 他们就把这个默认的方法赋予给了我们 说如果你不想写一个打印方法的话就算了
Dialogue: 0,0:36:35.65,0:36:36.85,英文,,0,0,0,,But you know what?
Dialogue: 0,0:36:35.65,0:36:36.85,中文,,0,0,0,,但你知道吗
Dialogue: 0,0:36:36.85,0:36:38.95,英文,,0,0,0,,I don't like the print method that was given to me.
Dialogue: 0,0:36:36.85,0:36:38.95,中文,,0,0,0,,我不喜欢给我的那个打印方法
Dialogue: 0,0:36:38.95,0:36:40.71,英文,,0,0,0,,So I'm going to write a better one.
Dialogue: 0,0:36:38.95,0:36:40.71,中文,,0,0,0,,我要写一个更好的
Dialogue: 0,0:36:40.71,0:36:41.65,英文,,0,0,0,,I'm an SLList.
Dialogue: 0,0:36:40.71,0:36:41.65,中文,,0,0,0,,我是SLList
Dialogue: 0,0:36:41.65,0:36:46.76,英文,,0,0,0,,I know specific SLList things that my parent, the general List60UMB, did not know.
Dialogue: 0,0:36:41.65,0:36:46.76,中文,,0,0,0,,我知道一些特定的SLList事项 这是我的父类 一般的List61B所不知道的
Dialogue: 0,0:36:46.76,0:36:52.18,英文,,0,0,0,,So I'm going to say, I actually know more than my List60UMB parent does.
Dialogue: 0,0:36:46.76,0:36:52.18,中文,,0,0,0,,我要说 我实际上比我的List61B父类知道得更多
Dialogue: 0,0:36:52.18,0:36:55.36,英文,,0,0,0,,I trust myself to write a more efficient print method.
Dialogue: 0,0:36:52.18,0:36:55.36,中文,,0,0,0,,我相信自己能写出一个更高效的打印方法
Dialogue: 0,0:36:55.36,0:36:57.32,英文,,0,0,0,,So let's write a more efficient print method.
Dialogue: 0,0:36:55.36,0:36:57.32,中文,,0,0,0,,那我们来写一个更高效的打印方法吧
Dialogue: 0,0:36:57.32,0:37:00.08,英文,,0,0,0,,So I'm still going to write public void print.
Dialogue: 0,0:36:57.32,0:37:00.08,中文,,0,0,0,,我还是要写public void print()
Dialogue: 0,0:37:00.08,0:37:03.88,英文,,0,0,0,,It's the exact same function signature, exactly the same.
Dialogue: 0,0:37:00.08,0:37:03.88,中文,,0,0,0,,这是完全相同的函数签名 完全一样
Dialogue: 0,0:37:03.88,0:37:05.41,英文,,0,0,0,,OK, great.
Dialogue: 0,0:37:03.88,0:37:05.41,中文,,0,0,0,,太棒了
Dialogue: 0,0:37:05.41,0:37:11.01,英文,,0,0,0,,And then I'm going to add the overrides tag just to remind myself that I'm actually overriding what the boss says.
Dialogue: 0,0:37:05.41,0:37:11.01,中文,,0,0,0,,然后我会添加重写标记 只是提醒自己我实际上正在重写老板说的话
Dialogue: 0,0:37:11.01,0:37:13.41,英文,,0,0,0,,And this time, I'm really truly overriding.
Dialogue: 0,0:37:11.01,0:37:13.41,中文,,0,0,0,,这次 我真的是在真正重写
Dialogue: 0,0:37:13.41,0:37:15.49,英文,,0,0,0,,I was given this implementation.
Dialogue: 0,0:37:13.41,0:37:15.49,中文,,0,0,0,,我被给予了这个实现
Dialogue: 0,0:37:15.49,0:37:17.09,英文,,0,0,0,,And I'm saying, no, I reject it.
Dialogue: 0,0:37:15.49,0:37:17.09,中文,,0,0,0,,我在说 不 我拒绝了
Dialogue: 0,0:37:17.09,0:37:21.57,英文,,0,0,0,,I'm going to write my own because I trust myself to write it more efficiently.
Dialogue: 0,0:37:17.09,0:37:21.57,中文,,0,0,0,,我要自己写 因为我相信自己写得更有效率
Dialogue: 0,0:37:21.57,0:37:23.45,英文,,0,0,0,,And again, why add this override tag?
Dialogue: 0,0:37:21.57,0:37:23.45,中文,,0,0,0,,再说一遍 为什么要添加这个覆盖标记呢
Dialogue: 0,0:37:23.45,0:37:25.55,英文,,0,0,0,,If I don't add it, I'm still overriding.
Dialogue: 0,0:37:23.45,0:37:25.55,中文,,0,0,0,,如果我不添加它 我仍然在覆盖
Dialogue: 0,0:37:25.55,0:37:31.16,英文,,0,0,0,,But by adding it, it helps me catch things like, well, if I said pernt, I would, you know, it's OK to have a pernt method.
Dialogue: 0,0:37:25.55,0:37:31.16,中文,,0,0,0,,但通过添加它 有助于我发现诸如 如果我说pirnt 你知道的 有一个pirnt方法是可以的
Dialogue: 0,0:37:31.16,0:37:35.63,英文,,0,0,0,,But this would not actually be overriding. That's why I like to have override.
Dialogue: 0,0:37:31.16,0:37:35.63,中文,,0,0,0,,但这实际上并不是覆盖  这就是为什么我喜欢有覆盖的原因
Dialogue: 0,0:37:35.63,0:37:37.47,英文,,0,0,0,,OK, so now we're in the SLList.
Dialogue: 0,0:37:35.63,0:37:37.47,中文,,0,0,0,,现在我们在SLList中
Dialogue: 0,0:37:37.47,0:37:40.27,英文,,0,0,0,,We have access to all these wonderful SLList things.
Dialogue: 0,0:37:37.47,0:37:40.27,中文,,0,0,0,,我们可以访问所有这些精彩的SLList事物
Dialogue: 0,0:37:40.27,0:37:42.53,英文,,0,0,0,,So I can write an SLList-specific print method.
Dialogue: 0,0:37:40.27,0:37:42.53,中文,,0,0,0,,那我可以写一个 SLList 专用的打印方法
Dialogue: 0,0:37:42.53,0:37:52.19,英文,,0,0,0,,So maybe I'll do something like, hmm, maybe instead of scanning over and over every time and calling get, maybe I'll just have a little pointer, like we've seen in all the previous lectures.
Dialogue: 0,0:37:42.53,0:37:52.19,中文,,0,0,0,,也许我会做点什么 也许不用每次都扫描然后调用 get 也许我只是会有一个小指针 就像我们在之前的所有讲座中看到的那样
Dialogue: 0,0:37:52.19,0:37:55.07,英文,,0,0,0,,So I'll say I'm going to start at sentinel.next.
Dialogue: 0,0:37:52.19,0:37:55.07,中文,,0,0,0,,我会说我要从 sentinel.next 开始
Dialogue: 0,0:37:55.07,0:37:58.53,英文,,0,0,0,,And I guess I'm going to go until p is not equal to null.
Dialogue: 0,0:37:55.07,0:37:58.53,中文,,0,0,0,,我猜我要一直走直到 p 不等于 null
Dialogue: 0,0:37:58.53,0:38:03.28,英文,,0,0,0,,And I guess every time I step, I will step p equals p.next.
Dialogue: 0,0:37:58.53,0:38:03.28,中文,,0,0,0,,而且我猜每次我走一步 我会让 p 等于 p.next
Dialogue: 0,0:38:03.28,0:38:10.64,英文,,0,0,0,,So I'll scan through the array, and then every time I get to an item, I'll call print p.item.
Dialogue: 0,0:38:03.28,0:38:10.64,中文,,0,0,0,,我会扫描整个数组 然后每次我到达一个项目时 我会调用 print p.item
Dialogue: 0,0:38:10.64,0:38:11.48,英文,,0,0,0,,OK, great.
Dialogue: 0,0:38:10.64,0:38:11.48,中文,,0,0,0,,很好
Dialogue: 0,0:38:11.48,0:38:15.96,英文,,0,0,0,,And then at the end, I'll add a new line just to make things look nice.
Dialogue: 0,0:38:11.48,0:38:15.96,中文,,0,0,0,,然后最后 我会加一个新行 只是为了让东西看起来好看
Dialogue: 0,0:38:15.96,0:38:24.23,英文,,0,0,0,,So I wrote my own custom print method, and I overwrote what the boss says.
Dialogue: 0,0:38:15.96,0:38:24.23,中文,,0,0,0,,我写了自己的自定义打印方法 我覆盖了老板说的内容
Dialogue: 0,0:38:24.23,0:38:27.35,英文,,0,0,0,,I rejected the default method that was given to me.
Dialogue: 0,0:38:24.23,0:38:27.35,中文,,0,0,0,,我拒绝了给我的默认方法
Dialogue: 0,0:38:27.35,0:38:37.26,英文,,0,0,0,,I wrote my own because it's more efficient, and I trust myself to use SLIS-specific things, whereas the default method had to work for all the 61Bs, so it could not do that.
Dialogue: 0,0:38:27.35,0:38:37.26,中文,,0,0,0,,我写了自己的 因为它更有效率 我相信自己能使用 SLIS 的特定内容 而默认方法必须适用于所有的 61B 它不能这样做
Dialogue: 0,0:38:37.26,0:38:46.23,英文,,0,0,0,,Just to really, really convince you that this is about to be executed, I'm going to have the print method in SLList say something like, the boss doesn't know what he's doing.
Dialogue: 0,0:38:37.26,0:38:46.23,中文,,0,0,0,,只是为了真的 真的让你相信这将要执行 我会让 SLList 的打印方法说一些像 老板不知道他在做什么的话
Dialogue: 0,0:38:46.23,0:38:50.49,英文,,0,0,0,,OK, so now if I go back to isADemo, what's it complaining about?
Dialogue: 0,0:38:46.23,0:38:50.49,中文,,0,0,0,,现在如果我回到 isADemo 它又在抱怨什么
Dialogue: 0,0:38:50.49,0:38:51.83,英文,,0,0,0,,Oh, semicolon.
Dialogue: 0,0:38:50.49,0:38:51.83,中文,,0,0,0,,哦 分号
Dialogue: 0,0:38:51.83,0:38:59.04,英文,,0,0,0,,OK, so if I go back to isADemo and I run this demo again, well, now,
Dialogue: 0,0:38:51.83,0:38:59.04,中文,,0,0,0,,好吧 那么如果我回到 isADemo 并且再次运行这个演示 现在
Dialogue: 0,0:38:59.04,0:39:00.24,英文,,0,0,0,,I hope you're all really excited.
Dialogue: 0,0:38:59.04,0:39:00.24,中文,,0,0,0,,我希望大家都非常兴奋
Dialogue: 0,0:39:00.24,0:39:02.62,英文,,0,0,0,,Well, now we get elk dwell on existential crises.
Dialogue: 0,0:39:00.24,0:39:02.62,中文,,0,0,0,,好吧 现在我们开始考虑存在危机
Dialogue: 0,0:39:02.62,0:39:05.13,英文,,0,0,0,,But I also get the boss doesn't know what he's doing.
Dialogue: 0,0:39:02.62,0:39:05.13,中文,,0,0,0,,但我也觉得老板不知道自己在做什么
Dialogue: 0,0:39:05.13,0:39:07.57,英文,,0,0,0,,I also guess I had extra on there.
Dialogue: 0,0:39:05.13,0:39:07.57,中文,,0,0,0,,我还猜我多加了一些
Dialogue: 0,0:39:07.57,0:39:08.55,英文,,0,0,0,,OK, whatever.
Dialogue: 0,0:39:07.57,0:39:08.55,中文,,0,0,0,,好吧 随便
Dialogue: 0,0:39:08.55,0:39:11.19,英文,,0,0,0,,So now I get the boss doesn't know what he's doing.
Dialogue: 0,0:39:08.55,0:39:11.19,中文,,0,0,0,,现在我明白老板不知道自己在做什么
Dialogue: 0,0:39:11.19,0:39:13.09,英文,,0,0,0,,Elk dwell on existential crises.
Dialogue: 0,0:39:11.19,0:39:13.09,中文,,0,0,0,,麋鹿沉浸在存在危机中
Dialogue: 0,0:39:13.09,0:39:16.84,英文,,0,0,0,,And so what this tells me is that I did not execute the default method.
Dialogue: 0,0:39:13.09,0:39:16.84,中文,,0,0,0,,这告诉我 我没有执行默认方法
Dialogue: 0,0:39:16.84,0:39:21.62,英文,,0,0,0,,I actually executed this overridden method, the one that had this extra print statement.
Dialogue: 0,0:39:16.84,0:39:21.62,中文,,0,0,0,,实际上 我执行了这个重写方法 这个方法有额外的打印语句
Dialogue: 0,0:39:21.62,0:39:23.66,英文,,0,0,0,,And that's good, because this one is faster.
Dialogue: 0,0:39:21.62,0:39:23.66,中文,,0,0,0,,这很好 因为这个更快
Dialogue: 0,0:39:23.66,0:39:25.64,英文,,0,0,0,,And we want this one to execute.
Dialogue: 0,0:39:23.66,0:39:25.64,中文,,0,0,0,,我们希望这个执行
Dialogue: 0,0:39:25.64,0:39:31.85,英文,,0,0,0,,OK, just to really convince you that the override tag, it still will work if I don't have the override tag.
Dialogue: 0,0:39:25.64,0:39:31.85,中文,,0,0,0,,只是为了真正说服你 覆盖标签 如果我没有覆盖标签 它仍然会起作用
Dialogue: 0,0:39:31.85,0:39:37.93,英文,,0,0,0,,So even if I don't tag that I'm overriding, I am still really overriding because I'm replacing the method.
Dialogue: 0,0:39:31.85,0:39:37.93,中文,,0,0,0,,即使我没有标记我正在覆盖 我仍然确实是在覆盖 因为我正在替换这个方法
Dialogue: 0,0:39:37.93,0:39:40.05,英文,,0,0,0,,I still get the boss doesn't know what he's doing.
Dialogue: 0,0:39:37.93,0:39:40.05,中文,,0,0,0,,老板仍然不知道自己在做什么
Dialogue: 0,0:39:40.05,0:39:43.70,英文,,0,0,0,,But why might I want to add the override?
Dialogue: 0,0:39:40.05,0:39:43.70,中文,,0,0,0,,但是我为什么要添加覆盖
Dialogue: 0,0:39:43.70,0:39:46.62,英文,,0,0,0,,Because again, what if instead of print, I said print?
Dialogue: 0,0:39:43.70,0:39:46.62,中文,,0,0,0,,因为再次 如果我说的不是打印而是打印呢
Dialogue: 0,0:39:46.62,0:39:48.88,英文,,0,0,0,,Well, it's OK to have a print method.
Dialogue: 0,0:39:46.62,0:39:48.88,中文,,0,0,0,,好吧 拥有一个打印方法是可以的
Dialogue: 0,0:39:48.88,0:39:50.80,英文,,0,0,0,,Lists can print all they want.
Dialogue: 0,0:39:48.88,0:39:50.80,中文,,0,0,0,,列表可以随心所欲地打印
Dialogue: 0,0:39:50.80,0:39:57.59,英文,,0,0,0,,But if I add print and I run this as a demo again, you'll notice that I am no longer using the overwrite and print method.
Dialogue: 0,0:39:50.80,0:39:57.59,中文,,0,0,0,,但是如果我添加打印并再次运行这个演示 你会注意到我不再使用覆盖和打印方法了
Dialogue: 0,0:39:57.59,0:40:01.95,英文,,0,0,0,,There's no more boss doesn't know what he's doing because I didn't actually overwrite print.
Dialogue: 0,0:39:57.59,0:40:01.95,中文,,0,0,0,,老板不再不知道自己在做什么 因为我实际上没有覆盖打印
Dialogue: 0,0:40:01.95,0:40:06.03,英文,,0,0,0,,But if I edit the overwrite tag, then Java will complain and say, oh, you're not overwriting.
Dialogue: 0,0:40:01.95,0:40:06.03,中文,,0,0,0,,但如果我编辑覆盖标签 那么Java会抱怨并说 哦 你没有覆盖
Dialogue: 0,0:40:06.03,0:40:08.59,英文,,0,0,0,,And I will look and be like, ah, that's not print.
Dialogue: 0,0:40:06.03,0:40:08.59,中文,,0,0,0,,然后我会看一看 啊 那不是打印
Dialogue: 0,0:40:08.59,0:40:09.67,英文,,0,0,0,,It's print.
Dialogue: 0,0:40:08.59,0:40:09.67,中文,,0,0,0,,是打印
Dialogue: 0,0:40:09.67,0:40:10.85,英文,,0,0,0,,OK.
Dialogue: 0,0:40:10.85,0:40:14.79,英文,,0,0,0,,So do add the override tag just in case you print it instead of printed.
Dialogue: 0,0:40:10.85,0:40:14.79,中文,,0,0,0,,在你打印而不是打印的情况下添加覆盖标签以防万一
Dialogue: 0,0:40:14.79,0:40:17.55,英文,,0,0,0,,And if you don't like the default method, you can override it.
Dialogue: 0,0:40:14.79,0:40:17.55,中文,,0,0,0,,如果你不喜欢默认的方法 你可以覆盖它
Dialogue: 0,0:40:17.55,0:40:24.80,英文,,0,0,0,,In this case, you're really deleting what the parent class gave to you and writing your own preferred print method.
Dialogue: 0,0:40:17.55,0:40:24.80,中文,,0,0,0,,在这种情况下 你实际上是在删除父类给你的内容 并编写自己喜欢的打印方法
Dialogue: 0,0:40:24.80,0:40:30.06,英文,,0,0,0,,OK, so questions before the last topic?
Dialogue: 0,0:40:24.80,0:40:30.06,中文,,0,0,0,,在最后一个话题之前有问题吗
Dialogue: 0,0:40:30.06,0:40:30.98,英文,,0,0,0,,Well, what did you want me to do?
Dialogue: 0,0:40:30.06,0:40:30.98,中文,,0,0,0,,你想让我做什么
Dialogue: 0,0:40:30.98,0:40:34.58,英文,,0,0,0,,Override what?
Dialogue: 0,0:40:30.98,0:40:34.58,中文,,0,0,0,,覆盖什么
Dialogue: 0,0:40:34.58,0:40:36.46,英文,,0,0,0,,Can I overwrite the override?
Dialogue: 0,0:40:34.58,0:40:36.46,中文,,0,0,0,,我能覆盖这个覆盖吗
Dialogue: 0,0:40:36.46,0:40:40.78,英文,,0,0,0,,I feel like I don't follow.
Dialogue: 0,0:40:36.46,0:40:40.78,中文,,0,0,0,,我感觉我不太明白
Dialogue: 0,0:40:40.78,0:40:41.40,英文,,0,0,0,,Oh, I see.
Dialogue: 0,0:40:40.78,0:40:41.40,中文,,0,0,0,,哦 我明白了
Dialogue: 0,0:40:41.40,0:40:43.20,英文,,0,0,0,,You want, like, multi-generational inheritance.
Dialogue: 0,0:40:41.40,0:40:43.20,中文,,0,0,0,,你想要 像 多代继承
Dialogue: 0,0:40:43.20,0:40:45.00,英文,,0,0,0,,So we're not going to talk about multi-generational.
Dialogue: 0,0:40:43.20,0:40:45.00,中文,,0,0,0,,我们不打算谈论多代
Dialogue: 0,0:40:45.00,0:40:49.16,英文,,0,0,0,,Can you override the decorator?
Dialogue: 0,0:40:45.00,0:40:49.16,中文,,0,0,0,,你能覆盖修饰符吗
Dialogue: 0,0:40:49.16,0:40:49.52,英文,,0,0,0,,Oh, OK.
Dialogue: 0,0:40:49.16,0:40:49.52,中文,,0,0,0,,哦
Dialogue: 0,0:40:49.52,0:40:52.03,英文,,0,0,0,,So you want me to, like, override the override?
Dialogue: 0,0:40:49.52,0:40:52.03,中文,,0,0,0,,你想让我覆盖覆盖
Dialogue: 0,0:40:52.03,0:40:53.07,英文,,0,0,0,,I don't know if this is doable.
Dialogue: 0,0:40:52.03,0:40:53.07,中文,,0,0,0,,我不知道这可行不可行
Dialogue: 0,0:40:53.07,0:40:55.43,英文,,0,0,0,,I think it just starts complaining and getting confused.
Dialogue: 0,0:40:53.07,0:40:55.43,中文,,0,0,0,,我觉得它只会开始抱怨并且变得困惑
Dialogue: 0,0:40:55.43,0:40:55.87,英文,,0,0,0,,I don't know.
Dialogue: 0,0:40:55.43,0:40:55.87,中文,,0,0,0,,我不知道
Dialogue: 0,0:40:55.87,0:41:04.88,英文,,0,0,0,,Maybe we can try it afterwards.
Dialogue: 0,0:40:55.87,0:41:04.88,中文,,0,0,0,,也许我们之后可以试试
Dialogue: 0,0:41:04.88,0:41:06.10,英文,,0,0,0,,Yeah, it's part of some library.
Dialogue: 0,0:41:04.88,0:41:06.10,中文,,0,0,0,,是的 这是某个库的一部分
Dialogue: 0,0:41:06.10,0:41:07.62,英文,,0,0,0,,Talk to us afterwards.
Dialogue: 0,0:41:06.10,0:41:07.62,中文,,0,0,0,,之后再跟我们说
Dialogue: 0,0:41:07.62,0:41:08.76,英文,,0,0,0,,I am intrigued.
Dialogue: 0,0:41:07.62,0:41:08.76,中文,,0,0,0,,我很感兴趣
Dialogue: 0,0:41:08.76,0:41:13.24,英文,,0,0,0,,But in the interest of getting everyone out on time after lecture, fun question.
Dialogue: 0,0:41:08.76,0:41:13.24,中文,,0,0,0,,但为了让每个人在讲座之后都能准时离开 我们就不问有趣的问题了
Dialogue: 0,0:41:13.24,0:41:13.42,英文,,0,0,0,,One more?
Dialogue: 0,0:41:13.24,0:41:13.42,中文,,0,0,0,,还有一个吗
Dialogue: 0,0:41:13.42,0:41:13.52,英文,,0,0,0,,Yeah.
Dialogue: 0,0:41:13.42,0:41:13.52,中文,,0,0,0,,是的
Dialogue: 0,0:41:13.52,0:41:23.79,英文,,0,0,0,,After overriding the print method from that object, can you access the interface's print method?
Dialogue: 0,0:41:13.52,0:41:23.79,中文,,0,0,0,,覆盖了那个对象的打印方法之后 你能访问接口的打印方法吗
Dialogue: 0,0:41:23.79,0:41:24.33,英文,,0,0,0,,Hmm.
Dialogue: 0,0:41:23.79,0:41:24.33,中文,,0,0,0,,嗯
Dialogue: 0,0:41:24.33,0:41:27.23,英文,,0,0,0,,Can I access the interface's print method if I am in SLList?
Dialogue: 0,0:41:24.33,0:41:27.23,中文,,0,0,0,,如果我在SLList中 能访问接口的打印方法吗
Dialogue: 0,0:41:27.23,0:41:28.65,英文,,0,0,0,,Super.print.
Dialogue: 0,0:41:27.23,0:41:28.65,中文,,0,0,0,,Super.print
Dialogue: 0,0:41:28.65,0:41:28.93,英文,,0,0,0,,I can do.
Dialogue: 0,0:41:28.65,0:41:28.93,中文,,0,0,0,,我可以的
Dialogue: 0,0:41:28.93,0:41:29.23,英文,,0,0,0,,Yeah.
Dialogue: 0,0:41:28.93,0:41:29.23,中文,,0,0,0,,是的
Dialogue: 0,0:41:29.23,0:41:30.61,英文,,0,0,0,,So there's a keyword, super.
Dialogue: 0,0:41:29.23,0:41:30.61,中文,,0,0,0,,有一个关键字 super
Dialogue: 0,0:41:30.61,0:41:31.63,英文,,0,0,0,,Come back next time for it.
Dialogue: 0,0:41:30.61,0:41:31.63,中文,,0,0,0,,下次再来吧
Dialogue: 0,0:41:31.63,0:41:36.27,英文,,0,0,0,,So you can.
Dialogue: 0,0:41:31.63,0:41:36.27,中文,,0,0,0,,你可以
Dialogue: 0,0:41:36.27,0:41:37.57,英文,,0,0,0,,Like this?
Dialogue: 0,0:41:36.27,0:41:37.57,中文,,0,0,0,,这样行吗
Dialogue: 0,0:41:37.57,0:41:40.37,英文,,0,0,0,,Oh, you want me to call the parents method in main?
Dialogue: 0,0:41:37.57,0:41:40.37,中文,,0,0,0,,哦 你想让我在主函数中调用父方法吗
Dialogue: 0,0:41:40.37,0:41:41.49,英文,,0,0,0,,I actually don't know if that's possible.
Dialogue: 0,0:41:40.37,0:41:41.49,中文,,0,0,0,,其实我不确定那是否可能
Dialogue: 0,0:41:41.49,0:41:43.35,英文,,0,0,0,,That's a good question.
Dialogue: 0,0:41:41.49,0:41:43.35,中文,,0,0,0,,这是个好问题
Dialogue: 0,0:41:43.35,0:41:45.63,英文,,0,0,0,,So can I call the interfaces print?
Dialogue: 0,0:41:43.35,0:41:45.63,中文,,0,0,0,,那我可以调用接口的打印吗
Dialogue: 0,0:41:45.63,0:41:50.76,英文,,0,0,0,,I feel like I can't, because I have deleted what the parent gave to me.
Dialogue: 0,0:41:45.63,0:41:50.76,中文,,0,0,0,,我觉得我不能 因为我已经删除了父类给我的东西
Dialogue: 0,0:41:50.76,0:41:57.82,英文,,0,0,0,,Yeah, so my intuition is that unless you do something super strange, you've deleted and overwritten what the boss said, so you no longer have access to it.
Dialogue: 0,0:41:50.76,0:41:57.82,中文,,0,0,0,,我的直觉是 除非你做了什么超级奇怪的事情 你已经删除并覆盖了老板说的话 你不再有权访问它
Dialogue: 0,0:41:57.82,0:41:59.12,英文,,0,0,0,,That's a good question, though.
Dialogue: 0,0:41:57.82,0:41:59.12,中文,,0,0,0,,虽然这是个好问题
Dialogue: 0,0:41:59.12,0:42:00.29,英文,,0,0,0,,Oh, OK.
Dialogue: 0,0:42:00.29,0:42:06.91,英文,,0,0,0,,So I have one final topic to talk to you about, which is, if you looked at this, maybe you noticed something that was a little bit not obvious.
Dialogue: 0,0:42:00.29,0:42:06.91,中文,,0,0,0,,我有一个最后的话题要和你谈谈 那就是 如果你看了这个 也许你会注意到一些不太明显的东西
Dialogue: 0,0:42:06.91,0:42:09.53,英文,,0,0,0,,I just kind of blazed through it to try and convince you.
Dialogue: 0,0:42:06.91,0:42:09.53,中文,,0,0,0,,我只是匆匆忙忙地过了一遍 试图说服你
Dialogue: 0,0:42:09.53,0:42:18.49,英文,,0,0,0,,But let's take a look at it a bit closer, which is, let's look at this line right here, which says, I declare there is a variable of some list, called some list.
Dialogue: 0,0:42:09.53,0:42:18.49,中文,,0,0,0,,但是让我们仔细看一下 这里 我们看一下这一行 这里说 我声明有一个某些列表的变量 叫做某个列表
Dialogue: 0,0:42:18.49,0:42:20.11,英文,,0,0,0,,It's of type List601B.
Dialogue: 0,0:42:18.49,0:42:20.11,中文,,0,0,0,,它的类型是List61B
Dialogue: 0,0:42:20.11,0:42:24.67,英文,,0,0,0,,And I assign it, not just to any list, but specifically an S list.
Dialogue: 0,0:42:20.11,0:42:24.67,中文,,0,0,0,,然后我将其分配给一个列表 不仅仅是任何列表 而是特别是一个SLList
Dialogue: 0,0:42:24.67,0:42:27.33,英文,,0,0,0,,And so the question is, I have this variable.
Dialogue: 0,0:42:24.67,0:42:27.33,中文,,0,0,0,,问题是 我有这个变量
Dialogue: 0,0:42:27.33,0:42:29.33,英文,,0,0,0,,It's declared as a List61b.
Dialogue: 0,0:42:27.33,0:42:29.33,中文,,0,0,0,,它被声明为List61B
Dialogue: 0,0:42:29.33,0:42:31.16,英文,,0,0,0,,Then I assign it to an SLList.
Dialogue: 0,0:42:29.33,0:42:31.16,中文,,0,0,0,,然后我将其分配给一个SLList
Dialogue: 0,0:42:31.16,0:42:35.08,英文,,0,0,0,,So when I call someList.print, which print method am I actually calling?
Dialogue: 0,0:42:31.16,0:42:35.08,中文,,0,0,0,,那么当我调用someList.print时 我实际上调用的是哪个打印方法
Dialogue: 0,0:42:35.08,0:42:40.82,英文,,0,0,0,,Am I calling List61b's default, slow, sometimes general-purpose print method?
Dialogue: 0,0:42:35.08,0:42:40.82,中文,,0,0,0,,我是调用List61B的默认、慢、有时是通用的打印方法吗
Dialogue: 0,0:42:40.82,0:42:46.90,英文,,0,0,0,,Or am I calling SLList's specialized, boss doesn't know what he's doing, SLList-specific print method?
Dialogue: 0,0:42:40.82,0:42:46.90,中文,,0,0,0,,还是我在调用 SLList 的专门方法 老板不知道他在干什么 SLList 特有的打印方法吗
Dialogue: 0,0:42:46.90,0:42:47.81,英文,,0,0,0,,Hmm.
Dialogue: 0,0:42:46.90,0:42:47.81,中文,,0,0,0,,嗯
Dialogue: 0,0:42:47.81,0:42:49.85,英文,,0,0,0,,So at first, it doesn't seem totally obvious.
Dialogue: 0,0:42:47.81,0:42:49.85,中文,,0,0,0,,一开始 这似乎并不完全明显
Dialogue: 0,0:42:49.85,0:42:51.39,英文,,0,0,0,,Maybe it calls the list60.umb one.
Dialogue: 0,0:42:49.85,0:42:51.39,中文,,0,0,0,,也许它调用 List61B 那个
Dialogue: 0,0:42:51.39,0:42:53.03,英文,,0,0,0,,Maybe it calls the SLList one.
Dialogue: 0,0:42:51.39,0:42:53.03,中文,,0,0,0,,也许它调用 SLList 的一个
Dialogue: 0,0:42:53.03,0:42:54.31,英文,,0,0,0,,So it's not totally clear.
Dialogue: 0,0:42:53.03,0:42:54.31,中文,,0,0,0,,这并不完全清楚
Dialogue: 0,0:42:54.31,0:42:56.69,英文,,0,0,0,,And by the way, why is it OK to write this line of code?
Dialogue: 0,0:42:54.31,0:42:56.69,中文,,0,0,0,,顺便问一下 为什么可以写这行代码呢
Dialogue: 0,0:42:56.69,0:43:05.30,英文,,0,0,0,,Because the memory box for some list, which is of type list60.umb, it can hold anything that is a list60.umb, including SLList.
Dialogue: 0,0:42:56.69,0:43:05.30,中文,,0,0,0,,因为某些列表的内存框 类型为List61B 它可以容纳任何是List61B的东西 包括SLList
Dialogue: 0,0:43:05.30,0:43:14.20,英文,,0,0,0,,So in case you're not comfortable with the types not matching, it's OK, because SLList is a list60.umb, just like how Poodle is a dog, or Malamute is a dog.
Dialogue: 0,0:43:05.30,0:43:14.20,中文,,0,0,0,,如果你对类型不匹配感到不舒服 没关系 因为SLList就是一个List61B 就像Poodle是狗一样 或者Malamute是狗一样
Dialogue: 0,0:43:14.20,0:43:16.98,英文,,0,0,0,,OK.
Dialogue: 0,0:43:16.98,0:43:20.32,英文,,0,0,0,,How come this print method uses the S-list one like we saw earlier?
Dialogue: 0,0:43:16.98,0:43:20.32,中文,,0,0,0,,为什么这个打印方法使用了我们之前看到的SLList的方法
Dialogue: 0,0:43:20.32,0:43:22.00,英文,,0,0,0,,So why did this print out?
Dialogue: 0,0:43:20.32,0:43:22.00,中文,,0,0,0,,那为什么会打印出这个
Dialogue: 0,0:43:22.00,0:43:23.62,英文,,0,0,0,,The boss doesn't know what he's doing.
Dialogue: 0,0:43:22.00,0:43:23.62,中文,,0,0,0,,老板不知道自己在做什么
Dialogue: 0,0:43:23.62,0:43:28.18,英文,,0,0,0,,How come it didn't use the list60.umb's version, the default version of print?
Dialogue: 0,0:43:23.62,0:43:28.18,中文,,0,0,0,,为什么它没有使用List61B的版本 也就是默认的打印版本呢
Dialogue: 0,0:43:28.18,0:43:35.05,英文,,0,0,0,,And so to figure out why this is happening, I have to introduce a topic that has historically been just super annoying.
Dialogue: 0,0:43:28.18,0:43:35.05,中文,,0,0,0,,要弄清楚为什么会发生这种情况 我必须介绍一个历来令人非常恼火的话题
Dialogue: 0,0:43:35.05,0:43:39.03,英文,,0,0,0,,We're going to try to introduce it a bit more cleanly this time because it's kind of weird.
Dialogue: 0,0:43:35.05,0:43:39.03,中文,,0,0,0,,这次我们会尝试更干净地介绍一下 因为这有点奇怪
Dialogue: 0,0:43:39.03,0:43:47.40,英文,,0,0,0,,It's easy to get really deep into the weeds and talk about arcane Byzantine edge cases, but we'll try to keep it simple for you this semester.
Dialogue: 0,0:43:39.03,0:43:47.40,中文,,0,0,0,,很容易深入细节 谈论复杂的拜占庭边缘案例 但我们会尽量简单地为你解释这个学期
Dialogue: 0,0:43:47.40,0:43:55.02,英文,,0,0,0,,Here's the idea, which is every variable that you ever create in Java is going to have actually not one type, but two.
Dialogue: 0,0:43:47.40,0:43:55.02,中文,,0,0,0,,这里的想法是 你在Java中创建的每个变量实际上都不只有一种类型 而是两种
Dialogue: 0,0:43:55.02,0:43:59.10,英文,,0,0,0,,So what do I mean? Well, every variable is going to have a compile-time type.
Dialogue: 0,0:43:55.02,0:43:59.10,中文,,0,0,0,,那是什么意思呢  每个变量都会有一个编译时类型
Dialogue: 0,0:43:59.10,0:44:00.88,英文,,0,0,0,,Sometimes people call it a static type.
Dialogue: 0,0:43:59.10,0:44:00.88,中文,,0,0,0,,有时人们称之为静态类型
Dialogue: 0,0:44:00.88,0:44:02.34,英文,,0,0,0,,They mean the exact same thing.
Dialogue: 0,0:44:00.88,0:44:02.34,中文,,0,0,0,,它们的意思完全一样
Dialogue: 0,0:44:02.34,0:44:05.76,英文,,0,0,0,,And this is the type that you specify when you declare the variable.
Dialogue: 0,0:44:02.34,0:44:05.76,中文,,0,0,0,,而这就是你在声明变量时指定的类型
Dialogue: 0,0:44:05.76,0:44:07.34,英文,,0,0,0,,So look at this line right here.
Dialogue: 0,0:44:05.76,0:44:07.34,中文,,0,0,0,,看看这一行
Dialogue: 0,0:44:07.34,0:44:12.72,英文,,0,0,0,,I declare that there is a variable called lt1, and it is a type living thing.
Dialogue: 0,0:44:07.34,0:44:12.72,中文,,0,0,0,,我声明有一个叫做IT1 的变量 它是一种生物类型
Dialogue: 0,0:44:12.72,0:44:18.29,英文,,0,0,0,,So that means that LT1 has the static compile-time type living thing.
Dialogue: 0,0:44:12.72,0:44:18.29,中文,,0,0,0,,这意味着IT1 具有静态编译时的生物类型
Dialogue: 0,0:44:18.29,0:44:19.97,英文,,0,0,0,,And this will never, ever, ever change.
Dialogue: 0,0:44:18.29,0:44:19.97,中文,,0,0,0,,而且这永远不会改变
Dialogue: 0,0:44:19.97,0:44:21.57,英文,,0,0,0,,When you declare a variable, that's it.
Dialogue: 0,0:44:19.97,0:44:21.57,中文,,0,0,0,,当你声明一个变量时 就是这样
Dialogue: 0,0:44:21.57,0:44:23.81,英文,,0,0,0,,You cannot redeclare it and change your mind later.
Dialogue: 0,0:44:21.57,0:44:23.81,中文,,0,0,0,,你不能重新声明它然后改变主意
Dialogue: 0,0:44:23.81,0:44:26.86,英文,,0,0,0,,So this LT1 has static type of living thing, and that's it.
Dialogue: 0,0:44:23.81,0:44:26.86,中文,,0,0,0,,这个 IT1 的静态类型就是生物 就是这样
Dialogue: 0,0:44:26.86,0:44:29.14,英文,,0,0,0,,It's a living thing forever.
Dialogue: 0,0:44:26.86,0:44:29.14,中文,,0,0,0,,它永远是一个生物
Dialogue: 0,0:44:29.14,0:44:29.86,英文,,0,0,0,,OK.
Dialogue: 0,0:44:29.86,0:44:34.52,英文,,0,0,0,,By contrast, all variables have a second type, which is called their runtime type.
Dialogue: 0,0:44:29.86,0:44:34.52,中文,,0,0,0,,相比之下 所有变量都有第二种类型 被称为它们的运行时类型
Dialogue: 0,0:44:34.52,0:44:36.36,英文,,0,0,0,,Sometimes people call it the dynamic type.
Dialogue: 0,0:44:34.52,0:44:36.36,中文,,0,0,0,,有时人们称其为动态类型
Dialogue: 0,0:44:36.36,0:44:37.90,英文,,0,0,0,,They mean the exact same thing.
Dialogue: 0,0:44:36.36,0:44:37.90,中文,,0,0,0,,它们意思完全相同
Dialogue: 0,0:44:37.90,0:44:44.77,英文,,0,0,0,,And this is the type that you specify when you actually assign the variable, which currently is null, to an actual object.
Dialogue: 0,0:44:37.90,0:44:44.77,中文,,0,0,0,,这是你在实际分配变量时指定的类型 目前是空的 指定为实际对象
Dialogue: 0,0:44:44.77,0:44:58.26,英文,,0,0,0,,So when I say LT1 is equal to new fox, when I use the new keyword, and I shout the location of my fox, and I put it in the LT1 variable, I am saying that the dynamic type of LT1 is actually fox.
Dialogue: 0,0:44:44.77,0:44:58.26,中文,,0,0,0,,当我说IT1 等于新的Fox时 当我使用new关键字 并且我喊出我的Fox的位置 并且我把它放在IT1 变量中时 我是在说IT1 的动态类型实际上是Fox
Dialogue: 0,0:44:58.26,0:44:59.96,英文,,0,0,0,,So there it is.
Dialogue: 0,0:44:58.26,0:44:59.96,中文,,0,0,0,,就是这样
Dialogue: 0,0:44:59.96,0:45:03.26,英文,,0,0,0,,The static type is living thing, because I declared it to be a living thing.
Dialogue: 0,0:44:59.96,0:45:03.26,中文,,0,0,0,,静态类型是生物 因为我声明它是生物
Dialogue: 0,0:45:03.26,0:45:13.16,英文,,0,0,0,,The dynamic type is fox, because when I assign it to an actual thing, the thing that LT1 is pointing at is not just any living thing, it's specifically a fox.
Dialogue: 0,0:45:03.26,0:45:13.16,中文,,0,0,0,,动态类型是Fox 因为当我把它分配给一个实际的东西时 IT1 指向的东西不仅仅是任何生物 而是具体的一只Fox
Dialogue: 0,0:45:13.16,0:45:14.82,英文,,0,0,0,,So that's the runtime type.
Dialogue: 0,0:45:13.16,0:45:14.82,中文,,0,0,0,,这就是运行时类型
Dialogue: 0,0:45:14.82,0:45:15.78,英文,,0,0,0,,I can make more boxes.
Dialogue: 0,0:45:14.82,0:45:15.78,中文,,0,0,0,,我可以做更多的盒子
Dialogue: 0,0:45:15.78,0:45:17.60,英文,,0,0,0,,So here I have animal A1.
Dialogue: 0,0:45:15.78,0:45:17.60,中文,,0,0,0,,这里我有animal a1
Dialogue: 0,0:45:17.60,0:45:20.99,英文,,0,0,0,,I declare that there is a variable called A1.
Dialogue: 0,0:45:17.60,0:45:20.99,中文,,0,0,0,,我声明有一个叫做 a1 的变量
Dialogue: 0,0:45:20.99,0:45:25.07,英文,,0,0,0,,It's of static type animal, because that's what I declared it to be.
Dialogue: 0,0:45:20.99,0:45:25.07,中文,,0,0,0,,它是静态类型的animal 因为我声明它是这样的
Dialogue: 0,0:45:25.07,0:45:25.77,英文,,0,0,0,,So there it is.
Dialogue: 0,0:45:25.07,0:45:25.77,中文,,0,0,0,,就是这样
Dialogue: 0,0:45:25.77,0:45:27.63,英文,,0,0,0,,It's my box. It has static type animal.
Dialogue: 0,0:45:25.77,0:45:27.63,中文,,0,0,0,,这是我的盒子  它的静态类型是animal
Dialogue: 0,0:45:27.63,0:45:28.63,英文,,0,0,0,,That will never change.
Dialogue: 0,0:45:27.63,0:45:28.63,中文,,0,0,0,,那永远不会改变
Dialogue: 0,0:45:28.63,0:45:30.21,英文,,0,0,0,,Like, look, it's right on the box.
Dialogue: 0,0:45:28.63,0:45:30.21,中文,,0,0,0,,嘿 看 就在盒子上
Dialogue: 0,0:45:30.21,0:45:31.51,英文,,0,0,0,,Can't change that.
Dialogue: 0,0:45:30.21,0:45:31.51,中文,,0,0,0,,那个是不能改变的
Dialogue: 0,0:45:31.51,0:45:34.89,英文,,0,0,0,,And then I copy the bits from LT1 into A1.
Dialogue: 0,0:45:31.51,0:45:34.89,中文,,0,0,0,,然后我将位从IT1 复制到a1
Dialogue: 0,0:45:34.89,0:45:39.26,英文,,0,0,0,,So what that will do is it will cause animal to point to the same fox.
Dialogue: 0,0:45:34.89,0:45:39.26,中文,,0,0,0,,那会导致animal指向同一个Fox
Dialogue: 0,0:45:39.26,0:45:44.58,英文,,0,0,0,,So the dynamic type, the thing that I'm actually pointing at in the runtime, that's a fox.
Dialogue: 0,0:45:39.26,0:45:44.58,中文,,0,0,0,,动态类型 我在运行时实际指向的东西 那是只Fox
Dialogue: 0,0:45:44.58,0:45:46.64,英文,,0,0,0,,But the static type, it's animal.
Dialogue: 0,0:45:44.58,0:45:46.64,中文,,0,0,0,,但静态类型是animal
Dialogue: 0,0:45:46.64,0:45:47.32,英文,,0,0,0,,I keep going.
Dialogue: 0,0:45:46.64,0:45:47.32,中文,,0,0,0,,我继续
Dialogue: 0,0:45:47.32,0:45:50.48,英文,,0,0,0,,Here's one where I declare there is a fox variable.
Dialogue: 0,0:45:47.32,0:45:50.48,中文,,0,0,0,,这是一个声明有一个 Fox 变量的例子
Dialogue: 0,0:45:50.48,0:45:51.34,英文,,0,0,0,,There it is.
Dialogue: 0,0:45:50.48,0:45:51.34,中文,,0,0,0,,就是这样
Dialogue: 0,0:45:51.34,0:45:52.68,英文,,0,0,0,,And then I say new fox.
Dialogue: 0,0:45:51.34,0:45:52.68,中文,,0,0,0,,然后我说新的 Fox
Dialogue: 0,0:45:52.68,0:45:54.81,英文,,0,0,0,,So it's pointing at another fox.
Dialogue: 0,0:45:52.68,0:45:54.81,中文,,0,0,0,,它指向另一个 Fox
Dialogue: 0,0:45:54.81,0:45:56.55,英文,,0,0,0,,So the dynamic type is fox.
Dialogue: 0,0:45:54.81,0:45:56.55,中文,,0,0,0,,动态类型是 Fox
Dialogue: 0,0:45:56.55,0:46:00.13,英文,,0,0,0,,I can even go to LLT1, and I can say, right now it's pointing at this fox.
Dialogue: 0,0:45:56.55,0:46:00.13,中文,,0,0,0,,我甚至可以去 LIT1  然后我可以说 现在它指向这只Fox
Dialogue: 0,0:46:00.13,0:46:02.73,英文,,0,0,0,,I don't like that. I want it to point to a squid instead.
Dialogue: 0,0:46:00.13,0:46:02.73,中文,,0,0,0,,我不喜欢那样  我想让它指向一只squid
Dialogue: 0,0:46:02.73,0:46:08.60,英文,,0,0,0,,And if it points to a squid, the dynamic type changes, because now it's pointing at a squid instead of a fox.
Dialogue: 0,0:46:02.73,0:46:08.60,中文,,0,0,0,,如果它指向一只squid 动态类型会改变 因为现在它指向的是一只squid而不是Fox
Dialogue: 0,0:46:08.60,0:46:10.98,英文,,0,0,0,,But the static type does not change.
Dialogue: 0,0:46:08.60,0:46:10.98,中文,,0,0,0,,但是静态类型不会改变
Dialogue: 0,0:46:10.98,0:46:12.42,英文,,0,0,0,,Always a living thing.
Dialogue: 0,0:46:10.98,0:46:12.42,中文,,0,0,0,,总是活生生的东西
Dialogue: 0,0:46:12.42,0:46:13.47,英文,,0,0,0,,OK.
Dialogue: 0,0:46:13.47,0:46:14.50,英文,,0,0,0,,So there's two types.
Dialogue: 0,0:46:13.47,0:46:14.50,中文,,0,0,0,,有两种类型
Dialogue: 0,0:46:14.50,0:46:18.10,英文,,0,0,0,,To figure out the static type, you look at how the variable was declared.
Dialogue: 0,0:46:14.50,0:46:18.10,中文,,0,0,0,,要确定静态类型 你要看变量是怎么声明的
Dialogue: 0,0:46:18.10,0:46:23.42,英文,,0,0,0,,To figure out the runtime type, you see what object it's actually pointing at right now.
Dialogue: 0,0:46:18.10,0:46:23.42,中文,,0,0,0,,要确定运行时类型 你需要看它当前实际指向的对象是什么
Dialogue: 0,0:46:23.42,0:46:25.08,英文,,0,0,0,,So why am I telling you this?
Dialogue: 0,0:46:23.42,0:46:25.08,中文,,0,0,0,,那我为什么要告诉你这个呢
Dialogue: 0,0:46:25.08,0:46:35.05,英文,,0,0,0,,Well, here's the rule that you have to know, then, which is if I have an object and it has two different types, the compile-time type and the runtime type, and they're different,
Dialogue: 0,0:46:25.08,0:46:35.05,中文,,0,0,0,,你必须知道的规则是 如果我有一个对象 它有两种不同的类型 编译时类型和运行时类型 而且它们是不同的
Dialogue: 0,0:46:35.05,0:46:40.95,英文,,0,0,0,,So like we saw earlier, the compile-time type was list61b, but the run-time type was SList.
Dialogue: 0,0:46:35.05,0:46:40.95,中文,,0,0,0,,就像我们之前看到的 编译时类型是List61B 但运行时类型是SLList
Dialogue: 0,0:46:40.95,0:46:50.94,英文,,0,0,0,,If they're different and the run-time type overrides the method, like the SList overrode what the boss said, then the rule is you're going to use the overridden method instead.
Dialogue: 0,0:46:40.95,0:46:50.94,中文,,0,0,0,,如果它们不同 并且运行时类型重写了方法 就像SLList重写了老板所说的 那么规则是你要使用被重写的方法
Dialogue: 0,0:46:50.94,0:46:54.98,英文,,0,0,0,,So you're going to look at the run-time type and see if the run-time type overrides the method.
Dialogue: 0,0:46:50.94,0:46:54.98,中文,,0,0,0,,你要看运行时类型 看看运行时类型是否重写了方法
Dialogue: 0,0:46:54.98,0:46:58.60,英文,,0,0,0,,And if it does, use the run-time type's overridden method.
Dialogue: 0,0:46:54.98,0:46:58.60,中文,,0,0,0,,如果重写了 就使用运行时类型的被重写方法
Dialogue: 0,0:46:58.60,0:47:01.68,英文,,0,0,0,,So like we saw from earlier,
Dialogue: 0,0:46:58.60,0:47:01.68,中文,,0,0,0,,就像我们之前看到的那样
Dialogue: 0,0:47:01.68,0:47:02.88,英文,,0,0,0,,What is the static type?
Dialogue: 0,0:47:01.68,0:47:02.88,中文,,0,0,0,,静态类型是什么
Dialogue: 0,0:47:02.88,0:47:06.70,英文,,0,0,0,,It's list61b, because that's what I declared sunList to be.
Dialogue: 0,0:47:02.88,0:47:06.70,中文,,0,0,0,,它是List61B 因为我声明someList是这样的
Dialogue: 0,0:47:06.70,0:47:07.82,英文,,0,0,0,,What is the dynamic type?
Dialogue: 0,0:47:06.70,0:47:07.82,中文,,0,0,0,,动态类型是什么
Dialogue: 0,0:47:07.82,0:47:11.42,英文,,0,0,0,,It's sList, because it's currently pointing at an sList.
Dialogue: 0,0:47:07.82,0:47:11.42,中文,,0,0,0,,它是SLList 因为它当前指向一个SLList
Dialogue: 0,0:47:11.42,0:47:20.13,英文,,0,0,0,,And because sList overrode what the boss said, had its own custom built method, we're going to use the dynamic types overridden method instead.
Dialogue: 0,0:47:11.42,0:47:20.13,中文,,0,0,0,,而且因为SLList覆盖了老板说的内容 有它自己定制的方法 我们将使用动态类型覆盖的方法
Dialogue: 0,0:47:20.13,0:47:21.85,英文,,0,0,0,,So that's the rule you have to know.
Dialogue: 0,0:47:20.13,0:47:21.85,中文,,0,0,0,,这是你必须知道的规则
Dialogue: 0,0:47:21.85,0:47:25.93,英文,,0,0,0,,Sometimes people call it dynamic method selection, but that's the rule.
Dialogue: 0,0:47:21.85,0:47:25.93,中文,,0,0,0,,有时候人们称其为动态方法选择 但那就是规则
Dialogue: 0,0:47:25.93,0:47:32.68,英文,,0,0,0,,If you override, and the dynamic type, or if the dynamic type overrides, use the dynamic type's overridden method.
Dialogue: 0,0:47:25.93,0:47:32.68,中文,,0,0,0,,如果你重写 并且动态类型 或者如果动态类型重写了 就使用动态类型的重写方法
Dialogue: 0,0:47:32.68,0:47:40.87,英文,,0,0,0,,OK, so before you go, I do want to quickly point out, I guess first, do you have questions about dynamic method selection?
Dialogue: 0,0:47:32.68,0:47:40.87,中文,,0,0,0,,在你走之前 我确实想快速指出 我想首先问一下 你对动态方法选择有什么问题吗
Dialogue: 0,0:47:40.87,0:47:44.02,英文,,0,0,0,,This term's a bit obscure, so we'll use in this class.
Dialogue: 0,0:47:40.87,0:47:44.02,中文,,0,0,0,,这个术语有点隐晦 我们在这门课上会用到
Dialogue: 0,0:47:44.02,0:47:45.90,英文,,0,0,0,,It's just this one rule that you have to know.
Dialogue: 0,0:47:44.02,0:47:45.90,中文,,0,0,0,,你只需要知道这一个规则就行了
Dialogue: 0,0:47:45.90,0:47:54.69,英文,,0,0,0,,Okay, before you go, I do want to briefly mention that in semesters, I know this is pre-2018, but as recently as last semester, a
Dialogue: 0,0:47:45.90,0:47:54.69,中文,,0,0,0,,在你走之前 我确实想简要提一下 就是在学期间 我知道这是在2018年之前 但就在上个学期
Dialogue: 0,0:47:54.69,0:48:00.69,英文,,0,0,0,,and you need to correct me if I'm wrong here, we used to have dynamic method selection questions that were like,
Dialogue: 0,0:47:54.69,0:48:00.69,中文,,0,0,0,,如果我记错了 请你纠正我 我们过去常常会有像是动态方法选择的问题
Dialogue: 0,0:48:00.69,0:48:03.43,英文,,0,0,0,,kind of ridiculous and started testing a lot of edge cases.
Dialogue: 0,0:48:00.69,0:48:03.43,中文,,0,0,0,,有点荒谬 开始测试很多边界情况
Dialogue: 0,0:48:03.43,0:48:07.54,英文,,0,0,0,,So we were like, what happens if you override and you overload at the same time?
Dialogue: 0,0:48:03.43,0:48:07.54,中文,,0,0,0,,我们就想 如果你同时重写和重载会发生什么
Dialogue: 0,0:48:07.54,0:48:13.76,英文,,0,0,0,,Or what if, like, you override and then you overload and then you, like, pass in, I don't know, like, the subclass as an argument?
Dialogue: 0,0:48:07.54,0:48:13.76,中文,,0,0,0,,或者 如果你先重写然后重载 然后 就像 传入 我不知道 子类作为参数 会怎么样
Dialogue: 0,0:48:13.76,0:48:20.48,英文,,0,0,0,,So we had more complicated, obscure edge cases, but to be honest, we just don't find those totally interesting.
Dialogue: 0,0:48:13.76,0:48:20.48,中文,,0,0,0,,我们有更复杂、更隐晦的边界情况 但说实话 我们只是觉得那些不是特别有趣
Dialogue: 0,0:48:20.48,0:48:24.78,英文,,0,0,0,,They're more like Java trivia than something core to data structures.
Dialogue: 0,0:48:20.48,0:48:24.78,中文,,0,0,0,,它们更像是Java小知识 而不是数据结构的核心内容
Dialogue: 0,0:48:24.78,0:48:25.54,英文,,0,0,0,,So,
Dialogue: 0,0:48:25.54,0:48:30.14,英文,,0,0,0,,You might see questions in past semesters that are a bit obscure, that just seem so confusing.
Dialogue: 0,0:48:25.54,0:48:30.14,中文,,0,0,0,,你可能会在之前的学期里遇到一些有点隐晦的问题 看起来很混乱
Dialogue: 0,0:48:30.14,0:48:34.91,英文,,0,0,0,,It's like, wait, why do I have like five different make noise methods with different arguments?
Dialogue: 0,0:48:30.14,0:48:34.91,中文,,0,0,0,,就好像 等等 为什么我有五个不同参数的makeNoise方法
Dialogue: 0,0:48:34.91,0:48:38.29,英文,,0,0,0,,So if you ever see a question like that, they're no longer in scope for this semester.
Dialogue: 0,0:48:34.91,0:48:38.29,中文,,0,0,0,,如果你见到类似的问题 它们本学期就不再适用了
Dialogue: 0,0:48:38.29,0:48:43.45,英文,,0,0,0,,So the rule that you have to know for this semester to make everything work is you follow this rule.
Dialogue: 0,0:48:38.29,0:48:43.45,中文,,0,0,0,,你这学期要知道的规则就是要遵循这个规则
Dialogue: 0,0:48:43.45,0:48:46.81,英文,,0,0,0,,If the dynamics type overrides, use the method that was overridden.
Dialogue: 0,0:48:43.45,0:48:46.81,中文,,0,0,0,,如果动态类型重写了 就使用被重写的方法
Dialogue: 0,0:48:46.81,0:48:49.69,英文,,0,0,0,,Did I miss anything in my scope discussion?
Dialogue: 0,0:48:46.81,0:48:49.69,中文,,0,0,0,,我在讨论范围时有漏掉什么吗
Dialogue: 0,0:48:49.69,0:48:50.15,英文,,0,0,0,,OK.
Dialogue: 0,0:48:50.15,0:48:53.32,英文,,0,0,0,,If you're not sure about scope, by the way, you can also just come and ask us.
Dialogue: 0,0:48:50.15,0:48:53.32,中文,,0,0,0,,如果你对范围不确定 顺便说一句 你也可以来问问我们
Dialogue: 0,0:48:53.32,0:48:54.54,英文,,0,0,0,,Wait, I have one more slide.
Dialogue: 0,0:48:53.32,0:48:54.54,中文,,0,0,0,,等等 我还有一页幻灯片
Dialogue: 0,0:48:54.54,0:48:58.01,英文,,0,0,0,,OK, so I guess if you have to go, you can go.
Dialogue: 0,0:48:54.54,0:48:58.01,中文,,0,0,0,,好吧 我猜如果你得走 那就走吧
Dialogue: 0,0:48:58.01,0:49:04.77,英文,,0,0,0,,But the final thing I wanted to summarize is just that the interface inheritance, that specifies what.
Dialogue: 0,0:48:58.01,0:49:04.77,中文,,0,0,0,,但我想总结的最后一点就是接口继承 它指定了什么
Dialogue: 0,0:49:04.77,0:49:09.56,英文,,0,0,0,,You inherit the rules, or the list of the things that a list can do.
Dialogue: 0,0:49:04.77,0:49:09.56,中文,,0,0,0,,你继承的是规则 或者说一个列表能做的事情清单
Dialogue: 0,0:49:09.56,0:49:11.54,英文,,0,0,0,,You did not inherit how to use them.
Dialogue: 0,0:49:09.56,0:49:11.54,中文,,0,0,0,,你没有继承如何使用它们
Dialogue: 0,0:49:11.54,0:49:13.90,英文,,0,0,0,,You just inherited what the list can do.
Dialogue: 0,0:49:11.54,0:49:13.90,中文,,0,0,0,,你只是继承了列表能做什么
Dialogue: 0,0:49:13.90,0:49:17.71,英文,,0,0,0,,All lists have to be able to add lasts, but you did not inherit how.
Dialogue: 0,0:49:13.90,0:49:17.71,中文,,0,0,0,,所有列表都必须能添加元素 但你并未继承如何添加
Dialogue: 0,0:49:17.71,0:49:25.95,英文,,0,0,0,,By contrast, Implementation Inheritance, the one with the default keyword, you've inherited how you inherited the actual implementation.
Dialogue: 0,0:49:17.71,0:49:25.95,中文,,0,0,0,,相比之下 实现继承 那个带有default关键字的 你继承的是如何做 你继承了实际的实现
Dialogue: 0,0:49:25.95,0:49:29.25,英文,,0,0,0,,And in both cases, we have to specify is a relationships.
Dialogue: 0,0:49:25.95,0:49:29.25,中文,,0,0,0,,在这两种情况下 我们都必须指定是一种关系
Dialogue: 0,0:49:29.25,0:49:31.71,英文,,0,0,0,,So like an S list is a list.
Dialogue: 0,0:49:29.25,0:49:31.71,中文,,0,0,0,,像一个SLList就是一个列表
Dialogue: 0,0:49:31.71,0:49:33.19,英文,,0,0,0,,A dog is an animal.
Dialogue: 0,0:49:31.71,0:49:33.19,中文,,0,0,0,,一只狗是一种animal
Dialogue: 0,0:49:33.19,0:49:35.11,英文,,0,0,0,,A poodle is a dog.
Dialogue: 0,0:49:33.19,0:49:35.11,中文,,0,0,0,,贵宾犬是一种狗
Dialogue: 0,0:49:35.11,0:49:38.28,英文,,0,0,0,,So Implementation Inheritance, some people like it, some people don't.
Dialogue: 0,0:49:35.11,0:49:38.28,中文,,0,0,0,,实现继承 有些人喜欢 有些人不喜欢
Dialogue: 0,0:49:38.28,0:49:43.54,英文,,0,0,0,,But since you're all gone, you're going to have to come back next time, and I'll tell you why some people like it, why some people don't.
Dialogue: 0,0:49:38.28,0:49:43.54,中文,,0,0,0,,但是既然你们都走了 下次你们就得回来了 我会告诉你们为什么有些人喜欢它 有些人不喜欢它
Dialogue: 0,0:49:43.54,0:49:44.50,英文,,0,0,0,,OK, see you next time.
Dialogue: 0,0:49:43.54,0:49:44.50,中文,,0,0,0,,下次见
