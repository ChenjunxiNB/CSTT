[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 3
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1152
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Audio File: D:/python_code/video_tool/video_tool/result/[61B SP24] Lecture 17 - B-Trees (2-3, 2-3-4 Trees).mp4
Video File: D:/python_code/video_tool/video_tool/result/[61B SP24] Lecture 17 - B-Trees (2-3, 2-3-4 Trees).mp4
Video AR Mode: 4
Video AR Value: 1.600000
Video Zoom Percent: 0.750000
Scroll Position: 893
Active Line: 903
Video Position: 11471

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,13,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,90,100,0,0,1,1.33333,1.33333,2,6,6,7,1
Style: 英文,Arial,24,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,1,1,5,1
Style: 中文,微软雅黑,38,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,2,2,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
Dialogue: 0,0:00:07.72,0:00:09.50,英文,,0,0,0,,OK.
Dialogue: 0,0:00:07.72,0:00:09.50,中文,,0,0,0,,好的
Dialogue: 0,0:00:09.50,0:00:11.57,英文,,0,0,0,,Hi.
Dialogue: 0,0:00:09.50,0:00:11.57,中文,,0,0,0,,嗨
Dialogue: 0,0:00:11.57,0:00:14.73,英文,,0,0,0,,I hope it wasn't too miserable when you lost an hour this weekend.
Dialogue: 0,0:00:11.57,0:00:14.73,中文,,0,0,0,,希望你周末丢失一个小时的时候没有太难受
Dialogue: 0,0:00:14.73,0:00:16.07,英文,,0,0,0,,OK.
Dialogue: 0,0:00:14.73,0:00:16.07,中文,,0,0,0,,好的
Dialogue: 0,0:00:16.07,0:00:19.95,英文,,0,0,0,,So let's continue talking about graphs.
Dialogue: 0,0:00:16.07,0:00:19.95,中文,,0,0,0,,那么让我们继续谈论图表
Dialogue: 0,0:00:19.95,0:00:25.53,英文,,0,0,0,,So the first half of today, I'm going to switch gears a little bit.
Dialogue: 0,0:00:19.95,0:00:25.53,中文,,0,0,0,,今天上半场我要换个话题
Dialogue: 0,0:00:25.53,0:00:29.47,英文,,0,0,0,,And instead of talking about last time, we were kind of philosophical.
Dialogue: 0,0:00:25.53,0:00:29.47,中文,,0,0,0,,而不是像上次那样我们有点在讨论哲学问题
Dialogue: 0,0:00:29.47,0:00:31.61,英文,,0,0,0,,I drew pictures of graphs for you.
Dialogue: 0,0:00:29.47,0:00:31.61,中文,,0,0,0,,我给你画了一些图表
Dialogue: 0,0:00:31.61,0:00:33.92,英文,,0,0,0,,And we talked about depth-first paths.
Dialogue: 0,0:00:31.61,0:00:33.92,中文,,0,0,0,,我们还讨论了深度优先路径
Dialogue: 0,0:00:33.92,0:00:35.30,英文,,0,0,0,,And we drew a picture of it.
Dialogue: 0,0:00:33.92,0:00:35.30,中文,,0,0,0,,我们画了它的图
Dialogue: 0,0:00:35.30,0:00:37.48,英文,,0,0,0,,And it was great.
Dialogue: 0,0:00:35.30,0:00:37.48,中文,,0,0,0,,太棒了
Dialogue: 0,0:00:37.48,0:00:41.28,英文,,0,0,0,,One question you might have is, how do you actually implement this thing?
Dialogue: 0,0:00:37.48,0:00:41.28,中文,,0,0,0,,你可能会问你到底如何实现这个东西
Dialogue: 0,0:00:41.28,0:00:44.02,英文,,0,0,0,,So sure, we saw depth-first paths.
Dialogue: 0,0:00:41.28,0:00:44.02,中文,,0,0,0,,当然我们看到了深度优先路径
Dialogue: 0,0:00:44.02,0:00:48.91,英文,,0,0,0,,It was really nice on the slide, and we had the picture, and we were coloring the nodes white to mark them.
Dialogue: 0,0:00:44.02,0:00:48.91,中文,,0,0,0,,在幻灯片上看起来真的很好我们有图片我们正在将节点涂成白色来标记它们
Dialogue: 0,0:00:48.91,0:00:53.57,英文,,0,0,0,,But how would you actually implement something like this in code?
Dialogue: 0,0:00:48.91,0:00:53.57,中文,,0,0,0,,但是你究竟要如何在代码中实现这样的东西呢
Dialogue: 0,0:00:53.57,0:00:56.71,英文,,0,0,0,,So we need to figure out today, how would you write this in code?
Dialogue: 0,0:00:53.57,0:00:56.71,中文,,0,0,0,,我们今天需要弄清楚你会如何用代码来写这个
Dialogue: 0,0:00:56.71,0:01:01.48,英文,,0,0,0,,In particular, we need to figure out, what is the API for a graph?
Dialogue: 0,0:00:56.71,0:01:01.48,中文,,0,0,0,,特别是我们需要弄清楚图的 API 是什么
Dialogue: 0,0:01:01.48,0:01:03.24,英文,,0,0,0,,API stands for these words.
Dialogue: 0,0:01:01.48,0:01:03.24,中文,,0,0,0,,API 代表这些词
Dialogue: 0,0:01:03.24,0:01:04.84,英文,,0,0,0,,I never remember what they are.
Dialogue: 0,0:01:03.24,0:01:04.84,中文,,0,0,0,,我从来不记得它们是什么
Dialogue: 0,0:01:04.84,0:01:12.40,英文,,0,0,0,,But basically, the idea is, what services or what methods are we going to give to the users of our graph?
Dialogue: 0,0:01:04.84,0:01:12.40,中文,,0,0,0,,但基本上想法是我们要给图的用户提供什么服务或方法
Dialogue: 0,0:01:12.40,0:01:14.57,英文,,0,0,0,,So we're going to build the graph class.
Dialogue: 0,0:01:12.40,0:01:14.57,中文,,0,0,0,,我们要构建图类
Dialogue: 0,0:01:14.57,0:01:18.65,英文,,0,0,0,,But what methods does the graph user get to use?
Dialogue: 0,0:01:14.57,0:01:18.65,中文,,0,0,0,,但是图形用户有哪些方法可以使用呢
Dialogue: 0,0:01:18.65,0:01:20.61,英文,,0,0,0,,So for example, when we built a list,
Dialogue: 0,0:01:18.65,0:01:20.61,中文,,0,0,0,,例如当我们构建一个列表时
Dialogue: 0,0:01:20.61,0:01:23.17,英文,,0,0,0,,We gave the user the ability to add first.
Dialogue: 0,0:01:20.61,0:01:23.17,中文,,0,0,0,,我们给了用户添加到第一个的能力
Dialogue: 0,0:01:23.17,0:01:25.97,英文,,0,0,0,,And we gave the user the ability to add last.
Dialogue: 0,0:01:23.17,0:01:25.97,中文,,0,0,0,,我们也给了用户添加到最后一个的能力
Dialogue: 0,0:01:25.97,0:01:30.70,英文,,0,0,0,,And you and your projects gave the user the ability to add in the middle of the list.
Dialogue: 0,0:01:25.97,0:01:30.70,中文,,0,0,0,,而你和你的项目给了用户在列表中间添加的能力
Dialogue: 0,0:01:30.70,0:01:33.62,英文,,0,0,0,,So which of these, or did you do that in project one?
Dialogue: 0,0:01:30.70,0:01:33.62,中文,,0,0,0,,那么这些方法中的哪些或者你是在第一个项目中实现的呢
Dialogue: 0,0:01:33.62,0:01:34.30,英文,,0,0,0,,I don't know.
Dialogue: 0,0:01:33.62,0:01:34.30,中文,,0,0,0,,我不知道
Dialogue: 0,0:01:34.30,0:01:36.06,英文,,0,0,0,,But that's a decision you have to make.
Dialogue: 0,0:01:34.30,0:01:36.06,中文,,0,0,0,,但这是你必须做出的决定
Dialogue: 0,0:01:36.06,0:01:38.28,英文,,0,0,0,,Do you allow the user to add in the middle of the list?
Dialogue: 0,0:01:36.06,0:01:38.28,中文,,0,0,0,,你允许用户在列表中间添加吗
Dialogue: 0,0:01:38.28,0:01:39.39,英文,,0,0,0,,Do you not?
Dialogue: 0,0:01:38.28,0:01:39.39,中文,,0,0,0,,你不允许吗
Dialogue: 0,0:01:39.39,0:01:42.05,英文,,0,0,0,,And so we're going to have to make those decisions for the graph.
Dialogue: 0,0:01:39.39,0:01:42.05,中文,,0,0,0,,因此我们将不得不为图形做出这些决定
Dialogue: 0,0:01:42.05,0:01:44.51,英文,,0,0,0,,What methods do we give to our users?
Dialogue: 0,0:01:42.05,0:01:44.51,中文,,0,0,0,,我们向用户提供哪些方法
Dialogue: 0,0:01:44.51,0:01:54.32,英文,,0,0,0,,And the methods that we give will determine how people who use our graph need to think about the graph, because they only have access to the methods that we define.
Dialogue: 0,0:01:44.51,0:01:54.32,中文,,0,0,0,,我们提供的方法将决定使用我们的图形的人需要如何思考图形因为他们只能访问我们定义的方法
Dialogue: 0,0:01:54.32,0:01:56.52,英文,,0,0,0,,So we're providing a certain set of services.
Dialogue: 0,0:01:54.32,0:01:56.52,中文,,0,0,0,,我们提供了一定的服务
Dialogue: 0,0:01:56.52,0:01:58.70,英文,,0,0,0,,You can use these services, and that's it.
Dialogue: 0,0:01:56.52,0:01:58.70,中文,,0,0,0,,你可以使用这些服务就是这样
Dialogue: 0,0:01:58.70,0:02:04.10,英文,,0,0,0,,And the client programmers have to use those services to interact with their graph.
Dialogue: 0,0:01:58.70,0:02:04.10,中文,,0,0,0,,而客户端程序员必须使用这些服务来与他们的图进行交互
Dialogue: 0,0:02:04.10,0:02:11.11,英文,,0,0,0,,And then after we figure out what we give to our users, the interface, then we have to figure out what's the actual implementation.
Dialogue: 0,0:02:04.10,0:02:11.11,中文,,0,0,0,,然后在我们确定我们要给用户什么界面之后我们必须弄清楚实际的实现是什么
Dialogue: 0,0:02:11.11,0:02:21.63,英文,,0,0,0,,So what data structures do we actually use as programmers to write the graph class and to give the users the methods that we decided we wanted to give them?
Dialogue: 0,0:02:11.11,0:02:21.63,中文,,0,0,0,,那么作为程序员我们实际上要使用什么数据结构来编写图类并为用户提供我们决定要给他们的方法呢
Dialogue: 0,0:02:21.63,0:02:33.62,英文,,0,0,0,,And the key idea, if you don't get anything else today, the key idea is your decisions for what methods you give to the user and how you implement the graph, they have huge implications on how fast the graph runs.
Dialogue: 0,0:02:21.63,0:02:33.62,中文,,0,0,0,,而关键的想法如果今天你没有获得其他任何东西关键的想法是你决定给用户什么方法以及如何实现图形的决策对图形运行的速度有着巨大的影响
Dialogue: 0,0:02:33.62,0:02:41.38,英文,,0,0,0,,So runtime, how much space the graph takes up, and how easy it is to write and use the graph in code.
Dialogue: 0,0:02:33.62,0:02:41.38,中文,,0,0,0,,运行时间图形占用多少空间以及编写和使用代码中的图形有多容易这些都很重要
Dialogue: 0,0:02:41.38,0:02:42.68,英文,,0,0,0,,So we're going to make these decisions.
Dialogue: 0,0:02:41.38,0:02:42.68,中文,,0,0,0,,我们要做出这些决定
Dialogue: 0,0:02:42.68,0:02:50.51,英文,,0,0,0,,And depending on if we make good decisions or bad decisions, we can have huge impacts on how fast the code runs and how easy it is to write code.
Dialogue: 0,0:02:42.68,0:02:50.51,中文,,0,0,0,,根据我们做出的是好决定还是坏决定代码运行速度和编写代码的难易程度都会受到巨大影响
Dialogue: 0,0:02:50.51,0:02:54.28,英文,,0,0,0,,So hopefully, we make some good decisions.
Dialogue: 0,0:02:50.51,0:02:54.28,中文,,0,0,0,,希望我们能做出一些好决定
Dialogue: 0,0:02:54.28,0:02:59.04,英文,,0,0,0,,So at this point, you could implement the graph class in so many different ways.
Dialogue: 0,0:02:54.28,0:02:59.04,中文,,0,0,0,,在这一点上你可以用很多不同的方式来实现图类
Dialogue: 0,0:02:59.04,0:03:02.62,英文,,0,0,0,,I will show you just one of many different ways you could implement it.
Dialogue: 0,0:02:59.04,0:03:02.62,中文,,0,0,0,,我会展示给你看其中一种实现方式
Dialogue: 0,0:03:02.62,0:03:07.17,英文,,0,0,0,,This one is inspired by the optional Princeton textbook, which you might have seen before.
Dialogue: 0,0:03:02.62,0:03:07.17,中文,,0,0,0,,这个方法受普林斯顿大学的教材启发你可能之前见过
Dialogue: 0,0:03:07.17,0:03:20.75,英文,,0,0,0,,So I'm going to make a decision, which you don't have to make in your project, but I'm going to decide that instead of allowing you to create nodes with any sort of label in them, I'm going to force you to only have integers as labels.
Dialogue: 0,0:03:07.17,0:03:20.75,中文,,0,0,0,,我要做一个决定你在项目中不必做出这个决定但我决定不允许你在节点中创建任何类型的标签我要求你只能使用整数作为标签
Dialogue: 0,0:03:20.75,0:03:24.38,英文,,0,0,0,,So I'm going to say you can't have a node called Dallas.
Dialogue: 0,0:03:20.75,0:03:24.38,中文,,0,0,0,,我要说你不能有一个名为达拉斯的节点
Dialogue: 0,0:03:24.38,0:03:27.48,英文,,0,0,0,,But you can have nodes called 0, 1, and 2.
Dialogue: 0,0:03:24.38,0:03:27.48,中文,,0,0,0,,但是你可以有节点叫做0、1和2
Dialogue: 0,0:03:27.48,0:03:28.52,英文,,0,0,0,,That's my decision.
Dialogue: 0,0:03:27.48,0:03:28.52,中文,,0,0,0,,那是我的决定
Dialogue: 0,0:03:28.52,0:03:31.54,英文,,0,0,0,,If you don't like it, you can build nodes with Dallas.
Dialogue: 0,0:03:28.52,0:03:31.54,中文,,0,0,0,,如果你不喜欢你可以用达拉斯建立节点
Dialogue: 0,0:03:31.54,0:03:32.34,英文,,0,0,0,,It's OK.
Dialogue: 0,0:03:31.54,0:03:32.34,中文,,0,0,0,,没关系
Dialogue: 0,0:03:32.34,0:03:34.18,英文,,0,0,0,,But that's my decision.
Dialogue: 0,0:03:32.34,0:03:34.18,中文,,0,0,0,,但那是我的决定
Dialogue: 0,0:03:34.18,0:03:43.78,英文,,0,0,0,,So the question then is, if I'm only forcing you to have integers in your graph, how could you represent a graph like the one on the left with Dallas, Austin, and Houston?
Dialogue: 0,0:03:34.18,0:03:43.78,中文,,0,0,0,,那么问题就是如果我只强制你在图中使用整数你怎么用达拉斯、奥斯汀和休斯顿表示左边那种图呢
Dialogue: 0,0:03:43.78,0:03:46.90,英文,,0,0,0,,Well, one thing you could do then is you could first
Dialogue: 0,0:03:43.78,0:03:46.90,中文,,0,0,0,,你可以做的一件事是你可以首先
Dialogue: 0,0:03:46.90,0:03:52.63,英文,,0,0,0,,build the graph with numbers, 0, 1, and 2, and then keep track of a map that maps.
Dialogue: 0,0:03:46.90,0:03:52.63,中文,,0,0,0,,用数字0、1、2建图然后跟踪一个映射图
Dialogue: 0,0:03:52.63,0:03:59.60,英文,,0,0,0,,Austin is represented by 0, and Dallas is represented by 1, and Houston is represented by 2.
Dialogue: 0,0:03:52.63,0:03:59.60,中文,,0,0,0,,0代表奥斯汀1代表达拉斯2代表休斯顿
Dialogue: 0,0:03:59.60,0:04:09.88,英文,,0,0,0,,So in effect, This structure on the right is the same as the structure on the left, but I'm forcing you to build it like this because I am restricting you to only having integers.
Dialogue: 0,0:03:59.60,0:04:09.88,中文,,0,0,0,,实际上 右边的结构与左边的结构相同但我要求你这样构建因为我限制你只能使用整数
Dialogue: 0,0:04:09.88,0:04:16.66,英文,,0,0,0,,And this is just going to make thinking about the graph a little bit simpler for us, but maybe the users of the graph now have to think about this map.
Dialogue: 0,0:04:09.88,0:04:16.66,中文,,0,0,0,,这只是让我们思考图会简单一些但现在使用图的用户可能需要考虑这个映射图
Dialogue: 0,0:04:16.66,0:04:17.66,英文,,0,0,0,,Do you like that?
Dialogue: 0,0:04:16.66,0:04:17.66,中文,,0,0,0,,你喜欢吗
Dialogue: 0,0:04:17.66,0:04:18.82,英文,,0,0,0,,Do you not like that?
Dialogue: 0,0:04:17.66,0:04:18.82,中文,,0,0,0,,你不喜欢吗
Dialogue: 0,0:04:18.82,0:04:20.38,英文,,0,0,0,,It's your decision.
Dialogue: 0,0:04:18.82,0:04:20.38,中文,,0,0,0,,这是你的决定
Dialogue: 0,0:04:20.38,0:04:23.50,英文,,0,0,0,,OK, so that's my first choice.
Dialogue: 0,0:04:20.38,0:04:23.50,中文,,0,0,0,,那就是我的第一选择
Dialogue: 0,0:04:23.50,0:04:24.76,英文,,0,0,0,,If you like it, you can use it.
Dialogue: 0,0:04:23.50,0:04:24.76,中文,,0,0,0,,如果你喜欢它你可以使用它
Dialogue: 0,0:04:24.76,0:04:26.19,英文,,0,0,0,,If you don't, you don't have to.
Dialogue: 0,0:04:24.76,0:04:26.19,中文,,0,0,0,,如果你不喜欢你也不必使用
Dialogue: 0,0:04:26.19,0:04:32.30,英文,,0,0,0,,But I'm going to force all vertices to be integers inspired by the Princeton textbook.
Dialogue: 0,0:04:26.19,0:04:32.30,中文,,0,0,0,,但是我会受普林斯顿教科书的启发强制所有顶点都是整数
Dialogue: 0,0:04:32.30,0:04:33.84,英文,,0,0,0,,OK.
Dialogue: 0,0:04:33.84,0:04:43.23,英文,,0,0,0,,And remember, if you don't want to represent numbers and you want to represent strings or whatever else, you can keep track of a map that maps the numbers to the strings, or vice versa.
Dialogue: 0,0:04:33.84,0:04:43.23,中文,,0,0,0,,记住如果你不想表示数字而想表示字符串或其他任何东西你可以跟踪一个将数字映射到字符串或反之的映射
Dialogue: 0,0:04:43.23,0:04:44.99,英文,,0,0,0,,OK, great.
Dialogue: 0,0:04:43.23,0:04:44.99,中文,,0,0,0,,好的太棒了
Dialogue: 0,0:04:44.99,0:04:50.75,英文,,0,0,0,,So again, inspired by the Princeton textbook, these are the features that we're going to give to our users.
Dialogue: 0,0:04:44.99,0:04:50.75,中文,,0,0,0,,再次受普林斯顿教材的启发这些是我们要给我们的用户的功能
Dialogue: 0,0:04:50.75,0:04:53.89,英文,,0,0,0,,So these are the services that we're providing to our users.
Dialogue: 0,0:04:50.75,0:04:53.89,中文,,0,0,0,,这些是我们为用户提供的服务
Dialogue: 0,0:04:53.89,0:04:57.82,英文,,0,0,0,,They can interact with the graph in these ways and no other ways.
Dialogue: 0,0:04:53.89,0:04:57.82,中文,,0,0,0,,他们可以以这些方式与图表交互而没有其他方式
Dialogue: 0,0:04:57.82,0:05:02.68,英文,,0,0,0,,And if you want to let the user interact in other ways, you can, but the Princeton textbook doesn't.
Dialogue: 0,0:04:57.82,0:05:02.68,中文,,0,0,0,,如果你想让用户以其他方式进行交互你可以但普林斯顿教材不允许
Dialogue: 0,0:05:02.68,0:05:09.92,英文,,0,0,0,,So the Princeton textbook says, if you would like to create a graph, you must tell me in advance how many vertices are in the graph.
Dialogue: 0,0:05:02.68,0:05:09.92,中文,,0,0,0,,普林斯顿教材说如果你想创建一个图表你必须提前告诉我图表中有多少个顶点
Dialogue: 0,0:05:09.92,0:05:14.26,英文,,0,0,0,,So you decide ahead of time, I want a graph with 10 vertices.
Dialogue: 0,0:05:09.92,0:05:14.26,中文,,0,0,0,,你提前决定我想要一个有10个顶点的图
Dialogue: 0,0:05:14.26,0:05:15.18,英文,,0,0,0,,You want more?
Dialogue: 0,0:05:14.26,0:05:15.18,中文,,0,0,0,,你想要更多吗
Dialogue: 0,0:05:15.18,0:05:16.62,英文,,0,0,0,,Too bad, you get 10.
Dialogue: 0,0:05:15.18,0:05:16.62,中文,,0,0,0,,很遗憾你只能得到10个
Dialogue: 0,0:05:16.62,0:05:18.95,英文,,0,0,0,,That's what the Princeton algorithm's textbook says.
Dialogue: 0,0:05:16.62,0:05:18.95,中文,,0,0,0,,这就是普林斯顿算法教科书上说的
Dialogue: 0,0:05:18.95,0:05:21.55,英文,,0,0,0,,If you don't like it, you can add vertices yourself.
Dialogue: 0,0:05:18.95,0:05:21.55,中文,,0,0,0,,如果你不喜欢可以自己添加顶点
Dialogue: 0,0:05:21.55,0:05:25.91,英文,,0,0,0,,But the Princeton's textbook says, you decide ahead of time, I want 10 vertices.
Dialogue: 0,0:05:21.55,0:05:25.91,中文,,0,0,0,,但是普林斯顿的教科书说你提前决定我要10个顶点
Dialogue: 0,0:05:25.91,0:05:27.89,英文,,0,0,0,,That's all you get, no more.
Dialogue: 0,0:05:25.91,0:05:27.89,中文,,0,0,0,,这就是你得到的全部没有更多了
Dialogue: 0,0:05:27.89,0:05:29.87,英文,,0,0,0,,However, you can add edges all you want.
Dialogue: 0,0:05:27.89,0:05:29.87,中文,,0,0,0,,不过你可以随心所欲地添加边
Dialogue: 0,0:05:29.87,0:05:36.56,英文,,0,0,0,,So the Princeton textbook says, let's add a method called addEdge, which creates an edge between any two vertices.
Dialogue: 0,0:05:29.87,0:05:36.56,中文,,0,0,0,,普林斯顿教材说让我们添加一个叫做 addEdge 的方法它在任意两个顶点之间创建一条边
Dialogue: 0,0:05:36.56,0:05:38.22,英文,,0,0,0,,Notice how we're passing in integers.
Dialogue: 0,0:05:36.56,0:05:38.22,中文,,0,0,0,,注意我们传入的是整数
Dialogue: 0,0:05:38.22,0:05:39.24,英文,,0,0,0,,Why is that OK?
Dialogue: 0,0:05:38.22,0:05:39.24,中文,,0,0,0,,为什么可以这样
Dialogue: 0,0:05:39.24,0:05:43.82,英文,,0,0,0,,Because we enforced earlier that all the nodes in the graph are labeled with integers.
Dialogue: 0,0:05:39.24,0:05:43.82,中文,,0,0,0,,因为我们之前强制规定图中的所有节点都标记为整数
Dialogue: 0,0:05:43.82,0:05:46.18,英文,,0,0,0,,That's why these arguments are ints.
Dialogue: 0,0:05:43.82,0:05:46.18,中文,,0,0,0,,这就是为什么这些参数是整数的原因
Dialogue: 0,0:05:46.18,0:05:57.26,英文,,0,0,0,,And then the only way in which you can interact with the graph and ask it questions is you can say, hey, vertex number 5, what are all the vertices adjacent to vertex number 5?
Dialogue: 0,0:05:46.18,0:05:57.26,中文,,0,0,0,,然后你唯一可以与图进行交互并询问它问题的方式是你可以说嘿顶点编号为5与顶点编号为5相邻的所有顶点是哪些
Dialogue: 0,0:05:57.26,0:06:01.19,英文,,0,0,0,,That is, all the vertices connected to 5 by a single edge.
Dialogue: 0,0:05:57.26,0:06:01.19,中文,,0,0,0,,也就是说与5通过单条边连接的所有顶点
Dialogue: 0,0:06:01.19,0:06:03.25,英文,,0,0,0,,And this is going to return an iterable.
Dialogue: 0,0:06:01.19,0:06:03.25,中文,,0,0,0,,这会返回一个可迭代对象
Dialogue: 0,0:06:03.25,0:06:04.93,英文,,0,0,0,,I actually don't know why they chose to do that.
Dialogue: 0,0:06:03.25,0:06:04.93,中文,,0,0,0,,其实我也不知道他们为什么选择这样做
Dialogue: 0,0:06:04.93,0:06:07.63,英文,,0,0,0,,You could also return a list here if you wanted to.
Dialogue: 0,0:06:04.93,0:06:07.63,中文,,0,0,0,,如果你愿意你也可以在这里返回一个列表
Dialogue: 0,0:06:07.63,0:06:13.23,英文,,0,0,0,,But the key idea is it's going to return a list or an iterable or a collection
Dialogue: 0,0:06:07.63,0:06:13.23,中文,,0,0,0,,但关键是它会返回一个列表或一个可迭代对象或一个集合
Dialogue: 0,0:06:13.23,0:06:19.33,英文,,0,0,0,,all the vertices represented by numbers that are adjacent to the vertex that you passed in.
Dialogue: 0,0:06:13.23,0:06:19.33,中文,,0,0,0,,所有由与你传入的顶点相邻的数字表示的顶点
Dialogue: 0,0:06:19.33,0:06:22.48,英文,,0,0,0,,And then you can also ask, how many vertices are in the graph in total?
Dialogue: 0,0:06:19.33,0:06:22.48,中文,,0,0,0,,然后你也可以问图中总共有多少个顶点
Dialogue: 0,0:06:22.48,0:06:25.84,英文,,0,0,0,,You can also ask, how many edges in the graph in total?
Dialogue: 0,0:06:22.48,0:06:25.84,中文,,0,0,0,,你也可以问图中总共有多少条边
Dialogue: 0,0:06:25.84,0:06:27.26,英文,,0,0,0,,And that's it.
Dialogue: 0,0:06:25.84,0:06:27.26,中文,,0,0,0,,就是这样
Dialogue: 0,0:06:27.26,0:06:30.79,英文,,0,0,0,,That's all the Princeton's algorithms textbook graph class lets you use.
Dialogue: 0,0:06:27.26,0:06:30.79,中文,,0,0,0,,普林斯顿的算法教材图表课程只允许你使用这些
Dialogue: 0,0:06:30.79,0:06:33.95,英文,,0,0,0,,So if you choose to use this implementation of a graph,
Dialogue: 0,0:06:30.79,0:06:33.95,中文,,0,0,0,,如果你选择使用这个图的实现
Dialogue: 0,0:06:33.95,0:06:38.82,英文,,0,0,0,,These are the only services that are provided to the user of the graph.
Dialogue: 0,0:06:33.95,0:06:38.82,中文,,0,0,0,,这些是提供给图的用户的唯一服务
Dialogue: 0,0:06:38.82,0:06:41.58,英文,,0,0,0,,They want to do something else, they have to do it themselves.
Dialogue: 0,0:06:38.82,0:06:41.58,中文,,0,0,0,,如果他们想做其他事情他们就得自己做
Dialogue: 0,0:06:41.58,0:06:42.85,英文,,0,0,0,,We don't give it to them.
Dialogue: 0,0:06:41.58,0:06:42.85,中文,,0,0,0,,我们不会把它给他们
Dialogue: 0,0:06:42.85,0:06:48.88,英文,,0,0,0,,We let you add edges and ask for adjacent edges, and that's it.
Dialogue: 0,0:06:42.85,0:06:48.88,中文,,0,0,0,,我们只允许你添加边缘并请求相邻的边缘就是这样
Dialogue: 0,0:06:48.88,0:06:50.84,英文,,0,0,0,,So here's an example.
Dialogue: 0,0:06:48.88,0:06:50.84,中文,,0,0,0,,这里有个例子
Dialogue: 0,0:06:50.84,0:06:57.23,英文,,0,0,0,,Let's say I'm building a graph, and I'm really intensely curious about the degree of vertex 1.
Dialogue: 0,0:06:50.84,0:06:57.23,中文,,0,0,0,,比方说我在建图我超级好奇顶点1的度数
Dialogue: 0,0:06:57.23,0:07:02.15,英文,,0,0,0,,So I really want to know how many edges are coming out of vertex 1.
Dialogue: 0,0:06:57.23,0:07:02.15,中文,,0,0,0,,我真的想知道顶点1有多少条边
Dialogue: 0,0:07:02.15,0:07:03.73,英文,,0,0,0,,In the picture, I can see it's 2.
Dialogue: 0,0:07:02.15,0:07:03.73,中文,,0,0,0,,在图中我看到是2条
Dialogue: 0,0:07:03.73,0:07:06.50,英文,,0,0,0,,There are two edges coming out of vertex 1.
Dialogue: 0,0:07:03.73,0:07:06.50,中文,,0,0,0,,顶点1有两条边
Dialogue: 0,0:07:06.50,0:07:10.12,英文,,0,0,0,,But if I were to implement the graph using this class,
Dialogue: 0,0:07:06.50,0:07:10.12,中文,,0,0,0,,但如果我要用这个类来实现图
Dialogue: 0,0:07:10.12,0:07:15.62,英文,,0,0,0,,How would I ask this graph in code how many edges are coming out of vertex 1?
Dialogue: 0,0:07:10.12,0:07:15.62,中文,,0,0,0,,我要怎么在代码中询问这个图顶点1有多少条边呢
Dialogue: 0,0:07:15.62,0:07:21.93,英文,,0,0,0,,I look through the methods, the services that are provided to me, and look, there's no degree method.
Dialogue: 0,0:07:15.62,0:07:21.93,中文,,0,0,0,,我查看了可用的方法和服务看这里没有`degree`方法
Dialogue: 0,0:07:21.93,0:07:23.11,英文,,0,0,0,,So I look here.
Dialogue: 0,0:07:21.93,0:07:23.11,中文,,0,0,0,,我在这里看看
Dialogue: 0,0:07:23.11,0:07:28.16,英文,,0,0,0,,There's no way for me to ask the graph how many edges are coming out of vertex 1.
Dialogue: 0,0:07:23.11,0:07:28.16,中文,,0,0,0,,没有办法让图告诉我从顶点1出来多少条边
Dialogue: 0,0:07:28.16,0:07:31.64,英文,,0,0,0,,It's like going to a store, and you're like, can you gift wrap this for me?
Dialogue: 0,0:07:28.16,0:07:31.64,中文,,0,0,0,,这就像去商店你说你能帮我把这个包起来吗
Dialogue: 0,0:07:31.64,0:07:33.70,英文,,0,0,0,,And the store says, no, I don't provide the service.
Dialogue: 0,0:07:31.64,0:07:33.70,中文,,0,0,0,,然后商店说不我不提供这项服务
Dialogue: 0,0:07:33.70,0:07:37.15,英文,,0,0,0,,You have to gift wrap the thing yourself, or whatever.
Dialogue: 0,0:07:33.70,0:07:37.15,中文,,0,0,0,,你得自己把东西包起来或者别的什么
Dialogue: 0,0:07:37.15,0:07:46.62,英文,,0,0,0,,So in this case, because the graph does not provide the service of telling me how many edges are adjacent to 1, I have to do it myself.
Dialogue: 0,0:07:37.15,0:07:46.62,中文,,0,0,0,,在这种情况下因为图不提供告诉我顶点1相邻的边有多少条的服务我得自己动手
Dialogue: 0,0:07:46.62,0:08:01.31,英文,,0,0,0,,So here, the person using the graph has to write their own method, where they've taken a graph, taken a vertex, and then they have to write their own code, which somehow iterates through the adjacency and counts the number of vertices that are adjacent and returns the count.
Dialogue: 0,0:07:46.62,0:08:01.31,中文,,0,0,0,,在这里使用图的人必须编写自己的方法他们已经拿到了一个图拿到了一个顶点然后他们必须编写自己的代码以某种方式迭代通过邻接并计算相邻的顶点数并返回计数
Dialogue: 0,0:08:01.31,0:08:07.70,英文,,0,0,0,,And this is how the user of the graph would figure out that the vertex 1 has two edges coming out.
Dialogue: 0,0:08:01.31,0:08:07.70,中文,,0,0,0,,这就是图的用户如何找出顶点 1 有两条边出来的方法
Dialogue: 0,0:08:07.70,0:08:09.96,英文,,0,0,0,,They have to write this code themselves.
Dialogue: 0,0:08:07.70,0:08:09.96,中文,,0,0,0,,他们必须自己写这段代码
Dialogue: 0,0:08:09.96,0:08:17.88,英文,,0,0,0,,If you don't like this, if you find this distasteful, you, when you're writing your own graph class in Project 2, you could add your own method called degree.
Dialogue: 0,0:08:09.96,0:08:17.88,中文,,0,0,0,,如果你不喜欢这样如果你觉得这样不合适那么在你自己编写项目 2 中的图类时你可以添加自己的方法叫做 degree
Dialogue: 0,0:08:17.88,0:08:24.73,英文,,0,0,0,,And this way, the users of your graph could just call the degree method to see how many edges are coming out of a vertex.
Dialogue: 0,0:08:17.88,0:08:24.73,中文,,0,0,0,,这样你的图的用户就可以调用 degree 方法来查看一个顶点有多少条边出去
Dialogue: 0,0:08:24.73,0:08:27.11,英文,,0,0,0,,So it's kind of a decision that you get to make.
Dialogue: 0,0:08:24.73,0:08:27.11,中文,,0,0,0,,这是一个你可以做出的决定
Dialogue: 0,0:08:27.11,0:08:29.29,英文,,0,0,0,,Do you want the users to have to do this?
Dialogue: 0,0:08:27.11,0:08:29.29,中文,,0,0,0,,你想让用户这样做吗
Dialogue: 0,0:08:29.29,0:08:31.95,英文,,0,0,0,,Or do you want to provide this as a service to your users?
Dialogue: 0,0:08:29.29,0:08:31.95,中文,,0,0,0,,或者你想将这作为一项为你的用户提供的服务吗
Dialogue: 0,0:08:31.95,0:08:33.09,英文,,0,0,0,,That's your call.
Dialogue: 0,0:08:31.95,0:08:33.09,中文,,0,0,0,,这由你决定
Dialogue: 0,0:08:33.09,0:08:36.49,英文,,0,0,0,,But this is what the Princeton's library decided.
Dialogue: 0,0:08:33.09,0:08:36.49,中文,,0,0,0,,但这是普林斯顿大学图书馆做出的决定
Dialogue: 0,0:08:36.49,0:08:37.53,英文,,0,0,0,,OK.
Dialogue: 0,0:08:37.53,0:08:41.73,英文,,0,0,0,,Stop for questions, thoughts.
Dialogue: 0,0:08:37.53,0:08:41.73,中文,,0,0,0,,停下来问问题思考一下
Dialogue: 0,0:08:41.73,0:08:46.38,英文,,0,0,0,,Great, so something else you might want to do is maybe you want to print the graph.
Dialogue: 0,0:08:41.73,0:08:46.38,中文,,0,0,0,,很棒还有一件你可能想做的事情是打印图表
Dialogue: 0,0:08:46.38,0:08:48.46,英文,,0,0,0,,And you can print it in all sorts of different ways.
Dialogue: 0,0:08:46.38,0:08:48.46,中文,,0,0,0,,你可以以各种不同的方式打印它
Dialogue: 0,0:08:48.46,0:08:51.92,英文,,0,0,0,,I'm just going to print it in this lazy way where I write out all the edges.
Dialogue: 0,0:08:48.46,0:08:51.92,中文,,0,0,0,,我就以这种懒人的方式来打印把所有的边都写出来
Dialogue: 0,0:08:51.92,0:08:57.77,英文,,0,0,0,,And so question for you is, could you print the graph by just asking the graph to print itself?
Dialogue: 0,0:08:51.92,0:08:57.77,中文,,0,0,0,,你的问题是你能不能让图自己打印出来
Dialogue: 0,0:08:57.77,0:08:59.39,英文,,0,0,0,,I look through the methods.
Dialogue: 0,0:08:57.77,0:08:59.39,中文,,0,0,0,,我看了一下方法
Dialogue: 0,0:08:59.39,0:09:02.69,英文,,0,0,0,,No, there is no service for printing the graph.
Dialogue: 0,0:08:59.39,0:09:02.69,中文,,0,0,0,,不没有用于打印图的服务
Dialogue: 0,0:09:02.69,0:09:05.91,英文,,0,0,0,,And look, these are the only things that the graph lets me do.
Dialogue: 0,0:09:02.69,0:09:05.91,中文,,0,0,0,,看这些是图允许我做的唯一的事情
Dialogue: 0,0:09:05.91,0:09:07.51,英文,,0,0,0,,There is no print method.
Dialogue: 0,0:09:05.91,0:09:07.51,中文,,0,0,0,,没有打印方法
Dialogue: 0,0:09:07.51,0:09:13.54,英文,,0,0,0,,So if I were someone using this graph and I wanted to print out the graph, I would have to write it myself.
Dialogue: 0,0:09:07.51,0:09:13.54,中文,,0,0,0,,如果我是在使用这个图的人想要打印出图来我就得自己写
Dialogue: 0,0:09:13.54,0:09:16.02,英文,,0,0,0,,So you can try and think about how you'd write this.
Dialogue: 0,0:09:13.54,0:09:16.02,中文,,0,0,0,,你可以尝试想一想你会怎么写这个
Dialogue: 0,0:09:16.02,0:09:17.36,英文,,0,0,0,,I'm trying to picture it.
Dialogue: 0,0:09:16.02,0:09:17.36,中文,,0,0,0,,我在试着想象它
Dialogue: 0,0:09:17.36,0:09:21.94,英文,,0,0,0,,And remember, the only things you can use are these methods here and nothing else.
Dialogue: 0,0:09:17.36,0:09:21.94,中文,,0,0,0,,记住你只能使用这里列出的方法不能使用其他任何方法
Dialogue: 0,0:09:21.94,0:09:28.87,英文,,0,0,0,,So somehow, I'm probably going to have to use the adjacent method and be like, well, what are all the vertices adjacent to 0?
Dialogue: 0,0:09:21.94,0:09:28.87,中文,,0,0,0,,在某种程度上我可能会需要使用邻接方法然后想一想哦与 0 相邻的所有顶点是哪些
Dialogue: 0,0:09:28.87,0:09:29.91,英文,,0,0,0,,Print those out.
Dialogue: 0,0:09:28.87,0:09:29.91,中文,,0,0,0,,打印出它们
Dialogue: 0,0:09:29.91,0:09:32.39,英文,,0,0,0,,What are all the vertices adjacent to 1?
Dialogue: 0,0:09:29.91,0:09:32.39,中文,,0,0,0,,与 1 相邻的所有顶点是哪些
Dialogue: 0,0:09:32.39,0:09:33.51,英文,,0,0,0,,Print those out.
Dialogue: 0,0:09:32.39,0:09:33.51,中文,,0,0,0,,打印出它们
Dialogue: 0,0:09:33.51,0:09:35.33,英文,,0,0,0,,What are all the vertices adjacent to 2?
Dialogue: 0,0:09:33.51,0:09:35.33,中文,,0,0,0,,2 附近的所有顶点是什么
Dialogue: 0,0:09:35.33,0:09:36.45,英文,,0,0,0,,Print those out.
Dialogue: 0,0:09:35.33,0:09:36.45,中文,,0,0,0,,把它们打印出来
Dialogue: 0,0:09:36.45,0:09:38.58,英文,,0,0,0,,So maybe something like this.
Dialogue: 0,0:09:36.45,0:09:38.58,中文,,0,0,0,,可能是这样的
Dialogue: 0,0:09:38.58,0:09:40.50,英文,,0,0,0,,You don't have to start the code too hard.
Dialogue: 0,0:09:38.58,0:09:40.50,中文,,0,0,0,,你不必把代码写得太难
Dialogue: 0,0:09:40.50,0:09:42.88,英文,,0,0,0,,But the idea is I iterate through all the vertices.
Dialogue: 0,0:09:40.50,0:09:42.88,中文,,0,0,0,,但是思路是我遍历所有的顶点
Dialogue: 0,0:09:42.88,0:09:47.18,英文,,0,0,0,,For every vertex, I look for all its adjacent vertices, and I print it.
Dialogue: 0,0:09:42.88,0:09:47.18,中文,,0,0,0,,对于每个顶点我查找所有相邻的顶点并将其打印出来
Dialogue: 0,0:09:47.18,0:09:52.35,英文,,0,0,0,,And again, this is the user doing this, because the graph class did not provide the service.
Dialogue: 0,0:09:47.18,0:09:52.35,中文,,0,0,0,,再次强调这是用户自己做的因为图形类没有提供这个服务
Dialogue: 0,0:09:52.35,0:09:54.79,英文,,0,0,0,,So you go to the store, you're like, can you do this for me?
Dialogue: 0,0:09:52.35,0:09:54.79,中文,,0,0,0,,你去商店就像说你能帮我做这个吗
Dialogue: 0,0:09:54.79,0:09:57.71,英文,,0,0,0,,And the store is like, no, you've got to do it yourself.
Dialogue: 0,0:09:54.79,0:09:57.71,中文,,0,0,0,,然后店员说不行你得自己动手
Dialogue: 0,0:09:57.71,0:09:58.99,英文,,0,0,0,,It's like going to Ikea.
Dialogue: 0,0:09:57.71,0:09:58.99,中文,,0,0,0,,就像去宜家一样
Dialogue: 0,0:09:58.99,0:10:02.05,英文,,0,0,0,,You have to go home and put the couch together yourself.
Dialogue: 0,0:09:58.99,0:10:02.05,中文,,0,0,0,,你得回家自己把沙发组装起来
Dialogue: 0,0:10:02.05,0:10:03.97,英文,,0,0,0,,So that's what I've got to do here.
Dialogue: 0,0:10:02.05,0:10:03.97,中文,,0,0,0,,这就是我在这里要做的事情
Dialogue: 0,0:10:03.97,0:10:08.68,英文,,0,0,0,,And if you don't like it, you can add a print method yourself, but they didn't.
Dialogue: 0,0:10:03.97,0:10:08.68,中文,,0,0,0,,如果你不喜欢你可以自己添加一个打印方法但他们没这么做
Dialogue: 0,0:10:08.68,0:10:11.70,英文,,0,0,0,,OK, so here it is, my favorite picture again.
Dialogue: 0,0:10:08.68,0:10:11.70,中文,,0,0,0,,这就是我的最爱的图片
Dialogue: 0,0:10:11.70,0:10:14.75,英文,,0,0,0,,And again, it's showing you that here's the monk in the back.
Dialogue: 0,0:10:11.70,0:10:14.75,中文,,0,0,0,,而且它再次向你展示这是后面的和尚
Dialogue: 0,0:10:14.75,0:10:24.18,英文,,0,0,0,,And it's providing you with the show, the puppet show, with these methods, the graph, constructor, addEdge, adjacent.
Dialogue: 0,0:10:14.75,0:10:24.18,中文,,0,0,0,,而且它提供给你的是表演木偶表演通过这些方法图形构造函数addEdgeadjacent
Dialogue: 0,0:10:24.18,0:10:26.02,英文,,0,0,0,,And that's the only thing you get in the show.
Dialogue: 0,0:10:24.18,0:10:26.02,中文,,0,0,0,,这就是你在表演中得到的唯一东西
Dialogue: 0,0:10:26.02,0:10:34.62,英文,,0,0,0,,And everything else you want to do, you have to manipulate the puppets yourself to make that happen using the methods that we provided.
Dialogue: 0,0:10:26.02,0:10:34.62,中文,,0,0,0,,而你想要做的其他一切你都必须自己操纵木偶使用我们提供的方法来实现
Dialogue: 0,0:10:34.62,0:10:41.00,英文,,0,0,0,,So that was our first choice, which is, what services do you want to give to the users of your graph class?
Dialogue: 0,0:10:34.62,0:10:41.00,中文,,0,0,0,,那就是我们的第一个选择也就是说你想给你的图类的用户提供什么服务
Dialogue: 0,0:10:41.00,0:10:42.28,英文,,0,0,0,,And that's what we chose.
Dialogue: 0,0:10:41.00,0:10:42.28,中文,,0,0,0,,而这就是我们选择的内容
Dialogue: 0,0:10:42.28,0:10:45.08,英文,,0,0,0,,But again, you can choose something different.
Dialogue: 0,0:10:42.28,0:10:45.08,中文,,0,0,0,,但同样你可以选择不同的东西
Dialogue: 0,0:10:45.08,0:10:52.97,英文,,0,0,0,,And depending on what you choose, the implementation of all these different services or methods, like print or depth-first paths, they could be simple.
Dialogue: 0,0:10:45.08,0:10:52.97,中文,,0,0,0,,根据你选择的不同所有这些不同的服务或方法的实现比如打印或深度优先路径它们可能很简单
Dialogue: 0,0:10:52.97,0:10:53.91,英文,,0,0,0,,They could be fast.
Dialogue: 0,0:10:52.97,0:10:53.91,中文,,0,0,0,,它们可能很快
Dialogue: 0,0:10:53.91,0:10:55.09,英文,,0,0,0,,They could be slow.
Dialogue: 0,0:10:53.91,0:10:55.09,中文,,0,0,0,,它们可能很慢
Dialogue: 0,0:10:55.09,0:10:59.29,英文,,0,0,0,,And it really depends on what you give to your users.
Dialogue: 0,0:10:55.09,0:10:59.29,中文,,0,0,0,,这真的取决于你给用户什么
Dialogue: 0,0:10:59.29,0:11:05.31,英文,,0,0,0,,So that was our first question answered, which is, what services or methods do we give to our users?
Dialogue: 0,0:10:59.29,0:11:05.31,中文,,0,0,0,,我们第一个问题已经解决了那就是我们给用户什么服务或方法
Dialogue: 0,0:11:05.31,0:11:10.04,英文,,0,0,0,,But there's a second question, which is, well, how do you actually build the graph in memory?
Dialogue: 0,0:11:05.31,0:11:10.04,中文,,0,0,0,,但还有第二个问题那就是你到底如何在内存中构建图形
Dialogue: 0,0:11:10.04,0:11:13.54,英文,,0,0,0,,So we talked about these are the services that we give to our users.
Dialogue: 0,0:11:10.04,0:11:13.54,中文,,0,0,0,,我们谈到了这些是我们给用户的服务
Dialogue: 0,0:11:13.54,0:11:19.80,英文,,0,0,0,,But what data structure do we use to actually implement all these methods that we've been talking about?
Dialogue: 0,0:11:13.54,0:11:19.80,中文,,0,0,0,,但是我们到底要使用什么数据结构来实际实现我们一直在谈论的所有这些方法呢
Dialogue: 0,0:11:19.80,0:11:22.42,英文,,0,0,0,,So that's something we're going to have to think about next as well.
Dialogue: 0,0:11:19.80,0:11:22.42,中文,,0,0,0,,这是我们接下来要考虑的事情
Dialogue: 0,0:11:22.42,0:11:30.47,英文,,0,0,0,,So I guess before we get to that, one other thing we should think about is, how do you represent this depth-first paths thing?
Dialogue: 0,0:11:22.42,0:11:30.47,中文,,0,0,0,,我想在我们开始讨论这个之前我们还应该考虑的另一件事是你如何表示这个深度优先路径
Dialogue: 0,0:11:30.47,0:11:45.19,英文,,0,0,0,,So the idea that the Princeton Algorithms Library uses, but you don't have to use, is they decide, I'm actually going to build a new separate class that represents depth-first paths.
Dialogue: 0,0:11:30.47,0:11:45.19,中文,,0,0,0,,普林斯顿算法库使用的想法但你不必使用他们决定我实际上要构建一个新的单独的类来表示深度优先路径
Dialogue: 0,0:11:45.19,0:11:52.16,英文,,0,0,0,,So if you think of classes or objects as representing things in the real world, I have an object representing a graph.
Dialogue: 0,0:11:45.19,0:11:52.16,中文,,0,0,0,,如果你把类或对象想象成现实世界中的东西我有一个表示图的对象
Dialogue: 0,0:11:52.16,0:11:54.18,英文,,0,0,0,,I have an object representing a dog.
Dialogue: 0,0:11:52.16,0:11:54.18,中文,,0,0,0,,我有一个代表狗的对象
Dialogue: 0,0:11:54.18,0:12:00.61,英文,,0,0,0,,You could think of this object is like this wise bodhisattva, and it's like,
Dialogue: 0,0:11:54.18,0:12:00.61,中文,,0,0,0,,你可以把这个对象想象成像这个智慧的菩萨就像是
Dialogue: 0,0:12:00.61,0:12:05.21,英文,,0,0,0,,this really wise creature that knows all about a graph.
Dialogue: 0,0:12:00.61,0:12:05.21,中文,,0,0,0,,这是一个非常聪明的生物它了解图表的一切
Dialogue: 0,0:12:05.21,0:12:13.91,英文,,0,0,0,,So one thing you could do is you could create a constructor, and you pass in a graph, and pass in a starting vertex, and you give this to the Bodhisattva,
Dialogue: 0,0:12:05.21,0:12:13.91,中文,,0,0,0,,你可以做的一件事是创建一个构造函数你把一个图表传进去再传进一个起始顶点然后把这个给观世音菩萨
Dialogue: 0,0:12:13.91,0:12:20.93,英文,,0,0,0,,So one thing you could do is you could create a constructor, and you pass in a graph, and pass in a starting vertex, and you give this to the Bodhisattva, and she thinks really hard about the graph, she learns all of its truths, and then after the constructor runs, now you can ask her questions.
Dialogue: 0,0:12:13.91,0:12:20.93,中文,,0,0,0,,她会认真思考这个图表她会学习它的所有真相然后在构造函数运行之后现在你可以问她问题了
Dialogue: 0,0:12:20.93,0:12:24.23,英文,,0,0,0,,You can ask her a question like, hey, is there a path from S
Dialogue: 0,0:12:20.93,0:12:24.23,中文,,0,0,0,,你可以问她一个问题比如嘿从S到V有路径吗
Dialogue: 0,0:12:24.23,0:12:26.51,英文,,0,0,0,,to V, and she'll say yes or no.
Dialogue: 0,0:12:24.23,0:12:26.51,中文,,0,0,0,,她会回答是或者不是
Dialogue: 0,0:12:26.51,0:12:30.80,英文,,0,0,0,,You can also ask her a question like, hey, what is the path from S to V?
Dialogue: 0,0:12:26.51,0:12:30.80,中文,,0,0,0,,你还可以问她一个问题比如嘿从S到V的路径是什么
Dialogue: 0,0:12:30.80,0:12:36.02,英文,,0,0,0,,And if there is one, then she'll return it to you, maybe in the form of an iterable or a list.
Dialogue: 0,0:12:30.80,0:12:36.02,中文,,0,0,0,,如果有的话她会把它还给你也许是以可迭代的形式或者列表的形式
Dialogue: 0,0:12:36.02,0:12:37.92,英文,,0,0,0,,So you could do this.
Dialogue: 0,0:12:36.02,0:12:37.92,中文,,0,0,0,,你可以这样做
Dialogue: 0,0:12:37.92,0:12:39.26,英文,,0,0,0,,Some people like doing this.
Dialogue: 0,0:12:37.92,0:12:39.26,中文,,0,0,0,,有些人喜欢这样做
Dialogue: 0,0:12:39.26,0:12:45.97,英文,,0,0,0,,If you ask our TAs, a lot of people didn't do this, and they just built the graph or the depth-first paths into their graph class.
Dialogue: 0,0:12:39.26,0:12:45.97,中文,,0,0,0,,如果你问我们的助教很多人没有做这个他们只是把图或深度优先路径集成到他们的图类中
Dialogue: 0,0:12:45.97,0:12:51.59,英文,,0,0,0,,So it's a design choice that you get to make, but this is what the Princeton implementers chose to do.
Dialogue: 0,0:12:45.97,0:12:51.59,中文,,0,0,0,,这是一个你可以做出的设计选择但这是普林斯顿实现者选择做的
Dialogue: 0,0:12:51.59,0:12:56.91,英文,,0,0,0,,They built a paths class representing this wise sage who knows all about graphs.
Dialogue: 0,0:12:51.59,0:12:56.91,中文,,0,0,0,,他们构建了一个代表这位聪明的智者对图了如指掌的路径类
Dialogue: 0,0:12:56.91,0:12:58.53,英文,,0,0,0,,You give the sage a graph.
Dialogue: 0,0:12:56.91,0:12:58.53,中文,,0,0,0,,你给这位智者一个图
Dialogue: 0,0:12:58.53,0:13:00.55,英文,,0,0,0,,The sage thinks about the graph really hard.
Dialogue: 0,0:12:58.53,0:13:00.55,中文,,0,0,0,,智者会认真思考这个图
Dialogue: 0,0:13:00.55,0:13:02.73,英文,,0,0,0,,And then you can ask her questions about the graph.
Dialogue: 0,0:13:00.55,0:13:02.73,中文,,0,0,0,,然后你可以向她询问有关图的问题
Dialogue: 0,0:13:02.73,0:13:04.25,英文,,0,0,0,,So I find that kind of neat.
Dialogue: 0,0:13:02.73,0:13:04.25,中文,,0,0,0,,我觉得那挺不错的
Dialogue: 0,0:13:04.25,0:13:06.01,英文,,0,0,0,,But it's your choice.
Dialogue: 0,0:13:04.25,0:13:06.01,中文,,0,0,0,,但这是你的选择
Dialogue: 0,0:13:06.01,0:13:06.87,英文,,0,0,0,,OK.
Dialogue: 0,0:13:06.87,0:13:13.92,英文,,0,0,0,,So example usage, you give her a graph, G. You say, S is the starting vertex at 0.
Dialogue: 0,0:13:06.87,0:13:13.92,中文,,0,0,0,,举个例子你给她一个图G你说S是起始顶点编号为0
Dialogue: 0,0:13:13.92,0:13:15.18,英文,,0,0,0,,And then you can ask her questions.
Dialogue: 0,0:13:13.92,0:13:15.18,中文,,0,0,0,,然后你可以问她问题
Dialogue: 0,0:13:15.18,0:13:16.96,英文,,0,0,0,,And she'll answer your questions.
Dialogue: 0,0:13:15.18,0:13:16.96,中文,,0,0,0,,她会回答你的问题
Dialogue: 0,0:13:16.96,0:13:18.06,英文,,0,0,0,,Kind of cool.
Dialogue: 0,0:13:16.96,0:13:18.06,中文,,0,0,0,,挺酷的
Dialogue: 0,0:13:18.06,0:13:19.45,英文,,0,0,0,,OK.
Dialogue: 0,0:13:19.45,0:13:23.43,英文,,0,0,0,,So I guess we could review depth-first paths if you want to.
Dialogue: 0,0:13:19.45,0:13:23.43,中文,,0,0,0,,那我猜如果你想的话我们可以回顾一下深度优先路径
Dialogue: 0,0:13:23.43,0:13:25.59,英文,,0,0,0,,Does anyone really want to see it again?
Dialogue: 0,0:13:23.43,0:13:25.59,中文,,0,0,0,,真的有人想再看一遍吗
Dialogue: 0,0:13:25.59,0:13:27.33,英文,,0,0,0,,Anyone not want to see it again?
Dialogue: 0,0:13:25.59,0:13:27.33,中文,,0,0,0,,有人不想再看一遍吗
Dialogue: 0,0:13:27.33,0:13:28.47,英文,,0,0,0,,It's just like, go on.
Dialogue: 0,0:13:27.33,0:13:28.47,中文,,0,0,0,,就像随便吧
Dialogue: 0,0:13:28.47,0:13:29.45,英文,,0,0,0,,OK.
Dialogue: 0,0:13:29.45,0:13:30.49,英文,,0,0,0,,Mixed opinions.
Dialogue: 0,0:13:29.45,0:13:30.49,中文,,0,0,0,,意见不一
Dialogue: 0,0:13:30.49,0:13:31.96,英文,,0,0,0,,I don't know if Zoom has opinions.
Dialogue: 0,0:13:30.49,0:13:31.96,中文,,0,0,0,,我不知道 Zoom 是否有意见
Dialogue: 0,0:13:31.96,0:13:32.30,英文,,0,0,0,,OK.
Dialogue: 0,0:13:32.30,0:13:34.98,英文,,0,0,0,,I'll quickly speed run depth-first paths.
Dialogue: 0,0:13:32.30,0:13:34.98,中文,,0,0,0,,我会快速运行深度优先路径
Dialogue: 0,0:13:34.98,0:13:37.70,英文,,0,0,0,,And if you want to go faster or slower, just tell me.
Dialogue: 0,0:13:34.98,0:13:37.70,中文,,0,0,0,,如果你想快一点或慢一点告诉我就好
Dialogue: 0,0:13:37.70,0:13:38.36,英文,,0,0,0,,OK.
Dialogue: 0,0:13:38.36,0:13:42.82,英文,,0,0,0,,So remember, depth-first paths, this is the final algorithm we saw last time.
Dialogue: 0,0:13:38.36,0:13:42.82,中文,,0,0,0,,记住深度优先路径这是我们上次看到的最终算法
Dialogue: 0,0:13:42.82,0:13:48.83,英文,,0,0,0,,And the key ideas were you should keep track of every vertex.
Dialogue: 0,0:13:42.82,0:13:48.83,中文,,0,0,0,,关键想法是你应该跟踪每个顶点
Dialogue: 0,0:13:48.83,0:13:53.45,英文,,0,0,0,,And you should mark a vertex when you visit it because I don't want to visit a vertex twice.
Dialogue: 0,0:13:48.83,0:13:53.45,中文,,0,0,0,,当你访问一个顶点时你应该标记它因为我不想两次访问同一个顶点
Dialogue: 0,0:13:53.45,0:13:55.97,英文,,0,0,0,,I don't care about a vertex's opinions twice.
Dialogue: 0,0:13:53.45,0:13:55.97,中文,,0,0,0,,我不在乎顶点的意见两次
Dialogue: 0,0:13:55.97,0:14:01.21,英文,,0,0,0,,So every time I visit a vertex, I'm going to mark it so I avoid visiting it a second time.
Dialogue: 0,0:13:55.97,0:14:01.21,中文,,0,0,0,,每次我访问一个顶点我都会标记它这样我就可以避免第二次访问它
Dialogue: 0,0:14:01.21,0:14:05.86,英文,,0,0,0,,I don't want to be trapped in that infinite loop where I visit the same two vertices over and over again.
Dialogue: 0,0:14:01.21,0:14:05.86,中文,,0,0,0,,我不想陷入那个无限循环一遍又一遍地访问同样的两个顶点
Dialogue: 0,0:14:05.86,0:14:06.78,英文,,0,0,0,,That's stupid.
Dialogue: 0,0:14:05.86,0:14:06.78,中文,,0,0,0,,那太蠢了
Dialogue: 0,0:14:06.78,0:14:11.72,英文,,0,0,0,,So every time I visit a vertex, I'm going to mark it and then never visit it again.
Dialogue: 0,0:14:06.78,0:14:11.72,中文,,0,0,0,,每次我访问一个顶点我都会标记它然后再也不访问它了
Dialogue: 0,0:14:11.72,0:14:13.08,英文,,0,0,0,,So look, I go to 0.
Dialogue: 0,0:14:11.72,0:14:13.08,中文,,0,0,0,,看我去到0
Dialogue: 0,0:14:13.08,0:14:14.20,英文,,0,0,0,,I mark it.
Dialogue: 0,0:14:13.08,0:14:14.20,中文,,0,0,0,,我标记它
Dialogue: 0,0:14:14.20,0:14:15.20,英文,,0,0,0,,It's white.
Dialogue: 0,0:14:14.20,0:14:15.20,中文,,0,0,0,,它是白色的
Dialogue: 0,0:14:15.20,0:14:16.88,英文,,0,0,0,,I will never visit it again.
Dialogue: 0,0:14:15.20,0:14:16.88,中文,,0,0,0,,我永远不会再去访问它了
Dialogue: 0,0:14:16.88,0:14:25.43,英文,,0,0,0,,And then for every neighbor of v, so in this case, just one neighbor, and it's 1, I will write how I get to that neighbor.
Dialogue: 0,0:14:16.88,0:14:25.43,中文,,0,0,0,,然后对于v的每个邻居在这种情况下只有一个邻居而且它是1我会写下我到达该邻居的方法
Dialogue: 0,0:14:25.43,0:14:27.62,英文,,0,0,0,,And then I will call DFS on that neighbor.
Dialogue: 0,0:14:25.43,0:14:27.62,中文,,0,0,0,,然后我会在该邻居上调用dfs
Dialogue: 0,0:14:27.62,0:14:28.92,英文,,0,0,0,,So how do I get to 1?
Dialogue: 0,0:14:27.62,0:14:28.92,中文,,0,0,0,,那么我怎么到达1呢
Dialogue: 0,0:14:28.92,0:14:30.42,英文,,0,0,0,,I get to 1 using 0.
Dialogue: 0,0:14:28.92,0:14:30.42,中文,,0,0,0,,我使用0到达1
Dialogue: 0,0:14:30.42,0:14:31.76,英文,,0,0,0,,OK, so I wrote it down.
Dialogue: 0,0:14:30.42,0:14:31.76,中文,,0,0,0,,我把它写下来了
Dialogue: 0,0:14:31.76,0:14:33.56,英文,,0,0,0,,I kept track of how I got to 1.
Dialogue: 0,0:14:31.76,0:14:33.56,中文,,0,0,0,,我记录了我是如何到达1的
Dialogue: 0,0:14:33.56,0:14:35.86,英文,,0,0,0,,And now I can go call DFS on 1.
Dialogue: 0,0:14:33.56,0:14:35.86,中文,,0,0,0,,现在我可以调用dfs(1)了
Dialogue: 0,0:14:35.86,0:14:42.25,英文,,0,0,0,,with a reminder to myself that when I'm done with 1, I got to go back to DFS of 0 and finish up whatever I was doing there.
Dialogue: 0,0:14:35.86,0:14:42.25,中文,,0,0,0,,提醒自己当我完成1时我必须回到dfs(0)并完成那里的工作
Dialogue: 0,0:14:42.25,0:14:43.55,英文,,0,0,0,,So here I am in 1.
Dialogue: 0,0:14:42.25,0:14:43.55,中文,,0,0,0,,我在1这里
Dialogue: 0,0:14:43.55,0:14:45.87,英文,,0,0,0,,I look for all of its unmarked neighbors.
Dialogue: 0,0:14:43.55,0:14:45.87,中文,,0,0,0,,我查找所有未标记的邻居
Dialogue: 0,0:14:45.87,0:14:46.83,英文,,0,0,0,,0, it's marked already.
Dialogue: 0,0:14:45.87,0:14:46.83,中文,,0,0,0,,0它已经标记了
Dialogue: 0,0:14:46.83,0:14:48.23,英文,,0,0,0,,I don't want to go backwards.
Dialogue: 0,0:14:46.83,0:14:48.23,中文,,0,0,0,,我不想倒退
Dialogue: 0,0:14:48.23,0:14:50.91,英文,,0,0,0,,But 4 is not marked, and 2 is not marked.
Dialogue: 0,0:14:48.23,0:14:50.91,中文,,0,0,0,,但是4没有标记2也没有标记
Dialogue: 0,0:14:50.91,0:14:54.66,英文,,0,0,0,,So I'm going to need to mark both of these and call DFS on them.
Dialogue: 0,0:14:50.91,0:14:54.66,中文,,0,0,0,,我需要标记这两个并对它们调用dfs
Dialogue: 0,0:14:54.66,0:14:55.82,英文,,0,0,0,,I will start with 2.
Dialogue: 0,0:14:54.66,0:14:55.82,中文,,0,0,0,,我将从2开始
Dialogue: 0,0:14:55.82,0:14:58.36,英文,,0,0,0,,And later, if I have to, I'll come back and do 4.
Dialogue: 0,0:14:55.82,0:14:58.36,中文,,0,0,0,,如果必要的话稍后我会回来做4
Dialogue: 0,0:14:58.36,0:15:01.48,英文,,0,0,0,,So I will write how I get to 2.
Dialogue: 0,0:14:58.36,0:15:01.48,中文,,0,0,0,,我会写下我是怎么到达2的
Dialogue: 0,0:15:01.48,0:15:02.96,英文,,0,0,0,,Look, how did I get to 2?
Dialogue: 0,0:15:01.48,0:15:02.96,中文,,0,0,0,,看我是怎么到达2的
Dialogue: 0,0:15:02.96,0:15:04.13,英文,,0,0,0,,I got there from 1.
Dialogue: 0,0:15:02.96,0:15:04.13,中文,,0,0,0,,我从1开始了
Dialogue: 0,0:15:04.13,0:15:05.35,英文,,0,0,0,,So I wrote it down.
Dialogue: 0,0:15:04.13,0:15:05.35,中文,,0,0,0,,我把它写下来了
Dialogue: 0,0:15:05.35,0:15:06.95,英文,,0,0,0,,I called DFS on 2.
Dialogue: 0,0:15:05.35,0:15:06.95,中文,,0,0,0,,我对2调用了dfs
Dialogue: 0,0:15:06.95,0:15:12.65,英文,,0,0,0,,I left a reminder to myself that when I'm done with DFS of 2, I've got to go back and finish DFS of 1.
Dialogue: 0,0:15:06.95,0:15:12.65,中文,,0,0,0,,我留了个提醒给自己当我完成了dfs(2)后我得回去完成dfs(1)
Dialogue: 0,0:15:12.65,0:15:15.28,英文,,0,0,0,,So here I am at 2, and the process continues.
Dialogue: 0,0:15:12.65,0:15:15.28,中文,,0,0,0,,我在2这里流程继续
Dialogue: 0,0:15:15.28,0:15:17.46,英文,,0,0,0,,So I look for the unmarked neighbors.
Dialogue: 0,0:15:15.28,0:15:17.46,中文,,0,0,0,,我找未标记的邻居
Dialogue: 0,0:15:17.46,0:15:19.48,英文,,0,0,0,,It's just 5, so I go there.
Dialogue: 0,0:15:17.46,0:15:19.48,中文,,0,0,0,,只有5个所以我去那里了
Dialogue: 0,0:15:19.48,0:15:22.96,英文,,0,0,0,,Reminder to myself, go back and finish DFS of 2 when I'm done.
Dialogue: 0,0:15:19.48,0:15:22.96,中文,,0,0,0,,提醒自己完成dfs(2)后回来
Dialogue: 0,0:15:22.96,0:15:26.24,英文,,0,0,0,,Every time I visit someone new, I write down how I get there.
Dialogue: 0,0:15:22.96,0:15:26.24,中文,,0,0,0,,每次我去看新的人我都会记录我是怎么到那儿的
Dialogue: 0,0:15:26.24,0:15:27.60,英文,,0,0,0,,So here I am at 5.
Dialogue: 0,0:15:26.24,0:15:27.60,中文,,0,0,0,,我现在在5这里
Dialogue: 0,0:15:27.60,0:15:28.92,英文,,0,0,0,,I go to 4.
Dialogue: 0,0:15:27.60,0:15:28.92,中文,,0,0,0,,我去4
Dialogue: 0,0:15:28.92,0:15:30.41,英文,,0,0,0,,I go to 3.
Dialogue: 0,0:15:28.92,0:15:30.41,中文,,0,0,0,,我去3
Dialogue: 0,0:15:30.41,0:15:31.91,英文,,0,0,0,,And it looks like I'm at a dead end.
Dialogue: 0,0:15:30.41,0:15:31.91,中文,,0,0,0,,看起来我到了一个死胡同
Dialogue: 0,0:15:31.91,0:15:33.33,英文,,0,0,0,,There's no more neighbors.
Dialogue: 0,0:15:31.91,0:15:33.33,中文,,0,0,0,,没有更多的邻居了
Dialogue: 0,0:15:33.33,0:15:34.97,英文,,0,0,0,,So 3 is going to return.
Dialogue: 0,0:15:33.33,0:15:34.97,中文,,0,0,0,,所以 3 要返回
Dialogue: 0,0:15:34.97,0:15:40.15,英文,,0,0,0,,But remember, when 3 returns, I still have to call DFS of 4.
Dialogue: 0,0:15:34.97,0:15:40.15,中文,,0,0,0,,但记住当 3 返回时我还得调用 dfs(4)
Dialogue: 0,0:15:40.15,0:15:41.39,英文,,0,0,0,,I didn't finish that.
Dialogue: 0,0:15:40.15,0:15:41.39,中文,,0,0,0,,我没完成那个
Dialogue: 0,0:15:41.39,0:15:43.91,英文,,0,0,0,,So DFS of 4, that's also done.
Dialogue: 0,0:15:41.39,0:15:43.91,中文,,0,0,0,,所以 dfs(4)也完成了
Dialogue: 0,0:15:43.91,0:15:45.98,英文,,0,0,0,,DFS of 5, that's not done yet.
Dialogue: 0,0:15:43.91,0:15:45.98,中文,,0,0,0,,dfs(5)还没完成
Dialogue: 0,0:15:45.98,0:15:48.42,英文,,0,0,0,,So 5, it had to check 4.
Dialogue: 0,0:15:45.98,0:15:48.42,中文,,0,0,0,,所以 5它必须检查 4
Dialogue: 0,0:15:48.42,0:15:53.08,英文,,0,0,0,,And then once it's done checking 4, now it's going to check 6 and 7.
Dialogue: 0,0:15:48.42,0:15:53.08,中文,,0,0,0,,然后一旦它检查完 4现在它要检查 6 和 7
Dialogue: 0,0:15:53.08,0:15:54.62,英文,,0,0,0,,Those are going to return.
Dialogue: 0,0:15:53.08,0:15:54.62,中文,,0,0,0,,它们都要返回
Dialogue: 0,0:15:54.62,0:15:57.78,英文,,0,0,0,,And then 5 still has to check 8, so I check 8.
Dialogue: 0,0:15:54.62,0:15:57.78,中文,,0,0,0,,然后5还得检查8所以我检查8
Dialogue: 0,0:15:57.78,0:15:59.95,英文,,0,0,0,,writing down the edge 2s all along the way.
Dialogue: 0,0:15:57.78,0:15:59.95,中文,,0,0,0,,一路写下边缘的2
Dialogue: 0,0:15:59.95,0:16:00.91,英文,,0,0,0,,Now everything is marked.
Dialogue: 0,0:15:59.95,0:16:00.91,中文,,0,0,0,,现在所有的都标记好了
Dialogue: 0,0:16:00.91,0:16:02.57,英文,,0,0,0,,So I return, return, return.
Dialogue: 0,0:16:00.91,0:16:02.57,中文,,0,0,0,,我返回返回返回
Dialogue: 0,0:16:02.57,0:16:03.71,英文,,0,0,0,,Everyone's done.
Dialogue: 0,0:16:02.57,0:16:03.71,中文,,0,0,0,,大家都完成了
Dialogue: 0,0:16:03.71,0:16:07.17,英文,,0,0,0,,And so that was dev-first paths, speedrun.
Dialogue: 0,0:16:03.71,0:16:07.17,中文,,0,0,0,,那就是开发者优先路径速通
Dialogue: 0,0:16:07.17,0:16:07.91,英文,,0,0,0,,OK.
Dialogue: 0,0:16:07.91,0:16:22.16,英文,,0,0,0,,By the way, one thing that I didn't mention last time, but I actually wrote down for you, is every time I called DFS for the first time, that is, I marked the vertex, I called DFS on it, I actually wrote down the order in which I called DFS.
Dialogue: 0,0:16:07.91,0:16:22.16,中文,,0,0,0,,顺便说一句上次我没提的一件事但我实际上已经为你记下来了就是每次我第一次调用 dfs 时也就是标记顶点时我会调用 dfs并且我实际上记录了调用 dfs 的顺序
Dialogue: 0,0:16:22.16,0:16:26.11,英文,,0,0,0,,I also wrote down the order in which the DFS calls finished.
Dialogue: 0,0:16:22.16,0:16:26.11,中文,,0,0,0,,我还记录了 dfs 调用完成的顺序
Dialogue: 0,0:16:26.11,0:16:31.65,英文,,0,0,0,,So for example, if I go all the way back, look, I called DFS on 0 first.
Dialogue: 0,0:16:26.11,0:16:31.65,中文,,0,0,0,,举个例子如果我一路回溯看我首先在 0 上调用了 dfs
Dialogue: 0,0:16:31.65,0:16:32.95,英文,,0,0,0,,Then I called it on 1.
Dialogue: 0,0:16:31.65,0:16:32.95,中文,,0,0,0,,然后我在 1 上调用了它
Dialogue: 0,0:16:32.95,0:16:34.21,英文,,0,0,0,,Then I called it on 2.
Dialogue: 0,0:16:32.95,0:16:34.21,中文,,0,0,0,,然后我在 2 上调用了它
Dialogue: 0,0:16:34.21,0:16:38.15,英文,,0,0,0,,So I'm writing down the order in which I'm calling DFS up here.
Dialogue: 0,0:16:34.21,0:16:38.15,中文,,0,0,0,,我在这里写下了我调用 dfs 的顺序
Dialogue: 0,0:16:38.15,0:16:40.73,英文,,0,0,0,,And all of these were kind of half done.
Dialogue: 0,0:16:38.15,0:16:40.73,中文,,0,0,0,,这些都是半成品
Dialogue: 0,0:16:40.73,0:16:44.12,英文,,0,0,0,,The first DFS that truly finishes is DFS of 3.
Dialogue: 0,0:16:40.73,0:16:44.12,中文,,0,0,0,,真正完成的第一个dfs是dfs(3)
Dialogue: 0,0:16:44.12,0:16:46.34,英文,,0,0,0,,So when it finishes, I write it down here.
Dialogue: 0,0:16:44.12,0:16:46.34,中文,,0,0,0,,当它完成时我在这里写下来
Dialogue: 0,0:16:46.34,0:16:49.48,英文,,0,0,0,,And now DFS of 4 is totally done.
Dialogue: 0,0:16:46.34,0:16:49.48,中文,,0,0,0,,现在dfs(4)完全完成了
Dialogue: 0,0:16:49.48,0:16:52.68,英文,,0,0,0,,All of its neighbors are marked, and I've called DFS on them.
Dialogue: 0,0:16:49.48,0:16:52.68,中文,,0,0,0,,它的所有邻居都被标记了我已经在它们上调用了dfs
Dialogue: 0,0:16:52.68,0:16:54.35,英文,,0,0,0,,So I can return from 4.
Dialogue: 0,0:16:52.68,0:16:54.35,中文,,0,0,0,,我可以从4返回
Dialogue: 0,0:16:54.35,0:16:55.03,英文,,0,0,0,,Here I am at 5.
Dialogue: 0,0:16:54.35,0:16:55.03,中文,,0,0,0,,我现在在5这里
Dialogue: 0,0:16:55.03,0:16:58.67,英文,,0,0,0,,I have not returned from 5 yet, because there's still more stuff to do.
Dialogue: 0,0:16:55.03,0:16:58.67,中文,,0,0,0,,我还没从 5 回来因为还有更多事情要做
Dialogue: 0,0:16:58.67,0:16:59.19,英文,,0,0,0,,So I go to 6.
Dialogue: 0,0:16:58.67,0:16:59.19,中文,,0,0,0,,我去 6
Dialogue: 0,0:16:59.19,0:16:59.61,英文,,0,0,0,,I go to 7.
Dialogue: 0,0:16:59.19,0:16:59.61,中文,,0,0,0,,我去 7
Dialogue: 0,0:16:59.61,0:17:00.47,英文,,0,0,0,,Now 7 is done.
Dialogue: 0,0:16:59.61,0:17:00.47,中文,,0,0,0,,现在 7 完成了
Dialogue: 0,0:17:00.47,0:17:03.27,英文,,0,0,0,,Now 6 is done.
Dialogue: 0,0:17:00.47,0:17:03.27,中文,,0,0,0,,现在 6 完成了
Dialogue: 0,0:17:03.27,0:17:04.17,英文,,0,0,0,,Here I'm at 5.
Dialogue: 0,0:17:03.27,0:17:04.17,中文,,0,0,0,,我现在在 5
Dialogue: 0,0:17:04.17,0:17:05.21,英文,,0,0,0,,But 5 is not done yet.
Dialogue: 0,0:17:04.17,0:17:05.21,中文,,0,0,0,,但 5 还没完成
Dialogue: 0,0:17:05.21,0:17:06.40,英文,,0,0,0,,There's still more to do.
Dialogue: 0,0:17:05.21,0:17:06.40,中文,,0,0,0,,还有更多的事情要做
Dialogue: 0,0:17:06.40,0:17:07.52,英文,,0,0,0,,So I go to 8.
Dialogue: 0,0:17:06.40,0:17:07.52,中文,,0,0,0,,我去到了8
Dialogue: 0,0:17:07.52,0:17:09.06,英文,,0,0,0,,And only now is 5 done.
Dialogue: 0,0:17:07.52,0:17:09.06,中文,,0,0,0,,而且现在才完成了5
Dialogue: 0,0:17:09.06,0:17:10.34,英文,,0,0,0,,And then 2 is done.
Dialogue: 0,0:17:09.06,0:17:10.34,中文,,0,0,0,,然后2就完成了
Dialogue: 0,0:17:10.34,0:17:14.58,英文,,0,0,0,,So I wrote down the order in which DFS finished, which is kind of cool.
Dialogue: 0,0:17:10.34,0:17:14.58,中文,,0,0,0,,我把dfs完成的顺序写了下来这有点酷
Dialogue: 0,0:17:14.58,0:17:20.30,英文,,0,0,0,,So I guess this would be a good time to finish this last little section that I forgot to do last time.
Dialogue: 0,0:17:14.58,0:17:20.30,中文,,0,0,0,,我想现在是结束上次忘记做的最后一个小节的好时机
Dialogue: 0,0:17:20.30,0:17:22.16,英文,,0,0,0,,So do you remember last time?
Dialogue: 0,0:17:20.30,0:17:22.16,中文,,0,0,0,,你还记得上次吗
Dialogue: 0,0:17:22.16,0:17:23.36,英文,,0,0,0,,Sorry for the digression.
Dialogue: 0,0:17:22.16,0:17:23.36,中文,,0,0,0,,抱歉偏题了
Dialogue: 0,0:17:23.36,0:17:26.01,英文,,0,0,0,,But do you remember last time we talked about tree traversals?
Dialogue: 0,0:17:23.36,0:17:26.01,中文,,0,0,0,,但你还记得上次我们谈过树的遍历吗
Dialogue: 0,0:17:26.01,0:17:30.39,英文,,0,0,0,,And we said there are many different ways to iterate through the nodes of a tree.
Dialogue: 0,0:17:26.01,0:17:30.39,中文,,0,0,0,,我们说过遍历树节点有许多不同的方式
Dialogue: 0,0:17:30.39,0:17:34.59,英文,,0,0,0,,Well, it turns out there are also many ways to iterate through a graph.
Dialogue: 0,0:17:30.39,0:17:34.59,中文,,0,0,0,,事实证明遍历图的方式也有很多种
Dialogue: 0,0:17:34.59,0:17:44.26,英文,,0,0,0,,And in fact, those orders that we just saw, those were ways in which we could naturally order an iteration through all the vertices.
Dialogue: 0,0:17:34.59,0:17:44.26,中文,,0,0,0,,实际上刚才看到的那些顺序那些都是我们可以自然地对所有顶点进行迭代的方式
Dialogue: 0,0:17:44.26,0:17:52.27,英文,,0,0,0,,So one possible way to order a iteration through all the graph's vertices is called DFS preorder.
Dialogue: 0,0:17:44.26,0:17:52.27,中文,,0,0,0,,对图的所有顶点进行迭代的一种可能方式称为dfs前序遍历
Dialogue: 0,0:17:52.27,0:17:53.63,英文,,0,0,0,,Why is it called preorder?
Dialogue: 0,0:17:52.27,0:17:53.63,中文,,0,0,0,,为什么叫前序遍历呢
Dialogue: 0,0:17:53.63,0:17:55.69,英文,,0,0,0,,Because you did the thing.
Dialogue: 0,0:17:53.63,0:17:55.69,中文,,0,0,0,,因为你做了那件事
Dialogue: 0,0:17:55.69,0:18:00.03,英文,,0,0,0,,whatever action you care about before calling DFS on its neighbors.
Dialogue: 0,0:17:55.69,0:18:00.03,中文,,0,0,0,,在调用它的邻居的dfs之前你关心的任何操作
Dialogue: 0,0:18:00.03,0:18:02.79,英文,,0,0,0,,So if you go back and look at the code, what do we do?
Dialogue: 0,0:18:00.03,0:18:02.79,中文,,0,0,0,,如果你回过头看代码我们做了什么
Dialogue: 0,0:18:02.79,0:18:06.54,英文,,0,0,0,,We first set the edge to, and then we call DFS.
Dialogue: 0,0:18:02.79,0:18:06.54,中文,,0,0,0,,我们首先将边设置为然后调用dfs
Dialogue: 0,0:18:06.54,0:18:10.48,英文,,0,0,0,,So this was a DFS pre-order traversal.
Dialogue: 0,0:18:06.54,0:18:10.48,中文,,0,0,0,,这是dfs的先序遍历
Dialogue: 0,0:18:10.48,0:18:16.12,英文,,0,0,0,,So we did a thing, which was a marked edge to, and then we called DFS on all of its neighbors.
Dialogue: 0,0:18:10.48,0:18:16.12,中文,,0,0,0,,我们做了一件事就是标记了边然后调用了它所有的邻居的dfs
Dialogue: 0,0:18:16.12,0:18:18.20,英文,,0,0,0,,And that gave us this order.
Dialogue: 0,0:18:16.12,0:18:18.20,中文,,0,0,0,,这样就给了我们这个顺序
Dialogue: 0,0:18:18.20,0:18:21.48,英文,,0,0,0,,So that's one particular order in which you could traverse this graph.
Dialogue: 0,0:18:18.20,0:18:21.48,中文,,0,0,0,,这是你可以遍历这个图的一个特定顺序
Dialogue: 0,0:18:21.48,0:18:24.34,英文,,0,0,0,,This is the order in which we call DFS.
Dialogue: 0,0:18:21.48,0:18:24.34,中文,,0,0,0,,这是我们调用 dfs 的顺序
Dialogue: 0,0:18:24.34,0:18:30.68,英文,,0,0,0,,And if we are doing something before calling DFS, then this is the order in which the nodes get visited.
Dialogue: 0,0:18:24.34,0:18:30.68,中文,,0,0,0,,如果我们在调用 dfs 之前做了一些事情那么节点被访问的顺序就是这样的
Dialogue: 0,0:18:30.68,0:18:34.08,英文,,0,0,0,,But there are other orders, like DFS post-order.
Dialogue: 0,0:18:30.68,0:18:34.08,中文,,0,0,0,,但是还有其他顺序比如 dfs 后序遍历
Dialogue: 0,0:18:34.08,0:18:37.61,英文,,0,0,0,,This is the order in which the DFS calls return.
Dialogue: 0,0:18:34.08,0:18:37.61,中文,,0,0,0,,这是 dfs 调用返回的顺序
Dialogue: 0,0:18:37.61,0:18:39.81,英文,,0,0,0,,So that's the second order we saw from earlier.
Dialogue: 0,0:18:37.61,0:18:39.81,中文,,0,0,0,,这是我们之前看到的第二个顺序
Dialogue: 0,0:18:39.81,0:18:46.91,英文,,0,0,0,,And this would be the order in which, for example, 3 was the one that finished first, and then 4 finished, and then 7 finished next.
Dialogue: 0,0:18:39.81,0:18:46.91,中文,,0,0,0,,例如3 先完成然后 4 完成然后 7 完成这将是顺序
Dialogue: 0,0:18:46.91,0:18:58.21,英文,,0,0,0,,So if you were to do something after calling each DFS call, so for example, maybe you did something like this, where you decide, I want to print every single node after visiting it.
Dialogue: 0,0:18:46.91,0:18:58.21,中文,,0,0,0,,如果你在每次调用dfs后要做点什么比如也许你做了这样的事情你决定我想在访问每个节点后打印它
Dialogue: 0,0:18:58.21,0:19:02.13,英文,,0,0,0,,And after calling DFS on all of its neighbors, this would be the POST order.
Dialogue: 0,0:18:58.21,0:19:02.13,中文,,0,0,0,,在调用所有邻居的dfs之后这将是后序顺序
Dialogue: 0,0:19:02.13,0:19:05.62,英文,,0,0,0,,And the result would be this order that we saw from earlier.
Dialogue: 0,0:19:02.13,0:19:05.62,中文,,0,0,0,,结果将是我们之前看到的顺序
Dialogue: 0,0:19:05.62,0:19:12.76,英文,,0,0,0,,So all of this is to say, remember, in-order, post-order, from trees, there's something pretty similar for graphs.
Dialogue: 0,0:19:05.62,0:19:12.76,中文,,0,0,0,,所有这些都是为了说记住对于树的中序、后序对于图形也有类似的东西
Dialogue: 0,0:19:12.76,0:19:23.17,英文,,0,0,0,,And again, it just depends on, do you perform the action before calling DFS on the neighbors, or do you perform the action after calling DFS on its neighbors?
Dialogue: 0,0:19:12.76,0:19:23.17,中文,,0,0,0,,而且这取决于在调用邻居的dfs之前执行动作还是在调用邻居的dfs之后执行动作
Dialogue: 0,0:19:23.17,0:19:29.27,英文,,0,0,0,,And if you perform things before calling DFS on its neighbors, you get this, the order in which DFS is called.
Dialogue: 0,0:19:23.17,0:19:29.27,中文,,0,0,0,,如果你在调用邻居的dfs之前执行操作你会得到这个dfs被调用的顺序
Dialogue: 0,0:19:29.27,0:19:37.72,英文,,0,0,0,,If you perform things after the DFS call to all of its neighbors, you get this order, which is equivalent to the order in which the DFS calls return.
Dialogue: 0,0:19:29.27,0:19:37.72,中文,,0,0,0,,如果你在调用所有邻居的dfs后执行操作你会得到这个顺序这等同于dfs调用返回的顺序
Dialogue: 0,0:19:37.72,0:19:43.06,英文,,0,0,0,,So this is the graph version of tree traversals.
Dialogue: 0,0:19:37.72,0:19:43.06,中文,,0,0,0,,这是树遍历的图形版本
Dialogue: 0,0:19:43.06,0:19:43.50,英文,,0,0,0,,OK.
Dialogue: 0,0:19:43.50,0:19:46.85,英文,,0,0,0,,And this order, we will see it today, so I won't talk about it yet.
Dialogue: 0,0:19:43.50,0:19:46.85,中文,,0,0,0,,今天我们会讲解这个顺序所以我暂时不会谈论它
Dialogue: 0,0:19:46.85,0:19:48.17,英文,,0,0,0,,But stay tuned.
Dialogue: 0,0:19:46.85,0:19:48.17,中文,,0,0,0,,但请保持关注
Dialogue: 0,0:19:48.17,0:19:49.24,英文,,0,0,0,,OK.
Dialogue: 0,0:19:49.24,0:19:50.34,英文,,0,0,0,,Traversals, OK.
Dialogue: 0,0:19:49.24,0:19:50.34,中文,,0,0,0,,遍历好的
Dialogue: 0,0:19:50.34,0:19:53.20,英文,,0,0,0,,All right, see, I finished the thing from last night.
Dialogue: 0,0:19:50.34,0:19:53.20,中文,,0,0,0,,好了看我完成了昨晚的事情
Dialogue: 0,0:19:53.20,0:19:55.26,英文,,0,0,0,,OK, great.
Dialogue: 0,0:19:53.20,0:19:55.26,中文,,0,0,0,,好的太棒了
Dialogue: 0,0:19:55.26,0:19:58.69,英文,,0,0,0,,So again, here is DFS, but in code.
Dialogue: 0,0:19:55.26,0:19:58.69,中文,,0,0,0,,这里再次是 dfs但是用代码表示
Dialogue: 0,0:19:58.69,0:20:03.33,英文,,0,0,0,,I will not talk about it in gory detail, but you can read it if you would like.
Dialogue: 0,0:19:58.69,0:20:03.33,中文,,0,0,0,,我不会详细讲解它但如果你愿意的话你可以阅读它
Dialogue: 0,0:20:03.33,0:20:12.79,英文,,0,0,0,,But the key idea is, if you look at how we implemented this, we only used the graph methods that the graph implementers over at Princeton gave to us.
Dialogue: 0,0:20:03.33,0:20:12.79,中文,,0,0,0,,但是关键的想法是如果你看一下我们是如何实现这个的我们只使用了普林斯顿大学图形实现者提供给我们的图形方法
Dialogue: 0,0:20:12.79,0:20:17.62,英文,,0,0,0,,They told us you can call .adjacent, and that's kind of about it.
Dialogue: 0,0:20:12.79,0:20:17.62,中文,,0,0,0,,他们告诉我们你可以调用 .adjacent 方法大概就是这样
Dialogue: 0,0:20:17.62,0:20:23.18,英文,,0,0,0,,So that's the only thing we use to interact with the graph, is we call the adjacent method.
Dialogue: 0,0:20:17.62,0:20:23.18,中文,,0,0,0,,这是我们与图形互动的唯一方式我们调用相邻方法
Dialogue: 0,0:20:23.18,0:20:28.58,英文,,0,0,0,,Everything else we had to implement ourselves, as the depth-first paths put itself up.
Dialogue: 0,0:20:23.18,0:20:28.58,中文,,0,0,0,,其他一切都是我们自己实现的就像深度优先路径自己提起自己一样
Dialogue: 0,0:20:28.58,0:20:29.50,英文,,0,0,0,,OK.
Dialogue: 0,0:20:29.50,0:20:32.83,英文,,0,0,0,,Great, so that's one possible way you can implement DFS.
Dialogue: 0,0:20:29.50,0:20:32.83,中文,,0,0,0,,很棒这是一种可能的深度优先搜索的实现方式
Dialogue: 0,0:20:32.83,0:20:43.66,英文,,0,0,0,,You mark the vertex, you go through all the adjacent vertices, you write down how to get to those adjacent vertices using the edge2 array, and then you call DFS on all of the neighbors.
Dialogue: 0,0:20:32.83,0:20:43.66,中文,,0,0,0,,你标记顶点遍历所有相邻的顶点使用边缘2数组记录如何到达这些相邻的顶点然后对所有邻居调用dfs
Dialogue: 0,0:20:43.66,0:20:45.95,英文,,0,0,0,,Okay, great.
Dialogue: 0,0:20:43.66,0:20:45.95,中文,,0,0,0,,好的太棒了
Dialogue: 0,0:20:45.95,0:20:51.23,英文,,0,0,0,,Again, I will not read this in detail, but this is how you might write path to or has path to.
Dialogue: 0,0:20:45.95,0:20:51.23,中文,,0,0,0,,再次强调我不会详细阅读这个但这是你可能编写路径到达或路径存在的方式
Dialogue: 0,0:20:51.23,0:20:53.74,英文,,0,0,0,,So how do you check if there's a path to a vertex?
Dialogue: 0,0:20:51.23,0:20:53.74,中文,,0,0,0,,那么如何检查是否有路径到达一个顶点呢
Dialogue: 0,0:20:53.74,0:20:55.24,英文,,0,0,0,,You can check if it's marked.
Dialogue: 0,0:20:53.74,0:20:55.24,中文,,0,0,0,,你可以检查它是否被标记
Dialogue: 0,0:20:55.24,0:20:58.44,英文,,0,0,0,,If it's marked, it means we found a path to that vertex.
Dialogue: 0,0:20:55.24,0:20:58.44,中文,,0,0,0,,如果它被标记了那意味着我们找到了通往那个顶点的路径
Dialogue: 0,0:20:58.44,0:21:01.06,英文,,0,0,0,,And how would you actually find the path to the vertex?
Dialogue: 0,0:20:58.44,0:21:01.06,中文,,0,0,0,,那你实际上怎么找到通往这个顶点的路径呢
Dialogue: 0,0:21:01.06,0:21:02.70,英文,,0,0,0,,You might write some code like this.
Dialogue: 0,0:21:01.06,0:21:02.70,中文,,0,0,0,,你可能会写一些像这样的代码
Dialogue: 0,0:21:02.70,0:21:05.71,英文,,0,0,0,,I will not talk about it, but it's something we kind of saw last time.
Dialogue: 0,0:21:02.70,0:21:05.71,中文,,0,0,0,,我不会详细讲但这是我们上次有点看到的东西
Dialogue: 0,0:21:05.71,0:21:06.93,英文,,0,0,0,,So remember, like,
Dialogue: 0,0:21:05.71,0:21:07.93,中文,,0,0,0,,记住你怎么到达8呢
Dialogue: 0,0:21:06.93,0:21:07.93,英文,,0,0,0,,How do you get to 8?
Dialogue: 0,0:21:07.93,0:21:08.89,英文,,0,0,0,,You get there from 5.
Dialogue: 0,0:21:07.93,0:21:08.89,中文,,0,0,0,,你是从5到那里的
Dialogue: 0,0:21:08.89,0:21:09.93,英文,,0,0,0,,And how do you get to 5?
Dialogue: 0,0:21:08.89,0:21:09.93,中文,,0,0,0,,你怎么到达 5
Dialogue: 0,0:21:09.93,0:21:11.23,英文,,0,0,0,,You get there from 2.
Dialogue: 0,0:21:09.93,0:21:11.23,中文,,0,0,0,,你从 2 到达那里
Dialogue: 0,0:21:11.23,0:21:11.85,英文,,0,0,0,,How do you get to 2?
Dialogue: 0,0:21:11.23,0:21:11.85,中文,,0,0,0,,怎么到达 2
Dialogue: 0,0:21:11.85,0:21:12.57,英文,,0,0,0,,You get there from 1.
Dialogue: 0,0:21:11.85,0:21:12.57,中文,,0,0,0,,你从 1 到达那里
Dialogue: 0,0:21:12.57,0:21:13.78,英文,,0,0,0,,And how do you get to 1?
Dialogue: 0,0:21:12.57,0:21:13.78,中文,,0,0,0,,你怎么到达 1
Dialogue: 0,0:21:13.78,0:21:15.18,英文,,0,0,0,,You get there from the source.
Dialogue: 0,0:21:13.78,0:21:15.18,中文,,0,0,0,,你从源头到达那里
Dialogue: 0,0:21:15.18,0:21:22.13,英文,,0,0,0,,So something like that in code would look like this, though I will not read it out loud.
Dialogue: 0,0:21:15.18,0:21:22.13,中文,,0,0,0,,在代码中类似的东西会是这样的尽管我不会大声读出来
Dialogue: 0,0:21:22.13,0:21:25.55,英文,,0,0,0,,OK, so maybe that's how you implement depth-first paths.
Dialogue: 0,0:21:22.13,0:21:25.55,中文,,0,0,0,,好吧也许这就是你实现深度优先路径的方法
Dialogue: 0,0:21:25.55,0:21:30.96,英文,,0,0,0,,And again, we wrote it as a separate class represented by this little bodhisattva in the corner.
Dialogue: 0,0:21:25.55,0:21:30.96,中文,,0,0,0,,而且我们将其写成一个单独的类由这个角落里的小菩萨表示
Dialogue: 0,0:21:30.96,0:21:34.92,英文,,0,0,0,,But you could also write this as part of your graph class if you so choose.
Dialogue: 0,0:21:30.96,0:21:34.92,中文,,0,0,0,,但如果你愿意的话你也可以将其写成图类的一部分
Dialogue: 0,0:21:34.92,0:21:39.64,英文,,0,0,0,,So maybe your graph class provides a service to the users, which is depth-first search.
Dialogue: 0,0:21:34.92,0:21:39.64,中文,,0,0,0,,也许你的图类为用户提供了一个服务即深度优先搜索
Dialogue: 0,0:21:39.64,0:21:41.21,英文,,0,0,0,,But that's up to you.
Dialogue: 0,0:21:39.64,0:21:41.21,中文,,0,0,0,,但这取决于你
Dialogue: 0,0:21:41.21,0:21:45.37,英文,,0,0,0,,OK, at long last, we talked about the services a graph can provide.
Dialogue: 0,0:21:41.21,0:21:45.37,中文,,0,0,0,,好了最后我们谈论了图可以提供的服务
Dialogue: 0,0:21:45.37,0:21:55.26,英文,,0,0,0,,We took a little detour and reminded ourselves of what depth-first paths is and how that might look in code, depending on what services we give to our users.
Dialogue: 0,0:21:45.37,0:21:55.26,中文,,0,0,0,,我们稍微绕了一下路提醒自己深度优先路径是什么以及根据我们向用户提供的服务代码可能是什么样子的
Dialogue: 0,0:21:55.26,0:21:59.69,英文,,0,0,0,,Now we can finally answer the question that we were all curious about.
Dialogue: 0,0:21:55.26,0:21:59.69,中文,,0,0,0,,现在我们终于可以回答我们都很好奇的问题了
Dialogue: 0,0:21:59.69,0:22:05.91,英文,,0,0,0,,I guess maybe you weren't, but I was curious about, which is, how do you actually represent the graph in memory?
Dialogue: 0,0:21:59.69,0:22:05.91,中文,,0,0,0,,我猜也许你不是但我是很好奇那就是你到底如何在内存中表示图
Dialogue: 0,0:22:05.91,0:22:09.04,英文,,0,0,0,,What data structure do you use to represent the graph?
Dialogue: 0,0:22:05.91,0:22:09.04,中文,,0,0,0,,你使用什么数据结构来表示图
Dialogue: 0,0:22:09.04,0:22:14.44,英文,,0,0,0,,Like, I was drawing these little pictures on the slide, but how do you write data structures?
Dialogue: 0,0:22:09.04,0:22:14.44,中文,,0,0,0,,就像我在幻灯片上画了这些小图但是你如何编写数据结构呢
Dialogue: 0,0:22:14.44,0:22:15.84,英文,,0,0,0,,Like, do you use a list?
Dialogue: 0,0:22:14.44,0:22:15.84,中文,,0,0,0,,比如你使用列表吗
Dialogue: 0,0:22:15.84,0:22:17.58,英文,,0,0,0,,Do you use an array?
Dialogue: 0,0:22:15.84,0:22:17.58,中文,,0,0,0,,你使用数组吗
Dialogue: 0,0:22:17.58,0:22:18.86,英文,,0,0,0,,Do you use something else?
Dialogue: 0,0:22:17.58,0:22:18.86,中文,,0,0,0,,你使用其他什么东西吗
Dialogue: 0,0:22:18.86,0:22:20.56,英文,,0,0,0,,How do you represent the graph?
Dialogue: 0,0:22:18.86,0:22:20.56,中文,,0,0,0,,你怎么表示这个图
Dialogue: 0,0:22:20.56,0:22:27.17,英文,,0,0,0,,And our decisions are going to affect how fast it is to perform operations on this graph.
Dialogue: 0,0:22:20.56,0:22:27.17,中文,,0,0,0,,而我们的决策将会影响操作这个图有多快
Dialogue: 0,0:22:27.17,0:22:34.67,英文,,0,0,0,,So do you remember with trees, there were all these different representations, and they all represented the same picture.
Dialogue: 0,0:22:27.17,0:22:34.67,中文,,0,0,0,,你还记得树的时候有各种不同的表示方法它们都代表着同样的图
Dialogue: 0,0:22:34.67,0:22:40.19,英文,,0,0,0,,So here's my little picture of a tree, and I could represent the tree using links that are recursive.
Dialogue: 0,0:22:34.67,0:22:40.19,中文,,0,0,0,,这是我画的一个小树的图我可以用递归链接来表示这棵树
Dialogue: 0,0:22:40.19,0:22:45.03,英文,,0,0,0,,I could use that array that we saw from, I don't know, two or three lectures ago.
Dialogue: 0,0:22:40.19,0:22:45.03,中文,,0,0,0,,我可以使用我们之前见过的数组大概是两三节课之前吧
Dialogue: 0,0:22:45.03,0:22:46.57,英文,,0,0,0,,So we could do this instead.
Dialogue: 0,0:22:45.03,0:22:46.57,中文,,0,0,0,,我们可以用这种方式来做
Dialogue: 0,0:22:46.57,0:22:49.99,英文,,0,0,0,,And so there were all sorts of different ways to represent the same tree.
Dialogue: 0,0:22:46.57,0:22:49.99,中文,,0,0,0,,有很多不同的方法来表示同一棵树
Dialogue: 0,0:22:49.99,0:22:53.47,英文,,0,0,0,,Well, let's take the same idea and apply it to graphs.
Dialogue: 0,0:22:49.99,0:22:53.47,中文,,0,0,0,,让我们采用同样的思路来应用到图形上
Dialogue: 0,0:22:53.47,0:23:03.73,英文,,0,0,0,,So just like how there were all these different fancy ways to represent trees in memory, there are all sorts of different data structures you can choose to represent graphs for the user.
Dialogue: 0,0:22:53.47,0:23:03.73,中文,,0,0,0,,就像我们之前用各种花哨的方式来表示内存中的树一样我们也有各种不同的数据结构可供用户选择来表示图形
Dialogue: 0,0:23:03.73,0:23:05.81,英文,,0,0,0,,The user wants to see this picture.
Dialogue: 0,0:23:03.73,0:23:05.81,中文,,0,0,0,,用户想要看到这个图片
Dialogue: 0,0:23:05.81,0:23:07.85,英文,,0,0,0,,How do we as the monks make it happen?
Dialogue: 0,0:23:05.81,0:23:07.85,中文,,0,0,0,,那么我们作为程序员怎样实现呢
Dialogue: 0,0:23:07.85,0:23:09.83,英文,,0,0,0,,We have lots of different choices.
Dialogue: 0,0:23:07.85,0:23:09.83,中文,,0,0,0,,我们有很多不同的选择
Dialogue: 0,0:23:09.83,0:23:12.04,英文,,0,0,0,,So I will show you two.
Dialogue: 0,0:23:09.83,0:23:12.04,中文,,0,0,0,,我会向你展示两种
Dialogue: 0,0:23:12.04,0:23:15.02,英文,,0,0,0,,Okay, and you can invent others if you like.
Dialogue: 0,0:23:12.04,0:23:15.02,中文,,0,0,0,,如果你喜欢你也可以创造其他的
Dialogue: 0,0:23:15.02,0:23:20.89,英文,,0,0,0,,So the first one I'm going to propose is called the adjacency matrix.
Dialogue: 0,0:23:15.02,0:23:20.89,中文,,0,0,0,,首先我要提出的是邻接矩阵
Dialogue: 0,0:23:20.89,0:23:23.07,英文,,0,0,0,,So this one is actually pretty simple.
Dialogue: 0,0:23:20.89,0:23:23.07,中文,,0,0,0,,这个方法其实挺简单的
Dialogue: 0,0:23:23.07,0:23:34.52,英文,,0,0,0,,I'm going to create a 2D table, two-dimensional table, and In the table, I'm going to write down whether an edge exists between the two vertices or whether it does not.
Dialogue: 0,0:23:23.07,0:23:34.52,中文,,0,0,0,,我会创建一个二维表 在表中我会记录两个顶点之间是否存在边或者不存在
Dialogue: 0,0:23:34.52,0:23:39.31,英文,,0,0,0,,So for example, is there a edge between 0 and 3?
Dialogue: 0,0:23:34.52,0:23:39.31,中文,,0,0,0,,比如0和3之间有边吗
Dialogue: 0,0:23:39.31,0:23:41.03,英文,,0,0,0,,I look at the picture, no.
Dialogue: 0,0:23:39.31,0:23:41.03,中文,,0,0,0,,我看了一下图片没有
Dialogue: 0,0:23:41.03,0:23:50.17,英文,,0,0,0,,So my adjacency matrix, what is this, row 0, column 3, I write a 0 to indicate there is no edge between those two vertices.
Dialogue: 0,0:23:41.03,0:23:50.17,中文,,0,0,0,,我的邻接矩阵第0行第3列我写一个0来表示这两个顶点之间没有边
Dialogue: 0,0:23:50.17,0:23:57.66,英文,,0,0,0,,And likewise, row 3, column 0 is a 0 to represent that there is no edge between those two vertices.
Dialogue: 0,0:23:50.17,0:23:57.66,中文,,0,0,0,,同样地第3行第0列是0表示这两个顶点之间没有边
Dialogue: 0,0:23:57.66,0:23:59.26,英文,,0,0,0,,But look at 1 and 2.
Dialogue: 0,0:23:57.66,0:23:59.26,中文,,0,0,0,,但看看1和2
Dialogue: 0,0:23:59.26,0:24:00.90,英文,,0,0,0,,There is an edge between them.
Dialogue: 0,0:23:59.26,0:24:00.90,中文,,0,0,0,,它们之间有一条边
Dialogue: 0,0:24:00.90,0:24:03.20,英文,,0,0,0,,So I go to row 1, column 2.
Dialogue: 0,0:24:00.90,0:24:03.20,中文,,0,0,0,,我去第1行第2列
Dialogue: 0,0:24:03.20,0:24:09.22,英文,,0,0,0,,I write a 1 to represent the fact that there is a edge between those two.
Dialogue: 0,0:24:03.20,0:24:09.22,中文,,0,0,0,,我写下1表示这两个之间有一条边
Dialogue: 0,0:24:09.22,0:24:15.41,英文,,0,0,0,,And likewise, because this is an undirected graph, then I will also say there's an edge from 2 to 1.
Dialogue: 0,0:24:09.22,0:24:15.41,中文,,0,0,0,,同样地因为这是一个无向图我也会说从2到1有一条边
Dialogue: 0,0:24:15.41,0:24:17.67,英文,,0,0,0,,So I'll go row 2, column 1.
Dialogue: 0,0:24:15.41,0:24:17.67,中文,,0,0,0,,我去第2行第1列
Dialogue: 0,0:24:17.67,0:24:19.05,英文,,0,0,0,,I'll mark it as 1.
Dialogue: 0,0:24:17.67,0:24:19.05,中文,,0,0,0,,我会标记它为1
Dialogue: 0,0:24:19.05,0:24:25.86,英文,,0,0,0,,So if it's undirected, I would have to put two 1's, one representing the 1 to 2 edge, another one representing the 2 to 1 edge.
Dialogue: 0,0:24:19.05,0:24:25.86,中文,,0,0,0,,如果它是无向的我就得放两个1一个代表1到2的边另一个代表2到1的边
Dialogue: 0,0:24:25.86,0:24:26.70,英文,,0,0,0,,That's my decision.
Dialogue: 0,0:24:25.86,0:24:26.70,中文,,0,0,0,,那是我的决定
Dialogue: 0,0:24:26.70,0:24:32.10,英文,,0,0,0,,Again, if you want to invent something else, go nuts, but that's what I chose to do.
Dialogue: 0,0:24:26.70,0:24:32.10,中文,,0,0,0,,再说一遍如果你想发明其他东西随你去但我选择这样做
Dialogue: 0,0:24:32.10,0:24:35.86,英文,,0,0,0,,If the graph is directed, then maybe you don't have the symmetry.
Dialogue: 0,0:24:32.10,0:24:35.86,中文,,0,0,0,,如果图是有向的那么也许你就没有对称性了
Dialogue: 0,0:24:35.86,0:24:38.96,英文,,0,0,0,,So instead here, there is an edge between 0 and 1.
Dialogue: 0,0:24:35.86,0:24:38.96,中文,,0,0,0,,这里0和1之间有一条边
Dialogue: 0,0:24:38.96,0:24:41.46,英文,,0,0,0,,So I go to row 0, column 1.
Dialogue: 0,0:24:38.96,0:24:41.46,中文,,0,0,0,,我去第0行第1列
Dialogue: 0,0:24:41.46,0:24:45.18,英文,,0,0,0,,I write down the 1 to represent an edge between 0 and 1.
Dialogue: 0,0:24:41.46,0:24:45.18,中文,,0,0,0,,我用1来表示0到1之间的一条边
Dialogue: 0,0:24:45.18,0:24:49.10,英文,,0,0,0,,But because this graph is directed, there is no edge from 1 to 0.
Dialogue: 0,0:24:45.18,0:24:49.10,中文,,0,0,0,,但是因为这个图是有向的所以从1到0没有边
Dialogue: 0,0:24:49.10,0:24:53.12,英文,,0,0,0,,So I go to row 1, column 0. It's a 0.
Dialogue: 0,0:24:49.10,0:24:53.12,中文,,0,0,0,,我去第1行第0列 是0
Dialogue: 0,0:24:53.12,0:24:55.78,英文,,0,0,0,,It represents no edge between 1 and 0.
Dialogue: 0,0:24:53.12,0:24:55.78,中文,,0,0,0,,它表示1到0之间没有边
Dialogue: 0,0:24:55.78,0:25:00.39,英文,,0,0,0,,So in this case, the matrix is not symmetric.
Dialogue: 0,0:24:55.78,0:25:00.39,中文,,0,0,0,,在这种情况下矩阵不对称
Dialogue: 0,0:25:00.39,0:25:01.86,英文,,0,0,0,,How you implement it is up to you.
Dialogue: 0,0:25:00.39,0:25:01.86,中文,,0,0,0,,你如何实现它由你决定
Dialogue: 0,0:25:01.86,0:25:03.34,英文,,0,0,0,,It's just some 2D array.
Dialogue: 0,0:25:01.86,0:25:03.34,中文,,0,0,0,,这只是一些二维数组
Dialogue: 0,0:25:03.34,0:25:08.66,英文,,0,0,0,,And in the array, you write down zeros when there's no edge, and you write down ones when there's an edge.
Dialogue: 0,0:25:03.34,0:25:08.66,中文,,0,0,0,,在数组中当没有边缘时你写下零当有边缘时你写下1
Dialogue: 0,0:25:08.66,0:25:10.15,英文,,0,0,0,,That's it.
Dialogue: 0,0:25:08.66,0:25:10.15,中文,,0,0,0,,就是这样
Dialogue: 0,0:25:10.15,0:25:12.05,英文,,0,0,0,,Relatively simple.
Dialogue: 0,0:25:10.15,0:25:12.05,中文,,0,0,0,,相对简单
Dialogue: 0,0:25:12.05,0:25:12.93,英文,,0,0,0,,OK.
Dialogue: 0,0:25:12.93,0:25:16.81,英文,,0,0,0,,So that's one possible decision you could make, one where you could represent a graph.
Dialogue: 0,0:25:12.93,0:25:16.81,中文,,0,0,0,,这是你可能做出的一个可能的决定一个你可以代表一个图形的地方
Dialogue: 0,0:25:16.81,0:25:21.17,英文,,0,0,0,,Because you can't draw this picture in memory, but you could build this 2D array.
Dialogue: 0,0:25:16.81,0:25:21.17,中文,,0,0,0,,因为你不能在内存中画出这张图片但你可以构建这个二维数组
Dialogue: 0,0:25:21.17,0:25:23.27,英文,,0,0,0,,OK, there's a second representation.
Dialogue: 0,0:25:21.17,0:25:23.27,中文,,0,0,0,,这是第二种表示
Dialogue: 0,0:25:23.27,0:25:27.15,英文,,0,0,0,,I have never seen anyone use this, so I'm just not going to talk about it.
Dialogue: 0,0:25:23.27,0:25:27.15,中文,,0,0,0,,我从来没有见过有人使用这个所以我就不谈论它了
Dialogue: 0,0:25:27.15,0:25:30.67,英文,,0,0,0,,But if you're curious, you could represent a set of edges.
Dialogue: 0,0:25:27.15,0:25:30.67,中文,,0,0,0,,但如果你感兴趣你可以表示一组边
Dialogue: 0,0:25:30.67,0:25:32.70,英文,,0,0,0,,But again, I've never seen anyone do it.
Dialogue: 0,0:25:30.67,0:25:32.70,中文,,0,0,0,,但是再次强调我从来没有见过有人这样做
Dialogue: 0,0:25:32.70,0:25:34.98,英文,,0,0,0,,So enough said about you.
Dialogue: 0,0:25:32.70,0:25:34.98,中文,,0,0,0,,你懂的话不多说
Dialogue: 0,0:25:34.98,0:25:36.63,英文,,0,0,0,,OK, next.
Dialogue: 0,0:25:34.98,0:25:36.63,中文,,0,0,0,,接下来
Dialogue: 0,0:25:36.63,0:25:38.43,英文,,0,0,0,,OK, here's another representation.
Dialogue: 0,0:25:36.63,0:25:38.43,中文,,0,0,0,,这是另一种表示
Dialogue: 0,0:25:38.43,0:25:39.85,英文,,0,0,0,,This one is very common.
Dialogue: 0,0:25:38.43,0:25:39.85,中文,,0,0,0,,这个非常常见
Dialogue: 0,0:25:39.85,0:25:41.04,英文,,0,0,0,,It's very popular.
Dialogue: 0,0:25:39.85,0:25:41.04,中文,,0,0,0,,它非常流行
Dialogue: 0,0:25:41.04,0:25:42.16,英文,,0,0,0,,I recommend it.
Dialogue: 0,0:25:41.04,0:25:42.16,中文,,0,0,0,,我推荐它
Dialogue: 0,0:25:42.16,0:25:50.08,英文,,0,0,0,,So I guess I will start by saying, why might this adjacency of matrix representation be not super useful?
Dialogue: 0,0:25:42.16,0:25:50.08,中文,,0,0,0,,那么我猜我会从这样说起为什么邻接矩阵表示法可能不是特别有用呢
Dialogue: 0,0:25:50.08,0:25:54.70,英文,,0,0,0,,Well, imagine you have a gigantic graph, like 1,000 nodes.
Dialogue: 0,0:25:50.08,0:25:54.70,中文,,0,0,0,,好吧想象一下你有一个巨大的图比如 1,000 个节点
Dialogue: 0,0:25:54.70,0:25:58.77,英文,,0,0,0,,So maybe the nodes represent, I don't know, the people in this class, 1,000 nodes.
Dialogue: 0,0:25:54.70,0:25:58.77,中文,,0,0,0,,也许节点代表我不知道班上的人1,000 个节点
Dialogue: 0,0:25:58.77,0:26:02.41,英文,,0,0,0,,And maybe the edges represent people who are friends in the class.
Dialogue: 0,0:25:58.77,0:26:02.41,中文,,0,0,0,,也许边表示在班上是朋友的人
Dialogue: 0,0:26:02.41,0:26:09.64,英文,,0,0,0,,Well, if you think about this graph, is this graph extremely connected or is it pretty sparse?
Dialogue: 0,0:26:02.41,0:26:09.64,中文,,0,0,0,,好吧如果你想想这个图这个图是非常连通的还是相当稀疏的
Dialogue: 0,0:26:09.64,0:26:17.97,英文,,0,0,0,,Is it the case that everybody is friends with every other person in the class, and there are tons of edges and tons of ones in this adjacency matrix?
Dialogue: 0,0:26:09.64,0:26:17.97,中文,,0,0,0,,是这样的吗每个人都和班上的其他人都是朋友这个邻接矩阵里有很多边和很多个1吗
Dialogue: 0,0:26:17.97,0:26:23.43,英文,,0,0,0,,Or is it more likely that everyone is friends with one or two other people, but probably not everyone?
Dialogue: 0,0:26:17.97,0:26:23.43,中文,,0,0,0,,还是更有可能每个人只和一两个人是朋友但可能不是每个人都是
Dialogue: 0,0:26:23.43,0:26:26.69,英文,,0,0,0,,So most of this big matrix is just lots of zeros.
Dialogue: 0,0:26:23.43,0:26:26.69,中文,,0,0,0,,这个大矩阵的大部分都是很多的零
Dialogue: 0,0:26:26.69,0:26:37.90,英文,,0,0,0,,So unless you are all like social butterflies and you're friends with like 900 other people, and I don't know about it, I think it's more likely that everyone's friends with a couple people, but not 100 or 900 people.
Dialogue: 0,0:26:26.69,0:26:37.90,中文,,0,0,0,,除非你们都像社交蝴蝶一样和900多个人是朋友而我不知道我觉得更可能的是每个人都和几个人是朋友而不是100或900个人
Dialogue: 0,0:26:37.90,0:26:41.04,英文,,0,0,0,,And so the graph is going to be pretty sparse.
Dialogue: 0,0:26:37.90,0:26:41.04,中文,,0,0,0,,这个图会相当稀疏
Dialogue: 0,0:26:41.04,0:26:44.04,英文,,0,0,0,,So there will not be too many edges in the graph.
Dialogue: 0,0:26:41.04,0:26:44.04,中文,,0,0,0,,图中不会有太多的边
Dialogue: 0,0:26:44.04,0:26:47.04,英文,,0,0,0,,compared to the maximum number of edges that could exist.
Dialogue: 0,0:26:44.04,0:26:47.04,中文,,0,0,0,,与可能存在的最大边数相比
Dialogue: 0,0:26:47.04,0:26:48.75,英文,,0,0,0,,Most of the edges don't exist.
Dialogue: 0,0:26:47.04,0:26:48.75,中文,,0,0,0,,大多数边并不存在
Dialogue: 0,0:26:48.75,0:26:55.55,英文,,0,0,0,,So your adjacency matrix will just be tons and tons and tons of zeros and just a few little ones scattered around.
Dialogue: 0,0:26:48.75,0:26:55.55,中文,,0,0,0,,你的邻接矩阵就会是大量的零和零星分布的一些小数字
Dialogue: 0,0:26:55.55,0:26:59.33,英文,,0,0,0,,And so while that works, it's a little inefficient to store all the zeros.
Dialogue: 0,0:26:55.55,0:26:59.33,中文,,0,0,0,,虽然这样做有效但存储所有的零有点低效
Dialogue: 0,0:26:59.33,0:27:07.00,英文,,0,0,0,,So here's the alternate approach that helps for sparse graphs, which is I'm going to keep an array. of lists.
Dialogue: 0,0:26:59.33,0:27:07.00,中文,,0,0,0,,这里是针对稀疏图有帮助的替代方法我将保留一个列表的数组
Dialogue: 0,0:27:07.00,0:27:10.12,英文,,0,0,0,,So list here, another list, another list, another list.
Dialogue: 0,0:27:07.00,0:27:10.12,中文,,0,0,0,,这里是列表另一个列表再一个列表还有一个列表
Dialogue: 0,0:27:10.12,0:27:11.60,英文,,0,0,0,,So it's an array of lists.
Dialogue: 0,0:27:10.12,0:27:11.60,中文,,0,0,0,,这其实是个列表的数组
Dialogue: 0,0:27:11.60,0:27:17.63,英文,,0,0,0,,And each list tells me a list of who is adjacent to that vertex.
Dialogue: 0,0:27:11.60,0:27:17.63,中文,,0,0,0,,每个列表都告诉我哪些顶点与该顶点相邻
Dialogue: 0,0:27:17.63,0:27:18.61,英文,,0,0,0,,Maybe I phrased that weird.
Dialogue: 0,0:27:17.63,0:27:18.61,中文,,0,0,0,,可能我表达得有点奇怪
Dialogue: 0,0:27:18.61,0:27:19.71,英文,,0,0,0,,Here's an example.
Dialogue: 0,0:27:18.61,0:27:19.71,中文,,0,0,0,,这里有个例子
Dialogue: 0,0:27:19.71,0:27:21.95,英文,,0,0,0,,So index 0.
Dialogue: 0,0:27:19.71,0:27:21.95,中文,,0,0,0,,索引0
Dialogue: 0,0:27:21.95,0:27:23.67,英文,,0,0,0,,Well, what is 0 adjacent to?
Dialogue: 0,0:27:21.95,0:27:23.67,中文,,0,0,0,,那么0与什么相邻呢
Dialogue: 0,0:27:23.67,0:27:24.73,英文,,0,0,0,,I look in the graph.
Dialogue: 0,0:27:23.67,0:27:24.73,中文,,0,0,0,,我看看图表
Dialogue: 0,0:27:24.73,0:27:26.13,英文,,0,0,0,,It's adjacent to 1 and 2.
Dialogue: 0,0:27:24.73,0:27:26.13,中文,,0,0,0,,它邻接于1和2
Dialogue: 0,0:27:26.13,0:27:29.37,英文,,0,0,0,,So my list has 1 and 2.
Dialogue: 0,0:27:26.13,0:27:29.37,中文,,0,0,0,,我的列表有1和2
Dialogue: 0,0:27:29.37,0:27:31.81,英文,,0,0,0,,Vertex 1, who is it adjacent to?
Dialogue: 0,0:27:29.37,0:27:31.81,中文,,0,0,0,,顶点1它与谁邻接
Dialogue: 0,0:27:31.81,0:27:33.92,英文,,0,0,0,,It is adjacent to vertex 2.
Dialogue: 0,0:27:31.81,0:27:33.92,中文,,0,0,0,,它与顶点2邻接
Dialogue: 0,0:27:33.92,0:27:36.80,英文,,0,0,0,,So I have a list of just the number 2.
Dialogue: 0,0:27:33.92,0:27:36.80,中文,,0,0,0,,我只有一个数字2的列表
Dialogue: 0,0:27:36.80,0:27:40.14,英文,,0,0,0,,And vertex 2, you are adjacent to nobody.
Dialogue: 0,0:27:36.80,0:27:40.14,中文,,0,0,0,,而且顶点2你是不邻接任何人的
Dialogue: 0,0:27:40.14,0:27:45.64,英文,,0,0,0,,So you have an empty list corresponding to index 2 in the array of lists.
Dialogue: 0,0:27:40.14,0:27:45.64,中文,,0,0,0,,你在列表数组中的索引2处有一个空列表
Dialogue: 0,0:27:45.64,0:27:47.36,英文,,0,0,0,,So it's just a bunch of lists.
Dialogue: 0,0:27:45.64,0:27:47.36,中文,,0,0,0,,它只是一堆列表
Dialogue: 0,0:27:47.36,0:27:54.53,英文,,0,0,0,,The ith list tells me all the vertices that are adjacent to vertex i.
Dialogue: 0,0:27:47.36,0:27:54.53,中文,,0,0,0,,第i个列表告诉我与顶点i相邻的所有顶点
Dialogue: 0,0:27:54.53,0:27:56.03,英文,,0,0,0,,That's the adjacency list.
Dialogue: 0,0:27:54.53,0:27:56.03,中文,,0,0,0,,这就是邻接表
Dialogue: 0,0:27:56.03,0:27:58.53,英文,,0,0,0,,I like it because now I don't have to store all the zeros.
Dialogue: 0,0:27:56.03,0:27:58.53,中文,,0,0,0,,我喜欢它因为现在我不必存储所有的零
Dialogue: 0,0:27:58.53,0:28:03.87,英文,,0,0,0,,And it's nice because a lot of real-world graphs, like the graph of friends or whatever, is pretty sparse.
Dialogue: 0,0:27:58.53,0:28:03.87,中文,,0,0,0,,而且很好因为很多现实世界中的图比如朋友之间的图都相当稀疏
Dialogue: 0,0:28:03.87,0:28:09.12,英文,,0,0,0,,And most entries in the adjacency matrix would be zeros, unless you all have 999 friends.
Dialogue: 0,0:28:03.87,0:28:09.12,中文,,0,0,0,,而且邻接矩阵中的大多数条目都将是零除非你们都有999个朋友
Dialogue: 0,0:28:09.12,0:28:09.50,英文,,0,0,0,,And I don't know.
Dialogue: 0,0:28:09.12,0:28:09.50,中文,,0,0,0,,我不知道
Dialogue: 0,0:28:09.50,0:28:12.58,英文,,0,0,0,,OK.
Dialogue: 0,0:28:12.58,0:28:16.64,英文,,0,0,0,,So there were two choices, plus one really weird one that no one talks about.
Dialogue: 0,0:28:12.58,0:28:16.64,中文,,0,0,0,,有两种选择再加上一种真的很奇怪的选择没人谈论过
Dialogue: 0,0:28:16.64,0:28:19.47,英文,,0,0,0,,And so those are your choices for how to implement the graph.
Dialogue: 0,0:28:16.64,0:28:19.47,中文,,0,0,0,,这些是你在实现图时的选择
Dialogue: 0,0:28:19.47,0:28:22.37,英文,,0,0,0,,So we decided what the services are to give to the users.
Dialogue: 0,0:28:19.47,0:28:22.37,中文,,0,0,0,,我们决定了要向用户提供哪些服务
Dialogue: 0,0:28:22.37,0:28:27.33,英文,,0,0,0,,And then separately, we made another choice, which is, how do you represent the graph in memory?
Dialogue: 0,0:28:22.37,0:28:27.33,中文,,0,0,0,,然后另外我们又做了另一个选择就是如何在内存中表示图
Dialogue: 0,0:28:27.33,0:28:33.48,英文,,0,0,0,,Adjacency list, adjacency matrix, the weird one that no one talks about, it's your choice.
Dialogue: 0,0:28:27.33,0:28:33.48,中文,,0,0,0,,邻接表邻接矩阵没人谈论过的奇怪选择由你决定
Dialogue: 0,0:28:33.48,0:28:36.54,英文,,0,0,0,,OK, now let's do some runtime analysis.
Dialogue: 0,0:28:33.48,0:28:36.54,中文,,0,0,0,,现在让我们进行一些运行时分析
Dialogue: 0,0:28:36.54,0:28:39.98,英文,,0,0,0,,I will warn you ahead of time, it's a little gross, so I'm sorry.
Dialogue: 0,0:28:36.54,0:28:39.98,中文,,0,0,0,,提前警告你这有点恶心所以我很抱歉
Dialogue: 0,0:28:39.98,0:28:46.71,英文,,0,0,0,,But let's think about the runtime of this print method.
Dialogue: 0,0:28:39.98,0:28:46.71,中文,,0,0,0,,但是让我们思考一下这个打印方法的运行时
Dialogue: 0,0:28:46.71,0:28:48.19,英文,,0,0,0,,So remember this print method?
Dialogue: 0,0:28:46.71,0:28:48.19,中文,,0,0,0,,记得这个打印方法吗
Dialogue: 0,0:28:48.19,0:29:01.34,英文,,0,0,0,,It said, I'm going to go through all the vertices, and then for every vertex, I'm going to look at all the adjacent vertices, and then print out every single edge in the graph.
Dialogue: 0,0:28:48.19,0:29:01.34,中文,,0,0,0,,它说我要遍历所有的顶点然后对于每个顶点我要查看所有相邻的顶点然后打印出图中的每一条边
Dialogue: 0,0:29:01.34,0:29:09.46,英文,,0,0,0,,And so the question for you is, How long does this take if I choose to use an adjacency list representation?
Dialogue: 0,0:29:01.34,0:29:09.46,中文,,0,0,0,,那么你的问题是 如果我选择使用邻接表表示这需要多长时间
Dialogue: 0,0:29:09.46,0:29:17.21,英文,,0,0,0,,So I want to use this list representation where every single vertex has a list telling me all the adjacent vertices.
Dialogue: 0,0:29:09.46,0:29:17.21,中文,,0,0,0,,我想使用这种列表表示法其中每个顶点都有一个列表告诉我所有相邻的顶点
Dialogue: 0,0:29:17.21,0:29:22.64,英文,,0,0,0,,And I want you to tell me between these four choices, what is the order of growth?
Dialogue: 0,0:29:17.21,0:29:22.64,中文,,0,0,0,,我想让你告诉我在这四个选择中增长的顺序是什么
Dialogue: 0,0:29:22.64,0:29:26.45,英文,,0,0,0,,of the print method relative to the size of the graph.
Dialogue: 0,0:29:22.64,0:29:26.45,中文,,0,0,0,,相对于图的大小打印方法的时间复杂度是多少
Dialogue: 0,0:29:26.45,0:29:29.99,英文,,0,0,0,,As the graph grows large, how fast does this thing take?
Dialogue: 0,0:29:26.45,0:29:29.99,中文,,0,0,0,,当图变大时这个东西需要多快
Dialogue: 0,0:29:29.99,0:29:36.66,英文,,0,0,0,,If I have a graph with V as the total number of vertices and E as the total number of edges.
Dialogue: 0,0:29:29.99,0:29:36.66,中文,,0,0,0,,如果我有一个以V表示总顶点数以E表示总边数的图
Dialogue: 0,0:29:36.66,0:29:39.46,英文,,0,0,0,,And remember, E is the total number of edges.
Dialogue: 0,0:29:36.66,0:29:39.46,中文,,0,0,0,,记住E是总边数
Dialogue: 0,0:29:39.46,0:29:45.15,英文,,0,0,0,,So in this graph, E is 3, because there are 1, 2, 3 edges in total.
Dialogue: 0,0:29:39.46,0:29:45.15,中文,,0,0,0,,在这个图中E是3因为总共有1、2、3条边
Dialogue: 0,0:29:45.15,0:29:47.19,英文,,0,0,0,,OK.
Dialogue: 0,0:29:47.19,0:29:49.48,英文,,0,0,0,,I'm not going to lie, it's kind of annoying.
Dialogue: 0,0:29:47.19,0:29:49.48,中文,,0,0,0,,我不会撒谎有点烦人
Dialogue: 0,0:29:49.48,0:29:53.60,英文,,0,0,0,,And the main thing that makes this annoying, if you stare at it, is you're like, wait a minute.
Dialogue: 0,0:29:49.48,0:29:53.60,中文,,0,0,0,,最让人讨厌的是如果你盯着它看你会觉得等等
Dialogue: 0,0:29:53.60,0:29:55.54,英文,,0,0,0,,There are two variables.
Dialogue: 0,0:29:53.60,0:29:55.54,中文,,0,0,0,,有两个变量
Dialogue: 0,0:29:55.54,0:29:57.26,英文,,0,0,0,,I thought one variable was hard.
Dialogue: 0,0:29:55.54,0:29:57.26,中文,,0,0,0,,我以为一个变量已经够难了
Dialogue: 0,0:29:57.26,0:29:58.22,英文,,0,0,0,,Now there's two.
Dialogue: 0,0:29:57.26,0:29:58.22,中文,,0,0,0,,现在又来了一个
Dialogue: 0,0:29:58.22,0:29:59.10,英文,,0,0,0,,What the heck?
Dialogue: 0,0:29:58.22,0:29:59.10,中文,,0,0,0,,到底是怎么回事
Dialogue: 0,0:29:59.10,0:30:02.06,英文,,0,0,0,,So by the way, people on Zoom can still hear me.
Dialogue: 0,0:29:59.10,0:30:02.06,中文,,0,0,0,,顺便说一句在 Zoom 上的人还能听到我
Dialogue: 0,0:30:02.06,0:30:03.48,英文,,0,0,0,,There's no complaints.
Dialogue: 0,0:30:02.06,0:30:03.48,中文,,0,0,0,,没有投诉
Dialogue: 0,0:30:03.48,0:30:04.66,英文,,0,0,0,,The battery's almost dead.
Dialogue: 0,0:30:03.48,0:30:04.66,中文,,0,0,0,,电池快没电了
Dialogue: 0,0:30:04.66,0:30:06.63,英文,,0,0,0,,OK, let me know.
Dialogue: 0,0:30:04.66,0:30:06.63,中文,,0,0,0,,告诉我
Dialogue: 0,0:30:07.41,0:30:12.19,英文,,0,0,0,,So the annoying thing is, you're like, I thought asymptotics with one variable was hard enough.
Dialogue: 0,0:30:07.41,0:30:12.19,中文,,0,0,0,,很烦人的是你知道吗我本来以为单变量渐近法已经够难了
Dialogue: 0,0:30:12.19,0:30:13.43,英文,,0,0,0,,Now you're giving me two.
Dialogue: 0,0:30:12.19,0:30:13.43,中文,,0,0,0,,现在你又给我来了一个二元的
Dialogue: 0,0:30:13.43,0:30:14.27,英文,,0,0,0,,What the hell?
Dialogue: 0,0:30:13.43,0:30:14.27,中文,,0,0,0,,到底是怎么回事
Dialogue: 0,0:30:14.27,0:30:21.82,英文,,0,0,0,,So the reason why we need two variables is because when I say a graph grows large, I have to be more specific.
Dialogue: 0,0:30:14.27,0:30:21.82,中文,,0,0,0,,我们需要两个变量的原因是当我说一个图变得很大时我必须更具体一些
Dialogue: 0,0:30:21.82,0:30:26.70,英文,,0,0,0,,Because there are actually multiple ways in which a graph can grow big.
Dialogue: 0,0:30:21.82,0:30:26.70,中文,,0,0,0,,因为实际上图可以以多种方式变大
Dialogue: 0,0:30:26.70,0:30:30.40,英文,,0,0,0,,So if you think about it, like a list, how does a list get big?
Dialogue: 0,0:30:26.70,0:30:30.40,中文,,0,0,0,,如果你想一想像列表一样列表是怎么变大的
Dialogue: 0,0:30:30.40,0:30:32.82,英文,,0,0,0,,I add more things to it, and that's it.
Dialogue: 0,0:30:30.40,0:30:32.82,中文,,0,0,0,,我往里面添加更多的东西就这样
Dialogue: 0,0:30:32.82,0:30:34.58,英文,,0,0,0,,But how does a graph grow big?
Dialogue: 0,0:30:32.82,0:30:34.58,中文,,0,0,0,,但是图怎么变大呢
Dialogue: 0,0:30:34.58,0:30:37.99,英文,,0,0,0,,It turns out there are multiple ways in which a graph can grow big.
Dialogue: 0,0:30:34.58,0:30:37.99,中文,,0,0,0,,事实证明图可以以多种方式变大
Dialogue: 0,0:30:37.99,0:30:41.83,英文,,0,0,0,,One possible way for my graph to get bigger is I have more vertices.
Dialogue: 0,0:30:37.99,0:30:41.83,中文,,0,0,0,,我的图表变大的一种可能方式是我有更多的顶点
Dialogue: 0,0:30:41.83,0:30:44.09,英文,,0,0,0,,So it's like, there are more people in the class.
Dialogue: 0,0:30:41.83,0:30:44.09,中文,,0,0,0,,就像班上有更多的人一样
Dialogue: 0,0:30:44.09,0:30:48.20,英文,,0,0,0,,So there are 1,000 people. There are 2,000 people. There are 3,000 people.
Dialogue: 0,0:30:44.09,0:30:48.20,中文,,0,0,0,,所以有1,000个人 有2,000个人 有3,000个人
Dialogue: 0,0:30:48.20,0:30:51.20,英文,,0,0,0,,So the graph could get bigger if there are more vertices.
Dialogue: 0,0:30:48.20,0:30:51.20,中文,,0,0,0,,如果有更多的顶点图表就会变大
Dialogue: 0,0:30:51.20,0:30:53.32,英文,,0,0,0,,That's one way for the graph to get big.
Dialogue: 0,0:30:51.20,0:30:53.32,中文,,0,0,0,,这是图表变大的一种方式
Dialogue: 0,0:30:53.32,0:31:03.91,英文,,0,0,0,,But there's another way for the graph to get big, which is, what if the class size stays the same, so still 1,000 people, but you all start suddenly making lots and lots of friends?
Dialogue: 0,0:30:53.32,0:31:03.91,中文,,0,0,0,,但是图表变大的另一种方式是如果班级规模保持不变也就是说仍然是1,000人但是你们突然开始结交很多朋友
Dialogue: 0,0:31:03.91,0:31:14.61,英文,,0,0,0,,In that case, the graph number of vertices stays the same, but the total number of edges increases, because you're all making friends with each other, and so the number of edges increases.
Dialogue: 0,0:31:03.91,0:31:14.61,中文,,0,0,0,,在这种情况下图表中的顶点数保持不变但是边的总数增加了因为你们彼此交朋友所以边的数量增加了
Dialogue: 0,0:31:14.61,0:31:20.76,英文,,0,0,0,,So it turns out, to really think about this graph, I need to think about two ways in which the graph could get big.
Dialogue: 0,0:31:14.61,0:31:20.76,中文,,0,0,0,,因此事实证明要真正思考这个图表我需要考虑图表变大的两种方式
Dialogue: 0,0:31:20.76,0:31:23.66,英文,,0,0,0,,Your graph could get big if there's a lot of vertices.
Dialogue: 0,0:31:20.76,0:31:23.66,中文,,0,0,0,,如果顶点很多你的图表可能变大
Dialogue: 0,0:31:23.66,0:31:28.74,英文,,0,0,0,,Or if there's a lot of edges, there are two different independent ways in which the graph could grow.
Dialogue: 0,0:31:23.66,0:31:28.74,中文,,0,0,0,,或者如果边很多有两种不同的独立方式可以使图表增长
Dialogue: 0,0:31:28.74,0:31:30.64,英文,,0,0,0,,And we have to consider both of them.
Dialogue: 0,0:31:28.74,0:31:30.64,中文,,0,0,0,,我们必须考虑这两种方式
Dialogue: 0,0:31:30.64,0:31:33.14,英文,,0,0,0,,That's what makes this problem hard.
Dialogue: 0,0:31:30.64,0:31:33.14,中文,,0,0,0,,这就是这个问题难的地方
Dialogue: 0,0:31:33.14,0:31:36.28,英文,,0,0,0,,OK, having said that, let's start thinking about this.
Dialogue: 0,0:31:33.14,0:31:36.28,中文,,0,0,0,,说完这个让我们开始考虑一下
Dialogue: 0,0:31:36.28,0:31:40.61,英文,,0,0,0,,So how long does it take to iterate over these neighbors?
Dialogue: 0,0:31:36.28,0:31:40.61,中文,,0,0,0,,那么遍历这些邻居需要多长时间呢
Dialogue: 0,0:31:40.61,0:31:42.55,英文,,0,0,0,,So let's think about this inner for loop.
Dialogue: 0,0:31:40.61,0:31:42.55,中文,,0,0,0,,让我们考虑一下这个内部的for循环
Dialogue: 0,0:31:42.55,0:31:45.47,英文,,0,0,0,,How long does it take to go through one of these lists?
Dialogue: 0,0:31:42.55,0:31:45.47,中文,,0,0,0,,遍历其中一个列表需要多长时间呢
Dialogue: 0,0:31:45.47,0:31:47.83,英文,,0,0,0,,Well, I don't know how long the list is.
Dialogue: 0,0:31:45.47,0:31:47.83,中文,,0,0,0,,我不知道这个列表有多长
Dialogue: 0,0:31:47.83,0:31:50.21,英文,,0,0,0,,This list could be empty.
Dialogue: 0,0:31:47.83,0:31:50.21,中文,,0,0,0,,这个列表可能是空的
Dialogue: 0,0:31:50.21,0:31:52.37,英文,,0,0,0,,That means that you have no friends.
Dialogue: 0,0:31:50.21,0:31:52.37,中文,,0,0,0,,这意味着你没有朋友
Dialogue: 0,0:31:52.37,0:31:54.95,英文,,0,0,0,,So kind of depressing, but the list would be empty.
Dialogue: 0,0:31:52.37,0:31:54.95,中文,,0,0,0,,有点沮丧但列表会是空的
Dialogue: 0,0:31:54.95,0:31:57.47,英文,,0,0,0,,Or maybe you're friends with everybody.
Dialogue: 0,0:31:54.95,0:31:57.47,中文,,0,0,0,,或许你和每个人都是朋友
Dialogue: 0,0:31:57.47,0:31:59.47,英文,,0,0,0,,Then this list would be huge.
Dialogue: 0,0:31:57.47,0:31:59.47,中文,,0,0,0,,那这个列表会很长
Dialogue: 0,0:31:59.47,0:32:05.62,英文,,0,0,0,,In fact, it would have the items, because you're friends with all the other people in the class.
Dialogue: 0,0:31:59.47,0:32:05.62,中文,,0,0,0,,事实上它会有所有其他同学的项目因为你和所有其他人都是朋友
Dialogue: 0,0:32:05.62,0:32:11.16,英文,,0,0,0,,So the runtime here, it could be, in the best case, omega of 1.
Dialogue: 0,0:32:05.62,0:32:11.16,中文,,0,0,0,,这里的运行时间在最好的情况下可能是1
Dialogue: 0,0:32:11.16,0:32:14.36,英文,,0,0,0,,That means it's at least.
Dialogue: 0,0:32:11.16,0:32:14.36,中文,,0,0,0,,这意味着至少是
Dialogue: 0,0:32:14.36,0:32:19.30,英文,,0,0,0,,Omega of 1, that would be the case in which you have no friends, and this list is empty.
Dialogue: 0,0:32:14.36,0:32:19.30,中文,,0,0,0,,在没有朋友且列表为空的情况下运行时间可能是1
Dialogue: 0,0:32:19.30,0:32:28.88,英文,,0,0,0,,This could also be big O of v, in the case where you're friends with everybody, and this list is totally full, has all other vertices in each of these lists.
Dialogue: 0,0:32:19.30,0:32:28.88,中文,,0,0,0,,这也可能是大O(V)假设你和每个人都是朋友这个列表完全填满了在每个列表中都有所有其他顶点
Dialogue: 0,0:32:28.88,0:32:31.19,英文,,0,0,0,,And how many vertices do we have to consider?
Dialogue: 0,0:32:28.88,0:32:31.19,中文,,0,0,0,,我们得考虑多少个顶点
Dialogue: 0,0:32:31.19,0:32:36.75,英文,,0,0,0,,We have to iterate through this first one, and the second one, and the third one, v vertices in total.
Dialogue: 0,0:32:31.19,0:32:36.75,中文,,0,0,0,,我们得遍历第一个第二个第三个总共 V 个顶点
Dialogue: 0,0:32:36.75,0:32:38.67,英文,,0,0,0,,That's this outer for loop.
Dialogue: 0,0:32:36.75,0:32:38.67,中文,,0,0,0,,这就是这个外部for循环
Dialogue: 0,0:32:38.67,0:32:45.41,英文,,0,0,0,,So in the best case, I have theta of v. That would be the case in which there are lots of vertices, but nobody has made any friends.
Dialogue: 0,0:32:38.67,0:32:45.41,中文,,0,0,0,,在最好的情况下我有θ(V)这种情况是指有很多顶点但没有人交朋友的情况
Dialogue: 0,0:32:45.41,0:32:46.67,英文,,0,0,0,,There are no edges.
Dialogue: 0,0:32:45.41,0:32:46.67,中文,,0,0,0,,没有边
Dialogue: 0,0:32:46.67,0:32:49.13,英文,,0,0,0,,So I would just go through first one, empty.
Dialogue: 0,0:32:46.67,0:32:49.13,中文,,0,0,0,,我只会遍历第一个它是空的
Dialogue: 0,0:32:49.13,0:32:50.61,英文,,0,0,0,,Second one, empty.
Dialogue: 0,0:32:49.13,0:32:50.61,中文,,0,0,0,,第二个空的
Dialogue: 0,0:32:50.61,0:32:53.07,英文,,0,0,0,,Third one, empty, empty, empty.
Dialogue: 0,0:32:50.61,0:32:53.07,中文,,0,0,0,,第三个空的空的空的
Dialogue: 0,0:32:53.07,0:32:59.17,英文,,0,0,0,,And I would just go through v vertices, find out that all of them are empty, and print out nothing.
Dialogue: 0,0:32:53.07,0:32:59.17,中文,,0,0,0,,然后我只需遍历 V 个顶点发现它们全部都是空的然后什么也不输出
Dialogue: 0,0:32:59.17,0:33:03.98,英文,,0,0,0,,That would be a very depressing graph, but it would be a theta of v runtime.
Dialogue: 0,0:32:59.17,0:33:03.98,中文,,0,0,0,,这将是一个非常沮丧的图但它的运行时间将是θ(V)
Dialogue: 0,0:33:03.98,0:33:09.37,英文,,0,0,0,,By contrast, the graph that is fully connected, every single edge that could possibly be there is there.
Dialogue: 0,0:33:03.98,0:33:09.37,中文,,0,0,0,,相比之下完全连接的图每一条可能存在的边都存在
Dialogue: 0,0:33:09.37,0:33:11.41,英文,,0,0,0,,That would be the graph in which I go to 0.
Dialogue: 0,0:33:09.37,0:33:11.41,中文,,0,0,0,,那将是我到达 0 的图
Dialogue: 0,0:33:11.41,0:33:12.37,英文,,0,0,0,,I look at the list.
Dialogue: 0,0:33:11.41,0:33:12.37,中文,,0,0,0,,我查看列表
Dialogue: 0,0:33:12.37,0:33:14.89,英文,,0,0,0,,It's totally full, V things.
Dialogue: 0,0:33:12.37,0:33:14.89,中文,,0,0,0,,全部满了V 个东西
Dialogue: 0,0:33:14.89,0:33:16.81,英文,,0,0,0,,And I have to print them all out.
Dialogue: 0,0:33:14.89,0:33:16.81,中文,,0,0,0,,而且我得把它们全部打印出来
Dialogue: 0,0:33:16.81,0:33:17.95,英文,,0,0,0,,Then I go to 1.
Dialogue: 0,0:33:16.81,0:33:17.95,中文,,0,0,0,,然后我去 1
Dialogue: 0,0:33:17.95,0:33:18.81,英文,,0,0,0,,How many things?
Dialogue: 0,0:33:17.95,0:33:18.81,中文,,0,0,0,,有多少东西
Dialogue: 0,0:33:18.81,0:33:19.45,英文,,0,0,0,,V things.
Dialogue: 0,0:33:18.81,0:33:19.45,中文,,0,0,0,,V 个东西
Dialogue: 0,0:33:19.45,0:33:20.79,英文,,0,0,0,,I print them all out.
Dialogue: 0,0:33:19.45,0:33:20.79,中文,,0,0,0,,我把它们全部打印出来
Dialogue: 0,0:33:20.79,0:33:21.69,英文,,0,0,0,,I go to 2.
Dialogue: 0,0:33:20.79,0:33:21.69,中文,,0,0,0,,我去 2
Dialogue: 0,0:33:21.69,0:33:23.09,英文,,0,0,0,,How many things in this list?
Dialogue: 0,0:33:21.69,0:33:23.09,中文,,0,0,0,,这个列表里有多少东西
Dialogue: 0,0:33:23.09,0:33:23.73,英文,,0,0,0,,V things.
Dialogue: 0,0:33:23.09,0:33:23.73,中文,,0,0,0,,V 件
Dialogue: 0,0:33:23.73,0:33:24.89,英文,,0,0,0,,I print them all out.
Dialogue: 0,0:33:23.73,0:33:24.89,中文,,0,0,0,,我把它们全部打印出来
Dialogue: 0,0:33:24.89,0:33:27.11,英文,,0,0,0,,So there are V vertices in total.
Dialogue: 0,0:33:24.89,0:33:27.11,中文,,0,0,0,,总共有 V 个顶点
Dialogue: 0,0:33:27.11,0:33:34.16,英文,,0,0,0,,If for each one I have to print V things, I would get a runtime of V squared in the worst case.
Dialogue: 0,0:33:27.11,0:33:34.16,中文,,0,0,0,,如果对于每个顶点我都要打印 V 个东西那么在最坏的情况下运行时间将是 V 的平方
Dialogue: 0,0:33:34.16,0:33:40.96,英文,,0,0,0,,So in the best case, theta v. In the worst case, where everything is connected, theta v squared.
Dialogue: 0,0:33:34.16,0:33:40.96,中文,,0,0,0,,在最好的情况下θ(V)在最坏的情况下即所有东西都连接的情况下θ(V^2)
Dialogue: 0,0:33:40.96,0:33:42.16,英文,,0,0,0,,OK, problem.
Dialogue: 0,0:33:40.96,0:33:42.16,中文,,0,0,0,,好的有问题吗
Dialogue: 0,0:33:42.16,0:33:42.91,英文,,0,0,0,,I didn't give you that.
Dialogue: 0,0:33:42.16,0:33:42.91,中文,,0,0,0,,我没给你那个
Dialogue: 0,0:33:42.91,0:33:44.35,英文,,0,0,0,,That's not one of the choices.
Dialogue: 0,0:33:42.91,0:33:44.35,中文,,0,0,0,,那不是其中的一个选项
Dialogue: 0,0:33:44.35,0:33:55.57,英文,,0,0,0,,So which of these choices best represents the runtime, not just in terms of v, which was our first attempt at analysis, where we just used v to think about best case, worst case.
Dialogue: 0,0:33:44.35,0:33:55.57,中文,,0,0,0,,那么在考虑运行时间时哪个选项最能代表我们的分析不仅仅是考虑 V我们的第一次尝试就是用v来考虑最好情况和最坏情况
Dialogue: 0,0:33:55.57,0:34:01.16,英文,,0,0,0,,But how would you answer this if I wanted you to answer in terms of v and e?
Dialogue: 0,0:33:55.57,0:34:01.16,中文,,0,0,0,,但如果我想让你结合 V 和 E 来回答你会怎么做呢
Dialogue: 0,0:34:01.16,0:34:04.03,英文,,0,0,0,,Because remember, the graph can grow big in two ways.
Dialogue: 0,0:34:01.16,0:34:04.03,中文,,0,0,0,,因为记住图的增长可以有两种方式
Dialogue: 0,0:34:04.03,0:34:07.33,英文,,0,0,0,,There could be lots of people, or there could be lots of edges.
Dialogue: 0,0:34:04.03,0:34:07.33,中文,,0,0,0,,可能是人很多或者是边很多
Dialogue: 0,0:34:07.33,0:34:09.01,英文,,0,0,0,,That is, you could all be friends.
Dialogue: 0,0:34:07.33,0:34:09.01,中文,,0,0,0,,也就是说你们都可能是朋友
Dialogue: 0,0:34:09.01,0:34:10.80,英文,,0,0,0,,So how do you answer this?
Dialogue: 0,0:34:09.01,0:34:10.80,中文,,0,0,0,,那么你怎么回答这个问题呢
Dialogue: 0,0:34:10.80,0:34:11.86,英文,,0,0,0,,It's kind of weird.
Dialogue: 0,0:34:10.80,0:34:11.86,中文,,0,0,0,,有点奇怪
Dialogue: 0,0:34:11.86,0:34:12.74,英文,,0,0,0,,And it's kind of gross.
Dialogue: 0,0:34:11.86,0:34:12.74,中文,,0,0,0,,而且有点恶心
Dialogue: 0,0:34:12.74,0:34:13.60,英文,,0,0,0,,I'm not going to lie.
Dialogue: 0,0:34:12.74,0:34:13.60,中文,,0,0,0,,我不会撒谎的
Dialogue: 0,0:34:13.60,0:34:15.50,英文,,0,0,0,,So here's how I think about it.
Dialogue: 0,0:34:13.60,0:34:15.50,中文,,0,0,0,,这是我对此的看法
Dialogue: 0,0:34:15.50,0:34:17.24,英文,,0,0,0,,And I will admit, it's kind of annoying.
Dialogue: 0,0:34:15.50,0:34:17.24,中文,,0,0,0,,我得承认有点烦人
Dialogue: 0,0:34:17.24,0:34:20.68,英文,,0,0,0,,So how many vertices do you have to consider?
Dialogue: 0,0:34:17.24,0:34:20.68,中文,,0,0,0,,那么你要考虑多少个顶点
Dialogue: 0,0:34:20.68,0:34:22.06,英文,,0,0,0,,You have to consider this.
Dialogue: 0,0:34:20.68,0:34:22.06,中文,,0,0,0,,你必须考虑这一点
Dialogue: 0,0:34:22.06,0:34:23.86,英文,,0,0,0,,V vertices, no matter what.
Dialogue: 0,0:34:22.06,0:34:23.86,中文,,0,0,0,,V个顶点无论如何
Dialogue: 0,0:34:23.86,0:34:27.37,英文,,0,0,0,,That is, you need to look in this box, this box, this box, this box.
Dialogue: 0,0:34:23.86,0:34:27.37,中文,,0,0,0,,也就是说你需要检查这个盒子这个盒子这个盒子这个盒子
Dialogue: 0,0:34:27.37,0:34:32.97,英文,,0,0,0,,So in total, you need to look at V memory boxes to find all the lists.
Dialogue: 0,0:34:27.37,0:34:32.97,中文,,0,0,0,,总的来说你需要检查V个内存盒子来找到所有的列表
Dialogue: 0,0:34:32.97,0:34:34.29,英文,,0,0,0,,That is always true.
Dialogue: 0,0:34:32.97,0:34:34.29,中文,,0,0,0,,这永远是对的
Dialogue: 0,0:34:34.29,0:34:37.45,英文,,0,0,0,,Whether these lists are empty or full, you've got to look at V boxes.
Dialogue: 0,0:34:34.29,0:34:37.45,中文,,0,0,0,,无论这些列表是空的还是满的你都得查看V个盒子
Dialogue: 0,0:34:37.45,0:34:39.18,英文,,0,0,0,,There's no way around it.
Dialogue: 0,0:34:37.45,0:34:39.18,中文,,0,0,0,,这是无法避免的
Dialogue: 0,0:34:39.18,0:34:43.14,英文,,0,0,0,,Also, for each box, you need to consider this list.
Dialogue: 0,0:34:39.18,0:34:43.14,中文,,0,0,0,,此外对于每个盒子你需要考虑这个列表
Dialogue: 0,0:34:43.14,0:34:45.90,英文,,0,0,0,,And well, I don't know how many things are in this first list.
Dialogue: 0,0:34:43.14,0:34:45.90,中文,,0,0,0,,我不确定第一个列表里有多少东西
Dialogue: 0,0:34:45.90,0:34:48.46,英文,,0,0,0,,I also don't know how many things are in the second list.
Dialogue: 0,0:34:45.90,0:34:48.46,中文,,0,0,0,,我也不确定第二个列表里有多少东西
Dialogue: 0,0:34:48.46,0:34:50.62,英文,,0,0,0,,I also don't know how many things are in the third list.
Dialogue: 0,0:34:48.46,0:34:50.62,中文,,0,0,0,,我也不确定第三个列表里有多少东西
Dialogue: 0,0:34:50.62,0:34:55.82,英文,,0,0,0,,I know it's between 0 and V, but I don't know how many things are in each of these lists.
Dialogue: 0,0:34:50.62,0:34:55.82,中文,,0,0,0,,我知道数量在0到V之间但不确定每个列表里有多少东西
Dialogue: 0,0:34:55.82,0:35:01.65,英文,,0,0,0,,But can you tell me how many total things are in all of the lists together?
Dialogue: 0,0:34:55.82,0:35:01.65,中文,,0,0,0,,但你能告诉我所有列表里总共有多少东西吗
Dialogue: 0,0:35:01.65,0:35:15.08,英文,,0,0,0,,So if I take the number of things in this first list, and the number of things in the second list, and the next list, and the next list, and I take them all and I add them up, how many things are in all of the lists bundled together?
Dialogue: 0,0:35:01.65,0:35:15.08,中文,,0,0,0,,如果我把第一个列表的东西数量、第二个列表的、再下一个列表的这样全部加起来所有列表里总共有多少东西
Dialogue: 0,0:35:15.08,0:35:15.66,英文,,0,0,0,,E, right?
Dialogue: 0,0:35:15.08,0:35:15.66,中文,,0,0,0,,对吧
Dialogue: 0,0:35:15.66,0:35:17.58,英文,,0,0,0,,OK, so that was kind of awkward.
Dialogue: 0,0:35:15.66,0:35:17.58,中文,,0,0,0,,那有点尴尬
Dialogue: 0,0:35:17.58,0:35:21.41,英文,,0,0,0,,E things in the list, because there's one item per edge.
Dialogue: 0,0:35:17.58,0:35:21.41,中文,,0,0,0,,在列表中有E个东西因为每条边都有一个项目
Dialogue: 0,0:35:21.41,0:35:28.42,英文,,0,0,0,,So if I take all the lists and I combine them together, there should be E total things in all of the lists.
Dialogue: 0,0:35:21.41,0:35:28.42,中文,,0,0,0,,如果我把所有的列表都合并在一起所有的列表中应该有E个总共的东西
Dialogue: 0,0:35:28.42,0:35:32.36,英文,,0,0,0,,So. I need to look at V memory boxes.
Dialogue: 0,0:35:28.42,0:35:32.36,中文,,0,0,0,,我需要查看V个内存盒
Dialogue: 0,0:35:32.36,0:35:34.97,英文,,0,0,0,,And separately, I need to look through all these lists.
Dialogue: 0,0:35:32.36,0:35:34.97,中文,,0,0,0,,另外我需要浏览所有这些列表
Dialogue: 0,0:35:34.97,0:35:37.63,英文,,0,0,0,,And there are E things in the list in total.
Dialogue: 0,0:35:34.97,0:35:37.63,中文,,0,0,0,,列表中总共有 E 个东西
Dialogue: 0,0:35:37.63,0:35:45.88,英文,,0,0,0,,So I think the answer is V plus E. Another way of saying it is, how many memory boxes do I look at?
Dialogue: 0,0:35:37.63,0:35:45.88,中文,,0,0,0,,我觉得答案是 V + E另一种说法是我要查看多少个内存盒子
Dialogue: 0,0:35:45.88,0:35:46.90,英文,,0,0,0,,V of them.
Dialogue: 0,0:35:45.88,0:35:46.90,中文,,0,0,0,,其中 V 个
Dialogue: 0,0:35:46.90,0:35:49.00,英文,,0,0,0,,And how many items do I print?
Dialogue: 0,0:35:46.90,0:35:49.00,中文,,0,0,0,,我打印多少项
Dialogue: 0,0:35:49.00,0:35:54.36,英文,,0,0,0,,I print E. Or if my graph is undirected, then I guess I print two E things.
Dialogue: 0,0:35:49.00,0:35:54.36,中文,,0,0,0,,我打印 E或者如果我的图是无向的那么我猜我会打印两个 E 个东西
Dialogue: 0,0:35:54.36,0:36:01.62,英文,,0,0,0,,So in total, I have theta of v plus e. And again, I know it's kind of gross, but that's what happens when I have two variables.
Dialogue: 0,0:35:54.36,0:36:01.62,中文,,0,0,0,,总体而言我有 θ(V + E)再说一遍我知道这有点恶心但当我有两个变量时就会发生这种情况
Dialogue: 0,0:36:01.62,0:36:03.62,英文,,0,0,0,,Question?
Dialogue: 0,0:36:01.62,0:36:03.62,中文,,0,0,0,,问题
Dialogue: 0,0:36:03.62,0:36:04.79,英文,,0,0,0,,Why is it not V times E?
Dialogue: 0,0:36:03.62,0:36:04.79,中文,,0,0,0,,为什么不是V乘以E
Dialogue: 0,0:36:04.79,0:36:05.85,英文,,0,0,0,,That's a good question.
Dialogue: 0,0:36:04.79,0:36:05.85,中文,,0,0,0,,这是一个好问题
Dialogue: 0,0:36:05.85,0:36:09.29,英文,,0,0,0,,So maybe I'll phrase it another way and see if you like it better.
Dialogue: 0,0:36:05.85,0:36:09.29,中文,,0,0,0,,也许我可以换一种方式表达看看你是否喜欢得更多
Dialogue: 0,0:36:09.29,0:36:15.17,英文,,0,0,0,,So another way I think about this is, well, there's two ways in which this graph could grow big.
Dialogue: 0,0:36:09.29,0:36:15.17,中文,,0,0,0,,我另外一种思考方式是这个图可以有两种方式变得很大
Dialogue: 0,0:36:15.17,0:36:24.96,英文,,0,0,0,,One way in which this graph could grow big is there are tons and tons of vertices, like 1,000 vertices, 10,000 vertices, a million vertices.
Dialogue: 0,0:36:15.17,0:36:24.96,中文,,0,0,0,,图可以变得很大的一种方式是有大量的顶点比如1000个顶点10000个顶点100万个顶点
Dialogue: 0,0:36:24.96,0:36:26.42,英文,,0,0,0,,That'd be a very big class.
Dialogue: 0,0:36:24.96,0:36:26.42,中文,,0,0,0,,那将是一个非常庞大的类
Dialogue: 0,0:36:26.42,0:36:29.80,英文,,0,0,0,,But nobody is making friends, so there are no edges.
Dialogue: 0,0:36:26.42,0:36:29.80,中文,,0,0,0,,但是没有人交朋友所以没有边
Dialogue: 0,0:36:29.80,0:36:32.85,英文,,0,0,0,,In that case, which of these two terms dominates?
Dialogue: 0,0:36:29.80,0:36:32.85,中文,,0,0,0,,那么在这种情况下这两个术语中哪个占主导地位呢
Dialogue: 0,0:36:32.85,0:36:35.51,英文,,0,0,0,,Well, there's no edges, so this E term is really small.
Dialogue: 0,0:36:32.85,0:36:35.51,中文,,0,0,0,,没有边缘所以这个 E 术语非常小
Dialogue: 0,0:36:35.51,0:36:37.83,英文,,0,0,0,,But this V term starts to dominate.
Dialogue: 0,0:36:35.51,0:36:37.83,中文,,0,0,0,,但是这个 V 术语开始占主导地位
Dialogue: 0,0:36:37.83,0:36:44.81,英文,,0,0,0,,And so if I create tons and tons of vertices, then the thing that is slowest is looking at all these memory boxes.
Dialogue: 0,0:36:37.83,0:36:44.81,中文,,0,0,0,,如果我创建了大量的顶点那么最慢的就是查看所有这些内存盒子
Dialogue: 0,0:36:44.81,0:36:46.75,英文,,0,0,0,,So V dominates.
Dialogue: 0,0:36:44.81,0:36:46.75,中文,,0,0,0,,所以 V 占主导地位
Dialogue: 0,0:36:46.75,0:36:51.52,英文,,0,0,0,,And so this reduces to theta of V, because V is the fastest-growing term.
Dialogue: 0,0:36:46.75,0:36:51.52,中文,,0,0,0,,因此这可以简化为 θ(V)因为 V 是增长最快的术语
Dialogue: 0,0:36:51.52,0:36:59.90,英文,,0,0,0,,By contrast, what if V stays small, like it's a pretty small class, 1,000 people, but everyone starts to make friends, and there are tons and tons of edges?
Dialogue: 0,0:36:51.52,0:36:59.90,中文,,0,0,0,,相比之下如果 V 保持较小比如一个相当小的班级1000 人但每个人都开始交朋友并且有大量的边缘那会怎么样呢
Dialogue: 0,0:36:59.90,0:37:07.13,英文,,0,0,0,,Well, in that case, E starts to dominate, and the V term becomes pretty small in comparison to E.
Dialogue: 0,0:36:59.90,0:37:07.13,中文,,0,0,0,,好吧那样的话E开始占主导地位而 V 项相比于E就变得非常小
Dialogue: 0,0:37:07.13,0:37:17.71,英文,,0,0,0,,So in that case, looking through these memory boxes is not that slow compared to the fact that all of these lists are gigantic, and I have to look through E, edges in total, where E is very large.
Dialogue: 0,0:37:07.13,0:37:17.71,中文,,0,0,0,,在这种情况下浏览这些内存盒子并不慢相比于所有这些列表都很庞大我必须浏览总共E条边其中E非常大
Dialogue: 0,0:37:17.71,0:37:25.72,英文,,0,0,0,,So another way of thinking about the sum is that it allows me to say, if V is the one that's growing larger, then V dominates, and it's theta of V.
Dialogue: 0,0:37:17.71,0:37:25.72,中文,,0,0,0,,另一种思考这个总和的方式是它允许我说如果V是正在变得更大的那个那么V就占主导地位它是θ(V)
Dialogue: 0,0:37:25.72,0:37:33.18,英文,,0,0,0,, By contrast, if E is the thing that is growing largest, then E dominates and becomes the largest thing.
Dialogue: 0,0:37:25.72,0:37:33.18,中文,,0,0,0,,相比之下如果E是正在增长最快的事物那么E就占主导地位并且变成最大的东西
Dialogue: 0,0:37:33.18,0:37:35.36,英文,,0,0,0,,So maybe that's another way to think about it.
Dialogue: 0,0:37:33.18,0:37:35.36,中文,,0,0,0,,也许这是另一种思考的方式
Dialogue: 0,0:37:35.36,0:37:36.78,英文,,0,0,0,,I don't know if it totally helps.
Dialogue: 0,0:37:35.36,0:37:36.78,中文,,0,0,0,,我不知道这是否完全有帮助
Dialogue: 0,0:37:36.78,0:37:39.07,英文,,0,0,0,,I will admit it's kind of gross.
Dialogue: 0,0:37:36.78,0:37:39.07,中文,,0,0,0,,我承认这有点恶心
Dialogue: 0,0:37:39.07,0:37:47.01,英文,,0,0,0,,Do you have a 10-second explanation for why V times E is the wrong answer here?
Dialogue: 0,0:37:39.07,0:37:47.01,中文,,0,0,0,,你有一个10秒钟的解释为什么V乘以E在这里是错误的答案吗
Dialogue: 0,0:37:47.01,0:37:57.71,英文,,0,0,0,,Each edge is only connected to two vertices.
Dialogue: 0,0:37:47.01,0:37:57.71,中文,,0,0,0,,每条边只连接两个顶点
Dialogue: 0,0:37:57.71,0:37:59.01,英文,,0,0,0,,Yeah, that's another good way of putting it.
Dialogue: 0,0:37:57.71,0:37:59.01,中文,,0,0,0,,是的这是另一种很好的说法
Dialogue: 0,0:37:59.01,0:38:03.05,英文,,0,0,0,,So each edge only contributes at most twice.
Dialogue: 0,0:37:59.01,0:38:03.05,中文,,0,0,0,,每条边最多只贡献两次
Dialogue: 0,0:38:03.05,0:38:06.39,英文,,0,0,0,,So if it's an undirected graph, the edge appears twice.
Dialogue: 0,0:38:03.05,0:38:06.39,中文,,0,0,0,,如果它是一个无向图那么边会出现两次
Dialogue: 0,0:38:06.39,0:38:11.95,英文,,0,0,0,,So V times E would be saying for every edge, repeat it V times.
Dialogue: 0,0:38:06.39,0:38:11.95,中文,,0,0,0,,所以V乘以E就是说对于每条边重复V次
Dialogue: 0,0:38:11.95,0:38:17.75,英文,,0,0,0,,But if I look at this code, there is no place where I'm trying to repeat an edge V times.
Dialogue: 0,0:38:11.95,0:38:17.75,中文,,0,0,0,,但是如果我看这段代码没有地方是我试图重复一条边V次的
Dialogue: 0,0:38:17.75,0:38:20.74,英文,,0,0,0,,Every edge gets printed twice or once.
Dialogue: 0,0:38:17.75,0:38:20.74,中文,,0,0,0,,每条边被打印两次或一次
Dialogue: 0,0:38:20.74,0:38:22.94,英文,,0,0,0,,So V plus E is the better answer.
Dialogue: 0,0:38:20.74,0:38:22.94,中文,,0,0,0,,所以V+E才是更好的答案
Dialogue: 0,0:38:22.94,0:38:27.06,英文,,0,0,0,,But again, I'll admit, this is one of the more disgusting things I have to show you.
Dialogue: 0,0:38:22.94,0:38:27.06,中文,,0,0,0,,但我得再次承认这是我不得不向你展示的更恶心的事情之一
Dialogue: 0,0:38:27.06,0:38:30.80,英文,,0,0,0,,I had to stare at this for a couple of minutes to really wrap my head around it.
Dialogue: 0,0:38:27.06,0:38:30.80,中文,,0,0,0,,我不得不盯着这个看了几分钟才真正理解
Dialogue: 0,0:38:30.80,0:38:33.72,英文,,0,0,0,,So maybe a good one to look at after lecture.
Dialogue: 0,0:38:30.80,0:38:33.72,中文,,0,0,0,,也许讲座之后再看这个是个不错的选择
Dialogue: 0,0:38:33.72,0:38:34.68,英文,,0,0,0,,OK.
Dialogue: 0,0:38:34.68,0:38:41.08,英文,,0,0,0,,But in the interest of getting through everything, oh, here's another slide with a lot of words, if you want to read it in words.
Dialogue: 0,0:38:34.68,0:38:41.08,中文,,0,0,0,,但为了完成所有内容哦这是另一个有很多字的幻灯片如果你想看文字的话
Dialogue: 0,0:38:41.08,0:38:44.57,英文,,0,0,0,,But V plus E. Sorry, it's kind of gross.
Dialogue: 0,0:38:41.08,0:38:44.57,中文,,0,0,0,,但是V+E抱歉有点恶心
Dialogue: 0,0:38:44.57,0:38:45.49,英文,,0,0,0,,I apologize.
Dialogue: 0,0:38:44.57,0:38:45.49,中文,,0,0,0,,我道歉
Dialogue: 0,0:38:45.49,0:38:46.51,英文,,0,0,0,,OK.
Dialogue: 0,0:38:46.51,0:38:51.21,英文,,0,0,0,,Again, you could think of it as max VNE, which is what I said earlier.
Dialogue: 0,0:38:46.51,0:38:51.21,中文,,0,0,0,,再说一遍你可以把它看作是max(V,E)就像我之前说的那样
Dialogue: 0,0:38:51.21,0:38:53.27,英文,,0,0,0,,But I will say it's kind of gross.
Dialogue: 0,0:38:51.21,0:38:53.27,中文,,0,0,0,,但我得说这有点恶心
Dialogue: 0,0:38:53.27,0:38:54.37,英文,,0,0,0,,So I'm sorry.
Dialogue: 0,0:38:53.27,0:38:54.37,中文,,0,0,0,,我很抱歉
Dialogue: 0,0:38:54.37,0:38:55.79,英文,,0,0,0,,A double sorry.
Dialogue: 0,0:38:54.37,0:38:55.79,中文,,0,0,0,,再次道歉
Dialogue: 0,0:38:55.79,0:38:56.45,英文,,0,0,0,,Triple sorry.
Dialogue: 0,0:38:55.79,0:38:56.45,中文,,0,0,0,,三次道歉
Dialogue: 0,0:38:56.45,0:38:58.61,英文,,0,0,0,,OK.
Dialogue: 0,0:38:58.61,0:39:00.23,英文,,0,0,0,,Here's depth-first paths again.
Dialogue: 0,0:38:58.61,0:39:00.23,中文,,0,0,0,,再来看一下深度优先路径
Dialogue: 0,0:39:00.23,0:39:01.47,英文,,0,0,0,,We saw this earlier.
Dialogue: 0,0:39:00.23,0:39:01.47,中文,,0,0,0,,我们之前看过这个
Dialogue: 0,0:39:01.47,0:39:11.97,英文,,0,0,0,,And so we could also think about the runtime of depth-first paths, which is, how fast is it to run this code and go through the entire graph?
Dialogue: 0,0:39:01.47,0:39:11.97,中文,,0,0,0,,那么我们也可以思考一下深度优先路径的运行时间也就是说运行这段代码并遍历整个图的速度有多快
Dialogue: 0,0:39:11.97,0:39:15.55,英文,,0,0,0,,I'm not even going to make you think about it because it's kind of gross.
Dialogue: 0,0:39:11.97,0:39:15.55,中文,,0,0,0,,我甚至不想让你去考虑因为这有点恶心
Dialogue: 0,0:39:15.55,0:39:17.39,英文,,0,0,0,,It turns out the answer is the same.
Dialogue: 0,0:39:15.55,0:39:17.39,中文,,0,0,0,,结果是一样的
Dialogue: 0,0:39:17.39,0:39:25.12,英文,,0,0,0,,It is also V plus C for mostly the same reasons that we talked about before, which is, how many vertices do you have to mark?
Dialogue: 0,0:39:17.39,0:39:25.12,中文,,0,0,0,,这也是 V + C大部分原因和我们之前讨论的一样也就是说你需要标记多少个顶点
Dialogue: 0,0:39:25.12,0:39:30.76,英文,,0,0,0,,You need to mark V vertices, because you have to go to every vertex, in the worst case, and mark it.
Dialogue: 0,0:39:25.12,0:39:30.76,中文,,0,0,0,,你需要标记 V 个顶点因为你必须去每个顶点最坏的情况下标记它
Dialogue: 0,0:39:30.76,0:39:33.10,英文,,0,0,0,,How many edges do you have to consider?
Dialogue: 0,0:39:30.76,0:39:33.10,中文,,0,0,0,,你需要考虑多少条边
Dialogue: 0,0:39:33.10,0:39:40.64,英文,,0,0,0,,That is, how many edges do you have to look at and write down that potential edge to, or check that it's marked and don't visit it again?
Dialogue: 0,0:39:33.10,0:39:40.64,中文,,0,0,0,,也就是说你需要看一下多少条边把潜在的边写下来或者检查它是否被标记不要再访问它了
Dialogue: 0,0:39:40.64,0:39:42.85,英文,,0,0,0,,Well, you need to consider E edges.
Dialogue: 0,0:39:40.64,0:39:42.85,中文,,0,0,0,,你需要考虑 E 条边
Dialogue: 0,0:39:42.85,0:39:46.79,英文,,0,0,0,,And again, Each of these could make the graph big.
Dialogue: 0,0:39:42.85,0:39:46.79,中文,,0,0,0,,而且 这些边中的每一条都可能使图形变大
Dialogue: 0,0:39:46.79,0:39:58.68,英文,,0,0,0,,So we write v plus e to remind ourselves the graph could grow big if there are tons of vertices but no edges, then all of my time is just spent marking all the vertices, and then v would dominate.
Dialogue: 0,0:39:46.79,0:39:58.68,中文,,0,0,0,,我们写下V+E来提醒自己如果顶点很多但没有边图形可能会变大那么我所有的时间都只花在标记所有顶点上然后 V 会占主导地位
Dialogue: 0,0:39:58.68,0:40:01.94,英文,,0,0,0,,Or maybe there's not a lot of vertices, and there's tons of edges.
Dialogue: 0,0:39:58.68,0:40:01.94,中文,,0,0,0,,或者可能顶点不多但有很多边
Dialogue: 0,0:40:01.94,0:40:09.01,英文,,0,0,0,,In that case, e would dominate, and all of my time would be spent looking at all the edges that come out of every vertex.
Dialogue: 0,0:40:01.94,0:40:09.01,中文,,0,0,0,,在那种情况下E 将会占主导地位我所有的时间都将花在查看每个顶点出发的所有边上
Dialogue: 0,0:40:09.01,0:40:11.27,英文,,0,0,0,,So that's the runtime for depth-first paths.
Dialogue: 0,0:40:09.01,0:40:11.27,中文,,0,0,0,,这就是深度优先路径的运行时间
Dialogue: 0,0:40:11.27,0:40:13.69,英文,,0,0,0,,Again, it's kind of unsavory.
Dialogue: 0,0:40:11.27,0:40:13.69,中文,,0,0,0,,再说一遍这有点让人不舒服
Dialogue: 0,0:40:13.69,0:40:16.03,英文,,0,0,0,,You might have to stare at it a little bit.
Dialogue: 0,0:40:13.69,0:40:16.03,中文,,0,0,0,,你可能需要多看一会儿
Dialogue: 0,0:40:16.03,0:40:16.65,英文,,0,0,0,,Sorry.
Dialogue: 0,0:40:16.03,0:40:16.65,中文,,0,0,0,,抱歉
Dialogue: 0,0:40:16.65,0:40:18.26,英文,,0,0,0,,OK.
Dialogue: 0,0:40:18.26,0:40:22.16,英文,,0,0,0,,I will not even answer this, because I think it's kind of too confusing for lecture.
Dialogue: 0,0:40:18.26,0:40:22.16,中文,,0,0,0,,我甚至不会回答这个问题因为我觉得对讲座来说太混乱了
Dialogue: 0,0:40:22.16,0:40:24.28,英文,,0,0,0,,But you can read it if you're interested.
Dialogue: 0,0:40:22.16,0:40:24.28,中文,,0,0,0,,但是如果你感兴趣的话你可以阅读它
Dialogue: 0,0:40:24.28,0:40:24.96,英文,,0,0,0,,OK.
Dialogue: 0,0:40:24.96,0:40:26.68,英文,,0,0,0,,So that's the runtime of depth-first paths.
Dialogue: 0,0:40:24.96,0:40:26.68,中文,,0,0,0,,那么这就是深度优先路径的运行时间
Dialogue: 0,0:40:26.68,0:40:32.41,英文,,0,0,0,,We will fill this with more algorithms, I guess, now, unless you have other questions.
Dialogue: 0,0:40:26.68,0:40:32.41,中文,,0,0,0,,我们会填充更多的算法进来我想现在除非你有其他问题
Dialogue: 0,0:40:32.41,0:40:34.11,英文,,0,0,0,,But I want to show you one more algorithm.
Dialogue: 0,0:40:32.41,0:40:34.11,中文,,0,0,0,,但是我想向你展示另一个算法
Dialogue: 0,0:40:34.11,0:40:35.33,英文,,0,0,0,,I think it's cool.
Dialogue: 0,0:40:34.11,0:40:35.33,中文,,0,0,0,,我觉得它很酷
Dialogue: 0,0:40:35.33,0:40:36.87,英文,,0,0,0,,So we will look at it.
Dialogue: 0,0:40:35.33,0:40:36.87,中文,,0,0,0,,我们会看一看
Dialogue: 0,0:40:36.87,0:40:40.33,英文,,0,0,0,,OK, do you remember this slide from last time, a.k.a.
Dialogue: 0,0:40:36.87,0:40:40.33,中文,,0,0,0,,你还记得上次那张幻灯片吗也就是
Dialogue: 0,0:40:40.33,0:40:42.97,英文,,0,0,0,,from 10 minutes ago?
Dialogue: 0,0:40:40.33,0:40:42.97,中文,,0,0,0,,从10分钟前
Dialogue: 0,0:40:42.97,0:40:43.75,英文,,0,0,0,,OK, good.
Dialogue: 0,0:40:42.97,0:40:43.75,中文,,0,0,0,,好的很好
Dialogue: 0,0:40:43.75,0:40:50.61,英文,,0,0,0,,So remember how we said there are many different orders in which you could traverse or iterate through a graph?
Dialogue: 0,0:40:43.75,0:40:50.61,中文,,0,0,0,,记得我们说过图中有许多不同的遍历或迭代顺序吗
Dialogue: 0,0:40:50.61,0:41:00.03,英文,,0,0,0,,For example, I showed you DFS preorder, which is you run DFS and you do something before the recursive DFS calls, you get this order.
Dialogue: 0,0:40:50.61,0:41:00.03,中文,,0,0,0,,例如我给你展示了dfs前序也就是你运行dfs并且在递归dfs调用之前做一些事情你会得到这个顺序
Dialogue: 0,0:41:00.03,0:41:03.37,英文,,0,0,0,,This would be the order in which DFS methods are called.
Dialogue: 0,0:41:00.03,0:41:03.37,中文,,0,0,0,,这将是调用dfs方法的顺序
Dialogue: 0,0:41:03.37,0:41:08.62,英文,,0,0,0,,You could also do something after the DFS methods on the neighbors are called.
Dialogue: 0,0:41:03.37,0:41:08.62,中文,,0,0,0,,你也可以在调用邻居的dfs方法之后做一些事情
Dialogue: 0,0:41:08.62,0:41:13.60,英文,,0,0,0,,That would be equivalent to this order, or the order in which the DFS calls return.
Dialogue: 0,0:41:08.62,0:41:13.60,中文,,0,0,0,,这相当于这个顺序或者dfs调用返回的顺序
Dialogue: 0,0:41:13.60,0:41:14.98,英文,,0,0,0,,And you get this order.
Dialogue: 0,0:41:13.60,0:41:14.98,中文,,0,0,0,,你就得到了这个顺序
Dialogue: 0,0:41:14.98,0:41:17.70,英文,,0,0,0,,But do you remember when we talked about trees?
Dialogue: 0,0:41:14.98,0:41:17.70,中文,,0,0,0,,但是你还记得我们谈过树的时候吗
Dialogue: 0,0:41:17.70,0:41:19.73,英文,,0,0,0,,We talked about in-order, post-order.
Dialogue: 0,0:41:17.70,0:41:19.73,中文,,0,0,0,,我们谈到了中序遍历、后序遍历
Dialogue: 0,0:41:19.73,0:41:23.57,英文,,0,0,0,,But there was one more order that I talked about very briefly.
Dialogue: 0,0:41:19.73,0:41:23.57,中文,,0,0,0,,但是还有一个顺序我简要提到过
Dialogue: 0,0:41:23.57,0:41:25.63,英文,,0,0,0,,And now I'm going to show you the graph equivalent.
Dialogue: 0,0:41:23.57,0:41:25.63,中文,,0,0,0,,现在我要给你展示等价于图的顺序
Dialogue: 0,0:41:25.63,0:41:36.38,英文,,0,0,0,,So remember in the tree, there was this level order where I said, let's go top to bottom, left to right, D, B, F, A, C, E, G. Do you remember that order?
Dialogue: 0,0:41:25.63,0:41:36.38,中文,,0,0,0,,记得在树中有这个层次顺序我说让我们从上到下从左到右DBFACEG你还记得那个顺序吗
Dialogue: 0,0:41:36.38,0:41:42.44,英文,,0,0,0,,Turns out that order also has a graph equivalent.
Dialogue: 0,0:41:36.38,0:41:42.44,中文,,0,0,0,,原来这个顺序也有一个图等价物
Dialogue: 0,0:41:42.44,0:41:51.95,英文,,0,0,0,,The graph equivalent of that level order of the tree, which is to go just layer by layer, top to bottom, that exists, and it's called breadth-first search.
Dialogue: 0,0:41:42.44,0:41:51.95,中文,,0,0,0,,树的层次顺序的图等价物也就是按层一层一层地去从顶层到底层这是存在的它叫做广度优先搜索
Dialogue: 0,0:41:51.95,0:41:58.17,英文,,0,0,0,,So we're going to try to do that level order thing from the tree, but we're going to do it on the graph.
Dialogue: 0,0:41:51.95,0:41:58.17,中文,,0,0,0,,我们要尝试在图上做那个树的层次顺序的事情但我们要在图上做
Dialogue: 0,0:41:58.17,0:42:03.26,英文,,0,0,0,,In the tree, I can think about it as, I'm going to look for all the things 0 away from the root.
Dialogue: 0,0:41:58.17,0:42:03.26,中文,,0,0,0,,在树中我可以想象成我要找的是距离根节点0的所有东西
Dialogue: 0,0:42:03.26,0:42:08.13,英文,,0,0,0,,That's the root, that's D. Then I'll look at all the things 1 away from the root, that's B and F.
Dialogue: 0,0:42:03.26,0:42:08.13,中文,,0,0,0,,这是根节点这是D然后我会看距离根节点1的所有东西那就是B和F
Dialogue: 0,0:42:08.13,0:42:14.57,英文,,0,0,0,,Then I'll look at all the things 2 away from the root, that's A, C, E, G. So I could do the same thing in the graph.
Dialogue: 0,0:42:08.13,0:42:14.57,中文,,0,0,0,,然后我会看距离根节点2的所有东西那就是A、C、E、G我在图中也可以做同样的事情
Dialogue: 0,0:42:14.57,0:42:18.31,英文,,0,0,0,,What are all the things 0 away from the source, which is S?
Dialogue: 0,0:42:14.57,0:42:18.31,中文,,0,0,0,,那么距离源头S0的所有东西是什么
Dialogue: 0,0:42:18.31,0:42:19.55,英文,,0,0,0,,Well, that's 0.
Dialogue: 0,0:42:18.31,0:42:19.55,中文,,0,0,0,,那就是0
Dialogue: 0,0:42:19.55,0:42:22.09,英文,,0,0,0,,What are all the things 1 away from the source?
Dialogue: 0,0:42:19.55,0:42:22.09,中文,,0,0,0,,离源头有多远的所有东西都是什么
Dialogue: 0,0:42:22.09,0:42:23.17,英文,,0,0,0,,That's 1.
Dialogue: 0,0:42:22.09,0:42:23.17,中文,,0,0,0,,那是1
Dialogue: 0,0:42:23.17,0:42:25.83,英文,,0,0,0,,What are all the things 2 away from the source?
Dialogue: 0,0:42:23.17,0:42:25.83,中文,,0,0,0,,离源头有多远的所有东西都是什么
Dialogue: 0,0:42:25.83,0:42:26.87,英文,,0,0,0,,Well, there's 4.
Dialogue: 0,0:42:25.83,0:42:26.87,中文,,0,0,0,,好吧有4个
Dialogue: 0,0:42:26.87,0:42:28.39,英文,,0,0,0,,It's 2 away from the source.
Dialogue: 0,0:42:26.87,0:42:28.39,中文,,0,0,0,,离源头有多远是2
Dialogue: 0,0:42:28.39,0:42:29.63,英文,,0,0,0,,And there's 2.
Dialogue: 0,0:42:28.39,0:42:29.63,中文,,0,0,0,,而且还有2个
Dialogue: 0,0:42:29.63,0:42:31.27,英文,,0,0,0,,It's 2 away from the source.
Dialogue: 0,0:42:29.63,0:42:31.27,中文,,0,0,0,,离源头有多远是2
Dialogue: 0,0:42:31.27,0:42:34.24,英文,,0,0,0,,What are all the things 3 away from the source?
Dialogue: 0,0:42:31.27,0:42:34.24,中文,,0,0,0,,从源头算起有多远是第3个
Dialogue: 0,0:42:34.24,0:42:35.64,英文,,0,0,0,,Well, 1, 2, 3, that's 3 away from the source.
Dialogue: 0,0:42:34.24,0:42:35.64,中文,,0,0,0,,123那就是离源头3个距离
Dialogue: 0,0:42:35.64,0:42:42.54,英文,,0,0,0,,1, 2, 3, that's also 3 away from the source.
Dialogue: 0,0:42:35.64,0:42:42.54,中文,,0,0,0,,123也是离源头3个距离
Dialogue: 0,0:42:42.54,0:42:47.85,英文,,0,0,0,,You can almost think about it like, these are all the things 0 away, that's 1 away, that's 2 away,
Dialogue: 0,0:42:42.54,0:42:47.85,中文,,0,0,0,,你可以将其几乎看作是这些是离开的距离为0的所有事物那是1的距离那是2的距离
Dialogue: 0,0:42:47.85,0:42:53.49,英文,,0,0,0,, those are 3 away, and then eventually, toward the end, I get to all these very far away nodes.
Dialogue: 0,0:42:47.85,0:42:53.49,中文,,0,0,0,,那些是3的距离然后最终在末尾我到达了所有这些非常远的节点
Dialogue: 0,0:42:53.49,0:42:58.59,英文,,0,0,0,,So I start with all the closer nodes, and then I iterate my way to all the further nodes.
Dialogue: 0,0:42:53.49,0:42:58.59,中文,,0,0,0,,我从所有更近的节点开始然后逐步迭代到所有更远的节点
Dialogue: 0,0:42:58.59,0:42:59.97,英文,,0,0,0,,That's BFS.
Dialogue: 0,0:42:58.59,0:42:59.97,中文,,0,0,0,,这就是BFS
Dialogue: 0,0:42:59.97,0:43:04.93,英文,,0,0,0,,We want to find an algorithm in pictures and then later in code for doing that.
Dialogue: 0,0:42:59.97,0:43:04.93,中文,,0,0,0,,我们想要找到一种在图片中然后在代码中执行这一操作的算法
Dialogue: 0,0:43:04.93,0:43:08.16,英文,,0,0,0,,OK, so if you're watching the video, you could pause me and try to figure it out.
Dialogue: 0,0:43:04.93,0:43:08.16,中文,,0,0,0,,如果你在看视频的话你可以暂停我然后试着弄明白
Dialogue: 0,0:43:08.16,0:43:12.56,英文,,0,0,0,,But since we're in person and I want you all to go home on time, I will just spoil it.
Dialogue: 0,0:43:08.16,0:43:12.56,中文,,0,0,0,,但是既然我们是面对面的而且我希望你们都能准时回家我就直接告诉你们了
Dialogue: 0,0:43:12.56,0:43:15.14,英文,,0,0,0,,But remember, I want to keep track of this order.
Dialogue: 0,0:43:12.56,0:43:15.14,中文,,0,0,0,,但是记住我想要跟踪这个顺序
Dialogue: 0,0:43:15.14,0:43:20.34,英文,,0,0,0,,I want to keep track of all these closer things first and then visit the further things later.
Dialogue: 0,0:43:15.14,0:43:20.34,中文,,0,0,0,,我想要先跟踪所有这些更接近的东西然后再访问更远的东西
Dialogue: 0,0:43:20.34,0:43:23.98,英文,,0,0,0,,OK, so here's the key idea, and it's kind of weird.
Dialogue: 0,0:43:20.34,0:43:23.98,中文,,0,0,0,,这里是关键点有点奇怪
Dialogue: 0,0:43:23.98,0:43:30.19,英文,,0,0,0,,The key idea is, you know I'm a big fan of recursion, but I do not want you to use recursion for this one time.
Dialogue: 0,0:43:23.98,0:43:30.19,中文,,0,0,0,,关键点是你知道我很喜欢递归但是这一次我不想让你用递归
Dialogue: 0,0:43:30.19,0:43:34.43,英文,,0,0,0,,And so here's the idea, which is we're going to use a queue.
Dialogue: 0,0:43:30.19,0:43:34.43,中文,,0,0,0,,这里的想法是我们要使用一个队列
Dialogue: 0,0:43:34.43,0:43:35.27,英文,,0,0,0,,And what's a queue?
Dialogue: 0,0:43:34.43,0:43:35.27,中文,,0,0,0,,什么是队列呢
Dialogue: 0,0:43:35.27,0:43:42.15,英文,,0,0,0,,Well, it's a data structure where you can add to the front, or sorry, you can add to the back, and you can remove things from the front.
Dialogue: 0,0:43:35.27,0:43:42.15,中文,,0,0,0,,它是一种数据结构你可以在前面添加或者抱歉你可以在后面添加而且你可以从前面移除东西
Dialogue: 0,0:43:42.15,0:43:44.53,英文,,0,0,0,,So it's like if you go to the grocery store.
Dialogue: 0,0:43:42.15,0:43:44.53,中文,,0,0,0,,就像是你去杂货店一样
Dialogue: 0,0:43:44.53,0:43:46.01,英文,,0,0,0,,There's a lot of store things today.
Dialogue: 0,0:43:44.53,0:43:46.01,中文,,0,0,0,,今天商店里有很多东西
Dialogue: 0,0:43:46.01,0:43:52.19,英文,,0,0,0,,You go to the grocery store or whatever, and you get a line in the back, and then people leave the line in the front.
Dialogue: 0,0:43:46.01,0:43:52.19,中文,,0,0,0,,你去杂货店或者别的地方然后你在后面排队然后人们从前面离开队伍
Dialogue: 0,0:43:52.19,0:43:56.02,英文,,0,0,0,,Or I guess if you're British, you call it a queue.
Dialogue: 0,0:43:52.19,0:43:56.02,中文,,0,0,0,,或者我猜如果你是英国人你会叫它排队
Dialogue: 0,0:43:56.02,0:43:57.14,英文,,0,0,0,,So that's the queue.
Dialogue: 0,0:43:56.02,0:43:57.14,中文,,0,0,0,,那就是队列了
Dialogue: 0,0:43:57.14,0:43:58.24,英文,,0,0,0,,It's a data structure.
Dialogue: 0,0:43:57.14,0:43:58.24,中文,,0,0,0,,这是一种数据结构
Dialogue: 0,0:43:58.24,0:44:01.72,英文,,0,0,0,,You can add things to the back, and you can remove things from the front.
Dialogue: 0,0:43:58.24,0:44:01.72,中文,,0,0,0,,你可以在后面添加东西也可以从前面移除东西
Dialogue: 0,0:44:01.72,0:44:04.00,英文,,0,0,0,,So it's like a line at the store.
Dialogue: 0,0:44:01.72,0:44:04.00,中文,,0,0,0,,就像商店里的队伍一样
Dialogue: 0,0:44:04.00,0:44:05.82,英文,,0,0,0,,So here's what we will do.
Dialogue: 0,0:44:04.00,0:44:05.82,中文,,0,0,0,,我们要做的就是这样
Dialogue: 0,0:44:05.82,0:44:10.29,英文,,0,0,0,,We will pluck or we will remove vertices from the front of the queue.
Dialogue: 0,0:44:05.82,0:44:10.29,中文,,0,0,0,,我们将从队列的前面取出或移除顶点
Dialogue: 0,0:44:10.29,0:44:15.81,英文,,0,0,0,,So when everyone gets in line, we take the people who make their way to the front of the line and then
Dialogue: 0,0:44:10.29,0:44:15.81,中文,,0,0,0,,当每个人排队时我们带走了一些走到队伍前面的人然后
Dialogue: 0,0:44:15.81,0:44:21.30,英文,,0,0,0,,For everyone who's unmarked, just like depth-first search, I mark anyone who's unmarked.
Dialogue: 0,0:44:15.81,0:44:21.30,中文,,0,0,0,,对于每个未标记的人就像深度优先搜索一样我标记任何未标记的人
Dialogue: 0,0:44:21.30,0:44:24.06,英文,,0,0,0,,I write down how to get there using the edge2 array.
Dialogue: 0,0:44:21.30,0:44:24.06,中文,,0,0,0,,我记录下如何使用 edgeTo 数组到达那里
Dialogue: 0,0:44:24.06,0:44:28.18,英文,,0,0,0,,And then I add the new vertex to the end of the queue.
Dialogue: 0,0:44:24.06,0:44:28.18,中文,,0,0,0,,然后我将新顶点添加到队列的末尾
Dialogue: 0,0:44:28.18,0:44:30.16,英文,,0,0,0,,So they get in line behind me.
Dialogue: 0,0:44:28.18,0:44:30.16,中文,,0,0,0,,他们跟在我后面排队
Dialogue: 0,0:44:30.16,0:44:37.51,英文,,0,0,0,,And this queue, this data structure, this is what's going to guarantee that I visit closer nodes before further nodes.
Dialogue: 0,0:44:30.16,0:44:37.51,中文,,0,0,0,,而这个队列这个数据结构这就是保证我先访问更近节点再访问更远节点的关键
Dialogue: 0,0:44:37.51,0:44:38.77,英文,,0,0,0,,Because I have a line.
Dialogue: 0,0:44:37.51,0:44:38.77,中文,,0,0,0,,因为我有一条队列
Dialogue: 0,0:44:38.77,0:44:42.07,英文,,0,0,0,,So all the nodes that are far away are going to get in the back of the line.
Dialogue: 0,0:44:38.77,0:44:42.07,中文,,0,0,0,,所有远处的节点都会排在队列后面
Dialogue: 0,0:44:42.07,0:44:43.85,英文,,0,0,0,,I'm going to be like, you're far away.
Dialogue: 0,0:44:42.07,0:44:43.85,中文,,0,0,0,,我会说你离得太远了
Dialogue: 0,0:44:43.85,0:44:46.54,英文,,0,0,0,,You need to go to the back of the line and wait your turn.
Dialogue: 0,0:44:43.85,0:44:46.54,中文,,0,0,0,,你得去排队末尾等轮到你
Dialogue: 0,0:44:46.54,0:44:51.44,英文,,0,0,0,,And I'm going to process all the nodes that are close before I get to all the nodes that are far.
Dialogue: 0,0:44:46.54,0:44:51.44,中文,,0,0,0,,我会先处理所有近的节点再处理所有远的节点
Dialogue: 0,0:44:51.44,0:44:53.44,英文,,0,0,0,,That's what the queue is going to guarantee.
Dialogue: 0,0:44:51.44,0:44:53.44,中文,,0,0,0,,这就是队列保证的
Dialogue: 0,0:44:53.44,0:44:55.44,英文,,0,0,0,,That's what makes breadth-first search work.
Dialogue: 0,0:44:53.44,0:44:55.44,中文,,0,0,0,,这就是宽度优先搜索能工作的原因
Dialogue: 0,0:44:55.44,0:45:00.47,英文,,0,0,0,,So even if you don't look at the slide in the demo that I'm about to show you, the key idea is I have a queue.
Dialogue: 0,0:44:55.44,0:45:00.47,中文,,0,0,0,,即使你没看我即将展示的演示中的幻灯片关键思想是我有一个队列
Dialogue: 0,0:45:00.47,0:45:09.17,英文,,0,0,0,,And the queue basically says, if you're far away, you need to get in the back of the line and wait your turn, because I'm going to process all the closer things first.
Dialogue: 0,0:45:00.47,0:45:09.17,中文,,0,0,0,,队列的基本原理是如果你离得远你需要排到队伍的后面去等你的轮次因为我会先处理所有近的事物
Dialogue: 0,0:45:09.17,0:45:09.89,英文,,0,0,0,,OK.
Dialogue: 0,0:45:09.89,0:45:12.62,英文,,0,0,0,,With all that said, let's watch it in action.
Dialogue: 0,0:45:09.89,0:45:12.62,中文,,0,0,0,,说了这么多让我们看看它的实际效果
Dialogue: 0,0:45:12.62,0:45:14.42,英文,,0,0,0,,So here's my queue.
Dialogue: 0,0:45:12.62,0:45:14.42,中文,,0,0,0,,这是我的队列
Dialogue: 0,0:45:14.42,0:45:17.52,英文,,0,0,0,,It is a very lonely queue, because there's nobody inside.
Dialogue: 0,0:45:14.42,0:45:17.52,中文,,0,0,0,,这是一个非常孤独的队列因为里面没有人
Dialogue: 0,0:45:17.52,0:45:20.94,英文,,0,0,0,,But I'm going to start by putting the starting vertex in the cube.
Dialogue: 0,0:45:17.52,0:45:20.94,中文,,0,0,0,,但我要从把起始顶点放在立方体里开始
Dialogue: 0,0:45:20.94,0:45:22.62,英文,,0,0,0,,So look, it got in line.
Dialogue: 0,0:45:20.94,0:45:22.62,中文,,0,0,0,,看它排队了
Dialogue: 0,0:45:22.62,0:45:23.51,英文,,0,0,0,,OK, great.
Dialogue: 0,0:45:22.62,0:45:23.51,中文,,0,0,0,,好的很棒
Dialogue: 0,0:45:23.51,0:45:27.62,英文,,0,0,0,,And I marked it because I don't want to visit vertices twice, just like before.
Dialogue: 0,0:45:23.51,0:45:27.62,中文,,0,0,0,,我标记了它因为我不想两次访问顶点就像以前一样
Dialogue: 0,0:45:27.62,0:45:29.40,英文,,0,0,0,,OK, so let's go to the line.
Dialogue: 0,0:45:27.62,0:45:29.40,中文,,0,0,0,,好的那我们来排队吧
Dialogue: 0,0:45:29.40,0:45:31.61,英文,,0,0,0,,We're the little cashier in the grocery store.
Dialogue: 0,0:45:29.40,0:45:31.61,中文,,0,0,0,,我们是杂货店里的小收银员
Dialogue: 0,0:45:31.61,0:45:33.75,英文,,0,0,0,,We're going to take someone from the front of the queue.
Dialogue: 0,0:45:31.61,0:45:33.75,中文,,0,0,0,,我们要拉前面排队的人出来
Dialogue: 0,0:45:33.75,0:45:34.91,英文,,0,0,0,,Well, who's in line?
Dialogue: 0,0:45:33.75,0:45:34.91,中文,,0,0,0,,那么谁在排队
Dialogue: 0,0:45:34.91,0:45:35.61,英文,,0,0,0,,Zero.
Dialogue: 0,0:45:34.91,0:45:35.61,中文,,0,0,0,,一个也没有
Dialogue: 0,0:45:35.61,0:45:36.69,英文,,0,0,0,,So it's your turn.
Dialogue: 0,0:45:35.61,0:45:36.69,中文,,0,0,0,,那么轮到你了
Dialogue: 0,0:45:36.69,0:45:41.15,英文,,0,0,0,,We're going to pull you off the queue, and we're going to consider all of your neighbors.
Dialogue: 0,0:45:36.69,0:45:41.15,中文,,0,0,0,,我们要把你从队伍里拉出来然后考虑你周围的所有人
Dialogue: 0,0:45:41.15,0:45:42.35,英文,,0,0,0,,Who are your neighbors?
Dialogue: 0,0:45:41.15,0:45:42.35,中文,,0,0,0,,你的邻居是谁
Dialogue: 0,0:45:42.35,0:45:44.61,英文,,0,0,0,,Well, you've just got one neighbor, and it's one.
Dialogue: 0,0:45:42.35,0:45:44.61,中文,,0,0,0,,你只有一个邻居就是一个
Dialogue: 0,0:45:44.61,0:45:46.09,英文,,0,0,0,,And so we'll throw you in the queue.
Dialogue: 0,0:45:44.61,0:45:46.09,中文,,0,0,0,,我们会把你放到队列里
Dialogue: 0,0:45:46.09,0:45:48.52,英文,,0,0,0,,So one, get in line and wait your turn.
Dialogue: 0,0:45:46.09,0:45:48.52,中文,,0,0,0,,一个人排队等待你的轮到
Dialogue: 0,0:45:48.52,0:45:50.34,英文,,0,0,0,,So look, it's in the queue.
Dialogue: 0,0:45:48.52,0:45:50.34,中文,,0,0,0,,看它在队列里
Dialogue: 0,0:45:50.34,0:45:54.18,英文,,0,0,0,,And we'll also write down how to get to 1, just like we did from last time.
Dialogue: 0,0:45:50.34,0:45:54.18,中文,,0,0,0,,我们还会写下如何去到1就像我们上次做的那样
Dialogue: 0,0:45:54.18,0:45:57.48,英文,,0,0,0,,So we'll use Edge2 to remind ourselves how to get to 1.
Dialogue: 0,0:45:54.18,0:45:57.48,中文,,0,0,0,,我们会使用edgeTo来提醒自己如何去到1
Dialogue: 0,0:45:57.48,0:46:01.38,英文,,0,0,0,,If you want to, you can also keep track of the distance to each of these nodes.
Dialogue: 0,0:45:57.48,0:46:01.38,中文,,0,0,0,,如果你想的话你也可以跟踪到每个节点的距离
Dialogue: 0,0:46:01.38,0:46:04.88,英文,,0,0,0,,Although, in the interest of me talking, I will not talk about it.
Dialogue: 0,0:46:01.38,0:46:04.88,中文,,0,0,0,,但是出于我说话的考虑我不会谈论它
Dialogue: 0,0:46:04.88,0:46:07.30,英文,,0,0,0,,But you can also do this if you want.
Dialogue: 0,0:46:04.88,0:46:07.30,中文,,0,0,0,,但是如果你想的话你也可以这样做
Dialogue: 0,0:46:07.30,0:46:09.58,英文,,0,0,0,,OK, so 1's in line.
Dialogue: 0,0:46:07.30,0:46:09.58,中文,,0,0,0,,好的1在排队
Dialogue: 0,0:46:09.58,0:46:11.38,英文,,0,0,0,,So I finish processing 0.
Dialogue: 0,0:46:09.58,0:46:11.38,中文,,0,0,0,,我完成了处理0
Dialogue: 0,0:46:11.38,0:46:12.34,英文,,0,0,0,,What's next?
Dialogue: 0,0:46:11.38,0:46:12.34,中文,,0,0,0,,接下来呢
Dialogue: 0,0:46:12.34,0:46:14.80,英文,,0,0,0,,I need to go to the queue and take the next person.
Dialogue: 0,0:46:12.34,0:46:14.80,中文,,0,0,0,,我需要去队列然后接下来处理下一个人
Dialogue: 0,0:46:14.80,0:46:16.40,英文,,0,0,0,,So who's the next person in line?
Dialogue: 0,0:46:14.80,0:46:16.40,中文,,0,0,0,,那么下一个排队的人是谁
Dialogue: 0,0:46:16.40,0:46:16.84,英文,,0,0,0,,Well, it's 1.
Dialogue: 0,0:46:16.40,0:46:16.84,中文,,0,0,0,,是1
Dialogue: 0,0:46:16.84,0:46:18.20,英文,,0,0,0,,OK, great.
Dialogue: 0,0:46:16.84,0:46:18.20,中文,,0,0,0,,好的太棒了
Dialogue: 0,0:46:18.20,0:46:20.31,英文,,0,0,0,,So I take 1.
Dialogue: 0,0:46:18.20,0:46:20.31,中文,,0,0,0,,我拿1
Dialogue: 0,0:46:20.31,0:46:22.75,英文,,0,0,0,,I mark it, and I consider all of its neighbors.
Dialogue: 0,0:46:20.31,0:46:22.75,中文,,0,0,0,,我标记它然后考虑它的所有邻居
Dialogue: 0,0:46:22.75,0:46:24.37,英文,,0,0,0,,Who are its neighbors?
Dialogue: 0,0:46:22.75,0:46:24.37,中文,,0,0,0,,它的邻居是谁
Dialogue: 0,0:46:24.37,0:46:25.64,英文,,0,0,0,,4 and 2.
Dialogue: 0,0:46:24.37,0:46:25.64,中文,,0,0,0,,4和2
Dialogue: 0,0:46:25.64,0:46:28.52,英文,,0,0,0,,So 4 and 2, get in line and wait your turn.
Dialogue: 0,0:46:25.64,0:46:28.52,中文,,0,0,0,,所以 4 和 2排队等候
Dialogue: 0,0:46:28.52,0:46:29.62,英文,,0,0,0,,So there they are.
Dialogue: 0,0:46:28.52,0:46:29.62,中文,,0,0,0,,它们在那里
Dialogue: 0,0:46:29.62,0:46:31.62,英文,,0,0,0,,OK, here comes the interesting part.
Dialogue: 0,0:46:29.62,0:46:31.62,中文,,0,0,0,,这里就要来了有趣的部分
Dialogue: 0,0:46:31.62,0:46:34.94,英文,,0,0,0,,So I'm going to go to the queue, take the next person in line.
Dialogue: 0,0:46:31.62,0:46:34.94,中文,,0,0,0,,我要去排队把下一个人接过来
Dialogue: 0,0:46:34.94,0:46:35.44,英文,,0,0,0,,Who is it?
Dialogue: 0,0:46:34.94,0:46:35.44,中文,,0,0,0,,是谁
Dialogue: 0,0:46:35.44,0:46:36.40,英文,,0,0,0,,It's 2.
Dialogue: 0,0:46:35.44,0:46:36.40,中文,,0,0,0,,是2
Dialogue: 0,0:46:36.40,0:46:36.98,英文,,0,0,0,,So I take 2.
Dialogue: 0,0:46:36.40,0:46:36.98,中文,,0,0,0,,我拿2
Dialogue: 0,0:46:36.98,0:46:38.10,英文,,0,0,0,,OK, great.
Dialogue: 0,0:46:36.98,0:46:38.10,中文,,0,0,0,,好的太棒了
Dialogue: 0,0:46:38.10,0:46:40.88,英文,,0,0,0,,I mark it, and I consider all of its neighbors.
Dialogue: 0,0:46:38.10,0:46:40.88,中文,,0,0,0,,我标记它并考虑它所有的邻居
Dialogue: 0,0:46:40.88,0:46:43.34,英文,,0,0,0,,Now look at this neighbor right here, 5.
Dialogue: 0,0:46:40.88,0:46:43.34,中文,,0,0,0,,现在看看这个邻居是5
Dialogue: 0,0:46:43.34,0:46:44.70,英文,,0,0,0,,Is 5 close to 0?
Dialogue: 0,0:46:43.34,0:46:44.70,中文,,0,0,0,,5离0近吗
Dialogue: 0,0:46:44.70,0:46:46.28,英文,,0,0,0,,I think it's pretty far from 0.
Dialogue: 0,0:46:44.70,0:46:46.28,中文,,0,0,0,,我觉得它离0相当远
Dialogue: 0,0:46:46.28,0:46:47.58,英文,,0,0,0,,So here's the key idea.
Dialogue: 0,0:46:46.28,0:46:47.58,中文,,0,0,0,,这是关键点
Dialogue: 0,0:46:47.58,0:46:51.59,英文,,0,0,0,,This is the moment that you'll see breadth-first search work its magic.
Dialogue: 0,0:46:47.58,0:46:51.59,中文,,0,0,0,,这就是你将看到广度优先搜索发挥魔力的时刻
Dialogue: 0,0:46:51.59,0:46:53.57,英文,,0,0,0,,I'm going to put 5 on the queue.
Dialogue: 0,0:46:51.59,0:46:53.57,中文,,0,0,0,,我要把5放在队列里
Dialogue: 0,0:46:53.57,0:46:55.07,英文,,0,0,0,,But where am I going to put it?
Dialogue: 0,0:46:53.57,0:46:55.07,中文,,0,0,0,,但是我要把它放在哪里呢
Dialogue: 0,0:46:55.07,0:46:55.87,英文,,0,0,0,,Ready for this?
Dialogue: 0,0:46:55.07,0:46:55.87,中文,,0,0,0,,准备好了吗
Dialogue: 0,0:46:55.87,0:46:56.63,英文,,0,0,0,,Look at 5.
Dialogue: 0,0:46:55.87,0:46:56.63,中文,,0,0,0,,看看5
Dialogue: 0,0:46:56.63,0:46:58.07,英文,,0,0,0,,It's in the back of the queue.
Dialogue: 0,0:46:56.63,0:46:58.07,中文,,0,0,0,,它在队列的后面
Dialogue: 0,0:46:58.07,0:47:00.30,英文,,0,0,0,,I'm going to tell 5, wait your turn.
Dialogue: 0,0:46:58.07,0:47:00.30,中文,,0,0,0,,我要告诉5等着轮到你
Dialogue: 0,0:47:00.30,0:47:01.62,英文,,0,0,0,,You are far away.
Dialogue: 0,0:47:00.30,0:47:01.62,中文,,0,0,0,,你离得很远
Dialogue: 0,0:47:01.62,0:47:04.44,英文,,0,0,0,,I want to process the closer things, like 2 and 4.
Dialogue: 0,0:47:01.62,0:47:04.44,中文,,0,0,0,,我想处理更接近的事情比如2和4
Dialogue: 0,0:47:04.44,0:47:08.06,英文,,0,0,0,,So 5, you got to get in the back of the line and wait your turn.
Dialogue: 0,0:47:04.44,0:47:08.06,中文,,0,0,0,,所以5你得排到队尾等着轮到你
Dialogue: 0,0:47:08.06,0:47:12.03,英文,,0,0,0,,I need to finish processing 2 and 4, because they were closer.
Dialogue: 0,0:47:08.06,0:47:12.03,中文,,0,0,0,,我需要先处理2和4因为它们更靠近
Dialogue: 0,0:47:12.03,0:47:12.85,英文,,0,0,0,,That's the key idea.
Dialogue: 0,0:47:12.03,0:47:12.85,中文,,0,0,0,,这就是关键思想
Dialogue: 0,0:47:12.85,0:47:15.17,英文,,0,0,0,,So look, 2 and 4 are in the queue.
Dialogue: 0,0:47:12.85,0:47:15.17,中文,,0,0,0,,看2和4在队列里
Dialogue: 0,0:47:15.17,0:47:19.43,英文,,0,0,0,,And when I put 5 in the queue, it goes in the back, because it's got to wait its turn.
Dialogue: 0,0:47:15.17,0:47:19.43,中文,,0,0,0,,当我把5放入队列时它会排到后面因为它必须等待轮到它
Dialogue: 0,0:47:19.43,0:47:25.52,英文,,0,0,0,,I do not want to process 5 until I'm done taking care of 2 and 4, because those were closer.
Dialogue: 0,0:47:19.43,0:47:25.52,中文,,0,0,0,,在我处理完2和4之前我不想处理5因为它们更接近
Dialogue: 0,0:47:25.52,0:47:27.30,英文,,0,0,0,,So let's finish taking care of 4.
Dialogue: 0,0:47:25.52,0:47:27.30,中文,,0,0,0,,那么我们来完成处理 4
Dialogue: 0,0:47:27.30,0:47:28.74,英文,,0,0,0,,So I take 4 off the queue.
Dialogue: 0,0:47:27.30,0:47:28.74,中文,,0,0,0,,然后我从队列中取出 4
Dialogue: 0,0:47:28.74,0:47:31.08,英文,,0,0,0,,I look for its unmarked neighbors, which is 3.
Dialogue: 0,0:47:28.74,0:47:31.08,中文,,0,0,0,,我寻找它的未标记邻居即 3
Dialogue: 0,0:47:31.08,0:47:33.02,英文,,0,0,0,,And I put 3 on the queue and look again.
Dialogue: 0,0:47:31.08,0:47:33.02,中文,,0,0,0,,然后我将 3 放入队列并再次查找
Dialogue: 0,0:47:33.02,0:47:35.10,英文,,0,0,0,,So 3, get in line.
Dialogue: 0,0:47:33.02,0:47:35.10,中文,,0,0,0,,那么 3排队吧
Dialogue: 0,0:47:35.10,0:47:36.50,英文,,0,0,0,,You need to wait your turn.
Dialogue: 0,0:47:35.10,0:47:36.50,中文,,0,0,0,,你需要等待你的轮次
Dialogue: 0,0:47:36.50,0:47:37.16,英文,,0,0,0,,OK.
Dialogue: 0,0:47:37.16,0:47:39.04,英文,,0,0,0,,So now 5 and 3 are in the queue.
Dialogue: 0,0:47:37.16,0:47:39.04,中文,,0,0,0,,现在5和3在队列里
Dialogue: 0,0:47:39.04,0:47:40.04,英文,,0,0,0,,I take 5.
Dialogue: 0,0:47:39.04,0:47:40.04,中文,,0,0,0,,我拿走5
Dialogue: 0,0:47:40.04,0:47:41.81,英文,,0,0,0,,And again.
Dialogue: 0,0:47:40.04,0:47:41.81,中文,,0,0,0,,再来一次
Dialogue: 0,0:47:41.81,0:47:43.57,英文,,0,0,0,,5 has two neighbors, 6 and 8.
Dialogue: 0,0:47:41.81,0:47:43.57,中文,,0,0,0,,5有两个邻居6和8
Dialogue: 0,0:47:43.57,0:47:46.09,英文,,0,0,0,,And look, they need to wait their turn.
Dialogue: 0,0:47:43.57,0:47:46.09,中文,,0,0,0,,看他们需要等待轮到他们
Dialogue: 0,0:47:46.09,0:47:47.03,英文,,0,0,0,,That's the key idea.
Dialogue: 0,0:47:46.09,0:47:47.03,中文,,0,0,0,,这就是关键思想
Dialogue: 0,0:47:47.03,0:47:49.72,英文,,0,0,0,,That's the invariant that makes this work.
Dialogue: 0,0:47:47.03,0:47:49.72,中文,,0,0,0,,这就是使这个工作的不变量
Dialogue: 0,0:47:49.72,0:47:58.42,英文,,0,0,0,,So the invariant that makes this work is that everybody who gets queued, they need to go to the back and wait their turn, because I've got to process all the closer nodes first.
Dialogue: 0,0:47:49.72,0:47:58.42,中文,,0,0,0,,使这个工作的不变量是每个进入队列的人都需要到队尾等待自己的轮次因为我必须先处理所有更近的节点
Dialogue: 0,0:47:58.42,0:48:00.10,英文,,0,0,0,,So I process 3.
Dialogue: 0,0:47:58.42,0:48:00.10,中文,,0,0,0,,我处理3
Dialogue: 0,0:48:00.10,0:48:01.26,英文,,0,0,0,,OK, great.
Dialogue: 0,0:48:00.10,0:48:01.26,中文,,0,0,0,,好的太棒了
Dialogue: 0,0:48:01.26,0:48:04.06,英文,,0,0,0,,3 has no neighbors, so no one goes in the queue.
Dialogue: 0,0:48:01.26,0:48:04.06,中文,,0,0,0,,3没有邻居所以没有人进入队列
Dialogue: 0,0:48:04.06,0:48:06.23,英文,,0,0,0,,Everyone's marked, so no one goes on the queue.
Dialogue: 0,0:48:04.06,0:48:06.23,中文,,0,0,0,,每个人都标记了所以没有人进入队列
Dialogue: 0,0:48:06.23,0:48:07.19,英文,,0,0,0,,OK, who's next?
Dialogue: 0,0:48:06.23,0:48:07.19,中文,,0,0,0,,接下来是谁
Dialogue: 0,0:48:07.19,0:48:07.95,英文,,0,0,0,,Six.
Dialogue: 0,0:48:07.19,0:48:07.95,中文,,0,0,0,,六
Dialogue: 0,0:48:07.95,0:48:09.51,英文,,0,0,0,,I take six off the queue.
Dialogue: 0,0:48:07.95,0:48:09.51,中文,,0,0,0,,我从队列中减去六个
Dialogue: 0,0:48:09.51,0:48:11.07,英文,,0,0,0,,I add seven to the back.
Dialogue: 0,0:48:09.51,0:48:11.07,中文,,0,0,0,,我在后面添加七个
Dialogue: 0,0:48:11.07,0:48:12.59,英文,,0,0,0,,I process eight.
Dialogue: 0,0:48:11.07,0:48:12.59,中文,,0,0,0,,我处理八个
Dialogue: 0,0:48:12.59,0:48:15.13,英文,,0,0,0,,There's no neighbor, so I don't add anybody to the queue.
Dialogue: 0,0:48:12.59,0:48:15.13,中文,,0,0,0,,没有邻居所以我不会向队列中添加任何人
Dialogue: 0,0:48:15.13,0:48:16.45,英文,,0,0,0,,I process seven.
Dialogue: 0,0:48:15.13,0:48:16.45,中文,,0,0,0,,我处理七个
Dialogue: 0,0:48:16.45,0:48:17.58,英文,,0,0,0,,There's no one to add.
Dialogue: 0,0:48:16.45,0:48:17.58,中文,,0,0,0,,没有人可添加
Dialogue: 0,0:48:17.58,0:48:18.80,英文,,0,0,0,,The queue is empty.
Dialogue: 0,0:48:17.58,0:48:18.80,中文,,0,0,0,,队列为空
Dialogue: 0,0:48:18.80,0:48:21.26,英文,,0,0,0,,Everyone is marked, and we're done.
Dialogue: 0,0:48:18.80,0:48:21.26,中文,,0,0,0,,每个人都标记好了我们完成了
Dialogue: 0,0:48:21.26,0:48:25.66,英文,,0,0,0,,OK, one final thing I will say about the invariants before you all go.
Dialogue: 0,0:48:21.26,0:48:25.66,中文,,0,0,0,,关于不变量我最后要说的一件事情
Dialogue: 0,0:48:25.66,0:48:32.24,英文,,0,0,0,,Right here, I will admit this invariant is a little bit hard to see with a graph so small, but I encourage you to go home and think about it.
Dialogue: 0,0:48:25.66,0:48:32.24,中文,,0,0,0,,就在这里我要承认这个不变量有点难以在这么小的图上看出来但我鼓励你们回家去好好想想
Dialogue: 0,0:48:32.24,0:48:42.96,英文,,0,0,0,,The invariant that really makes breadth-first search work, I kind of said it very generally when I said nodes that are far away, they get thrown to the back of the queue so they can wait their turn.
Dialogue: 0,0:48:32.24,0:48:42.96,中文,,0,0,0,,真正让广度优先搜索起作用的不变量我在说的时候可能有点笼统我说的是远离的节点会被扔到队列的后面等待它们的轮次
Dialogue: 0,0:48:42.96,0:48:47.23,英文,,0,0,0,,Another way of saying that more formally is that when you're on the queue,
Dialogue: 0,0:48:42.96,0:48:47.23,中文,,0,0,0,,更正式地说当你在队列上时
Dialogue: 0,0:48:47.23,0:48:52.29,英文,,0,0,0,,You are either distance k or k plus 1 away from the source.
Dialogue: 0,0:48:47.23,0:48:52.29,中文,,0,0,0,,你要么距离源节点是 k要么是 k 加 1
Dialogue: 0,0:48:52.29,0:48:58.45,英文,,0,0,0,,So for example, let's say I have a queue, and it's got all the people who are three away from the source.
Dialogue: 0,0:48:52.29,0:48:58.45,中文,,0,0,0,,比如说假设我有一个队列里面都是距离源节点三步远的人
Dialogue: 0,0:48:58.45,0:48:59.11,英文,,0,0,0,,So what am I going to do?
Dialogue: 0,0:48:58.45,0:48:59.11,中文,,0,0,0,,那么我要做什么呢
Dialogue: 0,0:48:59.11,0:49:01.15,英文,,0,0,0,,I'm going to take someone who's three away from the source.
Dialogue: 0,0:48:59.11,0:49:01.15,中文,,0,0,0,,我要从源头上拿走距离为三的人
Dialogue: 0,0:49:01.15,0:49:02.81,英文,,0,0,0,,I'm going to pluck them off the queue.
Dialogue: 0,0:49:01.15,0:49:02.81,中文,,0,0,0,,我要把他们从队列中取出来
Dialogue: 0,0:49:02.81,0:49:05.39,英文,,0,0,0,,I'm going to throw all of their neighbors.
Dialogue: 0,0:49:02.81,0:49:05.39,中文,,0,0,0,,我要把他们所有的邻居都抛出去
Dialogue: 0,0:49:05.39,0:49:09.09,英文,,0,0,0,,And if you're three away, then all of your neighbors are four away.
Dialogue: 0,0:49:05.39,0:49:09.09,中文,,0,0,0,,如果你距离为三那么你所有的邻居就是距离为四的
Dialogue: 0,0:49:09.09,0:49:12.70,英文,,0,0,0,,So a bunch of people with distance 4 are going to get thrown on the queue.
Dialogue: 0,0:49:09.09,0:49:12.70,中文,,0,0,0,,一堆距离为 4 的人将会被抛到队列上
Dialogue: 0,0:49:12.70,0:49:16.78,英文,,0,0,0,,And they have to wait their turn, because I need to process someone else who's 3 away.
Dialogue: 0,0:49:12.70,0:49:16.78,中文,,0,0,0,,而且他们必须等待他们的轮次因为我需要处理距离为 3 的其他人
Dialogue: 0,0:49:16.78,0:49:19.54,英文,,0,0,0,,So I take the next person who's distance 3.
Dialogue: 0,0:49:16.78,0:49:19.54,中文,,0,0,0,,我选择下一个距离为3的人
Dialogue: 0,0:49:19.54,0:49:21.02,英文,,0,0,0,,I consider all of its neighbors.
Dialogue: 0,0:49:19.54,0:49:21.02,中文,,0,0,0,,我考虑它的所有邻居
Dialogue: 0,0:49:21.02,0:49:23.53,英文,,0,0,0,,And how far are all of its neighbors?
Dialogue: 0,0:49:21.02,0:49:23.53,中文,,0,0,0,,那么它的所有邻居有多远
Dialogue: 0,0:49:23.53,0:49:23.95,英文,,0,0,0,,4.
Dialogue: 0,0:49:23.53,0:49:23.95,中文,,0,0,0,,4
Dialogue: 0,0:49:23.95,0:49:25.89,英文,,0,0,0,,So they all go to the end of the queue.
Dialogue: 0,0:49:23.95,0:49:25.89,中文,,0,0,0,,它们都排到队列的末尾
Dialogue: 0,0:49:25.89,0:49:28.17,英文,,0,0,0,,And I process someone else who's distance 3.
Dialogue: 0,0:49:25.89,0:49:28.17,中文,,0,0,0,,然后我处理另一个距离为3的人
Dialogue: 0,0:49:28.17,0:49:30.91,英文,,0,0,0,,I throw a bunch of people who are distance 4 on the queue.
Dialogue: 0,0:49:28.17,0:49:30.91,中文,,0,0,0,,我将距离为4的一堆人扔进队列
Dialogue: 0,0:49:30.91,0:49:35.96,英文,,0,0,0,,So at any given time, when I'm running BFS, I have tons of people who are distance 3.
Dialogue: 0,0:49:30.91,0:49:35.96,中文,,0,0,0,,无论何时当我执行BFS时都会有大量距离为3的人
Dialogue: 0,0:49:35.96,0:49:37.86,英文,,0,0,0,,I take them off the queue one by one.
Dialogue: 0,0:49:35.96,0:49:37.86,中文,,0,0,0,,我一个接一个地把他们从队列中取出
Dialogue: 0,0:49:37.86,0:49:43.40,英文,,0,0,0,,As I take them off the queue, I put all of their neighbors, who are distance 4, in the back of the line.
Dialogue: 0,0:49:37.86,0:49:43.40,中文,,0,0,0,,当我把他们从队列中取出时我会把所有距离为4的邻居放到队尾
Dialogue: 0,0:49:43.40,0:49:48.90,英文,,0,0,0,,And only after I finish processing all the people who are 3 away, then who's next up?
Dialogue: 0,0:49:43.40,0:49:48.90,中文,,0,0,0,,只有在我处理完所有距离为3的人之后下一个是谁呢
Dialogue: 0,0:49:48.90,0:49:49.94,英文,,0,0,0,,The person who's 4 away.
Dialogue: 0,0:49:48.90,0:49:49.94,中文,,0,0,0,,距离为4的人
Dialogue: 0,0:49:49.94,0:49:51.17,英文,,0,0,0,,So now it's your turn.
Dialogue: 0,0:49:49.94,0:49:51.17,中文,,0,0,0,,现在轮到你了
Dialogue: 0,0:49:51.17,0:49:57.51,英文,,0,0,0,,I take the person who's 4 away, and I take all of its neighbors, who are 5 away, and I put them on the fringe.
Dialogue: 0,0:49:51.17,0:49:57.51,中文,,0,0,0,,我取出距离为4的人再取出所有距离为5的邻居把他们放到边缘
Dialogue: 0,0:49:57.51,0:50:04.03,英文,,0,0,0,,And so now I'm processing people who are distance 4, and I'm throwing a bunch of people who are distance 5 on the fringe.
Dialogue: 0,0:49:57.51,0:50:04.03,中文,,0,0,0,,现在我正在处理距离为4的人而且我把距离为5的一堆人扔到边缘
Dialogue: 0,0:50:04.03,0:50:07.21,英文,,0,0,0,,That is what this invariant says in some more words.
Dialogue: 0,0:50:04.03,0:50:07.21,中文,,0,0,0,,这就是这个不变量用更多的话说的意思
Dialogue: 0,0:50:07.21,0:50:11.48,英文,,0,0,0,,So at any given time, you have a bunch of people who are distance, say, 4.
Dialogue: 0,0:50:07.21,0:50:11.48,中文,,0,0,0,,在任何给定的时刻你都有一堆距离为4的人
Dialogue: 0,0:50:11.48,0:50:12.42,英文,,0,0,0,,I'm processing them.
Dialogue: 0,0:50:11.48,0:50:12.42,中文,,0,0,0,,我在处理他们
Dialogue: 0,0:50:12.42,0:50:17.18,英文,,0,0,0,,And as I process all the people distance 4, I throw a bunch of nodes that are distance 5.
Dialogue: 0,0:50:12.42,0:50:17.18,中文,,0,0,0,,当我处理所有距离为4的人时我会扔掉一堆距离为5的节点
Dialogue: 0,0:50:17.18,0:50:22.15,英文,,0,0,0,,Once I finish all the people who are distance 4, now it's time to process all the people who are distance 5.
Dialogue: 0,0:50:17.18,0:50:22.15,中文,,0,0,0,,一旦我完成了所有距离为4的人现在是时候处理所有距离为5的人了
Dialogue: 0,0:50:22.15,0:50:25.97,英文,,0,0,0,,And as I do that, I go and I throw a bunch of people with distance 6.
Dialogue: 0,0:50:22.15,0:50:25.97,中文,,0,0,0,,当我这样做时我会去扔一堆距离为6的人
Dialogue: 0,0:50:25.97,0:50:27.21,英文,,0,0,0,,at the end of the cube.
Dialogue: 0,0:50:25.97,0:50:27.21,中文,,0,0,0,,在方块的尽头
Dialogue: 0,0:50:27.21,0:50:28.29,英文,,0,0,0,,So that's the idea.
Dialogue: 0,0:50:27.21,0:50:28.29,中文,,0,0,0,,这就是想法
Dialogue: 0,0:50:28.29,0:50:36.86,英文,,0,0,0,,And again, although I didn't talk about it in great detail, as I visit every node, I can write down the edge to, which tells me how I got to that node.
Dialogue: 0,0:50:28.29,0:50:36.86,中文,,0,0,0,,再说一遍虽然我没有详细讨论它但当我访问每个节点时我可以写下到达该节点的边这告诉我如何到达该节点
Dialogue: 0,0:50:36.86,0:50:39.32,英文,,0,0,0,,And that's how I represent all the paths.
Dialogue: 0,0:50:36.86,0:50:39.32,中文,,0,0,0,,这就是我表示所有路径的方式
Dialogue: 0,0:50:39.32,0:50:43.27,英文,,0,0,0,,And if I wanted to, I could also keep track of the distance to every node.
Dialogue: 0,0:50:39.32,0:50:43.27,中文,,0,0,0,,如果我愿意我也可以跟踪到每个节点的距离
Dialogue: 0,0:50:43.27,0:50:47.29,英文,,0,0,0,,So I could write down how far it was to get to that particular node.
Dialogue: 0,0:50:43.27,0:50:47.29,中文,,0,0,0,,我可以写下到达特定节点的距离有多远
Dialogue: 0,0:50:47.29,0:50:50.01,英文,,0,0,0,,I will not even read this because of time.
Dialogue: 0,0:50:47.29,0:50:50.01,中文,,0,0,0,,由于时间原因我甚至不会读这个
Dialogue: 0,0:50:50.01,0:50:51.91,英文,,0,0,0,,But if you're interested, you can check this out.
Dialogue: 0,0:50:50.01,0:50:51.91,中文,,0,0,0,,但如果你感兴趣的话你可以看看这个
Dialogue: 0,0:50:51.91,0:50:55.19,英文,,0,0,0,,It's just pseudocode for what I just said in words.
Dialogue: 0,0:50:51.91,0:50:55.19,中文,,0,0,0,,这只是我刚刚用文字说过的伪代码
Dialogue: 0,0:50:55.19,0:50:57.11,英文,,0,0,0,,I will not even talk about the runtime.
Dialogue: 0,0:50:55.19,0:50:57.11,中文,,0,0,0,,我甚至不会谈论运行时
Dialogue: 0,0:50:57.11,0:51:01.94,英文,,0,0,0,,But it's kind of the same thing as what we saw before, which is there are V vertices to consider.
Dialogue: 0,0:50:57.11,0:51:01.94,中文,,0,0,0,,但这与我们之前看到的东西有点类似也就是有 V 个顶点要考虑
Dialogue: 0,0:51:01.94,0:51:08.32,英文,,0,0,0,,That is, there are V vertices that are going to come off the fringe, which is a list of vertices that get in line.
Dialogue: 0,0:51:01.94,0:51:08.32,中文,,0,0,0,,也就是说有 V 个顶点要从边缘出来这是一个要排队的顶点列表
Dialogue: 0,0:51:08.32,0:51:12.02,英文,,0,0,0,,And there are E edges that I have to consider and mark.
Dialogue: 0,0:51:08.32,0:51:12.02,中文,,0,0,0,,还有 E 条边我必须考虑和标记
Dialogue: 0,0:51:12.02,0:51:13.15,英文,,0,0,0,,OK.
Dialogue: 0,0:51:13.15,0:51:15.09,英文,,0,0,0,,So I guess that's it for today.
Dialogue: 0,0:51:13.15,0:51:15.09,中文,,0,0,0,,我想今天就到这里吧
Dialogue: 0,0:51:15.09,0:51:21.58,英文,,0,0,0,,Remember, my favorite picture are decisions for how to implement graphs.
Dialogue: 0,0:51:15.09,0:51:21.58,中文,,0,0,0,,记住我最喜欢的图片是关于如何实现图形的决策
Dialogue: 0,0:51:21.58,0:51:22.56,英文,,0,0,0,,Do I use this?
Dialogue: 0,0:51:21.58,0:51:22.56,中文,,0,0,0,,我要用这个吗
Dialogue: 0,0:51:22.56,0:51:23.50,英文,,0,0,0,,Do I use this?
Dialogue: 0,0:51:22.56,0:51:23.50,中文,,0,0,0,,我要用这个吗
Dialogue: 0,0:51:23.50,0:51:27.68,英文,,0,0,0,,It'll have a huge effect on the runtime for our users.
Dialogue: 0,0:51:23.50,0:51:27.68,中文,,0,0,0,,这将对我们的用户运行时产生巨大的影响
Dialogue: 0,0:51:27.68,0:51:28.72,英文,,0,0,0,,OK, that's it.
Dialogue: 0,0:51:27.68,0:51:28.72,中文,,0,0,0,,好的就这样了
Dialogue: 0,0:51:28.72,0:51:31.42,英文,,0,0,0,,See you next time.
Dialogue: 0,0:51:28.72,0:51:31.42,中文,,0,0,0,,下次见
Dialogue: 0,0:51:31.42,0:51:32.68,英文,,0,0,0,,Oh, I didn't get this slide.
Dialogue: 0,0:51:31.42,0:51:32.68,中文,,0,0,0,,哦我没弄懂这张幻灯片
Dialogue: 0,0:51:32.68,0:51:33.66,英文,,0,0,0,,OK.
Dialogue: 0,0:51:33.66,0:51:34.30,英文,,0,0,0,,Well, that's OK.
Dialogue: 0,0:51:33.66,0:51:34.30,中文,,0,0,0,,那没关系
Dialogue: 0,0:51:34.30,0:51:38.91,英文,,0,0,0,,I think you can figure out this slide on your own for the folks on the recording if you wanted to.
Dialogue: 0,0:51:34.30,0:51:38.91,中文,,0,0,0,,我觉得你可以自己弄懂这张幻灯片如果你想的话对于录制视频的观众
Dialogue: 0,0:51:38.91,0:51:40.43,英文,,0,0,0,,OK.
Dialogue: 0,0:51:38.91,0:51:40.43,中文,,0,0,0,,好的
Dialogue: 0,0:51:40.43,0:51:40.75,英文,,0,0,0,,Goodbye.
Dialogue: 0,0:51:40.43,0:51:40.75,中文,,0,0,0,,再见
