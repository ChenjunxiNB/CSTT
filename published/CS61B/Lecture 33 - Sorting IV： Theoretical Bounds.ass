[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 3
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Audio File: D:/python_code/video_tool/video_tool/result/cs61b/Lecture 31 - Software Engineering II.mp4
Video File: D:/python_code/video_tool/video_tool/result/cs61b/Lecture 31 - Software Engineering II.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.750000
Scroll Position: 522
Active Line: 528
Video Position: 3959

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,14,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.33333,1.33333,2,6,6,8,1
Style: 英文,Arial,24,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,2,2,6,1
Style: 中文,微软雅黑,38,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,2,2,20,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
Dialogue: 0,0:00:04.53,0:00:08.47,英文,,0,0,0,,Let's get started.
Dialogue: 0,0:00:04.53,0:00:08.47,中文,,0,0,0,,我们开始吧
Dialogue: 0,0:00:08.47,0:00:11.30,英文,,0,0,0,,Oops, I have forgotten to change everything from fall 23 to spring 24.
Dialogue: 0,0:00:08.47,0:00:11.30,中文,,0,0,0,,哎呀 我忘了把所有秋季 23 改成春季 24 了
Dialogue: 0,0:00:11.30,0:00:21.24,英文,,0,0,0,,Yeah, so I'm just going to Control-H, fall 2023, spring 2024.
Dialogue: 0,0:00:11.30,0:00:21.24,中文,,0,0,0,,是的 所以我只需要按 CoNtrol-H 查找秋季 2023 替换成春季 2024
Dialogue: 0,0:00:21.24,0:00:21.54,英文,,0,0,0,,Replace all.
Dialogue: 0,0:00:21.24,0:00:21.54,中文,,0,0,0,,全部替换
Dialogue: 0,0:00:21.54,0:00:34.05,英文,,0,0,0,,All right.
Dialogue: 0,0:00:21.54,0:00:34.05,中文,,0,0,0,,
Dialogue: 0,0:00:34.05,0:00:38.50,英文,,0,0,0,,Today we're going to go a bit more into the mathy side of things, of computer science.
Dialogue: 0,0:00:34.05,0:00:38.50,中文,,0,0,0,,今天我们来深入探讨一下计算机科学中偏数学的部分
Dialogue: 0,0:00:38.50,0:00:43.00,英文,,0,0,0,,Let's take kind of a quick look at what we've done so far.
Dialogue: 0,0:00:38.50,0:00:43.00,中文,,0,0,0,,让我们快速回顾一下我们目前为止所学的内容
Dialogue: 0,0:00:43.00,0:00:46.64,英文,,0,0,0,,So, so far, we've looked at a few types of ways to sort stuff.
Dialogue: 0,0:00:43.00,0:00:46.64,中文,,0,0,0,,到目前为止 我们已经了解了几种排序方法
Dialogue: 0,0:00:46.64,0:00:55.07,英文,,0,0,0,,We've had heap sort, insertion sort, merge sort, quick sort, and we've kind of looked at how much memory and how many comparisons we use.
Dialogue: 0,0:00:46.64,0:00:55.07,中文,,0,0,0,,我们学习了堆排序、插入排序、归并排序、快速排序 并分析了它们使用的内存量和比较次数
Dialogue: 0,0:00:55.07,0:00:58.51,英文,,0,0,0,,Kind of here's a summary of what the sorts we've done so far are.
Dialogue: 0,0:00:55.07,0:00:58.51,中文,,0,0,0,,这里是对我们目前为止所学排序算法的总结
Dialogue: 0,0:00:58.51,0:01:10.13,英文,,0,0,0,,And so far, we've really said that quick sort is our best sorting algorithm on average, and merge sort is the best one that we have that guarantees working.
Dialogue: 0,0:00:58.51,0:01:10.13,中文,,0,0,0,,到目前为止 我们认为快速排序是平均情况下最好的排序算法 而归并排序是我们所学排序算法中性能最稳定的
Dialogue: 0,0:01:10.13,0:01:14.74,英文,,0,0,0,,Now, sorting ends up becoming a fundamental problem in a lot of different cases.
Dialogue: 0,0:01:10.13,0:01:14.74,中文,,0,0,0,,在很多情况下 排序都是一个基本问题
Dialogue: 0,0:01:14.74,0:01:19.60,英文,,0,0,0,,It's generally useful to just have things in some order or finding a way to get things in an order.
Dialogue: 0,0:01:14.74,0:01:19.60,中文,,0,0,0,,让事物保持某种顺序或找到一种排序方法通常很有用
Dialogue: 0,0:01:19.60,0:01:23.08,英文,,0,0,0,,And you can use this in kind of...
Dialogue: 0,0:01:19.60,0:01:23.08,中文,,0,0,0,,你可以在...
Dialogue: 0,0:01:23.08,0:01:26.76,英文,,0,0,0,,in some parts of a problem to make it easier.
Dialogue: 0,0:01:23.08,0:01:26.76,中文,,0,0,0,,问题的某些部分使用它来简化问题
Dialogue: 0,0:01:26.76,0:01:29.98,英文,,0,0,0,,We saw this when we saw that we had this duplicate finding problem.
Dialogue: 0,0:01:26.76,0:01:29.98,中文,,0,0,0,,我们在解决查找重复项问题时就看到了这一点
Dialogue: 0,0:01:29.98,0:01:40.42,英文,,0,0,0,,We were able to get it down from an n squared solution to n log n. There's also this problem called 3SUM, where you're supposed to find the set of three numbers that adds up to a certain value.
Dialogue: 0,0:01:29.98,0:01:40.42,英文,,0,0,0,,We were able to get it down from an n squared solution to n log n. There's also this problem called 3SUM, where you're supposed to find the set of three numbers that adds up to a certain value.
Dialogue: 0,0:01:29.98,0:01:35.42,中文,,0,0,0,,我们能够将时间复杂度从 N² 降到 N log N 还有一个叫做 3SUM 的问题
Dialogue: 0,0:01:35.42,0:01:40.42,中文,,0,0,0,,你需要找到三个数字的集合 它们的和等于某个特定的值
Dialogue: 0,0:01:40.42,0:01:45.65,英文,,0,0,0,,You can show that you can get it from n cubed to n squared using a sorting algorithm.
Dialogue: 0,0:01:40.42,0:01:45.65,中文,,0,0,0,,你可以证明 使用排序算法可以将时间复杂度从 N³ 降到 N²
Dialogue: 0,0:01:45.65,0:01:50.01,英文,,0,0,0,,And there's a lot of different ways to sort an array.
Dialogue: 0,0:01:45.65,0:01:50.01,中文,,0,0,0,,有很多不同的方法可以对数组进行排序
Dialogue: 0,0:01:50.01,0:01:53.72,英文,,0,0,0,,It's kind of interesting to see that there's so many different ways to do this.
Dialogue: 0,0:01:50.01,0:01:53.72,中文,,0,0,0,,看到有这么多不同的方法来做这件事 真是太有趣了
Dialogue: 0,0:01:53.72,0:01:58.30,英文,,0,0,0,,And it begs the question, is there a better way to do this?
Dialogue: 0,0:01:53.72,0:01:58.30,中文,,0,0,0,,这就引出了一个问题 有没有更好的排序方法呢？
Dialogue: 0,0:01:58.30,0:02:03.87,英文,,0,0,0,,Can we make the optimal, absolute best sorting algorithm ever?
Dialogue: 0,0:01:58.30,0:02:03.87,中文,,0,0,0,,我们能不能创造出绝对最佳的排序算法？
Dialogue: 0,0:02:03.87,0:02:10.52,英文,,0,0,0,,And if so, what will that sorting algorithm be?
Dialogue: 0,0:02:03.87,0:02:10.52,中文,,0,0,0,,如果有的话 那会是什么样的排序算法呢？
Dialogue: 0,0:02:10.52,0:02:14.26,英文,,0,0,0,,Now, for the purpose of today, we'll only be considering comparison sorts.
Dialogue: 0,0:02:10.52,0:02:14.26,中文,,0,0,0,,为了今天的目的 我们只考虑比较排序
Dialogue: 0,0:02:14.26,0:02:17.19,英文,,0,0,0,,So these are sorts which only do two things on the items.
Dialogue: 0,0:02:14.26,0:02:17.19,中文,,0,0,0,,所以这些排序算法只对项目做两件事
Dialogue: 0,0:02:17.19,0:02:22.35,英文,,0,0,0,,They compare two items, and we see which one's bigger or worse or lighter.
Dialogue: 0,0:02:17.19,0:02:22.35,中文,,0,0,0,,它们比较两个项目 看看哪个更大、更差或更轻
Dialogue: 0,0:02:22.35,0:02:25.91,英文,,0,0,0,,And we do a swap, which just swaps two items in the array.
Dialogue: 0,0:02:22.35,0:02:25.91,中文,,0,0,0,,然后我们进行交换 也就是交换数组中的两个项目
Dialogue: 0,0:02:25.91,0:02:37.05,英文,,0,0,0,,So this should basically be any sorting algorithm that works on any comparable object, not necessarily integers, not necessarily cats, just any comparable.
Dialogue: 0,0:02:25.91,0:02:37.05,中文,,0,0,0,,所以这基本上应该是任何适用于任何可比对象的排序算法 不一定是整数 不一定是猫 只是任何可比的东西
Dialogue: 0,0:02:37.05,0:02:40.10,英文,,0,0,0,,So let's kind of go through some warm-up.
Dialogue: 0,0:02:37.05,0:02:40.10,中文,,0,0,0,,那我们就来热热身吧
Dialogue: 0,0:02:40.10,0:02:46.48,英文,,0,0,0,,Can you name some comparison sorts?
Dialogue: 0,0:02:40.10,0:02:46.48,中文,,0,0,0,,你能说出一些比较排序算法吗？
Dialogue: 0,0:02:46.48,0:02:58.06,英文,,0,0,0,,Someone name a comparison sort, a sort that only requires compare-to operations and swap operations.
Dialogue: 0,0:02:46.48,0:02:58.06,中文,,0,0,0,,谁能说出一个比较排序算法 一个只需要比较和交换操作的排序算法？
Dialogue: 0,0:02:58.06,0:02:59.92,英文,,0,0,0,,Yeah?
Dialogue: 0,0:02:58.06,0:02:59.92,中文,,0,0,0,,有人吗？
Dialogue: 0,0:02:59.92,0:03:01.76,英文,,0,0,0,,Insertion sort, yes.
Dialogue: 0,0:02:59.92,0:03:01.76,中文,,0,0,0,,插入排序 是的
Dialogue: 0,0:03:01.76,0:03:07.36,英文,,0,0,0,,With insertion sort, all you do is compare items, and you swap the positions of items.
Dialogue: 0,0:03:01.76,0:03:07.36,中文,,0,0,0,,使用插入排序 你所做的就是比较项目 然后交换项目的位置
Dialogue: 0,0:03:07.36,0:03:10.63,英文,,0,0,0,,Any others?
Dialogue: 0,0:03:07.36,0:03:10.63,中文,,0,0,0,,还有别的吗？
Dialogue: 0,0:03:10.63,0:03:13.59,英文,,0,0,0,,Selection sort, yes.
Dialogue: 0,0:03:10.63,0:03:13.59,中文,,0,0,0,,选择排序 是的
Dialogue: 0,0:03:13.59,0:03:15.65,英文,,0,0,0,,Selection sort, that's a good one.
Dialogue: 0,0:03:13.59,0:03:15.65,中文,,0,0,0,,选择排序 那是个不错的选择
Dialogue: 0,0:03:15.65,0:03:20.57,英文,,0,0,0,,Any others?
Dialogue: 0,0:03:15.65,0:03:20.57,中文,,0,0,0,,还有别的吗？
Dialogue: 0,0:03:20.57,0:03:22.07,英文,,0,0,0,,Bubble sort, yes.
Dialogue: 0,0:03:20.57,0:03:22.07,中文,,0,0,0,,冒泡排序 是的
Dialogue: 0,0:03:22.07,0:03:32.10,英文,,0,0,0,,With bubble sort, you're just swapping two items back and forth.
Dialogue: 0,0:03:22.07,0:03:32.10,中文,,0,0,0,,使用冒泡排序 你只需要来回交换两个项目
Dialogue: 0,0:03:32.10,0:03:34.60,英文,,0,0,0,,Merge sort, yes.
Dialogue: 0,0:03:32.10,0:03:34.60,中文,,0,0,0,,归并排序 没错
Dialogue: 0,0:03:34.60,0:03:41.01,英文,,0,0,0,,Merge sort, we consider this to be a comparison sort because we are still comparing the items.
Dialogue: 0,0:03:34.60,0:03:41.01,中文,,0,0,0,,归并排序 我们认为它是一种比较排序 因为我们仍然在比较这些项目
Dialogue: 0,0:03:41.01,0:03:46.83,英文,,0,0,0,,Even though we're creating new arrays back and forth, that's still only doing comparisons on the objects themselves.
Dialogue: 0,0:03:41.01,0:03:46.83,中文,,0,0,0,,即使我们来回创建新的数组 那也仍然只是在对对象本身进行比较
Dialogue: 0,0:03:46.83,0:03:51.49,英文,,0,0,0,,That's the only thing we rely about with the objects.
Dialogue: 0,0:03:46.83,0:03:51.49,中文,,0,0,0,,这是我们依赖对象的唯一依据
Dialogue: 0,0:03:51.49,0:03:54.32,英文,,0,0,0,,Any others?
Dialogue: 0,0:03:51.49,0:03:54.32,中文,,0,0,0,,还有别的吗？
Dialogue: 0,0:03:54.32,0:04:00.02,英文,,0,0,0,,Quick sort.
Dialogue: 0,0:03:54.32,0:04:00.02,中文,,0,0,0,,快速排序
Dialogue: 0,0:04:00.02,0:04:01.36,英文,,0,0,0,,Yeah?
Dialogue: 0,0:04:00.02,0:04:01.36,中文,,0,0,0,,嗯？
Dialogue: 0,0:04:01.36,0:04:03.74,英文,,0,0,0,,How about some non-comparison sorts?
Dialogue: 0,0:04:01.36,0:04:03.74,中文,,0,0,0,,非比较排序呢？
Dialogue: 0,0:04:03.74,0:04:13.07,英文,,0,0,0,,Any sorting algorithm that doesn't require using comparisons or requires more information than comparisons?
Dialogue: 0,0:04:03.74,0:04:13.07,中文,,0,0,0,,任何不需要使用比较或需要比比较更多信息的排序算法？
Dialogue: 0,0:04:13.07,0:04:14.77,英文,,0,0,0,,Yeah?
Dialogue: 0,0:04:13.07,0:04:14.77,中文,,0,0,0,,嗯？
Dialogue: 0,0:04:14.77,0:04:17.89,英文,,0,0,0,,Counting sort, yes.
Dialogue: 0,0:04:14.77,0:04:17.89,中文,,0,0,0,,计数排序 是的
Dialogue: 0,0:04:17.89,0:04:24.58,英文,,0,0,0,,Counting sorts, we're going to be talking about in Lecture 5 of this sequence, which is either, I think, Monday.
Dialogue: 0,0:04:17.89,0:04:24.58,中文,,0,0,0,,计数排序 我们将在本系列的第5讲中讨论 我想应该是星期一
Dialogue: 0,0:04:24.58,0:04:27.64,英文,,0,0,0,,So we'll see how this works later.
Dialogue: 0,0:04:24.58,0:04:27.64,中文,,0,0,0,,所以我们稍后会看到它是如何工作的
Dialogue: 0,0:04:27.64,0:04:30.01,英文,,0,0,0,,Any others?
Dialogue: 0,0:04:27.64,0:04:30.01,中文,,0,0,0,,还有别的吗？
Dialogue: 0,0:04:30.01,0:04:38.65,英文,,0,0,0,,Radix sort, yep, that's our discussion topic for Wednesday, I believe.
Dialogue: 0,0:04:30.01,0:04:38.65,中文,,0,0,0,,基数排序 是的 我相信这是我们星期三的讨论主题
Dialogue: 0,0:04:38.65,0:04:47.57,英文,,0,0,0,,Any others?
Dialogue: 0,0:04:38.65,0:04:47.57,中文,,0,0,0,,还有别的吗？
Dialogue: 0,0:04:47.57,0:04:50.12,英文,,0,0,0,,Well, yeah, there's a ton of different sorts.
Dialogue: 0,0:04:47.57,0:04:50.12,中文,,0,0,0,,嗯 是的 有很多不同的排序
Dialogue: 0,0:04:50.12,0:04:52.40,英文,,0,0,0,,Does this chat have something to say?
Dialogue: 0,0:04:50.12,0:04:52.40,中文,,0,0,0,,这个聊天有什么要说的吗？
Dialogue: 0,0:04:52.40,0:04:53.28,英文,,0,0,0,,No?
Dialogue: 0,0:04:52.40,0:04:53.28,中文,,0,0,0,,没有？
Dialogue: 0,0:04:53.28,0:04:56.59,英文,,0,0,0,,All right.
Dialogue: 0,0:04:53.28,0:04:56.59,中文,,0,0,0,,
Dialogue: 0,0:04:56.59,0:05:00.28,英文,,0,0,0,,Yeah, here's kind of the examples that I came up with.
Dialogue: 0,0:04:56.59,0:05:00.28,中文,,0,0,0,,好的 我来举几个例子
Dialogue: 0,0:05:00.28,0:05:08.14,英文,,0,0,0,,Heapsort was one of the comparison sorts I think wasn't on your list.
Dialogue: 0,0:05:00.28,0:05:08.14,中文,,0,0,0,,堆排序应该算是比较排序 但你的清单里好像没有
Dialogue: 0,0:05:08.14,0:05:11.55,英文,,0,0,0,,For non-comparison sorts, there's actually a whole bunch of these.
Dialogue: 0,0:05:08.14,0:05:11.55,中文,,0,0,0,,非比较排序其实有很多种
Dialogue: 0,0:05:11.55,0:05:21.51,英文,,0,0,0,,Gravity sort is actually an interesting one in a sense that it relies on gravity to sort numbers.
Dialogue: 0,0:05:11.55,0:05:21.51,中文,,0,0,0,,重力排序很有意思 它利用重力来排序数字
Dialogue: 0,0:05:21.51,0:05:27.66,英文,,0,0,0,,BOGO sort is basically you shuffle the array, and you just see if it's sorted.
Dialogue: 0,0:05:21.51,0:05:27.66,中文,,0,0,0,,Bogo 排序基本上就是随机打乱数组 然后看看是否排好序了
Dialogue: 0,0:05:27.66,0:05:30.10,英文,,0,0,0,,And then you just keep trying over and over.
Dialogue: 0,0:05:27.66,0:05:30.10,中文,,0,0,0,,然后不断重复尝试
Dialogue: 0,0:05:30.10,0:05:34.26,英文,,0,0,0,,It's very slow, but it is technically a sorting algorithm.
Dialogue: 0,0:05:30.10,0:05:34.26,中文,,0,0,0,,它很慢 但严格来说也算是一种排序算法
Dialogue: 0,0:05:34.26,0:05:40.42,英文,,0,0,0,,It relies on the random number generator, so it's not quite considered comparison sort directly, at least.
Dialogue: 0,0:05:34.26,0:05:40.42,中文,,0,0,0,,它依赖于随机数生成器 所以至少不能直接算作比较排序
Dialogue: 0,0:05:40.42,0:05:46.52,英文,,0,0,0,,Yeah.
Dialogue: 0,0:05:40.42,0:05:46.52,中文,,0,0,0,,是的
Dialogue: 0,0:05:46.52,0:05:52.22,英文,,0,0,0,,Yeah, you still do need to check if it's sorted in some ways.
Dialogue: 0,0:05:46.52,0:05:52.22,中文,,0,0,0,,是的 你还是需要以某种方式检查它是否排好序了
Dialogue: 0,0:05:52.22,0:05:54.30,英文,,0,0,0,,It relies on comparisons.
Dialogue: 0,0:05:52.22,0:05:54.30,中文,,0,0,0,,它依赖于比较
Dialogue: 0,0:05:54.30,0:05:58.04,英文,,0,0,0,,Yeah, it's hard to tell if it's considered comparison or non-comparison.
Dialogue: 0,0:05:54.30,0:05:58.04,中文,,0,0,0,,是的 很难说它算是比较排序还是非比较排序
Dialogue: 0,0:05:58.04,0:06:05.03,英文,,0,0,0,,I personally consider it non-comparison because it doesn't really look at the items themselves in most ways.
Dialogue: 0,0:05:58.04,0:06:05.03,中文,,0,0,0,,我个人认为它是非比较排序 因为它大多数情况下并没有真正查看条目本身
Dialogue: 0,0:06:05.03,0:06:08.62,英文,,0,0,0,,But yeah, you can argue it's comparison sort as well.
Dialogue: 0,0:06:05.03,0:06:08.62,中文,,0,0,0,,但你也可以说它是比较排序
Dialogue: 0,0:06:08.62,0:06:16.61,英文,,0,0,0,,Yeah, sleep sort is you literally set timers for every single number, and then you just pick the items as you go.
Dialogue: 0,0:06:08.62,0:06:16.61,中文,,0,0,0,,睡眠排序就是给每个数字设置计时器 然后按顺序取出条目
Dialogue: 0,0:06:16.61,0:06:23.77,英文,,0,0,0,,So if you're sorting 1, 2, and 3, you set a timer for one minute, a timer for two minutes, and a timer for three minutes, then you wait.
Dialogue: 0,0:06:16.61,0:06:23.77,中文,,0,0,0,,所以如果你要排序 1、2 和 3 你设置一个 1 分钟的计时器 一个 2 分钟的计时器 和一个 3 分钟的计时器 然后等待
Dialogue: 0,0:06:23.77,0:06:29.49,英文,,0,0,0,,You pick the item with the 1, then you get the 2, then you get the 3.
Dialogue: 0,0:06:23.77,0:06:29.49,中文,,0,0,0,,你取出 1 的条目 然后是 2 然后是 3
Dialogue: 0,0:06:29.49,0:06:33.63,英文,,0,0,0,,Anyway. So there's so many different sorting algorithms.
Dialogue: 0,0:06:29.49,0:06:33.63,中文,,0,0,0,,总之  排序算法有很多种
Dialogue: 0,0:06:33.63,0:06:40.68,英文,,0,0,0,,We're going to try to find a way to bound all possible sorting algorithms, even ones that we've not come up with.
Dialogue: 0,0:06:33.63,0:06:40.68,中文,,0,0,0,,我们要尝试找到一种方法来限制所有可能的排序算法 即使是我们还没有想到的
Dialogue: 0,0:06:40.68,0:06:48.71,英文,,0,0,0,,But first, let's do some math.
Dialogue: 0,0:06:40.68,0:06:48.71,中文,,0,0,0,,不过我们先来算算
Dialogue: 0,0:06:48.71,0:06:55.32,英文,,0,0,0,,So let's consider these two functions, n factorial and n over 2 to the n over 2.
Dialogue: 0,0:06:48.71,0:06:55.32,中文,,0,0,0,,我们来看一下 N 阶乘和 (N/2)^N/2这两个函数
Dialogue: 0,0:06:55.32,0:07:02.51,英文,,0,0,0,,And what I want to do is I want to see if n factorial is omega of n over 2 to the n over 2.
Dialogue: 0,0:06:55.32,0:07:02.51,中文,,0,0,0,,我想看看 N 阶乘是不是 (N/2)^N/2的 Ω(N)
Dialogue: 0,0:07:02.51,0:07:04.81,英文,,0,0,0,,Is this statement true?
Dialogue: 0,0:07:02.51,0:07:04.81,中文,,0,0,0,,这个说法对吗？
Dialogue: 0,0:07:04.81,0:07:08.67,英文,,0,0,0,,Let's try to prove our answer.
Dialogue: 0,0:07:04.81,0:07:08.67,中文,,0,0,0,,我们来试着证明一下
Dialogue: 0,0:07:08.67,0:07:10.65,英文,,0,0,0,,So feel free to discuss for a bit.
Dialogue: 0,0:07:08.67,0:07:10.65,中文,,0,0,0,,大家可以先讨论一下
Dialogue: 0,0:07:10.65,0:07:13.01,英文,,0,0,0,,I'm going to give, let's say, two minutes on this.
Dialogue: 0,0:07:10.65,0:07:13.01,中文,,0,0,0,,我给你们大概两分钟时间
Dialogue: 0,0:07:13.01,0:07:28.44,英文,,0,0,0,,Feel free to discuss with your neighbor on how you might be able to prove this.
Dialogue: 0,0:07:13.01,0:07:28.44,中文,,0,0,0,,可以和旁边的人讨论一下如何证明
Dialogue: 0,0:07:28.44,0:07:28.86,英文,,0,0,0,,Nothing.
Dialogue: 0,0:07:28.44,0:07:28.86,中文,,0,0,0,,没啥想法
Dialogue: 0,0:07:28.86,0:07:31.17,英文,,0,0,0,,They just want to divide the slides, but we can't.
Dialogue: 0,0:07:28.86,0:07:31.17,中文,,0,0,0,,他们只想把幻灯片分开 但我们不能
Dialogue: 0,0:07:31.17,0:08:48.32,英文,,0,0,0,,Okay.
Dialogue: 0,0:07:31.17,0:08:48.32,中文,,0,0,0,,
Dialogue: 0,0:08:48.32,0:08:51.06,英文,,0,0,0,,All right, let's bring everyone back.
Dialogue: 0,0:08:48.32,0:08:51.06,中文,,0,0,0,,好了 大家回来吧
Dialogue: 0,0:08:51.06,0:08:54.72,英文,,0,0,0,,Does anyone have an explanation of this?
Dialogue: 0,0:08:51.06,0:08:54.72,中文,,0,0,0,,有人可以解释一下吗？
Dialogue: 0,0:08:54.72,0:09:06.41,英文,,0,0,0,,Is it true that n factorial is omega of n over 2 to the n over 2?
Dialogue: 0,0:08:54.72,0:09:06.41,中文,,0,0,0,,N 阶乘真的是 (N/2)^N/2的 Ω(N) 吗？
Dialogue: 0,0:09:06.41,0:09:09.01,英文,,0,0,0,,Well, here's kind of how I would prove this.
Dialogue: 0,0:09:06.41,0:09:09.01,中文,,0,0,0,,我可以这样来证明
Dialogue: 0,0:09:09.01,0:09:16.74,英文,,0,0,0,,n factorial is just 10, or 10 factorial is just 10 times 9 times 8 times 7 times 6, all the way down to 1.
Dialogue: 0,0:09:09.01,0:09:16.74,中文,,0,0,0,,N 阶乘 或者说 10 的阶乘 就是 10 乘 9 乘 8 乘 7 乘 6 一直乘到 1
Dialogue: 0,0:09:16.74,0:09:22.72,英文,,0,0,0,,If you have an arbitrary n, then you're going to have n, n minus 1, n minus 2, all the way down.
Dialogue: 0,0:09:16.74,0:09:22.72,中文,,0,0,0,,如果是任意的 N 那就有 N N-1 N-2 一直下去
Dialogue: 0,0:09:22.72,0:09:27.34,英文,,0,0,0,,Meanwhile, n over 2 to the n over 2 is kind of you have this set.
Dialogue: 0,0:09:22.72,0:09:27.34,中文,,0,0,0,,而 (N/2)^N/2 就好像是这样一个集合
Dialogue: 0,0:09:27.34,0:09:33.58,英文,,0,0,0,,You take 10, or you divide it by 2, and then you have n over 2 of these items.
Dialogue: 0,0:09:27.34,0:09:33.58,中文,,0,0,0,,你取 10 或者把它除以 2 然后你有 N/2 个这样的数
Dialogue: 0,0:09:33.58,0:09:36.40,英文,,0,0,0,,So this 10 is greater than 5.
Dialogue: 0,0:09:33.58,0:09:36.40,中文,,0,0,0,,所以这个 10 大于 5
Dialogue: 0,0:09:36.40,0:09:37.56,英文,,0,0,0,,This 9 is greater than 5.
Dialogue: 0,0:09:36.40,0:09:37.56,中文,,0,0,0,,这个9大于5
Dialogue: 0,0:09:37.56,0:09:38.48,英文,,0,0,0,,This 8 is greater than 5.
Dialogue: 0,0:09:37.56,0:09:38.48,中文,,0,0,0,,这个8大于5
Dialogue: 0,0:09:38.48,0:09:39.27,英文,,0,0,0,,7 is greater than 5.
Dialogue: 0,0:09:38.48,0:09:39.27,中文,,0,0,0,,7大于5
Dialogue: 0,0:09:39.27,0:09:40.89,英文,,0,0,0,,6 is greater than 5.
Dialogue: 0,0:09:39.27,0:09:40.89,中文,,0,0,0,,6大于5
Dialogue: 0,0:09:40.89,0:09:48.08,英文,,0,0,0,,So this part alone, this 10 by 9 by 8 by 7 by 6, is going to be greater than 5 to the 5.
Dialogue: 0,0:09:40.89,0:09:48.08,中文,,0,0,0,,所以单就这部分 10乘9乘8乘7乘6 就大于5的5次方
Dialogue: 0,0:09:48.08,0:09:51.64,英文,,0,0,0,,So and then we also have this times 5, 4, 3, 2, 1 at the very end.
Dialogue: 0,0:09:48.08,0:09:51.64,中文,,0,0,0,,然后最后我们还有乘以5、4、3、2、1
Dialogue: 0,0:09:51.64,0:09:55.42,英文,,0,0,0,,That also just simply makes 10 factorial greater than 5 to the 5.
Dialogue: 0,0:09:51.64,0:09:55.42,中文,,0,0,0,,这也简单地使得10的阶乘大于5的5次方
Dialogue: 0,0:09:55.42,0:10:02.73,英文,,0,0,0,,Overall, this means that, in general, n factorial is always going to be greater than n over 2 to the n over 2.
Dialogue: 0,0:09:55.42,0:10:02.73,中文,,0,0,0,,总的来说 这意味着 一般情况下 N的阶乘总是大于(N/2)^N/2
Dialogue: 0,0:10:02.73,0:10:04.87,英文,,0,0,0,,So we can say that this omega bound holds.
Dialogue: 0,0:10:02.73,0:10:04.87,中文,,0,0,0,,所以我们可以说 这个Ω界限成立
Dialogue: 0,0:10:04.87,0:10:11.53,英文,,0,0,0,,We don't necessarily know if this is a strict bound, but we at least know that it is a bound.
Dialogue: 0,0:10:04.87,0:10:11.53,中文,,0,0,0,,我们不一定知道这是一个严格的界限 但我们至少知道它是一个界限
Dialogue: 0,0:10:11.53,0:10:20.88,英文,,0,0,0,,Any questions here?
Dialogue: 0,0:10:11.53,0:10:20.88,中文,,0,0,0,,这里有任何问题吗？
Dialogue: 0,0:10:20.88,0:10:36.05,英文,,0,0,0,,So given this, let's show that log n factorial is omega of n log n. Basically, just take the log on two sides, and we're just trying to show that this bound holds.
Dialogue: 0,0:10:20.88,0:10:36.05,中文,,0,0,0,,鉴于此 让我们证明log N阶乘是Ω(N log N) 基本上 只需对两边取对数 我们只是想证明这个界限成立
Dialogue: 0,0:10:36.05,0:10:40.78,英文,,0,0,0,,How do we show this?
Dialogue: 0,0:10:36.05,0:10:40.78,中文,,0,0,0,,我们如何证明这一点？
Dialogue: 0,0:10:40.78,0:10:47.75,英文,,0,0,0,,Well. Keeping in mind these logarithm rules, if you multiply two things inside a logarithm, they add outside.
Dialogue: 0,0:10:40.78,0:10:47.75,中文,,0,0,0,,好吧  记住这些对数规则 如果你在对数里面乘以两个数 它们在外面相加
Dialogue: 0,0:10:47.75,0:10:51.01,英文,,0,0,0,,If you exponentiate two things in a logarithm, they multiply.
Dialogue: 0,0:10:47.75,0:10:51.01,中文,,0,0,0,,如果你在对数中对两个数进行幂运算 它们会相乘
Dialogue: 0,0:10:51.01,0:10:54.87,英文,,0,0,0,,And you can kind of do this log rule with a change of base formula.
Dialogue: 0,0:10:51.01,0:10:54.87,中文,,0,0,0,,你也可以用换底公式来做这个对数规则
Dialogue: 0,0:10:54.87,0:11:03.73,英文,,0,0,0,,But overall, what we can do is we have that n factorial is greater than n over 2 to the n over 2.
Dialogue: 0,0:10:54.87,0:11:03.73,中文,,0,0,0,,但总的来说 我们可以做的是 我们有N阶乘大于(N/2)^N/2
Dialogue: 0,0:11:03.73,0:11:05.19,英文,,0,0,0,,We take the log on both sides.
Dialogue: 0,0:11:03.73,0:11:05.19,中文,,0,0,0,,我们对两边取对数
Dialogue: 0,0:11:05.19,0:11:13.71,英文,,0,0,0,,So now log n factorial is greater than log n over 2 to the n over 2. n factorial is just, well, we can take this exponent down.
Dialogue: 0,0:11:05.19,0:11:13.71,中文,,0,0,0,,所以现在log N阶乘大于log (N/2)^N/2 N阶乘就是 嗯 我们可以把这个指数降下来
Dialogue: 0,0:11:13.71,0:11:19.54,英文,,0,0,0,,So now it's n over 2 times log n over 2.
Dialogue: 0,0:11:13.71,0:11:19.54,中文,,0,0,0,,现在是 N/2 乘以 log(N/2)
Dialogue: 0,0:11:19.54,0:11:21.14,英文,,0,0,0,,We can split up this log again.
Dialogue: 0,0:11:19.54,0:11:21.14,中文,,0,0,0,,我们可以再次拆分这个 log
Dialogue: 0,0:11:21.14,0:11:23.98,英文,,0,0,0,,So it's log n minus log 2.
Dialogue: 0,0:11:21.14,0:11:23.98,中文,,0,0,0,,所以它变成 log N 减去 log 2
Dialogue: 0,0:11:23.98,0:11:25.68,英文,,0,0,0,,And then we can just get rid of all the constants.
Dialogue: 0,0:11:23.98,0:11:25.68,中文,,0,0,0,,然后我们可以直接忽略所有常数
Dialogue: 0,0:11:25.68,0:11:26.76,英文,,0,0,0,,Log 2 is a constant.
Dialogue: 0,0:11:25.68,0:11:26.76,中文,,0,0,0,,log 2 是一个常数
Dialogue: 0,0:11:26.76,0:11:28.72,英文,,0,0,0,,The division by 2 is just a constant.
Dialogue: 0,0:11:26.76,0:11:28.72,中文,,0,0,0,,除以 2 也是一个常数
Dialogue: 0,0:11:28.72,0:11:37.95,英文,,0,0,0,,So we end up with log n factorial is omega of n log n.
Dialogue: 0,0:11:28.72,0:11:37.95,中文,,0,0,0,,所以我们最终得到 log(N!)是 Ω(N log N)
Dialogue: 0,0:11:37.95,0:11:54.31,英文,,0,0,0,,So after all of this, log n factorial ends up becoming omega of n log n. We know that log n factorial grows strictly faster than n log n, or at least as fast.
Dialogue: 0,0:11:37.95,0:11:54.31,中文,,0,0,0,,经过所有这些步骤 log(N!)最终变成了 Ω(N log N) 我们知道 log(N!)的增长速度严格快于 N log N 或者至少一样快
Dialogue: 0,0:11:54.31,0:11:56.36,英文,,0,0,0,,Now let's kind of show the opposite direction.
Dialogue: 0,0:11:54.31,0:11:56.36,中文,,0,0,0,,现在让我们来展示相反的方向
Dialogue: 0,0:11:56.36,0:12:05.72,英文,,0,0,0,,Not just that log n factorial is omega of n log n, but that n log n is omega of log n factorial.
Dialogue: 0,0:11:56.36,0:12:05.72,中文,,0,0,0,,不仅仅是 log(N!)是 Ω(N log N) 而且 N log N 也是 Ω(log(N!))
Dialogue: 0,0:12:05.72,0:12:09.76,英文,,0,0,0,,How can we do this?
Dialogue: 0,0:12:05.72,0:12:09.76,中文,,0,0,0,,我们怎么做呢？
Dialogue: 0,0:12:09.76,0:12:20.89,英文,,0,0,0,,Any suggestions?
Dialogue: 0,0:12:09.76,0:12:20.89,中文,,0,0,0,,有什么建议吗？
Dialogue: 0,0:12:20.89,0:12:24.87,英文,,0,0,0,,Yeah?
Dialogue: 0,0:12:20.89,0:12:24.87,中文,,0,0,0,,嗯？
Dialogue: 0,0:12:24.87,0:12:26.87,英文,,0,0,0,,Yeah, let's expand the factorial.
Dialogue: 0,0:12:24.87,0:12:26.87,中文,,0,0,0,,是的 我们来展开阶乘
Dialogue: 0,0:12:26.87,0:12:31.99,英文,,0,0,0,,So log n factorial, n factorial is just n, n minus 1, n minus 2 multiplied together.
Dialogue: 0,0:12:26.87,0:12:31.99,中文,,0,0,0,,所以 log(N!) N 阶乘就是 N、N-1、N-2 乘在一起
Dialogue: 0,0:12:31.99,0:12:37.86,英文,,0,0,0,,So we can kind of split this up into log n plus log n minus 1 plus log n minus 2, all the way down to plus log 1.
Dialogue: 0,0:12:31.99,0:12:37.86,中文,,0,0,0,,所以我们可以把它分成 log N 加 log(N-1) 加 log(N-2) 一直加到 log 1
Dialogue: 0,0:12:37.86,0:12:45.98,英文,,0,0,0,,What can we do next?
Dialogue: 0,0:12:37.86,0:12:45.98,中文,,0,0,0,,下一步我们做什么？
Dialogue: 0,0:12:45.98,0:12:50.95,英文,,0,0,0,,Yeah?
Dialogue: 0,0:12:45.98,0:12:50.95,中文,,0,0,0,,嗯？
Dialogue: 0,0:12:50.95,0:12:53.09,英文,,0,0,0,,Yeah.
Dialogue: 0,0:12:50.95,0:12:53.09,中文,,0,0,0,,
Dialogue: 0,0:12:53.09,0:12:57.35,英文,,0,0,0,,Yeah, n log n is just log n repeated n times added together.
Dialogue: 0,0:12:53.09,0:12:57.35,中文,,0,0,0,,是的 N log N 就是 log N 重复加 N 次
Dialogue: 0,0:12:57.35,0:13:02.44,英文,,0,0,0,,Each of these terms is less on the log n factorial side than the n log n side.
Dialogue: 0,0:12:57.35,0:13:02.44,中文,,0,0,0,,每项在 log(N!)这边都小于 N log N 那边
Dialogue: 0,0:13:02.44,0:13:10.61,英文,,0,0,0,,So n log n is going to grow at least as fast as omega of log n factorial.
Dialogue: 0,0:13:02.44,0:13:10.61,中文,,0,0,0,,所以 N log N 增长速度至少与 Ω(log(N!)) 一样快
Dialogue: 0,0:13:10.61,0:13:21.25,英文,,0,0,0,,So given these two facts, n log n is omega of log n factorial, and log n factorial is omega of n log n, what can we say?
Dialogue: 0,0:13:10.61,0:13:21.25,中文,,0,0,0,,基于这两个事实 N log N 是 Ω(log(N!)) 而 log(N!)是 Ω(N log N) 那我们能得出什么结论？
Dialogue: 0,0:13:21.25,0:13:29.26,英文,,0,0,0,,So who here says A, that we can say that n log n is theta of log n factorial?
Dialogue: 0,0:13:21.25,0:13:29.26,中文,,0,0,0,,谁认为 A 正确 即 N log N 是 Θ(log(N!))？
Dialogue: 0,0:13:29.26,0:13:30.10,英文,,0,0,0,,Yeah?
Dialogue: 0,0:13:29.26,0:13:30.10,中文,,0,0,0,,有人吗？
Dialogue: 0,0:13:30.10,0:13:31.28,英文,,0,0,0,,How about B?
Dialogue: 0,0:13:30.10,0:13:31.28,中文,,0,0,0,,那 B 呢？
Dialogue: 0,0:13:31.28,0:13:38.74,英文,,0,0,0,,Log n factorial is theta of n log n. How about both A and B?
Dialogue: 0,0:13:31.28,0:13:38.74,中文,,0,0,0,,log(N!)是 Θ(N log N) 那 A 和 B 都是正确的呢？
Dialogue: 0,0:13:38.74,0:13:41.13,英文,,0,0,0,,Neither?
Dialogue: 0,0:13:38.74,0:13:41.13,中文,,0,0,0,,都不对？
Dialogue: 0,0:13:41.13,0:13:45.68,英文,,0,0,0,,How many people are just entirely confused and have no idea what's going on?
Dialogue: 0,0:13:41.13,0:13:45.68,中文,,0,0,0,,有多少人完全糊涂了 不知道发生了什么？
Dialogue: 0,0:13:45.68,0:13:47.70,英文,,0,0,0,,All right.
Dialogue: 0,0:13:45.68,0:13:47.70,中文,,0,0,0,,好吧
Dialogue: 0,0:13:47.70,0:13:52.90,英文,,0,0,0,,All right.
Dialogue: 0,0:13:47.70,0:13:52.90,中文,,0,0,0,,
Dialogue: 0,0:13:52.90,0:14:00.49,英文,,0,0,0,,Is there any specific part that's confusing here?
Dialogue: 0,0:13:52.90,0:14:00.49,中文,,0,0,0,,这里有什么具体的地方让你困惑吗？
Dialogue: 0,0:14:00.49,0:14:06.29,英文,,0,0,0,,Anything specific?
Dialogue: 0,0:14:00.49,0:14:06.29,中文,,0,0,0,,任何具体的地方？
Dialogue: 0,0:14:06.29,0:14:10.07,英文,,0,0,0,,Overall, kind of what we're saying is that, huh?
Dialogue: 0,0:14:06.29,0:14:10.07,中文,,0,0,0,,总的来说 我们想表达的是 嗯？
Dialogue: 0,0:14:10.07,0:14:11.77,英文,,0,0,0,,Yeah.
Dialogue: 0,0:14:10.07,0:14:11.77,中文,,0,0,0,,是的
Dialogue: 0,0:14:11.77,0:14:13.81,英文,,0,0,0,,What is our n goal here?
Dialogue: 0,0:14:11.77,0:14:13.81,中文,,0,0,0,,我们的 N 目标是什么？
Dialogue: 0,0:14:13.81,0:14:14.89,英文,,0,0,0,,What is our n goal here?
Dialogue: 0,0:14:13.81,0:14:14.89,中文,,0,0,0,,我们的 N 目标是什么？
Dialogue: 0,0:14:14.89,0:14:20.29,英文,,0,0,0,,Yeah, like why are we comparing this n log n and n factorial?
Dialogue: 0,0:14:14.89,0:14:20.29,中文,,0,0,0,,是啊 为什么要比较 N log N 和 N 阶乘呢？
Dialogue: 0,0:14:20.29,0:14:22.83,英文,,0,0,0,,Why are we comparing n log n and log n factorial?
Dialogue: 0,0:14:20.29,0:14:22.83,中文,,0,0,0,,为什么要比较 N log N 和 log(N!)呢？
Dialogue: 0,0:14:22.83,0:14:24.07,英文,,0,0,0,,Stay tuned.
Dialogue: 0,0:14:22.83,0:14:24.07,中文,,0,0,0,,敬请期待
Dialogue: 0,0:14:24.07,0:14:25.97,英文,,0,0,0,,I'll show you in 30 minutes.
Dialogue: 0,0:14:24.07,0:14:25.97,中文,,0,0,0,,30分钟后我会给你演示
Dialogue: 0,0:14:25.97,0:14:33.24,英文,,0,0,0,,But the big thing that we cover here, we've shown that n log n is greater than or equal to log n factorial.
Dialogue: 0,0:14:25.97,0:14:33.24,中文,,0,0,0,,我们在这里主要讨论的是 我们已经证明了 N log N 大于或等于 log(N!)
Dialogue: 0,0:14:33.24,0:14:37.66,英文,,0,0,0,,And we've shown that n log n is greater than or equal to log n factorial.
Dialogue: 0,0:14:33.24,0:14:37.66,中文,,0,0,0,,我们已经证明了 N log N 大于或等于 log(N!)
Dialogue: 0,0:14:37.66,0:14:43.61,英文,,0,0,0,,With these two, we can say that they're equal, that they are in the same theta bound.
Dialogue: 0,0:14:37.66,0:14:43.61,中文,,0,0,0,,通过这两个 我们可以说它们是相等的 它们处于相同的 theta 界限内
Dialogue: 0,0:14:43.61,0:14:47.94,英文,,0,0,0,,And informally, we can kind of think of it as effectively the same thing.
Dialogue: 0,0:14:43.61,0:14:47.94,中文,,0,0,0,,非正式地说 我们可以将其视为实际上是同一件事
Dialogue: 0,0:14:47.94,0:14:56.34,英文,,0,0,0,,So if we ever see a log n factorial in today's lecture, then you can think, oh, wait, that's just an n log n. Hint.
Dialogue: 0,0:14:47.94,0:14:56.34,中文,,0,0,0,,所以如果我们在今天的课程中看到 log(N!) 你可以想 哦 等等 那只是一个 N log N 提示
Dialogue: 0,0:14:56.34,0:15:04.31,英文,,0,0,0,,All right.
Dialogue: 0,0:14:56.34,0:15:04.31,中文,,0,0,0,,
Dialogue: 0,0:15:04.31,0:15:06.66,英文,,0,0,0,,Any questions on what we just did?
Dialogue: 0,0:15:04.31,0:15:06.66,中文,,0,0,0,,对我们刚才所做的有任何疑问吗？
Dialogue: 0,0:15:06.66,0:15:09.54,英文,,0,0,0,,I know this is kind of really fast to cover.
Dialogue: 0,0:15:06.66,0:15:09.54,中文,,0,0,0,,我知道这讲得有点快
Dialogue: 0,0:15:09.54,0:15:13.36,英文,,0,0,0,,It goes really deep into the underlying math.
Dialogue: 0,0:15:09.54,0:15:13.36,中文,,0,0,0,,它深入到了基础数学
Dialogue: 0,0:15:13.36,0:15:17.10,英文,,0,0,0,,We'll see kind of why we end up doing this soon.
Dialogue: 0,0:15:13.36,0:15:17.10,中文,,0,0,0,,我们很快就会看到我们为什么要这样做
Dialogue: 0,0:15:17.10,0:15:23.95,英文,,0,0,0,,All right.
Dialogue: 0,0:15:17.10,0:15:23.95,中文,,0,0,0,,
Dialogue: 0,0:15:23.95,0:15:29.67,英文,,0,0,0,,So there's a raised hand.
Dialogue: 0,0:15:23.95,0:15:29.67,中文,,0,0,0,,有人举手了
Dialogue: 0,0:15:29.67,0:15:33.60,英文,,0,0,0,,I don't think people on Zoom can talk, so you might as well keep going.
Dialogue: 0,0:15:29.67,0:15:33.60,中文,,0,0,0,,我觉得 Zoom 上的人不能说话 所以你还是继续讲吧
Dialogue: 0,0:15:33.60,0:15:35.33,英文,,0,0,0,,All right.
Dialogue: 0,0:15:33.60,0:15:35.33,中文,,0,0,0,,
Dialogue: 0,0:15:35.33,0:15:39.47,英文,,0,0,0,,You can ask on chat, and Peyron will send it to me if necessary.
Dialogue: 0,0:15:35.33,0:15:39.47,中文,,0,0,0,,你可以在聊天中提问 如果需要 Peyron 会发给我
Dialogue: 0,0:15:39.47,0:15:42.21,英文,,0,0,0,,So keep that in mind.
Dialogue: 0,0:15:39.47,0:15:42.21,中文,,0,0,0,,记住这一点
Dialogue: 0,0:15:42.21,0:15:46.19,英文,,0,0,0,,Log n factorial is the same as n log n. It'll come back eventually.
Dialogue: 0,0:15:42.21,0:15:46.19,中文,,0,0,0,,log(N!)与 N log N 相同 它最终会回来的
Dialogue: 0,0:15:46.19,0:15:49.88,英文,,0,0,0,,But for now, let's move on to something else.
Dialogue: 0,0:15:46.19,0:15:49.88,中文,,0,0,0,,但现在 让我们继续讲点别的
Dialogue: 0,0:15:49.88,0:15:52.12,英文,,0,0,0,,So let's kind of look at sorting algorithms.
Dialogue: 0,0:15:49.88,0:15:52.12,中文,,0,0,0,,让我们来看看排序算法
Dialogue: 0,0:15:52.12,0:15:57.89,英文,,0,0,0,,We've shown that we have several sorts that require theta n log n time in the worst case.
Dialogue: 0,0:15:52.12,0:15:57.89,中文,,0,0,0,,我们已经证明了几种在最坏情况下需要 Θ(N log N) 时间的排序算法
Dialogue: 0,0:15:57.89,0:16:00.80,英文,,0,0,0,,The question becomes now, can we do better?
Dialogue: 0,0:15:57.89,0:16:00.80,中文,,0,0,0,,现在的问题是 我们能做得更好吗？
Dialogue: 0,0:16:00.80,0:16:06.88,英文,,0,0,0,,Does there exist some better algorithm that runs at a faster worst-case time?
Dialogue: 0,0:16:00.80,0:16:06.88,中文,,0,0,0,,是否存在运行速度更快（最坏情况）的算法？
Dialogue: 0,0:16:06.88,0:16:10.84,英文,,0,0,0,,Let's call this the ultimate comparison sort.
Dialogue: 0,0:16:06.88,0:16:10.84,中文,,0,0,0,,我们称之为终极比较排序
Dialogue: 0,0:16:10.84,0:16:15.93,英文,,0,0,0,,And this is the fastest possible comparison sort that would ever exist.
Dialogue: 0,0:16:10.84,0:16:15.93,中文,,0,0,0,,这是可能存在的最快的比较排序算法
Dialogue: 0,0:16:15.93,0:16:21.91,英文,,0,0,0,,It might not even be discovered yet, but we might be able to find this in the future.
Dialogue: 0,0:16:15.93,0:16:21.91,中文,,0,0,0,,它可能还没有被发现 但我们将来可能会找到它
Dialogue: 0,0:16:21.91,0:16:25.88,英文,,0,0,0,,And let's call r of n its worst-case runtime.
Dialogue: 0,0:16:21.91,0:16:25.88,中文,,0,0,0,,我们称其最坏情况下的运行时间为 R(N)
Dialogue: 0,0:16:25.88,0:16:32.95,英文,,0,0,0,,Our goal here is to prove bounds on R of n despite not knowing exactly what R of n is.
Dialogue: 0,0:16:25.88,0:16:32.95,中文,,0,0,0,,我们的目标是证明 R(N) 的界限 尽管我们不知道 R(N) 究竟是什么
Dialogue: 0,0:16:32.95,0:16:48.79,英文,,0,0,0,,Despite not even knowing what this ultimate comparison sort is, we can still say things about this runtime R of n. So first off, does anyone have an O bound on R of n?
Dialogue: 0,0:16:32.95,0:16:48.79,中文,,0,0,0,,即使我们不知道这个终极比较排序是什么 我们仍然可以对这个运行时间 R(N) 说些什么 首先 有人对 R(N) 有 O 界限吗？
Dialogue: 0,0:16:48.79,0:16:56.27,英文,,0,0,0,,Do we know for a fact that the ultimate comparison sort, the asymptotically fastest comparison sort,
Dialogue: 0,0:16:48.79,0:16:56.27,中文,,0,0,0,,我们是否确切地知道终极比较排序（渐近最快的比较排序）
Dialogue: 0,0:16:56.27,0:17:13.67,英文,,0,0,0,,is going to be upper bounded by some function runtime.
Dialogue: 0,0:16:56.27,0:17:13.67,中文,,0,0,0,,会被某个函数运行时间所限制
Dialogue: 0,0:17:13.67,0:17:17.23,英文,,0,0,0,,Who has a bound here?
Dialogue: 0,0:17:13.67,0:17:17.23,中文,,0,0,0,,谁有界限？
Dialogue: 0,0:17:17.23,0:17:18.47,英文,,0,0,0,,Yeah.
Dialogue: 0,0:17:17.23,0:17:18.47,中文,,0,0,0,,嗯
Dialogue: 0,0:17:18.47,0:17:27.67,英文,,0,0,0,,n log n. Why n log n?
Dialogue: 0,0:17:18.47,0:17:27.67,中文,,0,0,0,,N log N 为什么是 N log N？
Dialogue: 0,0:17:27.67,0:17:35.87,英文,,0,0,0,,Yeah, merge sort's n log n, so the ultimate comparison sort can't be worse than something we already have.
Dialogue: 0,0:17:27.67,0:17:35.87,中文,,0,0,0,,嗯 归并排序是 N log N 所以终极比较排序不会比我们已经拥有的算法更差
Dialogue: 0,0:17:35.87,0:17:36.87,英文,,0,0,0,,It's the best thing.
Dialogue: 0,0:17:35.87,0:17:36.87,中文,,0,0,0,,这是最好的算法
Dialogue: 0,0:17:36.87,0:17:39.25,英文,,0,0,0,,The best thing can't be worse than something we already have.
Dialogue: 0,0:17:36.87,0:17:39.25,中文,,0,0,0,,最好的算法不会比我们已经拥有的算法更差
Dialogue: 0,0:17:39.25,0:17:47.33,英文,,0,0,0,,So merge sort is theta n log n. That means that our worst-case runtime of the ultimate comparison sort needs to be O of n log n.
Dialogue: 0,0:17:39.25,0:17:47.33,中文,,0,0,0,,所以归并排序是 Θ(N log N) 这意味着我们终极比较排序的最坏情况运行时间需要是 O(N log N)
Dialogue: 0,0:17:47.33,0:17:51.33,英文,,0,0,0,, If it isn't, then it wasn't going to be the best ultimate comparison sort.
Dialogue: 0,0:17:47.33,0:17:51.33,中文,,0,0,0,,如果不是 那么它就不会是最好的终极比较排序
Dialogue: 0,0:17:51.33,0:17:54.87,英文,,0,0,0,,What about the best-case time?
Dialogue: 0,0:17:51.33,0:17:54.87,中文,,0,0,0,,最佳情况下的时间呢？
Dialogue: 0,0:17:54.87,0:17:58.47,英文,,0,0,0,,That one's a bit trickier, but we can come up with a few bounds.
Dialogue: 0,0:17:54.87,0:17:58.47,中文,,0,0,0,,这个有点棘手 但我们可以提出一些界限
Dialogue: 0,0:17:58.47,0:18:03.88,英文,,0,0,0,,Yeah?
Dialogue: 0,0:17:58.47,0:18:03.88,中文,,0,0,0,,嗯？
Dialogue: 0,0:18:03.88,0:18:05.08,英文,,0,0,0,,Yeah, that's a good one.
Dialogue: 0,0:18:03.88,0:18:05.08,中文,,0,0,0,,是啊 这个很好
Dialogue: 0,0:18:05.08,0:18:08.84,英文,,0,0,0,,We'll get to that bound in, I think, a slide.
Dialogue: 0,0:18:05.08,0:18:08.84,中文,,0,0,0,,我认为我们会在幻灯片中讨论这个界限
Dialogue: 0,0:18:08.84,0:18:11.42,英文,,0,0,0,,The first bound we can say is, well, omega 1.
Dialogue: 0,0:18:08.84,0:18:11.42,中文,,0,0,0,,我们可以说的第一个界限是 嗯 Ω(1)
Dialogue: 0,0:18:11.42,0:18:16.98,英文,,0,0,0,,You need at least one unit of time to do something to the array.
Dialogue: 0,0:18:11.42,0:18:16.98,中文,,0,0,0,,你至少需要一个单位时间才能对数组进行操作
Dialogue: 0,0:18:16.98,0:18:21.18,英文,,0,0,0,,So omega 1 is a statement you can make.
Dialogue: 0,0:18:16.98,0:18:21.18,中文,,0,0,0,,所以 Ω(1) 是一个你可以做出的声明
Dialogue: 0,0:18:21.18,0:18:27.10,英文,,0,0,0,,As you've noted, we also note that we need to look at every single item at least once.
Dialogue: 0,0:18:21.18,0:18:27.10,中文,,0,0,0,,正如你所指出的 我们还需要至少查看每个项目一次
Dialogue: 0,0:18:27.10,0:18:31.31,英文,,0,0,0,,So we can show that we have an omega n bound as well.
Dialogue: 0,0:18:27.10,0:18:31.31,中文,,0,0,0,,所以我们可以证明我们也有一个 Ω(N) 的界限
Dialogue: 0,0:18:31.31,0:18:34.61,英文,,0,0,0,,You need to look at every single possible item at least once.
Dialogue: 0,0:18:31.31,0:18:34.61,中文,,0,0,0,,你需要至少查看一次每个可能的项目
Dialogue: 0,0:18:34.61,0:18:36.85,英文,,0,0,0,,Otherwise, you can't really sort a list.
Dialogue: 0,0:18:34.61,0:18:36.85,中文,,0,0,0,,否则 你无法真正排序列表
Dialogue: 0,0:18:36.85,0:18:42.31,英文,,0,0,0,,So you'll need to look at every single item that's theta, or omega n time at least.
Dialogue: 0,0:18:36.85,0:18:42.31,中文,,0,0,0,,所以你需要查看每个项目 那至少是 theta 或 Ω(N) 时间
Dialogue: 0,0:18:42.31,0:18:53.77,英文,,0,0,0,,So, so far, our bounds are O of n log n and omega of n. It is impossible for us to have this ultimate comparison sort run faster than omega of n.
Dialogue: 0,0:18:42.31,0:18:53.77,中文,,0,0,0,,到目前为止 我们的界限是 O(N log N) 和 Ω(N) 我们不可能让这个最终的比较排序比 Ω(N) 快
Dialogue: 0,0:18:53.77,0:19:05.77,英文,,0,0,0,,And we've shown that the ultimate comparison sort will be at most as slow as merge sort, which is n log n. Now, there's still kind of a big gap here.
Dialogue: 0,0:18:53.77,0:19:05.77,中文,,0,0,0,,我们已经证明 最终的比较排序最多与归并排序一样慢 即 N log N 现在 这里仍然有一个很大的差距
Dialogue: 0,0:19:05.77,0:19:12.57,英文,,0,0,0,,We're going to try to make a clever argument to show that it is actually not just omega of n.
Dialogue: 0,0:19:05.77,0:19:12.57,中文,,0,0,0,,我们将尝试进行一个巧妙的论证 以证明它实际上不仅仅是 Ω(N)
Dialogue: 0,0:19:12.57,0:19:19.19,英文,,0,0,0,,but also omega of n log n. This is going to be kind of a clever argument.
Dialogue: 0,0:19:12.57,0:19:19.19,中文,,0,0,0,,而且也是 Ω(N log N) 这将是一个相当巧妙的论证
Dialogue: 0,0:19:19.19,0:19:21.15,英文,,0,0,0,,It's going to take a while to go over this.
Dialogue: 0,0:19:19.19,0:19:21.15,中文,,0,0,0,,要讲完这个需要一段时间
Dialogue: 0,0:19:21.15,0:19:35.78,英文,,0,0,0,,But the main point at the end of this lecture is that once we've shown that we get an omega of n log n bound, that means that no possible comparison sort that you could ever write
Dialogue: 0,0:19:21.15,0:19:35.78,中文,,0,0,0,,但本节课的重点是 一旦我们证明了我们得到了 Ω(N log N) 的界限 这意味着任何你可能编写的比较排序
Dialogue: 0,0:19:35.78,0:19:39.46,英文,,0,0,0,,is ever going to be better than merge sort, asymptotically at least.
Dialogue: 0,0:19:35.78,0:19:39.46,中文,,0,0,0,,至少在渐近情况下 都不会比归并排序更好
Dialogue: 0,0:19:39.46,0:19:42.05,英文,,0,0,0,,We've found the best possible algorithm.
Dialogue: 0,0:19:39.46,0:19:42.05,中文,,0,0,0,,我们找到了最好的算法
Dialogue: 0,0:19:42.05,0:19:49.35,英文,,0,0,0,,And not just that, but we've proven that it is the best possible algorithm and that no better ones exist.
Dialogue: 0,0:19:42.05,0:19:49.35,中文,,0,0,0,,不仅如此 我们还证明了它是最好的算法 而且不存在更好的算法
Dialogue: 0,0:19:49.35,0:19:53.77,英文,,0,0,0,,So it's going to take, unfortunately, a clever argument.
Dialogue: 0,0:19:49.35,0:19:53.77,中文,,0,0,0,,不幸的是 这需要一个巧妙的论证
Dialogue: 0,0:19:53.77,0:19:57.80,英文,,0,0,0,,So we're going to kind of go through a few examples on how this might work.
Dialogue: 0,0:19:53.77,0:19:57.80,中文,,0,0,0,,咱们来看几个例子 看看这玩意儿怎么用
Dialogue: 0,0:19:57.80,0:20:03.68,英文,,0,0,0,,So here's kind of a game that I've played before.
Dialogue: 0,0:19:57.80,0:20:03.68,中文,,0,0,0,,我之前玩过这么个游戏
Dialogue: 0,0:20:03.68,0:20:07.21,英文,,0,0,0,,Let's say that we have nine coins.
Dialogue: 0,0:20:03.68,0:20:07.21,中文,,0,0,0,,假设有九枚硬币
Dialogue: 0,0:20:07.21,0:20:12.37,英文,,0,0,0,,And we have this scale that can weigh two sets of coins together.
Dialogue: 0,0:20:07.21,0:20:12.37,中文,,0,0,0,,然后有个天平 可以用来比较两组硬币的重量
Dialogue: 0,0:20:12.37,0:20:15.21,英文,,0,0,0,,Unfortunately, one of these coins is counterfeit.
Dialogue: 0,0:20:12.37,0:20:15.21,中文,,0,0,0,,不幸的是 其中一枚是假币
Dialogue: 0,0:20:15.21,0:20:16.93,英文,,0,0,0,,It weighs slightly more than all the other eight.
Dialogue: 0,0:20:15.21,0:20:16.93,中文,,0,0,0,,它比其他八枚都重一点
Dialogue: 0,0:20:16.93,0:20:19.94,英文,,0,0,0,,All the other eight are exactly the same weight.
Dialogue: 0,0:20:16.93,0:20:19.94,中文,,0,0,0,,其他八枚重量完全相同
Dialogue: 0,0:20:19.94,0:20:27.26,英文,,0,0,0,,And we can use a scale to compare two sets of coins at a time, but we can only use this scale twice.
Dialogue: 0,0:20:19.94,0:20:27.26,中文,,0,0,0,,咱们可以用天平比较两组硬币 但只能用两次
Dialogue: 0,0:20:27.26,0:20:35.52,英文,,0,0,0,,Can we come up with an algorithm that guarantees that we'll be able to find the counterfeit coin, regardless of which one it is?
Dialogue: 0,0:20:27.26,0:20:35.52,中文,,0,0,0,,我们能不能想出一个算法 保证无论假币是哪一枚 都能找到它？
Dialogue: 0,0:20:35.52,0:20:39.28,英文,,0,0,0,,Let's take a step back, try and discuss with your neighbors.
Dialogue: 0,0:20:35.52,0:20:39.28,中文,,0,0,0,,咱们退一步 跟旁边的同学讨论讨论
Dialogue: 0,0:20:39.28,0:20:43.34,英文,,0,0,0,,This is a classical type of question, or a classical problem.
Dialogue: 0,0:20:39.28,0:20:43.34,中文,,0,0,0,,这是个经典问题 很多地方都能遇到
Dialogue: 0,0:20:43.34,0:20:44.76,英文,,0,0,0,,It shows up in a lot of different cases.
Dialogue: 0,0:20:43.34,0:20:44.76,中文,,0,0,0,,很多情况下都会出现
Dialogue: 0,0:20:44.76,0:20:50.09,英文,,0,0,0,,So if you've seen this before, please don't spoil it for your neighbors.
Dialogue: 0,0:20:44.76,0:20:50.09,中文,,0,0,0,,如果你之前见过这个 请不要剧透给你的同学
Dialogue: 0,0:20:50.09,0:22:53.22,英文,,0,0,0,,Yeah.
Dialogue: 0,0:20:50.09,0:22:53.22,中文,,0,0,0,,
Dialogue: 0,0:22:53.22,0:22:56.84,英文,,0,0,0,,All right, let's bring everyone back.
Dialogue: 0,0:22:53.22,0:22:56.84,中文,,0,0,0,,好了 大家安静
Dialogue: 0,0:22:56.84,0:23:06.02,英文,,0,0,0,,Has anyone come up with a solution for this, and who did not know about this problem before coming into lecture, for now?
Dialogue: 0,0:22:56.84,0:23:06.02,中文,,0,0,0,,有没有人想出解决方案了 谁是上课前不知道这个问题的？
Dialogue: 0,0:23:06.02,0:23:06.94,英文,,0,0,0,,Yeah, let's go over there.
Dialogue: 0,0:23:06.02,0:23:06.94,中文,,0,0,0,,好 那边那位同学
Dialogue: 0,0:23:06.94,0:23:09.38,英文,,0,0,0,,I haven't talked to that back here.
Dialogue: 0,0:23:06.94,0:23:09.38,中文,,0,0,0,,我还没跟后面那位同学说过话
Dialogue: 0,0:23:09.38,0:23:35.13,英文,,0,0,0,,Yeah, so we can compare set 1, 2, 3 with set 7, 8, 9, and then depending on the
Dialogue: 0,0:23:09.38,0:23:35.13,中文,,0,0,0,,我们可以比较第1、2、3组和第7、8、9组 然后根据...
Dialogue: 0,0:23:35.13,0:23:36.03,英文,,0,0,0,,Yep.
Dialogue: 0,0:23:35.13,0:23:36.03,中文,,0,0,0,,没错
Dialogue: 0,0:23:36.03,0:23:39.35,英文,,0,0,0,,So effectively, this is kind of what we do.
Dialogue: 0,0:23:36.03,0:23:39.35,中文,,0,0,0,,我们就是这样做的
Dialogue: 0,0:23:39.35,0:23:41.23,英文,,0,0,0,,There's a lot of these different solutions.
Dialogue: 0,0:23:39.35,0:23:41.23,中文,,0,0,0,,有很多不同的解决方案
Dialogue: 0,0:23:41.23,0:23:43.61,英文,,0,0,0,,You did 1, 2, 3 versus 7, 8, 9.
Dialogue: 0,0:23:41.23,0:23:43.61,中文,,0,0,0,,你比较的是 1、2、3 和 7、8、9
Dialogue: 0,0:23:43.61,0:23:46.47,英文,,0,0,0,,But what I did was 1, 2, 3 versus 4, 5, 6.
Dialogue: 0,0:23:43.61,0:23:46.47,中文,,0,0,0,,但我比较的是 1、2、3 和 4、5、6
Dialogue: 0,0:23:46.47,0:23:52.71,英文,,0,0,0,,The main way you do this, so the way you do this is you just compare these first three coins with the second three coins.
Dialogue: 0,0:23:46.47,0:23:52.71,中文,,0,0,0,,主要方法是 你只需将前三个硬币与后三个硬币进行比较
Dialogue: 0,0:23:52.71,0:23:56.98,英文,,0,0,0,,And what ends up happening is that the scale ends up yielding one of three possible results.
Dialogue: 0,0:23:52.71,0:23:56.98,中文,,0,0,0,,最终结果是天平会产生三种可能的结果之一
Dialogue: 0,0:23:56.98,0:24:05.08,英文,,0,0,0,,It either says that the left side is heavier, it says that the right side is heavier, or that the two are balanced and equal.
Dialogue: 0,0:23:56.98,0:24:05.08,中文,,0,0,0,,要么左边重 要么右边重 要么两边平衡相等
Dialogue: 0,0:24:05.08,0:24:12.34,英文,,0,0,0,,In either of these cases, we've ended up narrowing down where the heavier coin needs to be.
Dialogue: 0,0:24:05.08,0:24:12.34,中文,,0,0,0,,无论哪种情况 我们都缩小了较重硬币的范围
Dialogue: 0,0:24:12.34,0:24:18.55,英文,,0,0,0,,If the left side's heavier, then we can guarantee that either coin 1, coin 2, or coin 3 is one of the heavier coins.
Dialogue: 0,0:24:12.34,0:24:18.55,中文,,0,0,0,,如果左边较重 那么我们可以确定硬币 1、硬币 2 或硬币 3 中有一个是较重的硬币
Dialogue: 0,0:24:18.55,0:24:21.39,英文,,0,0,0,,So we can kind of compare 1 and 2.
Dialogue: 0,0:24:18.55,0:24:21.39,中文,,0,0,0,,所以我们可以比较 1 和 2
Dialogue: 0,0:24:21.39,0:24:28.43,英文,,0,0,0,,If 1 and 2, one of them is heavier or lighter, then we can immediately know for a fact which coin is the counterfeit.
Dialogue: 0,0:24:21.39,0:24:28.43,中文,,0,0,0,,如果 1 和 2 中有一个较重或较轻 那么我们就可以立即确定哪个硬币是假币
Dialogue: 0,0:24:28.43,0:24:32.29,英文,,0,0,0,,If the two are equal, then that means that 1 and 2 were not the heavier coin.
Dialogue: 0,0:24:28.43,0:24:32.29,中文,,0,0,0,,如果两者相等 那就意味着 1 和 2 不是较重的硬币
Dialogue: 0,0:24:32.29,0:24:35.37,英文,,0,0,0,,But between 1, 2, and 3, one of them was the heavier coin.
Dialogue: 0,0:24:32.29,0:24:35.37,中文,,0,0,0,,但在 1、2 和 3 中 有一个是较重的硬币
Dialogue: 0,0:24:35.37,0:24:40.07,英文,,0,0,0,,So 3 needs to be the heaviest, heavier coin.
Dialogue: 0,0:24:35.37,0:24:40.07,中文,,0,0,0,,所以 3 一定是最重的硬币
Dialogue: 0,0:24:40.07,0:24:42.45,英文,,0,0,0,,And you can do the same thing in all the other cases.
Dialogue: 0,0:24:40.07,0:24:42.45,中文,,0,0,0,,在其他情况下也可以这样做
Dialogue: 0,0:24:42.45,0:24:46.35,英文,,0,0,0,,If 4, 5, 6 contain the heavier coin, then you can compare 4 versus 5.
Dialogue: 0,0:24:42.45,0:24:46.35,中文,,0,0,0,,如果 4、5、6 中包含较重的硬币 那么你可以比较 4 和 5
Dialogue: 0,0:24:46.35,0:24:50.80,英文,,0,0,0,,And if they're equal, then 6 is the heavier coin.
Dialogue: 0,0:24:46.35,0:24:50.80,中文,,0,0,0,,如果它们相等 那么 6 就是较重的硬币
Dialogue: 0,0:24:50.80,0:24:59.02,英文,,0,0,0,,And if 7, 8, 9 contain the heavier coin, because 1, 2, 3, and 4, 5, 6 were equal, then you can run this comparison as well.
Dialogue: 0,0:24:50.80,0:24:59.02,中文,,0,0,0,,如果 7、8、9 中包含较重的硬币 因为 1、2、3 和 4、5、6 相等 那么你也可以进行这个比较
Dialogue: 0,0:24:59.02,0:25:06.59,英文,,0,0,0,,7 versus 8, and then if they're equal, then you run 9.
Dialogue: 0,0:24:59.02,0:25:06.59,中文,,0,0,0,,7 和 8 比较 如果它们相等 那就比较 9
Dialogue: 0,0:25:06.59,0:25:10.18,英文,,0,0,0,,Here's kind of the pool decision tree for 9 coins.
Dialogue: 0,0:25:06.59,0:25:10.18,中文,,0,0,0,,这是 9 个硬币的决策树
Dialogue: 0,0:25:10.18,0:25:11.52,英文,,0,0,0,,We kind of run this comparison.
Dialogue: 0,0:25:10.18,0:25:11.52,中文,,0,0,0,,我们运行了这个比较
Dialogue: 0,0:25:11.52,0:25:14.72,英文,,0,0,0,,So we compare 1, 2, 3, versus 4, 5, 6 at the top.
Dialogue: 0,0:25:11.52,0:25:14.72,中文,,0,0,0,,我们在顶部比较 1、2、3 与 4、5、6
Dialogue: 0,0:25:14.72,0:25:18.68,英文,,0,0,0,,If left side is greater, then we go down this red path.
Dialogue: 0,0:25:14.72,0:25:18.68,中文,,0,0,0,,如果左侧更大 我们就走这条红色路径
Dialogue: 0,0:25:18.68,0:25:22.08,英文,,0,0,0,,If right side is greater, we go down the blue path.
Dialogue: 0,0:25:18.68,0:25:22.08,中文,,0,0,0,,如果右侧更大 我们就走这条蓝色路径
Dialogue: 0,0:25:22.08,0:25:24.36,英文,,0,0,0,,If they're equal, then we go down this gray path.
Dialogue: 0,0:25:22.08,0:25:24.36,中文,,0,0,0,,如果它们相等 我们就走这条灰色路径
Dialogue: 0,0:25:24.36,0:25:35.13,英文,,0,0,0,,And in each of these cases, we use exactly two weighings to eventually get to one of these nine questions.
Dialogue: 0,0:25:24.36,0:25:35.13,中文,,0,0,0,,在每种情况下 我们都只用两次称重就能最终得到这九个问题中的一个
Dialogue: 0,0:25:35.13,0:25:41.65,英文,,0,0,0,,Now, to verify this, I'm going to actually kind of look at every single possible universe that could exist.
Dialogue: 0,0:25:35.13,0:25:41.65,中文,,0,0,0,,现在 为了验证这一点 我将实际查看每一个可能存在的宇宙
Dialogue: 0,0:25:41.65,0:25:45.61,英文,,0,0,0,,There's nine distinct universes that we could live in.
Dialogue: 0,0:25:41.65,0:25:45.61,中文,,0,0,0,,我们可能生活在九个不同的宇宙中
Dialogue: 0,0:25:45.61,0:25:52.18,英文,,0,0,0,,If you kind of look at this multiversal theory, there's nine different universes that we could have possibly started with.
Dialogue: 0,0:25:45.61,0:25:52.18,中文,,0,0,0,,如果你看看这个多元宇宙理论 我们可能从九个不同的宇宙开始
Dialogue: 0,0:25:52.18,0:25:54.58,英文,,0,0,0,,We could have started with the universe where 1 is a counterfeit coin.
Dialogue: 0,0:25:52.18,0:25:54.58,中文,,0,0,0,,我们可能从 1 是假币的宇宙开始
Dialogue: 0,0:25:54.58,0:25:59.77,英文,,0,0,0,,We could have started the universe where 2 is a counterfeit coin, 3 is a counterfeit, and so on and so forth.
Dialogue: 0,0:25:54.58,0:25:59.77,中文,,0,0,0,,我们可能从 2 是假币的宇宙开始 3 是假币 等等
Dialogue: 0,0:25:59.77,0:26:04.73,英文,,0,0,0,,There's a total of nine of these, and we can look in each universe that we get the correct result from this.
Dialogue: 0,0:25:59.77,0:26:04.73,中文,,0,0,0,,总共有九个这样的宇宙 我们可以查看每个宇宙 从中得到正确的结果
Dialogue: 0,0:26:04.73,0:26:07.57,英文,,0,0,0,,Here's kind of the full decision tree for Universe 1.
Dialogue: 0,0:26:04.73,0:26:07.57,中文,,0,0,0,,这是宇宙 1 的完整决策树
Dialogue: 0,0:26:07.57,0:26:11.22,英文,,0,0,0,,We start off at the 1, 2, 3 versus 4, 5, 6 spot.
Dialogue: 0,0:26:07.57,0:26:11.22,中文,,0,0,0,,我们从 1、2、3 与 4、5、6 的位置开始
Dialogue: 0,0:26:11.22,0:26:16.88,英文,,0,0,0,,And when we compare this when 1 is the heavier coin, then the 1, 2, 3 side is going to be heavier.
Dialogue: 0,0:26:11.22,0:26:16.88,中文,,0,0,0,,当我们比较这个 当 1 是较重的硬币时 那么 1、2、3 这边会更重
Dialogue: 0,0:26:16.88,0:26:21.30,英文,,0,0,0,,We then look at the 1 versus 2 node, and we see.
Dialogue: 0,0:26:16.88,0:26:21.30,中文,,0,0,0,,然后我们查看 1 与 2 的节点 我们看到
Dialogue: 0,0:26:21.30,0:26:25.01,英文,,0,0,0,,When we compare 1 and 2, 1 is going to again be the heavier one.
Dialogue: 0,0:26:21.30,0:26:25.01,中文,,0,0,0,,当我们比较 1 和 2 时 1 又会是较重的那个
Dialogue: 0,0:26:25.01,0:26:28.09,英文,,0,0,0,,That means that we end up in this leaf that says 1 is the fake coin.
Dialogue: 0,0:26:25.01,0:26:28.09,中文,,0,0,0,,这意味着我们最终落在了这个说 1 是假币的叶子上
Dialogue: 0,0:26:28.09,0:26:29.05,英文,,0,0,0,,And that's correct.
Dialogue: 0,0:26:28.09,0:26:29.05,中文,,0,0,0,,这是正确的
Dialogue: 0,0:26:29.05,0:26:33.84,英文,,0,0,0,,In universe 1, 1 was the fake coin.
Dialogue: 0,0:26:29.05,0:26:33.84,中文,,0,0,0,,在宇宙 1 中 1 是假币
Dialogue: 0,0:26:33.84,0:26:38.22,英文,,0,0,0,,Here's the exact way we run through every single one of these universes.
Dialogue: 0,0:26:33.84,0:26:38.22,中文,,0,0,0,,这就是我们遍历每一个宇宙的具体方法
Dialogue: 0,0:26:38.22,0:26:48.51,英文,,0,0,0,,And we can kind of verify that every single one of these universes, we end up at the correct result.
Dialogue: 0,0:26:38.22,0:26:48.51,中文,,0,0,0,,我们可以验证每一个宇宙 最终都会得到正确的结果
Dialogue: 0,0:26:48.51,0:26:50.89,英文,,0,0,0,,So here's an interesting question.
Dialogue: 0,0:26:48.51,0:26:50.89,中文,,0,0,0,,这里有一个有趣的问题
Dialogue: 0,0:26:50.89,0:26:53.47,英文,,0,0,0,,Can we do this with 10 coins?
Dialogue: 0,0:26:50.89,0:26:53.47,中文,,0,0,0,,我们能用 10 个硬币做这个吗？
Dialogue: 0,0:26:53.47,0:26:55.98,英文,,0,0,0,,With nine coins, we're able to get two weighings.
Dialogue: 0,0:26:53.47,0:26:55.98,中文,,0,0,0,,用 9 个硬币 我们可以称重两次
Dialogue: 0,0:26:55.98,0:27:02.90,英文,,0,0,0,,Can you do this with 10 coins?
Dialogue: 0,0:26:55.98,0:27:02.90,中文,,0,0,0,,你能用 10 个硬币做这个吗？
Dialogue: 0,0:27:02.90,0:27:07.70,英文,,0,0,0,,I'm seeing some head shakes.
Dialogue: 0,0:27:02.90,0:27:07.70,中文,,0,0,0,,我看到一些人摇头了
Dialogue: 0,0:27:07.70,0:27:08.54,英文,,0,0,0,,Why?
Dialogue: 0,0:27:07.70,0:27:08.54,中文,,0,0,0,,为什么？
Dialogue: 0,0:27:08.54,0:27:10.20,英文,,0,0,0,,Why can we not do this?
Dialogue: 0,0:27:08.54,0:27:10.20,中文,,0,0,0,,为什么我们不能这样做？
Dialogue: 0,0:27:10.20,0:27:17.28,英文,,0,0,0,,I don't just want to say we can't, because I'm saying this, and it really seems likely that if I'm saying that we can't, can we do this in 10 coins?
Dialogue: 0,0:27:10.20,0:27:17.28,中文,,0,0,0,,我不想只是说我们不能 因为我这样说了 而且看起来很有可能 如果我说我们不能用 10 个硬币做这个 那我们真的不能吗？
Dialogue: 0,0:27:17.28,0:27:18.97,英文,,0,0,0,,We shouldn't be able to.
Dialogue: 0,0:27:17.28,0:27:18.97,中文,,0,0,0,,我们应该做不到
Dialogue: 0,0:27:18.97,0:27:20.75,英文,,0,0,0,,I want to know why.
Dialogue: 0,0:27:18.97,0:27:20.75,中文,,0,0,0,,我想知道为什么
Dialogue: 0,0:27:20.75,0:27:23.47,英文,,0,0,0,,Can we prove why this is the case?
Dialogue: 0,0:27:20.75,0:27:23.47,中文,,0,0,0,,我们能证明为什么是这样吗？
Dialogue: 0,0:27:23.47,0:27:30.67,英文,,0,0,0,,Yeah?
Dialogue: 0,0:27:23.47,0:27:30.67,中文,,0,0,0,,可以吗？
Dialogue: 0,0:27:30.67,0:27:33.86,英文,,0,0,0,,You need to have batches of three.
Dialogue: 0,0:27:30.67,0:27:33.86,中文,,0,0,0,,你需要分成三组
Dialogue: 0,0:27:33.86,0:27:35.39,英文,,0,0,0,,Why?
Dialogue: 0,0:27:33.86,0:27:35.39,中文,,0,0,0,,为什么？
Dialogue: 0,0:27:35.39,0:27:41.33,英文,,0,0,0,,What if there's some other order where you get batches of four at the start or something?
Dialogue: 0,0:27:35.39,0:27:41.33,中文,,0,0,0,,如果有一些其他的顺序 比如一开始就分成四组 那会怎么样？
Dialogue: 0,0:27:41.33,0:28:09.46,英文,,0,0,0,,Yes.
Dialogue: 0,0:27:41.33,0:28:09.46,中文,,0,0,0,,是的
Dialogue: 0,0:28:09.46,0:28:17.77,英文,,0,0,0,,Yeah, if we're following the path that we had earlier, where we kind of split it into groups that are divisible by 3, then we wouldn't need 9.
Dialogue: 0,0:28:09.46,0:28:17.77,中文,,0,0,0,,是的 如果我们按照之前的方法 把它们分成 3 的倍数的组 那么我们就不需要 9 个了
Dialogue: 0,0:28:17.77,0:28:18.87,英文,,0,0,0,,We can't go up to 10.
Dialogue: 0,0:28:17.77,0:28:18.87,中文,,0,0,0,,我们不能增加到 10 个
Dialogue: 0,0:28:18.87,0:28:23.33,英文,,0,0,0,,The question is, is this the only possible tree that exists?
Dialogue: 0,0:28:18.87,0:28:23.33,中文,,0,0,0,,问题是 这是唯一可能的树结构吗？
Dialogue: 0,0:28:23.33,0:28:30.46,英文,,0,0,0,,What if someone spent a really long time trying to solve this problem with 10 coins?
Dialogue: 0,0:28:23.33,0:28:30.46,中文,,0,0,0,,如果有人花很长时间尝试用 10 个硬币解决这个问题会怎么样？
Dialogue: 0,0:28:30.46,0:28:36.32,英文,,0,0,0,,Could they even possibly come up with any solution, no matter what?
Dialogue: 0,0:28:30.46,0:28:36.32,中文,,0,0,0,,他们有可能想出任何解决方案吗 无论是什么？
Dialogue: 0,0:28:36.32,0:28:46.75,英文,,0,0,0,,Yeah?
Dialogue: 0,0:28:36.32,0:28:46.75,中文,,0,0,0,,是吗？
Dialogue: 0,0:28:46.75,0:28:54.95,英文,,0,0,0,,The number of coins within each batch is equal to the number of batches.
Dialogue: 0,0:28:46.75,0:28:54.95,中文,,0,0,0,,每批硬币的数量等于批次数
Dialogue: 0,0:28:54.95,0:29:03.04,英文,,0,0,0,,Well, that is true in this case.
Dialogue: 0,0:28:54.95,0:29:03.04,中文,,0,0,0,,嗯 在这种情况下是这样的
Dialogue: 0,0:29:03.04,0:29:08.81,英文,,0,0,0,,I will note that we can solve this problem with eight coins.
Dialogue: 0,0:29:03.04,0:29:08.81,中文,,0,0,0,,我要说明的是 我们可以用八个硬币解决这个问题
Dialogue: 0,0:29:08.81,0:29:11.95,英文,,0,0,0,,Yeah?
Dialogue: 0,0:29:08.81,0:29:11.95,中文,,0,0,0,,是吗？
Dialogue: 0,0:29:11.95,0:29:32.61,英文,,0,0,0,,Yeah?
Dialogue: 0,0:29:11.95,0:29:32.61,中文,,0,0,0,,是吗？
Dialogue: 0,0:29:32.61,0:29:34.79,英文,,0,0,0,,Yes, that's a good point.
Dialogue: 0,0:29:32.61,0:29:34.79,中文,,0,0,0,,是的 这是个好观点
Dialogue: 0,0:29:34.79,0:29:47.28,英文,,0,0,0,,When we look at this tree, every single one of these nodes allows us to branch by a factor of three, which means at the very end, we have nine total leaves.
Dialogue: 0,0:29:34.79,0:29:47.28,中文,,0,0,0,,当我们看这棵树时 每个节点都允许我们分支三倍 这意味着最后我们总共有九个叶子
Dialogue: 0,0:29:47.28,0:29:57.08,英文,,0,0,0,,If we have nine leaves, and there's 10 possible universes we could be in, then one of these leaves must contain at least two universes.
Dialogue: 0,0:29:47.28,0:29:57.08,中文,,0,0,0,,如果我们有九个叶子 并且有 10 个可能的宇宙 那么其中一个叶子必须包含至少两个宇宙
Dialogue: 0,0:29:57.08,0:30:05.90,英文,,0,0,0,,Regardless of how we decide our decision tree, one of these leaves is going to contain two of these universes,
Dialogue: 0,0:29:57.08,0:30:05.90,中文,,0,0,0,,无论我们如何决定我们的决策树 其中一个叶子都将包含这两个宇宙
Dialogue: 0,0:30:05.90,0:30:12.86,英文,,0,0,0,,And in that leaf, we're going to end up being wrong in at least one of these universes.
Dialogue: 0,0:30:05.90,0:30:12.86,中文,,0,0,0,,在那个叶子里 我们最终会在至少一个宇宙中出错
Dialogue: 0,0:30:12.86,0:30:22.79,英文,,0,0,0,,So in this example here, we might set up so that both the 6-universe and 3-universe end up in this leaf that says that 6 is fake.
Dialogue: 0,0:30:12.86,0:30:22.79,中文,,0,0,0,,在这个例子中 我们可能会设置 6-宇宙和 3-宇宙都最终落在这个表示 6 是假的叶子上
Dialogue: 0,0:30:22.79,0:30:24.29,英文,,0,0,0,,That's not true for all cases.
Dialogue: 0,0:30:22.79,0:30:24.29,中文,,0,0,0,,并非所有情况都是如此
Dialogue: 0,0:30:24.29,0:30:30.95,英文,,0,0,0,,When 3 is the fake coin, we end up in this leaf incorrectly.
Dialogue: 0,0:30:24.29,0:30:30.95,中文,,0,0,0,,当 3 是假币时 我们错误地落在这个叶子里
Dialogue: 0,0:30:30.95,0:30:35.95,英文,,0,0,0,,So because of this, it is impossible to handle 10 coins.
Dialogue: 0,0:30:30.95,0:30:35.95,中文,,0,0,0,,因此 由于这一点 不可能处理 10 个硬币
Dialogue: 0,0:30:35.95,0:30:41.64,英文,,0,0,0,,It's impossible to handle 11 coins or any more than 9 coins.
Dialogue: 0,0:30:35.95,0:30:41.64,中文,,0,0,0,,不可能处理 11 个硬币或任何超过 9 个硬币
Dialogue: 0,0:30:41.64,0:30:47.96,英文,,0,0,0,,And in fact, we can kind of show that this is true for as many layers as we want.
Dialogue: 0,0:30:41.64,0:30:47.96,中文,,0,0,0,,事实上 我们可以证明这一点对任意层都是成立的
Dialogue: 0,0:30:47.96,0:30:50.42,英文,,0,0,0,,What if we wanted to keep adding coins?
Dialogue: 0,0:30:47.96,0:30:50.42,中文,,0,0,0,,如果要继续增加硬币数量呢？
Dialogue: 0,0:30:50.42,0:31:00.65,英文,,0,0,0,,So if we had three weighings, how many coins could we handle?
Dialogue: 0,0:30:50.42,0:31:00.65,中文,,0,0,0,,如果有三次称重机会 我们最多可以处理多少枚硬币？
Dialogue: 0,0:31:00.65,0:31:03.63,英文,,0,0,0,,27, why?
Dialogue: 0,0:31:00.65,0:31:03.63,中文,,0,0,0,,27 为什么呢？
Dialogue: 0,0:31:03.63,0:31:04.61,英文,,0,0,0,,Yep.
Dialogue: 0,0:31:03.63,0:31:04.61,中文,,0,0,0,,是的
Dialogue: 0,0:31:04.61,0:31:11.28,英文,,0,0,0,,Each time we go through one of these layers, we're splitting the tree into three more layers, or three more by a factor of three.
Dialogue: 0,0:31:04.61,0:31:11.28,中文,,0,0,0,,每进行一层称重 我们就把树形结构分成三层 或者说是乘以3
Dialogue: 0,0:31:11.28,0:31:13.54,英文,,0,0,0,,So we're going to have three times as many leaves.
Dialogue: 0,0:31:11.28,0:31:13.54,中文,,0,0,0,,所以叶子节点的数量会变成原来的三倍
Dialogue: 0,0:31:13.54,0:31:20.25,英文,,0,0,0,,At least according to this theoretical bound, we can show that we will not be able to handle 28 coins
Dialogue: 0,0:31:13.54,0:31:20.25,中文,,0,0,0,,至少根据这个理论界限 我们可以证明无法处理 28 枚硬币
Dialogue: 0,0:31:20.25,0:31:28.25,英文,,0,0,0,,because we only have 27 possible leaves, and each leaf needs to correspond to a distinct universe.
Dialogue: 0,0:31:20.25,0:31:28.25,中文,,0,0,0,,因为我们只有 27 个可能的叶子节点 而每个叶子节点都需要对应一个独特的宇宙
Dialogue: 0,0:31:28.25,0:31:30.62,英文,,0,0,0,,If we add four weighings,
Dialogue: 0,0:31:28.25,0:31:30.62,中文,,0,0,0,,如果我们增加到四次称重
Dialogue: 0,0:31:30.62,0:31:37.76,英文,,0,0,0,,81 coins, 5 Wangs, 243, so on and so forth, we get basically 3 to the n coins.
Dialogue: 0,0:31:30.62,0:31:37.76,中文,,0,0,0,,81 枚硬币 5 次称重 243 枚硬币 以此类推 我们基本上得到 3 的 N 次方枚硬币
Dialogue: 0,0:31:37.76,0:31:46.37,英文,,0,0,0,,So if we have more than 3 to the n coins, then we cannot succeed in this Wang problem.
Dialogue: 0,0:31:37.76,0:31:46.37,中文,,0,0,0,,因此 如果硬币数量超过 3 的 N 次方 我们就无法成功解决这个称重问题
Dialogue: 0,0:31:46.37,0:31:55.96,英文,,0,0,0,,We can prove that no algorithm exists because that decision tree does not have enough leaves to hold all the universes we have.
Dialogue: 0,0:31:46.37,0:31:55.96,中文,,0,0,0,,我们可以证明不存在这样的算法 因为决策树没有足够的叶子节点来容纳我们所有的宇宙
Dialogue: 0,0:31:55.96,0:31:57.52,英文,,0,0,0,,Does a converse hold true?
Dialogue: 0,0:31:55.96,0:31:57.52,中文,,0,0,0,,反过来也成立吗？
Dialogue: 0,0:31:57.52,0:32:06.65,英文,,0,0,0,,Is it guaranteed that if we have 3 to the n or fewer coins, we'll have an algorithm?
Dialogue: 0,0:31:57.52,0:32:06.65,中文,,0,0,0,,如果硬币数量小于或等于 3 的 N 次方 是否就能保证一定存在算法？
Dialogue: 0,0:32:06.65,0:32:10.42,英文,,0,0,0,,How many people think yes, it's guaranteed?
Dialogue: 0,0:32:06.65,0:32:10.42,中文,,0,0,0,,有多少人认为是的 一定存在？
Dialogue: 0,0:32:10.42,0:32:12.72,英文,,0,0,0,,How many people think no, it's not guaranteed?
Dialogue: 0,0:32:10.42,0:32:12.72,中文,,0,0,0,,有多少人认为不是 不一定存在？
Dialogue: 0,0:32:12.72,0:32:16.70,英文,,0,0,0,,How many people are entirely unsure?
Dialogue: 0,0:32:12.72,0:32:16.70,中文,,0,0,0,,有多少人完全不确定？
Dialogue: 0,0:32:16.70,0:32:19.58,英文,,0,0,0,,Yeah, it's kind of tricky to see.
Dialogue: 0,0:32:16.70,0:32:19.58,中文,,0,0,0,,是的 这有点难以理解
Dialogue: 0,0:32:19.58,0:32:24.49,英文,,0,0,0,,As it turns out, for this particular problem, it is guaranteed that it exists.
Dialogue: 0,0:32:19.58,0:32:24.49,中文,,0,0,0,,事实证明 对于这个问题 一定存在算法
Dialogue: 0,0:32:24.49,0:32:31.87,英文,,0,0,0,,The main algorithm is just you split it up into groups of even groups of three.
Dialogue: 0,0:32:24.49,0:32:31.87,中文,,0,0,0,,主要的算法是将硬币分成三组 每组数量相等
Dialogue: 0,0:32:31.87,0:32:35.97,英文,,0,0,0,,Once you're there, once you're down one layer weighing, you kind of recurse on the set.
Dialogue: 0,0:32:31.87,0:32:35.97,中文,,0,0,0,,一旦完成一层称重 就可以对剩下的集合进行递归操作
Dialogue: 0,0:32:35.97,0:32:41.56,英文,,0,0,0,,Every single time you do one weighing, you reduce the number of possible coins that contain the heavy coin by a factor of three.
Dialogue: 0,0:32:35.97,0:32:41.56,中文,,0,0,0,,每次称重 有假币的硬币数量都会减少到原来的三分之一
Dialogue: 0,0:32:41.56,0:32:44.36,英文,,0,0,0,,So if you have four weighings, you start with 81 coins.
Dialogue: 0,0:32:41.56,0:32:44.36,中文,,0,0,0,,所以如果可以称重四次 从 81 个硬币开始
Dialogue: 0,0:32:44.36,0:32:47.08,英文,,0,0,0,,You compare the first 27 to the last 27.
Dialogue: 0,0:32:44.36,0:32:47.08,中文,,0,0,0,,将前 27 个与后 27 个进行比较
Dialogue: 0,0:32:47.08,0:32:52.33,英文,,0,0,0,,And no matter which way it ends up, you end up having a set of 27 coins with three weighings left.
Dialogue: 0,0:32:47.08,0:32:52.33,中文,,0,0,0,,无论结果如何 都会剩下 27 个硬币 还有三次称重机会
Dialogue: 0,0:32:52.33,0:32:55.93,英文,,0,0,0,,So you can kind of recurse downwards.
Dialogue: 0,0:32:52.33,0:32:55.93,中文,,0,0,0,,所以可以递归向下
Dialogue: 0,0:32:55.93,0:32:58.37,英文,,0,0,0,,This isn't actually necessarily true.
Dialogue: 0,0:32:55.93,0:32:58.37,中文,,0,0,0,,但这不一定正确
Dialogue: 0,0:32:58.37,0:33:05.30,英文,,0,0,0,,I have skipped slides here that show a version of this coin game where you actually have a worse bound.
Dialogue: 0,0:32:58.37,0:33:05.30,中文,,0,0,0,,我跳过了一些幻灯片 这些幻灯片展示了这个硬币游戏的另一个版本 在这个版本中 你实际上有一个更糟糕的界限
Dialogue: 0,0:33:05.30,0:33:14.53,英文,,0,0,0,,So you can't go as close to the bound as you want, but you can still get fairly close.
Dialogue: 0,0:33:05.30,0:33:14.53,中文,,0,0,0,,所以你不能无限接近这个界限 但你仍然可以相当接近
Dialogue: 0,0:33:14.53,0:33:18.19,英文,,0,0,0,,So if you're interested, then please take a look at the skipped slides.
Dialogue: 0,0:33:14.53,0:33:18.19,中文,,0,0,0,,所以如果你感兴趣 请看一下跳过的幻灯片
Dialogue: 0,0:33:18.19,0:33:20.85,英文,,0,0,0,,They contain more versions of this coin weighing game.
Dialogue: 0,0:33:18.19,0:33:20.85,中文,,0,0,0,,它们包含了更多版本的硬币称重游戏
Dialogue: 0,0:33:20.85,0:33:25.38,英文,,0,0,0,,It's just a bit long to run in a one-hour lecture.
Dialogue: 0,0:33:20.85,0:33:25.38,中文,,0,0,0,,只是在一个小时的讲座里讲太长了
Dialogue: 0,0:33:25.38,0:33:33.73,英文,,0,0,0,,But in general, if we have a decision tree with k layers and a branching factor of r, so every single time we have a decision,
Dialogue: 0,0:33:25.38,0:33:33.73,中文,,0,0,0,,但一般来说 如果我们有一个决策树 它有 K 层 分支因子为 R 所以每次我们做决定时
Dialogue: 0,0:33:33.73,0:33:40.73,英文,,0,0,0,,we get a result that has r possible return values, then we'll have at most r to the k leaves at the very end.
Dialogue: 0,0:33:33.73,0:33:40.73,中文,,0,0,0,,都会得到一个有 R 个可能返回值的结果 那么我们最多会有 R^K个叶子节点
Dialogue: 0,0:33:40.73,0:33:47.81,英文,,0,0,0,,So we'll be able to handle a problem with up to r to the k universes, where each universe is expected to yield a different result.
Dialogue: 0,0:33:40.73,0:33:47.81,中文,,0,0,0,,所以我们将能够处理一个最多有 R^K个宇宙的问题 其中每个宇宙都被期望产生不同的结果
Dialogue: 0,0:33:47.81,0:33:53.52,英文,,0,0,0,,If we flip this around, that means that if we have a problem that has r to the k different possible return values,
Dialogue: 0,0:33:47.81,0:33:53.52,中文,,0,0,0,,如果我们反过来看 这意味着如果我们有一个问题有 R^K个不同的可能返回值
Dialogue: 0,0:33:53.52,0:33:57.52,英文,,0,0,0,,r to the k different universes, then our decision tree must have at least k layers.
Dialogue: 0,0:33:53.52,0:33:57.52,中文,,0,0,0,,R^K个不同的宇宙 那么我们的决策树必须至少有 K 层
Dialogue: 0,0:33:57.52,0:34:09.92,英文,,0,0,0,,Or if we have a problem with k universes, then the decision tree must have omega of log k layers, and therefore take at least omega of log k time.
Dialogue: 0,0:33:57.52,0:34:09.92,中文,,0,0,0,,或者如果我们有一个 K 个宇宙的问题 那么决策树必须有 Ω(log K) 层 因此至少需要 Ω(log K) 的时间
Dialogue: 0,0:34:09.92,0:34:12.50,英文,,0,0,0,,Let's look at another question quickly.
Dialogue: 0,0:34:09.92,0:34:12.50,中文,,0,0,0,,让我们快速看一下另一个问题
Dialogue: 0,0:34:12.50,0:34:19.37,英文,,0,0,0,,Let's say that we have a puppy, a cat, and a dog, each of them in a box labeled A, B, and C. Puppy is lighter than the cat.
Dialogue: 0,0:34:12.50,0:34:19.37,中文,,0,0,0,,假设我们有一只小狗、一只猫和一只狗 它们分别在一个标有 A、B 和 C 的盒子里 小狗比猫轻
Dialogue: 0,0:34:19.37,0:34:20.69,英文,,0,0,0,,It's lighter than the dog.
Dialogue: 0,0:34:19.37,0:34:20.69,中文,,0,0,0,,它也比狗轻
Dialogue: 0,0:34:20.69,0:34:21.99,英文,,0,0,0,,And we have a scale.
Dialogue: 0,0:34:20.69,0:34:21.99,中文,,0,0,0,,我们有一个天平
Dialogue: 0,0:34:21.99,0:34:24.79,英文,,0,0,0,,And we want to minimize the number of times we want to use a scale.
Dialogue: 0,0:34:21.99,0:34:24.79,中文,,0,0,0,,我们想尽量减少使用天平的次数
Dialogue: 0,0:34:24.79,0:34:31.44,英文,,0,0,0,,Our goal is to write A, B, C in order of weight.
Dialogue: 0,0:34:24.79,0:34:31.44,中文,,0,0,0,,我们的目标是按重量顺序写出 A、B、C
Dialogue: 0,0:34:31.44,0:34:57.65,英文,,0,0,0,,So what's the minimum decision tree height for this game according to what we did earlier?
Dialogue: 0,0:34:31.44,0:34:57.65,中文,,0,0,0,,那么 根据我们之前所做的 这个游戏的最小决策树高度是多少？
Dialogue: 0,0:34:57.65,0:35:01.17,英文,,0,0,0,,How many people have an answer right now?
Dialogue: 0,0:34:57.65,0:35:01.17,中文,,0,0,0,,现在有多少人有答案？
Dialogue: 0,0:35:01.17,0:35:01.83,英文,,0,0,0,,Kind of?
Dialogue: 0,0:35:01.17,0:35:01.83,中文,,0,0,0,,大概？
Dialogue: 0,0:35:01.83,0:35:08.90,英文,,0,0,0,,Ish?
Dialogue: 0,0:35:01.83,0:35:08.90,中文,,0,0,0,,差不多？
Dialogue: 0,0:35:08.90,0:35:15.68,英文,,0,0,0,,Well, the first thing we should kind of think about is how many different universes exist in this problem?
Dialogue: 0,0:35:08.90,0:35:15.68,中文,,0,0,0,,嗯 我们首先应该考虑的是这个问题中存在多少不同的宇宙？
Dialogue: 0,0:35:15.68,0:35:22.76,英文,,0,0,0,,How many different possible orderings could there be of the puppy, the cat, and the dog?
Dialogue: 0,0:35:15.68,0:35:22.76,中文,,0,0,0,,小狗、小猫和小狗可能有几种不同的排序方式？
Dialogue: 0,0:35:22.76,0:35:24.61,英文,,0,0,0,,Does anyone have an answer to that question?
Dialogue: 0,0:35:22.76,0:35:24.61,中文,,0,0,0,,有人知道这个问题的答案吗？
Dialogue: 0,0:35:24.61,0:35:29.19,英文,,0,0,0,,How many differing universes exist here?
Dialogue: 0,0:35:24.61,0:35:29.19,中文,,0,0,0,,这里有多少个不同的宇宙存在？
Dialogue: 0,0:35:29.19,0:35:30.25,英文,,0,0,0,,Yeah?
Dialogue: 0,0:35:29.19,0:35:30.25,中文,,0,0,0,,是的？
Dialogue: 0,0:35:30.25,0:35:30.67,英文,,0,0,0,,Six?
Dialogue: 0,0:35:30.25,0:35:30.67,中文,,0,0,0,,六个？
Dialogue: 0,0:35:30.67,0:35:31.11,英文,,0,0,0,,Why six?
Dialogue: 0,0:35:30.67,0:35:31.11,中文,,0,0,0,,为什么是六个？
Dialogue: 0,0:35:31.11,0:35:41.93,英文,,0,0,0,,If you choose two, it's three.
Dialogue: 0,0:35:31.11,0:35:41.93,中文,,0,0,0,,如果你选择两个 那就是三个
Dialogue: 0,0:35:41.93,0:35:44.75,英文,,0,0,0,,Yeah, three times two times one.
Dialogue: 0,0:35:41.93,0:35:44.75,中文,,0,0,0,,是的 三乘二乘一
Dialogue: 0,0:35:44.75,0:35:47.79,英文,,0,0,0,,Yeah, we have three possible places for the dog.
Dialogue: 0,0:35:44.75,0:35:47.79,中文,,0,0,0,,是的 我们有三个可能的位置放狗
Dialogue: 0,0:35:47.79,0:35:51.09,英文,,0,0,0,,Once we select where the dog goes, the cat has two possible spots.
Dialogue: 0,0:35:47.79,0:35:51.09,中文,,0,0,0,,一旦我们选择了狗的位置 猫就有两个可能的位置
Dialogue: 0,0:35:51.09,0:35:54.93,英文,,0,0,0,,And once we select where the cat goes, the puppy has only one spot left.
Dialogue: 0,0:35:51.09,0:35:54.93,中文,,0,0,0,,一旦我们选择了猫的位置 小狗就只剩下一个位置了
Dialogue: 0,0:35:54.93,0:36:04.78,英文,,0,0,0,,So we have three times two times one different possibilities, or three factorial different possible universes we could be in.
Dialogue: 0,0:35:54.93,0:36:04.78,中文,,0,0,0,,所以我们有三乘二乘一不同的可能性 或者说我们可能处于三个阶乘不同的宇宙中
Dialogue: 0,0:36:04.78,0:36:11.67,英文,,0,0,0,,If we have six universes, what's our decision tree height?
Dialogue: 0,0:36:04.78,0:36:11.67,中文,,0,0,0,,如果我们有六个宇宙 我们的决策树高度是多少？
Dialogue: 0,0:36:11.67,0:36:16.87,英文,,0,0,0,,Each decision needs to be either 1 or 0, so we have a branching factor of 2 in this case.
Dialogue: 0,0:36:11.67,0:36:16.87,中文,,0,0,0,,每个决定都需要是 1 或 0 所以在这种情况下我们有一个分支因子 2
Dialogue: 0,0:36:16.87,0:36:18.79,英文,,0,0,0,,We either say left is heavier or right is heavier.
Dialogue: 0,0:36:16.87,0:36:18.79,中文,,0,0,0,,我们要么说左边更重 要么说右边更重
Dialogue: 0,0:36:18.79,0:36:28.20,英文,,0,0,0,,They're never equal.
Dialogue: 0,0:36:18.79,0:36:28.20,中文,,0,0,0,,它们永远不可能相等
Dialogue: 0,0:36:28.20,0:36:35.06,英文,,0,0,0,,So how many layers do we need?
Dialogue: 0,0:36:28.20,0:36:35.06,中文,,0,0,0,,那我们需要多少层呢？
Dialogue: 0,0:36:35.06,0:36:42.60,英文,,0,0,0,,Well, because we have six universes, we need a decision tree with six leaves at least.
Dialogue: 0,0:36:35.06,0:36:42.60,中文,,0,0,0,,因为我们有六个宇宙 所以我们需要一个至少有六个叶子的决策树
Dialogue: 0,0:36:42.60,0:36:47.69,英文,,0,0,0,,If we have a binary tree with only two layers, that's only going to have at most four leaves.
Dialogue: 0,0:36:42.60,0:36:47.69,中文,,0,0,0,,如果我们只有一个只有两层的二叉树 那么它最多只有四个叶子
Dialogue: 0,0:36:47.69,0:36:49.49,英文,,0,0,0,,So that's too few.
Dialogue: 0,0:36:47.69,0:36:49.49,中文,,0,0,0,,所以这太少了
Dialogue: 0,0:36:49.49,0:36:52.15,英文,,0,0,0,,If we have three layers, then we have eight leaves.
Dialogue: 0,0:36:49.49,0:36:52.15,中文,,0,0,0,,如果我们有三层 那么我们有八个叶子
Dialogue: 0,0:36:52.15,0:36:53.11,英文,,0,0,0,,So that's going to be large enough.
Dialogue: 0,0:36:52.15,0:36:53.11,中文,,0,0,0,,所以这足够大了
Dialogue: 0,0:36:53.11,0:36:56.66,英文,,0,0,0,,So we'll need at least three layers to run this.
Dialogue: 0,0:36:53.11,0:36:56.66,中文,,0,0,0,,所以我们至少需要三层来运行这个
Dialogue: 0,0:36:56.66,0:37:02.76,英文,,0,0,0,,Now, here's a version of the decision tree for PuppyCatDog.
Dialogue: 0,0:36:56.66,0:37:02.76,中文,,0,0,0,,现在 这是 PuppyCatDog 决策树的一个版本
Dialogue: 0,0:37:02.76,0:37:05.98,英文,,0,0,0,,You can kind of run through this to show that it ends up working.
Dialogue: 0,0:37:02.76,0:37:05.98,中文,,0,0,0,,你可以运行这个来证明它最终是有效的
Dialogue: 0,0:37:05.98,0:37:10.79,英文,,0,0,0,,The main idea is that just some type of this decision tree does exist.
Dialogue: 0,0:37:05.98,0:37:10.79,中文,,0,0,0,,主要思想是这种类型的决策树确实存在
Dialogue: 0,0:37:10.79,0:37:16.72,英文,,0,0,0,,You compare if A is less than B. If it is, then you compare B is less than C. Otherwise, you compare A is less than C.
Dialogue: 0,0:37:10.79,0:37:16.72,中文,,0,0,0,,你比较 A 是否小于 B 如果是 那么你比较 B 是否小于 C 否则 你比较 A 是否小于 C
Dialogue: 0,0:37:16.72,0:37:22.72,英文,,0,0,0,,You kind of walk through this, and eventually you run up to a solution, regardless of which path you take.
Dialogue: 0,0:37:16.72,0:37:22.72,中文,,0,0,0,,你这样走一遍 最终你会得到一个解决方案 无论你走哪条路
Dialogue: 0,0:37:22.72,0:37:30.94,英文,,0,0,0,,Each of these universes ends up yielding a distinct leaf in this tree.
Dialogue: 0,0:37:22.72,0:37:30.94,中文,,0,0,0,,这些宇宙中的每一个最终都会在这棵树中产生一个不同的叶子
Dialogue: 0,0:37:30.94,0:37:39.28,英文,,0,0,0,,So if we had not just three items, but n items, how many questions would we need to ask?
Dialogue: 0,0:37:30.94,0:37:39.28,中文,,0,0,0,,那么 如果我们不仅有三个项目 而是有 N 个项目 我们需要问多少个问题？
Dialogue: 0,0:37:39.28,0:37:41.25,英文,,0,0,0,,And we don't need to get an exact value.
Dialogue: 0,0:37:39.28,0:37:41.25,中文,,0,0,0,,而且我们不需要得到一个精确的值
Dialogue: 0,0:37:41.25,0:37:43.15,英文,,0,0,0,,We just need an omega bound.
Dialogue: 0,0:37:41.25,0:37:43.15,中文,,0,0,0,,我们只需要一个 Ω 界限
Dialogue: 0,0:37:43.15,0:38:49.99,英文,,0,0,0,,Feel free to talk for, let's say, a minute or so on this.
Dialogue: 0,0:37:43.15,0:38:49.99,中文,,0,0,0,,你可以随意讨论 比如说 一分钟左右
Dialogue: 0,0:38:49.99,0:38:51.45,英文,,0,0,0,,Any Q&A?
Dialogue: 0,0:38:49.99,0:38:51.45,中文,,0,0,0,,有任何问题吗？
Dialogue: 0,0:38:51.45,0:39:01.27,英文,,0,0,0,,All right.
Dialogue: 0,0:38:51.45,0:39:01.27,中文,,0,0,0,,
Dialogue: 0,0:39:01.27,0:39:03.25,英文,,0,0,0,,Does anyone have an answer?
Dialogue: 0,0:39:01.27,0:39:03.25,中文,,0,0,0,,有人知道答案吗？
Dialogue: 0,0:39:03.25,0:39:12.15,英文,,0,0,0,,I heard there's some really good discussion going on.
Dialogue: 0,0:39:03.25,0:39:12.15,中文,,0,0,0,,我听说有些讨论很精彩
Dialogue: 0,0:39:12.15,0:39:13.87,英文,,0,0,0,,Anyone have an answer they're willing to share?
Dialogue: 0,0:39:12.15,0:39:13.87,中文,,0,0,0,,有人愿意分享他们的答案吗？
Dialogue: 0,0:39:13.87,0:39:15.81,英文,,0,0,0,,Yeah?
Dialogue: 0,0:39:13.87,0:39:15.81,中文,,0,0,0,,有吗？
Dialogue: 0,0:39:15.81,0:39:18.22,英文,,0,0,0,,Log N factorial, why?
Dialogue: 0,0:39:15.81,0:39:18.22,中文,,0,0,0,,log(N!) 为什么？
Dialogue: 0,0:39:18.22,0:39:25.47,英文,,0,0,0,,Because we have to have control.
Dialogue: 0,0:39:18.22,0:39:25.47,中文,,0,0,0,,因为我们需要控制
Dialogue: 0,0:39:25.47,0:39:32.17,英文,,0,0,0,,Yeah, we have n factorial different universes, and we need to have at least that many leaves.
Dialogue: 0,0:39:25.47,0:39:32.17,中文,,0,0,0,,是的 我们有 N 阶乘个不同的宇宙 我们需要至少有那么多叶子
Dialogue: 0,0:39:32.17,0:39:39.73,英文,,0,0,0,,We had a statement here that was saying, like, 2 to the x needs to be greater than log n. So if you kind of swap everything out,
Dialogue: 0,0:39:32.17,0:39:39.73,中文,,0,0,0,,我们这里有一个说法 2 的 x 次方需要大于 log N 所以如果你把所有东西都换一下 取对数
Dialogue: 0,0:39:39.73,0:39:46.73,英文,,0,0,0,,take the logs, we say that the binary log, log base 2 of n factorial, is the number of layers we need, which is just omega of log n factorial.
Dialogue: 0,0:39:39.73,0:39:46.73,中文,,0,0,0,,我们说 N 阶乘的对数 以 2 为底 是我们需要的层数 这只是 Ω(log(N!))
Dialogue: 0,0:39:46.73,0:39:53.19,英文,,0,0,0,,Keep in mind that the base of the log is just a constant factor, so we can just say log n factorial.
Dialogue: 0,0:39:46.73,0:39:53.19,中文,,0,0,0,,记住 对数的底只是一个常数因子 所以我们可以直接说 log(N!)
Dialogue: 0,0:39:53.19,0:40:02.11,英文,,0,0,0,,So we can show that solving the puppy-cat-dog problem requires omega of log n factorial.
Dialogue: 0,0:39:53.19,0:40:02.11,中文,,0,0,0,,所以我们可以证明 解决小狗-猫-狗问题需要 Ω(log(N!))
Dialogue: 0,0:40:02.11,0:40:07.36,英文,,0,0,0,,Where have we seen log n factorial before?
Dialogue: 0,0:40:02.11,0:40:07.36,中文,,0,0,0,,我们之前在哪里见过 log(N!)？
Dialogue: 0,0:40:07.36,0:40:08.28,英文,,0,0,0,,Math question.
Dialogue: 0,0:40:07.36,0:40:08.28,中文,,0,0,0,,数学问题
Dialogue: 0,0:40:08.28,0:40:11.32,英文,,0,0,0,,What is log n factorial the same as?
Dialogue: 0,0:40:08.28,0:40:11.32,中文,,0,0,0,,log(N!)和什么相同？
Dialogue: 0,0:40:11.32,0:40:24.11,英文,,0,0,0,,n log n. So puppy-cat-dog is omega of n log n. Anything that solves puppy-cat-dog takes n log n time at least to run.
Dialogue: 0,0:40:11.32,0:40:24.11,中文,,0,0,0,,N log N 所以小狗-猫-狗是 Ω(N log N) 任何解决小狗-猫-狗问题的方法至少需要 N log N 的时间才能运行
Dialogue: 0,0:40:24.11,0:40:27.67,英文,,0,0,0,,Now, the general problem is actually really tricky.
Dialogue: 0,0:40:24.11,0:40:27.67,中文,,0,0,0,,现在 一般问题其实很棘手
Dialogue: 0,0:40:27.67,0:40:28.93,英文,,0,0,0,,It's actually an open problem.
Dialogue: 0,0:40:27.67,0:40:28.93,中文,,0,0,0,,这实际上是一个开放性问题
Dialogue: 0,0:40:28.93,0:40:33.59,英文,,0,0,0,,We found the best known trees for 1 through 15 and 22, supposedly.
Dialogue: 0,0:40:28.93,0:40:33.59,中文,,0,0,0,,据说 我们找到了 1 到 15 和 22 的最佳树
Dialogue: 0,0:40:33.59,0:40:35.81,英文,,0,0,0,,We have not found any of the other best trees.
Dialogue: 0,0:40:33.59,0:40:35.81,中文,,0,0,0,,我们还没有找到任何其他最佳树
Dialogue: 0,0:40:35.81,0:40:45.19,英文,,0,0,0,,So if you manage to find the best tree for, like, 23 or something, then you're a very big mathematician in this one field.
Dialogue: 0,0:40:35.81,0:40:45.19,中文,,0,0,0,,如果你设法找到了 23 或其他什么的最佳树 那么你就是这个领域里非常厉害的数学家
Dialogue: 0,0:40:45.19,0:40:49.17,英文,,0,0,0,,But we don't need to do this, because we can do something more clever.
Dialogue: 0,0:40:45.19,0:40:49.17,中文,,0,0,0,,但我们不需要这样做 因为我们可以做一些更聪明的事情
Dialogue: 0,0:40:49.17,0:40:51.26,英文,,0,0,0,,We can use a sorting algorithm.
Dialogue: 0,0:40:49.17,0:40:51.26,中文,,0,0,0,,我们可以用排序算法
Dialogue: 0,0:40:51.26,0:41:00.55,英文,,0,0,0,,It's not going to be the best solution, but it is going to be, at the very least, as slow as the best solution to this problem.
Dialogue: 0,0:40:51.26,0:41:00.55,中文,,0,0,0,,虽然不是最佳方案 但至少和这个问题的最佳解决方案一样慢
Dialogue: 0,0:41:00.55,0:41:05.61,英文,,0,0,0,,Here's how we can use the sorting algorithm to do this.
Dialogue: 0,0:41:00.55,0:41:05.61,中文,,0,0,0,,以下是使用排序算法的方法
Dialogue: 0,0:41:05.61,0:41:13.04,英文,,0,0,0,,We'll take the boxes and arrange them from A to Z. Then we just run this comparison algorithm.
Dialogue: 0,0:41:05.61,0:41:13.04,中文,,0,0,0,,我们将箱子按字母顺序排列 然后运行这个比较算法
Dialogue: 0,0:41:13.04,0:41:21.04,英文,,0,0,0,,We'll create this box that's comparable, and then we'll define this compareTo method that does these two items.
Dialogue: 0,0:41:13.04,0:41:21.04,中文,,0,0,0,,我们会创建一个可比较的盒子 然后定义一个比较两个项目的 compareTo 方法
Dialogue: 0,0:41:21.04,0:41:30.22,英文,,0,0,0,,If we do this, then we can sort the array, and that'll reorder the boxes from lightest to heaviest, and we can just read out the letters on the boxes in that order.
Dialogue: 0,0:41:21.04,0:41:30.22,中文,,0,0,0,,这样 我们就可以对数组进行排序 将箱子从最轻到最重重新排列 然后按顺序读出箱子上的字母
Dialogue: 0,0:41:30.22,0:41:40.62,英文,,0,0,0,,This allows us to use a sorting algorithm, any sorting algorithm that's a comparison sort, to solve PuppyCatDog,
Dialogue: 0,0:41:30.22,0:41:40.62,中文,,0,0,0,,这让我们可以使用任何一种基于比较的排序算法来解决 PuppyCatDog 问题
Dialogue: 0,0:41:40.62,0:41:51.62,英文,,0,0,0,,which means that any problem, any sorting algorithm, needs to be at least as slow as the best possible solution to PuppyCatDog.
Dialogue: 0,0:41:40.62,0:41:51.62,中文,,0,0,0,,这意味着任何问题、任何排序算法至少都得和 PuppyCatDog 的最佳解决方案一样慢
Dialogue: 0,0:41:51.62,0:41:54.06,英文,,0,0,0,,This kind of is the same thing as physics.
Dialogue: 0,0:41:51.62,0:41:54.06,中文,,0,0,0,,这有点像物理学
Dialogue: 0,0:41:54.06,0:41:59.66,英文,,0,0,0,,If you look at how physics works, you need a certain amount of potential energy to go up a hill.
Dialogue: 0,0:41:54.06,0:41:59.66,中文,,0,0,0,,看看物理学原理 上坡需要一定的势能
Dialogue: 0,0:41:59.66,0:42:03.74,英文,,0,0,0,,Regardless of how you get up that hill, you're going to need to use that energy.
Dialogue: 0,0:41:59.66,0:42:03.74,中文,,0,0,0,,不管怎么上坡 你都得消耗能量
Dialogue: 0,0:42:03.74,0:42:11.11,英文,,0,0,0,,So climbing up with your legs, taking a car, no matter what, you need to expend at least some amount of energy to climb up that hill.
Dialogue: 0,0:42:03.74,0:42:11.11,中文,,0,0,0,,用腿爬 开车 无论如何 你至少需要消耗一些能量才能爬上那座山
Dialogue: 0,0:42:11.11,0:42:12.85,英文,,0,0,0,,That acts as a lower bound on this.
Dialogue: 0,0:42:11.11,0:42:12.85,中文,,0,0,0,,这就是下限
Dialogue: 0,0:42:12.85,0:42:17.01,英文,,0,0,0,,In the same way here, the lower bound that we get from PuppyCatDog
Dialogue: 0,0:42:12.85,0:42:17.01,中文,,0,0,0,,同样 我们从 PuppyCatDog 得到的下限
Dialogue: 0,0:42:17.01,0:42:23.80,英文,,0,0,0,,applies to any way to get up that hill, applies to any way to solve PuppyCatDog,
Dialogue: 0,0:42:17.01,0:42:23.80,中文,,0,0,0,,适用于任何上山的方式 也适用于解决 PuppyCatDog 的任何方法
Dialogue: 0,0:42:23.80,0:42:30.80,英文,,0,0,0,,which means that since sorting can solve PuppyCatDog, the lower bound on PuppyCatDog also applies to sorting.
Dialogue: 0,0:42:23.80,0:42:30.80,中文,,0,0,0,,这意味着由于排序可以解决 PuppyCatDog 那么 PuppyCatDog 的下限也适用于排序
Dialogue: 0,0:42:30.80,0:42:40.89,英文,,0,0,0,,So, if PuppyCatDog is omega of log n factorial, that means that sorting is also omega of log n factorial.
Dialogue: 0,0:42:30.80,0:42:40.89,中文,,0,0,0,,如果 PuppyCatDog 是 Ω(log(N!)) 这意味着排序也是 Ω(log(N!))
Dialogue: 0,0:42:40.89,0:42:46.75,英文,,0,0,0,,Log n factorial is the same as n log n.
Dialogue: 0,0:42:40.89,0:42:46.75,中文,,0,0,0,,log(N!) = N log N
Dialogue: 0,0:42:46.75,0:42:57.14,英文,,0,0,0,,Which means that when we run through this, log n factorial is omega of n log n. We can kind of do all this math at the same time.
Dialogue: 0,0:42:46.75,0:42:57.14,中文,,0,0,0,,这意味着当我们运行时 log(N!) 是 Ω(N log N) 我们可以同时进行所有这些数学运算
Dialogue: 0,0:42:57.14,0:43:10.99,英文,,0,0,0,,But that just means that we have the ultimate comparison sort as omega of n log n. Now, if something is both O of n log n and omega of n log n, it's not just those two.
Dialogue: 0,0:42:57.14,0:43:10.99,中文,,0,0,0,,但这只意味着我们最终的比较排序是 Ω(N log N) 现在 如果某个东西既是 O(N log N) 又是 Ω(N log N) 那就不仅仅是这两个了
Dialogue: 0,0:43:10.99,0:43:14.58,英文,,0,0,0,,It is theta of n log n.
Dialogue: 0,0:43:10.99,0:43:14.58,中文,,0,0,0,,它是 Θ(N log N)
Dialogue: 0,0:43:14.58,0:43:26.29,英文,,0,0,0,,Which means that our heap sort, our merge sort, and the expected value of quick sort, all of those are asymptotically the fastest possible sort that you can ever find.
Dialogue: 0,0:43:14.58,0:43:26.29,中文,,0,0,0,,这意味着我们的堆排序、归并排序和快速排序的期望值 所有这些都是渐进最快的排序 你再也找不到比它们更快的了
Dialogue: 0,0:43:26.29,0:43:32.11,英文,,0,0,0,,It is mathematically impossible to do better asymptotically.
Dialogue: 0,0:43:26.29,0:43:32.11,中文,,0,0,0,,从渐进分析的角度来看 这是不可能实现的
Dialogue: 0,0:43:32.11,0:43:33.81,英文,,0,0,0,,And you can try all you want.
Dialogue: 0,0:43:32.11,0:43:33.81,中文,,0,0,0,,不管你怎么尝试都没用
Dialogue: 0,0:43:33.81,0:43:36.89,英文,,0,0,0,,You can find tons of different sorting algorithms.
Dialogue: 0,0:43:33.81,0:43:36.89,中文,,0,0,0,,你可以找到各种不同的排序算法
Dialogue: 0,0:43:36.89,0:43:44.97,英文,,0,0,0,,No matter what, you will never get better than n log n. Until next time.
Dialogue: 0,0:43:36.89,0:43:44.97,中文,,0,0,0,,但无论如何 你永远无法超越 N log N 的时间复杂度 下次再见
Dialogue: 0,0:43:44.97,0:43:49.30,英文,,0,0,0,,We'll actually show that this only applies to comparison sorts.
Dialogue: 0,0:43:44.97,0:43:49.30,中文,,0,0,0,,实际上 这仅适用于比较排序算法
Dialogue: 0,0:43:49.30,0:43:53.10,英文,,0,0,0,,Sorts that use comparisons to check the differences between two numbers.
Dialogue: 0,0:43:49.30,0:43:53.10,中文,,0,0,0,,也就是那些使用比较来检查两个数字之间差异的排序算法
Dialogue: 0,0:43:53.10,0:43:55.68,英文,,0,0,0,,That's the only ones that we are able to say this.
Dialogue: 0,0:43:53.10,0:43:55.68,中文,,0,0,0,,只有这些算法我们才能这么说
Dialogue: 0,0:43:55.68,0:44:03.35,英文,,0,0,0,,If we decide to use actual correct values, then we can find bounds that find the sorting algorithm in theta n time.
Dialogue: 0,0:43:55.68,0:44:03.35,中文,,0,0,0,,如果我们使用实际的正确值 那么我们可以找到在 Θ(N) 时间内完成排序的算法
Dialogue: 0,0:44:03.35,0:44:05.07,英文,,0,0,0,,It's not impossible to do this.
Dialogue: 0,0:44:03.35,0:44:05.07,中文,,0,0,0,,这不是不可能的
Dialogue: 0,0:44:05.07,0:44:07.85,英文,,0,0,0,,It's just only possible with a comparison sort.
Dialogue: 0,0:44:05.07,0:44:07.85,中文,,0,0,0,,只是在比较排序算法中无法实现
Dialogue: 0,0:44:07.85,0:44:18.72,英文,,0,0,0,,And really, once we get down to these theta n bounds, the only way we do that is by taking advantage of the underlying values that we can use.
Dialogue: 0,0:44:07.85,0:44:18.72,中文,,0,0,0,,实际上 当我们达到 Θ(N) 这种时间复杂度时 唯一的方法就是利用底层值的特性
Dialogue: 0,0:44:18.72,0:44:26.50,英文,,0,0,0,,The fun thing at the very end here is that there's all these videos online about you just showing how the sorting algorithms work.
Dialogue: 0,0:44:18.72,0:44:26.50,中文,,0,0,0,,有趣的是 网上有很多视频展示了各种排序算法的工作原理
Dialogue: 0,0:44:26.50,0:44:30.50,英文,,0,0,0,,In fact, here's a bunch of them.
Dialogue: 0,0:44:26.50,0:44:30.50,中文,,0,0,0,,实际上 这里就有一些
Dialogue: 0,0:44:30.50,0:44:35.40,英文,,0,0,0,,So you know, it's always fun to just kind of listen to these and watch them.
Dialogue: 0,0:44:30.50,0:44:35.40,中文,,0,0,0,,听听看看这些视频 了解下这些算法是如何工作的 会很有趣
Dialogue: 0,0:44:35.40,0:44:40.71,英文,,0,0,0,,So we can kind of see exactly how these sorting algorithms work.
Dialogue: 0,0:44:35.40,0:44:40.71,中文,,0,0,0,,这样我们就能清楚地看到这些排序算法是如何工作的
Dialogue: 0,0:44:40.71,0:44:47.59,英文,,0,0,0,,Can we get sound up?
Dialogue: 0,0:44:40.71,0:44:47.59,中文,,0,0,0,,能把声音调大点吗？
Dialogue: 0,0:44:47.59,0:44:49.57,英文,,0,0,0,,Oh, hold on.
Dialogue: 0,0:44:47.59,0:44:49.57,中文,,0,0,0,,哦 等等
Dialogue: 0,0:44:49.57,0:44:50.35,英文,,0,0,0,,You're on Zoom, right?
Dialogue: 0,0:44:49.57,0:44:50.35,中文,,0,0,0,,你现在用的是 Zoom 吧？
Dialogue: 0,0:44:50.35,0:44:50.79,英文,,0,0,0,,Yeah.
Dialogue: 0,0:44:50.35,0:44:50.79,中文,,0,0,0,,是的
Dialogue: 0,0:44:50.79,0:45:15.46,英文,,0,0,0,,You can kind of see in this example,
Dialogue: 0,0:44:50.79,0:45:15.46,中文,,0,0,0,,在这个例子中 你能看到
Dialogue: 0,0:45:15.46,0:45:16.87,英文,,0,0,0,,We're going to try to figure this out.
Dialogue: 0,0:45:15.46,0:45:16.87,中文,,0,0,0,,我们来试试看怎么搞定它
Dialogue: 0,0:45:16.87,0:45:19.67,英文,,0,0,0,,But we can kind of see in this example, here's how bubble sort works.
Dialogue: 0,0:45:16.87,0:45:19.67,中文,,0,0,0,,在这个例子中 我们可以看到冒泡排序的工作原理
Dialogue: 0,0:45:19.67,0:45:22.69,英文,,0,0,0,,Bubble sort, all it does is it just swaps two values adjacent to each other.
Dialogue: 0,0:45:19.67,0:45:22.69,中文,,0,0,0,,冒泡排序所做的就是交换相邻的两个值
Dialogue: 0,0:45:22.69,0:45:32.17,英文,,0,0,0,,So it kind of just steadily walks its way through and eventually manages to sort.
Dialogue: 0,0:45:22.69,0:45:32.17,中文,,0,0,0,,所以它就是一步一步地走过去 最终设法完成排序
Dialogue: 0,0:45:32.17,0:45:37.55,英文,,0,0,0,,There's all of these different sorting algorithms.
Dialogue: 0,0:45:32.17,0:45:37.55,中文,,0,0,0,,有很多不同的排序算法
Dialogue: 0,0:45:37.55,0:45:39.52,英文,,0,0,0,,You can look up here.
Dialogue: 0,0:45:37.55,0:45:39.52,中文,,0,0,0,,你可以在这里查找
Dialogue: 0,0:45:39.52,0:45:42.80,英文,,0,0,0,,Bubble sort, optimized bubble sort, all of these.
Dialogue: 0,0:45:39.52,0:45:42.80,中文,,0,0,0,,冒泡排序 优化的冒泡排序 所有这些
Dialogue: 0,0:45:42.80,0:45:46.02,英文,,0,0,0,,Let's go over something that
Dialogue: 0,0:45:42.80,0:45:46.02,中文,,0,0,0,,我们来看看
Dialogue: 0,0:45:46.02,0:45:50.01,英文,,0,0,0,,Yeah, sure.
Dialogue: 0,0:45:46.02,0:45:50.01,中文,,0,0,0,,好的 当然
Dialogue: 0,0:45:50.01,0:45:53.17,英文,,0,0,0,,Yeah, we want to show the sound of sorting.
Dialogue: 0,0:45:50.01,0:45:53.17,中文,,0,0,0,,是的 我们想展示排序的声音
Dialogue: 0,0:45:53.17,0:46:05.26,英文,,0,0,0,,Let's see.
Dialogue: 0,0:45:53.17,0:46:05.26,中文,,0,0,0,,让我们看看
Dialogue: 0,0:46:05.26,0:46:07.48,英文,,0,0,0,,Here's, for example, how quicksort works.
Dialogue: 0,0:46:05.26,0:46:07.48,中文,,0,0,0,,例如 这是快速排序的工作原理
Dialogue: 0,0:46:07.48,0:46:20.32,英文,,0,0,0,,You can kind of see that we pick a pivot, and then we just kind of move the items over so that all the ones on the left and all the ones on the right are equal.
Dialogue: 0,0:46:07.48,0:46:20.32,中文,,0,0,0,,你可以看到 我们选择一个基准值 然后移动这些元素 使左边和右边的元素都相等
Dialogue: 0,0:46:20.32,0:46:24.18,英文,,0,0,0,,Anyway, so you can kind of see exactly how this ends up working with this quicksorting.
Dialogue: 0,0:46:20.32,0:46:24.18,中文,,0,0,0,,总之 你可以看到这个快速排序最终是如何工作的
Dialogue: 0,0:46:24.18,0:46:32.75,英文,,0,0,0,,We pick an item in the middle, we split them up into the lesser and greater ones, and then we just kind of do this recursively.
Dialogue: 0,0:46:24.18,0:46:32.75,中文,,0,0,0,,我们选择中间的一个元素 将它们分成较小和较大的元素 然后递归地进行这个操作
Dialogue: 0,0:46:32.75,0:47:07.27,英文,,0,0,0,,Here is a quicksort.
Dialogue: 0,0:46:32.75,0:47:07.27,中文,,0,0,0,,这是一个快速排序
Dialogue: 0,0:47:07.27,0:47:09.53,英文,,0,0,0,,So you can kind of, like, walk through this and see.
Dialogue: 0,0:47:07.27,0:47:09.53,中文,,0,0,0,,所以你可以一步一步地走过去看看
Dialogue: 0,0:47:09.53,0:47:11.09,英文,,0,0,0,,There's a whole hour of this.
Dialogue: 0,0:47:09.53,0:47:11.09,中文,,0,0,0,,这里有一个小时的视频
Dialogue: 0,0:47:11.09,0:47:18.17,英文,,0,0,0,,So you can just have a lot of fun with this.
Dialogue: 0,0:47:11.09,0:47:18.17,中文,,0,0,0,,所以你可以从中获得很多乐趣
Dialogue: 0,0:47:18.17,0:47:24.50,英文,,0,0,0,,So yeah, there's a whole bunch of these sorts.
Dialogue: 0,0:47:18.17,0:47:24.50,中文,,0,0,0,,所以是的 这里有一大堆这样的排序方法
Dialogue: 0,0:47:24.50,0:47:26.24,英文,,0,0,0,,There's Selection Sort over here.
Dialogue: 0,0:47:24.50,0:47:26.24,中文,,0,0,0,,这边是选择排序
Dialogue: 0,0:47:26.24,0:47:29.86,英文,,0,0,0,,You know, pick the smallest item every single time.
Dialogue: 0,0:47:26.24,0:47:29.86,中文,,0,0,0,,每次都选出最小的元素
Dialogue: 0,0:47:29.86,0:47:42.54,英文,,0,0,0,,You can kind of watch as the items get pushed over to the side.
Dialogue: 0,0:47:29.86,0:47:42.54,中文,,0,0,0,,你可以看到元素被推到一边
Dialogue: 0,0:47:42.54,0:47:43.92,英文,,0,0,0,,Insertion sort.
Dialogue: 0,0:47:42.54,0:47:43.92,中文,,0,0,0,,插入排序
Dialogue: 0,0:47:43.92,0:47:46.64,英文,,0,0,0,,Let's go through this.
Dialogue: 0,0:47:43.92,0:47:46.64,中文,,0,0,0,,我们来看看这个
Dialogue: 0,0:47:46.64,0:47:47.44,英文,,0,0,0,,Insertion sort.
Dialogue: 0,0:47:46.64,0:47:47.44,中文,,0,0,0,,插入排序
Dialogue: 0,0:47:47.44,0:47:57.91,英文,,0,0,0,,So you can see the items just coming in and finding their place in the list.
Dialogue: 0,0:47:47.44,0:47:57.91,中文,,0,0,0,,你可以看到元素进来后在列表中找到自己的位置
Dialogue: 0,0:47:57.91,0:48:09.94,英文,,0,0,0,,And steadily this triangle growing over to the side.
Dialogue: 0,0:47:57.91,0:48:09.94,中文,,0,0,0,,这个三角形逐渐向一边扩大
Dialogue: 0,0:48:09.94,0:48:10.97,英文,,0,0,0,,Have we seen Merge Sort?
Dialogue: 0,0:48:09.94,0:48:10.97,中文,,0,0,0,,我们看过归并排序了吗？
Dialogue: 0,0:48:10.97,0:48:12.09,英文,,0,0,0,,We have not seen Merge Sort.
Dialogue: 0,0:48:10.97,0:48:12.09,中文,,0,0,0,,我们还没看过归并排序
Dialogue: 0,0:48:12.09,0:48:15.79,英文,,0,0,0,,Let's go to Merge Sort.
Dialogue: 0,0:48:12.09,0:48:15.79,中文,,0,0,0,,我们来看看归并排序
Dialogue: 0,0:48:15.79,0:48:18.33,英文,,0,0,0,,You take these two triangles.
Dialogue: 0,0:48:15.79,0:48:18.33,中文,,0,0,0,,取这两个三角形
Dialogue: 0,0:48:18.33,0:48:19.97,英文,,0,0,0,,Merge.
Dialogue: 0,0:48:18.33,0:48:19.97,中文,,0,0,0,,合并
Dialogue: 0,0:48:19.97,0:48:21.94,英文,,0,0,0,,Take these two.
Dialogue: 0,0:48:19.97,0:48:21.94,中文,,0,0,0,,取这两个
Dialogue: 0,0:48:21.94,0:48:22.92,英文,,0,0,0,,You merge.
Dialogue: 0,0:48:21.94,0:48:22.92,中文,,0,0,0,,合并
Dialogue: 0,0:48:22.92,0:48:25.52,英文,,0,0,0,,Merge.
Dialogue: 0,0:48:22.92,0:48:25.52,中文,,0,0,0,,合并
Dialogue: 0,0:48:25.52,0:48:26.92,英文,,0,0,0,,Merge.
Dialogue: 0,0:48:25.52,0:48:26.92,中文,,0,0,0,,合并
Dialogue: 0,0:48:26.92,0:48:48.25,英文,,0,0,0,,Yeah, it's really cool to see exactly how these work, right?
Dialogue: 0,0:48:26.92,0:48:48.25,中文,,0,0,0,,能清楚地看到这些是如何工作的 真的很酷 对吧？
Dialogue: 0,0:48:48.25,0:48:52.17,英文,,0,0,0,,Yeah, let's go through heap sort.
Dialogue: 0,0:48:48.25,0:48:52.17,中文,,0,0,0,,我们来看看堆排序
Dialogue: 0,0:48:52.17,0:48:53.27,英文,,0,0,0,,Here's how heap sort works.
Dialogue: 0,0:48:52.17,0:48:53.27,中文,,0,0,0,,堆排序是这样工作的
Dialogue: 0,0:48:53.27,0:48:55.91,英文,,0,0,0,,You can kind of see that heapification happen.
Dialogue: 0,0:48:53.27,0:48:55.91,中文,,0,0,0,,能看到堆排序的过程
Dialogue: 0,0:48:55.91,0:49:00.42,英文,,0,0,0,,And then we can see as steadily the items get moved over to the end.
Dialogue: 0,0:48:55.91,0:49:00.42,中文,,0,0,0,,然后 我们可以看到元素逐渐被移到末尾
Dialogue: 0,0:49:00.42,0:49:00.80,英文,,0,0,0,,Yeah.
Dialogue: 0,0:49:00.42,0:49:00.80,中文,,0,0,0,,是的
Dialogue: 0,0:49:00.80,0:49:25.22,英文,,0,0,0,,Steadily pushing it down.
Dialogue: 0,0:49:00.80,0:49:25.22,中文,,0,0,0,,稳步地向下推
Dialogue: 0,0:49:25.22,0:49:27.13,英文,,0,0,0,,Any other sorts you all want to see?
Dialogue: 0,0:49:25.22,0:49:27.13,中文,,0,0,0,,还想看其他排序吗？
Dialogue: 0,0:49:27.13,0:49:27.33,英文,,0,0,0,,Huh?
Dialogue: 0,0:49:27.13,0:49:27.33,中文,,0,0,0,,嗯？
Dialogue: 0,0:49:27.33,0:49:27.91,英文,,0,0,0,,BOGO sort!
Dialogue: 0,0:49:27.33,0:49:27.91,中文,,0,0,0,,Bogo 排序！
Dialogue: 0,0:49:27.91,0:49:29.81,英文,,0,0,0,,There's a BOGO sort here.
Dialogue: 0,0:49:27.91,0:49:29.81,中文,,0,0,0,,这里有 Bogo 排序
Dialogue: 0,0:49:29.81,0:49:31.49,英文,,0,0,0,,BOGO sort!
Dialogue: 0,0:49:29.81,0:49:31.49,中文,,0,0,0,,Bogo 排序！
Dialogue: 0,0:49:31.49,0:49:32.67,英文,,0,0,0,,Here is BOGO BOGO sort.
Dialogue: 0,0:49:31.49,0:49:32.67,中文,,0,0,0,,这里是 Bogo Bogo 排序
Dialogue: 0,0:49:32.67,0:49:52.61,英文,,0,0,0,,It is basically a selection sort, except every single time you BOGO sort the rest of it.
Dialogue: 0,0:49:32.67,0:49:52.61,中文,,0,0,0,,它基本上是一种选择排序 只不过每次都对剩下的部分进行 Bogo 排序
Dialogue: 0,0:49:52.61,0:49:54.45,英文,,0,0,0,,And then if you fail, you just start from scratch.
Dialogue: 0,0:49:52.61,0:49:54.45,中文,,0,0,0,,如果失败了 就从头开始
Dialogue: 0,0:49:54.45,0:49:54.89,英文,,0,0,0,,Yeah.
Dialogue: 0,0:49:54.45,0:49:54.89,中文,,0,0,0,,是的
Dialogue: 0,0:49:54.89,0:50:00.19,英文,,0,0,0,,Bogo, BogoSword is BogoSword if you're paranoid every single time you do a comparison that the rest of the sword ended up failing.
Dialogue: 0,0:49:54.89,0:50:00.19,中文,,0,0,0,,Bogo Bogo Sort就是 Bogo  Sort 如果你每次比较都担心剩下的剑会失败
Dialogue: 0,0:50:00.19,0:50:01.24,英文,,0,0,0,,So you gotta start again.
Dialogue: 0,0:50:00.19,0:50:01.24,中文,,0,0,0,,所以你得重新开始
Dialogue: 0,0:50:01.24,0:50:02.00,英文,,0,0,0,,This does not work.
Dialogue: 0,0:50:01.24,0:50:02.00,中文,,0,0,0,,这不管用
Dialogue: 0,0:50:02.00,0:50:19.65,英文,,0,0,0,,I think it fails.
Dialogue: 0,0:50:02.00,0:50:19.65,中文,,0,0,0,,我觉得它会失败
Dialogue: 0,0:50:19.65,0:50:20.91,英文,,0,0,0,,Asymptotically optimal?
Dialogue: 0,0:50:19.65,0:50:20.91,中文,,0,0,0,,渐进最优？
Dialogue: 0,0:50:20.91,0:50:25.15,英文,,0,0,0,,No, this is not asymptotically optimal.
Dialogue: 0,0:50:20.91,0:50:25.15,中文,,0,0,0,,不 这不是渐进最优的
Dialogue: 0,0:50:25.15,0:50:28.27,英文,,0,0,0,,Anyway, have some fun.
Dialogue: 0,0:50:25.15,0:50:28.27,中文,,0,0,0,,总之 玩得开心点
