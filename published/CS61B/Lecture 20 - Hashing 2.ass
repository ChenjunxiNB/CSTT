[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 3
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1152
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Audio File: D:/python_code/video_tool/video_tool/result/[61B SP24] Lecture 17 - B-Trees (2-3, 2-3-4 Trees).mp4
Video File: D:/python_code/video_tool/video_tool/result/[61B SP24] Lecture 17 - B-Trees (2-3, 2-3-4 Trees).mp4
Video AR Mode: 4
Video AR Value: 1.600000
Video Zoom Percent: 0.750000
Scroll Position: 590
Active Line: 596
Video Position: 11471

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,13,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,90,100,0,0,1,1.33333,1.33333,2,6,6,7,1
Style: 英文,Arial,24,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,90,100,0,0,1,1.33333,1.33333,2,1,1,5,1
Style: 中文,微软雅黑,38,&H0029EEF1,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,2,2,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,
Dialogue: 0,0:00:05.47,0:00:10.16,英文,,0,0,0,,All right, so let's see what you have due over the next few days.
Dialogue: 0,0:00:05.47,0:00:10.16,中文,,0,0,0,,接下来几天你有什么任务要完成
Dialogue: 0,0:00:10.16,0:00:15.12,英文,,0,0,0,,I think the main things right now are Project 2A, which is due on Wednesday.
Dialogue: 0,0:00:10.16,0:00:15.12,中文,,0,0,0,,我认为现在的主要任务是周三到期的Project 2A
Dialogue: 0,0:00:15.12,0:00:18.20,英文,,0,0,0,,Hope everyone's doing well there.
Dialogue: 0,0:00:15.12,0:00:18.20,中文,,0,0,0,,希望大家都过得不错
Dialogue: 0,0:00:18.20,0:00:21.93,英文,,0,0,0,,Show of hands, good, bad?
Dialogue: 0,0:00:18.20,0:00:21.93,中文,,0,0,0,,举手示意 好还是不好
Dialogue: 0,0:00:21.93,0:00:22.75,英文,,0,0,0,,Mostly good.
Dialogue: 0,0:00:21.93,0:00:22.75,中文,,0,0,0,,大多数人还好
Dialogue: 0,0:00:22.75,0:00:25.43,英文,,0,0,0,,Some mediums over there.
Dialogue: 0,0:00:22.75,0:00:25.43,中文,,0,0,0,,有些人感觉一般
Dialogue: 0,0:00:25.43,0:00:26.87,英文,,0,0,0,,Bad.
Dialogue: 0,0:00:25.43,0:00:26.87,中文,,0,0,0,,不好
Dialogue: 0,0:00:26.87,0:00:27.59,英文,,0,0,0,,Don't worry.
Dialogue: 0,0:00:26.87,0:00:27.59,中文,,0,0,0,,别担心
Dialogue: 0,0:00:27.59,0:00:30.49,英文,,0,0,0,,You got this.
Dialogue: 0,0:00:27.59,0:00:30.49,中文,,0,0,0,,你可以的
Dialogue: 0,0:00:30.49,0:00:34.76,英文,,0,0,0,,And then Lab 7, I believe, is going to be due on Friday.
Dialogue: 0,0:00:30.49,0:00:34.76,中文,,0,0,0,,然后Lab 7 我相信 会在星期五到期
Dialogue: 0,0:00:34.76,0:00:45.15,英文,,0,0,0,,So that's less important than 2a, but if you've finished 2a or you are mostly done, it's not a bad idea to start thinking about that soon.
Dialogue: 0,0:00:34.76,0:00:45.15,中文,,0,0,0,,这比2a不那么重要 但如果你完成了2a或者你已经基本完成了 那么很快开始考虑也不是一个坏主意
Dialogue: 0,0:00:45.15,0:00:46.05,英文,,0,0,0,,All right.
Dialogue: 0,0:00:46.05,0:00:50.90,英文,,0,0,0,,It's 1.10, so let's get started.
Dialogue: 0,0:00:46.05,0:00:50.90,中文,,0,0,0,,现在是1.10 让我们开始吧
Dialogue: 0,0:00:50.90,0:00:56.16,英文,,0,0,0,,And just for the Zoom recording, I was a bit sick over the weekend.
Dialogue: 0,0:00:50.90,0:00:56.16,中文,,0,0,0,,还有就是关于Zoom录制 我周末有点生病
Dialogue: 0,0:00:56.16,0:01:00.63,英文,,0,0,0,,So I haven't been able to fully prep this lecture as well as I normally do.
Dialogue: 0,0:00:56.16,0:01:00.63,中文,,0,0,0,,最近我没能像平常一样充分准备这堂讲座
Dialogue: 0,0:01:00.63,0:01:09.13,英文,,0,0,0,,If you watch last semester's lecture, which will be copied over on the video, you should be able to get effectively the same thing.
Dialogue: 0,0:01:00.63,0:01:09.13,中文,,0,0,0,,如果你看上学期的讲座 视频上会复制过来 你应该能够得到基本相同的内容
Dialogue: 0,0:01:09.13,0:01:14.32,英文,,0,0,0,,I didn't make any changes to the slides, I believe, that are relevant.
Dialogue: 0,0:01:09.13,0:01:14.32,中文,,0,0,0,,我相信我对幻灯片没有进行任何相关的更改
Dialogue: 0,0:01:14.32,0:01:17.20,英文,,0,0,0,,Yeah, I didn't make any changes beyond changing the fall to spring or something.
Dialogue: 0,0:01:14.32,0:01:17.20,中文,,0,0,0,,是的 我没有进行任何更改 除了将秋季改成了春季或其他什么的
Dialogue: 0,0:01:17.20,0:01:21.97,英文,,0,0,0,,All right.
Dialogue: 0,0:01:21.97,0:01:29.66,英文,,0,0,0,,So when we finished off Friday, we had created this new object called a hash table.
Dialogue: 0,0:01:21.97,0:01:29.66,中文,,0,0,0,,上周五我们结束时 我们创建了一个叫做哈希表的新对象
Dialogue: 0,0:01:29.66,0:01:41.11,英文,,0,0,0,,And using a hash table, we were able to solve the set and map problem using not logarithmic time, like tree set or tree map did, but in constant time.
Dialogue: 0,0:01:29.66,0:01:41.11,中文,,0,0,0,,通过使用哈希表 我们能够在常数时间内解决集合和映射问题 而不像树集或树映射那样需要对数时间
Dialogue: 0,0:01:41.11,0:01:43.19,英文,,0,0,0,,Now, this constant time had a lot of caveats.
Dialogue: 0,0:01:41.11,0:01:43.19,中文,,0,0,0,,现在 这个恒定时间有很多注意事项
Dialogue: 0,0:01:43.19,0:01:48.83,英文,,0,0,0,,It's constant time amortized, which means that some operations are going to take longer, but it's constant time on average.
Dialogue: 0,0:01:43.19,0:01:48.83,中文,,0,0,0,,它是平摊的恒定时间 这意味着某些操作会花费更长的时间 但平均来说是恒定时间
Dialogue: 0,0:01:48.83,0:01:52.45,英文,,0,0,0,,And it's constant time only if the hash code was working nicely.
Dialogue: 0,0:01:48.83,0:01:52.45,中文,,0,0,0,,只有在哈希码工作良好的情况下才是恒定时间
Dialogue: 0,0:01:52.45,0:02:03.13,英文,,0,0,0,,There are some extra slides on what constitutes an even randomness, even randomness or splitting out nicely on last lecture.
Dialogue: 0,0:01:52.45,0:02:03.13,中文,,0,0,0,,关于构成均匀随机性的额外幻灯片 甚至是上一讲中关于均匀随机性或良好拆分的
Dialogue: 0,0:02:03.13,0:02:07.47,英文,,0,0,0,,Today, we'll kind of go into a bit more detail on how the hash code actually works.
Dialogue: 0,0:02:03.13,0:02:07.47,中文,,0,0,0,,今天 我们会更详细地讨论哈希码的工作原理
Dialogue: 0,0:02:07.47,0:02:13.75,英文,,0,0,0,,Now, a hash table, effectively what it does is it takes some data, it converts that to a hash code.
Dialogue: 0,0:02:07.47,0:02:13.75,中文,,0,0,0,,现在 哈希表实际上所做的是取一些数据 将其转换为哈希码
Dialogue: 0,0:02:13.75,0:02:16.99,英文,,0,0,0,,You take that hash code, and then you use some reduction formula.
Dialogue: 0,0:02:13.75,0:02:16.99,中文,,0,0,0,,你取得那个哈希码 然后使用一些减少公式
Dialogue: 0,0:02:16.99,0:02:24.42,英文,,0,0,0,,In this case, you take the number, you take it mod 4, and then that turns into an index.
Dialogue: 0,0:02:16.99,0:02:24.42,中文,,0,0,0,,在这种情况下 你取这个数字 取模4 然后那就变成了一个索引
Dialogue: 0,0:02:24.42,0:02:29.86,英文,,0,0,0,,Our hash table has a bunch of slots for linked lists, one for each index.
Dialogue: 0,0:02:24.42,0:02:29.86,中文,,0,0,0,,我们的哈希表有一堆槽位 用于存储链表 每个槽位对应一个索引
Dialogue: 0,0:02:29.86,0:02:33.86,英文,,0,0,0,,And we store each data value in the bucket corresponding to that index.
Dialogue: 0,0:02:29.86,0:02:33.86,中文,,0,0,0,,我们将每个数据值存储在对应该索引的桶中
Dialogue: 0,0:02:33.86,0:02:40.56,英文,,0,0,0,,That way, we only need to look at that set of items every time we look for something in our database.
Dialogue: 0,0:02:33.86,0:02:40.56,中文,,0,0,0,,这样 每次在数据库中查找东西时 我们只需要查看该组项
Dialogue: 0,0:02:40.56,0:02:44.86,英文,,0,0,0,,We resize every time the number of items exceeds a certain amount.
Dialogue: 0,0:02:40.56,0:02:44.86,中文,,0,0,0,,每当项数超过一定数量时 我们就调整大小
Dialogue: 0,0:02:44.86,0:02:48.49,英文,,0,0,0,,That's a factor of the total number of buckets.
Dialogue: 0,0:02:44.86,0:02:48.49,中文,,0,0,0,,这是总桶数的一个因素
Dialogue: 0,0:02:48.49,0:02:54.19,英文,,0,0,0,,That way, we ensure that the average size of each bucket is less than a constant factor.
Dialogue: 0,0:02:48.49,0:02:54.19,中文,,0,0,0,,这样 我们确保每个桶的平均大小都小于一个常数因子
Dialogue: 0,0:02:54.19,0:03:01.77,英文,,0,0,0,,So as long as the items spread out nicely, you should get theta 1 average runtime.
Dialogue: 0,0:02:54.19,0:03:01.77,中文,,0,0,0,,只要项目分布得好 你应该得到 theta 1 平均运行时间
Dialogue: 0,0:03:01.77,0:03:05.49,英文,,0,0,0,,So let's play around with this hash table visualizer.
Dialogue: 0,0:03:01.77,0:03:05.49,中文,,0,0,0,,那么让我们玩一下这个哈希表可视化工具
Dialogue: 0,0:03:05.49,0:03:06.79,英文,,0,0,0,,I didn't make it.
Dialogue: 0,0:03:05.49,0:03:06.79,中文,,0,0,0,,我没做到
Dialogue: 0,0:03:06.79,0:03:10.45,英文,,0,0,0,,This is from Josh Hug, who previously taught this class.
Dialogue: 0,0:03:06.79,0:03:10.45,中文,,0,0,0,,这是由之前教过这门课的Josh Hug提供的
Dialogue: 0,0:03:10.45,0:03:16.00,英文,,0,0,0,,But it's kind of here to get a deeper understanding on how these work.
Dialogue: 0,0:03:10.45,0:03:16.00,中文,,0,0,0,,但这在这里是为了更深入地了解它们的工作原理
Dialogue: 0,0:03:16.00,0:03:18.78,英文,,0,0,0,,Over here is my code.
Dialogue: 0,0:03:16.00,0:03:18.78,中文,,0,0,0,,这里是我的代码
Dialogue: 0,0:03:18.78,0:03:20.00,英文,,0,0,0,,Oh, I forgot.
Dialogue: 0,0:03:18.78,0:03:20.00,中文,,0,0,0,,哦 我忘了
Dialogue: 0,0:03:20.00,0:03:23.58,英文,,0,0,0,,This is files.
Dialogue: 0,0:03:20.00,0:03:23.58,中文,,0,0,0,,这是文件
Dialogue: 0,0:03:23.58,0:03:25.70,英文,,0,0,0,,What was the color scheme that we wanted to use?
Dialogue: 0,0:03:23.58,0:03:25.70,中文,,0,0,0,,我们想要使用的颜色方案是什么
Dialogue: 0,0:03:25.70,0:03:27.44,英文,,0,0,0,,Oh, it is high contrast already.
Dialogue: 0,0:03:25.70,0:03:27.44,中文,,0,0,0,,哦 它已经是高对比度了
Dialogue: 0,0:03:27.44,0:03:27.64,英文,,0,0,0,,Nice.
Dialogue: 0,0:03:27.44,0:03:27.64,中文,,0,0,0,,不错
Dialogue: 0,0:03:27.64,0:03:32.15,英文,,0,0,0,,All right.
Dialogue: 0,0:03:32.15,0:03:40.94,英文,,0,0,0,,So here, I've set it up so that we'll be looking at a hash table with 20 items and six buckets.
Dialogue: 0,0:03:32.15,0:03:40.94,中文,,0,0,0,,在这里 我已经设置好了 我们将查看一个包含20个项目和六个桶的哈希表
Dialogue: 0,0:03:40.94,0:03:51.15,英文,,0,0,0,,So let's kind of take a look to see what happens if we run this code.
Dialogue: 0,0:03:40.94,0:03:51.15,中文,,0,0,0,,让我们看看如果我们运行这段代码会发生什么
Dialogue: 0,0:03:51.15,0:03:55.70,英文,,0,0,0,,And when we add these items, you might notice that they get added to effectively random locations.
Dialogue: 0,0:03:51.15,0:03:55.70,中文,,0,0,0,,当我们添加这些项时 你可能会注意到它们被添加到了有效随机的位置
Dialogue: 0,0:03:55.70,0:03:59.70,英文,,0,0,0,,And they kind of have nothing to do with the values here.
Dialogue: 0,0:03:55.70,0:03:59.70,中文,,0,0,0,,它们和这里的值有点不相关
Dialogue: 0,0:03:59.70,0:04:06.40,英文,,0,0,0,,These objects, by the way, they're just simple number plus colors objects.
Dialogue: 0,0:03:59.70,0:04:06.40,中文,,0,0,0,,顺便说一下 这些对象只是简单的数字加颜色的对象
Dialogue: 0,0:04:06.40,0:04:09.32,英文,,0,0,0,,There's nothing particularly special about them.
Dialogue: 0,0:04:06.40,0:04:09.32,中文,,0,0,0,,它们并没有特别特殊的地方
Dialogue: 0,0:04:09.32,0:04:12.20,英文,,0,0,0,,Here is the class.
Dialogue: 0,0:04:09.32,0:04:12.20,中文,,0,0,0,,这就是类
Dialogue: 0,0:04:12.20,0:04:14.06,英文,,0,0,0,,That's their design for.
Dialogue: 0,0:04:12.20,0:04:14.06,中文,,0,0,0,,这是它们的设计
Dialogue: 0,0:04:14.06,0:04:28.49,英文,,0,0,0,,It's effectively, you give it a number, you give it a color, and the color needs to be one of these five colors, white, orange, cyan, green, and yellow.
Dialogue: 0,0:04:14.06,0:04:28.49,中文,,0,0,0,,实际上 你给它一个数字 你给它一个颜色 而颜色需要是这五种颜色之一 白色、橙色、青色、绿色和黄色
Dialogue: 0,0:04:28.49,0:04:30.77,英文,,0,0,0,,And the color is randomly decided.
Dialogue: 0,0:04:28.49,0:04:30.77,中文,,0,0,0,,颜色是随机决定的
Dialogue: 0,0:04:30.77,0:04:39.67,英文,,0,0,0,,So if we walk through this code, then we might notice that this is largely evenly split.
Dialogue: 0,0:04:30.77,0:04:39.67,中文,,0,0,0,,如果我们走过这段代码 我们可能会注意到这基本上是均匀分布的
Dialogue: 0,0:04:39.67,0:04:41.00,英文,,0,0,0,,Ah, yes.
Dialogue: 0,0:04:39.67,0:04:41.00,中文,,0,0,0,,啊 是的
Dialogue: 0,0:04:41.00,0:04:42.84,英文,,0,0,0,,This is what I mean by not preparing this.
Dialogue: 0,0:04:41.00,0:04:42.84,中文,,0,0,0,,这就是我所说的没有准备好这个
Dialogue: 0,0:04:42.84,0:04:44.88,英文,,0,0,0,,I forgot this slide is here.
Dialogue: 0,0:04:42.84,0:04:44.88,中文,,0,0,0,,我忘记了这张幻灯片在这里
Dialogue: 0,0:04:44.88,0:04:50.32,英文,,0,0,0,,So we'll be having colored numbers containing a number and a random color.
Dialogue: 0,0:04:44.88,0:04:50.32,中文,,0,0,0,,我们会有包含数字和随机颜色的彩色数字
Dialogue: 0,0:04:50.32,0:04:53.44,英文,,0,0,0,,And when we insert these, you get these distributions.
Dialogue: 0,0:04:50.32,0:04:53.44,中文,,0,0,0,,当我们插入这些时 你会得到这些分布
Dialogue: 0,0:04:53.44,0:04:56.24,英文,,0,0,0,,It's different for when Josh ran this.
Dialogue: 0,0:04:53.44,0:04:56.24,中文,,0,0,0,,Josh运行这个时候是不同的
Dialogue: 0,0:04:56.24,0:04:58.41,英文,,0,0,0,,Ours is slightly different.
Dialogue: 0,0:04:56.24,0:04:58.41,中文,,0,0,0,,我们的稍微有点不同
Dialogue: 0,0:04:58.41,0:05:00.75,英文,,0,0,0,,But overall, it looks kind of similar.
Dialogue: 0,0:04:58.41,0:05:00.75,中文,,0,0,0,,但总的来说 看起来有点类似
Dialogue: 0,0:05:00.75,0:05:14.21,英文,,0,0,0,,So what do you notice about these, or these distributions in general?
Dialogue: 0,0:05:00.75,0:05:14.21,中文,,0,0,0,,那么你注意到这些或者总体上这些分布有什么不同吗
Dialogue: 0,0:05:14.21,0:05:23.18,英文,,0,0,0,,Anyone?
Dialogue: 0,0:05:14.21,0:05:23.18,中文,,0,0,0,,有人注意到吗
Dialogue: 0,0:05:23.18,0:05:23.60,英文,,0,0,0,,Yeah.
Dialogue: 0,0:05:23.18,0:05:23.60,中文,,0,0,0,,嗯
Dialogue: 0,0:05:23.60,0:05:38.66,英文,,0,0,0,,Average bin length is n divided by m. Yeah.
Dialogue: 0,0:05:23.60,0:05:38.66,中文,,0,0,0,,平均箱长度是N除以M 嗯
Dialogue: 0,0:05:38.66,0:05:45.37,英文,,0,0,0,,But that's technically going to be true regardless of how we put these in, even if all of the items were in bin 0.
Dialogue: 0,0:05:38.66,0:05:45.37,中文,,0,0,0,,但无论我们如何放置这些 从技术上讲都会是真实的 即使所有项目都在bin 0中
Dialogue: 0,0:05:45.37,0:05:55.15,英文,,0,0,0,,It's still technically going to be average bin length is n divided by m, just because averages end up working that way.
Dialogue: 0,0:05:45.37,0:05:55.15,中文,,0,0,0,,从技术上讲 平均bin长度仍然是N除以M 只是因为平均数的工作方式
Dialogue: 0,0:05:55.15,0:05:59.05,英文,,0,0,0,,Any other things that are noticeable here?
Dialogue: 0,0:05:55.15,0:05:59.05,中文,,0,0,0,,还有其他值得注意的地方吗
Dialogue: 0,0:05:59.05,0:06:02.15,英文,,0,0,0,,Yeah?
Dialogue: 0,0:05:59.05,0:06:02.15,中文,,0,0,0,,是吗
Dialogue: 0,0:06:02.15,0:06:05.51,英文,,0,0,0,,Yeah, there's no clear pattern.
Dialogue: 0,0:06:02.15,0:06:05.51,中文,,0,0,0,,是的 没有明显的模式
Dialogue: 0,0:06:05.51,0:06:10.00,英文,,0,0,0,,Why did this 0 object show up in the 1 spot?
Dialogue: 0,0:06:05.51,0:06:10.00,中文,,0,0,0,,为什么这个0对象出现在1位置
Dialogue: 0,0:06:10.00,0:06:27.08,英文,,0,0,0,,In fact, if I run this a second time, then I believe this is a completely different order.
Dialogue: 0,0:06:10.00,0:06:27.08,中文,,0,0,0,,事实上 如果我再运行一次 那么我相信这是完全不同的顺序
Dialogue: 0,0:06:27.08,0:06:31.40,英文,,0,0,0,,Yeah, I think the 0 used to be in bin 1 originally.
Dialogue: 0,0:06:27.08,0:06:31.40,中文,,0,0,0,,是的 我认为0原本是放在1号箱子里的
Dialogue: 0,0:06:31.40,0:06:35.00,英文,,0,0,0,,So yeah, this is a slightly different order.
Dialogue: 0,0:06:31.40,0:06:35.00,中文,,0,0,0,,嗯 这个顺序稍微有点不同
Dialogue: 0,0:06:35.00,0:06:40.83,英文,,0,0,0,,So each time we run it, it's actually going to be a completely different value.
Dialogue: 0,0:06:35.00,0:06:40.83,中文,,0,0,0,,每次运行时 实际上它的值都会完全不同
Dialogue: 0,0:06:40.83,0:06:51.43,英文,,0,0,0,,So it's not only not a clear pattern, but it's also non-deterministic.
Dialogue: 0,0:06:40.83,0:06:51.43,中文,,0,0,0,,它不仅不是一个清晰的模式 而且是不确定的
Dialogue: 0,0:06:51.43,0:06:58.60,英文,,0,0,0,,Any other major things that stand out?
Dialogue: 0,0:06:51.43,0:06:58.60,中文,,0,0,0,,还有其他重要的事情吗
Dialogue: 0,0:06:58.60,0:07:00.62,英文,,0,0,0,,Yeah?
Dialogue: 0,0:06:58.60,0:07:00.62,中文,,0,0,0,,是的
Dialogue: 0,0:07:00.62,0:07:06.69,英文,,0,0,0,,Those were, I think, the main things.
Dialogue: 0,0:07:00.62,0:07:06.69,中文,,0,0,0,,我认为那些是主要的事情
Dialogue: 0,0:07:06.69,0:07:08.63,英文,,0,0,0,,I think that those are the big things.
Dialogue: 0,0:07:06.69,0:07:08.63,中文,,0,0,0,,我觉得那些是重要的事情
Dialogue: 0,0:07:08.63,0:07:11.47,英文,,0,0,0,,There wasn't really a clear pattern.
Dialogue: 0,0:07:08.63,0:07:11.47,中文,,0,0,0,,其实并没有明显的模式
Dialogue: 0,0:07:11.47,0:07:15.23,英文,,0,0,0,,It was non-deterministic.
Dialogue: 0,0:07:11.47,0:07:15.23,中文,,0,0,0,,这是非确定性的
Dialogue: 0,0:07:15.23,0:07:21.80,英文,,0,0,0,,And it feels roughly evenly distributed.
Dialogue: 0,0:07:15.23,0:07:21.80,中文,,0,0,0,,感觉大致是均匀分布的
Dialogue: 0,0:07:21.80,0:07:34.06,英文,,0,0,0,,Now, let's say that we change this so that instead of running with this default hash code, the default hash code kind of returns the memory address of the value.
Dialogue: 0,0:07:21.80,0:07:34.06,中文,,0,0,0,,现在 假设我们改变这样 不再使用默认的哈希码 而是默认的哈希码返回值的内存地址
Dialogue: 0,0:07:34.06,0:07:42.64,英文,,0,0,0,,And if you look here, I've also printed out a lot of information.
Dialogue: 0,0:07:34.06,0:07:42.64,中文,,0,0,0,,如果你看这里  我还打印了很多信息
Dialogue: 0,0:07:42.64,0:07:46.40,英文,,0,0,0,,And you can see here what the raw hash code values were.
Dialogue: 0,0:07:42.64,0:07:46.40,中文,,0,0,0,,而且你可以在这里看到原始哈希码数值是什么
Dialogue: 0,0:07:46.40,0:07:49.96,英文,,0,0,0,,Like, all of these are effectively random numbers.
Dialogue: 0,0:07:46.40,0:07:49.96,中文,,0,0,0,,就是说 所有这些都是有效的随机数
Dialogue: 0,0:07:49.96,0:07:52.36,英文,,0,0,0,,They have nothing to do with the number itself.
Dialogue: 0,0:07:49.96,0:07:52.36,中文,,0,0,0,,它们与数字本身无关
Dialogue: 0,0:07:52.36,0:07:57.99,英文,,0,0,0,,This is kind of the default hash code behavior, which is what you get if you don't declare any hash code.
Dialogue: 0,0:07:52.36,0:07:57.99,中文,,0,0,0,,这是默认的哈希码行为 如果你不声明任何哈希码 就会得到这个
Dialogue: 0,0:07:57.99,0:08:02.40,英文,,0,0,0,,And it's effectively some function related to the memory address.
Dialogue: 0,0:07:57.99,0:08:02.40,中文,,0,0,0,,实际上 它是与内存地址相关的某个函数
Dialogue: 0,0:08:02.40,0:08:06.92,英文,,0,0,0,,And every time you run a program, the memory addresses are all going to change.
Dialogue: 0,0:08:02.40,0:08:06.92,中文,,0,0,0,,每次运行程序时 内存地址都会发生变化
Dialogue: 0,0:08:06.92,0:08:09.08,英文,,0,0,0,,They're going to be put in different spots in memory.
Dialogue: 0,0:08:06.92,0:08:09.08,中文,,0,0,0,,它们将被放置在内存的不同位置
Dialogue: 0,0:08:09.08,0:08:12.25,英文,,0,0,0,,And just by that, it's going to end up affecting the hash code.
Dialogue: 0,0:08:09.08,0:08:12.25,中文,,0,0,0,,仅凭这点 就会影响到哈希码
Dialogue: 0,0:08:12.25,0:08:16.73,英文,,0,0,0,,Now, as long as you're working in the same program on the same run, those locations aren't going to change.
Dialogue: 0,0:08:12.25,0:08:16.73,中文,,0,0,0,,只要你在同一个程序中工作 且是在同一次运行中 那些位置是不会变的
Dialogue: 0,0:08:16.73,0:08:20.95,英文,,0,0,0,,So that's why the hash code stays consistent within the same run of the code.
Dialogue: 0,0:08:16.73,0:08:20.95,中文,,0,0,0,,这就是为什么哈希码在代码的同一次运行中保持一致
Dialogue: 0,0:08:20.95,0:08:23.79,英文,,0,0,0,,But it's going to be different every time you run the code a second time.
Dialogue: 0,0:08:20.95,0:08:23.79,中文,,0,0,0,,但是每当你第二次运行代码时 它会不同
Dialogue: 0,0:08:23.79,0:08:41.13,英文,,0,0,0,,Yes?
Dialogue: 0,0:08:23.79,0:08:41.13,中文,,0,0,0,,是的
Dialogue: 0,0:08:41.13,0:08:48.08,英文,,0,0,0,,Can we assume that memory addresses are randomly selected?
Dialogue: 0,0:08:41.13,0:08:48.08,中文,,0,0,0,,我们可以假设内存地址是随机选择的吗
Dialogue: 0,0:08:48.08,0:08:49.90,英文,,0,0,0,,Yes and no.
Dialogue: 0,0:08:48.08,0:08:49.90,中文,,0,0,0,,是也不是
Dialogue: 0,0:08:49.90,0:08:51.99,英文,,0,0,0,,You can assume that.
Dialogue: 0,0:08:49.90,0:08:51.99,中文,,0,0,0,,你可以假设这样
Dialogue: 0,0:08:51.99,0:08:54.15,英文,,0,0,0,,In practice, that's not true.
Dialogue: 0,0:08:51.99,0:08:54.15,中文,,0,0,0,,实际上 那并不是真的
Dialogue: 0,0:08:54.15,0:09:11.10,英文,,0,0,0,,In fact, if you look at this number, let's keep this number in mind, 407858146.
Dialogue: 0,0:08:54.15,0:09:11.10,中文,,0,0,0,,事实上 如果你看一下这个数字 让我们记住这个数字 407858146
Dialogue: 0,0:09:11.10,0:09:13.22,英文,,0,0,0,,If I run this, I get a different number.
Dialogue: 0,0:09:11.10,0:09:13.22,中文,,0,0,0,,如果我运行这个 我得到一个不同的数字
Dialogue: 0,0:09:13.22,0:09:19.26,英文,,0,0,0,,So let me just copy this over here.
Dialogue: 0,0:09:13.22,0:09:19.26,中文,,0,0,0,,让我把这个复制到这里
Dialogue: 0,0:09:19.26,0:09:20.63,英文,,0,0,0,,What was the number again?
Dialogue: 0,0:09:19.26,0:09:20.63,中文,,0,0,0,,那个数字是什么来着
Dialogue: 0,0:09:20.63,0:09:27.13,英文,,0,0,0,,4078 something something 146?
Dialogue: 0,0:09:20.63,0:09:27.13,中文,,0,0,0,,4078某某某146
Dialogue: 0,0:09:27.13,0:09:27.63,英文,,0,0,0,,58 or something?
Dialogue: 0,0:09:27.13,0:09:27.63,中文,,0,0,0,,大概是58吧
Dialogue: 0,0:09:27.63,0:09:29.95,英文,,0,0,0,,I don't know.
Dialogue: 0,0:09:27.63,0:09:29.95,中文,,0,0,0,,我不知道
Dialogue: 0,0:09:29.95,0:09:39.70,英文,,0,0,0,,If we try running this again, yeah, here you see the same numbers again.
Dialogue: 0,0:09:29.95,0:09:39.70,中文,,0,0,0,,如果我们再试一次运行这个 是的 你会看到再次出现相同的数字
Dialogue: 0,0:09:39.70,0:09:43.32,英文,,0,0,0,,So 1, 4, 5, 4, this number showed up in the previous one.
Dialogue: 0,0:09:39.70,0:09:43.32,中文,,0,0,0,,所以1、4、5、4 这个数字在前一个中出现过
Dialogue: 0,0:09:43.32,0:09:45.21,英文,,0,0,0,,It isn't completely random.
Dialogue: 0,0:09:43.32,0:09:45.21,中文,,0,0,0,,它并不是完全随机的
Dialogue: 0,0:09:45.21,0:09:51.11,英文,,0,0,0,,The reason why is because what's happening is Java is actually simulating the actual run of the program.
Dialogue: 0,0:09:45.21,0:09:51.11,中文,,0,0,0,,原因是Java实际上在模拟程序的实际运行
Dialogue: 0,0:09:51.11,0:09:56.09,英文,,0,0,0,,When you are actually building it in practice, it's going to be dependent on the computer to decide where it goes.
Dialogue: 0,0:09:51.11,0:09:56.09,中文,,0,0,0,,当你实际构建它时 它会依赖于计算机来决定它将去哪里
Dialogue: 0,0:09:56.09,0:09:57.63,英文,,0,0,0,,And that's effectively random.
Dialogue: 0,0:09:56.09,0:09:57.63,中文,,0,0,0,,这实际上是随机的
Dialogue: 0,0:09:57.63,0:10:08.94,英文,,0,0,0,,But because we're running it on a simulation of a computer, not an actual computer here, it's going to end up corresponding to very few specific locations.
Dialogue: 0,0:09:57.63,0:10:08.94,中文,,0,0,0,,但由于我们在计算机的模拟环境中运行它 而不是在真实的计算机上 所以它最终只对应几个特定的位置
Dialogue: 0,0:10:08.94,0:10:14.87,英文,,0,0,0,,Some previous semesters also noted that there's actually a lot more odd numbers than even numbers.
Dialogue: 0,0:10:08.94,0:10:14.87,中文,,0,0,0,,一些之前的学期还指出 实际上奇数比偶数要多很多
Dialogue: 0,0:10:14.87,0:10:17.03,英文,,0,0,0,,I'm not entirely sure why that's the case.
Dialogue: 0,0:10:14.87,0:10:17.03,中文,,0,0,0,,我不完全确定为什么会这样
Dialogue: 0,0:10:17.03,0:10:23.21,英文,,0,0,0,,I think it has something to do with how Java likes to store its memory addresses at particular locations.
Dialogue: 0,0:10:17.03,0:10:23.21,中文,,0,0,0,,我认为这与Java如何喜欢在特定位置存储其内存地址有关
Dialogue: 0,0:10:23.21,0:10:28.97,英文,,0,0,0,,So there are these random effects, but they overall don't affect things enough for it to matter too much.
Dialogue: 0,0:10:23.21,0:10:28.97,中文,,0,0,0,,因此 存在这些随机效应 但总体上它们不会对事物产生太大影响
Dialogue: 0,0:10:28.97,0:10:31.62,英文,,0,0,0,,It's random enough that it works for our purposes.
Dialogue: 0,0:10:28.97,0:10:31.62,中文,,0,0,0,,它足够随机 以至于对我们的目的而言是有效的
Dialogue: 0,0:10:31.62,0:10:35.02,英文,,0,0,0,,Yeah.
Dialogue: 0,0:10:35.02,0:10:36.50,英文,,0,0,0,,Yeah, good question.
Dialogue: 0,0:10:35.02,0:10:36.50,中文,,0,0,0,,是的 好问题
Dialogue: 0,0:10:36.50,0:10:41.92,英文,,0,0,0,,Yeah.
Dialogue: 0,0:10:41.92,0:10:49.85,英文,,0,0,0,,So what do you think would happen if we decide to run the hash code that just returns 0?
Dialogue: 0,0:10:41.92,0:10:49.85,中文,,0,0,0,,那你认为如果我们决定运行只返回 0 的哈希码会发生什么呢
Dialogue: 0,0:10:49.85,0:10:56.07,英文,,0,0,0,,So we're going to change this to instead of running on the memory address, we'll just always have it return 0.
Dialogue: 0,0:10:49.85,0:10:56.07,中文,,0,0,0,,我们将把这个改成不再运行在内存地址上 而是始终返回 0
Dialogue: 0,0:10:56.07,0:10:57.78,英文,,0,0,0,,So discuss with your neighbors.
Dialogue: 0,0:10:56.07,0:10:57.78,中文,,0,0,0,,和你的邻居讨论一下
Dialogue: 0,0:10:57.78,0:10:59.88,英文,,0,0,0,,What do you think would happen if we do this?
Dialogue: 0,0:10:57.78,0:10:59.88,中文,,0,0,0,,你认为如果我们这样做会发生什么呢
Dialogue: 0,0:10:59.88,0:11:35.59,英文,,0,0,0,,I'll give it, let's say, a minute.
Dialogue: 0,0:10:59.88,0:11:35.59,中文,,0,0,0,,我会给它 比如说 一分钟
Dialogue: 0,0:11:35.59,0:12:06.70,英文,,0,0,0,,And while you're discussing this, I'm going to go ahead and make those changes in here.
Dialogue: 0,0:11:35.59,0:12:06.70,中文,,0,0,0,,当你们讨论这个的时候 我会继续在这里做出这些改变
Dialogue: 0,0:12:06.70,0:12:13.43,英文,,0,0,0,,Yeah.
Dialogue: 0,0:12:06.70,0:12:13.43,中文,,0,0,0,,是的
Dialogue: 0,0:12:13.43,0:12:14.61,英文,,0,0,0,,So yeah, so the 407858146 was her.
Dialogue: 0,0:12:13.43,0:12:14.61,中文,,0,0,0,,是的 407858146就是它
Dialogue: 0,0:12:14.61,0:12:43.40,英文,,0,0,0,,All right.
Dialogue: 0,0:12:43.40,0:12:47.17,英文,,0,0,0,,All right, let's bring everyone back.
Dialogue: 0,0:12:43.40,0:12:47.17,中文,,0,0,0,,让我们把大家召回来
Dialogue: 0,0:12:47.17,0:12:52.97,英文,,0,0,0,,So over here, I have my color number definition.
Dialogue: 0,0:12:47.17,0:12:52.97,中文,,0,0,0,,在这里 我有我的颜色编号定义
Dialogue: 0,0:12:52.97,0:12:57.49,英文,,0,0,0,,And what I'm going to do is I'm going to replace this return.
Dialogue: 0,0:12:52.97,0:12:57.49,中文,,0,0,0,,我要做的是替换这个返回
Dialogue: 0,0:12:57.49,0:13:00.64,英文,,0,0,0,,I'm going to set this so that it always returns 0.
Dialogue: 0,0:12:57.49,0:13:00.64,中文,,0,0,0,,我要设置这样它总是返回 0
Dialogue: 0,0:13:00.64,0:13:12.43,英文,,0,0,0,,So just out of curiosity, does anyone want to share what they think will happen when we run the visualizer again?
Dialogue: 0,0:13:00.64,0:13:12.43,中文,,0,0,0,,只是出于好奇 有人想分享一下当我们再次运行可视化器时会发生什么吗
Dialogue: 0,0:13:12.43,0:13:17.25,英文,,0,0,0,,Yeah.
Dialogue: 0,0:13:17.25,0:13:19.31,英文,,0,0,0,,Yeah, you think they'll all be in the same row?
Dialogue: 0,0:13:17.25,0:13:19.31,中文,,0,0,0,,是的 你觉得它们都会在同一行吗
Dialogue: 0,0:13:19.31,0:13:24.09,英文,,0,0,0,,Yeah, let's take a look.
Dialogue: 0,0:13:19.31,0:13:24.09,中文,,0,0,0,,是的 我们来看看
Dialogue: 0,0:13:24.09,0:13:27.42,英文,,0,0,0,,Yeah, everything gets put in.
Dialogue: 0,0:13:24.09,0:13:27.42,中文,,0,0,0,,是的 所有东西都被放进去了
Dialogue: 0,0:13:27.42,0:13:35.80,英文,,0,0,0,,And it's so many items that I run out of space on the screen to show them all.
Dialogue: 0,0:13:27.42,0:13:35.80,中文,,0,0,0,,屏幕上要显示的项太多了 以至于空间不够
Dialogue: 0,0:13:35.80,0:13:51.49,英文,,0,0,0,,Yeah, because this hash code ends up putting everything in that one bin, it ends up making this far, far worse than it should be.
Dialogue: 0,0:13:35.80,0:13:51.49,中文,,0,0,0,,是的 因为这个哈希码最终会将所有内容放入一个箱子中 所以情况变得比预期的糟糕得多
Dialogue: 0,0:13:51.49,0:13:54.45,英文,,0,0,0,,Here's an example of another run of this code.
Dialogue: 0,0:13:51.49,0:13:54.45,中文,,0,0,0,,这是另一个运行此代码的示例
Dialogue: 0,0:13:54.45,0:14:03.20,英文,,0,0,0,,So it's going to end up having this really bad behavior, where every single item is in this really long list, and it's no better than a linked list for our sets.
Dialogue: 0,0:13:54.45,0:14:03.20,中文,,0,0,0,,因此 最终会出现这种非常糟糕的行为 其中每个项目都在这个非常长的列表中 对于我们的集合来说 它并不比链表好
Dialogue: 0,0:14:03.20,0:14:06.33,英文,,0,0,0,,For all intents and purposes, this is the worst-case scenario.
Dialogue: 0,0:14:03.20,0:14:06.33,中文,,0,0,0,,就所有方面而言 这都是最坏的情况
Dialogue: 0,0:14:06.33,0:14:12.52,英文,,0,0,0,,It is going to be very bad if we end up having this.
Dialogue: 0,0:14:06.33,0:14:12.52,中文,,0,0,0,,如果最终出现这种情况 情况将会非常糟糕
Dialogue: 0,0:14:12.52,0:14:20.24,英文,,0,0,0,,So as another exercise, what function are we going to need if we want this distribution on the right?
Dialogue: 0,0:14:12.52,0:14:20.24,中文,,0,0,0,,作为另一个练习 如果我们希望右侧的分布是这样 我们需要什么函数
Dialogue: 0,0:14:20.24,0:14:23.76,英文,,0,0,0,,Any suggestions?
Dialogue: 0,0:14:20.24,0:14:23.76,中文,,0,0,0,,有什么建议吗
Dialogue: 0,0:14:23.76,0:14:25.32,英文,,0,0,0,,Yeah.
Dialogue: 0,0:14:23.76,0:14:25.32,中文,,0,0,0,,嗯
Dialogue: 0,0:14:25.32,0:14:27.26,英文,,0,0,0,,Yeah, modulo 6.
Dialogue: 0,0:14:25.32,0:14:27.26,中文,,0,0,0,,是的 取余 6
Dialogue: 0,0:14:27.26,0:14:28.42,英文,,0,0,0,,That's a good one.
Dialogue: 0,0:14:27.26,0:14:28.42,中文,,0,0,0,,这是一个好主意
Dialogue: 0,0:14:28.42,0:14:33.48,英文,,0,0,0,,Why 6?
Dialogue: 0,0:14:28.42,0:14:33.48,中文,,0,0,0,,为什么是 6
Dialogue: 0,0:14:33.48,0:14:41.34,英文,,0,0,0,,Yeah, there are six different categories.
Dialogue: 0,0:14:33.48,0:14:41.34,中文,,0,0,0,,是的 有六个不同的类别
Dialogue: 0,0:14:41.34,0:14:45.57,英文,,0,0,0,,So num mod 6.
Dialogue: 0,0:14:41.34,0:14:45.57,中文,,0,0,0,,数字取余 6
Dialogue: 0,0:14:45.57,0:14:53.75,英文,,0,0,0,,I would personally say that the mod 6 aspect isn't actually a principle of the hash code, but actually of the fact that we have six bins here.
Dialogue: 0,0:14:45.57,0:14:53.75,中文,,0,0,0,,我个人认为 模6的部分实际上并不是哈希码的原则 而是我们这里有六个箱子的事实
Dialogue: 0,0:14:53.75,0:15:00.29,英文,,0,0,0,,It's what the hash table is making it do so that it splits into six bins.
Dialogue: 0,0:14:53.75,0:15:00.29,中文,,0,0,0,,这是哈希表让它分成六个箱子的原因
Dialogue: 0,0:15:00.29,0:15:07.84,英文,,0,0,0,,So the answer that I provided here was instead of mod 6, it was just the number itself.
Dialogue: 0,0:15:00.29,0:15:07.84,中文,,0,0,0,,我在这里提供的答案是 不是模6 而是数字本身
Dialogue: 0,0:15:07.84,0:15:10.71,英文,,0,0,0,,Yeah.
Dialogue: 0,0:15:10.71,0:15:15.94,英文,,0,0,0,,Now, we could choose to define the hash code however we want.
Dialogue: 0,0:15:10.71,0:15:15.94,中文,,0,0,0,,现在 我们可以选择以任何我们想要的方式来定义哈希码
Dialogue: 0,0:15:15.94,0:15:18.52,英文,,0,0,0,,But let's say that I run it with num.
Dialogue: 0,0:15:15.94,0:15:18.52,中文,,0,0,0,,但是假设我用num来运行它
Dialogue: 0,0:15:18.52,0:15:30.52,英文,,0,0,0,,If I run it with num like this, and then I run it, yeah, it perfectly fills in exactly in the order that we want it.
Dialogue: 0,0:15:18.52,0:15:30.52,中文,,0,0,0,,如果我像这样用num运行它 然后运行它 是的 它完美地填充了我们想要的顺序
Dialogue: 0,0:15:30.52,0:15:38.62,英文,,0,0,0,,Everything is set up this way, and it should work.
Dialogue: 0,0:15:30.52,0:15:38.62,中文,,0,0,0,,一切都已经这样设置了 应该可以工作
Dialogue: 0,0:15:38.62,0:15:44.66,英文,,0,0,0,,Now, we could choose other hash functions, whatever hash function we want.
Dialogue: 0,0:15:38.62,0:15:44.66,中文,,0,0,0,,现在 我们可以选择其他哈希函数 任何我们想要的哈希函数
Dialogue: 0,0:15:44.66,0:15:45.96,英文,,0,0,0,,You could pick the leading digit.
Dialogue: 0,0:15:44.66,0:15:45.96,中文,,0,0,0,,你可以选择最前面的数字
Dialogue: 0,0:15:45.96,0:15:47.50,英文,,0,0,0,,You could pick the sum of the digits.
Dialogue: 0,0:15:45.96,0:15:47.50,中文,,0,0,0,,你可以选择数字的和
Dialogue: 0,0:15:47.50,0:15:49.52,英文,,0,0,0,,You could pick the length of the number.
Dialogue: 0,0:15:47.50,0:15:49.52,中文,,0,0,0,,你可以选择数字的长度
Dialogue: 0,0:15:49.52,0:15:51.78,英文,,0,0,0,,There's a lot of different options you could pick.
Dialogue: 0,0:15:49.52,0:15:51.78,中文,,0,0,0,,有很多不同的选项可以选择
Dialogue: 0,0:15:51.78,0:16:03.04,英文,,0,0,0,,Does anyone have any more fun, exotic ideas for a hash function we could choose?
Dialogue: 0,0:15:51.78,0:16:03.04,中文,,0,0,0,,还有没有人有更有趣、更奇特的哈希函数想法
Dialogue: 0,0:16:03.04,0:16:05.78,英文,,0,0,0,,Height times square root of length.
Dialogue: 0,0:16:03.04,0:16:05.78,中文,,0,0,0,,高度乘以长度的平方根
Dialogue: 0,0:16:05.78,0:16:07.99,英文,,0,0,0,,What's the height?
Dialogue: 0,0:16:05.78,0:16:07.99,中文,,0,0,0,,高度是多少
Dialogue: 0,0:16:07.99,0:16:09.67,英文,,0,0,0,,I don't know.
Dialogue: 0,0:16:07.99,0:16:09.67,中文,,0,0,0,,我不知道
Dialogue: 0,0:16:09.67,0:16:10.09,英文,,0,0,0,,What's a leg?
Dialogue: 0,0:16:09.67,0:16:10.09,中文,,0,0,0,,什么是腿
Dialogue: 0,0:16:10.09,0:16:13.23,英文,,0,0,0,,I don't know.
Dialogue: 0,0:16:10.09,0:16:13.23,中文,,0,0,0,,我不知道
Dialogue: 0,0:16:13.23,0:16:15.63,英文,,0,0,0,,All right.
Dialogue: 0,0:16:15.63,0:16:20.80,英文,,0,0,0,,So we could do this.
Dialogue: 0,0:16:15.63,0:16:20.80,中文,,0,0,0,,我们可以这样做
Dialogue: 0,0:16:20.80,0:16:29.28,英文,,0,0,0,,Let's give int height and int leg.
Dialogue: 0,0:16:20.80,0:16:29.28,中文,,0,0,0,,我们给定 int height 和 int leg
Dialogue: 0,0:16:29.28,0:16:32.57,英文,,0,0,0,,Actually, no.
Dialogue: 0,0:16:29.28,0:16:32.57,中文,,0,0,0,,其实不用
Dialogue: 0,0:16:32.57,0:16:34.47,英文,,0,0,0,,Let's do this.
Dialogue: 0,0:16:32.57,0:16:34.47,中文,,0,0,0,,这样做吧
Dialogue: 0,0:16:34.47,0:16:39.38,英文,,0,0,0,,Private int height.
Dialogue: 0,0:16:34.47,0:16:39.38,中文,,0,0,0,,私有变量 int height
Dialogue: 0,0:16:39.38,0:16:45.90,英文,,0,0,0,,private int width.
Dialogue: 0,0:16:39.38,0:16:45.90,中文,,0,0,0,,私有变量 int width
Dialogue: 0,0:16:45.90,0:16:49.06,英文,,0,0,0,,And I can pick random numbers here.
Dialogue: 0,0:16:45.90,0:16:49.06,中文,,0,0,0,,我可以在这里随机选取数字
Dialogue: 0,0:16:49.06,0:16:54.64,英文,,0,0,0,,I don't exactly remember how to pick random.
Dialogue: 0,0:16:49.06,0:16:54.64,中文,,0,0,0,,我不完全记得怎么随机选取数字
Dialogue: 0,0:16:54.64,0:17:00.29,英文,,0,0,0,,But fortunately here, someone here has used standard random here.
Dialogue: 0,0:16:54.64,0:17:00.29,中文,,0,0,0,,但是幸运的是 在这里 有人已经使用了标准的随机函数
Dialogue: 0,0:17:00.29,0:17:07.31,英文,,0,0,0,,So I'm going to assume that standard random is how we can get some randomness involved.
Dialogue: 0,0:17:00.29,0:17:07.31,中文,,0,0,0,,我要假设标准的随机函数就是我们可以引入一些随机性的方式
Dialogue: 0,0:17:07.31,0:17:09.83,英文,,0,0,0,,So I'm going to try and look this.
Dialogue: 0,0:17:07.31,0:17:09.83,中文,,0,0,0,,我要试着查找这个
Dialogue: 0,0:17:09.83,0:17:10.81,英文,,0,0,0,,So standard random.
Dialogue: 0,0:17:09.83,0:17:10.81,中文,,0,0,0,,标准的随机函数
Dialogue: 0,0:17:10.81,0:17:16.54,英文,,0,0,0,,And if I press dot, I can see if there's any functions that might be useful.
Dialogue: 0,0:17:10.81,0:17:16.54,中文,,0,0,0,,如果我按下点 我可以看到是否有任何可能有用的函数
Dialogue: 0,0:17:16.54,0:17:17.30,英文,,0,0,0,,Let's see here.
Dialogue: 0,0:17:16.54,0:17:17.30,中文,,0,0,0,,让我们看看这里
Dialogue: 0,0:17:17.30,0:17:27.66,英文,,0,0,0,,What does this one say?
Dialogue: 0,0:17:17.30,0:17:27.66,中文,,0,0,0,,这个怎么说
Dialogue: 0,0:17:27.66,0:17:34.63,英文,,0,0,0,,My guess is that what this will do is it will give me a random number between the smallest number that I want and what's the largest number.
Dialogue: 0,0:17:27.66,0:17:34.63,中文,,0,0,0,,我猜想这将会做的是给我一个在我想要的最小数和最大数之间的随机数
Dialogue: 0,0:17:34.63,0:17:38.99,英文,,0,0,0,,So what width do you want?
Dialogue: 0,0:17:34.63,0:17:38.99,中文,,0,0,0,,那你想要多宽
Dialogue: 0,0:17:38.99,0:17:47.39,英文,,0,0,0,,Let's say that width is something between 1 and 10 million.
Dialogue: 0,0:17:38.99,0:17:47.39,中文,,0,0,0,,假设宽度在1到1000万之间吧
Dialogue: 0,0:17:47.39,0:17:54.70,英文,,0,0,0,,And I'm going to set this equal to width.
Dialogue: 0,0:17:47.39,0:17:54.70,中文,,0,0,0,,然后我会把这个设置为宽度
Dialogue: 0,0:17:54.70,0:18:01.30,英文,,0,0,0,,And I'm going to do the same with height.
Dialogue: 0,0:17:54.70,0:18:01.30,中文,,0,0,0,,高度也是一样
Dialogue: 0,0:18:01.30,0:18:05.94,英文,,0,0,0,,Just for the simplicity here, I'm just going to assume that width and height are the same thing.
Dialogue: 0,0:18:01.30,0:18:05.94,中文,,0,0,0,,为了简单起见 我假设宽度和高度是一样的东西
Dialogue: 0,0:18:05.94,0:18:07.12,英文,,0,0,0,,All right.
Dialogue: 0,0:18:07.12,0:18:19.35,英文,,0,0,0,,And I'm going to do width times math.square root height.
Dialogue: 0,0:18:07.12,0:18:19.35,中文,,0,0,0,,现在我要做宽度乘以高度的平方根
Dialogue: 0,0:18:19.35,0:18:23.07,英文,,0,0,0,,Now, this is complaining to me now, because right now this is a double.
Dialogue: 0,0:18:19.35,0:18:23.07,中文,,0,0,0,,现在 它对我发牢骚 因为现在这是一个双精度数
Dialogue: 0,0:18:23.07,0:18:29.01,英文,,0,0,0,,So I'm going to do a typecast to an int.
Dialogue: 0,0:18:23.07,0:18:29.01,中文,,0,0,0,,我要进行强制类型转换为整数
Dialogue: 0,0:18:29.01,0:18:38.26,英文,,0,0,0,,What is it complaining about now?
Dialogue: 0,0:18:29.01,0:18:38.26,中文,,0,0,0,,现在它又在抱怨什么
Dialogue: 0,0:18:38.26,0:18:43.72,英文,,0,0,0,,I need to do the parentheses around here.
Dialogue: 0,0:18:38.26,0:18:43.72,中文,,0,0,0,,我需要在这里加上括号
Dialogue: 0,0:18:43.72,0:18:44.56,英文,,0,0,0,,Yeah.
Dialogue: 0,0:18:43.72,0:18:44.56,中文,,0,0,0,,是的
Dialogue: 0,0:18:44.56,0:18:44.90,英文,,0,0,0,,All right.
Dialogue: 0,0:18:44.90,0:18:51.44,英文,,0,0,0,,So now this would be the width times the square root of height, where we just randomly assign a width and a height to every single block.
Dialogue: 0,0:18:44.90,0:18:51.44,中文,,0,0,0,,那么现在这将是宽度乘以高度的平方根 我们只是随机给每个块分配宽度和高度
Dialogue: 0,0:18:51.44,0:18:59.64,英文,,0,0,0,,And if we do this, is it random?
Dialogue: 0,0:18:51.44,0:18:59.64,中文,,0,0,0,,如果我们这样做 是不是就是随机的
Dialogue: 0,0:18:59.64,0:19:01.80,英文,,0,0,0,,Kind of.
Dialogue: 0,0:18:59.64,0:19:01.80,中文,,0,0,0,,有点吧
Dialogue: 0,0:19:01.80,0:19:07.18,英文,,0,0,0,,It seems to really like the 2 mod 3 and the 1 mod 6 range.
Dialogue: 0,0:19:01.80,0:19:07.18,中文,,0,0,0,,它似乎特别喜欢2模3和1模6的范围
Dialogue: 0,0:19:07.18,0:19:10.84,英文,,0,0,0,,I'm not entirely sure why this happens.
Dialogue: 0,0:19:07.18,0:19:10.84,中文,,0,0,0,,我不是完全明白为什么会这样
Dialogue: 0,0:19:10.84,0:19:14.71,英文,,0,0,0,,This kind of thing just randomly shows up when you do exotic functions.
Dialogue: 0,0:19:10.84,0:19:14.71,中文,,0,0,0,,这种事情在做奇特函数时就会随机出现
Dialogue: 0,0:19:14.71,0:19:16.65,英文,,0,0,0,,But it does seem to spread it out quite a bit.
Dialogue: 0,0:19:14.71,0:19:16.65,中文,,0,0,0,,但它似乎把它散布得相当开
Dialogue: 0,0:19:16.65,0:19:19.67,英文,,0,0,0,,That's good.
Dialogue: 0,0:19:16.65,0:19:19.67,中文,,0,0,0,,挺好的
Dialogue: 0,0:19:19.67,0:19:23.52,英文,,0,0,0,,Yeah.
Dialogue: 0,0:19:23.52,0:19:29.32,英文,,0,0,0,,So yeah, we could use this to randomly define some exotic hash function, and it works.
Dialogue: 0,0:19:23.52,0:19:29.32,中文,,0,0,0,,我们可以用这个来随机定义一些奇异的哈希函数 而且它还管用
Dialogue: 0,0:19:29.32,0:19:34.71,英文,,0,0,0,,In fact, because we define width and height here as these variables here,
Dialogue: 0,0:19:29.32,0:19:34.71,中文,,0,0,0,,事实上 因为我们在这里将宽度和高度定义为这些变量 在这里
Dialogue: 0,0:19:34.71,0:19:36.65,英文,,0,0,0,,And they're effectively randomized.
Dialogue: 0,0:19:34.71,0:19:36.65,中文,,0,0,0,,而且它们实际上是随机的
Dialogue: 0,0:19:36.65,0:19:41.03,英文,,0,0,0,,This effectively acts the same as the memory address thing.
Dialogue: 0,0:19:36.65,0:19:41.03,中文,,0,0,0,,这实际上与内存地址的方式相同
Dialogue: 0,0:19:41.03,0:19:44.71,英文,,0,0,0,,The memory address is assigned to an object when we first create it.
Dialogue: 0,0:19:41.03,0:19:44.71,中文,,0,0,0,,当我们首次创建对象时 内存地址会被分配给它
Dialogue: 0,0:19:44.71,0:19:51.03,英文,,0,0,0,,And it effectively acts as a random number that's directly associated with this item and this item alone.
Dialogue: 0,0:19:44.71,0:19:51.03,中文,,0,0,0,,它实际上就像一个与这个项目直接关联的随机数一样
Dialogue: 0,0:19:51.03,0:20:02.48,英文,,0,0,0,,In the same way here, the width and height were random numbers that were defined explicitly for this object at the creation of the object at the start.
Dialogue: 0,0:19:51.03,0:20:02.48,中文,,0,0,0,,同样 在这里 宽度和高度都是在对象创建时显式定义的随机数
Dialogue: 0,0:20:02.48,0:20:03.83,英文,,0,0,0,,Yeah.
Dialogue: 0,0:20:02.48,0:20:03.83,中文,,0,0,0,,是的
Dialogue: 0,0:20:03.83,0:20:15.04,英文,,0,0,0,,We can play around with this a bit more, and you could have some fun trying to create these really cool hash functions.
Dialogue: 0,0:20:03.83,0:20:15.04,中文,,0,0,0,,我们可以再多玩一会儿 你可以试着创建一些很酷的哈希函数 玩得很开心
Dialogue: 0,0:20:15.04,0:20:22.92,英文,,0,0,0,,But generally speaking, they're going to end up becoming slightly worse than just the simple standard one, at least for integers.
Dialogue: 0,0:20:15.04,0:20:22.92,中文,,0,0,0,,但一般来说 它们最终会变得比简单标准的那个略差一些 至少对于整数来说是这样
Dialogue: 0,0:20:22.92,0:20:35.36,英文,,0,0,0,,It's always going to be best to just return the integer itself in most circumstances, because those are going to be the most spread out evenly.
Dialogue: 0,0:20:22.92,0:20:35.36,中文,,0,0,0,,在大多数情况下 最好只返回整数本身 因为这样会使它们更加均匀地分布
Dialogue: 0,0:20:35.36,0:20:41.44,英文,,0,0,0,,So we didn't mention that the goal of hash function is to try to spread out things evenly.
Dialogue: 0,0:20:35.36,0:20:41.44,中文,,0,0,0,,我们没有提到哈希函数的目标是尽量均匀地分布事物
Dialogue: 0,0:20:41.44,0:20:47.13,英文,,0,0,0,,And we also said that just returning the number is, generally speaking, the best approach.
Dialogue: 0,0:20:41.44,0:20:47.13,中文,,0,0,0,,我们还说过 仅仅返回数字通常是最好的方法
Dialogue: 0,0:20:47.13,0:20:52.33,英文,,0,0,0,,So what do you think would be the spread for the default hash code?
Dialogue: 0,0:20:47.13,0:20:52.33,中文,,0,0,0,,那你觉得默认哈希码的分布会怎么样呢
Dialogue: 0,0:20:52.33,0:20:54.13,英文,,0,0,0,,Who here says there is no spread at all?
Dialogue: 0,0:20:52.33,0:20:54.13,中文,,0,0,0,,这里有谁说根本没有分布
Dialogue: 0,0:20:54.13,0:20:58.99,英文,,0,0,0,,Everything gets clumped up in the same spot like if you're returning 0.
Dialogue: 0,0:20:54.13,0:20:58.99,中文,,0,0,0,,所有东西都聚集在同一个位置 就像你返回 0 一样
Dialogue: 0,0:20:58.99,0:21:00.85,英文,,0,0,0,,How about bad spread?
Dialogue: 0,0:20:58.99,0:21:00.85,中文,,0,0,0,,坏的分布怎么样
Dialogue: 0,0:21:00.85,0:21:07.52,英文,,0,0,0,,It spreads it out, but it's not really good as a spreading.
Dialogue: 0,0:21:00.85,0:21:07.52,中文,,0,0,0,,它会把它们分散开来 但作为分散的方式并不是很好
Dialogue: 0,0:21:07.52,0:21:08.56,英文,,0,0,0,,A few people.
Dialogue: 0,0:21:07.52,0:21:08.56,中文,,0,0,0,,一些人
Dialogue: 0,0:21:08.56,0:21:09.30,英文,,0,0,0,,Good spread?
Dialogue: 0,0:21:08.56,0:21:09.30,中文,,0,0,0,,好广泛吗
Dialogue: 0,0:21:09.30,0:21:12.18,英文,,0,0,0,,Like it spread things out largely evenly?
Dialogue: 0,0:21:09.30,0:21:12.18,中文,,0,0,0,,喜欢把事情分散得相当均匀吗
Dialogue: 0,0:21:12.18,0:21:13.00,英文,,0,0,0,,Yeah.
Dialogue: 0,0:21:12.18,0:21:13.00,中文,,0,0,0,,是的
Dialogue: 0,0:21:13.00,0:21:15.22,英文,,0,0,0,,Most people say it's a good spread.
Dialogue: 0,0:21:13.00,0:21:15.22,中文,,0,0,0,,大多数人说这是个不错的分散
Dialogue: 0,0:21:15.22,0:21:16.36,英文,,0,0,0,,I would say that, yeah.
Dialogue: 0,0:21:15.22,0:21:16.36,中文,,0,0,0,,我会这么说 是的
Dialogue: 0,0:21:16.36,0:21:18.96,英文,,0,0,0,,The memory address is effectively random.
Dialogue: 0,0:21:16.36,0:21:18.96,中文,,0,0,0,,内存地址实际上是随机的
Dialogue: 0,0:21:18.96,0:21:21.72,英文,,0,0,0,,As you mentioned, there were some caveats to that.
Dialogue: 0,0:21:18.96,0:21:21.72,中文,,0,0,0,,正如你提到的 这有一些注意事项
Dialogue: 0,0:21:21.72,0:21:27.42,英文,,0,0,0,,But ignoring all those caveats, it is effectively evenly distributed.
Dialogue: 0,0:21:21.72,0:21:27.42,中文,,0,0,0,,但是忽略所有这些注意事项 它实际上是均匀分布的
Dialogue: 0,0:21:27.42,0:21:30.30,英文,,0,0,0,,So here's a question.
Dialogue: 0,0:21:27.42,0:21:30.30,中文,,0,0,0,,这里有一个问题
Dialogue: 0,0:21:30.30,0:21:35.84,英文,,0,0,0,,If the default hash code already achieves good spread for any object whatsoever,
Dialogue: 0,0:21:30.30,0:21:35.84,中文,,0,0,0,,如果默认的哈希码已经为任何对象实现了良好的分布
Dialogue: 0,0:21:35.84,0:21:38.74,英文,,0,0,0,,Why do we even need a custom hash function in the first place?
Dialogue: 0,0:21:35.84,0:21:38.74,中文,,0,0,0,,那么我们为什么还需要在第一次编写自定义哈希函数时
Dialogue: 0,0:21:38.74,0:21:49.01,英文,,0,0,0,,Like, why do I need to write a new hash function every single time I write a new class?
Dialogue: 0,0:21:38.74,0:21:49.01,中文,,0,0,0,,比如 为什么我每次编写新类时都需要编写一个新的哈希函数
Dialogue: 0,0:21:49.01,0:21:52.93,英文,,0,0,0,,Well, let's take a look at an example.
Dialogue: 0,0:21:49.01,0:21:52.93,中文,,0,0,0,,好吧 让我们看一个例子
Dialogue: 0,0:21:52.93,0:22:00.16,英文,,0,0,0,,Suppose that I try to change not the hash code function, but the equals method instead.
Dialogue: 0,0:21:52.93,0:22:00.16,中文,,0,0,0,,假设我尝试更改的不是哈希码函数 而是equals方法
Dialogue: 0,0:22:00.16,0:22:01.94,英文,,0,0,0,,for colored number.
Dialogue: 0,0:22:00.16,0:22:01.94,中文,,0,0,0,,对于有颜色的数字
Dialogue: 0,0:22:01.94,0:22:08.31,英文,,0,0,0,,And I want to say that two colored numbers are equal if they are the same numeric value.
Dialogue: 0,0:22:01.94,0:22:08.31,中文,,0,0,0,,而且我想说 如果两个有颜色的数字具有相同的数值 它们就是相等的
Dialogue: 0,0:22:08.31,0:22:09.75,英文,,0,0,0,,So I don't care about the color.
Dialogue: 0,0:22:08.31,0:22:09.75,中文,,0,0,0,,我不在乎颜色
Dialogue: 0,0:22:09.75,0:22:14.23,英文,,0,0,0,,I'm saying that a 12 is a 12 is a 12, regardless of what color it is.
Dialogue: 0,0:22:09.75,0:22:14.23,中文,,0,0,0,,我是说 12就是12就是12 不管它是什么颜色
Dialogue: 0,0:22:14.23,0:22:22.08,英文,,0,0,0,,Now, the general principle is that if two things are equal, then they should act as the exact same thing to outside observers.
Dialogue: 0,0:22:14.23,0:22:22.08,中文,,0,0,0,,现在 总的原则是 如果两个东西相等 那么它们对外界观察者应该是完全相同的
Dialogue: 0,0:22:22.08,0:22:35.49,英文,,0,0,0,,So if I were to do this, for example, where I try to add, let's say, 20 numbers to this set, numbered from 0 to 19.
Dialogue: 0,0:22:22.08,0:22:35.49,中文,,0,0,0,,例如 如果我尝试将 让我们说 20个数字添加到这个集合中 从0到19编号
Dialogue: 0,0:22:35.49,0:22:39.57,英文,,0,0,0,,And I check if the number 12 is in the set.
Dialogue: 0,0:22:35.49,0:22:39.57,中文,,0,0,0,,我检查一下集合里是否有数字12
Dialogue: 0,0:22:39.57,0:22:47.38,英文,,0,0,0,,What should I expect to have returned by this?
Dialogue: 0,0:22:39.57,0:22:47.38,中文,,0,0,0,,这样会返回什么
Dialogue: 0,0:22:47.38,0:22:48.20,英文,,0,0,0,,How many people say true?
Dialogue: 0,0:22:47.38,0:22:48.20,中文,,0,0,0,,有多少人说是真的
Dialogue: 0,0:22:48.20,0:22:51.34,英文,,0,0,0,,A few people here and there.
Dialogue: 0,0:22:48.20,0:22:51.34,中文,,0,0,0,,偶尔有几个人
Dialogue: 0,0:22:51.34,0:22:54.79,英文,,0,0,0,,How many people say false?
Dialogue: 0,0:22:51.34,0:22:54.79,中文,,0,0,0,,有多少人说是假的
Dialogue: 0,0:22:54.79,0:22:55.13,英文,,0,0,0,,No one?
Dialogue: 0,0:22:54.79,0:22:55.13,中文,,0,0,0,,没有人吗
Dialogue: 0,0:22:55.13,0:23:00.06,英文,,0,0,0,,How many people are kind of unsure?
Dialogue: 0,0:22:55.13,0:23:00.06,中文,,0,0,0,,有多少人有点不确定
Dialogue: 0,0:23:00.06,0:23:03.57,英文,,0,0,0,,Significantly less than the remainder of the people here.
Dialogue: 0,0:23:00.06,0:23:03.57,中文,,0,0,0,,这里的人数明显比其他人少得多
Dialogue: 0,0:23:03.57,0:23:06.23,英文,,0,0,0,,So they're people who are neither unsure, true, or false.
Dialogue: 0,0:23:03.57,0:23:06.23,中文,,0,0,0,,他们是既不确定、真实也不虚假的人
Dialogue: 0,0:23:06.23,0:23:10.97,英文,,0,0,0,,All right.
Dialogue: 0,0:23:10.97,0:23:13.17,英文,,0,0,0,,So.
Dialogue: 0,0:23:13.17,0:23:19.69,英文,,0,0,0,,Well, personally, what I would say is that the number 12 should have been submitted into this hash set.
Dialogue: 0,0:23:13.17,0:23:19.69,中文,,0,0,0,,嗯 就我个人而言 我会说数字12应该被提交到这个哈希集合中
Dialogue: 0,0:23:19.69,0:23:22.95,英文,,0,0,0,,I should have put in a color number of value 12.
Dialogue: 0,0:23:19.69,0:23:22.95,中文,,0,0,0,,我应该输入一个值为12的颜色编号
Dialogue: 0,0:23:22.95,0:23:27.85,英文,,0,0,0,,And what I'm saying is that two things are equal if their numbers are the same.
Dialogue: 0,0:23:22.95,0:23:27.85,中文,,0,0,0,,我的意思是 如果它们的数字相同 那么两个东西就是相等的
Dialogue: 0,0:23:27.85,0:23:35.33,英文,,0,0,0,,And that means this new color number, the number 12, that should be considered equal to any other 12 in existence.
Dialogue: 0,0:23:27.85,0:23:35.33,中文,,0,0,0,,这意味着这个新的颜色编号 编号12 应该被视为与任何其他存在的12相等
Dialogue: 0,0:23:35.33,0:23:43.39,英文,,0,0,0,,So a hash set should tell me that it is in there because something equal to 12 exists in there.
Dialogue: 0,0:23:35.33,0:23:43.39,中文,,0,0,0,,哈希集应该告诉我 它在那里 因为在那里存在与12相等的东西
Dialogue: 0,0:23:43.39,0:23:56.84,英文,,0,0,0,,All 12s are considered to be the exact same thing because we called equals, or we redefined equals to say that if two things have the same number, then they are the same thing.
Dialogue: 0,0:23:43.39,0:23:56.84,中文,,0,0,0,,所有的12都被认为是完全相同的东西 因为我们调用了equals 或者重新定义了equals 以表明如果两个东西有相同的数字 那么它们就是相同的东西
Dialogue: 0,0:23:56.84,0:24:06.51,英文,,0,0,0,,Now, let's say that we use just the default hash function, which yields this table to the right.
Dialogue: 0,0:23:56.84,0:24:06.51,中文,,0,0,0,,现在 假设我们使用默认的哈希函数 得到的是右边的这个表
Dialogue: 0,0:24:06.51,0:24:11.48,英文,,0,0,0,,And I say that I run this code.
Dialogue: 0,0:24:06.51,0:24:11.48,中文,,0,0,0,,然后我说我运行这段代码
Dialogue: 0,0:24:11.48,0:24:17.14,英文,,0,0,0,,Equals, as before, it runs true if two colors are the same number.
Dialogue: 0,0:24:11.48,0:24:17.14,中文,,0,0,0,,就像之前的equals一样 如果两种颜色是相同的数字 它就返回true
Dialogue: 0,0:24:17.14,0:24:22.02,英文,,0,0,0,,What do you think the contains operation is going to return now?
Dialogue: 0,0:24:17.14,0:24:22.02,中文,,0,0,0,,你觉得现在contains操作会返回什么
Dialogue: 0,0:24:22.02,0:24:23.00,英文,,0,0,0,,How many people say true?
Dialogue: 0,0:24:22.02,0:24:23.00,中文,,0,0,0,,有多少人说真的
Dialogue: 0,0:24:23.00,0:24:27.77,英文,,0,0,0,,A few people.
Dialogue: 0,0:24:23.00,0:24:27.77,中文,,0,0,0,,有几个人
Dialogue: 0,0:24:27.77,0:24:30.11,英文,,0,0,0,,How many people say false?
Dialogue: 0,0:24:27.77,0:24:30.11,中文,,0,0,0,,有多少人说假的
Dialogue: 0,0:24:30.11,0:24:32.23,英文,,0,0,0,,A lot more people.
Dialogue: 0,0:24:30.11,0:24:32.23,中文,,0,0,0,,更多的人
Dialogue: 0,0:24:32.23,0:24:38.11,英文,,0,0,0,,Are there any other answers?
Dialogue: 0,0:24:32.23,0:24:38.11,中文,,0,0,0,,还有其他答案吗
Dialogue: 0,0:24:38.11,0:24:43.33,英文,,0,0,0,,Well, for someone who said false, why do you think that was?
Dialogue: 0,0:24:38.11,0:24:43.33,中文,,0,0,0,,嗯 对于说假话的人来说 你觉得是为什么
Dialogue: 0,0:24:43.33,0:25:03.96,英文,,0,0,0,,Yeah?
Dialogue: 0,0:24:43.33,0:25:03.96,中文,,0,0,0,,是吗
Dialogue: 0,0:25:03.96,0:25:04.56,英文,,0,0,0,,Yeah.
Dialogue: 0,0:25:04.56,0:25:13.12,英文,,0,0,0,,Yes.
Dialogue: 0,0:25:13.12,0:25:15.58,英文,,0,0,0,,Yeah.
Dialogue: 0,0:25:13.12,0:25:15.58,中文,,0,0,0,,是的
Dialogue: 0,0:25:15.58,0:25:23.88,英文,,0,0,0,,If we put in a new 12 object, then there's a 1 in 6 chance that I get really lucky, and the hash code happens to be in the 1 bin.
Dialogue: 0,0:25:15.58,0:25:23.88,中文,,0,0,0,,如果我们添加一个新的12对象 那么我有六分之一的机会非常幸运 哈希码恰好在1号箱中
Dialogue: 0,0:25:23.88,0:25:26.02,英文,,0,0,0,,And we check the 1 bin for the number 12.
Dialogue: 0,0:25:23.88,0:25:26.02,中文,,0,0,0,,然后我们检查1号箱中是否有数字12
Dialogue: 0,0:25:26.02,0:25:29.06,英文,,0,0,0,,We find the number 12, and we're done.
Dialogue: 0,0:25:26.02,0:25:29.06,中文,,0,0,0,,我们找到数字12 然后完成
Dialogue: 0,0:25:29.06,0:25:33.92,英文,,0,0,0,,But there's a 5, 6 chance that we get a number that's not 1, mod 6.
Dialogue: 0,0:25:29.06,0:25:33.92,中文,,0,0,0,,但是有五分之六的机会我们得到一个不是1 mod 6的数字
Dialogue: 0,0:25:33.92,0:25:37.70,英文,,0,0,0,,And in that case, we end up checking the wrong bin.
Dialogue: 0,0:25:33.92,0:25:37.70,中文,,0,0,0,,而在这种情况下 我们最终检查了错误的垃圾箱
Dialogue: 0,0:25:37.70,0:25:48.33,英文,,0,0,0,,To use our boba example, imagine that someone in TPT just went and put the boba in the wrong slot, and you went and picked up your order, and then it's not there.
Dialogue: 0,0:25:37.70,0:25:48.33,中文,,0,0,0,,以我们珍珠奶茶的例子来说 想象一下TPT中的某人刚刚把珍珠奶茶放在了错误的槽口 你去取你的订单 然后它不在那里
Dialogue: 0,0:25:48.33,0:25:56.89,英文,,0,0,0,,It's in the wrong spot, so you can't find it, and you wait forever, waiting for your boba, because no one put it in the right spot.
Dialogue: 0,0:25:48.33,0:25:56.89,中文,,0,0,0,,它在错误的位置 你找不到它 你就永远等下去 等着你的珍珠奶茶 因为没有人把它放在正确的位置
Dialogue: 0,0:25:56.89,0:26:06.57,英文,,0,0,0,,So because of this, if we have an equality change, we're going to end up running into this issue.
Dialogue: 0,0:25:56.89,0:26:06.57,中文,,0,0,0,,因此 由于这个原因 如果我们有一个相等的变化 我们将会遇到这个问题
Dialogue: 0,0:26:06.57,0:26:18.30,英文,,0,0,0,,If the hash code is just based on the memory address, but the equals is based on the number, then it's going to end up in this issue where sometimes we lose the item we wanted to search for.
Dialogue: 0,0:26:06.57,0:26:18.30,中文,,0,0,0,,如果哈希码仅基于内存地址 但相等是基于数字的 那么我们将会遇到这个问题 有时会丢失我们想要搜索的项目
Dialogue: 0,0:26:18.30,0:26:25.37,英文,,0,0,0,,When we check for items that are equal, we're going to end up putting it in the wrong slot.
Dialogue: 0,0:26:18.30,0:26:25.37,中文,,0,0,0,,当我们检查相等的项目时 我们将会把它放在错误的槽口
Dialogue: 0,0:26:25.37,0:26:27.99,英文,,0,0,0,,Let's see if I have an example here.
Dialogue: 0,0:26:25.37,0:26:27.99,中文,,0,0,0,,让我们看看我这里是否有一个例子
Dialogue: 0,0:26:27.99,0:26:32.23,英文,,0,0,0,,Yeah, here's the can't find my stuff demo.
Dialogue: 0,0:26:27.99,0:26:32.23,中文,,0,0,0,,是的 这是找不到我的东西演示
Dialogue: 0,0:26:32.23,0:26:35.83,英文,,0,0,0,,So using this example,
Dialogue: 0,0:26:32.23,0:26:35.83,中文,,0,0,0,,使用这个例子
Dialogue: 0,0:26:35.83,0:26:45.76,英文,,0,0,0,,If we look through this, let's say that I run the same code here.
Dialogue: 0,0:26:35.83,0:26:45.76,中文,,0,0,0,,如果我们查看这个 假设我在这里运行相同的代码
Dialogue: 0,0:26:45.76,0:26:48.28,英文,,0,0,0,,Here's not the hash set.
Dialogue: 0,0:26:45.76,0:26:48.28,中文,,0,0,0,,这里不是哈希集
Dialogue: 0,0:26:48.28,0:26:53.00,英文,,0,0,0,,This is the wrong one, isn't it?
Dialogue: 0,0:26:48.28,0:26:53.00,中文,,0,0,0,,这是错误的 不是吗
Dialogue: 0,0:26:53.00,0:26:57.22,英文,,0,0,0,,Let me see.
Dialogue: 0,0:26:53.00,0:26:57.22,中文,,0,0,0,,让我看看
Dialogue: 0,0:26:57.22,0:26:59.43,英文,,0,0,0,,Let's see.
Dialogue: 0,0:26:57.22,0:26:59.43,中文,,0,0,0,,让我们看看
Dialogue: 0,0:26:59.43,0:27:04.72,英文,,0,0,0,,So first step, I need to undo this.
Dialogue: 0,0:26:59.43,0:27:04.72,中文,,0,0,0,,首先 我需要撤销这个
Dialogue: 0,0:27:04.72,0:27:10.18,英文,,0,0,0,,So that way, this override, that hash code is still the default one.
Dialogue: 0,0:27:04.72,0:27:10.18,中文,,0,0,0,,这样一来 这个覆盖 那个哈希码仍然是默认的
Dialogue: 0,0:27:10.18,0:27:20.92,英文,,0,0,0,,But now I'm going to turn this one on and set it up so that the numbers, if they're equal, then they're going to return true.
Dialogue: 0,0:27:10.18,0:27:20.92,中文,,0,0,0,,但现在我要打开这个并设置它 如果它们相等 那么它们将返回 true
Dialogue: 0,0:27:20.92,0:27:24.36,英文,,0,0,0,,And I'm going to go to this demo here.
Dialogue: 0,0:27:20.92,0:27:24.36,中文,,0,0,0,,然后我会去这个演示
Dialogue: 0,0:27:24.36,0:27:26.92,英文,,0,0,0,,And I'm going to set it up to be the exact same thing.
Dialogue: 0,0:27:24.36,0:27:26.92,中文,,0,0,0,,我会设置它成完全相同的东西
Dialogue: 0,0:27:26.92,0:27:30.80,英文,,0,0,0,,Here, I'm actually using the Java's default hash set, not any special one.
Dialogue: 0,0:27:26.92,0:27:30.80,中文,,0,0,0,,在这里 我实际上是使用Java的默认哈希集 而不是任何特殊的
Dialogue: 0,0:27:30.80,0:27:35.75,英文,,0,0,0,,So this is the actual hash set behavior that Java expects you to use.
Dialogue: 0,0:27:30.80,0:27:35.75,中文,,0,0,0,,这是Java希望你使用的实际哈希集行为
Dialogue: 0,0:27:35.75,0:27:41.51,英文,,0,0,0,,And if I run this, so we're going to run this.
Dialogue: 0,0:27:35.75,0:27:41.51,中文,,0,0,0,,运行这个 所以我们要运行这个
Dialogue: 0,0:27:41.51,0:27:46.27,英文,,0,0,0,,We'll see, ah, still the wrong one.
Dialogue: 0,0:27:41.51,0:27:46.27,中文,,0,0,0,,我们会看到 啊 还是错的那一个
Dialogue: 0,0:27:46.27,0:27:49.00,英文,,0,0,0,,This one.
Dialogue: 0,0:27:46.27,0:27:49.00,中文,,0,0,0,,这个
Dialogue: 0,0:27:49.00,0:27:51.18,英文,,0,0,0,,Yeah.
Dialogue: 0,0:27:49.00,0:27:51.18,中文,,0,0,0,,是的
Dialogue: 0,0:27:51.18,0:27:55.30,英文,,0,0,0,,We'll see that we put 20 items in here.
Dialogue: 0,0:27:51.18,0:27:55.30,中文,,0,0,0,,我们会看到我们把20个项目放进去
Dialogue: 0,0:27:55.30,0:28:02.26,英文,,0,0,0,,But if we check if 12's in there, it says false, because by complete chance, it happened to be in the wrong slot.
Dialogue: 0,0:27:55.30,0:28:02.26,中文,,0,0,0,,但如果我们检查12是否在里面 它会说false 因为完全偶然地 它恰好在错误的位置
Dialogue: 0,0:28:02.26,0:28:16.98,英文,,0,0,0,,Now, this is even worse, actually, because if I decide to put the number 12 every single time, if this was a correctly behaving hash set, what would you expect should happen if we do this?
Dialogue: 0,0:28:02.26,0:28:16.98,中文,,0,0,0,,现在 这其实更糟 因为如果我决定每次都放数字12 如果这是一个行为正确的哈希集 你期望如果我们这样做会发生什么
Dialogue: 0,0:28:16.98,0:28:22.73,英文,,0,0,0,,If we got everything working as it should, how many items do we think we should have on this?
Dialogue: 0,0:28:16.98,0:28:22.73,中文,,0,0,0,,如果我们一切正常运行 我们认为在这个上面应该有多少个项目呢
Dialogue: 0,0:28:22.73,0:28:26.08,英文,,0,0,0,,Yeah?
Dialogue: 0,0:28:22.73,0:28:26.08,中文,,0,0,0,,是的
Dialogue: 0,0:28:26.08,0:28:28.44,英文,,0,0,0,,One, yep, because there's only one thing.
Dialogue: 0,0:28:26.08,0:28:28.44,中文,,0,0,0,,一个 是的 因为只有一件事
Dialogue: 0,0:28:28.44,0:28:31.11,英文,,0,0,0,,We just keep adding the same thing over and over.
Dialogue: 0,0:28:28.44,0:28:31.11,中文,,0,0,0,,我们只是一遍又一遍地添加相同的东西
Dialogue: 0,0:28:31.11,0:28:38.31,英文,,0,0,0,,But if we run this, then we still get 20 items in here.
Dialogue: 0,0:28:31.11,0:28:38.31,中文,,0,0,0,,但是如果我们运行这个 然后在这里仍然有20个项目
Dialogue: 0,0:28:38.31,0:28:42.22,英文,,0,0,0,,We've added 12 to this thing 20 times, and we just checked.
Dialogue: 0,0:28:38.31,0:28:42.22,中文,,0,0,0,,我们已经将12添加到这个东西20次了 我们刚刚检查过
Dialogue: 0,0:28:42.22,0:28:43.06,英文,,0,0,0,,Is 12 in there?
Dialogue: 0,0:28:42.22,0:28:43.06,中文,,0,0,0,,12在里面吗
Dialogue: 0,0:28:43.06,0:28:43.96,英文,,0,0,0,,No.
Dialogue: 0,0:28:43.06,0:28:43.96,中文,,0,0,0,,不
Dialogue: 0,0:28:43.96,0:28:46.02,英文,,0,0,0,,Let's be even more sure.
Dialogue: 0,0:28:43.96,0:28:46.02,中文,,0,0,0,,我们再确定一下
Dialogue: 0,0:28:46.02,0:28:50.60,英文,,0,0,0,,Let's add 20,000 items.
Dialogue: 0,0:28:46.02,0:28:50.60,中文,,0,0,0,,我们再添加20000个项目
Dialogue: 0,0:28:50.60,0:28:52.08,英文,,0,0,0,,Does it work?
Dialogue: 0,0:28:50.60,0:28:52.08,中文,,0,0,0,,它能工作吗
Dialogue: 0,0:28:52.08,0:28:52.86,英文,,0,0,0,,No.
Dialogue: 0,0:28:52.08,0:28:52.86,中文,,0,0,0,,不
Dialogue: 0,0:28:52.86,0:28:55.79,英文,,0,0,0,,Add 20,000 of these numbers.
Dialogue: 0,0:28:52.86,0:28:55.79,中文,,0,0,0,,添加20000个这些数字
Dialogue: 0,0:28:55.79,0:29:01.87,英文,,0,0,0,,And every single one of them, it's in the different hash bucket is the one that we check here.
Dialogue: 0,0:28:55.79,0:29:01.87,中文,,0,0,0,,并且每一个 都在不同的哈希桶里 我们在这里检查的就是它们
Dialogue: 0,0:29:01.87,0:29:07.94,英文,,0,0,0,,Now, part of the reason why this is the case is because we keep increasing the number of bins every single time.
Dialogue: 0,0:29:01.87,0:29:07.94,中文,,0,0,0,,现在 这种情况之所以会发生的部分原因是因为我们每次都在增加箱的数量
Dialogue: 0,0:29:07.94,0:29:09.86,英文,,0,0,0,,It's kind of the same thing as the resize.
Dialogue: 0,0:29:07.94,0:29:09.86,中文,,0,0,0,,这有点类似于调整大小
Dialogue: 0,0:29:09.86,0:29:21.65,英文,,0,0,0,,Because we resized every single time, the total number of bins that were completely empty increased at a rate proportional to the total number of elements we added.
Dialogue: 0,0:29:09.86,0:29:21.65,中文,,0,0,0,,因为我们每次都调整大小 完全为空的箱子的总数以与我们添加的元素总数成比例的速度增加
Dialogue: 0,0:29:21.65,0:29:30.59,英文,,0,0,0,,So each time we just added, there was still that same approximately 75% chance that we end up getting a bad bin and miss.
Dialogue: 0,0:29:21.65,0:29:30.59,中文,,0,0,0,,每次我们只是添加 仍然有大约75%的机会我们最终得到一个糟糕的箱子并错过
Dialogue: 0,0:29:30.59,0:29:43.82,英文,,0,0,0,,But without changing the hash code method, each time we add this, even if we're adding 12, 20,000 times to a hash set, if we check if 12's in there, it's not going to say yes.
Dialogue: 0,0:29:30.59,0:29:43.82,中文,,0,0,0,,但是不改变哈希码方法 每次我们添加这个 即使我们向哈希集添加12次 20000次 如果我们检查是否有12在里面 它也不会说是的
Dialogue: 0,0:29:43.82,0:29:46.72,英文,,0,0,0,,Not with high probability.
Dialogue: 0,0:29:43.82,0:29:46.72,中文,,0,0,0,,不是高概率
Dialogue: 0,0:29:46.72,0:29:52.35,英文,,0,0,0,,How do we fix that?
Dialogue: 0,0:29:46.72,0:29:52.35,中文,,0,0,0,,我们如何修复这个问题
Dialogue: 0,0:29:52.35,0:29:53.81,英文,,0,0,0,,Make my own hash code?
Dialogue: 0,0:29:52.35,0:29:53.81,中文,,0,0,0,,自己编写哈希码吗
Dialogue: 0,0:29:53.81,0:29:56.27,英文,,0,0,0,,Yeah.
Dialogue: 0,0:29:53.81,0:29:56.27,中文,,0,0,0,,是的
Dialogue: 0,0:29:56.27,0:29:59.39,英文,,0,0,0,,So what I can do is I'm going to just write the hash code.
Dialogue: 0,0:29:56.27,0:29:59.39,中文,,0,0,0,,我能做的就是写入哈希码
Dialogue: 0,0:29:59.39,0:30:05.13,英文,,0,0,0,,And if I run this, then it should end up working.
Dialogue: 0,0:29:59.39,0:30:05.13,中文,,0,0,0,,如果我运行这个 它应该可以工作
Dialogue: 0,0:30:05.13,0:30:06.87,英文,,0,0,0,,Yeah.
Dialogue: 0,0:30:06.87,0:30:11.82,英文,,0,0,0,,I added 12,000 times the same number, but it only gave me one item.
Dialogue: 0,0:30:06.87,0:30:11.82,中文,,0,0,0,,我添加了12,000次相同的数字 但它只给了我一个项目
Dialogue: 0,0:30:11.82,0:30:18.66,英文,,0,0,0,,And if I set this up, if I check if 12 is in there, then yes, 12 is in here.
Dialogue: 0,0:30:11.82,0:30:18.66,中文,,0,0,0,,如果我设置这个 如果我检查12是否在其中 那么是的 12在这里
Dialogue: 0,0:30:18.66,0:30:29.88,英文,,0,0,0,,So using this, we're able to say that this, if you include both the hash code and the equals method, then it works properly.
Dialogue: 0,0:30:18.66,0:30:29.88,中文,,0,0,0,,使用这个 我们能够说 如果你同时包括哈希码和equals方法 那么它就能正常工作
Dialogue: 0,0:30:29.88,0:30:38.46,英文,,0,0,0,,So in general, you need to have this consistency between the equals and the hash code operation in order for this hash table to work.
Dialogue: 0,0:30:29.88,0:30:38.46,中文,,0,0,0,,一般来说 你需要在equals和哈希码操作之间保持一致 才能使这个哈希表正常工作
Dialogue: 0,0:30:38.46,0:30:44.59,英文,,0,0,0,,The general rule is if two objects are equal, then they need to have the same hash code.
Dialogue: 0,0:30:38.46,0:30:44.59,中文,,0,0,0,,总的规则是如果两个对象相等 那么它们需要有相同的哈希码
Dialogue: 0,0:30:44.59,0:30:48.39,英文,,0,0,0,,Otherwise, the hash table isn't going to be able to find it.
Dialogue: 0,0:30:44.59,0:30:48.39,中文,,0,0,0,,否则 哈希表将无法找到它
Dialogue: 0,0:30:48.39,0:30:53.47,英文,,0,0,0,,Now, this doesn't work in inverse or converse.
Dialogue: 0,0:30:48.39,0:30:53.47,中文,,0,0,0,,现在 这个并不适用于逆或反向
Dialogue: 0,0:30:53.47,0:30:57.05,英文,,0,0,0,,If you have the same hash code, two things aren't necessarily the same thing.
Dialogue: 0,0:30:53.47,0:30:57.05,中文,,0,0,0,,如果你有相同的哈希码 两个东西并不一定是相同的
Dialogue: 0,0:30:57.05,0:30:59.35,英文,,0,0,0,,There's only so many hash codes in existence.
Dialogue: 0,0:30:57.05,0:30:59.35,中文,,0,0,0,,现有的哈希码是有限的
Dialogue: 0,0:30:59.35,0:31:04.01,英文,,0,0,0,,You can have multiple strings that yield the same hash code, for example.
Dialogue: 0,0:30:59.35,0:31:04.01,中文,,0,0,0,,你可以有多个字符串产生相同的哈希码 例如
Dialogue: 0,0:31:04.01,0:31:08.37,英文,,0,0,0,,But that doesn't mean that the opposite doesn't hold.
Dialogue: 0,0:31:04.01,0:31:08.37,中文,,0,0,0,,但这并不意味着相反的情况不成立
Dialogue: 0,0:31:08.37,0:31:11.77,英文,,0,0,0,,If two things are the same thing, then they should have the same hash code.
Dialogue: 0,0:31:08.37,0:31:11.77,中文,,0,0,0,,如果两个东西是同一件事 那么它们应该有相同的哈希码
Dialogue: 0,0:31:11.77,0:31:18.70,英文,,0,0,0,,If two things have the same hash code, they may have different equality.
Dialogue: 0,0:31:11.77,0:31:18.70,中文,,0,0,0,,如果两个东西有相同的哈希码 它们可能具有不同的相等性
Dialogue: 0,0:31:18.70,0:31:30.28,英文,,0,0,0,,It's like how two people can have the same name, but one person generally does not have two different names at any one time.
Dialogue: 0,0:31:18.70,0:31:30.28,中文,,0,0,0,,就像两个人可以有相同的名字 但一个人通常不会同时有两个不同的名字
Dialogue: 0,0:31:30.28,0:31:37.62,英文,,0,0,0,,So let's suppose that we have the same equals method, but we don't override the hash code.
Dialogue: 0,0:31:30.28,0:31:37.62,中文,,0,0,0,,假设我们有相同的 equals 方法 但我们没有重写哈希码
Dialogue: 0,0:31:37.62,0:31:43.55,英文,,0,0,0,,We just leave the hash code as the default memory address.
Dialogue: 0,0:31:37.62,0:31:43.55,中文,,0,0,0,,我们只是将哈希码保留为默认的内存地址
Dialogue: 0,0:31:43.55,0:31:48.58,英文,,0,0,0,,What do you think can happen when we call add zero?
Dialogue: 0,0:31:43.55,0:31:48.58,中文,,0,0,0,,当我们调用add zero时 你觉得会发生什么
Dialogue: 0,0:31:48.58,0:31:52.36,英文,,0,0,0,,How many people say that A can happen?
Dialogue: 0,0:31:48.58,0:31:52.36,中文,,0,0,0,,有多少人说A可能会发生
Dialogue: 0,0:31:52.36,0:31:55.52,英文,,0,0,0,,We add another 0 to bin 0.
Dialogue: 0,0:31:52.36,0:31:55.52,中文,,0,0,0,,我们在bin 0中再加一个0
Dialogue: 0,0:31:55.52,0:31:58.51,英文,,0,0,0,,Is it possible for this to happen?
Dialogue: 0,0:31:55.52,0:31:58.51,中文,,0,0,0,,这种情况可能发生吗
Dialogue: 0,0:31:58.51,0:32:02.35,英文,,0,0,0,,There are multiple choices here, so you can pick multiple of these items.
Dialogue: 0,0:31:58.51,0:32:02.35,中文,,0,0,0,,这里有多个选择 所以你可以选择其中多项
Dialogue: 0,0:32:02.35,0:32:07.53,英文,,0,0,0,,So how many people think that it is possible for A to happen in some cases?
Dialogue: 0,0:32:02.35,0:32:07.53,中文,,0,0,0,,那么有多少人认为在某些情况下A是可能发生的
Dialogue: 0,0:32:07.53,0:32:08.31,英文,,0,0,0,,All right.
Dialogue: 0,0:32:08.31,0:32:12.16,英文,,0,0,0,,I think the consensus is a lot of people.
Dialogue: 0,0:32:08.31,0:32:12.16,中文,,0,0,0,,我觉得共识是很多人
Dialogue: 0,0:32:12.16,0:32:16.69,英文,,0,0,0,,Can it add a 0 to bin 1?
Dialogue: 0,0:32:12.16,0:32:16.69,中文,,0,0,0,,它可以在bin 1上加一个0吗
Dialogue: 0,0:32:16.69,0:32:17.95,英文,,0,0,0,,One person?
Dialogue: 0,0:32:16.69,0:32:17.95,中文,,0,0,0,,一个人吗
Dialogue: 0,0:32:17.95,0:32:20.53,英文,,0,0,0,,Can we add a 0 to some other bin?
Dialogue: 0,0:32:17.95,0:32:20.53,中文,,0,0,0,,我们能在其他一些箱子里加一个0吗
Dialogue: 0,0:32:20.53,0:32:25.74,英文,,0,0,0,,A few people.
Dialogue: 0,0:32:20.53,0:32:25.74,中文,,0,0,0,,几个人
Dialogue: 0,0:32:25.74,0:32:29.20,英文,,0,0,0,,How about just not getting another duplicate 0?
Dialogue: 0,0:32:25.74,0:32:29.20,中文,,0,0,0,,怎么样 就不要再得到另一个重复的0了
Dialogue: 0,0:32:29.20,0:32:31.86,英文,,0,0,0,,Is that possible?
Dialogue: 0,0:32:29.20,0:32:31.86,中文,,0,0,0,,那可能吗
Dialogue: 0,0:32:31.86,0:32:32.58,英文,,0,0,0,,Yeah.
Dialogue: 0,0:32:31.86,0:32:32.58,中文,,0,0,0,,是的
Dialogue: 0,0:32:32.58,0:32:37.98,英文,,0,0,0,,Feels like a lot of people are saying A, C, and D. Not many people said B.
Dialogue: 0,0:32:32.58,0:32:37.98,中文,,0,0,0,,感觉好多人都在说A、C和D 没多少人说B
Dialogue: 0,0:32:37.98,0:32:39.80,英文,,0,0,0,,Yep, that's effectively right.
Dialogue: 0,0:32:37.98,0:32:39.80,中文,,0,0,0,,嗯 那就是有效的对
Dialogue: 0,0:32:39.80,0:32:44.09,英文,,0,0,0,,It really depends on what the value of the hash code of 0 is.
Dialogue: 0,0:32:39.80,0:32:44.09,中文,,0,0,0,,这实际上取决于哈希码为0的值是什么
Dialogue: 0,0:32:44.09,0:32:49.01,英文,,0,0,0,,If it's 0 mod 6 or 2 through 5 mod 6, then it'll look in that bin.
Dialogue: 0,0:32:44.09,0:32:49.01,中文,,0,0,0,,如果它是0模6或2到5模6 那么它就会查找那个存储桶
Dialogue: 0,0:32:49.01,0:32:51.91,英文,,0,0,0,,It'll try to add it there to see if there's anything in there.
Dialogue: 0,0:32:49.01,0:32:51.91,中文,,0,0,0,,它会试着把它添加到那里 看看那里有没有东西
Dialogue: 0,0:32:51.91,0:32:55.28,英文,,0,0,0,,It won't find another 0, so it'll decide to add it.
Dialogue: 0,0:32:51.91,0:32:55.28,中文,,0,0,0,,它找不到另一个0 所以它决定把它添加进去
Dialogue: 0,0:32:55.28,0:33:02.16,英文,,0,0,0,,But if it goes into bin 1, then it'll get lucky, and it'll see the 0 already there.
Dialogue: 0,0:32:55.28,0:33:02.16,中文,,0,0,0,,但如果它进入箱子1 那么它会很幸运 会发现那里已经有一个0了
Dialogue: 0,0:33:02.16,0:33:03.78,英文,,0,0,0,,So it's not going to add anything.
Dialogue: 0,0:33:02.16,0:33:03.78,中文,,0,0,0,,因此 它不会添加任何东西
Dialogue: 0,0:33:03.78,0:33:12.43,英文,,0,0,0,,So we're never going to add to bin 1, but that's how we're going to get no duplicate zeros.
Dialogue: 0,0:33:03.78,0:33:12.43,中文,,0,0,0,,我们永远不会向箱子1添加东西 但这就是我们如何确保不会有重复的0
Dialogue: 0,0:33:12.43,0:33:14.91,英文,,0,0,0,,So there's a 1 in 6 chance that we get no duplicates.
Dialogue: 0,0:33:12.43,0:33:14.91,中文,,0,0,0,,我们有1/6的几率不会有重复
Dialogue: 0,0:33:14.91,0:33:20.85,英文,,0,0,0,,There's a 5 in 6 chance that we end up getting a duplicate.
Dialogue: 0,0:33:14.91,0:33:20.85,中文,,0,0,0,,有5/6的几率我们会得到一个重复
Dialogue: 0,0:33:20.85,0:33:26.87,英文,,0,0,0,,So if this statement is not true,
Dialogue: 0,0:33:20.85,0:33:26.87,中文,,0,0,0,,因此 如果这个声明不成立
Dialogue: 0,0:33:26.87,0:33:30.17,英文,,0,0,0,,Your contains op function isn't going to be able to find things.
Dialogue: 0,0:33:26.87,0:33:30.17,中文,,0,0,0,,你的contains 函数将无法找到东西
Dialogue: 0,0:33:30.17,0:33:33.43,英文,,0,0,0,,And your add is going to end up resulting in duplicate values.
Dialogue: 0,0:33:30.17,0:33:33.43,中文,,0,0,0,,而且你的添加最终会导致重复的值
Dialogue: 0,0:33:33.43,0:33:37.27,英文,,0,0,0,,In fact, we can take a look here.
Dialogue: 0,0:33:33.43,0:33:37.27,中文,,0,0,0,,事实上 我们可以在这里看一看
Dialogue: 0,0:33:37.27,0:33:59.02,英文,,0,0,0,,If I go back to my hash table visualizer, and instead of adding the number i, I add the number 0 every single time.
Dialogue: 0,0:33:37.27,0:33:59.02,中文,,0,0,0,,如果我回到我的哈希表可视化器 而不是每次添加数字i 我添加数字0
Dialogue: 0,0:33:59.02,0:34:08.78,英文,,0,0,0,,But I take my color number, and I just ignore this.
Dialogue: 0,0:33:59.02,0:34:08.78,中文,,0,0,0,,但是我拿我的颜色号 我只是忽略这个
Dialogue: 0,0:34:08.78,0:34:14.14,英文,,0,0,0,,Then we should end up seeing this behavior.
Dialogue: 0,0:34:08.78,0:34:14.14,中文,,0,0,0,,然后我们应该看到这种行为
Dialogue: 0,0:34:14.14,0:34:15.64,英文,,0,0,0,,What do you think will happen if I do this?
Dialogue: 0,0:34:14.14,0:34:15.64,中文,,0,0,0,,你觉得我这样做会发生什么
Dialogue: 0,0:34:15.64,0:34:18.44,英文,,0,0,0,,We're going to be adding zeros over and over.
Dialogue: 0,0:34:15.64,0:34:18.44,中文,,0,0,0,,我们将一遍又一遍地添加零
Dialogue: 0,0:34:18.44,0:34:23.00,英文,,0,0,0,,Right now, the equality check has changed so that numerical values are the same.
Dialogue: 0,0:34:18.44,0:34:23.00,中文,,0,0,0,,现在 等式检查已经改变 使得数值相同
Dialogue: 0,0:34:23.00,0:34:27.83,英文,,0,0,0,,But each bin is going to be a different thing.
Dialogue: 0,0:34:23.00,0:34:27.83,中文,,0,0,0,,但每个箱子都会是不同的东西
Dialogue: 0,0:34:27.83,0:34:36.04,英文,,0,0,0,,And right now, I've set the resize factor so high that it's never going to resize.
Dialogue: 0,0:34:27.83,0:34:36.04,中文,,0,0,0,,而且现在 我已经将调整因子设置得很高 它永远不会调整大小
Dialogue: 0,0:34:36.04,0:34:42.26,英文,,0,0,0,,Any suggestions?
Dialogue: 0,0:34:36.04,0:34:42.26,中文,,0,0,0,,有什么建议吗
Dialogue: 0,0:34:42.26,0:34:44.90,英文,,0,0,0,,Well, let's see.
Dialogue: 0,0:34:42.26,0:34:44.90,中文,,0,0,0,,嗯 让我们看看
Dialogue: 0,0:34:44.90,0:34:49.91,英文,,0,0,0,,If we run this, then we get some zeros here and there.
Dialogue: 0,0:34:44.90,0:34:49.91,中文,,0,0,0,,如果我们运行这个 那么我们会得到一些零点在这里和那里
Dialogue: 0,0:34:49.91,0:34:53.45,英文,,0,0,0,,You can see the color changing every now and then when it gets updated.
Dialogue: 0,0:34:49.91,0:34:53.45,中文,,0,0,0,,当它被更新时 你可以看到颜色不时地改变
Dialogue: 0,0:34:53.45,0:34:56.82,英文,,0,0,0,,But eventually, it just stops adding things.
Dialogue: 0,0:34:53.45,0:34:56.82,中文,,0,0,0,,但最终 它就停止添加东西了
Dialogue: 0,0:34:56.82,0:35:00.06,英文,,0,0,0,,Eventually, it runs out of slots to fill zeros in.
Dialogue: 0,0:34:56.82,0:35:00.06,中文,,0,0,0,,最终 它用完了插槽来填充零
Dialogue: 0,0:35:00.06,0:35:07.39,英文,,0,0,0,,And from then on, there's no new items to put in, because every single bin is going to already have a zero.
Dialogue: 0,0:35:00.06,0:35:07.39,中文,,0,0,0,,从那时起 就没有新的项目可以放进去了 因为每个箱子里都已经有一个零了
Dialogue: 0,0:35:07.39,0:35:20.88,英文,,0,0,0,,Now, if I enable resizing, let's say, name me a resize factor somewhere between, let's say, somewhere less than 1 and greater than 0.5.
Dialogue: 0,0:35:07.39,0:35:20.88,中文,,0,0,0,,现在 如果我启用调整大小 比如说 给我一个调整大小因子 介于 比如说 小于1但大于0.5之间
Dialogue: 0,0:35:20.88,0:35:20.92,英文,,0,0,0,,0.75.
Dialogue: 0,0:35:20.88,0:35:20.92,中文,,0,0,0,,0.75
Dialogue: 0,0:35:20.92,0:35:27.52,英文,,0,0,0,,Great.
Dialogue: 0,0:35:20.92,0:35:27.52,中文,,0,0,0,,太好了
Dialogue: 0,0:35:27.52,0:35:33.84,英文,,0,0,0,,If we run this, then now it goes everywhere.
Dialogue: 0,0:35:27.52,0:35:33.84,中文,,0,0,0,,如果我们运行这个 那么现在它就无处不在
Dialogue: 0,0:35:33.84,0:35:39.17,英文,,0,0,0,,And here we can see that a lot of these items are in completely different slots.
Dialogue: 0,0:35:33.84,0:35:39.17,中文,,0,0,0,,这里我们可以看到很多这些项目完全在不同的插槽中
Dialogue: 0,0:35:39.17,0:36:01.90,英文,,0,0,0,,In fact, if I increase this to 20,000 items and run this, we can see that a lot of these slots just end up missing entirely.
Dialogue: 0,0:35:39.17,0:36:01.90,中文,,0,0,0,,实际上 如果我将这个增加到20,000个项目并运行它 我们可以看到很多这些插槽最终完全消失了
Dialogue: 0,0:36:01.90,0:36:05.30,英文,,0,0,0,,I'm going to stop this.
Dialogue: 0,0:36:01.90,0:36:05.30,中文,,0,0,0,,我要停止这个
Dialogue: 0,0:36:05.30,0:36:08.94,英文,,0,0,0,,So yeah, you can see that you end up getting a zero in every single bin.
Dialogue: 0,0:36:05.30,0:36:08.94,中文,,0,0,0,,你可以看到你最终在每个箱子里都得到了零
Dialogue: 0,0:36:08.94,0:36:17.03,英文,,0,0,0,,And because we keep resizing when we get a lot of items, the number of bins just keeps growing larger.
Dialogue: 0,0:36:08.94,0:36:17.03,中文,,0,0,0,,而且因为我们在得到很多项目时不断调整大小 箱子的数量只会变得更大
Dialogue: 0,0:36:17.03,0:36:24.93,英文,,0,0,0,,Now, there's one other problem with using hash tables.
Dialogue: 0,0:36:17.03,0:36:24.93,中文,,0,0,0,,现在 使用哈希表还有一个问题
Dialogue: 0,0:36:24.93,0:36:27.17,英文,,0,0,0,,You don't need to just worry about equality checks.
Dialogue: 0,0:36:24.93,0:36:27.17,中文,,0,0,0,,你不仅需要担心相等性检查
Dialogue: 0,0:36:27.17,0:36:29.72,英文,,0,0,0,,You also need to worry about mutability.
Dialogue: 0,0:36:27.17,0:36:29.72,中文,,0,0,0,,你也需要担心可变性
Dialogue: 0,0:36:29.72,0:36:36.71,英文,,0,0,0,,So before we get into what's the issue of mutability, let's first talk about what is mutability.
Dialogue: 0,0:36:29.72,0:36:36.71,中文,,0,0,0,,在我们讨论可变性的问题之前 让我们先谈谈什么是可变性
Dialogue: 0,0:36:36.71,0:36:44.45,英文,,0,0,0,,So in general, an immutable data type is one which cannot change once it's being created.
Dialogue: 0,0:36:36.71,0:36:44.45,中文,,0,0,0,,通常 不可变数据类型是指一旦创建就无法更改的数据类型
Dialogue: 0,0:36:44.45,0:36:49.09,英文,,0,0,0,,So things that can change from an external perspective, those are considered mutable.
Dialogue: 0,0:36:44.45,0:36:49.09,中文,,0,0,0,,从外部角度看可以改变的东西被认为是可变的
Dialogue: 0,0:36:49.09,0:36:52.81,英文,,0,0,0,,These are things like your array deck or the percolation object you created.
Dialogue: 0,0:36:49.09,0:36:52.81,中文,,0,0,0,,这些东西像是你的数组 deck 或者你创建的渗透对象
Dialogue: 0,0:36:52.81,0:37:06.59,英文,,0,0,0,,If someone else external to the class took a look inside that and tried interpreting its values, then it would notice that something's changed with the internal structure, or it can potentially notice.
Dialogue: 0,0:36:52.81,0:37:06.59,中文,,0,0,0,,如果外部的某人查看并尝试解释其值 那么它会注意到内部结构发生了变化 或者有可能注意到
Dialogue: 0,0:37:06.59,0:37:09.65,英文,,0,0,0,,Things that are immutable are things like the integer class.
Dialogue: 0,0:37:06.59,0:37:09.65,中文,,0,0,0,,不可变的东西 例如整数类
Dialogue: 0,0:37:09.65,0:37:15.40,英文,,0,0,0,,If you create an integer, it'll stay as that numeric value regardless of what you change.
Dialogue: 0,0:37:09.65,0:37:15.40,中文,,0,0,0,,如果你创建一个整数 它将保持那个数字值 无论你改变什么
Dialogue: 0,0:37:15.40,0:37:21.98,英文,,0,0,0,,The string class, when you create a new string by adding together two strings, for example, that actually creates an entirely new string object.
Dialogue: 0,0:37:15.40,0:37:21.98,中文,,0,0,0,,当你通过将两个字符串相加来创建一个新的字符串时 例如 实际上创建了一个全新的字符串对象
Dialogue: 0,0:37:21.98,0:37:25.34,英文,,0,0,0,,It doesn't change the two internal strings.
Dialogue: 0,0:37:21.98,0:37:25.34,中文,,0,0,0,,它不会改变这两个内部字符串
Dialogue: 0,0:37:25.34,0:37:33.37,英文,,0,0,0,,This date object over here is considered immutable because every single component here is either considered public
Dialogue: 0,0:37:25.34,0:37:33.37,中文,,0,0,0,,这个日期对象在这里被认为是不可变的 因为这里的每个组件都被认为是公共的
Dialogue: 0,0:37:33.37,0:37:35.23,英文,,0,0,0,,It's either considered final.
Dialogue: 0,0:37:33.37,0:37:35.23,中文,,0,0,0,,它要么被认为是最终的
Dialogue: 0,0:37:35.23,0:37:37.25,英文,,0,0,0,,Final means that you're not allowed to change it.
Dialogue: 0,0:37:35.23,0:37:37.25,中文,,0,0,0,,最终意味着你不能改变它
Dialogue: 0,0:37:37.25,0:37:40.83,英文,,0,0,0,,So these month, day, and year, these can't change.
Dialogue: 0,0:37:37.25,0:37:40.83,中文,,0,0,0,,这些月、日和年 这些都不能改变
Dialogue: 0,0:37:40.83,0:37:49.40,英文,,0,0,0,,And this thing is private, which means that I can't change this value from an external perspective either.
Dialogue: 0,0:37:40.83,0:37:49.40,中文,,0,0,0,,而且这个东西是私有的 这意味着我从外部视角也不能改变这个值
Dialogue: 0,0:37:49.40,0:37:56.90,英文,,0,0,0,,It's impossible for someone external to change the contrived variable because they don't know it exists.
Dialogue: 0,0:37:49.40,0:37:56.90,中文,,0,0,0,,外部的人无法改变这个虚构的变量 因为他们不知道它的存在
Dialogue: 0,0:37:56.90,0:38:01.78,英文,,0,0,0,,So because all of these components are
Dialogue: 0,0:37:56.90,0:38:01.78,中文,,0,0,0,,因为所有这些组件都是
Dialogue: 0,0:38:01.78,0:38:07.51,英文,,0,0,0,,This entire date object itself becomes immutable.
Dialogue: 0,0:38:01.78,0:38:07.51,中文,,0,0,0,,这整个日期对象本身变成了不可变的
Dialogue: 0,0:38:07.51,0:38:09.87,英文,,0,0,0,,So let's take a quick example.
Dialogue: 0,0:38:07.51,0:38:09.87,中文,,0,0,0,,让我们举个快速的例子
Dialogue: 0,0:38:09.87,0:38:13.39,英文,,0,0,0,,Which of the following things are immutable?
Dialogue: 0,0:38:09.87,0:38:13.39,中文,,0,0,0,,以下哪些东西是不可变的
Dialogue: 0,0:38:13.39,0:38:18.43,英文,,0,0,0,,So how many people think the pebble is immutable?
Dialogue: 0,0:38:13.39,0:38:18.43,中文,,0,0,0,,那么有多少人认为这块鹅卵石是不可变的
Dialogue: 0,0:38:18.43,0:38:21.44,英文,,0,0,0,,How many people think it is mutable?
Dialogue: 0,0:38:18.43,0:38:21.44,中文,,0,0,0,,有多少人认为它是可变的?
Dialogue: 0,0:38:21.44,0:38:22.84,英文,,0,0,0,,It can be changed.
Dialogue: 0,0:38:21.44,0:38:22.84,中文,,0,0,0,,它可以被改变
Dialogue: 0,0:38:22.84,0:38:31.61,英文,,0,0,0,,All right, how do you change it?
Dialogue: 0,0:38:22.84,0:38:31.61,中文,,0,0,0,,你怎么改变它?
Dialogue: 0,0:38:31.61,0:38:36.59,英文,,0,0,0,,Yeah.
Dialogue: 0,0:38:36.59,0:38:38.24,英文,,0,0,0,,Yeah.
Dialogue: 0,0:38:38.24,0:38:41.88,英文,,0,0,0,,The weight variable is public, so I can just change the weight variable into a 2.
Dialogue: 0,0:38:38.24,0:38:41.88,中文,,0,0,0,,weight变量是公开的 所以我可以直接把weight变量改成2
Dialogue: 0,0:38:41.88,0:38:45.60,英文,,0,0,0,,All right.
Dialogue: 0,0:38:45.60,0:38:47.44,英文,,0,0,0,,What about the rock?
Dialogue: 0,0:38:45.60,0:38:47.44,中文,,0,0,0,,岩石怎么样
Dialogue: 0,0:38:47.44,0:38:50.58,英文,,0,0,0,,How many people think this is immutable?
Dialogue: 0,0:38:47.44,0:38:50.58,中文,,0,0,0,,有多少人认为这是不可变的
Dialogue: 0,0:38:50.58,0:38:51.92,英文,,0,0,0,,Most people?
Dialogue: 0,0:38:50.58,0:38:51.92,中文,,0,0,0,,大多数人
Dialogue: 0,0:38:51.92,0:38:53.10,英文,,0,0,0,,Yep.
Dialogue: 0,0:38:51.92,0:38:53.10,中文,,0,0,0,,是的
Dialogue: 0,0:38:53.10,0:38:55.38,英文,,0,0,0,,And it's immutable because this is now final.
Dialogue: 0,0:38:53.10,0:38:55.38,中文,,0,0,0,,而且它是不可变的 因为现在这是最终的
Dialogue: 0,0:38:55.38,0:38:58.42,英文,,0,0,0,,If you try to change it, it's not going to be allowed.
Dialogue: 0,0:38:55.38,0:38:58.42,中文,,0,0,0,,如果你试图改变它 是不允许的
Dialogue: 0,0:38:58.42,0:39:02.08,英文,,0,0,0,,Now, there is some special reflections library that lets you bypass all of this.
Dialogue: 0,0:38:58.42,0:39:02.08,中文,,0,0,0,,现在 有一些特殊的反射库可以让你绕过所有这些
Dialogue: 0,0:39:02.08,0:39:03.78,英文,,0,0,0,,We're not going to care about that.
Dialogue: 0,0:39:02.08,0:39:03.78,中文,,0,0,0,,我们不会在意那个
Dialogue: 0,0:39:03.78,0:39:07.40,英文,,0,0,0,,We're going to pretend that doesn't exist.
Dialogue: 0,0:39:03.78,0:39:07.40,中文,,0,0,0,,我们会假装那不存在
Dialogue: 0,0:39:07.40,0:39:12.32,英文,,0,0,0,,All right, what about this rocks box object?
Dialogue: 0,0:39:07.40,0:39:12.32,中文,,0,0,0,,这个 rocks 盒对象呢
Dialogue: 0,0:39:12.32,0:39:15.04,英文,,0,0,0,,How many people think this is immutable?
Dialogue: 0,0:39:12.32,0:39:15.04,中文,,0,0,0,,有多少人认为这是不可变的
Dialogue: 0,0:39:15.04,0:39:17.84,英文,,0,0,0,,How many people think it's mutable?
Dialogue: 0,0:39:15.04,0:39:17.84,中文,,0,0,0,,有多少人认为它是可变的
Dialogue: 0,0:39:17.84,0:39:23.55,英文,,0,0,0,,All right, kind of iffy on this one.
Dialogue: 0,0:39:17.84,0:39:23.55,中文,,0,0,0,,对这个有点犹豫
Dialogue: 0,0:39:23.55,0:39:29.39,英文,,0,0,0,,Well, here's how we can mutate this.
Dialogue: 0,0:39:23.55,0:39:29.39,中文,,0,0,0,,嗯 这是我们如何改变它的方式
Dialogue: 0,0:39:29.39,0:39:36.47,英文,,0,0,0,,If we take this rocks, we can make this external rocks object itself.
Dialogue: 0,0:39:29.39,0:39:36.47,中文,,0,0,0,,如果我们拿这些岩石 我们可以制作这个外部岩石对象本身
Dialogue: 0,0:39:36.47,0:39:39.28,英文,,0,0,0,,And we can keep this reference somewhere out here.
Dialogue: 0,0:39:36.47,0:39:39.28,中文,,0,0,0,,而且我们可以把这个引用放在外面某个地方
Dialogue: 0,0:39:39.28,0:39:43.98,英文,,0,0,0,,And we can create a rocks box directly here.
Dialogue: 0,0:39:39.28,0:39:43.98,中文,,0,0,0,,而且我们可以直接在这里创建一个岩石盒子
Dialogue: 0,0:39:43.98,0:39:54.53,英文,,0,0,0,,So now the rocks object inside the rocks box, the RB value, is set to this rocks thing.
Dialogue: 0,0:39:43.98,0:39:54.53,中文,,0,0,0,,现在岩石盒子内部的岩石对象 即RB值 被设置为这个岩石物体
Dialogue: 0,0:39:54.53,0:40:05.75,英文,,0,0,0,,Using some array index and a pre-existing pointer to it, I can change rocks 1 into a different value entirely.
Dialogue: 0,0:39:54.53,0:40:05.75,中文,,0,0,0,,使用一些数组索引和一个预先存在的指针 我可以将岩石1完全改变为另一个值
Dialogue: 0,0:40:05.75,0:40:09.10,英文,,0,0,0,,And using this, I'm going to be able to modify it.
Dialogue: 0,0:40:05.75,0:40:09.10,中文,,0,0,0,,并且使用这个 我将能够修改它
Dialogue: 0,0:40:09.10,0:40:12.38,英文,,0,0,0,,I'm not changing the attribute rocks itself.
Dialogue: 0,0:40:09.10,0:40:12.38,中文,,0,0,0,,我并没有改变岩石本身的属性
Dialogue: 0,0:40:12.38,0:40:14.62,英文,,0,0,0,,I'm changing the stuff inside the rocks.
Dialogue: 0,0:40:12.38,0:40:14.62,中文,,0,0,0,,我正在更改岩石内部的内容
Dialogue: 0,0:40:14.62,0:40:20.12,英文,,0,0,0,,And that doesn't actually get checked by the final Modifier.
Dialogue: 0,0:40:14.62,0:40:20.12,中文,,0,0,0,,而且最终不会检查这个修饰符
Dialogue: 0,0:40:20.12,0:40:27.20,英文,,0,0,0,,It's not going to end up catching this, because the rocks array pointer itself isn't changing.
Dialogue: 0,0:40:20.12,0:40:27.20,中文,,0,0,0,,它不会捕捉到这个 因为岩石数组指针本身并没有改变
Dialogue: 0,0:40:27.20,0:40:30.77,英文,,0,0,0,,Only the items within the pointer get changed.
Dialogue: 0,0:40:27.20,0:40:30.77,中文,,0,0,0,,只有指针内的项目会被更改
Dialogue: 0,0:40:30.77,0:40:34.07,英文,,0,0,0,,So because of that, this is going to not be immutable.
Dialogue: 0,0:40:30.77,0:40:34.07,中文,,0,0,0,,因为这个原因 这将不是不可变的
Dialogue: 0,0:40:34.07,0:40:37.33,英文,,0,0,0,,This is immutable.
Dialogue: 0,0:40:34.07,0:40:37.33,中文,,0,0,0,,这是不可变的
Dialogue: 0,0:40:37.33,0:40:38.57,英文,,0,0,0,,What about this last one?
Dialogue: 0,0:40:37.33,0:40:38.57,中文,,0,0,0,,最后一个呢
Dialogue: 0,0:40:38.57,0:40:43.25,英文,,0,0,0,,Instead of setting it up to be public final, I set this to be private.
Dialogue: 0,0:40:38.57,0:40:43.25,中文,,0,0,0,,我把它设置为私有的 而不是设置为公共的最终版本
Dialogue: 0,0:40:43.25,0:40:46.62,英文,,0,0,0,,How many people think this is immutable?
Dialogue: 0,0:40:43.25,0:40:46.62,中文,,0,0,0,,有多少人认为这是不可变的
Dialogue: 0,0:40:46.62,0:40:49.65,英文,,0,0,0,,How many people think it's immutable?
Dialogue: 0,0:40:46.62,0:40:49.65,中文,,0,0,0,,有多少人认为它是不可变的
Dialogue: 0,0:40:49.65,0:40:52.51,英文,,0,0,0,,All right, a lot of people are saying it's immutable.
Dialogue: 0,0:40:49.65,0:40:52.51,中文,,0,0,0,,很多人说它是不可变的
Dialogue: 0,0:40:52.51,0:40:56.39,英文,,0,0,0,,This is still mutable.
Dialogue: 0,0:40:52.51,0:40:56.39,中文,,0,0,0,,这仍然是可变的
Dialogue: 0,0:40:56.39,0:41:01.01,英文,,0,0,0,,You have to be really careful with mutability, because even this is still considered mutable.
Dialogue: 0,0:40:56.39,0:41:01.01,中文,,0,0,0,,你必须非常小心处理可变性 因为即使这个也被认为是可变的
Dialogue: 0,0:41:01.01,0:41:02.07,英文,,0,0,0,,Why?
Dialogue: 0,0:41:01.01,0:41:02.07,中文,,0,0,0,,为什么
Dialogue: 0,0:41:02.07,0:41:09.58,英文,,0,0,0,,Because someone else might have decided to create this rocks object and store a copy of its pointer somewhere else.
Dialogue: 0,0:41:02.07,0:41:09.58,中文,,0,0,0,,因为其他人可能已经决定创建这个 rocks 对象并将其指针的副本存储在其他地方
Dialogue: 0,0:41:09.58,0:41:15.94,英文,,0,0,0,,And if someone has that copy of the pointer, then they can change the rocks array directly.
Dialogue: 0,0:41:09.58,0:41:15.94,中文,,0,0,0,,如果有人拥有指针的副本 那么他们可以直接更改 rocks 数组
Dialogue: 0,0:41:15.94,0:41:20.90,英文,,0,0,0,,Like if I created this rocks object with R1 and R2,
Dialogue: 0,0:41:15.94,0:41:20.90,中文,,0,0,0,,就像如果我用 r1 和 r2 创建了这个 rocks 对象
Dialogue: 0,0:41:20.90,0:41:24.40,英文,,0,0,0,,And I sent in this to the secret rocks box.
Dialogue: 0,0:41:20.90,0:41:24.40,中文,,0,0,0,,并且我将其发送到秘密 rocks 盒子中
Dialogue: 0,0:41:24.40,0:41:33.95,英文,,0,0,0,,I can't change the internal rocks variable here, but I can change my copy of rocks, which just happens to be linked exactly with the rocks copy over here.
Dialogue: 0,0:41:24.40,0:41:33.95,中文,,0,0,0,,我不能在这里更改内部的 rocks 变量 但我可以更改我的 rocks 副本 它恰好与此处的 rocks 副本链接在一起
Dialogue: 0,0:41:33.95,0:41:41.15,英文,,0,0,0,,Yeah.
Dialogue: 0,0:41:41.15,0:41:42.19,英文,,0,0,0,,Yeah.
Dialogue: 0,0:41:42.19,0:41:52.54,英文,,0,0,0,,I'm not changing the pointer to the memory address, but I am changing something about how the secret rocks box might behave in the future.
Dialogue: 0,0:41:42.19,0:41:52.54,中文,,0,0,0,,我不是改变指向内存地址 但我正在改变秘密岩盒可能在将来的行为上发生的某些事情
Dialogue: 0,0:41:52.54,0:42:03.90,英文,,0,0,0,,If, for example, this secret rocks box, what it needed to do was potentially output some data from its rocks class, then it's going to end up changing something.
Dialogue: 0,0:41:52.54,0:42:03.90,中文,,0,0,0,,例如 如果这个秘密的岩盒需要做的事情是潜在地从它的岩类中输出一些数据 那么它将最终会改变一些东西
Dialogue: 0,0:42:03.90,0:42:14.19,英文,,0,0,0,,Mutability means that anything internal to itself can change, even things that are not directly stored there, but things stored in the things stored there, and so on and so forth.
Dialogue: 0,0:42:03.90,0:42:14.19,中文,,0,0,0,,可变性意味着它内部的任何东西都可以改变 甚至是那些不直接存储在那里的东西 而是存储在那里的东西 依此类推
Dialogue: 0,0:42:14.19,0:42:24.19,英文,,0,0,0,,And the final thing only protects against that one layer, where you're not allowed to change something directly inside the object.
Dialogue: 0,0:42:14.19,0:42:24.19,中文,,0,0,0,,最后的东西只保护允许在对象内部直接更改的那一层
Dialogue: 0,0:42:24.19,0:42:30.05,英文,,0,0,0,,So out of these, this class rock was the only thing that actually was considered immutable.
Dialogue: 0,0:42:24.19,0:42:30.05,中文,,0,0,0,,因此 在这些中 这个类别的岩石是唯一被认为是不可变的东西
Dialogue: 0,0:42:30.05,0:42:31.79,英文,,0,0,0,,Everything else is considered immutable.
Dialogue: 0,0:42:30.05,0:42:31.79,中文,,0,0,0,,其他一切都被视为可变的
Dialogue: 0,0:42:31.79,0:42:41.91,英文,,0,0,0,,It's very difficult to make something immutable.
Dialogue: 0,0:42:31.79,0:42:41.91,中文,,0,0,0,,要使某物不可变是非常困难的
Dialogue: 0,0:42:41.91,0:42:49.46,英文,,0,0,0,,Now, how can we make this secret rocks box immutable?
Dialogue: 0,0:42:41.91,0:42:49.46,中文,,0,0,0,,现在 我们怎样才能使这个秘密的石头盒不可变呢
Dialogue: 0,0:42:49.46,0:42:58.99,英文,,0,0,0,,Well, the easiest way is to make sure that even if we change this rocks on the outside, it doesn't end up affecting the rocks object on the inside here.
Dialogue: 0,0:42:49.46,0:42:58.99,中文,,0,0,0,,嗯 最简单的方法就是确保即使我们改变了外面的石头 也不会影响到里面的石头对象
Dialogue: 0,0:42:58.99,0:43:02.33,英文,,0,0,0,,And the easiest way to do that is to make an array copy.
Dialogue: 0,0:42:58.99,0:43:02.33,中文,,0,0,0,,而这样做的最简单的方法就是制作一个数组的副本
Dialogue: 0,0:43:02.33,0:43:06.96,英文,,0,0,0,,So if we make a copy of the array, then that will ensure that it's immutable here.
Dialogue: 0,0:43:02.33,0:43:06.96,中文,,0,0,0,,如果我们复制了数组 那么这将确保它在这里是不可变的
Dialogue: 0,0:43:06.96,0:43:13.70,英文,,0,0,0,,That way, the secret rocks are not going to be changed even if we decide to change things.
Dialogue: 0,0:43:06.96,0:43:13.70,中文,,0,0,0,,这样 即使我们决定改变事物 秘密的石头也不会被改变
Dialogue: 0,0:43:13.70,0:43:17.72,英文,,0,0,0,,Now, this all relies on the fact that rock itself is considered immutable.
Dialogue: 0,0:43:13.70,0:43:17.72,中文,,0,0,0,,现在 这一切都依赖于石头本身被视为不可变的事实
Dialogue: 0,0:43:17.72,0:43:26.03,英文,,0,0,0,,If the rock was mutable itself, then we'd also need protections within the rock object itself to make sure that those don't get changed.
Dialogue: 0,0:43:17.72,0:43:26.03,中文,,0,0,0,,如果岩石本身是可变的 那么我们还需要在岩石对象内部设置保护 以确保这些不会被改变
Dialogue: 0,0:43:26.03,0:43:28.75,英文,,0,0,0,,So immutability is really rare.
Dialogue: 0,0:43:26.03,0:43:28.75,中文,,0,0,0,,不可变性真的很罕见
Dialogue: 0,0:43:28.75,0:43:34.67,英文,,0,0,0,,You need to be very careful to ensure that things are immutable.
Dialogue: 0,0:43:28.75,0:43:34.67,中文,,0,0,0,,你需要非常小心确保事物是不可变的
Dialogue: 0,0:43:34.67,0:43:39.96,英文,,0,0,0,,So the analogy we have here is that immutable classes have some buttons that you can press.
Dialogue: 0,0:43:34.67,0:43:39.96,中文,,0,0,0,,我们在这里的类比是不可变类有一些你可以按的按钮
Dialogue: 0,0:43:39.96,0:43:45.62,英文,,0,0,0,,You can play around with it, but you can't change anything inside it once you build it.
Dialogue: 0,0:43:39.96,0:43:45.62,中文,,0,0,0,,你可以玩弄它 但一旦构建完成 就不能在内部改变任何东西
Dialogue: 0,0:43:45.62,0:43:50.77,英文,,0,0,0,,So the disadvantage here is that you need to create a new object every time something changes.
Dialogue: 0,0:43:45.62,0:43:50.77,中文,,0,0,0,,这里的缺点是每次发生变化时都需要创建一个新对象
Dialogue: 0,0:43:50.77,0:43:53.59,英文,,0,0,0,,String concatenation is a really big example of this.
Dialogue: 0,0:43:50.77,0:43:53.59,中文,,0,0,0,,字符串连接是这的一个很大的例子
Dialogue: 0,0:43:53.59,0:44:02.82,英文,,0,0,0,,Just adding together a string one at a time is extremely slow, because it has to create this new string object every single time you add a new character to the end of it.
Dialogue: 0,0:43:53.59,0:44:02.82,中文,,0,0,0,,一次只是简单地将字符串相加是非常慢的 因为每次在末尾添加一个新字符时 它都必须创建这个新的字符串对象
Dialogue: 0,0:44:02.82,0:44:05.08,英文,,0,0,0,,That's why we suggest using a string builder.
Dialogue: 0,0:44:02.82,0:44:05.08,中文,,0,0,0,,这就是为什么我们建议使用字符串生成器的原因
Dialogue: 0,0:44:05.08,0:44:10.73,英文,,0,0,0,,It does something slightly fancier to make sure that it doesn't actually need to rebuild a string every single time.
Dialogue: 0,0:44:05.08,0:44:10.73,中文,,0,0,0,,它会稍微复杂一些 以确保它实际上不需要每次都重新构建一个字符串
Dialogue: 0,0:44:10.73,0:44:16.73,英文,,0,0,0,,And that actually saves a lot of runtime when you're trying to build a string one character at a time.
Dialogue: 0,0:44:10.73,0:44:16.73,中文,,0,0,0,,这实际上在尝试逐个字符构建字符串时节省了很多运行时间
Dialogue: 0,0:44:16.73,0:44:20.23,英文,,0,0,0,,Now, we've talked a lot about mutability.
Dialogue: 0,0:44:16.73,0:44:20.23,中文,,0,0,0,,现在 我们已经讨论了很多关于可变性的内容
Dialogue: 0,0:44:20.23,0:44:22.99,英文,,0,0,0,,Why is this important?
Dialogue: 0,0:44:20.23,0:44:22.99,中文,,0,0,0,,为什么这很重要呢
Dialogue: 0,0:44:22.99,0:44:30.59,英文,,0,0,0,,Well, let's see what happens if we try to build
Dialogue: 0,0:44:22.99,0:44:30.59,中文,,0,0,0,,好吧 让我们看看如果我们尝试构建时会发生什么
Dialogue: 0,0:44:30.59,0:44:40.41,英文,,0,0,0,,Let's try to see what happens when we build a hash table and we set it to run on lists of integers.
Dialogue: 0,0:44:30.59,0:44:40.41,中文,,0,0,0,,让我们试着看看当我们建立一个哈希表并将其设置为在整数列表上运行时会发生什么
Dialogue: 0,0:44:40.41,0:44:44.98,英文,,0,0,0,,A list integer is considered to be a mutable type.
Dialogue: 0,0:44:40.41,0:44:44.98,中文,,0,0,0,,一个整数列表被认为是一个可变类型
Dialogue: 0,0:44:44.98,0:44:48.38,英文,,0,0,0,,It can be changed by adding stuff or removing stuff.
Dialogue: 0,0:44:44.98,0:44:48.38,中文,,0,0,0,,它可以通过添加或删除内容来更改
Dialogue: 0,0:44:48.38,0:44:53.32,英文,,0,0,0,,And generally speaking, the hash code is some combination of the items inside it.
Dialogue: 0,0:44:48.38,0:44:53.32,中文,,0,0,0,,一般来说 哈希码是其中项的一些组合
Dialogue: 0,0:44:53.32,0:44:59.60,英文,,0,0,0,,The hash code of this is designed to work well with the equals operator.
Dialogue: 0,0:44:53.32,0:44:59.60,中文,,0,0,0,,这个哈希码的设计与等号操作符配合得很好
Dialogue: 0,0:44:59.60,0:45:04.87,英文,,0,0,0,,So if two lists are considered equal, they have the same elements in the same order, then they'll have the same hash code.
Dialogue: 0,0:44:59.60,0:45:04.87,中文,,0,0,0,,如果两个列表被认为是相等的 它们有相同的元素且顺序相同 那么它们将有相同的哈希码
Dialogue: 0,0:45:04.87,0:45:06.75,英文,,0,0,0,,It's also well distributed.
Dialogue: 0,0:45:04.87,0:45:06.75,中文,,0,0,0,,它也是良好分布的
Dialogue: 0,0:45:06.75,0:45:12.05,英文,,0,0,0,,And we'll be using these defaults, so these should be working.
Dialogue: 0,0:45:06.75,0:45:12.05,中文,,0,0,0,,我们将使用这些默认设置 它们应该有效
Dialogue: 0,0:45:12.05,0:45:17.19,英文,,0,0,0,,So we're going to add 0 and 1 to this items list, and then put it into our hash set.
Dialogue: 0,0:45:12.05,0:45:17.19,中文,,0,0,0,,我们将把0和1添加到这个列表中 然后放入我们的哈希集
Dialogue: 0,0:45:17.19,0:45:24.73,英文,,0,0,0,,We're going to add a completely random other list, and then we're going to change items to be something else.
Dialogue: 0,0:45:17.19,0:45:24.73,中文,,0,0,0,,我们将添加一个完全随机的其他列表 然后我们将更改items为其他内容
Dialogue: 0,0:45:24.73,0:45:29.58,英文,,0,0,0,,And if we do this,
Dialogue: 0,0:45:24.73,0:45:29.58,中文,,0,0,0,,如果我们这样做
Dialogue: 0,0:45:29.58,0:45:32.72,英文,,0,0,0,,then you'll notice something.
Dialogue: 0,0:45:29.58,0:45:32.72,中文,,0,0,0,,你会注意到一些事情
Dialogue: 0,0:45:32.72,0:45:39.18,英文,,0,0,0,,The original hash code was 962, but after we added the 7, we end up getting the number 29,829.
Dialogue: 0,0:45:32.72,0:45:39.18,中文,,0,0,0,,原始哈希码是962 但在我们添加了7之后 我们得到的数字是29,829
Dialogue: 0,0:45:39.18,0:45:46.75,英文,,0,0,0,,The hash code changes because the list itself ended up changing.
Dialogue: 0,0:45:39.18,0:45:46.75,中文,,0,0,0,,哈希码之所以改变 是因为列表本身发生了变化
Dialogue: 0,0:45:46.75,0:45:53.09,英文,,0,0,0,,What problems happen when we end up getting a different hash value here?
Dialogue: 0,0:45:46.75,0:45:53.09,中文,,0,0,0,,我们在这里得到不同的哈希值时会出现什么问题
Dialogue: 0,0:45:53.09,0:45:56.85,英文,,0,0,0,,Yeah?
Dialogue: 0,0:45:53.09,0:45:56.85,中文,,0,0,0,,是吗
Dialogue: 0,0:45:56.85,0:45:59.05,英文,,0,0,0,,Yeah, I'm looking in the wrong bin.
Dialogue: 0,0:45:56.85,0:45:59.05,中文,,0,0,0,,是的 我看错了箱子
Dialogue: 0,0:45:59.05,0:46:05.58,英文,,0,0,0,,All of a sudden, this number is a completely different number, which means that I've ended up looking in the wrong bin.
Dialogue: 0,0:45:59.05,0:46:05.58,中文,,0,0,0,,突然间 这个数字完全不同 这意味着我看错了箱子
Dialogue: 0,0:46:05.58,0:46:06.96,英文,,0,0,0,,I'm not going to be able to find the object.
Dialogue: 0,0:46:05.58,0:46:06.96,中文,,0,0,0,,我将无法找到这个对象
Dialogue: 0,0:46:06.96,0:46:08.66,英文,,0,0,0,,I end up losing the object.
Dialogue: 0,0:46:06.96,0:46:08.66,中文,,0,0,0,,我最终会丢失这个对象
Dialogue: 0,0:46:08.66,0:46:24.30,英文,,0,0,0,,In fact, that object effectively never gets removed or freed until we get to resize and put everything back in their proper bins.
Dialogue: 0,0:46:08.66,0:46:24.30,中文,,0,0,0,,事实上 直到我们调整大小并将所有东西放回正确的箱子中 该对象实际上都没有被移除或释放
Dialogue: 0,0:46:24.30,0:46:26.83,英文,,0,0,0,,So if we were to do this,
Dialogue: 0,0:46:24.30,0:46:26.83,中文,,0,0,0,,如果我们这样做的话,
Dialogue: 0,0:46:26.83,0:46:29.09,英文,,0,0,0,,We decided to add 0, 1.
Dialogue: 0,0:46:26.83,0:46:29.09,中文,,0,0,0,,我们决定添加0、1
Dialogue: 0,0:46:29.09,0:46:31.64,英文,,0,0,0,,We had the hash code here.
Dialogue: 0,0:46:29.09,0:46:31.64,中文,,0,0,0,,我们把哈希码放在这里
Dialogue: 0,0:46:31.64,0:46:36.96,英文,,0,0,0,,We added this to bucket 2.
Dialogue: 0,0:46:31.64,0:46:36.96,中文,,0,0,0,,我们把这个添加到桶2
Dialogue: 0,0:46:36.96,0:46:40.82,英文,,0,0,0,,But then we decided to change this 0, 1.
Dialogue: 0,0:46:36.96,0:46:40.82,中文,,0,0,0,,但后来我们决定改成0、1
Dialogue: 0,0:46:40.82,0:46:43.25,英文,,0,0,0,,We added a number 7 here.
Dialogue: 0,0:46:40.82,0:46:43.25,中文,,0,0,0,,我们在这里加了个数字7
Dialogue: 0,0:46:43.25,0:46:45.21,英文,,0,0,0,,Then the hash code ends up becoming 29,829.
Dialogue: 0,0:46:43.25,0:46:45.21,中文,,0,0,0,,然后哈希码最终变成了29,829
Dialogue: 0,0:46:45.21,0:46:57.02,英文,,0,0,0,,And it ends up checking to see if the number is in bin one being one is empty, so it's going to say no, there's no 1017 item in here.
Dialogue: 0,0:46:45.21,0:46:57.02,中文,,0,0,0,,最后它会检查一下数字是不是在bin one里 因为bin one是空的 它会说不 这里没有1017号项目
Dialogue: 0,0:46:57.02,0:47:01.65,英文,,0,0,0,,Despite the fact that there is, it's just in the wrong spot.
Dialogue: 0,0:46:57.02,0:47:01.65,中文,,0,0,0,,尽管事实上是有的 只是位置错了
Dialogue: 0,0:47:01.65,0:47:10.28,英文,,0,0,0,,So as a bottom line, if your hash table needs to use an object as a key, then that object cannot be mutable.
Dialogue: 0,0:47:01.65,0:47:10.28,中文,,0,0,0,,总的来说 如果你的哈希表需要使用对象作为键 那么这个对象不能是可变的
Dialogue: 0,0:47:10.28,0:47:17.14,英文,,0,0,0,,It must be an immutable object, because if it mutates, then the items get lost, and you can never retrieve them again.
Dialogue: 0,0:47:10.28,0:47:17.14,中文,,0,0,0,,它必须是一个不可变的对象 因为如果它变异了 那么项目就丢失了 你就再也无法检索到它们了
Dialogue: 0,0:47:17.14,0:47:24.16,英文,,0,0,0,,Yes?
Dialogue: 0,0:47:17.14,0:47:24.16,中文,,0,0,0,,是的
Dialogue: 0,0:47:24.16,0:47:29.85,英文,,0,0,0,,Is there a way for the compiler to stop the user from using a mutable type?
Dialogue: 0,0:47:24.16,0:47:29.85,中文,,0,0,0,,编译器是否有办法阻止用户使用可变类型
Dialogue: 0,0:47:29.85,0:47:36.93,英文,,0,0,0,,I don't think there is, because it can be very difficult to figure out if a type is mutable or not.
Dialogue: 0,0:47:29.85,0:47:36.93,中文,,0,0,0,,我认为没有 因为确定一个类型是否可变可能非常困难
Dialogue: 0,0:47:36.93,0:47:44.63,英文,,0,0,0,,We saw earlier, with the secret rock box example, it was very difficult to figure out that this thing was immutable.
Dialogue: 0,0:47:36.93,0:47:44.63,中文,,0,0,0,,在前面我们看到了 通过秘密的石头盒子例子 要弄清楚这个东西是不可变的非常困难
Dialogue: 0,0:47:44.63,0:47:56.96,英文,,0,0,0,,And it was only mutable because we had this random sequence of events, where if we had a copy of this pointer from earlier, then we needed to put this in here.
Dialogue: 0,0:47:44.63,0:47:56.96,中文,,0,0,0,,而且它之所以可变 仅仅是因为我们有了这个随机事件序列 如果我们从前面有了这个指针的副本 那么我们需要把它放在这里
Dialogue: 0,0:47:56.96,0:48:08.05,英文,,0,0,0,,And we can imagine that inside the secret rock box, this code here, there's some code that checks, like, if this random condition is true, then we just copy the pointer directly.
Dialogue: 0,0:47:56.96,0:48:08.05,中文,,0,0,0,,我们可以想象 在秘密的石头盒子里 这段代码里 有一些代码会检查 比如说 如果这个随机条件为真 那么我们就直接复制指针
Dialogue: 0,0:48:08.05,0:48:10.65,英文,,0,0,0,,Otherwise, we copy with an array copy.
Dialogue: 0,0:48:08.05,0:48:10.65,中文,,0,0,0,,否则 我们就用一个数组复制
Dialogue: 0,0:48:10.65,0:48:15.40,英文,,0,0,0,,And that'll make something really hard to decide whether or not something is immutable or not.
Dialogue: 0,0:48:10.65,0:48:15.40,中文,,0,0,0,,这将使得很难判断某样东西是否是不可变的
Dialogue: 0,0:48:15.40,0:48:20.38,英文,,0,0,0,,Like, if something's always going to yield the case where we do an array copy, then it's technically immutable.
Dialogue: 0,0:48:15.40,0:48:20.38,中文,,0,0,0,,比如 如果某样东西总是导致我们进行数组复制 那么从技术上讲它是不可变的
Dialogue: 0,0:48:20.38,0:48:21.91,英文,,0,0,0,,It's fine.
Dialogue: 0,0:48:20.38,0:48:21.91,中文,,0,0,0,,没问题
Dialogue: 0,0:48:21.91,0:48:24.93,英文,,0,0,0,,So Java's just not going to do all those checks.
Dialogue: 0,0:48:21.91,0:48:24.93,中文,,0,0,0,,Java就是不会做所有那些检查
Dialogue: 0,0:48:24.93,0:48:27.41,英文,,0,0,0,,It's impossible for it to do those checks.
Dialogue: 0,0:48:24.93,0:48:27.41,中文,,0,0,0,,它不可能做那些检查
Dialogue: 0,0:48:27.41,0:48:37.84,英文,,0,0,0,,If you could, then you actually end up solving the halting problem, which, for those of you who've taken 70, I think you just covered is impossible to do.
Dialogue: 0,0:48:27.41,0:48:37.84,中文,,0,0,0,,如果可以的话 实际上你就解决了停机问题 对于你们中已经上过70的人 我想你刚刚涉及到的是不可能做的
Dialogue: 0,0:48:37.84,0:48:41.51,英文,,0,0,0,,So yeah, if you can do it, then congratulations.
Dialogue: 0,0:48:37.84,0:48:41.51,中文,,0,0,0,,如果你能做到 那么恭喜你
Dialogue: 0,0:48:41.51,0:48:48.88,英文,,0,0,0,,You've just destroyed mathematics.
Dialogue: 0,0:48:41.51,0:48:48.88,中文,,0,0,0,,你刚刚摧毁了数学
Dialogue: 0,0:48:48.88,0:48:53.84,英文,,0,0,0,,So yeah, general rule, do not use mutable objects for keys.
Dialogue: 0,0:48:48.88,0:48:53.84,中文,,0,0,0,,一般规则是 不要用可变对象作为键
Dialogue: 0,0:48:53.84,0:48:55.18,英文,,0,0,0,,This is actually true in Python.
Dialogue: 0,0:48:53.84,0:48:55.18,中文,,0,0,0,,这在Python中确实是真的
Dialogue: 0,0:48:55.18,0:48:57.52,英文,,0,0,0,,Python uses hash tables for dictionaries.
Dialogue: 0,0:48:55.18,0:48:57.52,中文,,0,0,0,,Python 使用哈希表来实现字典
Dialogue: 0,0:48:57.52,0:49:02.90,英文,,0,0,0,,And if you try to use a mutable object as a dictionary key, then it'll just complain and say that you can't do that.
Dialogue: 0,0:48:57.52,0:49:02.90,中文,,0,0,0,,如果你试图使用可变对象作为字典的键 那么它会抱怨并告诉你不能这样做
Dialogue: 0,0:49:02.90,0:49:09.21,英文,,0,0,0,,I think generally, it just relies on the assumption that just generic objects, like lists, are considered mutable.
Dialogue: 0,0:49:02.90,0:49:09.21,中文,,0,0,0,,我认为通常情况下 它只是依赖于这样的假设：像列表这样的通用对象被视为可变的
Dialogue: 0,0:49:09.21,0:49:11.65,英文,,0,0,0,,So it won't let you use lists as a type.
Dialogue: 0,0:49:09.21,0:49:11.65,中文,,0,0,0,,它不会让你使用列表作为类型
Dialogue: 0,0:49:11.65,0:49:19.03,英文,,0,0,0,,But it will let you use tuples, because tuples are considered immutable.
Dialogue: 0,0:49:11.65,0:49:19.03,中文,,0,0,0,,但它会让你使用元组 因为元组被视为不可变的
Dialogue: 0,0:49:19.03,0:49:24.67,英文,,0,0,0,,Now, I can speed run through this in a minute.
Dialogue: 0,0:49:19.03,0:49:24.67,中文,,0,0,0,,现在 我可以在一分钟内快速浏览一遍这个
Dialogue: 0,0:49:24.67,0:49:27.87,英文,,0,0,0,,This is kind of a quick look at how the hash set actually works.
Dialogue: 0,0:49:24.67,0:49:27.87,中文,,0,0,0,,这只是一个快速了解哈希集如何工作的简要介绍
Dialogue: 0,0:49:27.87,0:49:31.48,英文,,0,0,0,,As it turns out, the hash set is just a hash map in Java.
Dialogue: 0,0:49:27.87,0:49:31.48,中文,,0,0,0,,原来 哈希集合在Java中就是一个哈希映射
Dialogue: 0,0:49:31.48,0:49:35.08,英文,,0,0,0,,It doesn't set anything to anything.
Dialogue: 0,0:49:31.48,0:49:35.08,中文,,0,0,0,,它不会将任何东西设置为任何东西
Dialogue: 0,0:49:35.08,0:49:38.30,英文,,0,0,0,,If you have a wheel, then don't make a second slightly different wheel.
Dialogue: 0,0:49:35.08,0:49:38.30,中文,,0,0,0,,如果你已经有了一个轮子 那就不要再造一个稍微不同的轮子了
Dialogue: 0,0:49:38.30,0:49:40.86,英文,,0,0,0,,Just use the old wheel.
Dialogue: 0,0:49:38.30,0:49:40.86,中文,,0,0,0,,只需使用旧轮子
Dialogue: 0,0:49:40.86,0:49:44.63,英文,,0,0,0,,As it turns out, it uses this strange reduction function that's slightly different.
Dialogue: 0,0:49:40.86,0:49:44.63,中文,,0,0,0,,事实证明 它使用了这个稍微不同的奇怪的缩减函数
Dialogue: 0,0:49:44.63,0:49:49.04,英文,,0,0,0,,It doesn't really matter what it is.
Dialogue: 0,0:49:44.63,0:49:49.04,中文,,0,0,0,,它实际上是什么并不重要
Dialogue: 0,0:49:49.04,0:49:51.66,英文,,0,0,0,,But it's actually kind of cool that it uses this weird one.
Dialogue: 0,0:49:49.04,0:49:51.66,中文,,0,0,0,,但实际上它使用这个奇怪的缩减函数还挺酷的
Dialogue: 0,0:49:51.66,0:49:56.91,英文,,0,0,0,,The hash table size starts at 16 and then doubles every time the load factor exceeds 0.75.
Dialogue: 0,0:49:51.66,0:49:56.91,中文,,0,0,0,,哈希表大小从16开始 每次负载因子超过0.75时都会加倍
Dialogue: 0,0:49:56.91,0:50:00.69,英文,,0,0,0,,That's actually why we were seeing so rare collisions.
Dialogue: 0,0:49:56.91,0:50:00.69,中文,,0,0,0,,这就是为什么我们几乎看不到碰撞的原因
Dialogue: 0,0:50:00.69,0:50:07.34,英文,,0,0,0,,It uses such a low factor that you, on average, don't get any collisions at all.
Dialogue: 0,0:50:00.69,0:50:07.34,中文,,0,0,0,,它使用了如此低的因子 以至于平均而言 根本就不会发生任何碰撞
Dialogue: 0,0:50:07.34,0:50:08.98,英文,,0,0,0,,The reduced function is somewhat complicated.
Dialogue: 0,0:50:07.34,0:50:08.98,中文,,0,0,0,,减少函数有些复杂
Dialogue: 0,0:50:08.98,0:50:14.61,英文,,0,0,0,,Please come talk to me after lecture if you want to learn more about it.
Dialogue: 0,0:50:08.98,0:50:14.61,中文,,0,0,0,,如果你想更多地了解 请在讲座结束后与我交谈
Dialogue: 0,0:50:14.61,0:50:25.10,英文,,0,0,0,,Josh did write a hash set probe that checked out what's going on, and you can kind of see this behavior, where n over m just never exceeds 0.75.
Dialogue: 0,0:50:14.61,0:50:25.10,中文,,0,0,0,,Josh确实编写了一个哈希集探针 检查发生了什么 你可以在这种行为中有点看到 其中 N/M 从未超过0.75
Dialogue: 0,0:50:25.10,0:50:33.51,英文,,0,0,0,,And if you run the simulation to see what happens if the load factor is kept at 0.75, you'll see that the longest bucket stays around 5-ish.
Dialogue: 0,0:50:25.10,0:50:33.51,中文,,0,0,0,,如果你运行模拟来查看负载因子保持在0.75时会发生什么 你会看到最长的桶大约保持在5左右
Dialogue: 0,0:50:33.51,0:50:42.73,英文,,0,0,0,,In CS70, you actually use this to devise this balls-into-bins problem, which can show that the worst-case runtime is slightly worse than constant on average.
Dialogue: 0,0:50:33.51,0:50:42.73,中文,,0,0,0,,在CS70中 你实际上会使用这个来设计这个球进箱子的问题 这可以展示最坏情况下的运行时间比平均略差一些
Dialogue: 0,0:50:42.73,0:50:45.03,英文,,0,0,0,,So it's going to be fairly good.
Dialogue: 0,0:50:42.73,0:50:45.03,中文,,0,0,0,,它会相当不错
Dialogue: 0,0:50:45.03,0:50:46.77,英文,,0,0,0,,On average, you're going to be perfectly fine.
Dialogue: 0,0:50:45.03,0:50:46.77,中文,,0,0,0,,平均而言 你会完全没问题
Dialogue: 0,0:50:46.77,0:50:49.11,英文,,0,0,0,,It's going to be constant time.
Dialogue: 0,0:50:46.77,0:50:49.11,中文,,0,0,0,,这将是常数时间
Dialogue: 0,0:50:49.11,0:50:51.56,英文,,0,0,0,,Now, another interesting thing.
Dialogue: 0,0:50:49.11,0:50:51.56,中文,,0,0,0,,现在 另一个有趣的事情
Dialogue: 0,0:50:51.56,0:51:00.65,英文,,0,0,0,,is that Java actually ends up using a red-black tree if the bin gets too big, just on that off chance that the bin gets really huge, that our hash code is really bad.
Dialogue: 0,0:50:51.56,0:51:00.65,中文,,0,0,0,,是Java实际上会在箱子变得太大时使用红黑树 只是为了防止箱子变得非常庞大 使得我们的哈希码非常糟糕
Dialogue: 0,0:51:00.65,0:51:04.78,英文,,0,0,0,,So even in the worst-case scenario, you end up getting log n runtime here.
Dialogue: 0,0:51:00.65,0:51:04.78,中文,,0,0,0,,即使在最坏情况下 你最终会得到log n的运行时间
Dialogue: 0,0:51:04.78,0:51:10.64,英文,,0,0,0,,So this is strictly better than an LLRB for this.
Dialogue: 0,0:51:04.78,0:51:10.64,中文,,0,0,0,,这比LLRB严格好 好在哪呢
Dialogue: 0,0:51:10.64,0:51:11.54,英文,,0,0,0,,All right.
Dialogue: 0,0:51:11.54,0:51:13.63,英文,,0,0,0,,That's all for today.
Dialogue: 0,0:51:11.54,0:51:13.63,中文,,0,0,0,,今天就这样吧
Dialogue: 0,0:51:13.63,0:51:14.87,英文,,0,0,0,,Thank you.
Dialogue: 0,0:51:13.63,0:51:14.87,中文,,0,0,0,,谢谢
